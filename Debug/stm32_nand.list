
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016144  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ebc  080162d4  080162d4  000262d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a190  0801a190  00030130  2**0
                  CONTENTS
  4 .ARM          00000008  0801a190  0801a190  0002a190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a198  0801a198  00030130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a198  0801a198  0002a198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a19c  0801a19c  0002a19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  0801a1a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030130  2**0
                  CONTENTS
 10 .bss          00008c08  20000130  20000130  00030130  2**3
                  ALLOC
 11 ._user_heap_stack 00001400  20008d38  20008d38  00030130  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002da98  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050cb  00000000  00000000  0005dbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002418  00000000  00000000  00062cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007f78  00000000  00000000  000650e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002abac  00000000  00000000  0006d058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9d0b  00000000  00000000  00097c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018190f  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00002488  00000000  00000000  00181960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000aa24  00000000  00000000  00183de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000130 	.word	0x20000130
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080162bc 	.word	0x080162bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000134 	.word	0x20000134
 80001cc:	080162bc 	.word	0x080162bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9d3 	b.w	8000c54 <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f861 	bl	8000984 <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f854 	bl	8000984 <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f843 	bl	8000984 <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f835 	bl	8000984 <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b988 	b.w	8000c54 <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f81a 	bl	8000984 <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__popcountsi2>:
 800095c:	0843      	lsrs	r3, r0, #1
 800095e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000962:	1ac0      	subs	r0, r0, r3
 8000964:	0883      	lsrs	r3, r0, #2
 8000966:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800096a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 800096e:	4418      	add	r0, r3
 8000970:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000974:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000978:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 800097c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000980:	0e00      	lsrs	r0, r0, #24
 8000982:	4770      	bx	lr

08000984 <__udivmoddi4>:
 8000984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000988:	9d08      	ldr	r5, [sp, #32]
 800098a:	4604      	mov	r4, r0
 800098c:	468e      	mov	lr, r1
 800098e:	2b00      	cmp	r3, #0
 8000990:	d14d      	bne.n	8000a2e <__udivmoddi4+0xaa>
 8000992:	428a      	cmp	r2, r1
 8000994:	4694      	mov	ip, r2
 8000996:	d969      	bls.n	8000a6c <__udivmoddi4+0xe8>
 8000998:	fab2 f282 	clz	r2, r2
 800099c:	b152      	cbz	r2, 80009b4 <__udivmoddi4+0x30>
 800099e:	fa01 f302 	lsl.w	r3, r1, r2
 80009a2:	f1c2 0120 	rsb	r1, r2, #32
 80009a6:	fa20 f101 	lsr.w	r1, r0, r1
 80009aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ae:	ea41 0e03 	orr.w	lr, r1, r3
 80009b2:	4094      	lsls	r4, r2
 80009b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b8:	0c21      	lsrs	r1, r4, #16
 80009ba:	fbbe f6f8 	udiv	r6, lr, r8
 80009be:	fa1f f78c 	uxth.w	r7, ip
 80009c2:	fb08 e316 	mls	r3, r8, r6, lr
 80009c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009ca:	fb06 f107 	mul.w	r1, r6, r7
 80009ce:	4299      	cmp	r1, r3
 80009d0:	d90a      	bls.n	80009e8 <__udivmoddi4+0x64>
 80009d2:	eb1c 0303 	adds.w	r3, ip, r3
 80009d6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009da:	f080 811f 	bcs.w	8000c1c <__udivmoddi4+0x298>
 80009de:	4299      	cmp	r1, r3
 80009e0:	f240 811c 	bls.w	8000c1c <__udivmoddi4+0x298>
 80009e4:	3e02      	subs	r6, #2
 80009e6:	4463      	add	r3, ip
 80009e8:	1a5b      	subs	r3, r3, r1
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80009f0:	fb08 3310 	mls	r3, r8, r0, r3
 80009f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009f8:	fb00 f707 	mul.w	r7, r0, r7
 80009fc:	42a7      	cmp	r7, r4
 80009fe:	d90a      	bls.n	8000a16 <__udivmoddi4+0x92>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a08:	f080 810a 	bcs.w	8000c20 <__udivmoddi4+0x29c>
 8000a0c:	42a7      	cmp	r7, r4
 8000a0e:	f240 8107 	bls.w	8000c20 <__udivmoddi4+0x29c>
 8000a12:	4464      	add	r4, ip
 8000a14:	3802      	subs	r0, #2
 8000a16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a1a:	1be4      	subs	r4, r4, r7
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	b11d      	cbz	r5, 8000a28 <__udivmoddi4+0xa4>
 8000a20:	40d4      	lsrs	r4, r2
 8000a22:	2300      	movs	r3, #0
 8000a24:	e9c5 4300 	strd	r4, r3, [r5]
 8000a28:	4631      	mov	r1, r6
 8000a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2e:	428b      	cmp	r3, r1
 8000a30:	d909      	bls.n	8000a46 <__udivmoddi4+0xc2>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	f000 80ef 	beq.w	8000c16 <__udivmoddi4+0x292>
 8000a38:	2600      	movs	r6, #0
 8000a3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a3e:	4630      	mov	r0, r6
 8000a40:	4631      	mov	r1, r6
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	fab3 f683 	clz	r6, r3
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d14a      	bne.n	8000ae4 <__udivmoddi4+0x160>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d302      	bcc.n	8000a58 <__udivmoddi4+0xd4>
 8000a52:	4282      	cmp	r2, r0
 8000a54:	f200 80f9 	bhi.w	8000c4a <__udivmoddi4+0x2c6>
 8000a58:	1a84      	subs	r4, r0, r2
 8000a5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a5e:	2001      	movs	r0, #1
 8000a60:	469e      	mov	lr, r3
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	d0e0      	beq.n	8000a28 <__udivmoddi4+0xa4>
 8000a66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a6a:	e7dd      	b.n	8000a28 <__udivmoddi4+0xa4>
 8000a6c:	b902      	cbnz	r2, 8000a70 <__udivmoddi4+0xec>
 8000a6e:	deff      	udf	#255	; 0xff
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	f040 8092 	bne.w	8000b9e <__udivmoddi4+0x21a>
 8000a7a:	eba1 010c 	sub.w	r1, r1, ip
 8000a7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a82:	fa1f fe8c 	uxth.w	lr, ip
 8000a86:	2601      	movs	r6, #1
 8000a88:	0c20      	lsrs	r0, r4, #16
 8000a8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000a92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a96:	fb0e f003 	mul.w	r0, lr, r3
 8000a9a:	4288      	cmp	r0, r1
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x12c>
 8000a9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0x12a>
 8000aa8:	4288      	cmp	r0, r1
 8000aaa:	f200 80cb 	bhi.w	8000c44 <__udivmoddi4+0x2c0>
 8000aae:	4643      	mov	r3, r8
 8000ab0:	1a09      	subs	r1, r1, r0
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab8:	fb07 1110 	mls	r1, r7, r0, r1
 8000abc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ac0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ac4:	45a6      	cmp	lr, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x156>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ad0:	d202      	bcs.n	8000ad8 <__udivmoddi4+0x154>
 8000ad2:	45a6      	cmp	lr, r4
 8000ad4:	f200 80bb 	bhi.w	8000c4e <__udivmoddi4+0x2ca>
 8000ad8:	4608      	mov	r0, r1
 8000ada:	eba4 040e 	sub.w	r4, r4, lr
 8000ade:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ae2:	e79c      	b.n	8000a1e <__udivmoddi4+0x9a>
 8000ae4:	f1c6 0720 	rsb	r7, r6, #32
 8000ae8:	40b3      	lsls	r3, r6
 8000aea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000af2:	fa20 f407 	lsr.w	r4, r0, r7
 8000af6:	fa01 f306 	lsl.w	r3, r1, r6
 8000afa:	431c      	orrs	r4, r3
 8000afc:	40f9      	lsrs	r1, r7
 8000afe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b02:	fa00 f306 	lsl.w	r3, r0, r6
 8000b06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b0a:	0c20      	lsrs	r0, r4, #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fb09 1118 	mls	r1, r9, r8, r1
 8000b14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b18:	fb08 f00e 	mul.w	r0, r8, lr
 8000b1c:	4288      	cmp	r0, r1
 8000b1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b22:	d90b      	bls.n	8000b3c <__udivmoddi4+0x1b8>
 8000b24:	eb1c 0101 	adds.w	r1, ip, r1
 8000b28:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b2c:	f080 8088 	bcs.w	8000c40 <__udivmoddi4+0x2bc>
 8000b30:	4288      	cmp	r0, r1
 8000b32:	f240 8085 	bls.w	8000c40 <__udivmoddi4+0x2bc>
 8000b36:	f1a8 0802 	sub.w	r8, r8, #2
 8000b3a:	4461      	add	r1, ip
 8000b3c:	1a09      	subs	r1, r1, r0
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b44:	fb09 1110 	mls	r1, r9, r0, r1
 8000b48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	458e      	cmp	lr, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x1e2>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b5c:	d26c      	bcs.n	8000c38 <__udivmoddi4+0x2b4>
 8000b5e:	458e      	cmp	lr, r1
 8000b60:	d96a      	bls.n	8000c38 <__udivmoddi4+0x2b4>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b6e:	eba1 010e 	sub.w	r1, r1, lr
 8000b72:	42a1      	cmp	r1, r4
 8000b74:	46c8      	mov	r8, r9
 8000b76:	46a6      	mov	lr, r4
 8000b78:	d356      	bcc.n	8000c28 <__udivmoddi4+0x2a4>
 8000b7a:	d053      	beq.n	8000c24 <__udivmoddi4+0x2a0>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x212>
 8000b7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b82:	eb61 010e 	sbc.w	r1, r1, lr
 8000b86:	fa01 f707 	lsl.w	r7, r1, r7
 8000b8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b8e:	40f1      	lsrs	r1, r6
 8000b90:	431f      	orrs	r7, r3
 8000b92:	e9c5 7100 	strd	r7, r1, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ba2:	40d8      	lsrs	r0, r3
 8000ba4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bac:	4091      	lsls	r1, r2
 8000bae:	4301      	orrs	r1, r0
 8000bb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000bc0:	0c0b      	lsrs	r3, r1, #16
 8000bc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000bca:	429e      	cmp	r6, r3
 8000bcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x260>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bda:	d22f      	bcs.n	8000c3c <__udivmoddi4+0x2b8>
 8000bdc:	429e      	cmp	r6, r3
 8000bde:	d92d      	bls.n	8000c3c <__udivmoddi4+0x2b8>
 8000be0:	3802      	subs	r0, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1b9b      	subs	r3, r3, r6
 8000be6:	b289      	uxth	r1, r1
 8000be8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bec:	fb07 3316 	mls	r3, r7, r6, r3
 8000bf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x28a>
 8000bfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000c00:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000c04:	d216      	bcs.n	8000c34 <__udivmoddi4+0x2b0>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d914      	bls.n	8000c34 <__udivmoddi4+0x2b0>
 8000c0a:	3e02      	subs	r6, #2
 8000c0c:	4461      	add	r1, ip
 8000c0e:	1ac9      	subs	r1, r1, r3
 8000c10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c14:	e738      	b.n	8000a88 <__udivmoddi4+0x104>
 8000c16:	462e      	mov	r6, r5
 8000c18:	4628      	mov	r0, r5
 8000c1a:	e705      	b.n	8000a28 <__udivmoddi4+0xa4>
 8000c1c:	4606      	mov	r6, r0
 8000c1e:	e6e3      	b.n	80009e8 <__udivmoddi4+0x64>
 8000c20:	4618      	mov	r0, r3
 8000c22:	e6f8      	b.n	8000a16 <__udivmoddi4+0x92>
 8000c24:	454b      	cmp	r3, r9
 8000c26:	d2a9      	bcs.n	8000b7c <__udivmoddi4+0x1f8>
 8000c28:	ebb9 0802 	subs.w	r8, r9, r2
 8000c2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c30:	3801      	subs	r0, #1
 8000c32:	e7a3      	b.n	8000b7c <__udivmoddi4+0x1f8>
 8000c34:	4646      	mov	r6, r8
 8000c36:	e7ea      	b.n	8000c0e <__udivmoddi4+0x28a>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	e794      	b.n	8000b66 <__udivmoddi4+0x1e2>
 8000c3c:	4640      	mov	r0, r8
 8000c3e:	e7d1      	b.n	8000be4 <__udivmoddi4+0x260>
 8000c40:	46d0      	mov	r8, sl
 8000c42:	e77b      	b.n	8000b3c <__udivmoddi4+0x1b8>
 8000c44:	3b02      	subs	r3, #2
 8000c46:	4461      	add	r1, ip
 8000c48:	e732      	b.n	8000ab0 <__udivmoddi4+0x12c>
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	e709      	b.n	8000a62 <__udivmoddi4+0xde>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	e742      	b.n	8000ada <__udivmoddi4+0x156>

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <tmpPrint>:
	uint8_t tmpBuf[32] = {0};
	uint8_t tmpLen = 0;
	char tmpChar[256];

	void tmpPrint(const char *func, uint8_t *buf, uint8_t len)
	{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	4613      	mov	r3, r2
 8000c64:	71fb      	strb	r3, [r7, #7]
		strcpy(tmpChar, "to_nand:");
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <tmpPrint+0x5c>)
 8000c68:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <tmpPrint+0x60>)
 8000c6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c6c:	c303      	stmia	r3!, {r0, r1}
 8000c6e:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++) sprintf(tmpChar+strlen(tmpChar), " %02X", *(uint8_t *)(buf + i));
 8000c70:	2300      	movs	r3, #0
 8000c72:	75fb      	strb	r3, [r7, #23]
 8000c74:	e010      	b.n	8000c98 <tmpPrint+0x40>
 8000c76:	480f      	ldr	r0, [pc, #60]	; (8000cb4 <tmpPrint+0x5c>)
 8000c78:	f7ff faaa 	bl	80001d0 <strlen>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <tmpPrint+0x5c>)
 8000c80:	1898      	adds	r0, r3, r2
 8000c82:	7dfb      	ldrb	r3, [r7, #23]
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	4413      	add	r3, r2
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	490b      	ldr	r1, [pc, #44]	; (8000cbc <tmpPrint+0x64>)
 8000c8e:	f014 fd4b 	bl	8015728 <siprintf>
 8000c92:	7dfb      	ldrb	r3, [r7, #23]
 8000c94:	3301      	adds	r3, #1
 8000c96:	75fb      	strb	r3, [r7, #23]
 8000c98:	7dfa      	ldrb	r2, [r7, #23]
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d3ea      	bcc.n	8000c76 <tmpPrint+0x1e>
		Report(0, "\t\t%s\r\n", tmpChar);
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <tmpPrint+0x5c>)
 8000ca2:	4907      	ldr	r1, [pc, #28]	; (8000cc0 <tmpPrint+0x68>)
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f001 fe49 	bl	800293c <Report>
	}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000170 	.word	0x20000170
 8000cb8:	080162d4 	.word	0x080162d4
 8000cbc:	080162e0 	.word	0x080162e0
 8000cc0:	080162e8 	.word	0x080162e8

08000cc4 <io_nand_init>:
#endif


//-------------------------------------------------------------------------------------------
void io_nand_init(NAND_HandleTypeDef *hnand)
{
 8000cc4:	b5b0      	push	{r4, r5, r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    if (HAL_NAND_RegisterCallback(hnand, HAL_NAND_IT_CB_ID, HAL_NAND_ITCallback) == HAL_ERROR) devError |= devNAND;
#endif

    if (NAND_Read_ID(hnand, &nandID) == HAL_OK) {//read ID information from chip
 8000ccc:	491c      	ldr	r1, [pc, #112]	; (8000d40 <io_nand_init+0x7c>)
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 f864 	bl	8000d9c <NAND_Read_ID>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d12e      	bne.n	8000d38 <io_nand_init+0x74>

    	nandState = HAL_NAND_GetState(hnand);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f00d f994 	bl	800e008 <HAL_NAND_GetState>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <io_nand_init+0x80>)
 8000ce6:	701a      	strb	r2, [r3, #0]

    	memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand->Config, sizeof(s_chipConf));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <io_nand_init+0x84>)
 8000cf0:	6810      	ldr	r0, [r2, #0]
 8000cf2:	6851      	ldr	r1, [r2, #4]
 8000cf4:	6895      	ldr	r5, [r2, #8]
 8000cf6:	68d4      	ldr	r4, [r2, #12]
 8000cf8:	6018      	str	r0, [r3, #0]
 8000cfa:	6059      	str	r1, [r3, #4]
 8000cfc:	609d      	str	r5, [r3, #8]
 8000cfe:	60dc      	str	r4, [r3, #12]
 8000d00:	6910      	ldr	r0, [r2, #16]
 8000d02:	6951      	ldr	r1, [r2, #20]
 8000d04:	6118      	str	r0, [r3, #16]
 8000d06:	6159      	str	r1, [r3, #20]
    	chipConf.PlaneSize *= chipConf.BlockNbr;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <io_nand_init+0x84>)
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <io_nand_init+0x84>)
 8000d0e:	68d2      	ldr	r2, [r2, #12]
 8000d10:	fb02 f303 	mul.w	r3, r2, r3
 8000d14:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <io_nand_init+0x84>)
 8000d16:	6153      	str	r3, [r2, #20]

    	total_pages = chipConf.BlockSize * chipConf.BlockNbr;
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <io_nand_init+0x84>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <io_nand_init+0x84>)
 8000d1e:	68d2      	ldr	r2, [r2, #12]
 8000d20:	fb02 f303 	mul.w	r3, r2, r3
 8000d24:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <io_nand_init+0x88>)
 8000d26:	6013      	str	r3, [r2, #0]
    	total_bytes = total_pages * chipConf.PageSize;//chipConf.PlaneSize;
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <io_nand_init+0x84>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <io_nand_init+0x88>)
 8000d2e:	6812      	ldr	r2, [r2, #0]
 8000d30:	fb02 f303 	mul.w	r3, r2, r3
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <io_nand_init+0x8c>)
 8000d36:	6013      	str	r3, [r2, #0]

    }

}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d40:	200015d0 	.word	0x200015d0
 8000d44:	20000089 	.word	0x20000089
 8000d48:	200015d8 	.word	0x200015d8
 8000d4c:	200015b0 	.word	0x200015b0
 8000d50:	200015b4 	.word	0x200015b4

08000d54 <io_nand_get_page_size>:
//-------------------------------------------------------------------------------------------
uint32_t io_nand_get_page_size(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
    return chipConf.PageSize;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <io_nand_get_page_size+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200015d8 	.word	0x200015d8

08000d6c <io_nand_get_block_number>:
uint32_t io_nand_get_block_number(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
	return chipConf.BlockNbr;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <io_nand_get_block_number+0x14>)
 8000d72:	68db      	ldr	r3, [r3, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200015d8 	.word	0x200015d8

08000d84 <io_nand_get_block_size>:
uint32_t io_nand_get_block_size(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	return chipConf.BlockSize;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <io_nand_get_block_size+0x14>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	200015d8 	.word	0x200015d8

08000d9c <NAND_Read_ID>:
{
	return chipConf.PlaneSize;
}
//-----------------------------------------------------------------------------------------
HAL_StatusTypeDef NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d101      	bne.n	8000db6 <NAND_Read_ID+0x1a>

		return HAL_BUSY;
 8000db2:	2302      	movs	r3, #2
 8000db4:	e059      	b.n	8000e6a <NAND_Read_ID+0xce>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d152      	bne.n	8000e68 <NAND_Read_ID+0xcc>

		__HAL_LOCK(hnand);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d101      	bne.n	8000dd0 <NAND_Read_ID+0x34>
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e04c      	b.n	8000e6a <NAND_Read_ID+0xce>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2202      	movs	r2, #2
 8000ddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    	devAdr = NAND_DEVICE1;
	    } else {
	    	devAdr = NAND_DEVICE2;
	    }
#else
	    devAdr = NAND_DEVICE;//MY_NAND_DEVICE;
 8000de0:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <NAND_Read_ID+0xdc>)
 8000de2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000de6:	601a      	str	r2, [r3, #0]
#endif

	    /* Send Read ID command sequence */
	    *(__IO uint8_t *)((uint32_t)(devAdr | CMD_AREA))  = NAND_CMD_READID;
 8000de8:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <NAND_Read_ID+0xdc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df0:	2290      	movs	r2, #144	; 0x90
 8000df2:	701a      	strb	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000df4:	f3bf 8f4f 	dsb	sy
}
 8000df8:	bf00      	nop
	    __DSB();
	    *(__IO uint8_t *)((uint32_t)(devAdr | ADDR_AREA)) = 0x00;
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <NAND_Read_ID+0xdc>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e06:	f3bf 8f4f 	dsb	sy
}
 8000e0a:	bf00      	nop
	    __DSB();

	    /* Read the electronic signature from NAND flash */
	    if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d123      	bne.n	8000e5c <NAND_Read_ID+0xc0>
	    	__IO uint32_t data  = *(__IO uint32_t *)devAdr;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <NAND_Read_ID+0xdc>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	60fb      	str	r3, [r7, #12]
	    	__IO uint32_t data1 = *((__IO uint32_t *)devAdr + 4);
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <NAND_Read_ID+0xdc>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3310      	adds	r3, #16
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60bb      	str	r3, [r7, #8]

	    	pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	701a      	strb	r2, [r3, #0]
	    	pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	705a      	strb	r2, [r3, #1]
	    	pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	0c1b      	lsrs	r3, r3, #16
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	709a      	strb	r2, [r3, #2]
	    	pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	0e1b      	lsrs	r3, r3, #24
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	70da      	strb	r2, [r3, #3]
	    	pNAND_ID->Plane_Id   = ADDR_1ST_CYCLE(data1);
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	711a      	strb	r2, [r3, #4]


	    	hnand->State = HAL_NAND_STATE_READY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2201      	movs	r2, #1
 8000e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    }

	    __HAL_UNLOCK(hnand);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	e000      	b.n	8000e6a <NAND_Read_ID+0xce>
	    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	200015b8 	.word	0x200015b8

08000e7c <io_nand_read_8b>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_read_8b (uint32_t adr, uint8_t *pBuffer, uint32_t size, uint16_t offset)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b090      	sub	sp, #64	; 0x40
 8000e80:	af04      	add	r7, sp, #16
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	807b      	strh	r3, [r7, #2]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(adr);
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	68f9      	ldr	r1, [r7, #12]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fd01 	bl	8001898 <io_uint32_to_flash_adr>


    if (nandPort->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 8000e96:	4b6c      	ldr	r3, [pc, #432]	; (8001048 <io_nand_read_8b+0x1cc>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d101      	bne.n	8000ea8 <io_nand_read_8b+0x2c>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e1e4      	b.n	8001272 <io_nand_read_8b+0x3f6>

    __HAL_LOCK(nandPort);
 8000ea8:	4b67      	ldr	r3, [pc, #412]	; (8001048 <io_nand_read_8b+0x1cc>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d101      	bne.n	8000eb8 <io_nand_read_8b+0x3c>
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e1dc      	b.n	8001272 <io_nand_read_8b+0x3f6>
 8000eb8:	4b63      	ldr	r3, [pc, #396]	; (8001048 <io_nand_read_8b+0x1cc>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f883 2020 	strb.w	r2, [r3, #32]
    nandPort->State = HAL_NAND_STATE_BUSY;
 8000ec2:	4b61      	ldr	r3, [pc, #388]	; (8001048 <io_nand_read_8b+0x1cc>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    uint32_t deviceaddress = devAdr;
 8000ecc:	4b5f      	ldr	r3, [pc, #380]	; (800104c <io_nand_read_8b+0x1d0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 8000ed2:	8a3b      	ldrh	r3, [r7, #16]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	8abb      	ldrh	r3, [r7, #20]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	8a7b      	ldrh	r3, [r7, #18]
 8000edc:	4618      	mov	r0, r3
 8000ede:	4b5a      	ldr	r3, [pc, #360]	; (8001048 <io_nand_read_8b+0x1cc>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee4:	fb00 f303 	mul.w	r3, r0, r3
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a57      	ldr	r2, [pc, #348]	; (8001048 <io_nand_read_8b+0x1cc>)
 8000eec:	6812      	ldr	r2, [r2, #0]
 8000eee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ef0:	fb02 f303 	mul.w	r3, r2, r3
 8000ef4:	440b      	add	r3, r1
 8000ef6:	623b      	str	r3, [r7, #32]

    if (dbg > logOn)
 8000ef8:	4b55      	ldr	r3, [pc, #340]	; (8001050 <io_nand_read_8b+0x1d4>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d910      	bls.n	8000f22 <io_nand_read_8b+0xa6>
        	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%u\r\n",
        	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 8000f00:	8a3b      	ldrh	r3, [r7, #16]
        	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%u\r\n",
 8000f02:	461a      	mov	r2, r3
        	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 8000f04:	8a7b      	ldrh	r3, [r7, #18]
        	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%u\r\n",
 8000f06:	4619      	mov	r1, r3
        	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 8000f08:	8abb      	ldrh	r3, [r7, #20]
        	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%u\r\n",
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	9303      	str	r3, [sp, #12]
 8000f10:	9002      	str	r0, [sp, #8]
 8000f12:	9101      	str	r1, [sp, #4]
 8000f14:	9200      	str	r2, [sp, #0]
 8000f16:	6a3b      	ldr	r3, [r7, #32]
 8000f18:	4a4e      	ldr	r2, [pc, #312]	; (8001054 <io_nand_read_8b+0x1d8>)
 8000f1a:	494f      	ldr	r1, [pc, #316]	; (8001058 <io_nand_read_8b+0x1dc>)
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f001 fd0d 	bl	800293c <Report>

#ifdef SET_NAND_CMD
    bool tflag = true;
 8000f22:	2301      	movs	r3, #1
 8000f24:	77fb      	strb	r3, [r7, #31]
    memset(tmpBuf, 0, sizeof(tmpBuf));
 8000f26:	2220      	movs	r2, #32
 8000f28:	2100      	movs	r1, #0
 8000f2a:	484c      	ldr	r0, [pc, #304]	; (800105c <io_nand_read_8b+0x1e0>)
 8000f2c:	f013 ff94 	bl	8014e58 <memset>
    tmpLen = 0;
 8000f30:	4b4b      	ldr	r3, [pc, #300]	; (8001060 <io_nand_read_8b+0x1e4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
#else
    bool tflag = false;
#endif

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f40:	f3bf 8f4f 	dsb	sy
}
 8000f44:	bf00      	nop
    __DSB();

    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_A;
 8000f46:	7ffb      	ldrb	r3, [r7, #31]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d009      	beq.n	8000f60 <io_nand_read_8b+0xe4>
 8000f4c:	4b44      	ldr	r3, [pc, #272]	; (8001060 <io_nand_read_8b+0x1e4>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	b2d1      	uxtb	r1, r2
 8000f54:	4a42      	ldr	r2, [pc, #264]	; (8001060 <io_nand_read_8b+0x1e4>)
 8000f56:	7011      	strb	r1, [r2, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b40      	ldr	r3, [pc, #256]	; (800105c <io_nand_read_8b+0x1e0>)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	5499      	strb	r1, [r3, r2]

    // Cards with page size <= 512 bytes
    if ((nandPort->Config.PageSize) <= 512U) {
 8000f60:	4b39      	ldr	r3, [pc, #228]	; (8001048 <io_nand_read_8b+0x1cc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f6a:	d87b      	bhi.n	8001064 <io_nand_read_8b+0x1e8>
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f78:	f3bf 8f4f 	dsb	sy
}
 8000f7c:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);;
 8000f7e:	7ffb      	ldrb	r3, [r7, #31]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00a      	beq.n	8000f9a <io_nand_read_8b+0x11e>
 8000f84:	4b36      	ldr	r3, [pc, #216]	; (8001060 <io_nand_read_8b+0x1e4>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	b2d1      	uxtb	r1, r2
 8000f8c:	4a34      	ldr	r2, [pc, #208]	; (8001060 <io_nand_read_8b+0x1e4>)
 8000f8e:	7011      	strb	r1, [r2, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	b2d9      	uxtb	r1, r3
 8000f96:	4b31      	ldr	r3, [pc, #196]	; (800105c <io_nand_read_8b+0x1e0>)
 8000f98:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	6a3a      	ldr	r2, [r7, #32]
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa6:	f3bf 8f4f 	dsb	sy
}
 8000faa:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 8000fac:	7ffb      	ldrb	r3, [r7, #31]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00a      	beq.n	8000fc8 <io_nand_read_8b+0x14c>
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <io_nand_read_8b+0x1e4>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	b2d1      	uxtb	r1, r2
 8000fba:	4a29      	ldr	r2, [pc, #164]	; (8001060 <io_nand_read_8b+0x1e4>)
 8000fbc:	7011      	strb	r1, [r2, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	b2d9      	uxtb	r1, r3
 8000fc4:	4b25      	ldr	r3, [pc, #148]	; (800105c <io_nand_read_8b+0x1e0>)
 8000fc6:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	0a1a      	lsrs	r2, r3, #8
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd6:	f3bf 8f4f 	dsb	sy
}
 8000fda:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 8000fdc:	7ffb      	ldrb	r3, [r7, #31]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00b      	beq.n	8000ffa <io_nand_read_8b+0x17e>
 8000fe2:	6a3b      	ldr	r3, [r7, #32]
 8000fe4:	0a19      	lsrs	r1, r3, #8
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <io_nand_read_8b+0x1e4>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	b2d0      	uxtb	r0, r2
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <io_nand_read_8b+0x1e4>)
 8000ff0:	7010      	strb	r0, [r2, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	b2c9      	uxtb	r1, r1
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <io_nand_read_8b+0x1e0>)
 8000ff8:	5499      	strb	r1, [r3, r2]
        if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <io_nand_read_8b+0x1cc>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001000:	4a11      	ldr	r2, [pc, #68]	; (8001048 <io_nand_read_8b+0x1cc>)
 8001002:	6812      	ldr	r2, [r2, #0]
 8001004:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001006:	fb02 f303 	mul.w	r3, r2, r3
 800100a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100e:	f0c0 80af 	bcc.w	8001170 <io_nand_read_8b+0x2f4>
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	0c1a      	lsrs	r2, r3, #16
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001020:	f3bf 8f4f 	dsb	sy
}
 8001024:	bf00      	nop
			__DSB();
			if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 8001026:	7ffb      	ldrb	r3, [r7, #31]
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 80a1 	beq.w	8001170 <io_nand_read_8b+0x2f4>
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	0c19      	lsrs	r1, r3, #16
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <io_nand_read_8b+0x1e4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	b2d0      	uxtb	r0, r2
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <io_nand_read_8b+0x1e4>)
 800103c:	7010      	strb	r0, [r2, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	b2c9      	uxtb	r1, r1
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <io_nand_read_8b+0x1e0>)
 8001044:	5499      	strb	r1, [r3, r2]
 8001046:	e093      	b.n	8001170 <io_nand_read_8b+0x2f4>
 8001048:	2000007c 	.word	0x2000007c
 800104c:	200015b8 	.word	0x200015b8
 8001050:	2000006a 	.word	0x2000006a
 8001054:	08019dc8 	.word	0x08019dc8
 8001058:	080162f0 	.word	0x080162f0
 800105c:	2000014c 	.word	0x2000014c
 8001060:	2000016c 	.word	0x2000016c
        }
    } else {// (hnand->Config.PageSize) > 512
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001070:	f3bf 8f4f 	dsb	sy
}
 8001074:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);
 8001076:	7ffb      	ldrb	r3, [r7, #31]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00a      	beq.n	8001092 <io_nand_read_8b+0x216>
 800107c:	4b7f      	ldr	r3, [pc, #508]	; (800127c <io_nand_read_8b+0x400>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	b2d1      	uxtb	r1, r2
 8001084:	4a7d      	ldr	r2, [pc, #500]	; (800127c <io_nand_read_8b+0x400>)
 8001086:	7011      	strb	r1, [r2, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	b2d9      	uxtb	r1, r3
 800108e:	4b7c      	ldr	r3, [pc, #496]	; (8001280 <io_nand_read_8b+0x404>)
 8001090:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(offset);
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	b29a      	uxth	r2, r3
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80010a2:	f3bf 8f4f 	dsb	sy
}
 80010a6:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_2ND_CYCLE(offset);
 80010a8:	7ffb      	ldrb	r3, [r7, #31]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00c      	beq.n	80010c8 <io_nand_read_8b+0x24c>
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	b299      	uxth	r1, r3
 80010b4:	4b71      	ldr	r3, [pc, #452]	; (800127c <io_nand_read_8b+0x400>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	b2d0      	uxtb	r0, r2
 80010bc:	4a6f      	ldr	r2, [pc, #444]	; (800127c <io_nand_read_8b+0x400>)
 80010be:	7010      	strb	r0, [r2, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	b2c9      	uxtb	r1, r1
 80010c4:	4b6e      	ldr	r3, [pc, #440]	; (8001280 <io_nand_read_8b+0x404>)
 80010c6:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ce:	6a3a      	ldr	r2, [r7, #32]
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80010d4:	f3bf 8f4f 	dsb	sy
}
 80010d8:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 80010da:	7ffb      	ldrb	r3, [r7, #31]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00a      	beq.n	80010f6 <io_nand_read_8b+0x27a>
 80010e0:	4b66      	ldr	r3, [pc, #408]	; (800127c <io_nand_read_8b+0x400>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	b2d1      	uxtb	r1, r2
 80010e8:	4a64      	ldr	r2, [pc, #400]	; (800127c <io_nand_read_8b+0x400>)
 80010ea:	7011      	strb	r1, [r2, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	b2d9      	uxtb	r1, r3
 80010f2:	4b63      	ldr	r3, [pc, #396]	; (8001280 <io_nand_read_8b+0x404>)
 80010f4:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	0a1a      	lsrs	r2, r3, #8
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001104:	f3bf 8f4f 	dsb	sy
}
 8001108:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 800110a:	7ffb      	ldrb	r3, [r7, #31]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00b      	beq.n	8001128 <io_nand_read_8b+0x2ac>
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	0a19      	lsrs	r1, r3, #8
 8001114:	4b59      	ldr	r3, [pc, #356]	; (800127c <io_nand_read_8b+0x400>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	b2d0      	uxtb	r0, r2
 800111c:	4a57      	ldr	r2, [pc, #348]	; (800127c <io_nand_read_8b+0x400>)
 800111e:	7010      	strb	r0, [r2, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	b2c9      	uxtb	r1, r1
 8001124:	4b56      	ldr	r3, [pc, #344]	; (8001280 <io_nand_read_8b+0x404>)
 8001126:	5499      	strb	r1, [r3, r2]
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8001128:	4b56      	ldr	r3, [pc, #344]	; (8001284 <io_nand_read_8b+0x408>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112e:	4a55      	ldr	r2, [pc, #340]	; (8001284 <io_nand_read_8b+0x408>)
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001134:	fb02 f303 	mul.w	r3, r2, r3
 8001138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113c:	d318      	bcc.n	8001170 <io_nand_read_8b+0x2f4>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	0c1a      	lsrs	r2, r3, #16
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800114c:	f3bf 8f4f 	dsb	sy
}
 8001150:	bf00      	nop
    		__DSB();
    		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 8001152:	7ffb      	ldrb	r3, [r7, #31]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00b      	beq.n	8001170 <io_nand_read_8b+0x2f4>
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	0c19      	lsrs	r1, r3, #16
 800115c:	4b47      	ldr	r3, [pc, #284]	; (800127c <io_nand_read_8b+0x400>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	b2d0      	uxtb	r0, r2
 8001164:	4a45      	ldr	r2, [pc, #276]	; (800127c <io_nand_read_8b+0x400>)
 8001166:	7010      	strb	r0, [r2, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	b2c9      	uxtb	r1, r1
 800116c:	4b44      	ldr	r3, [pc, #272]	; (8001280 <io_nand_read_8b+0x404>)
 800116e:	5499      	strb	r1, [r3, r2]
    	}
    }

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001176:	2230      	movs	r2, #48	; 0x30
 8001178:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800117a:	f3bf 8f4f 	dsb	sy
}
 800117e:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_TRUE1;
 8001180:	7ffb      	ldrb	r3, [r7, #31]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d009      	beq.n	800119a <io_nand_read_8b+0x31e>
 8001186:	4b3d      	ldr	r3, [pc, #244]	; (800127c <io_nand_read_8b+0x400>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	b2d1      	uxtb	r1, r2
 800118e:	4a3b      	ldr	r2, [pc, #236]	; (800127c <io_nand_read_8b+0x400>)
 8001190:	7011      	strb	r1, [r2, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	4b3a      	ldr	r3, [pc, #232]	; (8001280 <io_nand_read_8b+0x404>)
 8001196:	2130      	movs	r1, #48	; 0x30
 8001198:	5499      	strb	r1, [r3, r2]


    uint32_t tickstart = 0U;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
    // Check if an extra command is needed for reading pages
    if (nandPort->Config.ExtraCommandEnable == ENABLE) {
 800119e:	4b39      	ldr	r3, [pc, #228]	; (8001284 <io_nand_read_8b+0x408>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d134      	bne.n	8001214 <io_nand_read_8b+0x398>
        tickstart = HAL_GetTick();
 80011aa:	f009 f999 	bl	800a4e0 <HAL_GetTick>
 80011ae:	61b8      	str	r0, [r7, #24]
        while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 80011b0:	e013      	b.n	80011da <io_nand_read_8b+0x35e>
            if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT) {
 80011b2:	f009 f995 	bl	800a4e0 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c0:	d90b      	bls.n	80011da <io_nand_read_8b+0x35e>
            	nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 80011c2:	4b30      	ldr	r3, [pc, #192]	; (8001284 <io_nand_read_8b+0x408>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2203      	movs	r2, #3
 80011c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            	__HAL_UNLOCK(nandPort);
 80011cc:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <io_nand_read_8b+0x408>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2020 	strb.w	r2, [r3, #32]
            	return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e04b      	b.n	8001272 <io_nand_read_8b+0x3f6>
        while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <io_nand_read_8b+0x408>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f00c ff20 	bl	800e024 <HAL_NAND_Read_Status>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b40      	cmp	r3, #64	; 0x40
 80011e8:	d1e3      	bne.n	80011b2 <io_nand_read_8b+0x336>
            }
        }

        // Go back to read mode
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80011f4:	f3bf 8f4f 	dsb	sy
}
 80011f8:	bf00      	nop
        __DSB();
        if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_A;
 80011fa:	7ffb      	ldrb	r3, [r7, #31]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d009      	beq.n	8001214 <io_nand_read_8b+0x398>
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <io_nand_read_8b+0x400>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	b2d1      	uxtb	r1, r2
 8001208:	4a1c      	ldr	r2, [pc, #112]	; (800127c <io_nand_read_8b+0x400>)
 800120a:	7011      	strb	r1, [r2, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <io_nand_read_8b+0x404>)
 8001210:	2100      	movs	r1, #0
 8001212:	5499      	strb	r1, [r3, r2]
    }

    // Get Data into Buffer
    uint8_t *buff = pBuffer;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t index = 0; index < size; index++) *buff++ = *(uint8_t *)deviceaddress;
 8001218:	2300      	movs	r3, #0
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
 800121c:	e008      	b.n	8001230 <io_nand_read_8b+0x3b4>
 800121e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	1c59      	adds	r1, r3, #1
 8001224:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001226:	7812      	ldrb	r2, [r2, #0]
 8001228:	701a      	strb	r2, [r3, #0]
 800122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122c:	3301      	adds	r3, #1
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	429a      	cmp	r2, r3
 8001236:	d3f2      	bcc.n	800121e <io_nand_read_8b+0x3a2>

    nandPort->State = HAL_NAND_STATE_READY;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <io_nand_read_8b+0x408>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_UNLOCK(nandPort);
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <io_nand_read_8b+0x408>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2020 	strb.w	r2, [r3, #32]

    if (tflag & (dbg > logOn)) tmpPrint(__func__, tmpBuf, tmpLen);
 800124c:	7ffb      	ldrb	r3, [r7, #31]
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <io_nand_read_8b+0x40c>)
 8001250:	7812      	ldrb	r2, [r2, #0]
 8001252:	2a01      	cmp	r2, #1
 8001254:	bf8c      	ite	hi
 8001256:	2201      	movhi	r2, #1
 8001258:	2200      	movls	r2, #0
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	4013      	ands	r3, r2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d006      	beq.n	8001270 <io_nand_read_8b+0x3f4>
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <io_nand_read_8b+0x400>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	4905      	ldr	r1, [pc, #20]	; (8001280 <io_nand_read_8b+0x404>)
 800126a:	4808      	ldr	r0, [pc, #32]	; (800128c <io_nand_read_8b+0x410>)
 800126c:	f7ff fcf4 	bl	8000c58 <tmpPrint>

    return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3730      	adds	r7, #48	; 0x30
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000016c 	.word	0x2000016c
 8001280:	2000014c 	.word	0x2000014c
 8001284:	2000007c 	.word	0x2000007c
 8001288:	2000006a 	.word	0x2000006a
 800128c:	08019dc8 	.word	0x08019dc8

08001290 <io_nand_write_8b>:
//-----------------------------------------------------------------------------
uint32_t io_nand_write_8b(uint32_t adr, uint8_t *pBuffer, uint32_t size, uint16_t offset)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b090      	sub	sp, #64	; 0x40
 8001294:	af04      	add	r7, sp, #16
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	807b      	strh	r3, [r7, #2]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(adr);
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	68f9      	ldr	r1, [r7, #12]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 faf7 	bl	8001898 <io_uint32_to_flash_adr>


    if (nandPort->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 80012aa:	4b77      	ldr	r3, [pc, #476]	; (8001488 <io_nand_write_8b+0x1f8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d101      	bne.n	80012bc <io_nand_write_8b+0x2c>
 80012b8:	2302      	movs	r3, #2
 80012ba:	e1e0      	b.n	800167e <io_nand_write_8b+0x3ee>

    __HAL_LOCK(nandPort);
 80012bc:	4b72      	ldr	r3, [pc, #456]	; (8001488 <io_nand_write_8b+0x1f8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d101      	bne.n	80012cc <io_nand_write_8b+0x3c>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e1d8      	b.n	800167e <io_nand_write_8b+0x3ee>
 80012cc:	4b6e      	ldr	r3, [pc, #440]	; (8001488 <io_nand_write_8b+0x1f8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2020 	strb.w	r2, [r3, #32]
    nandPort->State = HAL_NAND_STATE_BUSY;
 80012d6:	4b6c      	ldr	r3, [pc, #432]	; (8001488 <io_nand_write_8b+0x1f8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2202      	movs	r2, #2
 80012dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    uint32_t deviceaddress = devAdr;
 80012e0:	4b6a      	ldr	r3, [pc, #424]	; (800148c <io_nand_write_8b+0x1fc>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 80012e6:	8a3b      	ldrh	r3, [r7, #16]
 80012e8:	4619      	mov	r1, r3
 80012ea:	8abb      	ldrh	r3, [r7, #20]
 80012ec:	461a      	mov	r2, r3
 80012ee:	8a7b      	ldrh	r3, [r7, #18]
 80012f0:	4618      	mov	r0, r3
 80012f2:	4b65      	ldr	r3, [pc, #404]	; (8001488 <io_nand_write_8b+0x1f8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f8:	fb00 f303 	mul.w	r3, r0, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	4a62      	ldr	r2, [pc, #392]	; (8001488 <io_nand_write_8b+0x1f8>)
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001304:	fb02 f303 	mul.w	r3, r2, r3
 8001308:	440b      	add	r3, r1
 800130a:	623b      	str	r3, [r7, #32]

    if (dbg > logOn)
 800130c:	4b60      	ldr	r3, [pc, #384]	; (8001490 <io_nand_write_8b+0x200>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d910      	bls.n	8001336 <io_nand_write_8b+0xa6>
        	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%u\r\n",
        	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 8001314:	8a3b      	ldrh	r3, [r7, #16]
        	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%u\r\n",
 8001316:	461a      	mov	r2, r3
        	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 8001318:	8a7b      	ldrh	r3, [r7, #18]
        	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%u\r\n",
 800131a:	4619      	mov	r1, r3
        	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 800131c:	8abb      	ldrh	r3, [r7, #20]
        	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%u\r\n",
 800131e:	4618      	mov	r0, r3
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	9303      	str	r3, [sp, #12]
 8001324:	9002      	str	r0, [sp, #8]
 8001326:	9101      	str	r1, [sp, #4]
 8001328:	9200      	str	r2, [sp, #0]
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	4a59      	ldr	r2, [pc, #356]	; (8001494 <io_nand_write_8b+0x204>)
 800132e:	495a      	ldr	r1, [pc, #360]	; (8001498 <io_nand_write_8b+0x208>)
 8001330:	2001      	movs	r0, #1
 8001332:	f001 fb03 	bl	800293c <Report>

#ifdef SET_NAND_CMD
    bool tflag = true;
 8001336:	2301      	movs	r3, #1
 8001338:	77fb      	strb	r3, [r7, #31]
    memset(tmpBuf, 0, sizeof(tmpBuf));
 800133a:	2220      	movs	r2, #32
 800133c:	2100      	movs	r1, #0
 800133e:	4857      	ldr	r0, [pc, #348]	; (800149c <io_nand_write_8b+0x20c>)
 8001340:	f013 fd8a 	bl	8014e58 <memset>
    tmpLen = 0;
 8001344:	4b56      	ldr	r3, [pc, #344]	; (80014a0 <io_nand_write_8b+0x210>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
#else
    bool tflag = false;
#endif

    /* Send write page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001354:	f3bf 8f4f 	dsb	sy
}
 8001358:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_A;
 800135a:	7ffb      	ldrb	r3, [r7, #31]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d009      	beq.n	8001374 <io_nand_write_8b+0xe4>
 8001360:	4b4f      	ldr	r3, [pc, #316]	; (80014a0 <io_nand_write_8b+0x210>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	b2d1      	uxtb	r1, r2
 8001368:	4a4d      	ldr	r2, [pc, #308]	; (80014a0 <io_nand_write_8b+0x210>)
 800136a:	7011      	strb	r1, [r2, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b4b      	ldr	r3, [pc, #300]	; (800149c <io_nand_write_8b+0x20c>)
 8001370:	2100      	movs	r1, #0
 8001372:	5499      	strb	r1, [r3, r2]
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137a:	2280      	movs	r2, #128	; 0x80
 800137c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800137e:	f3bf 8f4f 	dsb	sy
}
 8001382:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_WRITE0;
 8001384:	7ffb      	ldrb	r3, [r7, #31]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d009      	beq.n	800139e <io_nand_write_8b+0x10e>
 800138a:	4b45      	ldr	r3, [pc, #276]	; (80014a0 <io_nand_write_8b+0x210>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	b2d1      	uxtb	r1, r2
 8001392:	4a43      	ldr	r2, [pc, #268]	; (80014a0 <io_nand_write_8b+0x210>)
 8001394:	7011      	strb	r1, [r2, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4b40      	ldr	r3, [pc, #256]	; (800149c <io_nand_write_8b+0x20c>)
 800139a:	2180      	movs	r1, #128	; 0x80
 800139c:	5499      	strb	r1, [r3, r2]

    /* Cards with page size <= 512 bytes */
    if (nandPort->Config.PageSize <= 512U) {
 800139e:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <io_nand_write_8b+0x1f8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a8:	d87c      	bhi.n	80014a4 <io_nand_write_8b+0x214>
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b0:	887a      	ldrh	r2, [r7, #2]
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80013b6:	f3bf 8f4f 	dsb	sy
}
 80013ba:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);
 80013bc:	7ffb      	ldrb	r3, [r7, #31]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00a      	beq.n	80013d8 <io_nand_write_8b+0x148>
 80013c2:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <io_nand_write_8b+0x210>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	b2d1      	uxtb	r1, r2
 80013ca:	4a35      	ldr	r2, [pc, #212]	; (80014a0 <io_nand_write_8b+0x210>)
 80013cc:	7011      	strb	r1, [r2, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	b2d9      	uxtb	r1, r3
 80013d4:	4b31      	ldr	r3, [pc, #196]	; (800149c <io_nand_write_8b+0x20c>)
 80013d6:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013de:	6a3a      	ldr	r2, [r7, #32]
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80013e4:	f3bf 8f4f 	dsb	sy
}
 80013e8:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 80013ea:	7ffb      	ldrb	r3, [r7, #31]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00a      	beq.n	8001406 <io_nand_write_8b+0x176>
 80013f0:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <io_nand_write_8b+0x210>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	b2d1      	uxtb	r1, r2
 80013f8:	4a29      	ldr	r2, [pc, #164]	; (80014a0 <io_nand_write_8b+0x210>)
 80013fa:	7011      	strb	r1, [r2, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	b2d9      	uxtb	r1, r3
 8001402:	4b26      	ldr	r3, [pc, #152]	; (800149c <io_nand_write_8b+0x20c>)
 8001404:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	0a1a      	lsrs	r2, r3, #8
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001414:	f3bf 8f4f 	dsb	sy
}
 8001418:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 800141a:	7ffb      	ldrb	r3, [r7, #31]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00b      	beq.n	8001438 <io_nand_write_8b+0x1a8>
 8001420:	6a3b      	ldr	r3, [r7, #32]
 8001422:	0a19      	lsrs	r1, r3, #8
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <io_nand_write_8b+0x210>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	b2d0      	uxtb	r0, r2
 800142c:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <io_nand_write_8b+0x210>)
 800142e:	7010      	strb	r0, [r2, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	b2c9      	uxtb	r1, r1
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <io_nand_write_8b+0x20c>)
 8001436:	5499      	strb	r1, [r3, r2]
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <io_nand_write_8b+0x1f8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <io_nand_write_8b+0x1f8>)
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001444:	fb02 f303 	mul.w	r3, r2, r3
 8001448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144c:	f0c0 80b0 	bcc.w	80015b0 <io_nand_write_8b+0x320>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	0c1a      	lsrs	r2, r3, #16
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800145e:	f3bf 8f4f 	dsb	sy
}
 8001462:	bf00      	nop
    		__DSB();
    		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 8001464:	7ffb      	ldrb	r3, [r7, #31]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 80a2 	beq.w	80015b0 <io_nand_write_8b+0x320>
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	0c19      	lsrs	r1, r3, #16
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <io_nand_write_8b+0x210>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	b2d0      	uxtb	r0, r2
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <io_nand_write_8b+0x210>)
 800147a:	7010      	strb	r0, [r2, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	b2c9      	uxtb	r1, r1
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <io_nand_write_8b+0x20c>)
 8001482:	5499      	strb	r1, [r3, r2]
 8001484:	e094      	b.n	80015b0 <io_nand_write_8b+0x320>
 8001486:	bf00      	nop
 8001488:	2000007c 	.word	0x2000007c
 800148c:	200015b8 	.word	0x200015b8
 8001490:	2000006a 	.word	0x2000006a
 8001494:	08019dd8 	.word	0x08019dd8
 8001498:	080162f0 	.word	0x080162f0
 800149c:	2000014c 	.word	0x2000014c
 80014a0:	2000016c 	.word	0x2000016c
        }
    } else {/* (hnand->Config.PageSize) > 512 */
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80014b0:	f3bf 8f4f 	dsb	sy
}
 80014b4:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);
 80014b6:	7ffb      	ldrb	r3, [r7, #31]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00a      	beq.n	80014d2 <io_nand_write_8b+0x242>
 80014bc:	4b72      	ldr	r3, [pc, #456]	; (8001688 <io_nand_write_8b+0x3f8>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	b2d1      	uxtb	r1, r2
 80014c4:	4a70      	ldr	r2, [pc, #448]	; (8001688 <io_nand_write_8b+0x3f8>)
 80014c6:	7011      	strb	r1, [r2, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	b2d9      	uxtb	r1, r3
 80014ce:	4b6f      	ldr	r3, [pc, #444]	; (800168c <io_nand_write_8b+0x3fc>)
 80014d0:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(offset);
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80014e2:	f3bf 8f4f 	dsb	sy
}
 80014e6:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_2ND_CYCLE(offset);
 80014e8:	7ffb      	ldrb	r3, [r7, #31]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00c      	beq.n	8001508 <io_nand_write_8b+0x278>
 80014ee:	887b      	ldrh	r3, [r7, #2]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	b299      	uxth	r1, r3
 80014f4:	4b64      	ldr	r3, [pc, #400]	; (8001688 <io_nand_write_8b+0x3f8>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	b2d0      	uxtb	r0, r2
 80014fc:	4a62      	ldr	r2, [pc, #392]	; (8001688 <io_nand_write_8b+0x3f8>)
 80014fe:	7010      	strb	r0, [r2, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	b2c9      	uxtb	r1, r1
 8001504:	4b61      	ldr	r3, [pc, #388]	; (800168c <io_nand_write_8b+0x3fc>)
 8001506:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150e:	6a3a      	ldr	r2, [r7, #32]
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001514:	f3bf 8f4f 	dsb	sy
}
 8001518:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 800151a:	7ffb      	ldrb	r3, [r7, #31]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00a      	beq.n	8001536 <io_nand_write_8b+0x2a6>
 8001520:	4b59      	ldr	r3, [pc, #356]	; (8001688 <io_nand_write_8b+0x3f8>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	b2d1      	uxtb	r1, r2
 8001528:	4a57      	ldr	r2, [pc, #348]	; (8001688 <io_nand_write_8b+0x3f8>)
 800152a:	7011      	strb	r1, [r2, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	b2d9      	uxtb	r1, r3
 8001532:	4b56      	ldr	r3, [pc, #344]	; (800168c <io_nand_write_8b+0x3fc>)
 8001534:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	0a1a      	lsrs	r2, r3, #8
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001544:	f3bf 8f4f 	dsb	sy
}
 8001548:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 800154a:	7ffb      	ldrb	r3, [r7, #31]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00b      	beq.n	8001568 <io_nand_write_8b+0x2d8>
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	0a19      	lsrs	r1, r3, #8
 8001554:	4b4c      	ldr	r3, [pc, #304]	; (8001688 <io_nand_write_8b+0x3f8>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	b2d0      	uxtb	r0, r2
 800155c:	4a4a      	ldr	r2, [pc, #296]	; (8001688 <io_nand_write_8b+0x3f8>)
 800155e:	7010      	strb	r0, [r2, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	b2c9      	uxtb	r1, r1
 8001564:	4b49      	ldr	r3, [pc, #292]	; (800168c <io_nand_write_8b+0x3fc>)
 8001566:	5499      	strb	r1, [r3, r2]
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8001568:	4b49      	ldr	r3, [pc, #292]	; (8001690 <io_nand_write_8b+0x400>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	4a48      	ldr	r2, [pc, #288]	; (8001690 <io_nand_write_8b+0x400>)
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001574:	fb02 f303 	mul.w	r3, r2, r3
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157c:	d318      	bcc.n	80015b0 <io_nand_write_8b+0x320>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	0c1a      	lsrs	r2, r3, #16
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800158c:	f3bf 8f4f 	dsb	sy
}
 8001590:	bf00      	nop
    		__DSB();
    		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 8001592:	7ffb      	ldrb	r3, [r7, #31]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00b      	beq.n	80015b0 <io_nand_write_8b+0x320>
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	0c19      	lsrs	r1, r3, #16
 800159c:	4b3a      	ldr	r3, [pc, #232]	; (8001688 <io_nand_write_8b+0x3f8>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	b2d0      	uxtb	r0, r2
 80015a4:	4a38      	ldr	r2, [pc, #224]	; (8001688 <io_nand_write_8b+0x3f8>)
 80015a6:	7010      	strb	r0, [r2, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	b2c9      	uxtb	r1, r1
 80015ac:	4b37      	ldr	r3, [pc, #220]	; (800168c <io_nand_write_8b+0x3fc>)
 80015ae:	5499      	strb	r1, [r3, r2]
        }
    }


    /* Write data to memory */
    uint8_t *buff = pBuffer;
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t index = 0; index < size; index++) {
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80015b8:	e00b      	b.n	80015d2 <io_nand_write_8b+0x342>
    	*(__IO uint8_t *)deviceaddress = *buff++;
 80015ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015c6:	f3bf 8f4f 	dsb	sy
}
 80015ca:	bf00      	nop
    for (uint32_t index = 0; index < size; index++) {
 80015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ce:	3301      	adds	r3, #1
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d3ef      	bcc.n	80015ba <io_nand_write_8b+0x32a>
    	__DSB();
    }

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	2210      	movs	r2, #16
 80015e2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015e4:	f3bf 8f4f 	dsb	sy
}
 80015e8:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_WRITE_TRUE1;
 80015ea:	7ffb      	ldrb	r3, [r7, #31]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d021      	beq.n	8001634 <io_nand_write_8b+0x3a4>
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <io_nand_write_8b+0x3f8>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	b2d1      	uxtb	r1, r2
 80015f8:	4a23      	ldr	r2, [pc, #140]	; (8001688 <io_nand_write_8b+0x3f8>)
 80015fa:	7011      	strb	r1, [r2, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b23      	ldr	r3, [pc, #140]	; (800168c <io_nand_write_8b+0x3fc>)
 8001600:	2110      	movs	r1, #16
 8001602:	5499      	strb	r1, [r3, r2]

    /* Read status until NAND is ready */
    uint32_t tickstart;
    while(HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8001604:	e016      	b.n	8001634 <io_nand_write_8b+0x3a4>
        tickstart = HAL_GetTick();
 8001606:	f008 ff6b 	bl	800a4e0 <HAL_GetTick>
 800160a:	61b8      	str	r0, [r7, #24]
        if ((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT) {
 800160c:	f008 ff68 	bl	800a4e0 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800161a:	d90b      	bls.n	8001634 <io_nand_write_8b+0x3a4>
        	nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <io_nand_write_8b+0x400>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2203      	movs	r2, #3
 8001622:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        	__HAL_UNLOCK(nandPort);
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <io_nand_write_8b+0x400>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2020 	strb.w	r2, [r3, #32]
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e024      	b.n	800167e <io_nand_write_8b+0x3ee>
    while(HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <io_nand_write_8b+0x400>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f00c fcf3 	bl	800e024 <HAL_NAND_Read_Status>
 800163e:	4603      	mov	r3, r0
 8001640:	2b40      	cmp	r3, #64	; 0x40
 8001642:	d1e0      	bne.n	8001606 <io_nand_write_8b+0x376>
        }
    }

    nandPort->State = HAL_NAND_STATE_READY;
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <io_nand_write_8b+0x400>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_UNLOCK(nandPort);
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <io_nand_write_8b+0x400>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2020 	strb.w	r2, [r3, #32]

    if (tflag & (dbg > logOn)) tmpPrint(__func__, tmpBuf, tmpLen);
 8001658:	7ffb      	ldrb	r3, [r7, #31]
 800165a:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <io_nand_write_8b+0x404>)
 800165c:	7812      	ldrb	r2, [r2, #0]
 800165e:	2a01      	cmp	r2, #1
 8001660:	bf8c      	ite	hi
 8001662:	2201      	movhi	r2, #1
 8001664:	2200      	movls	r2, #0
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <io_nand_write_8b+0x3ec>
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <io_nand_write_8b+0x3f8>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	4905      	ldr	r1, [pc, #20]	; (800168c <io_nand_write_8b+0x3fc>)
 8001676:	4808      	ldr	r0, [pc, #32]	; (8001698 <io_nand_write_8b+0x408>)
 8001678:	f7ff faee 	bl	8000c58 <tmpPrint>

    return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3730      	adds	r7, #48	; 0x30
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000016c 	.word	0x2000016c
 800168c:	2000014c 	.word	0x2000014c
 8001690:	2000007c 	.word	0x2000007c
 8001694:	2000006a 	.word	0x2000006a
 8001698:	08019dd8 	.word	0x08019dd8

0800169c <io_nand_erase_block>:
//-----------------------------------------------------------------------------
//HAL_StatusTypeDef io_nand_erase_block(NAND_AddressTypeDef *pAddress)
HAL_StatusTypeDef io_nand_erase_block(uint32_t adr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af04      	add	r7, sp, #16
 80016a2:	6078      	str	r0, [r7, #4]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(adr);
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f8f4 	bl	8001898 <io_uint32_to_flash_adr>

	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 80016b0:	4b72      	ldr	r3, [pc, #456]	; (800187c <io_nand_erase_block+0x1e0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d101      	bne.n	80016c2 <io_nand_erase_block+0x26>

		return HAL_BUSY;
 80016be:	2302      	movs	r3, #2
 80016c0:	e0d7      	b.n	8001872 <io_nand_erase_block+0x1d6>

	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 80016c2:	4b6e      	ldr	r3, [pc, #440]	; (800187c <io_nand_erase_block+0x1e0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	f040 80cd 	bne.w	800186c <io_nand_erase_block+0x1d0>

		__HAL_LOCK(nandPort);
 80016d2:	4b6a      	ldr	r3, [pc, #424]	; (800187c <io_nand_erase_block+0x1e0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <io_nand_erase_block+0x46>
 80016de:	2302      	movs	r3, #2
 80016e0:	e0c7      	b.n	8001872 <io_nand_erase_block+0x1d6>
 80016e2:	4b66      	ldr	r3, [pc, #408]	; (800187c <io_nand_erase_block+0x1e0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 80016ec:	4b63      	ldr	r3, [pc, #396]	; (800187c <io_nand_erase_block+0x1e0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2202      	movs	r2, #2
 80016f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		uint32_t deviceaddress = devAdr;
 80016f6:	4b62      	ldr	r3, [pc, #392]	; (8001880 <io_nand_erase_block+0x1e4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	617b      	str	r3, [r7, #20]
		uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 80016fc:	893b      	ldrh	r3, [r7, #8]
 80016fe:	4619      	mov	r1, r3
 8001700:	89bb      	ldrh	r3, [r7, #12]
 8001702:	461a      	mov	r2, r3
 8001704:	897b      	ldrh	r3, [r7, #10]
 8001706:	4618      	mov	r0, r3
 8001708:	4b5c      	ldr	r3, [pc, #368]	; (800187c <io_nand_erase_block+0x1e0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170e:	fb00 f303 	mul.w	r3, r0, r3
 8001712:	4413      	add	r3, r2
 8001714:	4a59      	ldr	r2, [pc, #356]	; (800187c <io_nand_erase_block+0x1e0>)
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	440b      	add	r3, r1
 8001720:	613b      	str	r3, [r7, #16]


		if (dbg > logOn)
 8001722:	4b58      	ldr	r3, [pc, #352]	; (8001884 <io_nand_erase_block+0x1e8>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d90b      	bls.n	8001742 <io_nand_erase_block+0xa6>
					Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
							  __func__, nandaddress, Address.Page, Address.Plane, Address.Block);
 800172a:	893b      	ldrh	r3, [r7, #8]
 800172c:	897a      	ldrh	r2, [r7, #10]
 800172e:	89b9      	ldrh	r1, [r7, #12]
					Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
 8001730:	9102      	str	r1, [sp, #8]
 8001732:	9201      	str	r2, [sp, #4]
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4a53      	ldr	r2, [pc, #332]	; (8001888 <io_nand_erase_block+0x1ec>)
 800173a:	4954      	ldr	r1, [pc, #336]	; (800188c <io_nand_erase_block+0x1f0>)
 800173c:	2001      	movs	r0, #1
 800173e:	f001 f8fd 	bl	800293c <Report>

#ifdef SET_NAND_CMD
    bool tflag = true;
 8001742:	2301      	movs	r3, #1
 8001744:	73fb      	strb	r3, [r7, #15]
    memset(tmpBuf, 0, sizeof(tmpBuf));
 8001746:	2220      	movs	r2, #32
 8001748:	2100      	movs	r1, #0
 800174a:	4851      	ldr	r0, [pc, #324]	; (8001890 <io_nand_erase_block+0x1f4>)
 800174c:	f013 fb84 	bl	8014e58 <memset>
    tmpLen = 0;
 8001750:	4b50      	ldr	r3, [pc, #320]	; (8001894 <io_nand_erase_block+0x1f8>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
#else
    bool tflag = false;
#endif

		/* Send Erase block command sequence */
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175c:	2260      	movs	r2, #96	; 0x60
 800175e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001760:	f3bf 8f4f 	dsb	sy
}
 8001764:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = NAND_CMD_ERASE0;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d009      	beq.n	8001780 <io_nand_erase_block+0xe4>
 800176c:	4b49      	ldr	r3, [pc, #292]	; (8001894 <io_nand_erase_block+0x1f8>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	b2d1      	uxtb	r1, r2
 8001774:	4a47      	ldr	r2, [pc, #284]	; (8001894 <io_nand_erase_block+0x1f8>)
 8001776:	7011      	strb	r1, [r2, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4b45      	ldr	r3, [pc, #276]	; (8001890 <io_nand_erase_block+0x1f4>)
 800177c:	2160      	movs	r1, #96	; 0x60
 800177e:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800178c:	f3bf 8f4f 	dsb	sy
}
 8001790:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00a      	beq.n	80017ae <io_nand_erase_block+0x112>
 8001798:	4b3e      	ldr	r3, [pc, #248]	; (8001894 <io_nand_erase_block+0x1f8>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	b2d1      	uxtb	r1, r2
 80017a0:	4a3c      	ldr	r2, [pc, #240]	; (8001894 <io_nand_erase_block+0x1f8>)
 80017a2:	7011      	strb	r1, [r2, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	b2d9      	uxtb	r1, r3
 80017aa:	4b39      	ldr	r3, [pc, #228]	; (8001890 <io_nand_erase_block+0x1f4>)
 80017ac:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	0a1a      	lsrs	r2, r3, #8
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017bc:	f3bf 8f4f 	dsb	sy
}
 80017c0:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00b      	beq.n	80017e0 <io_nand_erase_block+0x144>
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	0a19      	lsrs	r1, r3, #8
 80017cc:	4b31      	ldr	r3, [pc, #196]	; (8001894 <io_nand_erase_block+0x1f8>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	b2d0      	uxtb	r0, r2
 80017d4:	4a2f      	ldr	r2, [pc, #188]	; (8001894 <io_nand_erase_block+0x1f8>)
 80017d6:	7010      	strb	r0, [r2, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	b2c9      	uxtb	r1, r1
 80017dc:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <io_nand_erase_block+0x1f4>)
 80017de:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	0c1a      	lsrs	r2, r3, #16
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017ee:	f3bf 8f4f 	dsb	sy
}
 80017f2:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <io_nand_erase_block+0x176>
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	0c19      	lsrs	r1, r3, #16
 80017fe:	4b25      	ldr	r3, [pc, #148]	; (8001894 <io_nand_erase_block+0x1f8>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	b2d0      	uxtb	r0, r2
 8001806:	4a23      	ldr	r2, [pc, #140]	; (8001894 <io_nand_erase_block+0x1f8>)
 8001808:	7010      	strb	r0, [r2, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	b2c9      	uxtb	r1, r1
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <io_nand_erase_block+0x1f4>)
 8001810:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001818:	22d0      	movs	r2, #208	; 0xd0
 800181a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800181c:	f3bf 8f4f 	dsb	sy
}
 8001820:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = NAND_CMD_ERASE1;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <io_nand_erase_block+0x1a0>
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <io_nand_erase_block+0x1f8>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	b2d1      	uxtb	r1, r2
 8001830:	4a18      	ldr	r2, [pc, #96]	; (8001894 <io_nand_erase_block+0x1f8>)
 8001832:	7011      	strb	r1, [r2, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <io_nand_erase_block+0x1f4>)
 8001838:	21d0      	movs	r1, #208	; 0xd0
 800183a:	5499      	strb	r1, [r3, r2]

		nandPort->State = HAL_NAND_STATE_READY;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <io_nand_erase_block+0x1e0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <io_nand_erase_block+0x1e0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2020 	strb.w	r2, [r3, #32]

		if (tflag & dbg) tmpPrint(__func__, tmpBuf, tmpLen);
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <io_nand_erase_block+0x1e8>)
 8001854:	7812      	ldrb	r2, [r2, #0]
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d009      	beq.n	8001870 <io_nand_erase_block+0x1d4>
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <io_nand_erase_block+0x1f8>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	490b      	ldr	r1, [pc, #44]	; (8001890 <io_nand_erase_block+0x1f4>)
 8001864:	4808      	ldr	r0, [pc, #32]	; (8001888 <io_nand_erase_block+0x1ec>)
 8001866:	f7ff f9f7 	bl	8000c58 <tmpPrint>
 800186a:	e001      	b.n	8001870 <io_nand_erase_block+0x1d4>

	} else {

		return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <io_nand_erase_block+0x1d6>

	}

	return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	2000007c 	.word	0x2000007c
 8001880:	200015b8 	.word	0x200015b8
 8001884:	2000006a 	.word	0x2000006a
 8001888:	08019dec 	.word	0x08019dec
 800188c:	0801632c 	.word	0x0801632c
 8001890:	2000014c 	.word	0x2000014c
 8001894:	2000016c 	.word	0x2000016c

08001898 <io_uint32_to_flash_adr>:
{
	return  ((adr->Plane * chipConf.PlaneSize) + (adr->Block * chipConf.BlockSize) + adr->Page);
}
//-----------------------------------------------------------------------------------------
NAND_AddressTypeDef io_uint32_to_flash_adr(uint32_t adr)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
NAND_AddressTypeDef a;

	a.Plane = adr / chipConf.PlaneSize;
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <io_uint32_to_flash_adr+0x7c>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	817b      	strh	r3, [r7, #10]
	a.Block = (adr - a.Plane * chipConf.PlaneSize) / chipConf.BlockSize;
 80018b0:	897b      	ldrh	r3, [r7, #10]
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <io_uint32_to_flash_adr+0x7c>)
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	fb02 f303 	mul.w	r3, r2, r3
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	1ad2      	subs	r2, r2, r3
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <io_uint32_to_flash_adr+0x7c>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	81bb      	strh	r3, [r7, #12]
	a.Page  = adr - (a.Plane * chipConf.PlaneSize) - (a.Block * chipConf.BlockSize);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	8979      	ldrh	r1, [r7, #10]
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <io_uint32_to_flash_adr+0x7c>)
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	fb11 f303 	smulbb	r3, r1, r3
 80018dc:	b29b      	uxth	r3, r3
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	89b9      	ldrh	r1, [r7, #12]
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <io_uint32_to_flash_adr+0x7c>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	fb11 f303 	smulbb	r3, r1, r3
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	813b      	strh	r3, [r7, #8]

	return a;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	461a      	mov	r2, r3
 80018fa:	f107 0308 	add.w	r3, r7, #8
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	6010      	str	r0, [r2, #0]
 8001902:	889b      	ldrh	r3, [r3, #4]
 8001904:	8093      	strh	r3, [r2, #4]
}
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	200015d8 	.word	0x200015d8

08001918 <io_nand_read>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_read(uint32_t adr, uint8_t *buffer, uint32_t size, uint16_t offset)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	807b      	strh	r3, [r7, #2]

	if (io_nand_read_8b(adr, buffer, size, offset) != HAL_OK) devError |= devNAND;
 8001926:	887b      	ldrh	r3, [r7, #2]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f7ff faa5 	bl	8000e7c <io_nand_read_8b>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <io_nand_read+0x2e>
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <io_nand_read+0x38>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	f043 0320 	orr.w	r3, r3, #32
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b03      	ldr	r3, [pc, #12]	; (8001950 <io_nand_read+0x38>)
 8001944:	801a      	strh	r2, [r3, #0]

    return 0;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000594 	.word	0x20000594

08001954 <io_nand_write>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_write(uint32_t adr, uint8_t *buffer, uint32_t size, uint16_t offset)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	807b      	strh	r3, [r7, #2]

	if (io_nand_write_8b(adr, buffer, size, offset) != HAL_OK) devError |= devNAND;
 8001962:	887b      	ldrh	r3, [r7, #2]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	68b9      	ldr	r1, [r7, #8]
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f7ff fc91 	bl	8001290 <io_nand_write_8b>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d006      	beq.n	8001982 <io_nand_write+0x2e>
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <io_nand_write+0x38>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	f043 0320 	orr.w	r3, r3, #32
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b03      	ldr	r3, [pc, #12]	; (800198c <io_nand_write+0x38>)
 8001980:	801a      	strh	r2, [r3, #0]

	return 0;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000594 	.word	0x20000594

08001990 <io_nand_block_erase>:
//-----------------------------------------------------------------------------------------
void io_nand_block_erase(uint32_t adr)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
//NAND_AddressTypeDef nans = io_uint32_to_flash_adr(addr);

//	if (io_nand_erase_block(&nans) != HAL_OK) devError |= devNAND;

	if (io_nand_erase_block(adr) != HAL_OK) devError |= devNAND;
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff fe7f 	bl	800169c <io_nand_erase_block>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <io_nand_block_erase+0x22>
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <io_nand_block_erase+0x2c>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	f043 0320 	orr.w	r3, r3, #32
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b03      	ldr	r3, [pc, #12]	; (80019bc <io_nand_block_erase+0x2c>)
 80019b0:	801a      	strh	r2, [r3, #0]
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000594 	.word	0x20000594

080019c0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80019c4:	f3bf 8f4f 	dsb	sy
}
 80019c8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <__NVIC_SystemReset+0x24>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019d2:	4904      	ldr	r1, [pc, #16]	; (80019e4 <__NVIC_SystemReset+0x24>)
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_SystemReset+0x28>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019da:	f3bf 8f4f 	dsb	sy
}
 80019de:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <__NVIC_SystemReset+0x20>
 80019e4:	e000ed00 	.word	0xe000ed00
 80019e8:	05fa0004 	.word	0x05fa0004

080019ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f2:	f008 fd3f 	bl	800a474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f6:	f000 f8ad 	bl	8001b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019fa:	f000 fa97 	bl	8001f2c <MX_GPIO_Init>
  MX_DMA_Init();
 80019fe:	f000 fa4f 	bl	8001ea0 <MX_DMA_Init>
  MX_TIM2_Init();
 8001a02:	f000 f9d7 	bl	8001db4 <MX_TIM2_Init>
  MX_RTC_Init();
 8001a06:	f000 f93d 	bl	8001c84 <MX_RTC_Init>
  MX_FSMC_Init();
 8001a0a:	f000 fb35 	bl	8002078 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8001a0e:	f000 fa1d 	bl	8001e4c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001a12:	f000 f999 	bl	8001d48 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001a16:	f000 f907 	bl	8001c28 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	71fb      	strb	r3, [r7, #7]
 8001a1e:	e01e      	b.n	8001a5e <main+0x72>
	  HAL_Delay(150);
 8001a20:	2096      	movs	r0, #150	; 0x96
 8001a22:	f008 fd69 	bl	800a4f8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8001a26:	2201      	movs	r2, #1
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	4837      	ldr	r0, [pc, #220]	; (8001b08 <main+0x11c>)
 8001a2c:	f009 fc16 	bl	800b25c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001a30:	2201      	movs	r2, #1
 8001a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a36:	4835      	ldr	r0, [pc, #212]	; (8001b0c <main+0x120>)
 8001a38:	f009 fc10 	bl	800b25c <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8001a3c:	2096      	movs	r0, #150	; 0x96
 8001a3e:	f008 fd5b 	bl	800a4f8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2180      	movs	r1, #128	; 0x80
 8001a46:	4830      	ldr	r0, [pc, #192]	; (8001b08 <main+0x11c>)
 8001a48:	f009 fc08 	bl	800b25c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a52:	482e      	ldr	r0, [pc, #184]	; (8001b0c <main+0x120>)
 8001a54:	f009 fc02 	bl	800b25c <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	71fb      	strb	r3, [r7, #7]
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d9dd      	bls.n	8001a20 <main+0x34>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8001a64:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <main+0x124>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f00e f8eb 	bl	800fc44 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <main+0x128>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2201      	movs	r2, #1
 8001a74:	4928      	ldr	r1, [pc, #160]	; (8001b18 <main+0x12c>)
 8001a76:	4618      	mov	r0, r3
 8001a78:	f00e fd63 	bl	8010542 <HAL_UART_Receive_IT>

  //set_Date(epoch);

  ST7789_Reset();
 8001a7c:	f002 fd96 	bl	80045ac <ST7789_Reset>
  ST7789_Init(back_color);
 8001a80:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <main+0x130>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 fdab 	bl	80045e0 <ST7789_Init>

//#if defined(SET_FS_TEST) || defined(SET_NAND_TEST)
  dbg = logDump;
 8001a8a:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <main+0x134>)
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	701a      	strb	r2, [r3, #0]
//#endif

#ifdef SET_AUDIO_DAC
  if ((audioStat = audioInit()) == HAL_OK) {
 8001a90:	f001 f896 	bl	8002bc0 <audioInit>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <main+0x138>)
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <main+0x138>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d110      	bne.n	8001ac6 <main+0xda>
	  if (audioID == CS43L22)
 8001aa4:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <main+0x13c>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b1c      	cmp	r3, #28
 8001aaa:	d106      	bne.n	8001aba <main+0xce>
		  strcpy(audioName, audioChipName);
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <main+0x140>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	481f      	ldr	r0, [pc, #124]	; (8001b30 <main+0x144>)
 8001ab4:	f013 feb7 	bl	8015826 <strcpy>
 8001ab8:	e005      	b.n	8001ac6 <main+0xda>
	  else
		  strcpy(audioName, "Unknown");
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <main+0x144>)
 8001abc:	4a1d      	ldr	r2, [pc, #116]	; (8001b34 <main+0x148>)
 8001abe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ac2:	e883 0003 	stmia.w	r3, {r0, r1}
#endif

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ac6:	f00f fead 	bl	8011824 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8001aca:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <main+0x14c>)
 8001acc:	2101      	movs	r1, #1
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f00f ffa1 	bl	8011a16 <osSemaphoreNew>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4a19      	ldr	r2, [pc, #100]	; (8001b3c <main+0x150>)
 8001ad8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(uint16_t), &myQue_attributes);
 8001ada:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <main+0x154>)
 8001adc:	2102      	movs	r1, #2
 8001ade:	2010      	movs	r0, #16
 8001ae0:	f010 f822 	bl	8011b28 <osMessageQueueNew>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <main+0x158>)
 8001ae8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8001aea:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <main+0x15c>)
 8001aec:	2100      	movs	r1, #0
 8001aee:	4817      	ldr	r0, [pc, #92]	; (8001b4c <main+0x160>)
 8001af0:	f00f fee4 	bl	80118bc <osThreadNew>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a16      	ldr	r2, [pc, #88]	; (8001b50 <main+0x164>)
 8001af8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001afa:	f00f feb9 	bl	8011870 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8001afe:	2001      	movs	r0, #1
 8001b00:	f008 fcfa 	bl	800a4f8 <HAL_Delay>
 8001b04:	e7fb      	b.n	8001afe <main+0x112>
 8001b06:	bf00      	nop
 8001b08:	40020800 	.word	0x40020800
 8001b0c:	40020c00 	.word	0x40020c00
 8001b10:	20000074 	.word	0x20000074
 8001b14:	20000078 	.word	0x20000078
 8001b18:	200015a8 	.word	0x200015a8
 8001b1c:	200015ae 	.word	0x200015ae
 8001b20:	2000006a 	.word	0x2000006a
 8001b24:	20002dfa 	.word	0x20002dfa
 8001b28:	20002df8 	.word	0x20002df8
 8001b2c:	200000a8 	.word	0x200000a8
 8001b30:	20002dfc 	.word	0x20002dfc
 8001b34:	080164d0 	.word	0x080164d0
 8001b38:	08019e3c 	.word	0x08019e3c
 8001b3c:	20000590 	.word	0x20000590
 8001b40:	08019e24 	.word	0x08019e24
 8001b44:	2000058c 	.word	0x2000058c
 8001b48:	08019e00 	.word	0x08019e00
 8001b4c:	08003269 	.word	0x08003269
 8001b50:	20000588 	.word	0x20000588

08001b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b094      	sub	sp, #80	; 0x50
 8001b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b5a:	f107 0320 	add.w	r3, r7, #32
 8001b5e:	2230      	movs	r2, #48	; 0x30
 8001b60:	2100      	movs	r1, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f013 f978 	bl	8014e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <SystemClock_Config+0xcc>)
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	4a27      	ldr	r2, [pc, #156]	; (8001c20 <SystemClock_Config+0xcc>)
 8001b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b86:	6413      	str	r3, [r2, #64]	; 0x40
 8001b88:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <SystemClock_Config+0xcc>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b94:	2300      	movs	r3, #0
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <SystemClock_Config+0xd0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a21      	ldr	r2, [pc, #132]	; (8001c24 <SystemClock_Config+0xd0>)
 8001b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <SystemClock_Config+0xd0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bc4:	2308      	movs	r3, #8
 8001bc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bc8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001bcc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd6:	f107 0320 	add.w	r3, r7, #32
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f00c fa48 	bl	800e070 <HAL_RCC_OscConfig>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001be6:	f002 fb3f 	bl	8004268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bea:	230f      	movs	r3, #15
 8001bec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001bf6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	2105      	movs	r1, #5
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f00c fca9 	bl	800e560 <HAL_RCC_ClockConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c14:	f002 fb28 	bl	8004268 <Error_Handler>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3750      	adds	r7, #80	; 0x50
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40007000 	.word	0x40007000

08001c28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c2e:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <MX_I2C1_Init+0x54>)
 8001c30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c34:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <MX_I2C1_Init+0x58>)
 8001c36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c64:	4804      	ldr	r0, [pc, #16]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c66:	f009 fb2d 	bl	800b2c4 <HAL_I2C_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c70:	f002 fafa 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000270 	.word	0x20000270
 8001c7c:	40005400 	.word	0x40005400
 8001c80:	000186a0 	.word	0x000186a0

08001c84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c98:	2300      	movs	r3, #0
 8001c9a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c9c:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <MX_RTC_Init+0xb8>)
 8001c9e:	4a28      	ldr	r2, [pc, #160]	; (8001d40 <MX_RTC_Init+0xbc>)
 8001ca0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <MX_RTC_Init+0xb8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <MX_RTC_Init+0xb8>)
 8001caa:	227f      	movs	r2, #127	; 0x7f
 8001cac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8001cae:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <MX_RTC_Init+0xb8>)
 8001cb0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001cb4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cb6:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <MX_RTC_Init+0xb8>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <MX_RTC_Init+0xb8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <MX_RTC_Init+0xb8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cc8:	481c      	ldr	r0, [pc, #112]	; (8001d3c <MX_RTC_Init+0xb8>)
 8001cca:	f00c ff7d 	bl	800ebc8 <HAL_RTC_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001cd4:	f002 fac8 	bl	8004268 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 8001cd8:	2315      	movs	r3, #21
 8001cda:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8001cdc:	2334      	movs	r3, #52	; 0x34
 8001cde:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 12;
 8001ce0:	230c      	movs	r3, #12
 8001ce2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	2200      	movs	r2, #0
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4812      	ldr	r0, [pc, #72]	; (8001d3c <MX_RTC_Init+0xb8>)
 8001cf4:	f00c ffde 	bl	800ecb4 <HAL_RTC_SetTime>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8001cfe:	f002 fab3 	bl	8004268 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d02:	2301      	movs	r3, #1
 8001d04:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001d06:	2301      	movs	r3, #1
 8001d08:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001d12:	463b      	mov	r3, r7
 8001d14:	2200      	movs	r2, #0
 8001d16:	4619      	mov	r1, r3
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <MX_RTC_Init+0xb8>)
 8001d1a:	f00d f8c3 	bl	800eea4 <HAL_RTC_SetDate>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8001d24:	f002 faa0 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  set_Date(epoch);
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_RTC_Init+0xc0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 fd0b 	bl	8002748 <set_Date>

  /* USER CODE END RTC_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000384 	.word	0x20000384
 8001d40:	40002800 	.word	0x40002800
 8001d44:	2000006c 	.word	0x2000006c

08001d48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d4c:	4b17      	ldr	r3, [pc, #92]	; (8001dac <MX_SPI1_Init+0x64>)
 8001d4e:	4a18      	ldr	r2, [pc, #96]	; (8001db0 <MX_SPI1_Init+0x68>)
 8001d50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <MX_SPI1_Init+0x64>)
 8001d54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <MX_SPI1_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <MX_SPI1_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_SPI1_Init+0x64>)
 8001d68:	2202      	movs	r2, #2
 8001d6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_SPI1_Init+0x64>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_SPI1_Init+0x64>)
 8001d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_SPI1_Init+0x64>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d80:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <MX_SPI1_Init+0x64>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_SPI1_Init+0x64>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d8c:	4b07      	ldr	r3, [pc, #28]	; (8001dac <MX_SPI1_Init+0x64>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_SPI1_Init+0x64>)
 8001d94:	220a      	movs	r2, #10
 8001d96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d98:	4804      	ldr	r0, [pc, #16]	; (8001dac <MX_SPI1_Init+0x64>)
 8001d9a:	f00d fa13 	bl	800f1c4 <HAL_SPI_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001da4:	f002 fa60 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200003a4 	.word	0x200003a4
 8001db0:	40013000 	.word	0x40013000

08001db4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc8:	463b      	mov	r3, r7
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <MX_TIM2_Init+0x94>)
 8001dd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <MX_TIM2_Init+0x94>)
 8001dda:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001dde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <MX_TIM2_Init+0x94>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8001de6:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <MX_TIM2_Init+0x94>)
 8001de8:	22f9      	movs	r2, #249	; 0xf9
 8001dea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dec:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <MX_TIM2_Init+0x94>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <MX_TIM2_Init+0x94>)
 8001df4:	2280      	movs	r2, #128	; 0x80
 8001df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001df8:	4813      	ldr	r0, [pc, #76]	; (8001e48 <MX_TIM2_Init+0x94>)
 8001dfa:	f00d fed3 	bl	800fba4 <HAL_TIM_Base_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e04:	f002 fa30 	bl	8004268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	4619      	mov	r1, r3
 8001e14:	480c      	ldr	r0, [pc, #48]	; (8001e48 <MX_TIM2_Init+0x94>)
 8001e16:	f00e f88d 	bl	800ff34 <HAL_TIM_ConfigClockSource>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e20:	f002 fa22 	bl	8004268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e24:	2320      	movs	r3, #32
 8001e26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4805      	ldr	r0, [pc, #20]	; (8001e48 <MX_TIM2_Init+0x94>)
 8001e32:	f00e faa9 	bl	8010388 <HAL_TIMEx_MasterConfigSynchronization>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e3c:	f002 fa14 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e40:	bf00      	nop
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	2000045c 	.word	0x2000045c

08001e4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <MX_USART3_UART_Init+0x4c>)
 8001e52:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <MX_USART3_UART_Init+0x50>)
 8001e54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <MX_USART3_UART_Init+0x4c>)
 8001e58:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001e5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <MX_USART3_UART_Init+0x4c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <MX_USART3_UART_Init+0x4c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <MX_USART3_UART_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <MX_USART3_UART_Init+0x4c>)
 8001e72:	220c      	movs	r2, #12
 8001e74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <MX_USART3_UART_Init+0x4c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <MX_USART3_UART_Init+0x4c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e82:	4805      	ldr	r0, [pc, #20]	; (8001e98 <MX_USART3_UART_Init+0x4c>)
 8001e84:	f00e fb10 	bl	80104a8 <HAL_UART_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e8e:	f002 f9eb 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200004a4 	.word	0x200004a4
 8001e9c:	40004800 	.word	0x40004800

08001ea0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <MX_DMA_Init+0x88>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <MX_DMA_Init+0x88>)
 8001eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <MX_DMA_Init+0x88>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <MX_DMA_Init+0x88>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <MX_DMA_Init+0x88>)
 8001ecc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <MX_DMA_Init+0x88>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2105      	movs	r1, #5
 8001ee2:	200b      	movs	r0, #11
 8001ee4:	f008 fbe4 	bl	800a6b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ee8:	200b      	movs	r0, #11
 8001eea:	f008 fbfd 	bl	800a6e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2105      	movs	r1, #5
 8001ef2:	200e      	movs	r0, #14
 8001ef4:	f008 fbdc 	bl	800a6b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001ef8:	200e      	movs	r0, #14
 8001efa:	f008 fbf5 	bl	800a6e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2105      	movs	r1, #5
 8001f02:	2011      	movs	r0, #17
 8001f04:	f008 fbd4 	bl	800a6b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001f08:	2011      	movs	r0, #17
 8001f0a:	f008 fbed 	bl	800a6e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2103      	movs	r1, #3
 8001f12:	203b      	movs	r0, #59	; 0x3b
 8001f14:	f008 fbcc 	bl	800a6b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001f18:	203b      	movs	r0, #59	; 0x3b
 8001f1a:	f008 fbe5 	bl	800a6e8 <HAL_NVIC_EnableIRQ>

}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08c      	sub	sp, #48	; 0x30
 8001f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f32:	f107 031c 	add.w	r3, r7, #28
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]
 8001f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	4b48      	ldr	r3, [pc, #288]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a47      	ldr	r2, [pc, #284]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b45      	ldr	r3, [pc, #276]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a40      	ldr	r2, [pc, #256]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	4b3a      	ldr	r3, [pc, #232]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a39      	ldr	r2, [pc, #228]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001f84:	f043 0310 	orr.w	r3, r3, #16
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b37      	ldr	r3, [pc, #220]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b33      	ldr	r3, [pc, #204]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a32      	ldr	r2, [pc, #200]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b30      	ldr	r3, [pc, #192]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a2b      	ldr	r2, [pc, #172]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001fbc:	f043 0308 	orr.w	r3, r3, #8
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b29      	ldr	r3, [pc, #164]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	4b25      	ldr	r3, [pc, #148]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a24      	ldr	r2, [pc, #144]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b22      	ldr	r3, [pc, #136]	; (8002068 <MX_GPIO_Init+0x13c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8001fea:	2201      	movs	r2, #1
 8001fec:	210e      	movs	r1, #14
 8001fee:	481f      	ldr	r0, [pc, #124]	; (800206c <MX_GPIO_Init+0x140>)
 8001ff0:	f009 f934 	bl	800b25c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ffa:	481d      	ldr	r0, [pc, #116]	; (8002070 <MX_GPIO_Init+0x144>)
 8001ffc:	f009 f92e 	bl	800b25c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8002000:	2200      	movs	r2, #0
 8002002:	2180      	movs	r1, #128	; 0x80
 8002004:	481b      	ldr	r0, [pc, #108]	; (8002074 <MX_GPIO_Init+0x148>)
 8002006:	f009 f929 	bl	800b25c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 800200a:	230e      	movs	r3, #14
 800200c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2301      	movs	r3, #1
 8002010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002012:	2301      	movs	r3, #1
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002016:	2301      	movs	r3, #1
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	4812      	ldr	r0, [pc, #72]	; (800206c <MX_GPIO_Init+0x140>)
 8002022:	f008 ff7f 	bl	800af24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 8002026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800202a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202c:	2301      	movs	r3, #1
 800202e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002030:	2301      	movs	r3, #1
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002034:	2302      	movs	r3, #2
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	480c      	ldr	r0, [pc, #48]	; (8002070 <MX_GPIO_Init+0x144>)
 8002040:	f008 ff70 	bl	800af24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002048:	2301      	movs	r3, #1
 800204a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800204c:	2302      	movs	r3, #2
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002050:	2301      	movs	r3, #1
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	4619      	mov	r1, r3
 800205a:	4806      	ldr	r0, [pc, #24]	; (8002074 <MX_GPIO_Init+0x148>)
 800205c:	f008 ff62 	bl	800af24 <HAL_GPIO_Init>

}
 8002060:	bf00      	nop
 8002062:	3730      	adds	r7, #48	; 0x30
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40023800 	.word	0x40023800
 800206c:	40020000 	.word	0x40020000
 8002070:	40020c00 	.word	0x40020c00
 8002074:	40020800 	.word	0x40020800

08002078 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 800207e:	4b32      	ldr	r3, [pc, #200]	; (8002148 <MX_FSMC_Init+0xd0>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
//	#define NAND_DEVICE MY_NAND_DEVICE// 0x70000000L
//#endif

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8002092:	463b      	mov	r3, r7
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
*/
  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 800209e:	4b2b      	ldr	r3, [pc, #172]	; (800214c <MX_FSMC_Init+0xd4>)
 80020a0:	4a2b      	ldr	r2, [pc, #172]	; (8002150 <MX_FSMC_Init+0xd8>)
 80020a2:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 80020a4:	4b29      	ldr	r3, [pc, #164]	; (800214c <MX_FSMC_Init+0xd4>)
 80020a6:	2210      	movs	r2, #16
 80020a8:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 80020aa:	4b28      	ldr	r3, [pc, #160]	; (800214c <MX_FSMC_Init+0xd4>)
 80020ac:	2202      	movs	r2, #2
 80020ae:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 80020b0:	4b26      	ldr	r3, [pc, #152]	; (800214c <MX_FSMC_Init+0xd4>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <MX_FSMC_Init+0xd4>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_512BYTE;
 80020bc:	4b23      	ldr	r3, [pc, #140]	; (800214c <MX_FSMC_Init+0xd4>)
 80020be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020c2:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 80020c4:	4b21      	ldr	r3, [pc, #132]	; (800214c <MX_FSMC_Init+0xd4>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 1;
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <MX_FSMC_Init+0xd4>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 80020d0:	4b1e      	ldr	r3, [pc, #120]	; (800214c <MX_FSMC_Init+0xd4>)
 80020d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 64;
 80020d8:	4b1c      	ldr	r3, [pc, #112]	; (800214c <MX_FSMC_Init+0xd4>)
 80020da:	2240      	movs	r2, #64	; 0x40
 80020dc:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 64;
 80020de:	4b1b      	ldr	r3, [pc, #108]	; (800214c <MX_FSMC_Init+0xd4>)
 80020e0:	2240      	movs	r2, #64	; 0x40
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <MX_FSMC_Init+0xd4>)
 80020e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 80020ec:	4b17      	ldr	r3, [pc, #92]	; (800214c <MX_FSMC_Init+0xd4>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 1024;
 80020f2:	4b16      	ldr	r3, [pc, #88]	; (800214c <MX_FSMC_Init+0xd4>)
 80020f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 80020fa:	4b14      	ldr	r3, [pc, #80]	; (800214c <MX_FSMC_Init+0xd4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 2;
 8002102:	2302      	movs	r3, #2
 8002104:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 3;
 8002106:	2303      	movs	r3, #3
 8002108:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 2;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 1;
 800210e:	2301      	movs	r3, #1
 8002110:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 2;
 8002112:	2302      	movs	r3, #2
 8002114:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 3;
 8002116:	2303      	movs	r3, #3
 8002118:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 2;
 800211a:	2302      	movs	r3, #2
 800211c:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 1;
 800211e:	2301      	movs	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8002122:	463a      	mov	r2, r7
 8002124:	f107 0310 	add.w	r3, r7, #16
 8002128:	4619      	mov	r1, r3
 800212a:	4808      	ldr	r0, [pc, #32]	; (800214c <MX_FSMC_Init+0xd4>)
 800212c:	f00b fe4a 	bl	800ddc4 <HAL_NAND_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_FSMC_Init+0xc2>
  {
    Error_Handler( );
 8002136:	f002 f897 	bl	8004268 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  	  io_nand_init(&hnand1);
 800213a:	4804      	ldr	r0, [pc, #16]	; (800214c <MX_FSMC_Init+0xd4>)
 800213c:	f7fe fdc2 	bl	8000cc4 <io_nand_init>
//nand->cfg.plane_number  = hwnand->Config.PlaneNbr;  // Number of plane (1 K9GAG08U0E )
//nand->cfg.plane_size    = hwnand->Config.PlaneSize * nand->cfg.block_number; // Plane size (In Page)
*/

  /* USER CODE END FSMC_Init 2 */
}
 8002140:	bf00      	nop
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	200015cc 	.word	0x200015cc
 800214c:	20000548 	.word	0x20000548
 8002150:	a0000060 	.word	0xa0000060

08002154 <pageIsEmpty>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
bool pageIsEmpty(uint32_t page)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
bool ret = false;
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]

	io_nand_read(page, rdBuf, chipConf.PageSize, 0)	;
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <pageIsEmpty+0x5c>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2300      	movs	r3, #0
 8002166:	4913      	ldr	r1, [pc, #76]	; (80021b4 <pageIsEmpty+0x60>)
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fbd5 	bl	8001918 <io_nand_read>
	if (!(devError & devNAND)) {
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <pageIsEmpty+0x64>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	2b00      	cmp	r3, #0
 8002178:	d115      	bne.n	80021a6 <pageIsEmpty+0x52>
		ret = true;
 800217a:	2301      	movs	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	e00b      	b.n	800219c <pageIsEmpty+0x48>
			if (*(uint8_t *)(rdBuf + i) != EMPTY) {
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4a0b      	ldr	r2, [pc, #44]	; (80021b4 <pageIsEmpty+0x60>)
 8002188:	4413      	add	r3, r2
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2bff      	cmp	r3, #255	; 0xff
 800218e:	d002      	beq.n	8002196 <pageIsEmpty+0x42>
				ret = false;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
				break;
 8002194:	e007      	b.n	80021a6 <pageIsEmpty+0x52>
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	3301      	adds	r3, #1
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <pageIsEmpty+0x5c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d3ee      	bcc.n	8002184 <pageIsEmpty+0x30>
			}
		}
	}

	return ret;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	200015d8 	.word	0x200015d8
 80021b4:	200015f0 	.word	0x200015f0
 80021b8:	20000594 	.word	0x20000594

080021bc <_write>:
	return NAND_Erase_Block(nandPort, &nans, 0);
}
*/
#ifdef SET_SMALL_FS
int _write(int file, char *buf, int len)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
	Report(0, "%.*s", len, buf);
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4904      	ldr	r1, [pc, #16]	; (80021e0 <_write+0x24>)
 80021ce:	2000      	movs	r0, #0
 80021d0:	f000 fbb4 	bl	800293c <Report>
	return len;
 80021d4:	687b      	ldr	r3, [r7, #4]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	080164d8 	.word	0x080164d8

080021e4 <str_fsErr>:
#endif
//
#ifdef SET_FS_TEST
static char *str_fsErr(int e)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	switch (e) {
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3354      	adds	r3, #84	; 0x54
 80021f0:	2b54      	cmp	r3, #84	; 0x54
 80021f2:	f200 80cb 	bhi.w	800238c <str_fsErr+0x1a8>
 80021f6:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <str_fsErr+0x18>)
 80021f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fc:	08002359 	.word	0x08002359
 8002200:	0800238d 	.word	0x0800238d
 8002204:	0800238d 	.word	0x0800238d
 8002208:	0800238d 	.word	0x0800238d
 800220c:	0800238d 	.word	0x0800238d
 8002210:	0800238d 	.word	0x0800238d
 8002214:	0800238d 	.word	0x0800238d
 8002218:	0800238d 	.word	0x0800238d
 800221c:	0800238d 	.word	0x0800238d
 8002220:	0800238d 	.word	0x0800238d
 8002224:	0800238d 	.word	0x0800238d
 8002228:	0800238d 	.word	0x0800238d
 800222c:	0800238d 	.word	0x0800238d
 8002230:	0800238d 	.word	0x0800238d
 8002234:	0800238d 	.word	0x0800238d
 8002238:	0800238d 	.word	0x0800238d
 800223c:	0800238d 	.word	0x0800238d
 8002240:	0800238d 	.word	0x0800238d
 8002244:	0800238d 	.word	0x0800238d
 8002248:	0800238d 	.word	0x0800238d
 800224c:	0800238d 	.word	0x0800238d
 8002250:	0800238d 	.word	0x0800238d
 8002254:	0800238d 	.word	0x0800238d
 8002258:	08002385 	.word	0x08002385
 800225c:	0800238d 	.word	0x0800238d
 8002260:	0800238d 	.word	0x0800238d
 8002264:	0800238d 	.word	0x0800238d
 8002268:	0800238d 	.word	0x0800238d
 800226c:	0800238d 	.word	0x0800238d
 8002270:	0800238d 	.word	0x0800238d
 8002274:	0800238d 	.word	0x0800238d
 8002278:	0800238d 	.word	0x0800238d
 800227c:	0800238d 	.word	0x0800238d
 8002280:	0800238d 	.word	0x0800238d
 8002284:	0800238d 	.word	0x0800238d
 8002288:	0800238d 	.word	0x0800238d
 800228c:	0800238d 	.word	0x0800238d
 8002290:	0800238d 	.word	0x0800238d
 8002294:	0800238d 	.word	0x0800238d
 8002298:	0800238d 	.word	0x0800238d
 800229c:	0800238d 	.word	0x0800238d
 80022a0:	0800238d 	.word	0x0800238d
 80022a4:	0800238d 	.word	0x0800238d
 80022a8:	0800238d 	.word	0x0800238d
 80022ac:	0800238d 	.word	0x0800238d
 80022b0:	0800236d 	.word	0x0800236d
 80022b4:	0800238d 	.word	0x0800238d
 80022b8:	0800238d 	.word	0x0800238d
 80022bc:	08002389 	.word	0x08002389
 80022c0:	0800238d 	.word	0x0800238d
 80022c4:	0800238d 	.word	0x0800238d
 80022c8:	0800238d 	.word	0x0800238d
 80022cc:	0800238d 	.word	0x0800238d
 80022d0:	0800238d 	.word	0x0800238d
 80022d4:	0800238d 	.word	0x0800238d
 80022d8:	0800238d 	.word	0x0800238d
 80022dc:	0800237d 	.word	0x0800237d
 80022e0:	08002375 	.word	0x08002375
 80022e4:	0800238d 	.word	0x0800238d
 80022e8:	0800238d 	.word	0x0800238d
 80022ec:	0800238d 	.word	0x0800238d
 80022f0:	0800238d 	.word	0x0800238d
 80022f4:	08002379 	.word	0x08002379
 80022f8:	08002369 	.word	0x08002369
 80022fc:	08002365 	.word	0x08002365
 8002300:	0800238d 	.word	0x0800238d
 8002304:	0800238d 	.word	0x0800238d
 8002308:	08002361 	.word	0x08002361
 800230c:	0800238d 	.word	0x0800238d
 8002310:	0800238d 	.word	0x0800238d
 8002314:	0800238d 	.word	0x0800238d
 8002318:	0800238d 	.word	0x0800238d
 800231c:	08002381 	.word	0x08002381
 8002320:	0800238d 	.word	0x0800238d
 8002324:	0800238d 	.word	0x0800238d
 8002328:	08002371 	.word	0x08002371
 800232c:	0800238d 	.word	0x0800238d
 8002330:	0800238d 	.word	0x0800238d
 8002334:	0800238d 	.word	0x0800238d
 8002338:	08002355 	.word	0x08002355
 800233c:	0800238d 	.word	0x0800238d
 8002340:	0800238d 	.word	0x0800238d
 8002344:	0800235d 	.word	0x0800235d
 8002348:	0800238d 	.word	0x0800238d
 800234c:	08002351 	.word	0x08002351
		case LFS_ERR_OK://          = 0,    // No error
			return "OK";
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <str_fsErr+0x1b8>)
 8002352:	e01c      	b.n	800238e <str_fsErr+0x1aa>
		case LFS_ERR_IO://          = -5,   // Error during device operation
			return "ERR_IO";
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <str_fsErr+0x1bc>)
 8002356:	e01a      	b.n	800238e <str_fsErr+0x1aa>
		case LFS_ERR_CORRUPT://     = -84,  // Corrupted
			return "ERR_CORRUPT";
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <str_fsErr+0x1c0>)
 800235a:	e018      	b.n	800238e <str_fsErr+0x1aa>
		case LFS_ERR_NOENT://       = -2,   // No directory entry
			return "ERR_NOENT";
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <str_fsErr+0x1c4>)
 800235e:	e016      	b.n	800238e <str_fsErr+0x1aa>
		case LFS_ERR_EXIST://       = -17,  // Entry already exists
			return "ERR_EXIST";
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <str_fsErr+0x1c8>)
 8002362:	e014      	b.n	800238e <str_fsErr+0x1aa>
		case LFS_ERR_NOTDIR://      = -20,  // Entry is not a dir
			return "ERR_NOTDIR";
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <str_fsErr+0x1cc>)
 8002366:	e012      	b.n	800238e <str_fsErr+0x1aa>
		case LFS_ERR_ISDIR://       = -21,  // Entry is a dir
			return "ERR_ISDIR";
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <str_fsErr+0x1d0>)
 800236a:	e010      	b.n	800238e <str_fsErr+0x1aa>
		case LFS_ERR_NOTEMPTY://    = -39,  // Dir is not empty
			return "ERR_NOTEMPTY";
 800236c:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <str_fsErr+0x1d4>)
 800236e:	e00e      	b.n	800238e <str_fsErr+0x1aa>
		case LFS_ERR_BADF://        = -9,   // Bad file number
			return "ERR_BADF";
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <str_fsErr+0x1d8>)
 8002372:	e00c      	b.n	800238e <str_fsErr+0x1aa>
		case LFS_ERR_FBIG://        = -27,  // File too large
			return "ERR_FBIG";
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <str_fsErr+0x1dc>)
 8002376:	e00a      	b.n	800238e <str_fsErr+0x1aa>
		case LFS_ERR_INVAL://       = -22,  // Invalid parameter
			return "ERR_INVAL";
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <str_fsErr+0x1e0>)
 800237a:	e008      	b.n	800238e <str_fsErr+0x1aa>
		case LFS_ERR_NOSPC://       = -28,  // No space left on device
			return "ERR_NOSPC";
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <str_fsErr+0x1e4>)
 800237e:	e006      	b.n	800238e <str_fsErr+0x1aa>
		case LFS_ERR_NOMEM://       = -12,  // No more memory available
			return "ERR_NOMEM";
 8002380:	4b12      	ldr	r3, [pc, #72]	; (80023cc <str_fsErr+0x1e8>)
 8002382:	e004      	b.n	800238e <str_fsErr+0x1aa>
		case LFS_ERR_NOATTR://      = -61,  // No data/attr available
			return "ERR_NOATTR";
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <str_fsErr+0x1ec>)
 8002386:	e002      	b.n	800238e <str_fsErr+0x1aa>
		case LFS_ERR_NAMETOOLONG:// = -36,  // File name too long
			return "ERR_NAMETOOLONG";
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <str_fsErr+0x1f0>)
 800238a:	e000      	b.n	800238e <str_fsErr+0x1aa>
	}

	return "UNKNOWN";
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <str_fsErr+0x1f4>)
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	080164e0 	.word	0x080164e0
 80023a0:	080164e4 	.word	0x080164e4
 80023a4:	080164ec 	.word	0x080164ec
 80023a8:	080164f8 	.word	0x080164f8
 80023ac:	08016504 	.word	0x08016504
 80023b0:	08016510 	.word	0x08016510
 80023b4:	0801651c 	.word	0x0801651c
 80023b8:	08016528 	.word	0x08016528
 80023bc:	08016538 	.word	0x08016538
 80023c0:	08016544 	.word	0x08016544
 80023c4:	08016550 	.word	0x08016550
 80023c8:	0801655c 	.word	0x0801655c
 80023cc:	08016568 	.word	0x08016568
 80023d0:	08016574 	.word	0x08016574
 80023d4:	08016580 	.word	0x08016580
 80023d8:	08016590 	.word	0x08016590

080023dc <get_qStat>:
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	dc18      	bgt.n	800241c <get_qStat+0x40>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f113 0f06 	cmn.w	r3, #6
 80023f0:	db2a      	blt.n	8002448 <get_qStat+0x6c>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3306      	adds	r3, #6
 80023f6:	2b06      	cmp	r3, #6
 80023f8:	d826      	bhi.n	8002448 <get_qStat+0x6c>
 80023fa:	a201      	add	r2, pc, #4	; (adr r2, 8002400 <get_qStat+0x24>)
 80023fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002400:	08002441 	.word	0x08002441
 8002404:	0800243d 	.word	0x0800243d
 8002408:	08002439 	.word	0x08002439
 800240c:	08002435 	.word	0x08002435
 8002410:	08002431 	.word	0x08002431
 8002414:	0800242d 	.word	0x0800242d
 8002418:	08002429 	.word	0x08002429
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002422:	4293      	cmp	r3, r2
 8002424:	d00e      	beq.n	8002444 <get_qStat+0x68>
 8002426:	e00f      	b.n	8002448 <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <get_qStat+0x7c>)
 800242a:	e00e      	b.n	800244a <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <get_qStat+0x80>)
 800242e:	e00c      	b.n	800244a <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <get_qStat+0x84>)
 8002432:	e00a      	b.n	800244a <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <get_qStat+0x88>)
 8002436:	e008      	b.n	800244a <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <get_qStat+0x8c>)
 800243a:	e006      	b.n	800244a <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <get_qStat+0x90>)
 800243e:	e004      	b.n	800244a <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <get_qStat+0x94>)
 8002442:	e002      	b.n	800244a <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <get_qStat+0x98>)
 8002446:	e000      	b.n	800244a <get_qStat+0x6e>
	}

	return "UnknownError";
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <get_qStat+0x9c>)
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	08016598 	.word	0x08016598
 800245c:	080165a0 	.word	0x080165a0
 8002460:	080165a8 	.word	0x080165a8
 8002464:	080165b8 	.word	0x080165b8
 8002468:	080165c8 	.word	0x080165c8
 800246c:	080165dc 	.word	0x080165dc
 8002470:	080165ec 	.word	0x080165ec
 8002474:	080165f8 	.word	0x080165f8
 8002478:	0801660c 	.word	0x0801660c

0800247c <get_logName>:
//-----------------------------------------------------------------------------
static const char *get_logName(uint8_t lg)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
	switch (lg) {
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d00a      	beq.n	80024a2 <get_logName+0x26>
 800248c:	2b02      	cmp	r3, #2
 800248e:	dc0a      	bgt.n	80024a6 <get_logName+0x2a>
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <get_logName+0x1e>
 8002494:	2b01      	cmp	r3, #1
 8002496:	d002      	beq.n	800249e <get_logName+0x22>
 8002498:	e005      	b.n	80024a6 <get_logName+0x2a>
		case logOff:
			return "logOff";
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <get_logName+0x38>)
 800249c:	e004      	b.n	80024a8 <get_logName+0x2c>
		case logOn:
			return "logOn";
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <get_logName+0x3c>)
 80024a0:	e002      	b.n	80024a8 <get_logName+0x2c>
		case logDump:
			return "logDump";
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <get_logName+0x40>)
 80024a4:	e000      	b.n	80024a8 <get_logName+0x2c>
	}

	return "???";
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <get_logName+0x44>)
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	0801661c 	.word	0x0801661c
 80024b8:	08016624 	.word	0x08016624
 80024bc:	0801662c 	.word	0x0801662c
 80024c0:	08016634 	.word	0x08016634

080024c4 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 80024d0:	2330      	movs	r3, #48	; 0x30
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	2300      	movs	r3, #0
 80024da:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <hex2bin+0x28>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <hex2bin+0x2c>
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	e0b2      	b.n	8002656 <hex2bin+0x192>
    if (len > 8) len = 8;
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d901      	bls.n	80024fa <hex2bin+0x36>
 80024f6:	2308      	movs	r3, #8
 80024f8:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	f1c3 0308 	rsb	r3, r3, #8
 8002500:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 8002504:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002508:	f107 0210 	add.w	r2, r7, #16
 800250c:	4413      	add	r3, r2
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4618      	mov	r0, r3
 8002514:	f012 fc92 	bl	8014e3c <memcpy>

    k = j = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800251e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002522:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 8002526:	e090      	b.n	800264a <hex2bin+0x186>
        jk = j + 2;
 8002528:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800252c:	3302      	adds	r3, #2
 800252e:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 8002530:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002538:	e066      	b.n	8002608 <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 800253a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800253e:	3328      	adds	r3, #40	; 0x28
 8002540:	443b      	add	r3, r7
 8002542:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002546:	2b2f      	cmp	r3, #47	; 0x2f
 8002548:	d918      	bls.n	800257c <hex2bin+0xb8>
 800254a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800254e:	3328      	adds	r3, #40	; 0x28
 8002550:	443b      	add	r3, r7
 8002552:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002556:	2b39      	cmp	r3, #57	; 0x39
 8002558:	d810      	bhi.n	800257c <hex2bin+0xb8>
 800255a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800255e:	3328      	adds	r3, #40	; 0x28
 8002560:	443b      	add	r3, r7
 8002562:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	3a30      	subs	r2, #48	; 0x30
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	3328      	adds	r3, #40	; 0x28
 8002574:	443b      	add	r3, r7
 8002576:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800257a:	e040      	b.n	80025fe <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 800257c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002580:	3328      	adds	r3, #40	; 0x28
 8002582:	443b      	add	r3, r7
 8002584:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002588:	2b60      	cmp	r3, #96	; 0x60
 800258a:	d918      	bls.n	80025be <hex2bin+0xfa>
 800258c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002590:	3328      	adds	r3, #40	; 0x28
 8002592:	443b      	add	r3, r7
 8002594:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002598:	2b66      	cmp	r3, #102	; 0x66
 800259a:	d810      	bhi.n	80025be <hex2bin+0xfa>
 800259c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025a0:	3328      	adds	r3, #40	; 0x28
 80025a2:	443b      	add	r3, r7
 80025a4:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80025a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	3a57      	subs	r2, #87	; 0x57
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	3328      	adds	r3, #40	; 0x28
 80025b6:	443b      	add	r3, r7
 80025b8:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80025bc:	e01f      	b.n	80025fe <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 80025be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025c2:	3328      	adds	r3, #40	; 0x28
 80025c4:	443b      	add	r3, r7
 80025c6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80025ca:	2b40      	cmp	r3, #64	; 0x40
 80025cc:	d917      	bls.n	80025fe <hex2bin+0x13a>
 80025ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025d2:	3328      	adds	r3, #40	; 0x28
 80025d4:	443b      	add	r3, r7
 80025d6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80025da:	2b46      	cmp	r3, #70	; 0x46
 80025dc:	d80f      	bhi.n	80025fe <hex2bin+0x13a>
 80025de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025e2:	3328      	adds	r3, #40	; 0x28
 80025e4:	443b      	add	r3, r7
 80025e6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80025ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	3a37      	subs	r2, #55	; 0x37
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	3328      	adds	r3, #40	; 0x28
 80025f8:	443b      	add	r3, r7
 80025fa:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 80025fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002602:	3301      	adds	r3, #1
 8002604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002608:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800260c:	7ffb      	ldrb	r3, [r7, #31]
 800260e:	429a      	cmp	r2, r3
 8002610:	d393      	bcc.n	800253a <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 8002612:	7b3b      	ldrb	r3, [r7, #12]
 8002614:	011a      	lsls	r2, r3, #4
 8002616:	7b7b      	ldrb	r3, [r7, #13]
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 8002620:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002624:	f1c3 0303 	rsb	r3, r3, #3
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	6a3a      	ldr	r2, [r7, #32]
 8002632:	4313      	orrs	r3, r2
 8002634:	623b      	str	r3, [r7, #32]
        k++;
 8002636:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800263a:	3301      	adds	r3, #1
 800263c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 8002640:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002644:	3302      	adds	r3, #2
 8002646:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 800264a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800264e:	2b03      	cmp	r3, #3
 8002650:	f67f af6a 	bls.w	8002528 <hex2bin+0x64>
    }

    return ret;
 8002654:	6a3b      	ldr	r3, [r7, #32]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3728      	adds	r7, #40	; 0x28
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
	if (on)
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d006      	beq.n	800267e <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 8002670:	2201      	movs	r2, #1
 8002672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002676:	4807      	ldr	r0, [pc, #28]	; (8002694 <errLedOn+0x34>)
 8002678:	f008 fdf0 	bl	800b25c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 800267c:	e005      	b.n	800268a <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 800267e:	2200      	movs	r2, #0
 8002680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002684:	4803      	ldr	r0, [pc, #12]	; (8002694 <errLedOn+0x34>)
 8002686:	f008 fde9 	bl	800b25c <HAL_GPIO_WritePin>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40020c00 	.word	0x40020c00

08002698 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
	return secCounter;
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <get_secCounter+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20000598 	.word	0x20000598

080026b0 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
	secCounter++;
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <inc_secCounter+0x18>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	4a03      	ldr	r2, [pc, #12]	; (80026c8 <inc_secCounter+0x18>)
 80026bc:	6013      	str	r3, [r2, #0]
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	20000598 	.word	0x20000598

080026cc <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
	return msCounter;
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <get_msCounter+0x18>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	200005a0 	.word	0x200005a0

080026e8 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
	msCounter++;
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <inc_msCounter+0x20>)
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	1c50      	adds	r0, r2, #1
 80026f4:	f143 0100 	adc.w	r1, r3, #0
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <inc_msCounter+0x20>)
 80026fa:	e9c3 0100 	strd	r0, r1, [r3]
}
 80026fe:	bf00      	nop
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	200005a0 	.word	0x200005a0

0800270c <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8002714:	f7ff ffc0 	bl	8002698 <get_secCounter>
 8002718:	4602      	mov	r2, r0
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 800272e:	f7ff ffb3 	bl	8002698 <get_secCounter>
 8002732:	4602      	mov	r2, r0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4293      	cmp	r3, r2
 8002738:	bf94      	ite	ls
 800273a:	2301      	movls	r3, #1
 800273c:	2300      	movhi	r3, #0
 800273e:	b2db      	uxtb	r3, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b094      	sub	sp, #80	; 0x50
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	2000      	movs	r0, #0
 8002754:	460a      	mov	r2, r1
 8002756:	4603      	mov	r3, r0
 8002758:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 800275c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002760:	f107 0320 	add.w	r3, r7, #32
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f012 fa84 	bl	8014c74 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 800276c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800276e:	b2db      	uxtb	r3, r3
 8002770:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8002772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002774:	b2db      	uxtb	r3, r3
 8002776:	3301      	adds	r3, #1
 8002778:	b2db      	uxtb	r3, r3
 800277a:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 800277c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277e:	b2db      	uxtb	r3, r3
 8002780:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8002782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002784:	b2db      	uxtb	r3, r3
 8002786:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8002788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278a:	b2da      	uxtb	r2, r3
 800278c:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <set_Date+0xb0>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	4413      	add	r3, r2
 8002792:	b2db      	uxtb	r3, r3
 8002794:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	b2db      	uxtb	r3, r3
 800279a:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 800279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80027a2:	f107 030c 	add.w	r3, r7, #12
 80027a6:	2200      	movs	r2, #0
 80027a8:	4619      	mov	r1, r3
 80027aa:	4814      	ldr	r0, [pc, #80]	; (80027fc <set_Date+0xb4>)
 80027ac:	f00c fa82 	bl	800ecb4 <HAL_RTC_SetTime>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <set_Date+0x7e>
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <set_Date+0xb8>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	f043 0308 	orr.w	r3, r3, #8
 80027be:	b29a      	uxth	r2, r3
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <set_Date+0xb8>)
 80027c2:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 80027c4:	e014      	b.n	80027f0 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	2200      	movs	r2, #0
 80027cc:	4619      	mov	r1, r3
 80027ce:	480b      	ldr	r0, [pc, #44]	; (80027fc <set_Date+0xb4>)
 80027d0:	f00c fb68 	bl	800eea4 <HAL_RTC_SetDate>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <set_Date+0xa2>
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <set_Date+0xb8>)
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	f043 0308 	orr.w	r3, r3, #8
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <set_Date+0xb8>)
 80027e6:	801a      	strh	r2, [r3, #0]
}
 80027e8:	e002      	b.n	80027f0 <set_Date+0xa8>
			setDate = true;
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <set_Date+0xbc>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
}
 80027f0:	bf00      	nop
 80027f2:	3750      	adds	r7, #80	; 0x50
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	200015ad 	.word	0x200015ad
 80027fc:	20000384 	.word	0x20000384
 8002800:	20000594 	.word	0x20000594
 8002804:	200015ac 	.word	0x200015ac

08002808 <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b093      	sub	sp, #76	; 0x4c
 800280c:	af04      	add	r7, sp, #16
 800280e:	6078      	str	r0, [r7, #4]
int ret = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8002814:	4b40      	ldr	r3, [pc, #256]	; (8002918 <sec2str+0x110>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	f083 0301 	eor.w	r3, r3, #1
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d040      	beq.n	80028a4 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8002822:	f7ff ff39 	bl	8002698 <get_secCounter>
 8002826:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8002828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282a:	4a3c      	ldr	r2, [pc, #240]	; (800291c <sec2str+0x114>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	0c1b      	lsrs	r3, r3, #16
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	4a39      	ldr	r2, [pc, #228]	; (800291c <sec2str+0x114>)
 8002838:	fba2 1203 	umull	r1, r2, r2, r3
 800283c:	0c12      	lsrs	r2, r2, #16
 800283e:	4938      	ldr	r1, [pc, #224]	; (8002920 <sec2str+0x118>)
 8002840:	fb01 f202 	mul.w	r2, r1, r2
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	4a36      	ldr	r2, [pc, #216]	; (8002924 <sec2str+0x11c>)
 800284c:	fba2 2303 	umull	r2, r3, r2, r3
 8002850:	0adb      	lsrs	r3, r3, #11
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8002854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002856:	4a33      	ldr	r2, [pc, #204]	; (8002924 <sec2str+0x11c>)
 8002858:	fba2 1203 	umull	r1, r2, r2, r3
 800285c:	0ad2      	lsrs	r2, r2, #11
 800285e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002862:	fb01 f202 	mul.w	r2, r1, r2
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 800286a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286c:	4a2e      	ldr	r2, [pc, #184]	; (8002928 <sec2str+0x120>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 8002876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002878:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <sec2str+0x120>)
 800287a:	fba3 1302 	umull	r1, r3, r3, r2
 800287e:	0959      	lsrs	r1, r3, #5
 8002880:	460b      	mov	r3, r1
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	1a5b      	subs	r3, r3, r1
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 800288c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002898:	4924      	ldr	r1, [pc, #144]	; (800292c <sec2str+0x124>)
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f012 ff44 	bl	8015728 <siprintf>
 80028a0:	6378      	str	r0, [r7, #52]	; 0x34
 80028a2:	e034      	b.n	800290e <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 80028a4:	f107 030c 	add.w	r3, r7, #12
 80028a8:	2200      	movs	r2, #0
 80028aa:	4619      	mov	r1, r3
 80028ac:	4820      	ldr	r0, [pc, #128]	; (8002930 <sec2str+0x128>)
 80028ae:	f00c fb7d 	bl	800efac <HAL_RTC_GetDate>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <sec2str+0xc0>
 80028b8:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <sec2str+0x12c>)
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	f043 0308 	orr.w	r3, r3, #8
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <sec2str+0x12c>)
 80028c4:	801a      	strh	r2, [r3, #0]
 80028c6:	e022      	b.n	800290e <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	2200      	movs	r2, #0
 80028ce:	4619      	mov	r1, r3
 80028d0:	4817      	ldr	r0, [pc, #92]	; (8002930 <sec2str+0x128>)
 80028d2:	f00c fa89 	bl	800ede8 <HAL_RTC_GetTime>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <sec2str+0xe4>
 80028dc:	4b15      	ldr	r3, [pc, #84]	; (8002934 <sec2str+0x12c>)
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	f043 0308 	orr.w	r3, r3, #8
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	4b13      	ldr	r3, [pc, #76]	; (8002934 <sec2str+0x12c>)
 80028e8:	801a      	strh	r2, [r3, #0]
 80028ea:	e010      	b.n	800290e <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 80028ec:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80028ee:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 80028f0:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80028f2:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 80028f4:	7c3b      	ldrb	r3, [r7, #16]
 80028f6:	7c7a      	ldrb	r2, [r7, #17]
 80028f8:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80028fa:	9102      	str	r1, [sp, #8]
 80028fc:	9201      	str	r2, [sp, #4]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	4623      	mov	r3, r4
 8002902:	4602      	mov	r2, r0
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <sec2str+0x130>)
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f012 ff0e 	bl	8015728 <siprintf>
 800290c:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 800290e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002910:	4618      	mov	r0, r3
 8002912:	373c      	adds	r7, #60	; 0x3c
 8002914:	46bd      	mov	sp, r7
 8002916:	bd90      	pop	{r4, r7, pc}
 8002918:	200015ac 	.word	0x200015ac
 800291c:	c22e4507 	.word	0xc22e4507
 8002920:	00015180 	.word	0x00015180
 8002924:	91a2b3c5 	.word	0x91a2b3c5
 8002928:	88888889 	.word	0x88888889
 800292c:	08016638 	.word	0x08016638
 8002930:	20000384 	.word	0x20000384
 8002934:	20000594 	.word	0x20000594
 8002938:	08016650 	.word	0x08016650

0800293c <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(const uint8_t addTime, const char *fmt, ...)
{
 800293c:	b40e      	push	{r1, r2, r3}
 800293e:	b590      	push	{r4, r7, lr}
 8002940:	b086      	sub	sp, #24
 8002942:	af00      	add	r7, sp, #0
 8002944:	4603      	mov	r3, r0
 8002946:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 8002948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800294c:	613b      	str	r3, [r7, #16]
int dl = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 8002952:	4b28      	ldr	r3, [pc, #160]	; (80029f4 <Report+0xb8>)
 8002954:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d010      	beq.n	8002984 <Report+0x48>
		dl = sec2str(buf);
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff ff50 	bl	8002808 <sec2str>
 8002968:	6178      	str	r0, [r7, #20]
		strcat(buf, " | ");
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f7fd fc30 	bl	80001d0 <strlen>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4413      	add	r3, r2
 8002978:	4a1f      	ldr	r2, [pc, #124]	; (80029f8 <Report+0xbc>)
 800297a:	6810      	ldr	r0, [r2, #0]
 800297c:	6018      	str	r0, [r3, #0]
		dl += 3;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3303      	adds	r3, #3
 8002982:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 8002984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002988:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	18d0      	adds	r0, r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	1ad1      	subs	r1, r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299a:	f013 f82d 	bl	80159f8 <vsniprintf>

	uartRdy = false;
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <Report+0xc0>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 80029a4:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <Report+0xc4>)
 80029a6:	681c      	ldr	r4, [r3, #0]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7fd fc11 	bl	80001d0 <strlen>
 80029ae:	4603      	mov	r3, r0
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	68f9      	ldr	r1, [r7, #12]
 80029b6:	4620      	mov	r0, r4
 80029b8:	f00d fdf4 	bl	80105a4 <HAL_UART_Transmit_DMA>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d006      	beq.n	80029d0 <Report+0x94>
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <Report+0xc8>)
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <Report+0xc8>)
 80029ce:	801a      	strh	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 80029d0:	bf00      	nop
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <Report+0xc0>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f083 0301 	eor.w	r3, r3, #1
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f7      	bne.n	80029d2 <Report+0x96>

	va_end(args);

	return 0;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80029ee:	b003      	add	sp, #12
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	200005a8 	.word	0x200005a8
 80029f8:	0801666c 	.word	0x0801666c
 80029fc:	20000068 	.word	0x20000068
 8002a00:	20000078 	.word	0x20000078
 8002a04:	20000594 	.word	0x20000594

08002a08 <showBuf>:
//-------------------------------------------------------------------------------------------
void showBuf(uint8_t type, bool rd, uint32_t adr, uint32_t len, const uint8_t *buf)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08e      	sub	sp, #56	; 0x38
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60ba      	str	r2, [r7, #8]
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	4603      	mov	r3, r0
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	460b      	mov	r3, r1
 8002a18:	73bb      	strb	r3, [r7, #14]
int step = 32;
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	617b      	str	r3, [r7, #20]
uint32_t ind = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t addr = adr + devAdr;
 8002a22:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <showBuf+0x138>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	4413      	add	r3, r2
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28

	if (ind < len) {
 8002a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d271      	bcs.n	8002b18 <showBuf+0x110>
		bool done = false;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint32_t ix = 0, sch = len / step;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	61fb      	str	r3, [r7, #28]
		if (len % step) sch++;
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a50:	fb01 f202 	mul.w	r2, r1, r2
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <showBuf+0x58>
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	61fb      	str	r3, [r7, #28]
		stx[0] = '\0';
 8002a60:	4b38      	ldr	r3, [pc, #224]	; (8002b44 <showBuf+0x13c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
		while (!done) {
 8002a66:	e046      	b.n	8002af6 <showBuf+0xee>
			sprintf(stx+strlen(stx), "%08X ", (unsigned int)addr);
 8002a68:	4836      	ldr	r0, [pc, #216]	; (8002b44 <showBuf+0x13c>)
 8002a6a:	f7fd fbb1 	bl	80001d0 <strlen>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4a34      	ldr	r2, [pc, #208]	; (8002b44 <showBuf+0x13c>)
 8002a72:	4413      	add	r3, r2
 8002a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a76:	4934      	ldr	r1, [pc, #208]	; (8002b48 <showBuf+0x140>)
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f012 fe55 	bl	8015728 <siprintf>
			for (int i = 0; i < step; i++) {
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	e01d      	b.n	8002ac0 <showBuf+0xb8>
				sprintf(stx+strlen(stx), " %02X", *(buf + i + ind));
 8002a84:	482f      	ldr	r0, [pc, #188]	; (8002b44 <showBuf+0x13c>)
 8002a86:	f7fd fba3 	bl	80001d0 <strlen>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4a2d      	ldr	r2, [pc, #180]	; (8002b44 <showBuf+0x13c>)
 8002a8e:	1898      	adds	r0, r3, r2
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	4413      	add	r3, r2
 8002a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a98:	4413      	add	r3, r2
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	492b      	ldr	r1, [pc, #172]	; (8002b4c <showBuf+0x144>)
 8002aa0:	f012 fe42 	bl	8015728 <siprintf>
				ix++;
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	623b      	str	r3, [r7, #32]
				if (ix == len) {
 8002aaa:	6a3a      	ldr	r2, [r7, #32]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d103      	bne.n	8002aba <showBuf+0xb2>
					done = true;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
 8002ab8:	e006      	b.n	8002ac8 <showBuf+0xc0>
			for (int i = 0; i < step; i++) {
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	3301      	adds	r3, #1
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	dbdd      	blt.n	8002a84 <showBuf+0x7c>
				}
			}
			strcat(stx, eol);
 8002ac8:	4b21      	ldr	r3, [pc, #132]	; (8002b50 <showBuf+0x148>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	481d      	ldr	r0, [pc, #116]	; (8002b44 <showBuf+0x13c>)
 8002ad0:	f012 fe8d 	bl	80157ee <strcat>
			addr += step;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ad8:	4413      	add	r3, r2
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
			ind += step;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ae0:	4413      	add	r3, r2
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
			sch--;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	61fb      	str	r3, [r7, #28]
			if (!sch) done = true;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <showBuf+0xee>
 8002af0:	2301      	movs	r3, #1
 8002af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (!done) {
 8002af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002afa:	f083 0301 	eor.w	r3, r3, #1
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1b1      	bne.n	8002a68 <showBuf+0x60>
		}
		if (dbg != logOff) Report(0, "%s", stx);
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <showBuf+0x14c>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d014      	beq.n	8002b36 <showBuf+0x12e>
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <showBuf+0x13c>)
 8002b0e:	4912      	ldr	r1, [pc, #72]	; (8002b58 <showBuf+0x150>)
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7ff ff13 	bl	800293c <Report>
	} else {
		if (dbg != logOff) Report(0, "\tError: ind=%lu len=%lu readed=%d%s", ind, len, rd, eol);
	}
}
 8002b16:	e00e      	b.n	8002b36 <showBuf+0x12e>
		if (dbg != logOff) Report(0, "\tError: ind=%lu len=%lu readed=%d%s", ind, len, rd, eol);
 8002b18:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <showBuf+0x14c>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <showBuf+0x12e>
 8002b20:	7bbb      	ldrb	r3, [r7, #14]
 8002b22:	4a0b      	ldr	r2, [pc, #44]	; (8002b50 <showBuf+0x148>)
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	9201      	str	r2, [sp, #4]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b2e:	490b      	ldr	r1, [pc, #44]	; (8002b5c <showBuf+0x154>)
 8002b30:	2000      	movs	r0, #0
 8002b32:	f7ff ff03 	bl	800293c <Report>
}
 8002b36:	bf00      	nop
 8002b38:	3730      	adds	r7, #48	; 0x30
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200015b8 	.word	0x200015b8
 8002b44:	200025f4 	.word	0x200025f4
 8002b48:	08016670 	.word	0x08016670
 8002b4c:	08016678 	.word	0x08016678
 8002b50:	20000004 	.word	0x20000004
 8002b54:	2000006a 	.word	0x2000006a
 8002b58:	08016680 	.word	0x08016680
 8002b5c:	08016684 	.word	0x08016684

08002b60 <audioReadRegs>:
//-------------------------------------------------------------------------------------------
#ifdef SET_AUDIO_DAC
//-------------------------------------------------------------------------------------------
HAL_StatusTypeDef audioReadRegs(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	4603      	mov	r3, r0
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	71fb      	strb	r3, [r7, #7]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	71bb      	strb	r3, [r7, #6]
HAL_StatusTypeDef ret = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]

	ret |= HAL_I2C_Master_Transmit(audioCtlPort, AUDIO_CTL_ADDRESS, &reg, 1, 250);
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <audioReadRegs+0x5c>)
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	1dfa      	adds	r2, r7, #7
 8002b7a:	23fa      	movs	r3, #250	; 0xfa
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	2301      	movs	r3, #1
 8002b80:	2194      	movs	r1, #148	; 0x94
 8002b82:	f008 fce3 	bl	800b54c <HAL_I2C_Master_Transmit>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	73fb      	strb	r3, [r7, #15]
	ret |= HAL_I2C_Master_Receive(audioCtlPort, AUDIO_CTL_ADDRESS, buf, len, 1000);
 8002b90:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <audioReadRegs+0x5c>)
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	79bb      	ldrb	r3, [r7, #6]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b9c:	9200      	str	r2, [sp, #0]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	2194      	movs	r1, #148	; 0x94
 8002ba2:	f008 fdd1 	bl	800b748 <HAL_I2C_Master_Receive>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	461a      	mov	r2, r3
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	73fb      	strb	r3, [r7, #15]

	return ret;
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	200000a4 	.word	0x200000a4

08002bc0 <audioInit>:
//-------------------------------------------------------------------------------------------
HAL_StatusTypeDef audioInit()
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
HAL_StatusTypeDef ret = HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	71fb      	strb	r3, [r7, #7]
uint8_t byte = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	71bb      	strb	r3, [r7, #6]

	if ((ret = HAL_I2C_IsDeviceReady(audioCtlPort, AUDIO_CTL_ADDRESS, 3, 1000)) != HAL_OK) return ret;
 8002bce:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <audioInit+0x60>)
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	2194      	movs	r1, #148	; 0x94
 8002bda:	f008 ffdb 	bl	800bb94 <HAL_I2C_IsDeviceReady>
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <audioInit+0x2c>
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	e014      	b.n	8002c16 <audioInit+0x56>
	//i2cTxRdy = 0;
	//if ((ret = HAL_I2C_Master_Transmit_DMA(audioCtlPort, AUDIO_CTL_ADDRESS, dat, sizeof(dat))) != HAL_OK) devError |= devI2C;
	//while (HAL_I2C_GetState(audioCtlPort) != HAL_I2C_STATE_READY) {}


	if (audioReadRegs(AUDIO_ID_REG, &byte, 1) == HAL_OK) {
 8002bec:	1dbb      	adds	r3, r7, #6
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f7ff ffb4 	bl	8002b60 <audioReadRegs>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <audioInit+0x54>
		audioID = byte >> 3;
 8002bfe:	79bb      	ldrb	r3, [r7, #6]
 8002c00:	08db      	lsrs	r3, r3, #3
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <audioInit+0x64>)
 8002c06:	701a      	strb	r2, [r3, #0]
		audioRev = byte & 7;
 8002c08:	79bb      	ldrb	r3, [r7, #6]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <audioInit+0x68>)
 8002c12:	701a      	strb	r2, [r3, #0]
	}

	return ret;
 8002c14:	79fb      	ldrb	r3, [r7, #7]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200000a4 	.word	0x200000a4
 8002c24:	20002df8 	.word	0x20002df8
 8002c28:	20002df9 	.word	0x20002df9

08002c2c <HAL_UART_RxCpltCallback>:
#endif
//-------------------------------------------------------------------------------------------
//                        CallBack Functions
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b092      	sub	sp, #72	; 0x48
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4aa9      	ldr	r2, [pc, #676]	; (8002ee0 <HAL_UART_RxCpltCallback+0x2b4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	f040 8264 	bne.w	8003108 <HAL_UART_RxCpltCallback+0x4dc>

		rxBuf[ruk++] = (char)rxByte;
 8002c40:	4ba8      	ldr	r3, [pc, #672]	; (8002ee4 <HAL_UART_RxCpltCallback+0x2b8>)
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	b291      	uxth	r1, r2
 8002c48:	4aa6      	ldr	r2, [pc, #664]	; (8002ee4 <HAL_UART_RxCpltCallback+0x2b8>)
 8002c4a:	8011      	strh	r1, [r2, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4ba6      	ldr	r3, [pc, #664]	; (8002ee8 <HAL_UART_RxCpltCallback+0x2bc>)
 8002c50:	7819      	ldrb	r1, [r3, #0]
 8002c52:	4ba6      	ldr	r3, [pc, #664]	; (8002eec <HAL_UART_RxCpltCallback+0x2c0>)
 8002c54:	5499      	strb	r1, [r3, r2]

		if (rxByte == 0x0a) {//end of line
 8002c56:	4ba4      	ldr	r3, [pc, #656]	; (8002ee8 <HAL_UART_RxCpltCallback+0x2bc>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b0a      	cmp	r3, #10
 8002c5c:	f040 824f 	bne.w	80030fe <HAL_UART_RxCpltCallback+0x4d2>
			rxBuf[--ruk] = '\0';
 8002c60:	4ba0      	ldr	r3, [pc, #640]	; (8002ee4 <HAL_UART_RxCpltCallback+0x2b8>)
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	4b9e      	ldr	r3, [pc, #632]	; (8002ee4 <HAL_UART_RxCpltCallback+0x2b8>)
 8002c6a:	801a      	strh	r2, [r3, #0]
 8002c6c:	4b9d      	ldr	r3, [pc, #628]	; (8002ee4 <HAL_UART_RxCpltCallback+0x2b8>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b9e      	ldr	r3, [pc, #632]	; (8002eec <HAL_UART_RxCpltCallback+0x2c0>)
 8002c74:	2100      	movs	r1, #0
 8002c76:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	647b      	str	r3, [r7, #68]	; 0x44
			bool check = false;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			cmd_flag = 0;
 8002c82:	4b9b      	ldr	r3, [pc, #620]	; (8002ef0 <HAL_UART_RxCpltCallback+0x2c4>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
			s_qcmd qcmd = {0};
 8002c88:	2300      	movs	r3, #0
 8002c8a:	83bb      	strh	r3, [r7, #28]
			int8_t idx = -1;
 8002c8c:	23ff      	movs	r3, #255	; 0xff
 8002c8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			if (strlen(rxBuf) >= 4) {
 8002c92:	4896      	ldr	r0, [pc, #600]	; (8002eec <HAL_UART_RxCpltCallback+0x2c0>)
 8002c94:	f7fd fa9c 	bl	80001d0 <strlen>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	f240 8205 	bls.w	80030aa <HAL_UART_RxCpltCallback+0x47e>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8002ca6:	e018      	b.n	8002cda <HAL_UART_RxCpltCallback+0xae>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds ="restart"
 8002ca8:	f997 3041 	ldrsb.w	r3, [r7, #65]	; 0x41
 8002cac:	4a91      	ldr	r2, [pc, #580]	; (8002ef4 <HAL_UART_RxCpltCallback+0x2c8>)
 8002cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	488d      	ldr	r0, [pc, #564]	; (8002eec <HAL_UART_RxCpltCallback+0x2c0>)
 8002cb6:	f012 fdd1 	bl	801585c <strstr>
 8002cba:	6478      	str	r0, [r7, #68]	; 0x44
 8002cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d004      	beq.n	8002ccc <HAL_UART_RxCpltCallback+0xa0>
														  //"erase:"
														  //"check:"
														  //"log:"
														  //"info"
						  	  	  	  	  	  	  	  	  //"help"
						idx = i;
 8002cc2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002cc6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
						break;
 8002cca:	e00a      	b.n	8002ce2 <HAL_UART_RxCpltCallback+0xb6>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002ccc:	f997 3041 	ldrsb.w	r3, [r7, #65]	; 0x41
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8002cda:	f997 3041 	ldrsb.w	r3, [r7, #65]	; 0x41
 8002cde:	2b0b      	cmp	r3, #11
 8002ce0:	dde2      	ble.n	8002ca8 <HAL_UART_RxCpltCallback+0x7c>
					}
				}
				if ((uk == rxBuf) && (idx != -1)) {
 8002ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ce4:	4a81      	ldr	r2, [pc, #516]	; (8002eec <HAL_UART_RxCpltCallback+0x2c0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	f040 81df 	bne.w	80030aa <HAL_UART_RxCpltCallback+0x47e>
 8002cec:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cf4:	f000 81d9 	beq.w	80030aa <HAL_UART_RxCpltCallback+0x47e>
					nandLen = MAX_LEN_DATA;//256;
 8002cf8:	4b7f      	ldr	r3, [pc, #508]	; (8002ef8 <HAL_UART_RxCpltCallback+0x2cc>)
 8002cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cfe:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 8002d00:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 8002d04:	4a7b      	ldr	r2, [pc, #492]	; (8002ef4 <HAL_UART_RxCpltCallback+0x2c8>)
 8002d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd fa60 	bl	80001d0 <strlen>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d14:	4413      	add	r3, r2
 8002d16:	647b      	str	r3, [r7, #68]	; 0x44
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d20:	2300      	movs	r3, #0
 8002d22:	63bb      	str	r3, [r7, #56]	; 0x38
					switch (idx) {
 8002d24:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 8002d28:	2b0b      	cmp	r3, #11
 8002d2a:	f200 819e 	bhi.w	800306a <HAL_UART_RxCpltCallback+0x43e>
 8002d2e:	a201      	add	r2, pc, #4	; (adr r2, 8002d34 <HAL_UART_RxCpltCallback+0x108>)
 8002d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d34:	08002d65 	.word	0x08002d65
 8002d38:	08002d6d 	.word	0x08002d6d
 8002d3c:	08002dc5 	.word	0x08002dc5
 8002d40:	08002e33 	.word	0x08002e33
 8002d44:	08002e4b 	.word	0x08002e4b
 8002d48:	08002fa7 	.word	0x08002fa7
 8002d4c:	08002fdd 	.word	0x08002fdd
 8002d50:	08002fdd 	.word	0x08002fdd
 8002d54:	08003011 	.word	0x08003011
 8002d58:	08002d65 	.word	0x08002d65
 8002d5c:	08002d65 	.word	0x08002d65
 8002d60:	08002d65 	.word	0x08002d65
						case cmdHelp:
						case cmdInfo:
						case cmdRestart:
						case cmdMem:
							cmd_flag = 1;
 8002d64:	4b62      	ldr	r3, [pc, #392]	; (8002ef0 <HAL_UART_RxCpltCallback+0x2c4>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
						break;
 8002d6a:	e17e      	b.n	800306a <HAL_UART_RxCpltCallback+0x43e>
						case cmdEpoch:
							if (strlen(uk) < 10) {
 8002d6c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002d6e:	f7fd fa2f 	bl	80001d0 <strlen>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b09      	cmp	r3, #9
 8002d76:	d802      	bhi.n	8002d7e <HAL_UART_RxCpltCallback+0x152>
								qcmd.attr = 1;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	777b      	strb	r3, [r7, #29]
 8002d7c:	e01e      	b.n	8002dbc <HAL_UART_RxCpltCallback+0x190>
							} else {
								uki = strchr(uk, ':');
 8002d7e:	213a      	movs	r1, #58	; 0x3a
 8002d80:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002d82:	f012 fd43 	bl	801580c <strchr>
 8002d86:	63f8      	str	r0, [r7, #60]	; 0x3c
								if (uki) {
 8002d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00c      	beq.n	8002da8 <HAL_UART_RxCpltCallback+0x17c>
									tZone = (uint8_t)atol(uki + 1);
 8002d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d90:	3301      	adds	r3, #1
 8002d92:	4618      	mov	r0, r3
 8002d94:	f011 fe5c 	bl	8014a50 <atol>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	4b57      	ldr	r3, [pc, #348]	; (8002efc <HAL_UART_RxCpltCallback+0x2d0>)
 8002d9e:	701a      	strb	r2, [r3, #0]
									*uki = '\0';
 8002da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e002      	b.n	8002dae <HAL_UART_RxCpltCallback+0x182>
								} else {
									tZone = 0;
 8002da8:	4b54      	ldr	r3, [pc, #336]	; (8002efc <HAL_UART_RxCpltCallback+0x2d0>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
								}
								epoch = (uint32_t)atol(uk);
 8002dae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002db0:	f011 fe4e 	bl	8014a50 <atol>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461a      	mov	r2, r3
 8002db8:	4b51      	ldr	r3, [pc, #324]	; (8002f00 <HAL_UART_RxCpltCallback+0x2d4>)
 8002dba:	601a      	str	r2, [r3, #0]
							}
							cmd_flag = 1;
 8002dbc:	4b4c      	ldr	r3, [pc, #304]	; (8002ef0 <HAL_UART_RxCpltCallback+0x2c4>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
						break;
 8002dc2:	e152      	b.n	800306a <HAL_UART_RxCpltCallback+0x43e>
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 8002dc4:	213a      	movs	r1, #58	; 0x3a
 8002dc6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002dc8:	f012 fd20 	bl	801580c <strchr>
 8002dcc:	63f8      	str	r0, [r7, #60]	; 0x3c
							if (uki) {
 8002dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <HAL_UART_RxCpltCallback+0x1c0>
								nandLen = atol(uki + 1);
 8002dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f011 fe39 	bl	8014a50 <atol>
 8002dde:	4603      	mov	r3, r0
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	4b45      	ldr	r3, [pc, #276]	; (8002ef8 <HAL_UART_RxCpltCallback+0x2cc>)
 8002de4:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 8002de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 8002dec:	4945      	ldr	r1, [pc, #276]	; (8002f04 <HAL_UART_RxCpltCallback+0x2d8>)
 8002dee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002df0:	f012 fd34 	bl	801585c <strstr>
 8002df4:	63f8      	str	r0, [r7, #60]	; 0x3c
							if (uki) {
 8002df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00f      	beq.n	8002e1c <HAL_UART_RxCpltCallback+0x1f0>
								uki += 2;
 8002dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfe:	3302      	adds	r3, #2
 8002e00:	63fb      	str	r3, [r7, #60]	; 0x3c
								nandAdr = hex2bin(uki, strlen(uki));
 8002e02:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e04:	f7fd f9e4 	bl	80001d0 <strlen>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e10:	f7ff fb58 	bl	80024c4 <hex2bin>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4a3c      	ldr	r2, [pc, #240]	; (8002f08 <HAL_UART_RxCpltCallback+0x2dc>)
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e006      	b.n	8002e2a <HAL_UART_RxCpltCallback+0x1fe>
							} else {
								nandAdr = atol(uk);
 8002e1c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002e1e:	f011 fe17 	bl	8014a50 <atol>
 8002e22:	4603      	mov	r3, r0
 8002e24:	461a      	mov	r2, r3
 8002e26:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <HAL_UART_RxCpltCallback+0x2dc>)
 8002e28:	601a      	str	r2, [r3, #0]
							}
							check = true;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
						break;
 8002e30:	e11b      	b.n	800306a <HAL_UART_RxCpltCallback+0x43e>
						case cmdNext://"next";
							nandAdr += nandLen;
 8002e32:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <HAL_UART_RxCpltCallback+0x2cc>)
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	4b33      	ldr	r3, [pc, #204]	; (8002f08 <HAL_UART_RxCpltCallback+0x2dc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4a32      	ldr	r2, [pc, #200]	; (8002f08 <HAL_UART_RxCpltCallback+0x2dc>)
 8002e40:	6013      	str	r3, [r2, #0]
							cmd_flag = 1;
 8002e42:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <HAL_UART_RxCpltCallback+0x2c4>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	701a      	strb	r2, [r3, #0]
						break;
 8002e48:	e10f      	b.n	800306a <HAL_UART_RxCpltCallback+0x43e>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
							uki = strstr(uk, "0x");
 8002e50:	492c      	ldr	r1, [pc, #176]	; (8002f04 <HAL_UART_RxCpltCallback+0x2d8>)
 8002e52:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002e54:	f012 fd02 	bl	801585c <strstr>
 8002e58:	63f8      	str	r0, [r7, #60]	; 0x3c
							if (uki) {
 8002e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_UART_RxCpltCallback+0x24a>
								if (uki == uk) {
 8002e60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d108      	bne.n	8002e7a <HAL_UART_RxCpltCallback+0x24e>
									uki += 2;
 8002e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e6a:	3302      	adds	r3, #2
 8002e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
									hex = true;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002e74:	e001      	b.n	8002e7a <HAL_UART_RxCpltCallback+0x24e>
								}
							} else uki = uk;
 8002e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e78:	63fb      	str	r3, [r7, #60]	; 0x3c
							uke = strchr(uki, ':');//adr:byte
 8002e7a:	213a      	movs	r1, #58	; 0x3a
 8002e7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e7e:	f012 fcc5 	bl	801580c <strchr>
 8002e82:	62b8      	str	r0, [r7, #40]	; 0x28
							if (uke) {
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 80ec 	beq.w	8003064 <HAL_UART_RxCpltCallback+0x438>
								ukb = uke + 1;
 8002e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8e:	3301      	adds	r3, #1
 8002e90:	63bb      	str	r3, [r7, #56]	; 0x38
								char tmp[16];
								memset(tmp, 0, 16);
 8002e92:	f107 030c 	add.w	r3, r7, #12
 8002e96:	2210      	movs	r2, #16
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f011 ffdc 	bl	8014e58 <memset>
								memcpy(tmp, uki, uke - uki);
 8002ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f107 030c 	add.w	r3, r7, #12
 8002eac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f011 ffc4 	bl	8014e3c <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 8002eb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d027      	beq.n	8002f0c <HAL_UART_RxCpltCallback+0x2e0>
 8002ebc:	f107 030c 	add.w	r3, r7, #12
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd f985 	bl	80001d0 <strlen>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	f107 030c 	add.w	r3, r7, #12
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff faf7 	bl	80024c4 <hex2bin>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <HAL_UART_RxCpltCallback+0x2dc>)
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	e01f      	b.n	8002f1e <HAL_UART_RxCpltCallback+0x2f2>
 8002ede:	bf00      	nop
 8002ee0:	40004800 	.word	0x40004800
 8002ee4:	200015aa 	.word	0x200015aa
 8002ee8:	200015a8 	.word	0x200015a8
 8002eec:	20000da8 	.word	0x20000da8
 8002ef0:	20000596 	.word	0x20000596
 8002ef4:	20000008 	.word	0x20000008
 8002ef8:	200015c0 	.word	0x200015c0
 8002efc:	200015ad 	.word	0x200015ad
 8002f00:	2000006c 	.word	0x2000006c
 8002f04:	080166a8 	.word	0x080166a8
 8002f08:	200015bc 	.word	0x200015bc
								    else nandAdr = atol(tmp);
 8002f0c:	f107 030c 	add.w	r3, r7, #12
 8002f10:	4618      	mov	r0, r3
 8002f12:	f011 fd9d 	bl	8014a50 <atol>
 8002f16:	4603      	mov	r3, r0
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b7d      	ldr	r3, [pc, #500]	; (8003110 <HAL_UART_RxCpltCallback+0x4e4>)
 8002f1c:	601a      	str	r2, [r3, #0]
								uki = ukb;
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	63fb      	str	r3, [r7, #60]	; 0x3c
								uke = strchr(uki, ':');//byte:len
 8002f22:	213a      	movs	r1, #58	; 0x3a
 8002f24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002f26:	f012 fc71 	bl	801580c <strchr>
 8002f2a:	62b8      	str	r0, [r7, #40]	; 0x28
								if (uke) {
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_UART_RxCpltCallback+0x31e>
									nandLen = atol(uke + 1);
 8002f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f34:	3301      	adds	r3, #1
 8002f36:	4618      	mov	r0, r3
 8002f38:	f011 fd8a 	bl	8014a50 <atol>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	4b74      	ldr	r3, [pc, #464]	; (8003114 <HAL_UART_RxCpltCallback+0x4e8>)
 8002f42:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 8002f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 8002f4a:	4973      	ldr	r1, [pc, #460]	; (8003118 <HAL_UART_RxCpltCallback+0x4ec>)
 8002f4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f4e:	f012 fc85 	bl	801585c <strstr>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <HAL_UART_RxCpltCallback+0x33a>
									ukb += 2;
 8002f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	63bb      	str	r3, [r7, #56]	; 0x38
									hex = true;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002f64:	e002      	b.n	8002f6c <HAL_UART_RxCpltCallback+0x340>
								} else hex = false;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 8002f6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00d      	beq.n	8002f90 <HAL_UART_RxCpltCallback+0x364>
 8002f74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f76:	f7fd f92b 	bl	80001d0 <strlen>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	4619      	mov	r1, r3
 8002f80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f82:	f7ff fa9f 	bl	80024c4 <hex2bin>
 8002f86:	4603      	mov	r3, r0
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4b64      	ldr	r3, [pc, #400]	; (800311c <HAL_UART_RxCpltCallback+0x4f0>)
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	e006      	b.n	8002f9e <HAL_UART_RxCpltCallback+0x372>
								    else nandByte = (uint8_t)atol(ukb);
 8002f90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f92:	f011 fd5d 	bl	8014a50 <atol>
 8002f96:	4603      	mov	r3, r0
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	4b60      	ldr	r3, [pc, #384]	; (800311c <HAL_UART_RxCpltCallback+0x4f0>)
 8002f9c:	701a      	strb	r2, [r3, #0]
								check = true;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
							}
						}
						break;
 8002fa4:	e05e      	b.n	8003064 <HAL_UART_RxCpltCallback+0x438>
						case cmdErase://"erase:0" or "erase:all" //erase:block_number from 0..1023
							if (strstr(uk, "all")) {
 8002fa6:	495e      	ldr	r1, [pc, #376]	; (8003120 <HAL_UART_RxCpltCallback+0x4f4>)
 8002fa8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002faa:	f012 fc57 	bl	801585c <strstr>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_UART_RxCpltCallback+0x38e>
								qcmd.attr = 1;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	777b      	strb	r3, [r7, #29]
 8002fb8:	e00c      	b.n	8002fd4 <HAL_UART_RxCpltCallback+0x3a8>
							} else {
								uint32_t blk = atol(uk);
 8002fba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002fbc:	f011 fd48 	bl	8014a50 <atol>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	623b      	str	r3, [r7, #32]
								if (blk < chipConf.BlockNbr) nandBlk = blk;
 8002fc4:	4b57      	ldr	r3, [pc, #348]	; (8003124 <HAL_UART_RxCpltCallback+0x4f8>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	6a3a      	ldr	r2, [r7, #32]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d202      	bcs.n	8002fd4 <HAL_UART_RxCpltCallback+0x3a8>
 8002fce:	4a56      	ldr	r2, [pc, #344]	; (8003128 <HAL_UART_RxCpltCallback+0x4fc>)
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	6013      	str	r3, [r2, #0]
							}
							cmd_flag = 1;
 8002fd4:	4b55      	ldr	r3, [pc, #340]	; (800312c <HAL_UART_RxCpltCallback+0x500>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
						break;
 8002fda:	e046      	b.n	800306a <HAL_UART_RxCpltCallback+0x43e>
						case cmdCheckPage://"check:0" //check:page //(chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr
						case cmdCheckBlk:
						{
							uint32_t max_val = total_pages;
 8002fdc:	4b54      	ldr	r3, [pc, #336]	; (8003130 <HAL_UART_RxCpltCallback+0x504>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	633b      	str	r3, [r7, #48]	; 0x30
							if (idx == cmdCheckBlk) {
 8002fe2:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 8002fe6:	2b07      	cmp	r3, #7
 8002fe8:	d102      	bne.n	8002ff0 <HAL_UART_RxCpltCallback+0x3c4>
								max_val = chipConf.BlockNbr;
 8002fea:	4b4e      	ldr	r3, [pc, #312]	; (8003124 <HAL_UART_RxCpltCallback+0x4f8>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
							}
							uint32_t page = atol(uk);
 8002ff0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002ff2:	f011 fd2d 	bl	8014a50 <atol>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
							if (page < max_val) {//128MB / 2K = 65536 - pages
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d232      	bcs.n	8003068 <HAL_UART_RxCpltCallback+0x43c>
								nandPage = page;
 8003002:	4a4c      	ldr	r2, [pc, #304]	; (8003134 <HAL_UART_RxCpltCallback+0x508>)
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	6013      	str	r3, [r2, #0]
								cmd_flag = 1;
 8003008:	4b48      	ldr	r3, [pc, #288]	; (800312c <HAL_UART_RxCpltCallback+0x500>)
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 800300e:	e02b      	b.n	8003068 <HAL_UART_RxCpltCallback+0x43c>
						case cmdLog://"log:off" , "log:on" , "log:dump"
						{
							uint8_t lg = logNone;
 8003010:	2303      	movs	r3, #3
 8003012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							if (strstr(uk, "off")) {
 8003016:	4948      	ldr	r1, [pc, #288]	; (8003138 <HAL_UART_RxCpltCallback+0x50c>)
 8003018:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800301a:	f012 fc1f 	bl	801585c <strstr>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_UART_RxCpltCallback+0x400>
								lg = logOff;
 8003024:	2300      	movs	r3, #0
 8003026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800302a:	e014      	b.n	8003056 <HAL_UART_RxCpltCallback+0x42a>
							} else if (strstr(uk, "on")) {
 800302c:	4943      	ldr	r1, [pc, #268]	; (800313c <HAL_UART_RxCpltCallback+0x510>)
 800302e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003030:	f012 fc14 	bl	801585c <strstr>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_UART_RxCpltCallback+0x416>
								lg = logOn;
 800303a:	2301      	movs	r3, #1
 800303c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003040:	e009      	b.n	8003056 <HAL_UART_RxCpltCallback+0x42a>
							} else if (strstr(uk, "dump")) {
 8003042:	493f      	ldr	r1, [pc, #252]	; (8003140 <HAL_UART_RxCpltCallback+0x514>)
 8003044:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003046:	f012 fc09 	bl	801585c <strstr>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_UART_RxCpltCallback+0x42a>
								lg = logDump;
 8003050:	2302      	movs	r3, #2
 8003052:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							}
							qcmd.attr = lg;
 8003056:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800305a:	777b      	strb	r3, [r7, #29]
							cmd_flag = 1;
 800305c:	4b33      	ldr	r3, [pc, #204]	; (800312c <HAL_UART_RxCpltCallback+0x500>)
 800305e:	2201      	movs	r2, #1
 8003060:	701a      	strb	r2, [r3, #0]
						}
						break;
 8003062:	e002      	b.n	800306a <HAL_UART_RxCpltCallback+0x43e>
						break;
 8003064:	bf00      	nop
 8003066:	e000      	b.n	800306a <HAL_UART_RxCpltCallback+0x43e>
						break;
 8003068:	bf00      	nop
					}
					qcmd.cmd = idx;
 800306a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800306e:	773b      	strb	r3, [r7, #28]
					if (check) {
 8003070:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003074:	2b00      	cmp	r3, #0
 8003076:	d018      	beq.n	80030aa <HAL_UART_RxCpltCallback+0x47e>
						if ((nandAdr + nandLen) >= total_bytes) {
 8003078:	4b26      	ldr	r3, [pc, #152]	; (8003114 <HAL_UART_RxCpltCallback+0x4e8>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	4b24      	ldr	r3, [pc, #144]	; (8003110 <HAL_UART_RxCpltCallback+0x4e4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	441a      	add	r2, r3
 8003084:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <HAL_UART_RxCpltCallback+0x518>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d30b      	bcc.n	80030a4 <HAL_UART_RxCpltCallback+0x478>
							nandLen = total_bytes - nandAdr - 1;
 800308c:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <HAL_UART_RxCpltCallback+0x518>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	b29a      	uxth	r2, r3
 8003092:	4b1f      	ldr	r3, [pc, #124]	; (8003110 <HAL_UART_RxCpltCallback+0x4e4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	4b1c      	ldr	r3, [pc, #112]	; (8003114 <HAL_UART_RxCpltCallback+0x4e8>)
 80030a2:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 80030a4:	4b21      	ldr	r3, [pc, #132]	; (800312c <HAL_UART_RxCpltCallback+0x500>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
					}
				}

			}
			if (idx == -1) {
 80030aa:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 80030ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b2:	d104      	bne.n	80030be <HAL_UART_RxCpltCallback+0x492>
				qcmd.cmd = cmdErr;
 80030b4:	230c      	movs	r3, #12
 80030b6:	773b      	strb	r3, [r7, #28]
				cmd_flag = 1;
 80030b8:	4b1c      	ldr	r3, [pc, #112]	; (800312c <HAL_UART_RxCpltCallback+0x500>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
			}
			if (cmd_flag) {
 80030be:	4b1b      	ldr	r3, [pc, #108]	; (800312c <HAL_UART_RxCpltCallback+0x500>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d015      	beq.n	80030f2 <HAL_UART_RxCpltCallback+0x4c6>
				if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, 5, 0)) != osOK) devError |= devQUE;
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_UART_RxCpltCallback+0x51c>)
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	f107 011c 	add.w	r1, r7, #28
 80030ce:	2300      	movs	r3, #0
 80030d0:	2205      	movs	r2, #5
 80030d2:	f00e fd9d 	bl	8011c10 <osMessageQueuePut>
 80030d6:	4603      	mov	r3, r0
 80030d8:	4a1c      	ldr	r2, [pc, #112]	; (800314c <HAL_UART_RxCpltCallback+0x520>)
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <HAL_UART_RxCpltCallback+0x520>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <HAL_UART_RxCpltCallback+0x4c6>
 80030e4:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <HAL_UART_RxCpltCallback+0x524>)
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	4b18      	ldr	r3, [pc, #96]	; (8003150 <HAL_UART_RxCpltCallback+0x524>)
 80030f0:	801a      	strh	r2, [r3, #0]
			}

			ruk = 0;
 80030f2:	4b18      	ldr	r3, [pc, #96]	; (8003154 <HAL_UART_RxCpltCallback+0x528>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 80030f8:	4b17      	ldr	r3, [pc, #92]	; (8003158 <HAL_UART_RxCpltCallback+0x52c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 80030fe:	2201      	movs	r2, #1
 8003100:	4916      	ldr	r1, [pc, #88]	; (800315c <HAL_UART_RxCpltCallback+0x530>)
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f00d fa1d 	bl	8010542 <HAL_UART_Receive_IT>
	}
}
 8003108:	bf00      	nop
 800310a:	3748      	adds	r7, #72	; 0x48
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	200015bc 	.word	0x200015bc
 8003114:	200015c0 	.word	0x200015c0
 8003118:	080166a8 	.word	0x080166a8
 800311c:	20000088 	.word	0x20000088
 8003120:	080166ac 	.word	0x080166ac
 8003124:	200015d8 	.word	0x200015d8
 8003128:	200015c4 	.word	0x200015c4
 800312c:	20000596 	.word	0x20000596
 8003130:	200015b0 	.word	0x200015b0
 8003134:	200015c8 	.word	0x200015c8
 8003138:	080166b0 	.word	0x080166b0
 800313c:	080166b4 	.word	0x080166b4
 8003140:	080166b8 	.word	0x080166b8
 8003144:	200015b4 	.word	0x200015b4
 8003148:	2000058c 	.word	0x2000058c
 800314c:	200025f0 	.word	0x200025f0
 8003150:	20000594 	.word	0x20000594
 8003154:	200015aa 	.word	0x200015aa
 8003158:	20000da8 	.word	0x20000da8
 800315c:	200015a8 	.word	0x200015a8

08003160 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a05      	ldr	r2, [pc, #20]	; (8003184 <HAL_UART_TxCpltCallback+0x24>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d102      	bne.n	8003178 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8003172:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_UART_TxCpltCallback+0x28>)
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]
	}
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40004800 	.word	0x40004800
 8003188:	20000068 	.word	0x20000068

0800318c <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <HAL_SPI_TxCpltCallback+0x24>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d102      	bne.n	80031a4 <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_SPI_TxCpltCallback+0x28>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
	}
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	40013000 	.word	0x40013000
 80031b4:	20000069 	.word	0x20000069

080031b8 <HAL_NAND_ITCallback>:
//-------------------------------------------------------------------------------------------
void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
	cb_nandCounter++;
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_NAND_ITCallback+0x20>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <HAL_NAND_ITCallback+0x20>)
 80031c8:	6013      	str	r3, [r2, #0]
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	200015cc 	.word	0x200015cc

080031dc <HAL_I2C_ErrorCallback>:
//-------------------------------------------------------------------------------------------
#ifdef SET_AUDIO_DAC
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a07      	ldr	r2, [pc, #28]	; (8003208 <HAL_I2C_ErrorCallback+0x2c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d106      	bne.n	80031fc <HAL_I2C_ErrorCallback+0x20>
		devError |= devI2C;
 80031ee:	4b07      	ldr	r3, [pc, #28]	; (800320c <HAL_I2C_ErrorCallback+0x30>)
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	f043 0304 	orr.w	r3, r3, #4
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <HAL_I2C_ErrorCallback+0x30>)
 80031fa:	801a      	strh	r2, [r3, #0]
	}
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	40005400 	.word	0x40005400
 800320c:	20000594 	.word	0x20000594

08003210 <HAL_I2C_MasterTxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a05      	ldr	r2, [pc, #20]	; (8003234 <HAL_I2C_MasterTxCpltCallback+0x24>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d102      	bne.n	8003228 <HAL_I2C_MasterTxCpltCallback+0x18>
		i2cTxRdy = true;
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
	}
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	40005400 	.word	0x40005400
 8003238:	200000a0 	.word	0x200000a0

0800323c <HAL_I2C_MasterRxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a05      	ldr	r2, [pc, #20]	; (8003260 <HAL_I2C_MasterRxCpltCallback+0x24>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d102      	bne.n	8003254 <HAL_I2C_MasterRxCpltCallback+0x18>
		i2cRxRdy = true;
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
	}
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	40005400 	.word	0x40005400
 8003264:	200000a1 	.word	0x200000a1

08003268 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8003268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800326a:	f2ad 4d9c 	subw	sp, sp, #1180	; 0x49c
 800326e:	af06      	add	r7, sp, #24
 8003270:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003274:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8003278:	6018      	str	r0, [r3, #0]
#ifdef SET_SWV
	char stz[MAX_SCR_BUF];
#endif


	HAL_Delay(500);
 800327a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800327e:	f007 f93b 	bl	800a4f8 <HAL_Delay>
	if (dbg != logOff) {
 8003282:	4b6c      	ldr	r3, [pc, #432]	; (8003434 <defThread+0x1cc>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d018      	beq.n	80032bc <defThread+0x54>
		Report(0, "%s", eol);
 800328a:	4b6b      	ldr	r3, [pc, #428]	; (8003438 <defThread+0x1d0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	496a      	ldr	r1, [pc, #424]	; (800343c <defThread+0x1d4>)
 8003292:	2000      	movs	r0, #0
 8003294:	f7ff fb52 	bl	800293c <Report>
		Report(1, "%s Старт '%s' FreeRTOS memory: free=%lu heap=%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003298:	4b69      	ldr	r3, [pc, #420]	; (8003440 <defThread+0x1d8>)
 800329a:	681c      	ldr	r4, [r3, #0]
 800329c:	f011 fa8a 	bl	80147b4 <xPortGetFreeHeapSize>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b65      	ldr	r3, [pc, #404]	; (8003438 <defThread+0x1d0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	9302      	str	r3, [sp, #8]
 80032a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	9200      	str	r2, [sp, #0]
 80032b0:	4b64      	ldr	r3, [pc, #400]	; (8003444 <defThread+0x1dc>)
 80032b2:	4622      	mov	r2, r4
 80032b4:	4964      	ldr	r1, [pc, #400]	; (8003448 <defThread+0x1e0>)
 80032b6:	2001      	movs	r0, #1
 80032b8:	f7ff fb40 	bl	800293c <Report>
	}

	uint8_t byte = logOff;
 80032bc:	2300      	movs	r3, #0
 80032be:	f887 344e 	strb.w	r3, [r7, #1102]	; 0x44e
	uint8_t next_block_erase = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	f887 347f 	strb.w	r3, [r7, #1151]	; 0x47f
	uint32_t iBlk, stik;
	uint8_t nand_show = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
	bool readed = false;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f887 3472 	strb.w	r3, [r7, #1138]	; 0x472
	char cid[32] = {0};
 80032d4:	2300      	movs	r3, #0
 80032d6:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80032da:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	605a      	str	r2, [r3, #4]
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	60da      	str	r2, [r3, #12]
 80032e8:	611a      	str	r2, [r3, #16]
 80032ea:	615a      	str	r2, [r3, #20]
 80032ec:	619a      	str	r2, [r3, #24]
	uint32_t BlockSizeKB = (chipConf.BlockSize * chipConf.PageSize) / 1024;
 80032ee:	4b57      	ldr	r3, [pc, #348]	; (800344c <defThread+0x1e4>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	4a56      	ldr	r2, [pc, #344]	; (800344c <defThread+0x1e4>)
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	0a9b      	lsrs	r3, r3, #10
 80032fc:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
	uint32_t PlaneSizeMB = (chipConf.PlaneNbr * (chipConf.BlockSize * chipConf.PageSize * chipConf.BlockNbr)) / 1024 / 1024;
 8003300:	4b52      	ldr	r3, [pc, #328]	; (800344c <defThread+0x1e4>)
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	4a51      	ldr	r2, [pc, #324]	; (800344c <defThread+0x1e4>)
 8003306:	6892      	ldr	r2, [r2, #8]
 8003308:	4950      	ldr	r1, [pc, #320]	; (800344c <defThread+0x1e4>)
 800330a:	6809      	ldr	r1, [r1, #0]
 800330c:	fb01 f202 	mul.w	r2, r1, r2
 8003310:	494e      	ldr	r1, [pc, #312]	; (800344c <defThread+0x1e4>)
 8003312:	68c9      	ldr	r1, [r1, #12]
 8003314:	fb01 f202 	mul.w	r2, r1, r2
 8003318:	fb02 f303 	mul.w	r3, r2, r3
 800331c:	0d1b      	lsrs	r3, r3, #20
 800331e:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
	uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 8003322:	4b4b      	ldr	r3, [pc, #300]	; (8003450 <defThread+0x1e8>)
 8003324:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
	if (nandState == HAL_NAND_STATE_READY) {
 8003328:	4b4a      	ldr	r3, [pc, #296]	; (8003454 <defThread+0x1ec>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b01      	cmp	r3, #1
 800332e:	f040 80af 	bne.w	8003490 <defThread+0x228>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 8003332:	4b47      	ldr	r3, [pc, #284]	; (8003450 <defThread+0x1e8>)
 8003334:	785b      	ldrb	r3, [r3, #1]
 8003336:	22f1      	movs	r2, #241	; 0xf1
 8003338:	4293      	cmp	r3, r2
 800333a:	d108      	bne.n	800334e <defThread+0xe6>
 800333c:	4b46      	ldr	r3, [pc, #280]	; (8003458 <defThread+0x1f0>)
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8003344:	2220      	movs	r2, #32
 8003346:	4618      	mov	r0, r3
 8003348:	f012 fa75 	bl	8015836 <strncpy>
 800334c:	e006      	b.n	800335c <defThread+0xf4>
		                               else strcpy(cid, "UNKNOWN");
 800334e:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8003352:	4a42      	ldr	r2, [pc, #264]	; (800345c <defThread+0x1f4>)
 8003354:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003358:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 800335c:	4b40      	ldr	r3, [pc, #256]	; (8003460 <defThread+0x1f8>)
 800335e:	4a41      	ldr	r2, [pc, #260]	; (8003464 <defThread+0x1fc>)
 8003360:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003364:	6018      	str	r0, [r3, #0]
 8003366:	3304      	adds	r3, #4
 8003368:	8019      	strh	r1, [r3, #0]
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 800336a:	2300      	movs	r3, #0
 800336c:	f887 3471 	strb.w	r3, [r7, #1137]	; 0x471
 8003370:	e016      	b.n	80033a0 <defThread+0x138>
 8003372:	483b      	ldr	r0, [pc, #236]	; (8003460 <defThread+0x1f8>)
 8003374:	f7fc ff2c 	bl	80001d0 <strlen>
 8003378:	4603      	mov	r3, r0
 800337a:	4a39      	ldr	r2, [pc, #228]	; (8003460 <defThread+0x1f8>)
 800337c:	1898      	adds	r0, r3, r2
 800337e:	f997 3471 	ldrsb.w	r3, [r7, #1137]	; 0x471
 8003382:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8003386:	4413      	add	r3, r2
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	4936      	ldr	r1, [pc, #216]	; (8003468 <defThread+0x200>)
 800338e:	f012 f9cb 	bl	8015728 <siprintf>
 8003392:	f997 3471 	ldrsb.w	r3, [r7, #1137]	; 0x471
 8003396:	b2db      	uxtb	r3, r3
 8003398:	3301      	adds	r3, #1
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f887 3471 	strb.w	r3, [r7, #1137]	; 0x471
 80033a0:	f897 3471 	ldrb.w	r3, [r7, #1137]	; 0x471
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d9e4      	bls.n	8003372 <defThread+0x10a>
		sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 80033a8:	482d      	ldr	r0, [pc, #180]	; (8003460 <defThread+0x1f8>)
 80033aa:	f7fc ff11 	bl	80001d0 <strlen>
 80033ae:	4603      	mov	r3, r0
 80033b0:	4a2b      	ldr	r2, [pc, #172]	; (8003460 <defThread+0x1f8>)
 80033b2:	1898      	adds	r0, r3, r2
 80033b4:	4b26      	ldr	r3, [pc, #152]	; (8003450 <defThread+0x1e8>)
 80033b6:	785b      	ldrb	r3, [r3, #1]
 80033b8:	461a      	mov	r2, r3
 80033ba:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80033be:	492b      	ldr	r1, [pc, #172]	; (800346c <defThread+0x204>)
 80033c0:	f012 f9b2 	bl	8015728 <siprintf>
		sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB"
 80033c4:	4826      	ldr	r0, [pc, #152]	; (8003460 <defThread+0x1f8>)
 80033c6:	f7fc ff03 	bl	80001d0 <strlen>
 80033ca:	4603      	mov	r3, r0
 80033cc:	4a24      	ldr	r2, [pc, #144]	; (8003460 <defThread+0x1f8>)
 80033ce:	189c      	adds	r4, r3, r2
 80033d0:	4b1e      	ldr	r3, [pc, #120]	; (800344c <defThread+0x1e4>)
 80033d2:	681d      	ldr	r5, [r3, #0]
 80033d4:	4b1d      	ldr	r3, [pc, #116]	; (800344c <defThread+0x1e4>)
 80033d6:	685e      	ldr	r6, [r3, #4]
 80033d8:	4b1c      	ldr	r3, [pc, #112]	; (800344c <defThread+0x1e4>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	4a1b      	ldr	r2, [pc, #108]	; (800344c <defThread+0x1e4>)
 80033de:	6912      	ldr	r2, [r2, #16]
 80033e0:	4923      	ldr	r1, [pc, #140]	; (8003470 <defThread+0x208>)
 80033e2:	6809      	ldr	r1, [r1, #0]
 80033e4:	4823      	ldr	r0, [pc, #140]	; (8003474 <defThread+0x20c>)
 80033e6:	6800      	ldr	r0, [r0, #0]
 80033e8:	9005      	str	r0, [sp, #20]
 80033ea:	9104      	str	r1, [sp, #16]
 80033ec:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 80033f0:	9103      	str	r1, [sp, #12]
 80033f2:	9202      	str	r2, [sp, #8]
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	4633      	mov	r3, r6
 80033fe:	462a      	mov	r2, r5
 8003400:	491d      	ldr	r1, [pc, #116]	; (8003478 <defThread+0x210>)
 8003402:	4620      	mov	r0, r4
 8003404:	f012 f990 	bl	8015728 <siprintf>
					chipConf.BlockNbr,
					chipConf.PlaneNbr,
					PlaneSizeMB,
					total_pages, total_bytes);
#ifdef SET_AUDIO_DAC
		if (audioStat == HAL_OK) sprintf(stx+strlen(stx), "\n\tAudio: '%s' (id:%u rev:%u)", audioName, audioID, audioRev);
 8003408:	4b1c      	ldr	r3, [pc, #112]	; (800347c <defThread+0x214>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d14c      	bne.n	80034aa <defThread+0x242>
 8003410:	4813      	ldr	r0, [pc, #76]	; (8003460 <defThread+0x1f8>)
 8003412:	f7fc fedd 	bl	80001d0 <strlen>
 8003416:	4603      	mov	r3, r0
 8003418:	4a11      	ldr	r2, [pc, #68]	; (8003460 <defThread+0x1f8>)
 800341a:	1898      	adds	r0, r3, r2
 800341c:	4b18      	ldr	r3, [pc, #96]	; (8003480 <defThread+0x218>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <defThread+0x21c>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	4a17      	ldr	r2, [pc, #92]	; (8003488 <defThread+0x220>)
 800342c:	4917      	ldr	r1, [pc, #92]	; (800348c <defThread+0x224>)
 800342e:	f012 f97b 	bl	8015728 <siprintf>
 8003432:	e03a      	b.n	80034aa <defThread+0x242>
 8003434:	2000006a 	.word	0x2000006a
 8003438:	20000004 	.word	0x20000004
 800343c:	08016680 	.word	0x08016680
 8003440:	20000000 	.word	0x20000000
 8003444:	08019e4c 	.word	0x08019e4c
 8003448:	080166c0 	.word	0x080166c0
 800344c:	200015d8 	.word	0x200015d8
 8003450:	200015d0 	.word	0x200015d0
 8003454:	20000089 	.word	0x20000089
 8003458:	2000008c 	.word	0x2000008c
 800345c:	08016590 	.word	0x08016590
 8003460:	200025f4 	.word	0x200025f4
 8003464:	08016700 	.word	0x08016700
 8003468:	08016678 	.word	0x08016678
 800346c:	08016708 	.word	0x08016708
 8003470:	200015b0 	.word	0x200015b0
 8003474:	200015b4 	.word	0x200015b4
 8003478:	08016720 	.word	0x08016720
 800347c:	20002dfa 	.word	0x20002dfa
 8003480:	20002df8 	.word	0x20002df8
 8003484:	20002df9 	.word	0x20002df9
 8003488:	20002dfc 	.word	0x20002dfc
 800348c:	080167a4 	.word	0x080167a4
#endif
	} else {
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
					     nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8003490:	4ba5      	ldr	r3, [pc, #660]	; (8003728 <defThread+0x4c0>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
 8003498:	4aa4      	ldr	r2, [pc, #656]	; (800372c <defThread+0x4c4>)
 800349a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800349e:	4ba2      	ldr	r3, [pc, #648]	; (8003728 <defThread+0x4c0>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	49a3      	ldr	r1, [pc, #652]	; (8003730 <defThread+0x4c8>)
 80034a4:	48a3      	ldr	r0, [pc, #652]	; (8003734 <defThread+0x4cc>)
 80034a6:	f012 f93f 	bl	8015728 <siprintf>
	}
	if (dbg != logOff) Report(1, "%s%s", stx, eol);
 80034aa:	4ba3      	ldr	r3, [pc, #652]	; (8003738 <defThread+0x4d0>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d006      	beq.n	80034c0 <defThread+0x258>
 80034b2:	4ba2      	ldr	r3, [pc, #648]	; (800373c <defThread+0x4d4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a9f      	ldr	r2, [pc, #636]	; (8003734 <defThread+0x4cc>)
 80034b8:	49a1      	ldr	r1, [pc, #644]	; (8003740 <defThread+0x4d8>)
 80034ba:	2001      	movs	r0, #1
 80034bc:	f7ff fa3e 	bl	800293c <Report>


	char screen[MAX_SCR_BUF];
	uint16_t err_color = BLACK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	f8a7 346e 	strh.w	r3, [r7, #1134]	; 0x46e
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 80034c6:	4b9f      	ldr	r3, [pc, #636]	; (8003744 <defThread+0x4dc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	785b      	ldrb	r3, [r3, #1]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80034d2:	9200      	str	r2, [sp, #0]
 80034d4:	22ef      	movs	r2, #239	; 0xef
 80034d6:	2100      	movs	r1, #0
 80034d8:	2000      	movs	r0, #0
 80034da:	f001 f966 	bl	80047aa <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 80034de:	4b99      	ldr	r3, [pc, #612]	; (8003744 <defThread+0x4dc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	785b      	ldrb	r3, [r3, #1]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80034ea:	b299      	uxth	r1, r3
 80034ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	23ef      	movs	r3, #239	; 0xef
 80034f4:	22ef      	movs	r2, #239	; 0xef
 80034f6:	2000      	movs	r0, #0
 80034f8:	f001 f957 	bl	80047aa <ST7789_Fill>

	sprintf(screen, "NAND : %s", cid);
 80034fc:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8003500:	f107 030c 	add.w	r3, r7, #12
 8003504:	4990      	ldr	r1, [pc, #576]	; (8003748 <defThread+0x4e0>)
 8003506:	4618      	mov	r0, r3
 8003508:	f012 f90e 	bl	8015728 <siprintf>
	mkLineCenter(screen, ST7789_WIDTH / tFont->width);
 800350c:	4b8f      	ldr	r3, [pc, #572]	; (800374c <defThread+0x4e4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	23f0      	movs	r3, #240	; 0xf0
 8003516:	fb93 f3f2 	sdiv	r3, r3, r2
 800351a:	b29a      	uxth	r2, r3
 800351c:	f107 030c 	add.w	r3, r7, #12
 8003520:	4611      	mov	r1, r2
 8003522:	4618      	mov	r0, r3
 8003524:	f001 fa4e 	bl	80049c4 <mkLineCenter>
	sprintf(screen+strlen(screen),
 8003528:	f107 030c 	add.w	r3, r7, #12
 800352c:	4618      	mov	r0, r3
 800352e:	f7fc fe4f 	bl	80001d0 <strlen>
 8003532:	4602      	mov	r2, r0
 8003534:	f107 030c 	add.w	r3, r7, #12
 8003538:	1898      	adds	r0, r3, r2
 800353a:	4b85      	ldr	r3, [pc, #532]	; (8003750 <defThread+0x4e8>)
 800353c:	681c      	ldr	r4, [r3, #0]
 800353e:	4b84      	ldr	r3, [pc, #528]	; (8003750 <defThread+0x4e8>)
 8003540:	685d      	ldr	r5, [r3, #4]
 8003542:	4b83      	ldr	r3, [pc, #524]	; (8003750 <defThread+0x4e8>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	4a82      	ldr	r2, [pc, #520]	; (8003750 <defThread+0x4e8>)
 8003548:	6912      	ldr	r2, [r2, #16]
 800354a:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 800354e:	9103      	str	r1, [sp, #12]
 8003550:	9202      	str	r2, [sp, #8]
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	462b      	mov	r3, r5
 800355c:	4622      	mov	r2, r4
 800355e:	497d      	ldr	r1, [pc, #500]	; (8003754 <defThread+0x4ec>)
 8003560:	f012 f8e2 	bl	8015728 <siprintf>
			BlockSizeKB,
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			PlaneSizeMB);
#ifdef SET_AUDIO_DAC
	if (audioStat == HAL_OK) sprintf(screen+strlen(screen), "\nAudio: '%s'", audioName);
 8003564:	4b7c      	ldr	r3, [pc, #496]	; (8003758 <defThread+0x4f0>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10d      	bne.n	8003588 <defThread+0x320>
 800356c:	f107 030c 	add.w	r3, r7, #12
 8003570:	4618      	mov	r0, r3
 8003572:	f7fc fe2d 	bl	80001d0 <strlen>
 8003576:	4602      	mov	r2, r0
 8003578:	f107 030c 	add.w	r3, r7, #12
 800357c:	4413      	add	r3, r2
 800357e:	4a77      	ldr	r2, [pc, #476]	; (800375c <defThread+0x4f4>)
 8003580:	4977      	ldr	r1, [pc, #476]	; (8003760 <defThread+0x4f8>)
 8003582:	4618      	mov	r0, r3
 8003584:	f012 f8d0 	bl	8015728 <siprintf>
#endif
	if (cb_nandCounter) sprintf(screen+strlen(screen), "\nCallBack:%lu", cb_nandCounter);
 8003588:	4b76      	ldr	r3, [pc, #472]	; (8003764 <defThread+0x4fc>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00e      	beq.n	80035ae <defThread+0x346>
 8003590:	f107 030c 	add.w	r3, r7, #12
 8003594:	4618      	mov	r0, r3
 8003596:	f7fc fe1b 	bl	80001d0 <strlen>
 800359a:	4602      	mov	r2, r0
 800359c:	f107 030c 	add.w	r3, r7, #12
 80035a0:	4413      	add	r3, r2
 80035a2:	4a70      	ldr	r2, [pc, #448]	; (8003764 <defThread+0x4fc>)
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	4970      	ldr	r1, [pc, #448]	; (8003768 <defThread+0x500>)
 80035a8:	4618      	mov	r0, r3
 80035aa:	f012 f8bd 	bl	8015728 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 80035ae:	4b67      	ldr	r3, [pc, #412]	; (800374c <defThread+0x4e4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	785b      	ldrb	r3, [r3, #1]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd f8df 	bl	8000778 <__aeabi_i2d>
 80035ba:	4604      	mov	r4, r0
 80035bc:	460d      	mov	r5, r1
 80035be:	4b63      	ldr	r3, [pc, #396]	; (800374c <defThread+0x4e4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	785b      	ldrb	r3, [r3, #1]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd f8d7 	bl	8000778 <__aeabi_i2d>
 80035ca:	a355      	add	r3, pc, #340	; (adr r3, 8003720 <defThread+0x4b8>)
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f7fc fe56 	bl	8000280 <__aeabi_dmul>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4620      	mov	r0, r4
 80035da:	4629      	mov	r1, r5
 80035dc:	f7fc ff80 	bl	80004e0 <__adddf3>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 80035e4:	4610      	mov	r0, r2
 80035e6:	4619      	mov	r1, r3
 80035e8:	f7fd f930 	bl	800084c <__aeabi_d2uiz>
 80035ec:	4603      	mov	r3, r0
 80035ee:	b298      	uxth	r0, r3
 80035f0:	4b56      	ldr	r3, [pc, #344]	; (800374c <defThread+0x4e4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a5d      	ldr	r2, [pc, #372]	; (800376c <defThread+0x504>)
 80035f6:	8812      	ldrh	r2, [r2, #0]
 80035f8:	43d2      	mvns	r2, r2
 80035fa:	b292      	uxth	r2, r2
 80035fc:	495b      	ldr	r1, [pc, #364]	; (800376c <defThread+0x504>)
 80035fe:	8809      	ldrh	r1, [r1, #0]
 8003600:	f107 040c 	add.w	r4, r7, #12
 8003604:	9102      	str	r1, [sp, #8]
 8003606:	9201      	str	r2, [sp, #4]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	9200      	str	r2, [sp, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4622      	mov	r2, r4
 8003610:	4601      	mov	r1, r0
 8003612:	2000      	movs	r0, #0
 8003614:	f001 f980 	bl	8004918 <ST7789_WriteString>
					   screen,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 8003618:	2001      	movs	r0, #1
 800361a:	f000 ff37 	bl	800448c <ipsOn>

#ifdef SET_SMALL_FS
	bool mnt = false;
 800361e:	2300      	movs	r3, #0
 8003620:	f887 346d 	strb.w	r3, [r7, #1133]	; 0x46d

	#ifdef SET_FS_TEST
		fs_err = io_fs_init();
 8003624:	f001 ff7e 	bl	8005524 <io_fs_init>
 8003628:	4603      	mov	r3, r0
 800362a:	4a51      	ldr	r2, [pc, #324]	; (8003770 <defThread+0x508>)
 800362c:	6013      	str	r3, [r2, #0]
			mnt = true;
			sprintf(stx, "Mount device '%s' OK", cid);
		}
		Report(1, "%s%s", stx, eol);*/
		//if (fs_err) {
			Report(1, "Format...%s", eol);
 800362e:	4b43      	ldr	r3, [pc, #268]	; (800373c <defThread+0x4d4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	494f      	ldr	r1, [pc, #316]	; (8003774 <defThread+0x50c>)
 8003636:	2001      	movs	r0, #1
 8003638:	f7ff f980 	bl	800293c <Report>
			fs_err = io_fs_format();
 800363c:	f001 ffba 	bl	80055b4 <io_fs_format>
 8003640:	4603      	mov	r3, r0
 8003642:	4a4b      	ldr	r2, [pc, #300]	; (8003770 <defThread+0x508>)
 8003644:	6013      	str	r3, [r2, #0]
			if (fs_err) {
 8003646:	4b4a      	ldr	r3, [pc, #296]	; (8003770 <defThread+0x508>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d010      	beq.n	8003670 <defThread+0x408>
				Report(1, "Format Error '%s'(%d)%s", str_fsErr(fs_err), fs_err, eol);
 800364e:	4b48      	ldr	r3, [pc, #288]	; (8003770 <defThread+0x508>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe fdc6 	bl	80021e4 <str_fsErr>
 8003658:	4601      	mov	r1, r0
 800365a:	4b45      	ldr	r3, [pc, #276]	; (8003770 <defThread+0x508>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4b37      	ldr	r3, [pc, #220]	; (800373c <defThread+0x4d4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	460a      	mov	r2, r1
 8003668:	4943      	ldr	r1, [pc, #268]	; (8003778 <defThread+0x510>)
 800366a:	2001      	movs	r0, #1
 800366c:	f7ff f966 	bl	800293c <Report>
			}
		//}
		if (!fs_err) {
 8003670:	4b3f      	ldr	r3, [pc, #252]	; (8003770 <defThread+0x508>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d12e      	bne.n	80036d6 <defThread+0x46e>
			Report(1, "Mount device '%s' start%s", cid, eol);
 8003678:	4b30      	ldr	r3, [pc, #192]	; (800373c <defThread+0x4d4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8003680:	493e      	ldr	r1, [pc, #248]	; (800377c <defThread+0x514>)
 8003682:	2001      	movs	r0, #1
 8003684:	f7ff f95a 	bl	800293c <Report>
			fs_err = io_fs_mount();
 8003688:	f001 ffa2 	bl	80055d0 <io_fs_mount>
 800368c:	4603      	mov	r3, r0
 800368e:	4a38      	ldr	r2, [pc, #224]	; (8003770 <defThread+0x508>)
 8003690:	6013      	str	r3, [r2, #0]
			if (fs_err) {
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <defThread+0x508>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00c      	beq.n	80036b4 <defThread+0x44c>
				printf(stx, "Mount Error '%s'(%d)%s", str_fsErr(fs_err), fs_err);
 800369a:	4b35      	ldr	r3, [pc, #212]	; (8003770 <defThread+0x508>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe fda0 	bl	80021e4 <str_fsErr>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b32      	ldr	r3, [pc, #200]	; (8003770 <defThread+0x508>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4935      	ldr	r1, [pc, #212]	; (8003780 <defThread+0x518>)
 80036ac:	4821      	ldr	r0, [pc, #132]	; (8003734 <defThread+0x4cc>)
 80036ae:	f011 ffa9 	bl	8015604 <iprintf>
 80036b2:	e009      	b.n	80036c8 <defThread+0x460>
			} else {
				mnt = true;
 80036b4:	2301      	movs	r3, #1
 80036b6:	f887 346d 	strb.w	r3, [r7, #1133]	; 0x46d
				printf(stx, "Mount device '%s' OK%s", cid);
 80036ba:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80036be:	461a      	mov	r2, r3
 80036c0:	4930      	ldr	r1, [pc, #192]	; (8003784 <defThread+0x51c>)
 80036c2:	481c      	ldr	r0, [pc, #112]	; (8003734 <defThread+0x4cc>)
 80036c4:	f011 ff9e 	bl	8015604 <iprintf>
			}
			Report(1, "%s%s", stx, eol);
 80036c8:	4b1c      	ldr	r3, [pc, #112]	; (800373c <defThread+0x4d4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a19      	ldr	r2, [pc, #100]	; (8003734 <defThread+0x4cc>)
 80036ce:	491c      	ldr	r1, [pc, #112]	; (8003740 <defThread+0x4d8>)
 80036d0:	2001      	movs	r0, #1
 80036d2:	f7ff f933 	bl	800293c <Report>
			if (ok) Report(1, "[%s] Check page:%lu OK...%s----------------------------------------%s", __func__, pg, eol, eol);
		}
	#endif
#endif

	uint16_t page_offset = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8a7 346a 	strh.w	r3, [r7, #1130]	; 0x46a
	uint32_t page_addr = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
	bool loop = true;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
	bool led = false;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f887 3462 	strb.w	r3, [r7, #1122]	; 0x462

	osStatus_t qs = osOK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
	uint8_t prio = 0;
 80036f4:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80036f8:	f2a3 4375 	subw	r3, r3, #1141	; 0x475
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
	s_qcmd qcmd = {0};
 8003700:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003704:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003708:	2200      	movs	r2, #0
 800370a:	801a      	strh	r2, [r3, #0]

//	qcmd.cmd = cmdHelp;
//	if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, prio, 5)) != osOK) devError |= devQUE;

	uint32_t tmr = get_tmr(1);
 800370c:	2001      	movs	r0, #1
 800370e:	f7fe fffd 	bl	800270c <get_tmr>
 8003712:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458


  /* Infinite loop */

	while (loop) {
 8003716:	f000 bd33 	b.w	8004180 <defThread+0xf18>
 800371a:	bf00      	nop
 800371c:	f3af 8000 	nop.w
 8003720:	33333333 	.word	0x33333333
 8003724:	3feb3333 	.word	0x3feb3333
 8003728:	20000089 	.word	0x20000089
 800372c:	20000090 	.word	0x20000090
 8003730:	080167c4 	.word	0x080167c4
 8003734:	200025f4 	.word	0x200025f4
 8003738:	2000006a 	.word	0x2000006a
 800373c:	20000004 	.word	0x20000004
 8003740:	080167e4 	.word	0x080167e4
 8003744:	20000080 	.word	0x20000080
 8003748:	080167ec 	.word	0x080167ec
 800374c:	20000084 	.word	0x20000084
 8003750:	200015d8 	.word	0x200015d8
 8003754:	080167f8 	.word	0x080167f8
 8003758:	20002dfa 	.word	0x20002dfa
 800375c:	20002dfc 	.word	0x20002dfc
 8003760:	08016854 	.word	0x08016854
 8003764:	200015cc 	.word	0x200015cc
 8003768:	08016864 	.word	0x08016864
 800376c:	200015ae 	.word	0x200015ae
 8003770:	20002df4 	.word	0x20002df4
 8003774:	08016874 	.word	0x08016874
 8003778:	08016880 	.word	0x08016880
 800377c:	08016898 	.word	0x08016898
 8003780:	080168b4 	.word	0x080168b4
 8003784:	080168cc 	.word	0x080168cc

		if (check_tmr(tmr)) {
 8003788:	f8d7 0458 	ldr.w	r0, [r7, #1112]	; 0x458
 800378c:	f7fe ffcb 	bl	8002726 <check_tmr>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 8091 	beq.w	80038ba <defThread+0x652>
			tmr = get_tmr(1);
 8003798:	2001      	movs	r0, #1
 800379a:	f7fe ffb7 	bl	800270c <get_tmr>
 800379e:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
			//
			sec2str(screen);
 80037a2:	f107 030c 	add.w	r3, r7, #12
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff f82e 	bl	8002808 <sec2str>
#ifdef SET_SWV
			strcpy(stz, screen);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 80037ac:	4baa      	ldr	r3, [pc, #680]	; (8003a58 <defThread+0x7f0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	23f0      	movs	r3, #240	; 0xf0
 80037b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 f8fe 	bl	80049c4 <mkLineCenter>
 80037c8:	4601      	mov	r1, r0
 80037ca:	4ba3      	ldr	r3, [pc, #652]	; (8003a58 <defThread+0x7f0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80037d2:	9202      	str	r2, [sp, #8]
 80037d4:	221f      	movs	r2, #31
 80037d6:	9201      	str	r2, [sp, #4]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	9200      	str	r2, [sp, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	460a      	mov	r2, r1
 80037e0:	2100      	movs	r1, #0
 80037e2:	2008      	movs	r0, #8
 80037e4:	f001 f898 	bl	8004918 <ST7789_WriteString>

			sprintf(screen, "Error: 0x%04X", devError);
 80037e8:	4b9c      	ldr	r3, [pc, #624]	; (8003a5c <defThread+0x7f4>)
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	f107 030c 	add.w	r3, r7, #12
 80037f2:	499b      	ldr	r1, [pc, #620]	; (8003a60 <defThread+0x7f8>)
 80037f4:	4618      	mov	r0, r3
 80037f6:	f011 ff97 	bl	8015728 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 80037fa:	4b98      	ldr	r3, [pc, #608]	; (8003a5c <defThread+0x7f4>)
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <defThread+0x5a4>
 8003802:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003806:	f8a7 346e 	strh.w	r3, [r7, #1134]	; 0x46e
 800380a:	e002      	b.n	8003812 <defThread+0x5aa>
 800380c:	2300      	movs	r3, #0
 800380e:	f8a7 346e 	strh.w	r3, [r7, #1134]	; 0x46e
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 8003812:	4b91      	ldr	r3, [pc, #580]	; (8003a58 <defThread+0x7f0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	785b      	ldrb	r3, [r3, #1]
 8003818:	b29b      	uxth	r3, r3
 800381a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800381e:	b29c      	uxth	r4, r3
 8003820:	4b8d      	ldr	r3, [pc, #564]	; (8003a58 <defThread+0x7f0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	23f0      	movs	r3, #240	; 0xf0
 800382a:	fb93 f3f2 	sdiv	r3, r3, r2
 800382e:	b29a      	uxth	r2, r3
 8003830:	f107 030c 	add.w	r3, r7, #12
 8003834:	4611      	mov	r1, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f001 f8c4 	bl	80049c4 <mkLineCenter>
 800383c:	4601      	mov	r1, r0
 800383e:	4b86      	ldr	r3, [pc, #536]	; (8003a58 <defThread+0x7f0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003846:	9202      	str	r2, [sp, #8]
 8003848:	f8b7 246e 	ldrh.w	r2, [r7, #1134]	; 0x46e
 800384c:	9201      	str	r2, [sp, #4]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	9200      	str	r2, [sp, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	460a      	mov	r2, r1
 8003856:	4621      	mov	r1, r4
 8003858:	2000      	movs	r0, #0
 800385a:	f001 f85d 	bl	8004918 <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 800385e:	4b81      	ldr	r3, [pc, #516]	; (8003a64 <defThread+0x7fc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d019      	beq.n	800389a <defThread+0x632>
				if (qs != qStat) {
 8003866:	4b7f      	ldr	r3, [pc, #508]	; (8003a64 <defThread+0x7fc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 800386e:	429a      	cmp	r2, r3
 8003870:	d013      	beq.n	800389a <defThread+0x632>
					if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8003872:	4b7d      	ldr	r3, [pc, #500]	; (8003a68 <defThread+0x800>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <defThread+0x62a>
 800387a:	4b7a      	ldr	r3, [pc, #488]	; (8003a64 <defThread+0x7fc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe fdac 	bl	80023dc <get_qStat>
 8003884:	4602      	mov	r2, r0
 8003886:	4b79      	ldr	r3, [pc, #484]	; (8003a6c <defThread+0x804>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4979      	ldr	r1, [pc, #484]	; (8003a70 <defThread+0x808>)
 800388c:	2001      	movs	r0, #1
 800388e:	f7ff f855 	bl	800293c <Report>
					qs = qStat;
 8003892:	4b74      	ldr	r3, [pc, #464]	; (8003a64 <defThread+0x7fc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
				}
			}

			if (devError) led = true; else led = false;
 800389a:	4b70      	ldr	r3, [pc, #448]	; (8003a5c <defThread+0x7f4>)
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <defThread+0x642>
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3462 	strb.w	r3, [r7, #1122]	; 0x462
 80038a8:	e002      	b.n	80038b0 <defThread+0x648>
 80038aa:	2300      	movs	r3, #0
 80038ac:	f887 3462 	strb.w	r3, [r7, #1122]	; 0x462
			errLedOn(led);
 80038b0:	f897 3462 	ldrb.w	r3, [r7, #1122]	; 0x462
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe fed3 	bl	8002660 <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 5)) != osOK) {
 80038ba:	4b6e      	ldr	r3, [pc, #440]	; (8003a74 <defThread+0x80c>)
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	f107 020b 	add.w	r2, r7, #11
 80038c2:	f107 0108 	add.w	r1, r7, #8
 80038c6:	2305      	movs	r3, #5
 80038c8:	f00e fa02 	bl	8011cd0 <osMessageQueueGet>
 80038cc:	4603      	mov	r3, r0
 80038ce:	4a65      	ldr	r2, [pc, #404]	; (8003a64 <defThread+0x7fc>)
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b64      	ldr	r3, [pc, #400]	; (8003a64 <defThread+0x7fc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d028      	beq.n	800392c <defThread+0x6c4>
			if (qs != qStat) qs = qStat;
 80038da:	4b62      	ldr	r3, [pc, #392]	; (8003a64 <defThread+0x7fc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d003      	beq.n	80038ee <defThread+0x686>
 80038e6:	4b5f      	ldr	r3, [pc, #380]	; (8003a64 <defThread+0x7fc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
			if (qStat != osErrorTimeout) {
 80038ee:	4b5d      	ldr	r3, [pc, #372]	; (8003a64 <defThread+0x7fc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f113 0f02 	cmn.w	r3, #2
 80038f6:	f000 83e2 	beq.w	80040be <defThread+0xe56>
				devError |= devQUE;
 80038fa:	4b58      	ldr	r3, [pc, #352]	; (8003a5c <defThread+0x7f4>)
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003902:	b29a      	uxth	r2, r3
 8003904:	4b55      	ldr	r3, [pc, #340]	; (8003a5c <defThread+0x7f4>)
 8003906:	801a      	strh	r2, [r3, #0]
				if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8003908:	4b57      	ldr	r3, [pc, #348]	; (8003a68 <defThread+0x800>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 83d6 	beq.w	80040be <defThread+0xe56>
 8003912:	4b54      	ldr	r3, [pc, #336]	; (8003a64 <defThread+0x7fc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe fd60 	bl	80023dc <get_qStat>
 800391c:	4602      	mov	r2, r0
 800391e:	4b53      	ldr	r3, [pc, #332]	; (8003a6c <defThread+0x804>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4953      	ldr	r1, [pc, #332]	; (8003a70 <defThread+0x808>)
 8003924:	2001      	movs	r0, #1
 8003926:	f7ff f809 	bl	800293c <Report>
 800392a:	e3c8      	b.n	80040be <defThread+0xe56>
			}
		} else {
			sprintf(screen, "Cmd: %s", str_cmds[qcmd.cmd]);
 800392c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003930:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	4b4f      	ldr	r3, [pc, #316]	; (8003a78 <defThread+0x810>)
 800393a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800393e:	f107 030c 	add.w	r3, r7, #12
 8003942:	494e      	ldr	r1, [pc, #312]	; (8003a7c <defThread+0x814>)
 8003944:	4618      	mov	r0, r3
 8003946:	f011 feef 	bl	8015728 <siprintf>
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 800394a:	4b43      	ldr	r3, [pc, #268]	; (8003a58 <defThread+0x7f0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	785b      	ldrb	r3, [r3, #1]
 8003950:	b29b      	uxth	r3, r3
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	b29b      	uxth	r3, r3
 8003956:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800395a:	b29c      	uxth	r4, r3
							   mkLineCenter(screen, ST7789_WIDTH / fntKey->width),
 800395c:	4b3e      	ldr	r3, [pc, #248]	; (8003a58 <defThread+0x7f0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	23f0      	movs	r3, #240	; 0xf0
 8003966:	fb93 f3f2 	sdiv	r3, r3, r2
 800396a:	b29a      	uxth	r2, r3
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	4611      	mov	r1, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f001 f826 	bl	80049c4 <mkLineCenter>
 8003978:	4601      	mov	r1, r0
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 800397a:	4b37      	ldr	r3, [pc, #220]	; (8003a58 <defThread+0x7f0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2200      	movs	r2, #0
 8003980:	9202      	str	r2, [sp, #8]
 8003982:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003986:	9201      	str	r2, [sp, #4]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	9200      	str	r2, [sp, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	460a      	mov	r2, r1
 8003990:	4621      	mov	r1, r4
 8003992:	2000      	movs	r0, #0
 8003994:	f000 ffc0 	bl	8004918 <ST7789_WriteString>
							   *fntKey,
							   CYAN,
							   BLACK);
			//
			if (dbg > logOn)
 8003998:	4b33      	ldr	r3, [pc, #204]	; (8003a68 <defThread+0x800>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d91e      	bls.n	80039de <defThread+0x776>
				Report(1, "Command(%u.%u): '%s'%s", qcmd.cmd, qcmd.attr, str_cmds[qcmd.cmd], eol);
 80039a0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80039a4:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	4619      	mov	r1, r3
 80039ac:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80039b0:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80039b4:	785b      	ldrb	r3, [r3, #1]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80039bc:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b2c      	ldr	r3, [pc, #176]	; (8003a78 <defThread+0x810>)
 80039c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ca:	4a28      	ldr	r2, [pc, #160]	; (8003a6c <defThread+0x804>)
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	9201      	str	r2, [sp, #4]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	4603      	mov	r3, r0
 80039d4:	460a      	mov	r2, r1
 80039d6:	492a      	ldr	r1, [pc, #168]	; (8003a80 <defThread+0x818>)
 80039d8:	2001      	movs	r0, #1
 80039da:	f7fe ffaf 	bl	800293c <Report>
			//
			nand_show = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
			switch (qcmd.cmd) {
 80039e4:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80039e8:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b0c      	cmp	r3, #12
 80039f0:	f200 8353 	bhi.w	800409a <defThread+0xe32>
 80039f4:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <defThread+0x794>)
 80039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fa:	bf00      	nop
 80039fc:	08003ae9 	.word	0x08003ae9
 8003a00:	08003be1 	.word	0x08003be1
 8003a04:	08003c8b 	.word	0x08003c8b
 8003a08:	08003c8b 	.word	0x08003c8b
 8003a0c:	08003f49 	.word	0x08003f49
 8003a10:	08003d75 	.word	0x08003d75
 8003a14:	08003e0f 	.word	0x08003e0f
 8003a18:	08003e79 	.word	0x08003e79
 8003a1c:	08003c1b 	.word	0x08003c1b
 8003a20:	08003af1 	.word	0x08003af1
 8003a24:	08003acf 	.word	0x08003acf
 8003a28:	08003a41 	.word	0x08003a41
 8003a2c:	08003a31 	.word	0x08003a31
				case cmdErr:
					Report(1, "!!! Error command !!!%s", eol);
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <defThread+0x804>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	461a      	mov	r2, r3
 8003a36:	4913      	ldr	r1, [pc, #76]	; (8003a84 <defThread+0x81c>)
 8003a38:	2001      	movs	r0, #1
 8003a3a:	f7fe ff7f 	bl	800293c <Report>
				break;
 8003a3e:	e32c      	b.n	800409a <defThread+0xe32>
				case cmdHelp:
					sprintf(stx, "Support next commands:%s", eol);
 8003a40:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <defThread+0x804>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	4910      	ldr	r1, [pc, #64]	; (8003a88 <defThread+0x820>)
 8003a48:	4810      	ldr	r0, [pc, #64]	; (8003a8c <defThread+0x824>)
 8003a4a:	f011 fe6d 	bl	8015728 <siprintf>
					for (uint8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t'%s'%s", s_cmds[i], eol);
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 8003a54:	e031      	b.n	8003aba <defThread+0x852>
 8003a56:	bf00      	nop
 8003a58:	20000080 	.word	0x20000080
 8003a5c:	20000594 	.word	0x20000594
 8003a60:	080168e4 	.word	0x080168e4
 8003a64:	200025f0 	.word	0x200025f0
 8003a68:	2000006a 	.word	0x2000006a
 8003a6c:	20000004 	.word	0x20000004
 8003a70:	080168f4 	.word	0x080168f4
 8003a74:	2000058c 	.word	0x2000058c
 8003a78:	20000038 	.word	0x20000038
 8003a7c:	08016900 	.word	0x08016900
 8003a80:	08016908 	.word	0x08016908
 8003a84:	08016920 	.word	0x08016920
 8003a88:	08016938 	.word	0x08016938
 8003a8c:	200025f4 	.word	0x200025f4
 8003a90:	489c      	ldr	r0, [pc, #624]	; (8003d04 <defThread+0xa9c>)
 8003a92:	f7fc fb9d 	bl	80001d0 <strlen>
 8003a96:	4603      	mov	r3, r0
 8003a98:	4a9a      	ldr	r2, [pc, #616]	; (8003d04 <defThread+0xa9c>)
 8003a9a:	1898      	adds	r0, r3, r2
 8003a9c:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8003aa0:	4a99      	ldr	r2, [pc, #612]	; (8003d08 <defThread+0xaa0>)
 8003aa2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003aa6:	4b99      	ldr	r3, [pc, #612]	; (8003d0c <defThread+0xaa4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4999      	ldr	r1, [pc, #612]	; (8003d10 <defThread+0xaa8>)
 8003aac:	f011 fe3c 	bl	8015728 <siprintf>
 8003ab0:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 8003aba:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8003abe:	2b0b      	cmp	r3, #11
 8003ac0:	d9e6      	bls.n	8003a90 <defThread+0x828>
					Report(1, "%s", stx);
 8003ac2:	4a90      	ldr	r2, [pc, #576]	; (8003d04 <defThread+0xa9c>)
 8003ac4:	4993      	ldr	r1, [pc, #588]	; (8003d14 <defThread+0xaac>)
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	f7fe ff38 	bl	800293c <Report>
				break;
 8003acc:	e2e5      	b.n	800409a <defThread+0xe32>
				case cmdMem:
					Report(1, "FreeRTOS memory: free=%lu heap=%lu bytes%s", xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003ace:	f010 fe71 	bl	80147b4 <xPortGetFreeHeapSize>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	4b8d      	ldr	r3, [pc, #564]	; (8003d0c <defThread+0xaa4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ade:	498e      	ldr	r1, [pc, #568]	; (8003d18 <defThread+0xab0>)
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	f7fe ff2b 	bl	800293c <Report>
				break;
 8003ae6:	e2d8      	b.n	800409a <defThread+0xe32>
				case cmdRestart:
					loop = false;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
		  		break;
 8003aee:	e2d4      	b.n	800409a <defThread+0xe32>
				case cmdInfo:
					if (dbg != logOff) {
 8003af0:	4b8a      	ldr	r3, [pc, #552]	; (8003d1c <defThread+0xab4>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8297 	beq.w	8004028 <defThread+0xdc0>
						strcpy(stx, "NAND:");
 8003afa:	4b82      	ldr	r3, [pc, #520]	; (8003d04 <defThread+0xa9c>)
 8003afc:	4a88      	ldr	r2, [pc, #544]	; (8003d20 <defThread+0xab8>)
 8003afe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b02:	6018      	str	r0, [r3, #0]
 8003b04:	3304      	adds	r3, #4
 8003b06:	8019      	strh	r1, [r3, #0]
						//uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
						for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f887 3456 	strb.w	r3, [r7, #1110]	; 0x456
 8003b0e:	e016      	b.n	8003b3e <defThread+0x8d6>
 8003b10:	487c      	ldr	r0, [pc, #496]	; (8003d04 <defThread+0xa9c>)
 8003b12:	f7fc fb5d 	bl	80001d0 <strlen>
 8003b16:	4603      	mov	r3, r0
 8003b18:	4a7a      	ldr	r2, [pc, #488]	; (8003d04 <defThread+0xa9c>)
 8003b1a:	1898      	adds	r0, r3, r2
 8003b1c:	f997 3456 	ldrsb.w	r3, [r7, #1110]	; 0x456
 8003b20:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8003b24:	4413      	add	r3, r2
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	497e      	ldr	r1, [pc, #504]	; (8003d24 <defThread+0xabc>)
 8003b2c:	f011 fdfc 	bl	8015728 <siprintf>
 8003b30:	f997 3456 	ldrsb.w	r3, [r7, #1110]	; 0x456
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	3301      	adds	r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f887 3456 	strb.w	r3, [r7, #1110]	; 0x456
 8003b3e:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d9e4      	bls.n	8003b10 <defThread+0x8a8>
						sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 8003b46:	486f      	ldr	r0, [pc, #444]	; (8003d04 <defThread+0xa9c>)
 8003b48:	f7fc fb42 	bl	80001d0 <strlen>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	4a6d      	ldr	r2, [pc, #436]	; (8003d04 <defThread+0xa9c>)
 8003b50:	1898      	adds	r0, r3, r2
 8003b52:	4b75      	ldr	r3, [pc, #468]	; (8003d28 <defThread+0xac0>)
 8003b54:	785b      	ldrb	r3, [r3, #1]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8003b5c:	4973      	ldr	r1, [pc, #460]	; (8003d2c <defThread+0xac4>)
 8003b5e:	f011 fde3 	bl	8015728 <siprintf>
						sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB"
 8003b62:	4868      	ldr	r0, [pc, #416]	; (8003d04 <defThread+0xa9c>)
 8003b64:	f7fc fb34 	bl	80001d0 <strlen>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	4a66      	ldr	r2, [pc, #408]	; (8003d04 <defThread+0xa9c>)
 8003b6c:	189c      	adds	r4, r3, r2
 8003b6e:	4b70      	ldr	r3, [pc, #448]	; (8003d30 <defThread+0xac8>)
 8003b70:	681d      	ldr	r5, [r3, #0]
 8003b72:	4b6f      	ldr	r3, [pc, #444]	; (8003d30 <defThread+0xac8>)
 8003b74:	685e      	ldr	r6, [r3, #4]
 8003b76:	4b6e      	ldr	r3, [pc, #440]	; (8003d30 <defThread+0xac8>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	4a6d      	ldr	r2, [pc, #436]	; (8003d30 <defThread+0xac8>)
 8003b7c:	6912      	ldr	r2, [r2, #16]
 8003b7e:	496d      	ldr	r1, [pc, #436]	; (8003d34 <defThread+0xacc>)
 8003b80:	6809      	ldr	r1, [r1, #0]
 8003b82:	486d      	ldr	r0, [pc, #436]	; (8003d38 <defThread+0xad0>)
 8003b84:	6800      	ldr	r0, [r0, #0]
 8003b86:	9005      	str	r0, [sp, #20]
 8003b88:	9104      	str	r1, [sp, #16]
 8003b8a:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 8003b8e:	9103      	str	r1, [sp, #12]
 8003b90:	9202      	str	r2, [sp, #8]
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	4633      	mov	r3, r6
 8003b9c:	462a      	mov	r2, r5
 8003b9e:	4967      	ldr	r1, [pc, #412]	; (8003d3c <defThread+0xad4>)
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f011 fdc1 	bl	8015728 <siprintf>
											chipConf.BlockNbr,
											chipConf.PlaneNbr,
											PlaneSizeMB,
											total_pages, total_bytes);
#ifdef SET_AUDIO_DAC
						if (audioStat == HAL_OK) sprintf(stx+strlen(stx), "\n\tAudio: '%s' (id:%u rev:%u)", audioName, audioID, audioRev);
 8003ba6:	4b66      	ldr	r3, [pc, #408]	; (8003d40 <defThread+0xad8>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d110      	bne.n	8003bd0 <defThread+0x968>
 8003bae:	4855      	ldr	r0, [pc, #340]	; (8003d04 <defThread+0xa9c>)
 8003bb0:	f7fc fb0e 	bl	80001d0 <strlen>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	4a53      	ldr	r2, [pc, #332]	; (8003d04 <defThread+0xa9c>)
 8003bb8:	1898      	adds	r0, r3, r2
 8003bba:	4b62      	ldr	r3, [pc, #392]	; (8003d44 <defThread+0xadc>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	4b61      	ldr	r3, [pc, #388]	; (8003d48 <defThread+0xae0>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	4a60      	ldr	r2, [pc, #384]	; (8003d4c <defThread+0xae4>)
 8003bca:	4961      	ldr	r1, [pc, #388]	; (8003d50 <defThread+0xae8>)
 8003bcc:	f011 fdac 	bl	8015728 <siprintf>
#endif
						Report(1, "%s%s", stx, eol);
 8003bd0:	4b4e      	ldr	r3, [pc, #312]	; (8003d0c <defThread+0xaa4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a4b      	ldr	r2, [pc, #300]	; (8003d04 <defThread+0xa9c>)
 8003bd6:	495f      	ldr	r1, [pc, #380]	; (8003d54 <defThread+0xaec>)
 8003bd8:	2001      	movs	r0, #1
 8003bda:	f7fe feaf 	bl	800293c <Report>
					}
				break;
 8003bde:	e223      	b.n	8004028 <defThread+0xdc0>
				case cmdEpoch:
					if (!qcmd.attr) {//set date&time
 8003be0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003be4:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003be8:	785b      	ldrb	r3, [r3, #1]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d105      	bne.n	8003bfa <defThread+0x992>
						set_Date(epoch);
 8003bee:	4b5a      	ldr	r3, [pc, #360]	; (8003d58 <defThread+0xaf0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe fda8 	bl	8002748 <set_Date>
					} else {//show date&time
						sec2str(stx);
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
					}
				break;
 8003bf8:	e218      	b.n	800402c <defThread+0xdc4>
						sec2str(stx);
 8003bfa:	4842      	ldr	r0, [pc, #264]	; (8003d04 <defThread+0xa9c>)
 8003bfc:	f7fe fe04 	bl	8002808 <sec2str>
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
 8003c00:	4b46      	ldr	r3, [pc, #280]	; (8003d1c <defThread+0xab4>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8211 	beq.w	800402c <defThread+0xdc4>
 8003c0a:	4b40      	ldr	r3, [pc, #256]	; (8003d0c <defThread+0xaa4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a3d      	ldr	r2, [pc, #244]	; (8003d04 <defThread+0xa9c>)
 8003c10:	4952      	ldr	r1, [pc, #328]	; (8003d5c <defThread+0xaf4>)
 8003c12:	2000      	movs	r0, #0
 8003c14:	f7fe fe92 	bl	800293c <Report>
				break;
 8003c18:	e208      	b.n	800402c <defThread+0xdc4>
				case cmdLog:
					if (qcmd.attr < logNone) {
 8003c1a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003c1e:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003c22:	785b      	ldrb	r3, [r3, #1]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d81e      	bhi.n	8003c66 <defThread+0x9fe>
						Report(1, "Set log level to '%s'(%u)%s", get_logName(qcmd.attr), qcmd.attr, eol);
 8003c28:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003c2c:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003c30:	785b      	ldrb	r3, [r3, #1]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe fc22 	bl	800247c <get_logName>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003c3e:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003c42:	785b      	ldrb	r3, [r3, #1]
 8003c44:	4619      	mov	r1, r3
 8003c46:	4b31      	ldr	r3, [pc, #196]	; (8003d0c <defThread+0xaa4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4944      	ldr	r1, [pc, #272]	; (8003d60 <defThread+0xaf8>)
 8003c50:	2001      	movs	r0, #1
 8003c52:	f7fe fe73 	bl	800293c <Report>
						dbg = qcmd.attr;
 8003c56:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003c5a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003c5e:	785a      	ldrb	r2, [r3, #1]
 8003c60:	4b2e      	ldr	r3, [pc, #184]	; (8003d1c <defThread+0xab4>)
 8003c62:	701a      	strb	r2, [r3, #0]
					} else {
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
					}
				break;
 8003c64:	e219      	b.n	800409a <defThread+0xe32>
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
 8003c66:	4b2d      	ldr	r3, [pc, #180]	; (8003d1c <defThread+0xab4>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fe fc06 	bl	800247c <get_logName>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b2a      	ldr	r3, [pc, #168]	; (8003d1c <defThread+0xab4>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	4619      	mov	r1, r3
 8003c78:	4b24      	ldr	r3, [pc, #144]	; (8003d0c <defThread+0xaa4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4938      	ldr	r1, [pc, #224]	; (8003d64 <defThread+0xafc>)
 8003c82:	2001      	movs	r0, #1
 8003c84:	f7fe fe5a 	bl	800293c <Report>
				break;
 8003c88:	e207      	b.n	800409a <defThread+0xe32>
				case cmdRead:
				case cmdNext:
				{
					if (qcmd.cmd == cmdRead) {
 8003c8a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003c8e:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d10a      	bne.n	8003cae <defThread+0xa46>
						readed = true;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f887 3472 	strb.w	r3, [r7, #1138]	; 0x472
						page_offset = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f8a7 346a 	strh.w	r3, [r7, #1130]	; 0x46a
						page_addr = nandAdr;
 8003ca4:	4b30      	ldr	r3, [pc, #192]	; (8003d68 <defThread+0xb00>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 8003cac:	e018      	b.n	8003ce0 <defThread+0xa78>
					} else {
						page_offset += nandLen;
 8003cae:	4b2f      	ldr	r3, [pc, #188]	; (8003d6c <defThread+0xb04>)
 8003cb0:	881a      	ldrh	r2, [r3, #0]
 8003cb2:	f8b7 346a 	ldrh.w	r3, [r7, #1130]	; 0x46a
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f8a7 346a 	strh.w	r3, [r7, #1130]	; 0x46a
						if (!(page_offset % chipConf.PageSize)) {
 8003cbc:	f8b7 346a 	ldrh.w	r3, [r7, #1130]	; 0x46a
 8003cc0:	4a1b      	ldr	r2, [pc, #108]	; (8003d30 <defThread+0xac8>)
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cc8:	fb01 f202 	mul.w	r2, r1, r2
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <defThread+0xa78>
							page_offset = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8a7 346a 	strh.w	r3, [r7, #1130]	; 0x46a
							nandAdr = page_addr;
 8003cd8:	4a23      	ldr	r2, [pc, #140]	; (8003d68 <defThread+0xb00>)
 8003cda:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8003cde:	6013      	str	r3, [r2, #0]
						}
					}
					io_nand_read(page_addr / chipConf.PageSize, rdBuf, nandLen, page_offset);
 8003ce0:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <defThread+0xac8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f8d7 2464 	ldr.w	r2, [r7, #1124]	; 0x464
 8003ce8:	fbb2 f0f3 	udiv	r0, r2, r3
 8003cec:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <defThread+0xb04>)
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f8b7 346a 	ldrh.w	r3, [r7, #1130]	; 0x46a
 8003cf6:	491e      	ldr	r1, [pc, #120]	; (8003d70 <defThread+0xb08>)
 8003cf8:	f7fd fe0e 	bl	8001918 <io_nand_read>
					nand_show = 1;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
				}
				break;
 8003d02:	e1ca      	b.n	800409a <defThread+0xe32>
 8003d04:	200025f4 	.word	0x200025f4
 8003d08:	20000008 	.word	0x20000008
 8003d0c:	20000004 	.word	0x20000004
 8003d10:	08016954 	.word	0x08016954
 8003d14:	08016680 	.word	0x08016680
 8003d18:	0801695c 	.word	0x0801695c
 8003d1c:	2000006a 	.word	0x2000006a
 8003d20:	08016700 	.word	0x08016700
 8003d24:	08016678 	.word	0x08016678
 8003d28:	200015d0 	.word	0x200015d0
 8003d2c:	08016708 	.word	0x08016708
 8003d30:	200015d8 	.word	0x200015d8
 8003d34:	200015b0 	.word	0x200015b0
 8003d38:	200015b4 	.word	0x200015b4
 8003d3c:	08016720 	.word	0x08016720
 8003d40:	20002dfa 	.word	0x20002dfa
 8003d44:	20002df8 	.word	0x20002df8
 8003d48:	20002df9 	.word	0x20002df9
 8003d4c:	20002dfc 	.word	0x20002dfc
 8003d50:	080167a4 	.word	0x080167a4
 8003d54:	080167e4 	.word	0x080167e4
 8003d58:	2000006c 	.word	0x2000006c
 8003d5c:	08016988 	.word	0x08016988
 8003d60:	080169a4 	.word	0x080169a4
 8003d64:	080169c0 	.word	0x080169c0
 8003d68:	200015bc 	.word	0x200015bc
 8003d6c:	200015c0 	.word	0x200015c0
 8003d70:	200015f0 	.word	0x200015f0
				case cmdErase:
					if (!qcmd.attr) {
 8003d74:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003d78:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003d7c:	785b      	ldrb	r3, [r3, #1]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d132      	bne.n	8003de8 <defThread+0xb80>
						uint32_t bk = nandBlk;// * chipConf.PageSize;
 8003d82:	4bad      	ldr	r3, [pc, #692]	; (8004038 <defThread+0xdd0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
						io_nand_block_erase(bk);
 8003d8a:	f8d7 0434 	ldr.w	r0, [r7, #1076]	; 0x434
 8003d8e:	f7fd fdff 	bl	8001990 <io_nand_block_erase>
						if (dbg != logOff) {
 8003d92:	4baa      	ldr	r3, [pc, #680]	; (800403c <defThread+0xdd4>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 814a 	beq.w	8004030 <defThread+0xdc8>
							if (devError & devNAND) {
 8003d9c:	4ba8      	ldr	r3, [pc, #672]	; (8004040 <defThread+0xdd8>)
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00f      	beq.n	8003dc8 <defThread+0xb60>
								Report(1, "Erase nand block:%lu addr:%u Error !%s", nandBlk / chipConf.BlockSize, bk, eol);
 8003da8:	4ba3      	ldr	r3, [pc, #652]	; (8004038 <defThread+0xdd0>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4ba5      	ldr	r3, [pc, #660]	; (8004044 <defThread+0xddc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003db4:	4ba4      	ldr	r3, [pc, #656]	; (8004048 <defThread+0xde0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8003dbe:	49a3      	ldr	r1, [pc, #652]	; (800404c <defThread+0xde4>)
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	f7fe fdbb 	bl	800293c <Report>
						iBlk = 0;
						next_block_erase = 1;
						if (dbg != logOff) Report(1, "Erase chip ");
						stik = HAL_GetTick();
					}
				break;
 8003dc6:	e133      	b.n	8004030 <defThread+0xdc8>
								Report(1, "Erase nand block:%lu addr:%u Ok !%s", nandBlk / chipConf.BlockSize, bk, eol);
 8003dc8:	4b9b      	ldr	r3, [pc, #620]	; (8004038 <defThread+0xdd0>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4b9d      	ldr	r3, [pc, #628]	; (8004044 <defThread+0xddc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dd4:	4b9c      	ldr	r3, [pc, #624]	; (8004048 <defThread+0xde0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8003dde:	499c      	ldr	r1, [pc, #624]	; (8004050 <defThread+0xde8>)
 8003de0:	2001      	movs	r0, #1
 8003de2:	f7fe fdab 	bl	800293c <Report>
				break;
 8003de6:	e123      	b.n	8004030 <defThread+0xdc8>
						iBlk = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
						next_block_erase = 1;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f887 347f 	strb.w	r3, [r7, #1151]	; 0x47f
						if (dbg != logOff) Report(1, "Erase chip ");
 8003df4:	4b91      	ldr	r3, [pc, #580]	; (800403c <defThread+0xdd4>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <defThread+0xb9c>
 8003dfc:	4995      	ldr	r1, [pc, #596]	; (8004054 <defThread+0xdec>)
 8003dfe:	2001      	movs	r0, #1
 8003e00:	f7fe fd9c 	bl	800293c <Report>
						stik = HAL_GetTick();
 8003e04:	f006 fb6c 	bl	800a4e0 <HAL_GetTick>
 8003e08:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
				break;
 8003e0c:	e110      	b.n	8004030 <defThread+0xdc8>
				case cmdCheckPage://check page
				{
					uint32_t adr = nandPage * chipConf.PageSize;//nand_PageToBlock(nandPage);
 8003e0e:	4b8d      	ldr	r3, [pc, #564]	; (8004044 <defThread+0xddc>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a91      	ldr	r2, [pc, #580]	; (8004058 <defThread+0xdf0>)
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	fb02 f303 	mul.w	r3, r2, r3
 8003e1a:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
					if (!pageIsEmpty(nandPage)) {
 8003e1e:	4b8e      	ldr	r3, [pc, #568]	; (8004058 <defThread+0xdf0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe f996 	bl	8002154 <pageIsEmpty>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f083 0301 	eor.w	r3, r3, #1
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d010      	beq.n	8003e56 <defThread+0xbee>
						if (dbg != logOff) Report(1, "Page:%lu in addr:0x%X Not empty%s", nandPage, adr, eol);
 8003e34:	4b81      	ldr	r3, [pc, #516]	; (800403c <defThread+0xdd4>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80fb 	beq.w	8004034 <defThread+0xdcc>
 8003e3e:	4b86      	ldr	r3, [pc, #536]	; (8004058 <defThread+0xdf0>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b81      	ldr	r3, [pc, #516]	; (8004048 <defThread+0xde0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8003e4c:	4983      	ldr	r1, [pc, #524]	; (800405c <defThread+0xdf4>)
 8003e4e:	2001      	movs	r0, #1
 8003e50:	f7fe fd74 	bl	800293c <Report>
					} else {
						if (dbg != logOff) Report(1, "Page:%lu in addr:0x%X is Empty%s", nandPage, adr , eol);
					}
				}
				break;
 8003e54:	e0ee      	b.n	8004034 <defThread+0xdcc>
						if (dbg != logOff) Report(1, "Page:%lu in addr:0x%X is Empty%s", nandPage, adr , eol);
 8003e56:	4b79      	ldr	r3, [pc, #484]	; (800403c <defThread+0xdd4>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 80ea 	beq.w	8004034 <defThread+0xdcc>
 8003e60:	4b7d      	ldr	r3, [pc, #500]	; (8004058 <defThread+0xdf0>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4b78      	ldr	r3, [pc, #480]	; (8004048 <defThread+0xde0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8003e6e:	497c      	ldr	r1, [pc, #496]	; (8004060 <defThread+0xdf8>)
 8003e70:	2001      	movs	r0, #1
 8003e72:	f7fe fd63 	bl	800293c <Report>
				break;
 8003e76:	e0dd      	b.n	8004034 <defThread+0xdcc>
				case cmdCheckBlk://check block
				{
					uint32_t pg, spg = chipConf.BlockSize * nandPage;//start page in block
 8003e78:	4b72      	ldr	r3, [pc, #456]	; (8004044 <defThread+0xddc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a76      	ldr	r2, [pc, #472]	; (8004058 <defThread+0xdf0>)
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	fb02 f303 	mul.w	r3, r2, r3
 8003e84:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
					bool ok = true;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
					byte = dbg;
 8003e8e:	4b6b      	ldr	r3, [pc, #428]	; (800403c <defThread+0xdd4>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	f887 344e 	strb.w	r3, [r7, #1102]	; 0x44e
					dbg = logOff;
 8003e96:	4b69      	ldr	r3, [pc, #420]	; (800403c <defThread+0xdd4>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	701a      	strb	r2, [r3, #0]
					for (pg = spg; pg < (spg + chipConf.BlockSize); pg++) {
 8003e9c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003ea0:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8003ea4:	e012      	b.n	8003ecc <defThread+0xc64>
						if (!pageIsEmpty(pg)) {
 8003ea6:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 8003eaa:	f7fe f953 	bl	8002154 <pageIsEmpty>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f083 0301 	eor.w	r3, r3, #1
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <defThread+0xc5a>
							ok = false;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
							break;
 8003ec0:	e00d      	b.n	8003ede <defThread+0xc76>
					for (pg = spg; pg < (spg + chipConf.BlockSize); pg++) {
 8003ec2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8003ecc:	4b5d      	ldr	r3, [pc, #372]	; (8004044 <defThread+0xddc>)
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d3e3      	bcc.n	8003ea6 <defThread+0xc3e>
						}
					}
					dbg = byte;
 8003ede:	4a57      	ldr	r2, [pc, #348]	; (800403c <defThread+0xdd4>)
 8003ee0:	f897 344e 	ldrb.w	r3, [r7, #1102]	; 0x44e
 8003ee4:	7013      	strb	r3, [r2, #0]
					if (dbg != logOff) {
 8003ee6:	4b55      	ldr	r3, [pc, #340]	; (800403c <defThread+0xdd4>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80d2 	beq.w	8004094 <defThread+0xe2c>
						if (ok) {
 8003ef0:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d017      	beq.n	8003f28 <defThread+0xcc0>
							Report(1, "Block:%lu Page:%lu..%lu is Empty%s",
									spg / chipConf.BlockSize, spg, spg + chipConf.BlockSize - 1, eol);
 8003ef8:	4b52      	ldr	r3, [pc, #328]	; (8004044 <defThread+0xddc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
							Report(1, "Block:%lu Page:%lu..%lu is Empty%s",
 8003efc:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 8003f00:	fbb2 f1f3 	udiv	r1, r2, r3
									spg / chipConf.BlockSize, spg, spg + chipConf.BlockSize - 1, eol);
 8003f04:	4b4f      	ldr	r3, [pc, #316]	; (8004044 <defThread+0xddc>)
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003f0c:	4413      	add	r3, r2
							Report(1, "Block:%lu Page:%lu..%lu is Empty%s",
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	4a4d      	ldr	r2, [pc, #308]	; (8004048 <defThread+0xde0>)
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	9201      	str	r2, [sp, #4]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003f1c:	460a      	mov	r2, r1
 8003f1e:	4951      	ldr	r1, [pc, #324]	; (8004064 <defThread+0xdfc>)
 8003f20:	2001      	movs	r0, #1
 8003f22:	f7fe fd0b 	bl	800293c <Report>
							Report(1, "Block:%lu Page:%lu Not empty%s",
									spg / chipConf.BlockSize, pg, eol);
						}
					}
				}
				break;
 8003f26:	e0b5      	b.n	8004094 <defThread+0xe2c>
									spg / chipConf.BlockSize, pg, eol);
 8003f28:	4b46      	ldr	r3, [pc, #280]	; (8004044 <defThread+0xddc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
							Report(1, "Block:%lu Page:%lu Not empty%s",
 8003f2c:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 8003f30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f34:	4b44      	ldr	r3, [pc, #272]	; (8004048 <defThread+0xde0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8003f3e:	494a      	ldr	r1, [pc, #296]	; (8004068 <defThread+0xe00>)
 8003f40:	2001      	movs	r0, #1
 8003f42:	f7fe fcfb 	bl	800293c <Report>
				break;
 8003f46:	e0a5      	b.n	8004094 <defThread+0xe2c>
				case cmdWrite:
				{
					uint32_t wadr = nandAdr / chipConf.PageSize;
 8003f48:	4b48      	ldr	r3, [pc, #288]	; (800406c <defThread+0xe04>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4b3d      	ldr	r3, [pc, #244]	; (8004044 <defThread+0xddc>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
					if (!pageIsEmpty(wadr)) {
 8003f58:	f8d7 0430 	ldr.w	r0, [r7, #1072]	; 0x430
 8003f5c:	f7fe f8fa 	bl	8002154 <pageIsEmpty>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f083 0301 	eor.w	r3, r3, #1
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00e      	beq.n	8003f8a <defThread+0xd22>
						io_nand_block_erase(wadr);
 8003f6c:	f8d7 0430 	ldr.w	r0, [r7, #1072]	; 0x430
 8003f70:	f7fd fd0e 	bl	8001990 <io_nand_block_erase>
						sprintf(stx, "Erase nand addr:%lu done", wadr + devAdr);
 8003f74:	4b3e      	ldr	r3, [pc, #248]	; (8004070 <defThread+0xe08>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8003f7c:	4413      	add	r3, r2
 8003f7e:	461a      	mov	r2, r3
 8003f80:	493c      	ldr	r1, [pc, #240]	; (8004074 <defThread+0xe0c>)
 8003f82:	483d      	ldr	r0, [pc, #244]	; (8004078 <defThread+0xe10>)
 8003f84:	f011 fbd0 	bl	8015728 <siprintf>
 8003f88:	e009      	b.n	8003f9e <defThread+0xd36>
					} else {
						sprintf(stx, "Addr:%lu is Empty", wadr + devAdr);
 8003f8a:	4b39      	ldr	r3, [pc, #228]	; (8004070 <defThread+0xe08>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8003f92:	4413      	add	r3, r2
 8003f94:	461a      	mov	r2, r3
 8003f96:	4939      	ldr	r1, [pc, #228]	; (800407c <defThread+0xe14>)
 8003f98:	4837      	ldr	r0, [pc, #220]	; (8004078 <defThread+0xe10>)
 8003f9a:	f011 fbc5 	bl	8015728 <siprintf>
					}
					if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8003f9e:	4b27      	ldr	r3, [pc, #156]	; (800403c <defThread+0xdd4>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d006      	beq.n	8003fb4 <defThread+0xd4c>
 8003fa6:	4b28      	ldr	r3, [pc, #160]	; (8004048 <defThread+0xde0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a33      	ldr	r2, [pc, #204]	; (8004078 <defThread+0xe10>)
 8003fac:	4934      	ldr	r1, [pc, #208]	; (8004080 <defThread+0xe18>)
 8003fae:	2001      	movs	r0, #1
 8003fb0:	f7fe fcc4 	bl	800293c <Report>
					memset(wrBuf, EMPTY, chipConf.PageSize);
 8003fb4:	4b23      	ldr	r3, [pc, #140]	; (8004044 <defThread+0xddc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	21ff      	movs	r1, #255	; 0xff
 8003fbc:	4831      	ldr	r0, [pc, #196]	; (8004084 <defThread+0xe1c>)
 8003fbe:	f010 ff4b 	bl	8014e58 <memset>
					uint16_t ofs = 0;//(nandAdr - devAdr) % chipConf.PageSize;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
					memset(wrBuf /* + ofs*/, nandByte, nandLen);
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <defThread+0xe20>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4b2f      	ldr	r3, [pc, #188]	; (800408c <defThread+0xe24>)
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	482b      	ldr	r0, [pc, #172]	; (8004084 <defThread+0xe1c>)
 8003fd6:	f010 ff3f 	bl	8014e58 <memset>
					io_nand_write(wadr, wrBuf, nandLen, ofs);
 8003fda:	4b2c      	ldr	r3, [pc, #176]	; (800408c <defThread+0xe24>)
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8003fe4:	4927      	ldr	r1, [pc, #156]	; (8004084 <defThread+0xe1c>)
 8003fe6:	f8d7 0430 	ldr.w	r0, [r7, #1072]	; 0x430
 8003fea:	f7fd fcb3 	bl	8001954 <io_nand_write>
					if (dbg != logOff) Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu ofs:%u%s",
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <defThread+0xdd4>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d050      	beq.n	8004098 <defThread+0xe30>
 8003ff6:	4b1d      	ldr	r3, [pc, #116]	; (800406c <defThread+0xe04>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <defThread+0xe08>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	18d1      	adds	r1, r2, r3
 8004000:	4b21      	ldr	r3, [pc, #132]	; (8004088 <defThread+0xe20>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	461c      	mov	r4, r3
 8004006:	4b21      	ldr	r3, [pc, #132]	; (800408c <defThread+0xe24>)
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8004010:	4a0d      	ldr	r2, [pc, #52]	; (8004048 <defThread+0xde0>)
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	9202      	str	r2, [sp, #8]
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	9000      	str	r0, [sp, #0]
 800401a:	4623      	mov	r3, r4
 800401c:	460a      	mov	r2, r1
 800401e:	491c      	ldr	r1, [pc, #112]	; (8004090 <defThread+0xe28>)
 8004020:	2001      	movs	r0, #1
 8004022:	f7fe fc8b 	bl	800293c <Report>
												nandAdr + devAdr, nandByte, nandLen, ofs, eol);
				}
				break;
 8004026:	e037      	b.n	8004098 <defThread+0xe30>
				break;
 8004028:	bf00      	nop
 800402a:	e036      	b.n	800409a <defThread+0xe32>
				break;
 800402c:	bf00      	nop
 800402e:	e034      	b.n	800409a <defThread+0xe32>
				break;
 8004030:	bf00      	nop
 8004032:	e032      	b.n	800409a <defThread+0xe32>
				break;
 8004034:	bf00      	nop
 8004036:	e030      	b.n	800409a <defThread+0xe32>
 8004038:	200015c4 	.word	0x200015c4
 800403c:	2000006a 	.word	0x2000006a
 8004040:	20000594 	.word	0x20000594
 8004044:	200015d8 	.word	0x200015d8
 8004048:	20000004 	.word	0x20000004
 800404c:	080169e0 	.word	0x080169e0
 8004050:	08016a08 	.word	0x08016a08
 8004054:	08016a2c 	.word	0x08016a2c
 8004058:	200015c8 	.word	0x200015c8
 800405c:	08016a38 	.word	0x08016a38
 8004060:	08016a5c 	.word	0x08016a5c
 8004064:	08016a80 	.word	0x08016a80
 8004068:	08016aa4 	.word	0x08016aa4
 800406c:	200015bc 	.word	0x200015bc
 8004070:	200015b8 	.word	0x200015b8
 8004074:	08016ac4 	.word	0x08016ac4
 8004078:	200025f4 	.word	0x200025f4
 800407c:	08016ae0 	.word	0x08016ae0
 8004080:	080167e4 	.word	0x080167e4
 8004084:	20001df0 	.word	0x20001df0
 8004088:	20000088 	.word	0x20000088
 800408c:	200015c0 	.word	0x200015c0
 8004090:	08016af4 	.word	0x08016af4
				break;
 8004094:	bf00      	nop
 8004096:	e000      	b.n	800409a <defThread+0xe32>
				break;
 8004098:	bf00      	nop
			}
			if (nand_show) {
 800409a:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00d      	beq.n	80040be <defThread+0xe56>
				showBuf(nand_show, readed, nandAdr, nandLen, rdBuf);
 80040a2:	4b4c      	ldr	r3, [pc, #304]	; (80041d4 <defThread+0xf6c>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4b4c      	ldr	r3, [pc, #304]	; (80041d8 <defThread+0xf70>)
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	461c      	mov	r4, r3
 80040ac:	f897 1472 	ldrb.w	r1, [r7, #1138]	; 0x472
 80040b0:	f897 0473 	ldrb.w	r0, [r7, #1139]	; 0x473
 80040b4:	4b49      	ldr	r3, [pc, #292]	; (80041dc <defThread+0xf74>)
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	4623      	mov	r3, r4
 80040ba:	f7fe fca5 	bl	8002a08 <showBuf>
			}
		}

		// Erase all pages
		if (next_block_erase) {
 80040be:	f897 347f 	ldrb.w	r3, [r7, #1151]	; 0x47f
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d059      	beq.n	800417a <defThread+0xf12>
			byte = dbg;
 80040c6:	4b46      	ldr	r3, [pc, #280]	; (80041e0 <defThread+0xf78>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	f887 344e 	strb.w	r3, [r7, #1102]	; 0x44e
			dbg = logOff;//disable print log !
 80040ce:	4b44      	ldr	r3, [pc, #272]	; (80041e0 <defThread+0xf78>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	701a      	strb	r2, [r3, #0]
			io_nand_block_erase(iBlk);
 80040d4:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 80040d8:	f7fd fc5a 	bl	8001990 <io_nand_block_erase>
			dbg = byte;//restore dbg value !
 80040dc:	4a40      	ldr	r2, [pc, #256]	; (80041e0 <defThread+0xf78>)
 80040de:	f897 344e 	ldrb.w	r3, [r7, #1102]	; 0x44e
 80040e2:	7013      	strb	r3, [r2, #0]
			if (devError & devNAND) {
 80040e4:	4b3f      	ldr	r3, [pc, #252]	; (80041e4 <defThread+0xf7c>)
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <defThread+0xe90>
				next_block_erase = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f887 347f 	strb.w	r3, [r7, #1151]	; 0x47f
 80040f6:	e018      	b.n	800412a <defThread+0xec2>
			} else {
				//if (!(iBlk % (chipConf.PageSize * 1024))) Report(0, ".");
				//if (iBlk >= (chipConf.PlaneSize * chipConf.PlaneNbr)) next_block_erase = 0;
				if (!(iBlk % (chipConf.BlockSize * 16))) Report(0, ".");
 80040f8:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <defThread+0xf80>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	011a      	lsls	r2, r3, #4
 80040fe:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8004102:	fbb3 f1f2 	udiv	r1, r3, r2
 8004106:	fb01 f202 	mul.w	r2, r1, r2
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d103      	bne.n	8004118 <defThread+0xeb0>
 8004110:	4936      	ldr	r1, [pc, #216]	; (80041ec <defThread+0xf84>)
 8004112:	2000      	movs	r0, #0
 8004114:	f7fe fc12 	bl	800293c <Report>
				if (iBlk >= total_pages) next_block_erase = 0;
 8004118:	4b35      	ldr	r3, [pc, #212]	; (80041f0 <defThread+0xf88>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8004120:	429a      	cmp	r2, r3
 8004122:	d302      	bcc.n	800412a <defThread+0xec2>
 8004124:	2300      	movs	r3, #0
 8004126:	f887 347f 	strb.w	r3, [r7, #1151]	; 0x47f
			}
			if (!next_block_erase) {
 800412a:	f897 347f 	ldrb.w	r3, [r7, #1151]	; 0x47f
 800412e:	2b00      	cmp	r3, #0
 8004130:	d11c      	bne.n	800416c <defThread+0xf04>
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s",
 8004132:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <defThread+0xf78>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d018      	beq.n	800416c <defThread+0xf04>
						iBlk / chipConf.BlockSize, (HAL_GetTick() - stik) / 1000, eol);
 800413a:	4b2b      	ldr	r3, [pc, #172]	; (80041e8 <defThread+0xf80>)
 800413c:	689b      	ldr	r3, [r3, #8]
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s",
 800413e:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8004142:	fbb2 f4f3 	udiv	r4, r2, r3
						iBlk / chipConf.BlockSize, (HAL_GetTick() - stik) / 1000, eol);
 8004146:	f006 f9cb 	bl	800a4e0 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8004150:	1ad3      	subs	r3, r2, r3
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s",
 8004152:	4a28      	ldr	r2, [pc, #160]	; (80041f4 <defThread+0xf8c>)
 8004154:	fba2 2303 	umull	r2, r3, r2, r3
 8004158:	099a      	lsrs	r2, r3, #6
 800415a:	4b27      	ldr	r3, [pc, #156]	; (80041f8 <defThread+0xf90>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	4613      	mov	r3, r2
 8004162:	4622      	mov	r2, r4
 8004164:	4925      	ldr	r1, [pc, #148]	; (80041fc <defThread+0xf94>)
 8004166:	2000      	movs	r0, #0
 8004168:	f7fe fbe8 	bl	800293c <Report>
			}
			iBlk += chipConf.BlockSize;//chipConf.PageSize;
 800416c:	4b1e      	ldr	r3, [pc, #120]	; (80041e8 <defThread+0xf80>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8004174:	4413      	add	r3, r2
 8004176:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
		}
		//
		osDelay(5);
 800417a:	2005      	movs	r0, #5
 800417c:	f00d fc30 	bl	80119e0 <osDelay>
	while (loop) {
 8004180:	f897 3463 	ldrb.w	r3, [r7, #1123]	; 0x463
 8004184:	2b00      	cmp	r3, #0
 8004186:	f47f aaff 	bne.w	8003788 <defThread+0x520>

//	if (wrBuf) free(wrBuf);
//	if (rdBuf) free(rdBuf);

#ifdef SET_SMALL_FS
	if (mnt) fs_err = io_fs_unmount();
 800418a:	f897 346d 	ldrb.w	r3, [r7, #1133]	; 0x46d
 800418e:	2b00      	cmp	r3, #0
 8004190:	d004      	beq.n	800419c <defThread+0xf34>
 8004192:	f001 fa2b 	bl	80055ec <io_fs_unmount>
 8004196:	4603      	mov	r3, r0
 8004198:	4a19      	ldr	r2, [pc, #100]	; (8004200 <defThread+0xf98>)
 800419a:	6013      	str	r3, [r2, #0]
#endif

	if (dbg != logOff) Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 800419c:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <defThread+0xf78>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d011      	beq.n	80041c8 <defThread+0xf60>
 80041a4:	4b17      	ldr	r3, [pc, #92]	; (8004204 <defThread+0xf9c>)
 80041a6:	681c      	ldr	r4, [r3, #0]
 80041a8:	f010 fb04 	bl	80147b4 <xPortGetFreeHeapSize>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <defThread+0xf90>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	9302      	str	r3, [sp, #8]
 80041b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	9200      	str	r2, [sp, #0]
 80041bc:	4b12      	ldr	r3, [pc, #72]	; (8004208 <defThread+0xfa0>)
 80041be:	4622      	mov	r2, r4
 80041c0:	4912      	ldr	r1, [pc, #72]	; (800420c <defThread+0xfa4>)
 80041c2:	2001      	movs	r0, #1
 80041c4:	f7fe fbba 	bl	800293c <Report>
	osDelay(250);
 80041c8:	20fa      	movs	r0, #250	; 0xfa
 80041ca:	f00d fc09 	bl	80119e0 <osDelay>

	NVIC_SystemReset();
 80041ce:	f7fd fbf7 	bl	80019c0 <__NVIC_SystemReset>
 80041d2:	bf00      	nop
 80041d4:	200015bc 	.word	0x200015bc
 80041d8:	200015c0 	.word	0x200015c0
 80041dc:	200015f0 	.word	0x200015f0
 80041e0:	2000006a 	.word	0x2000006a
 80041e4:	20000594 	.word	0x20000594
 80041e8:	200015d8 	.word	0x200015d8
 80041ec:	08016b28 	.word	0x08016b28
 80041f0:	200015b0 	.word	0x200015b0
 80041f4:	10624dd3 	.word	0x10624dd3
 80041f8:	20000004 	.word	0x20000004
 80041fc:	08016b2c 	.word	0x08016b2c
 8004200:	20002df4 	.word	0x20002df4
 8004204:	20000000 	.word	0x20000000
 8004208:	08019e4c 	.word	0x08019e4c
 800420c:	08016b44 	.word	0x08016b44

08004210 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004210:	b5b0      	push	{r4, r5, r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a10      	ldr	r2, [pc, #64]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d102      	bne.n	8004228 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8004222:	f006 f949 	bl	800a4b8 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8004226:	e016      	b.n	8004256 <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004230:	d111      	bne.n	8004256 <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 8004232:	f7fe fa4b 	bl	80026cc <get_msCounter>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	f002 0403 	and.w	r4, r2, #3
 800423e:	2500      	movs	r5, #0
 8004240:	1ee3      	subs	r3, r4, #3
 8004242:	432b      	orrs	r3, r5
 8004244:	d105      	bne.n	8004252 <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 8004246:	f7fe fa33 	bl	80026b0 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 800424a:	2180      	movs	r1, #128	; 0x80
 800424c:	4805      	ldr	r0, [pc, #20]	; (8004264 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800424e:	f007 f81e 	bl	800b28e <HAL_GPIO_TogglePin>
	  inc_msCounter();
 8004252:	f7fe fa49 	bl	80026e8 <inc_msCounter>
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bdb0      	pop	{r4, r5, r7, pc}
 800425e:	bf00      	nop
 8004260:	40010000 	.word	0x40010000
 8004264:	40020800 	.word	0x40020800

08004268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	devError |= devSYS;
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <Error_Handler+0x1c>)
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004274:	b29a      	uxth	r2, r3
 8004276:	4b03      	ldr	r3, [pc, #12]	; (8004284 <Error_Handler+0x1c>)
 8004278:	801a      	strh	r2, [r3, #0]
	errLedOn(true);
 800427a:	2001      	movs	r0, #1
 800427c:	f7fe f9f0 	bl	8002660 <errLedOn>

  /* USER CODE END Error_Handler_Debug */
}
 8004280:	bf00      	nop
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000594 	.word	0x20000594

08004288 <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8004292:	2200      	movs	r2, #0
 8004294:	2104      	movs	r1, #4
 8004296:	480c      	ldr	r0, [pc, #48]	; (80042c8 <ST7789_WriteCommand+0x40>)
 8004298:	f006 ffe0 	bl	800b25c <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 800429c:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <ST7789_WriteCommand+0x44>)
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	2396      	movs	r3, #150	; 0x96
 80042a2:	1df9      	adds	r1, r7, #7
 80042a4:	2201      	movs	r2, #1
 80042a6:	f00b f816 	bl	800f2d6 <HAL_SPI_Transmit>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d006      	beq.n	80042be <ST7789_WriteCommand+0x36>
 80042b0:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <ST7789_WriteCommand+0x48>)
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	f043 0310 	orr.w	r3, r3, #16
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <ST7789_WriteCommand+0x48>)
 80042bc:	801a      	strh	r2, [r3, #0]
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40020000 	.word	0x40020000
 80042cc:	20000070 	.word	0x20000070
 80042d0:	20000594 	.word	0x20000594

080042d4 <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 80042de:	2200      	movs	r2, #0
 80042e0:	2104      	movs	r1, #4
 80042e2:	480e      	ldr	r0, [pc, #56]	; (800431c <ST7789_WriteCommands+0x48>)
 80042e4:	f006 ffba 	bl	800b25c <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 80042e8:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <ST7789_WriteCommands+0x4c>)
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	2196      	movs	r1, #150	; 0x96
 80042f2:	460b      	mov	r3, r1
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	f00a ffeb 	bl	800f2d6 <HAL_SPI_Transmit>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d006      	beq.n	8004314 <ST7789_WriteCommands+0x40>
 8004306:	4b07      	ldr	r3, [pc, #28]	; (8004324 <ST7789_WriteCommands+0x50>)
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	f043 0310 	orr.w	r3, r3, #16
 800430e:	b29a      	uxth	r2, r3
 8004310:	4b04      	ldr	r3, [pc, #16]	; (8004324 <ST7789_WriteCommands+0x50>)
 8004312:	801a      	strh	r2, [r3, #0]
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40020000 	.word	0x40020000
 8004320:	20000070 	.word	0x20000070
 8004324:	20000594 	.word	0x20000594

08004328 <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8004336:	2201      	movs	r2, #1
 8004338:	2104      	movs	r1, #4
 800433a:	481f      	ldr	r0, [pc, #124]	; (80043b8 <ST7789_WriteData+0x90>)
 800433c:	f006 ff8e 	bl	800b25c <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8004340:	e029      	b.n	8004396 <ST7789_WriteData+0x6e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004348:	4293      	cmp	r3, r2
 800434a:	bf28      	it	cs
 800434c:	4613      	movcs	r3, r2
 800434e:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8004350:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <ST7789_WriteData+0x94>)
 8004352:	2200      	movs	r2, #0
 8004354:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8004356:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <ST7789_WriteData+0x98>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	89ba      	ldrh	r2, [r7, #12]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4618      	mov	r0, r3
 8004360:	f00b f8f6 	bl	800f550 <HAL_SPI_Transmit_DMA>
 8004364:	4603      	mov	r3, r0
 8004366:	461a      	mov	r2, r3
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	4313      	orrs	r3, r2
 800436c:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 800436e:	e002      	b.n	8004376 <ST7789_WriteData+0x4e>
 8004370:	2001      	movs	r0, #1
 8004372:	f006 f8c1 	bl	800a4f8 <HAL_Delay>
 8004376:	4b11      	ldr	r3, [pc, #68]	; (80043bc <ST7789_WriteData+0x94>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f083 0301 	eor.w	r3, r3, #1
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f4      	bne.n	8004370 <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8004386:	89bb      	ldrh	r3, [r7, #12]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4413      	add	r3, r2
 800438c:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800438e:	89bb      	ldrh	r3, [r7, #12]
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1d2      	bne.n	8004342 <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d006      	beq.n	80043b0 <ST7789_WriteData+0x88>
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <ST7789_WriteData+0x9c>)
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	f043 0310 	orr.w	r3, r3, #16
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <ST7789_WriteData+0x9c>)
 80043ae:	801a      	strh	r2, [r3, #0]
}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40020000 	.word	0x40020000
 80043bc:	20000069 	.word	0x20000069
 80043c0:	20000070 	.word	0x20000070
 80043c4:	20000594 	.word	0x20000594

080043c8 <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 80043d6:	2201      	movs	r2, #1
 80043d8:	2104      	movs	r1, #4
 80043da:	4815      	ldr	r0, [pc, #84]	; (8004430 <ST7789_WriteDataLine+0x68>)
 80043dc:	f006 ff3e 	bl	800b25c <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 80043e0:	4b14      	ldr	r3, [pc, #80]	; (8004434 <ST7789_WriteDataLine+0x6c>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 80043e6:	4b14      	ldr	r3, [pc, #80]	; (8004438 <ST7789_WriteDataLine+0x70>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	b292      	uxth	r2, r2
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f00b f8ad 	bl	800f550 <HAL_SPI_Transmit_DMA>
 80043f6:	4603      	mov	r3, r0
 80043f8:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 80043fa:	e002      	b.n	8004402 <ST7789_WriteDataLine+0x3a>
 80043fc:	2001      	movs	r0, #1
 80043fe:	f006 f87b 	bl	800a4f8 <HAL_Delay>
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <ST7789_WriteDataLine+0x6c>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f083 0301 	eor.w	r3, r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f4      	bne.n	80043fc <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d006      	beq.n	8004426 <ST7789_WriteDataLine+0x5e>
 8004418:	4b08      	ldr	r3, [pc, #32]	; (800443c <ST7789_WriteDataLine+0x74>)
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	f043 0310 	orr.w	r3, r3, #16
 8004420:	b29a      	uxth	r2, r3
 8004422:	4b06      	ldr	r3, [pc, #24]	; (800443c <ST7789_WriteDataLine+0x74>)
 8004424:	801a      	strh	r2, [r3, #0]
}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40020000 	.word	0x40020000
 8004434:	20000069 	.word	0x20000069
 8004438:	20000070 	.word	0x20000070
 800443c:	20000594 	.word	0x20000594

08004440 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 800444a:	2201      	movs	r2, #1
 800444c:	2104      	movs	r1, #4
 800444e:	480c      	ldr	r0, [pc, #48]	; (8004480 <ST7789_WriteSmallData+0x40>)
 8004450:	f006 ff04 	bl	800b25c <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <ST7789_WriteSmallData+0x44>)
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	2396      	movs	r3, #150	; 0x96
 800445a:	1df9      	adds	r1, r7, #7
 800445c:	2201      	movs	r2, #1
 800445e:	f00a ff3a 	bl	800f2d6 <HAL_SPI_Transmit>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d006      	beq.n	8004476 <ST7789_WriteSmallData+0x36>
 8004468:	4b07      	ldr	r3, [pc, #28]	; (8004488 <ST7789_WriteSmallData+0x48>)
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	f043 0310 	orr.w	r3, r3, #16
 8004470:	b29a      	uxth	r2, r3
 8004472:	4b05      	ldr	r3, [pc, #20]	; (8004488 <ST7789_WriteSmallData+0x48>)
 8004474:	801a      	strh	r2, [r3, #0]
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40020000 	.word	0x40020000
 8004484:	20000070 	.word	0x20000070
 8004488:	20000594 	.word	0x20000594

0800448c <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <ipsOn+0x18>
 800449c:	2029      	movs	r0, #41	; 0x29
 800449e:	f7ff fef3 	bl	8004288 <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 80044a2:	e002      	b.n	80044aa <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 80044a4:	2028      	movs	r0, #40	; 0x28
 80044a6:	f7ff feef 	bl	8004288 <ST7789_WriteCommand>
}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 80044be:	2036      	movs	r0, #54	; 0x36
 80044c0:	f7ff fee2 	bl	8004288 <ST7789_WriteCommand>
	switch (m) {
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d81a      	bhi.n	8004500 <ST7789_SetRotation+0x4c>
 80044ca:	a201      	add	r2, pc, #4	; (adr r2, 80044d0 <ST7789_SetRotation+0x1c>)
 80044cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d0:	080044e1 	.word	0x080044e1
 80044d4:	080044e9 	.word	0x080044e9
 80044d8:	080044f1 	.word	0x080044f1
 80044dc:	080044f9 	.word	0x080044f9
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80044e0:	20c0      	movs	r0, #192	; 0xc0
 80044e2:	f7ff ffad 	bl	8004440 <ST7789_WriteSmallData>
		break;
 80044e6:	e00c      	b.n	8004502 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80044e8:	20a0      	movs	r0, #160	; 0xa0
 80044ea:	f7ff ffa9 	bl	8004440 <ST7789_WriteSmallData>
		break;
 80044ee:	e008      	b.n	8004502 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80044f0:	2000      	movs	r0, #0
 80044f2:	f7ff ffa5 	bl	8004440 <ST7789_WriteSmallData>
		break;
 80044f6:	e004      	b.n	8004502 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80044f8:	2060      	movs	r0, #96	; 0x60
 80044fa:	f7ff ffa1 	bl	8004440 <ST7789_WriteSmallData>
		break;
 80044fe:	e000      	b.n	8004502 <ST7789_SetRotation+0x4e>
	default:
		break;
 8004500:	bf00      	nop
	}
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop

0800450c <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	4604      	mov	r4, r0
 8004514:	4608      	mov	r0, r1
 8004516:	4611      	mov	r1, r2
 8004518:	461a      	mov	r2, r3
 800451a:	4623      	mov	r3, r4
 800451c:	80fb      	strh	r3, [r7, #6]
 800451e:	4603      	mov	r3, r0
 8004520:	80bb      	strh	r3, [r7, #4]
 8004522:	460b      	mov	r3, r1
 8004524:	807b      	strh	r3, [r7, #2]
 8004526:	4613      	mov	r3, r2
 8004528:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	82fb      	strh	r3, [r7, #22]
 800452e:	887b      	ldrh	r3, [r7, #2]
 8004530:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8004532:	88bb      	ldrh	r3, [r7, #4]
 8004534:	827b      	strh	r3, [r7, #18]
 8004536:	883b      	ldrh	r3, [r7, #0]
 8004538:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 800453a:	202a      	movs	r0, #42	; 0x2a
 800453c:	f7ff fea4 	bl	8004288 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8004540:	8afb      	ldrh	r3, [r7, #22]
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	b29b      	uxth	r3, r3
 8004546:	b2db      	uxtb	r3, r3
 8004548:	733b      	strb	r3, [r7, #12]
 800454a:	8afb      	ldrh	r3, [r7, #22]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	737b      	strb	r3, [r7, #13]
 8004550:	8abb      	ldrh	r3, [r7, #20]
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	b29b      	uxth	r3, r3
 8004556:	b2db      	uxtb	r3, r3
 8004558:	73bb      	strb	r3, [r7, #14]
 800455a:	8abb      	ldrh	r3, [r7, #20]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8004560:	f107 030c 	add.w	r3, r7, #12
 8004564:	2104      	movs	r1, #4
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fede 	bl	8004328 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800456c:	202b      	movs	r0, #43	; 0x2b
 800456e:	f7ff fe8b 	bl	8004288 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8004572:	8a7b      	ldrh	r3, [r7, #18]
 8004574:	0a1b      	lsrs	r3, r3, #8
 8004576:	b29b      	uxth	r3, r3
 8004578:	b2db      	uxtb	r3, r3
 800457a:	723b      	strb	r3, [r7, #8]
 800457c:	8a7b      	ldrh	r3, [r7, #18]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	727b      	strb	r3, [r7, #9]
 8004582:	8a3b      	ldrh	r3, [r7, #16]
 8004584:	0a1b      	lsrs	r3, r3, #8
 8004586:	b29b      	uxth	r3, r3
 8004588:	b2db      	uxtb	r3, r3
 800458a:	72bb      	strb	r3, [r7, #10]
 800458c:	8a3b      	ldrh	r3, [r7, #16]
 800458e:	b2db      	uxtb	r3, r3
 8004590:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8004592:	f107 0308 	add.w	r3, r7, #8
 8004596:	2104      	movs	r1, #4
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fec5 	bl	8004328 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 800459e:	202c      	movs	r0, #44	; 0x2c
 80045a0:	f7ff fe72 	bl	8004288 <ST7789_WriteCommand>
}
 80045a4:	bf00      	nop
 80045a6:	371c      	adds	r7, #28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd90      	pop	{r4, r7, pc}

080045ac <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 80045b0:	2014      	movs	r0, #20
 80045b2:	f005 ffa1 	bl	800a4f8 <HAL_Delay>
    ST7789_RST_Clr();
 80045b6:	2200      	movs	r2, #0
 80045b8:	2102      	movs	r1, #2
 80045ba:	4808      	ldr	r0, [pc, #32]	; (80045dc <ST7789_Reset+0x30>)
 80045bc:	f006 fe4e 	bl	800b25c <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 80045c0:	200a      	movs	r0, #10
 80045c2:	f005 ff99 	bl	800a4f8 <HAL_Delay>
    ST7789_RST_Set();
 80045c6:	2201      	movs	r2, #1
 80045c8:	2102      	movs	r1, #2
 80045ca:	4804      	ldr	r0, [pc, #16]	; (80045dc <ST7789_Reset+0x30>)
 80045cc:	f006 fe46 	bl	800b25c <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 80045d0:	2014      	movs	r0, #20
 80045d2:	f005 ff91 	bl	800a4f8 <HAL_Delay>
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40020000 	.word	0x40020000

080045e0 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 80045e0:	b590      	push	{r4, r7, lr}
 80045e2:	b08f      	sub	sp, #60	; 0x3c
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80045ea:	203a      	movs	r0, #58	; 0x3a
 80045ec:	f7ff fe4c 	bl	8004288 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 80045f0:	2055      	movs	r0, #85	; 0x55
 80045f2:	f7ff ff25 	bl	8004440 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80045f6:	20b2      	movs	r0, #178	; 0xb2
 80045f8:	f7ff fe46 	bl	8004288 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80045fc:	4a3a      	ldr	r2, [pc, #232]	; (80046e8 <ST7789_Init+0x108>)
 80045fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004602:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004606:	6018      	str	r0, [r3, #0]
 8004608:	3304      	adds	r3, #4
 800460a:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800460c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004610:	2105      	movs	r1, #5
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fe88 	bl	8004328 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8004618:	2003      	movs	r0, #3
 800461a:	f7ff ff4b 	bl	80044b4 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 800461e:	20b7      	movs	r0, #183	; 0xb7
 8004620:	f7ff fe32 	bl	8004288 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8004624:	2035      	movs	r0, #53	; 0x35
 8004626:	f7ff ff0b 	bl	8004440 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 800462a:	20bb      	movs	r0, #187	; 0xbb
 800462c:	f7ff fe2c 	bl	8004288 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8004630:	2019      	movs	r0, #25
 8004632:	f7ff ff05 	bl	8004440 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8004636:	20c0      	movs	r0, #192	; 0xc0
 8004638:	f7ff fe26 	bl	8004288 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 800463c:	202c      	movs	r0, #44	; 0x2c
 800463e:	f7ff feff 	bl	8004440 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8004642:	20c2      	movs	r0, #194	; 0xc2
 8004644:	f7ff fe20 	bl	8004288 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8004648:	2001      	movs	r0, #1
 800464a:	f7ff fef9 	bl	8004440 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 800464e:	20ff      	movs	r0, #255	; 0xff
 8004650:	f7ff fef6 	bl	8004440 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 8004654:	20c3      	movs	r0, #195	; 0xc3
 8004656:	f7ff fe17 	bl	8004288 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800465a:	2012      	movs	r0, #18
 800465c:	f7ff fef0 	bl	8004440 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8004660:	20c4      	movs	r0, #196	; 0xc4
 8004662:	f7ff fe11 	bl	8004288 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 8004666:	2020      	movs	r0, #32
 8004668:	f7ff feea 	bl	8004440 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 800466c:	20c6      	movs	r0, #198	; 0xc6
 800466e:	f7ff fe0b 	bl	8004288 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 8004672:	200f      	movs	r0, #15
 8004674:	f7ff fee4 	bl	8004440 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8004678:	20d0      	movs	r0, #208	; 0xd0
 800467a:	f7ff fe05 	bl	8004288 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 800467e:	20a4      	movs	r0, #164	; 0xa4
 8004680:	f7ff fede 	bl	8004440 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 8004684:	20a1      	movs	r0, #161	; 0xa1
 8004686:	f7ff fedb 	bl	8004440 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800468a:	20e0      	movs	r0, #224	; 0xe0
 800468c:	f7ff fdfc 	bl	8004288 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8004690:	4b16      	ldr	r3, [pc, #88]	; (80046ec <ST7789_Init+0x10c>)
 8004692:	f107 041c 	add.w	r4, r7, #28
 8004696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004698:	c407      	stmia	r4!, {r0, r1, r2}
 800469a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800469c:	f107 031c 	add.w	r3, r7, #28
 80046a0:	210e      	movs	r1, #14
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff fe40 	bl	8004328 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 80046a8:	20e1      	movs	r0, #225	; 0xe1
 80046aa:	f7ff fded 	bl	8004288 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80046ae:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <ST7789_Init+0x110>)
 80046b0:	f107 040c 	add.w	r4, r7, #12
 80046b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046b6:	c407      	stmia	r4!, {r0, r1, r2}
 80046b8:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80046ba:	f107 030c 	add.w	r3, r7, #12
 80046be:	210e      	movs	r1, #14
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fe31 	bl	8004328 <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <ST7789_Init+0x114>)
 80046c8:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 80046ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046ce:	2104      	movs	r1, #4
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fdff 	bl	80042d4 <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 80046d6:	88fb      	ldrh	r3, [r7, #6]
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 f80d 	bl	80046f8 <ST7789_Fill_Color>
}
 80046de:	bf00      	nop
 80046e0:	373c      	adds	r7, #60	; 0x3c
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd90      	pop	{r4, r7, pc}
 80046e6:	bf00      	nop
 80046e8:	08016b70 	.word	0x08016b70
 80046ec:	08016b78 	.word	0x08016b78
 80046f0:	08016b88 	.word	0x08016b88
 80046f4:	28131121 	.word	0x28131121

080046f8 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b0fc      	sub	sp, #496	; 0x1f0
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4602      	mov	r2, r0
 8004700:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004704:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8004708:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800470a:	23ef      	movs	r3, #239	; 0xef
 800470c:	22ef      	movs	r2, #239	; 0xef
 800470e:	2100      	movs	r1, #0
 8004710:	2000      	movs	r0, #0
 8004712:	f7ff fefb 	bl	800450c <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 8004716:	2300      	movs	r3, #0
 8004718:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 800471c:	2300      	movs	r3, #0
 800471e:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004722:	e024      	b.n	800476e <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 8004724:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004728:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	0a1b      	lsrs	r3, r3, #8
 8004730:	b29b      	uxth	r3, r3
 8004732:	b21a      	sxth	r2, r3
 8004734:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004738:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	b21b      	sxth	r3, r3
 8004742:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004746:	b21b      	sxth	r3, r3
 8004748:	4313      	orrs	r3, r2
 800474a:	b219      	sxth	r1, r3
 800474c:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8004750:	f107 020c 	add.w	r2, r7, #12
 8004754:	4413      	add	r3, r2
 8004756:	b28a      	uxth	r2, r1
 8004758:	801a      	strh	r2, [r3, #0]
		i += 2;
 800475a:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 800475e:	3302      	adds	r3, #2
 8004760:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8004764:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004768:	3301      	adds	r3, #1
 800476a:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 800476e:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004772:	2bef      	cmp	r3, #239	; 0xef
 8004774:	d9d6      	bls.n	8004724 <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 8004776:	2300      	movs	r3, #0
 8004778:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 800477c:	e00b      	b.n	8004796 <ST7789_Fill_Color+0x9e>
 800477e:	f107 030c 	add.w	r3, r7, #12
 8004782:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fe1e 	bl	80043c8 <ST7789_WriteDataLine>
 800478c:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004790:	3301      	adds	r3, #1
 8004792:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004796:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 800479a:	2bef      	cmp	r3, #239	; 0xef
 800479c:	d9ef      	bls.n	800477e <ST7789_Fill_Color+0x86>

//#endif
}
 800479e:	bf00      	nop
 80047a0:	bf00      	nop
 80047a2:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 80047aa:	b590      	push	{r4, r7, lr}
 80047ac:	b085      	sub	sp, #20
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	4604      	mov	r4, r0
 80047b2:	4608      	mov	r0, r1
 80047b4:	4611      	mov	r1, r2
 80047b6:	461a      	mov	r2, r3
 80047b8:	4623      	mov	r3, r4
 80047ba:	80fb      	strh	r3, [r7, #6]
 80047bc:	4603      	mov	r3, r0
 80047be:	80bb      	strh	r3, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	807b      	strh	r3, [r7, #2]
 80047c4:	4613      	mov	r3, r2
 80047c6:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 80047c8:	887b      	ldrh	r3, [r7, #2]
 80047ca:	2bef      	cmp	r3, #239	; 0xef
 80047cc:	d82b      	bhi.n	8004826 <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 80047ce:	883b      	ldrh	r3, [r7, #0]
 80047d0:	2bef      	cmp	r3, #239	; 0xef
 80047d2:	d828      	bhi.n	8004826 <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 80047d4:	8c3b      	ldrh	r3, [r7, #32]
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	b29b      	uxth	r3, r3
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	723b      	strb	r3, [r7, #8]
 80047de:	8c3b      	ldrh	r3, [r7, #32]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80047e4:	883b      	ldrh	r3, [r7, #0]
 80047e6:	887a      	ldrh	r2, [r7, #2]
 80047e8:	88b9      	ldrh	r1, [r7, #4]
 80047ea:	88f8      	ldrh	r0, [r7, #6]
 80047ec:	f7ff fe8e 	bl	800450c <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 80047f0:	88bb      	ldrh	r3, [r7, #4]
 80047f2:	81fb      	strh	r3, [r7, #14]
 80047f4:	e012      	b.n	800481c <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	81bb      	strh	r3, [r7, #12]
 80047fa:	e008      	b.n	800480e <ST7789_Fill+0x64>
 80047fc:	f107 0308 	add.w	r3, r7, #8
 8004800:	2102      	movs	r1, #2
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff fd90 	bl	8004328 <ST7789_WriteData>
 8004808:	89bb      	ldrh	r3, [r7, #12]
 800480a:	3301      	adds	r3, #1
 800480c:	81bb      	strh	r3, [r7, #12]
 800480e:	89ba      	ldrh	r2, [r7, #12]
 8004810:	887b      	ldrh	r3, [r7, #2]
 8004812:	429a      	cmp	r2, r3
 8004814:	d9f2      	bls.n	80047fc <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 8004816:	89fb      	ldrh	r3, [r7, #14]
 8004818:	3301      	adds	r3, #1
 800481a:	81fb      	strh	r3, [r7, #14]
 800481c:	89fa      	ldrh	r2, [r7, #14]
 800481e:	883b      	ldrh	r3, [r7, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d9e8      	bls.n	80047f6 <ST7789_Fill+0x4c>
 8004824:	e000      	b.n	8004828 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8004826:	bf00      	nop
	}
}
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	bd90      	pop	{r4, r7, pc}

0800482e <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800482e:	b082      	sub	sp, #8
 8004830:	b590      	push	{r4, r7, lr}
 8004832:	b089      	sub	sp, #36	; 0x24
 8004834:	af00      	add	r7, sp, #0
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
 8004838:	4603      	mov	r3, r0
 800483a:	80fb      	strh	r3, [r7, #6]
 800483c:	460b      	mov	r3, r1
 800483e:	80bb      	strh	r3, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8004844:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004848:	b29a      	uxth	r2, r3
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	4413      	add	r3, r2
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b01      	subs	r3, #1
 8004852:	b29c      	uxth	r4, r3
 8004854:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004858:	b29a      	uxth	r2, r3
 800485a:	88bb      	ldrh	r3, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29b      	uxth	r3, r3
 8004864:	88b9      	ldrh	r1, [r7, #4]
 8004866:	88f8      	ldrh	r0, [r7, #6]
 8004868:	4622      	mov	r2, r4
 800486a:	f7ff fe4f 	bl	800450c <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 800486e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004870:	0a1b      	lsrs	r3, r3, #8
 8004872:	b29b      	uxth	r3, r3
 8004874:	b2db      	uxtb	r3, r3
 8004876:	733b      	strb	r3, [r7, #12]
 8004878:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800487a:	b2db      	uxtb	r3, r3
 800487c:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 800487e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	b29b      	uxth	r3, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	723b      	strb	r3, [r7, #8]
 800488a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800488e:	b2db      	uxtb	r3, r3
 8004890:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
 800489a:	e02f      	b.n	80048fc <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 800489c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800489e:	78fb      	ldrb	r3, [r7, #3]
 80048a0:	3b20      	subs	r3, #32
 80048a2:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80048a6:	fb01 f303 	mul.w	r3, r1, r3
 80048aa:	4619      	mov	r1, r3
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	440b      	add	r3, r1
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4413      	add	r3, r2
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 80048b8:	2300      	movs	r3, #0
 80048ba:	61bb      	str	r3, [r7, #24]
 80048bc:	e015      	b.n	80048ea <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <ST7789_WriteChar+0xa8>
				uk = cdata;
 80048ce:	f107 030c 	add.w	r3, r7, #12
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	e002      	b.n	80048dc <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 80048d6:	f107 0308 	add.w	r3, r7, #8
 80048da:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 80048dc:	2102      	movs	r1, #2
 80048de:	6978      	ldr	r0, [r7, #20]
 80048e0:	f7ff fd22 	bl	8004328 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	3301      	adds	r3, #1
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048ee:	461a      	mov	r2, r3
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d3e3      	bcc.n	80048be <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3301      	adds	r3, #1
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004900:	461a      	mov	r2, r3
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	4293      	cmp	r3, r2
 8004906:	d3c9      	bcc.n	800489c <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 8004908:	bf00      	nop
 800490a:	bf00      	nop
 800490c:	3724      	adds	r7, #36	; 0x24
 800490e:	46bd      	mov	sp, r7
 8004910:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004914:	b002      	add	sp, #8
 8004916:	4770      	bx	lr

08004918 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8004918:	b082      	sub	sp, #8
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af04      	add	r7, sp, #16
 8004920:	603a      	str	r2, [r7, #0]
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	4603      	mov	r3, r0
 8004926:	80fb      	strh	r3, [r7, #6]
 8004928:	460b      	mov	r3, r1
 800492a:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d03f      	beq.n	80049b2 <ST7789_WriteString+0x9a>

	while (*str) {
 8004932:	e039      	b.n	80049a8 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	7d3a      	ldrb	r2, [r7, #20]
 8004938:	4413      	add	r3, r2
 800493a:	2bef      	cmp	r3, #239	; 0xef
 800493c:	dd13      	ble.n	8004966 <ST7789_WriteString+0x4e>
			x = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8004942:	7d7b      	ldrb	r3, [r7, #21]
 8004944:	b29a      	uxth	r2, r3
 8004946:	88bb      	ldrh	r3, [r7, #4]
 8004948:	4413      	add	r3, r2
 800494a:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 800494c:	88bb      	ldrh	r3, [r7, #4]
 800494e:	7d7a      	ldrb	r2, [r7, #21]
 8004950:	4413      	add	r3, r2
 8004952:	2bef      	cmp	r3, #239	; 0xef
 8004954:	dc2f      	bgt.n	80049b6 <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b20      	cmp	r3, #32
 800495c:	d103      	bne.n	8004966 <ST7789_WriteString+0x4e>
				str++;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	3301      	adds	r3, #1
 8004962:	603b      	str	r3, [r7, #0]
				continue;
 8004964:	e020      	b.n	80049a8 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b0a      	cmp	r3, #10
 800496c:	d012      	beq.n	8004994 <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781a      	ldrb	r2, [r3, #0]
 8004972:	88b9      	ldrh	r1, [r7, #4]
 8004974:	88f8      	ldrh	r0, [r7, #6]
 8004976:	8c3b      	ldrh	r3, [r7, #32]
 8004978:	9302      	str	r3, [sp, #8]
 800497a:	8bbb      	ldrh	r3, [r7, #28]
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f7ff ff53 	bl	800482e <ST7789_WriteChar>
			x += font.width;
 8004988:	7d3b      	ldrb	r3, [r7, #20]
 800498a:	b29a      	uxth	r2, r3
 800498c:	88fb      	ldrh	r3, [r7, #6]
 800498e:	4413      	add	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
 8004992:	e006      	b.n	80049a2 <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8004998:	7d7b      	ldrb	r3, [r7, #21]
 800499a:	b29a      	uxth	r2, r3
 800499c:	88bb      	ldrh	r3, [r7, #4]
 800499e:	4413      	add	r3, r2
 80049a0:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	3301      	adds	r3, #1
 80049a6:	603b      	str	r3, [r7, #0]
	while (*str) {
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1c1      	bne.n	8004934 <ST7789_WriteString+0x1c>
 80049b0:	e002      	b.n	80049b8 <ST7789_WriteString+0xa0>
	if (!str) return;
 80049b2:	bf00      	nop
 80049b4:	e000      	b.n	80049b8 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 80049b6:	bf00      	nop
	}
}
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049c0:	b002      	add	sp, #8
 80049c2:	4770      	bx	lr

080049c4 <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b0a4      	sub	sp, #144	; 0x90
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	f107 0310 	add.w	r3, r7, #16
 80049d8:	227c      	movs	r2, #124	; 0x7c
 80049da:	2100      	movs	r1, #0
 80049dc:	4618      	mov	r0, r3
 80049de:	f010 fa3b 	bl	8014e58 <memset>

	memset(st, 0x20, 127);
 80049e2:	f107 030c 	add.w	r3, r7, #12
 80049e6:	227f      	movs	r2, #127	; 0x7f
 80049e8:	2120      	movs	r1, #32
 80049ea:	4618      	mov	r0, r3
 80049ec:	f010 fa34 	bl	8014e58 <memset>
	int8_t k = strlen(str);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7fb fbed 	bl	80001d0 <strlen>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 80049fc:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004a00:	887b      	ldrh	r3, [r7, #2]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	da25      	bge.n	8004a52 <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 8004a06:	887a      	ldrh	r2, [r7, #2]
 8004a08:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	0fda      	lsrs	r2, r3, #31
 8004a10:	4413      	add	r3, r2
 8004a12:	105b      	asrs	r3, r3, #1
 8004a14:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 8004a18:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8004a1c:	f107 020c 	add.w	r2, r7, #12
 8004a20:	4413      	add	r3, r2
 8004a22:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f010 fa07 	bl	8014e3c <memcpy>
		st[k + n*2 + 1] = '\0';
 8004a2e:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004a32:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	4413      	add	r3, r2
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	3390      	adds	r3, #144	; 0x90
 8004a3e:	443b      	add	r3, r7
 8004a40:	2200      	movs	r2, #0
 8004a42:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 8004a46:	f107 030c 	add.w	r3, r7, #12
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f010 feea 	bl	8015826 <strcpy>
	}

	return str;
 8004a52:	687b      	ldr	r3, [r7, #4]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3790      	adds	r7, #144	; 0x90
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a62:	2300      	movs	r3, #0
 8004a64:	607b      	str	r3, [r7, #4]
 8004a66:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <HAL_MspInit+0x74>)
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <HAL_MspInit+0x74>)
 8004a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a70:	6453      	str	r3, [r2, #68]	; 0x44
 8004a72:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <HAL_MspInit+0x74>)
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a7a:	607b      	str	r3, [r7, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a7e:	2300      	movs	r3, #0
 8004a80:	603b      	str	r3, [r7, #0]
 8004a82:	4b13      	ldr	r3, [pc, #76]	; (8004ad0 <HAL_MspInit+0x74>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	4a12      	ldr	r2, [pc, #72]	; (8004ad0 <HAL_MspInit+0x74>)
 8004a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a8e:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <HAL_MspInit+0x74>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	210f      	movs	r1, #15
 8004a9e:	f06f 0001 	mvn.w	r0, #1
 8004aa2:	f005 fe05 	bl	800a6b0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2105      	movs	r1, #5
 8004aaa:	2005      	movs	r0, #5
 8004aac:	f005 fe00 	bl	800a6b0 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004ab0:	2005      	movs	r0, #5
 8004ab2:	f005 fe19 	bl	800a6e8 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2105      	movs	r1, #5
 8004aba:	2005      	movs	r0, #5
 8004abc:	f005 fdf8 	bl	800a6b0 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004ac0:	2005      	movs	r0, #5
 8004ac2:	f005 fe11 	bl	800a6e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800

08004ad4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08a      	sub	sp, #40	; 0x28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004adc:	f107 0314 	add.w	r3, r7, #20
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	605a      	str	r2, [r3, #4]
 8004ae6:	609a      	str	r2, [r3, #8]
 8004ae8:	60da      	str	r2, [r3, #12]
 8004aea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a59      	ldr	r2, [pc, #356]	; (8004c58 <HAL_I2C_MspInit+0x184>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	f040 80ab 	bne.w	8004c4e <HAL_I2C_MspInit+0x17a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004af8:	2300      	movs	r3, #0
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	4b57      	ldr	r3, [pc, #348]	; (8004c5c <HAL_I2C_MspInit+0x188>)
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	4a56      	ldr	r2, [pc, #344]	; (8004c5c <HAL_I2C_MspInit+0x188>)
 8004b02:	f043 0302 	orr.w	r3, r3, #2
 8004b06:	6313      	str	r3, [r2, #48]	; 0x30
 8004b08:	4b54      	ldr	r3, [pc, #336]	; (8004c5c <HAL_I2C_MspInit+0x188>)
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004b14:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b1a:	2312      	movs	r3, #18
 8004b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b22:	2303      	movs	r3, #3
 8004b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b26:	2304      	movs	r3, #4
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b2a:	f107 0314 	add.w	r3, r7, #20
 8004b2e:	4619      	mov	r1, r3
 8004b30:	484b      	ldr	r0, [pc, #300]	; (8004c60 <HAL_I2C_MspInit+0x18c>)
 8004b32:	f006 f9f7 	bl	800af24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	4b48      	ldr	r3, [pc, #288]	; (8004c5c <HAL_I2C_MspInit+0x188>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	4a47      	ldr	r2, [pc, #284]	; (8004c5c <HAL_I2C_MspInit+0x188>)
 8004b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b44:	6413      	str	r3, [r2, #64]	; 0x40
 8004b46:	4b45      	ldr	r3, [pc, #276]	; (8004c5c <HAL_I2C_MspInit+0x188>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004b52:	4b44      	ldr	r3, [pc, #272]	; (8004c64 <HAL_I2C_MspInit+0x190>)
 8004b54:	4a44      	ldr	r2, [pc, #272]	; (8004c68 <HAL_I2C_MspInit+0x194>)
 8004b56:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004b58:	4b42      	ldr	r3, [pc, #264]	; (8004c64 <HAL_I2C_MspInit+0x190>)
 8004b5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b5e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b60:	4b40      	ldr	r3, [pc, #256]	; (8004c64 <HAL_I2C_MspInit+0x190>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b66:	4b3f      	ldr	r3, [pc, #252]	; (8004c64 <HAL_I2C_MspInit+0x190>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b6c:	4b3d      	ldr	r3, [pc, #244]	; (8004c64 <HAL_I2C_MspInit+0x190>)
 8004b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b72:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b74:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <HAL_I2C_MspInit+0x190>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b7a:	4b3a      	ldr	r3, [pc, #232]	; (8004c64 <HAL_I2C_MspInit+0x190>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004b80:	4b38      	ldr	r3, [pc, #224]	; (8004c64 <HAL_I2C_MspInit+0x190>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b86:	4b37      	ldr	r3, [pc, #220]	; (8004c64 <HAL_I2C_MspInit+0x190>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004b8c:	4b35      	ldr	r3, [pc, #212]	; (8004c64 <HAL_I2C_MspInit+0x190>)
 8004b8e:	2204      	movs	r2, #4
 8004b90:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004b92:	4b34      	ldr	r3, [pc, #208]	; (8004c64 <HAL_I2C_MspInit+0x190>)
 8004b94:	2203      	movs	r2, #3
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004b98:	4b32      	ldr	r3, [pc, #200]	; (8004c64 <HAL_I2C_MspInit+0x190>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004b9e:	4b31      	ldr	r3, [pc, #196]	; (8004c64 <HAL_I2C_MspInit+0x190>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004ba4:	482f      	ldr	r0, [pc, #188]	; (8004c64 <HAL_I2C_MspInit+0x190>)
 8004ba6:	f005 fdad 	bl	800a704 <HAL_DMA_Init>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <HAL_I2C_MspInit+0xe0>
    {
      Error_Handler();
 8004bb0:	f7ff fb5a 	bl	8004268 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a2b      	ldr	r2, [pc, #172]	; (8004c64 <HAL_I2C_MspInit+0x190>)
 8004bb8:	639a      	str	r2, [r3, #56]	; 0x38
 8004bba:	4a2a      	ldr	r2, [pc, #168]	; (8004c64 <HAL_I2C_MspInit+0x190>)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8004bc0:	4b2a      	ldr	r3, [pc, #168]	; (8004c6c <HAL_I2C_MspInit+0x198>)
 8004bc2:	4a2b      	ldr	r2, [pc, #172]	; (8004c70 <HAL_I2C_MspInit+0x19c>)
 8004bc4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004bc6:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <HAL_I2C_MspInit+0x198>)
 8004bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bcc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bce:	4b27      	ldr	r3, [pc, #156]	; (8004c6c <HAL_I2C_MspInit+0x198>)
 8004bd0:	2240      	movs	r2, #64	; 0x40
 8004bd2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bd4:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <HAL_I2C_MspInit+0x198>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bda:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <HAL_I2C_MspInit+0x198>)
 8004bdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004be0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004be2:	4b22      	ldr	r3, [pc, #136]	; (8004c6c <HAL_I2C_MspInit+0x198>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004be8:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <HAL_I2C_MspInit+0x198>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004bee:	4b1f      	ldr	r3, [pc, #124]	; (8004c6c <HAL_I2C_MspInit+0x198>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004bf4:	4b1d      	ldr	r3, [pc, #116]	; (8004c6c <HAL_I2C_MspInit+0x198>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004bfa:	4b1c      	ldr	r3, [pc, #112]	; (8004c6c <HAL_I2C_MspInit+0x198>)
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004c00:	4b1a      	ldr	r3, [pc, #104]	; (8004c6c <HAL_I2C_MspInit+0x198>)
 8004c02:	2203      	movs	r2, #3
 8004c04:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004c06:	4b19      	ldr	r3, [pc, #100]	; (8004c6c <HAL_I2C_MspInit+0x198>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004c0c:	4b17      	ldr	r3, [pc, #92]	; (8004c6c <HAL_I2C_MspInit+0x198>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004c12:	4816      	ldr	r0, [pc, #88]	; (8004c6c <HAL_I2C_MspInit+0x198>)
 8004c14:	f005 fd76 	bl	800a704 <HAL_DMA_Init>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_I2C_MspInit+0x14e>
    {
      Error_Handler();
 8004c1e:	f7ff fb23 	bl	8004268 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a11      	ldr	r2, [pc, #68]	; (8004c6c <HAL_I2C_MspInit+0x198>)
 8004c26:	635a      	str	r2, [r3, #52]	; 0x34
 8004c28:	4a10      	ldr	r2, [pc, #64]	; (8004c6c <HAL_I2C_MspInit+0x198>)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2105      	movs	r1, #5
 8004c32:	201f      	movs	r0, #31
 8004c34:	f005 fd3c 	bl	800a6b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004c38:	201f      	movs	r0, #31
 8004c3a:	f005 fd55 	bl	800a6e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2105      	movs	r1, #5
 8004c42:	2020      	movs	r0, #32
 8004c44:	f005 fd34 	bl	800a6b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004c48:	2020      	movs	r0, #32
 8004c4a:	f005 fd4d 	bl	800a6e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c4e:	bf00      	nop
 8004c50:	3728      	adds	r7, #40	; 0x28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40005400 	.word	0x40005400
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	40020400 	.word	0x40020400
 8004c64:	200002c4 	.word	0x200002c4
 8004c68:	40026010 	.word	0x40026010
 8004c6c:	20000324 	.word	0x20000324
 8004c70:	400260a0 	.word	0x400260a0

08004c74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c7c:	f107 0308 	add.w	r3, r7, #8
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	609a      	str	r2, [r3, #8]
 8004c88:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a0c      	ldr	r2, [pc, #48]	; (8004cc0 <HAL_RTC_MspInit+0x4c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d110      	bne.n	8004cb6 <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004c94:	2302      	movs	r3, #2
 8004c96:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <HAL_RTC_MspInit+0x50>)
 8004c9a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c9c:	f107 0308 	add.w	r3, r7, #8
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f009 feaf 	bl	800ea04 <HAL_RCCEx_PeriphCLKConfig>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8004cac:	f7ff fadc 	bl	8004268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004cb0:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <HAL_RTC_MspInit+0x54>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004cb6:	bf00      	nop
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40002800 	.word	0x40002800
 8004cc4:	00190300 	.word	0x00190300
 8004cc8:	42470e3c 	.word	0x42470e3c

08004ccc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd4:	f107 0314 	add.w	r3, r7, #20
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	605a      	str	r2, [r3, #4]
 8004cde:	609a      	str	r2, [r3, #8]
 8004ce0:	60da      	str	r2, [r3, #12]
 8004ce2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a39      	ldr	r2, [pc, #228]	; (8004dd0 <HAL_SPI_MspInit+0x104>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d16b      	bne.n	8004dc6 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004cee:	2300      	movs	r3, #0
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	4b38      	ldr	r3, [pc, #224]	; (8004dd4 <HAL_SPI_MspInit+0x108>)
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	4a37      	ldr	r2, [pc, #220]	; (8004dd4 <HAL_SPI_MspInit+0x108>)
 8004cf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8004cfe:	4b35      	ldr	r3, [pc, #212]	; (8004dd4 <HAL_SPI_MspInit+0x108>)
 8004d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <HAL_SPI_MspInit+0x108>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	4a30      	ldr	r2, [pc, #192]	; (8004dd4 <HAL_SPI_MspInit+0x108>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	6313      	str	r3, [r2, #48]	; 0x30
 8004d1a:	4b2e      	ldr	r3, [pc, #184]	; (8004dd4 <HAL_SPI_MspInit+0x108>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 8004d26:	23a0      	movs	r3, #160	; 0xa0
 8004d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d32:	2303      	movs	r3, #3
 8004d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d36:	2305      	movs	r3, #5
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d3a:	f107 0314 	add.w	r3, r7, #20
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4825      	ldr	r0, [pc, #148]	; (8004dd8 <HAL_SPI_MspInit+0x10c>)
 8004d42:	f006 f8ef 	bl	800af24 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8004d46:	4b25      	ldr	r3, [pc, #148]	; (8004ddc <HAL_SPI_MspInit+0x110>)
 8004d48:	4a25      	ldr	r2, [pc, #148]	; (8004de0 <HAL_SPI_MspInit+0x114>)
 8004d4a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004d4c:	4b23      	ldr	r3, [pc, #140]	; (8004ddc <HAL_SPI_MspInit+0x110>)
 8004d4e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004d52:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d54:	4b21      	ldr	r3, [pc, #132]	; (8004ddc <HAL_SPI_MspInit+0x110>)
 8004d56:	2240      	movs	r2, #64	; 0x40
 8004d58:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d5a:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <HAL_SPI_MspInit+0x110>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d60:	4b1e      	ldr	r3, [pc, #120]	; (8004ddc <HAL_SPI_MspInit+0x110>)
 8004d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d66:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d68:	4b1c      	ldr	r3, [pc, #112]	; (8004ddc <HAL_SPI_MspInit+0x110>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d6e:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <HAL_SPI_MspInit+0x110>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004d74:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <HAL_SPI_MspInit+0x110>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004d7a:	4b18      	ldr	r3, [pc, #96]	; (8004ddc <HAL_SPI_MspInit+0x110>)
 8004d7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d80:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004d82:	4b16      	ldr	r3, [pc, #88]	; (8004ddc <HAL_SPI_MspInit+0x110>)
 8004d84:	2204      	movs	r2, #4
 8004d86:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004d88:	4b14      	ldr	r3, [pc, #80]	; (8004ddc <HAL_SPI_MspInit+0x110>)
 8004d8a:	2203      	movs	r2, #3
 8004d8c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004d8e:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <HAL_SPI_MspInit+0x110>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004d94:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <HAL_SPI_MspInit+0x110>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004d9a:	4810      	ldr	r0, [pc, #64]	; (8004ddc <HAL_SPI_MspInit+0x110>)
 8004d9c:	f005 fcb2 	bl	800a704 <HAL_DMA_Init>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8004da6:	f7ff fa5f 	bl	8004268 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a0b      	ldr	r2, [pc, #44]	; (8004ddc <HAL_SPI_MspInit+0x110>)
 8004dae:	649a      	str	r2, [r3, #72]	; 0x48
 8004db0:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <HAL_SPI_MspInit+0x110>)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8004db6:	2200      	movs	r2, #0
 8004db8:	2102      	movs	r1, #2
 8004dba:	2023      	movs	r0, #35	; 0x23
 8004dbc:	f005 fc78 	bl	800a6b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004dc0:	2023      	movs	r0, #35	; 0x23
 8004dc2:	f005 fc91 	bl	800a6e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004dc6:	bf00      	nop
 8004dc8:	3728      	adds	r7, #40	; 0x28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40013000 	.word	0x40013000
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	40020000 	.word	0x40020000
 8004ddc:	200003fc 	.word	0x200003fc
 8004de0:	40026458 	.word	0x40026458

08004de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df4:	d115      	bne.n	8004e22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004df6:	2300      	movs	r3, #0
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <HAL_TIM_Base_MspInit+0x48>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	4a0b      	ldr	r2, [pc, #44]	; (8004e2c <HAL_TIM_Base_MspInit+0x48>)
 8004e00:	f043 0301 	orr.w	r3, r3, #1
 8004e04:	6413      	str	r3, [r2, #64]	; 0x40
 8004e06:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <HAL_TIM_Base_MspInit+0x48>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004e12:	2200      	movs	r2, #0
 8004e14:	2101      	movs	r1, #1
 8004e16:	201c      	movs	r0, #28
 8004e18:	f005 fc4a 	bl	800a6b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e1c:	201c      	movs	r0, #28
 8004e1e:	f005 fc63 	bl	800a6e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004e22:	bf00      	nop
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40023800 	.word	0x40023800

08004e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	; 0x28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	609a      	str	r2, [r3, #8]
 8004e44:	60da      	str	r2, [r3, #12]
 8004e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a35      	ldr	r2, [pc, #212]	; (8004f24 <HAL_UART_MspInit+0xf4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d163      	bne.n	8004f1a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	4b34      	ldr	r3, [pc, #208]	; (8004f28 <HAL_UART_MspInit+0xf8>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	4a33      	ldr	r2, [pc, #204]	; (8004f28 <HAL_UART_MspInit+0xf8>)
 8004e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e60:	6413      	str	r3, [r2, #64]	; 0x40
 8004e62:	4b31      	ldr	r3, [pc, #196]	; (8004f28 <HAL_UART_MspInit+0xf8>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e6a:	613b      	str	r3, [r7, #16]
 8004e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	4b2d      	ldr	r3, [pc, #180]	; (8004f28 <HAL_UART_MspInit+0xf8>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	4a2c      	ldr	r2, [pc, #176]	; (8004f28 <HAL_UART_MspInit+0xf8>)
 8004e78:	f043 0302 	orr.w	r3, r3, #2
 8004e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e7e:	4b2a      	ldr	r3, [pc, #168]	; (8004f28 <HAL_UART_MspInit+0xf8>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 8004e8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e90:	2302      	movs	r3, #2
 8004e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004e9c:	2307      	movs	r3, #7
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ea0:	f107 0314 	add.w	r3, r7, #20
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4821      	ldr	r0, [pc, #132]	; (8004f2c <HAL_UART_MspInit+0xfc>)
 8004ea8:	f006 f83c 	bl	800af24 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004eac:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <HAL_UART_MspInit+0x100>)
 8004eae:	4a21      	ldr	r2, [pc, #132]	; (8004f34 <HAL_UART_MspInit+0x104>)
 8004eb0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004eb2:	4b1f      	ldr	r3, [pc, #124]	; (8004f30 <HAL_UART_MspInit+0x100>)
 8004eb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004eb8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004eba:	4b1d      	ldr	r3, [pc, #116]	; (8004f30 <HAL_UART_MspInit+0x100>)
 8004ebc:	2240      	movs	r2, #64	; 0x40
 8004ebe:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <HAL_UART_MspInit+0x100>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ec6:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <HAL_UART_MspInit+0x100>)
 8004ec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ecc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ece:	4b18      	ldr	r3, [pc, #96]	; (8004f30 <HAL_UART_MspInit+0x100>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ed4:	4b16      	ldr	r3, [pc, #88]	; (8004f30 <HAL_UART_MspInit+0x100>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004eda:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <HAL_UART_MspInit+0x100>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004ee0:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <HAL_UART_MspInit+0x100>)
 8004ee2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ee6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ee8:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <HAL_UART_MspInit+0x100>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004eee:	4810      	ldr	r0, [pc, #64]	; (8004f30 <HAL_UART_MspInit+0x100>)
 8004ef0:	f005 fc08 	bl	800a704 <HAL_DMA_Init>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004efa:	f7ff f9b5 	bl	8004268 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a0b      	ldr	r2, [pc, #44]	; (8004f30 <HAL_UART_MspInit+0x100>)
 8004f02:	635a      	str	r2, [r3, #52]	; 0x34
 8004f04:	4a0a      	ldr	r2, [pc, #40]	; (8004f30 <HAL_UART_MspInit+0x100>)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2105      	movs	r1, #5
 8004f0e:	2027      	movs	r0, #39	; 0x27
 8004f10:	f005 fbce 	bl	800a6b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004f14:	2027      	movs	r0, #39	; 0x27
 8004f16:	f005 fbe7 	bl	800a6e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004f1a:	bf00      	nop
 8004f1c:	3728      	adds	r7, #40	; 0x28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40004800 	.word	0x40004800
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	40020400 	.word	0x40020400
 8004f30:	200004e8 	.word	0x200004e8
 8004f34:	40026058 	.word	0x40026058

08004f38 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004f3e:	1d3b      	adds	r3, r7, #4
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	605a      	str	r2, [r3, #4]
 8004f46:	609a      	str	r2, [r3, #8]
 8004f48:	60da      	str	r2, [r3, #12]
 8004f4a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004f4c:	4b28      	ldr	r3, [pc, #160]	; (8004ff0 <HAL_FSMC_MspInit+0xb8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d148      	bne.n	8004fe6 <HAL_FSMC_MspInit+0xae>
    return;
  }
  FSMC_Initialized = 1;
 8004f54:	4b26      	ldr	r3, [pc, #152]	; (8004ff0 <HAL_FSMC_MspInit+0xb8>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	4b25      	ldr	r3, [pc, #148]	; (8004ff4 <HAL_FSMC_MspInit+0xbc>)
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	4a24      	ldr	r2, [pc, #144]	; (8004ff4 <HAL_FSMC_MspInit+0xbc>)
 8004f64:	f043 0301 	orr.w	r3, r3, #1
 8004f68:	6393      	str	r3, [r2, #56]	; 0x38
 8004f6a:	4b22      	ldr	r3, [pc, #136]	; (8004ff4 <HAL_FSMC_MspInit+0xbc>)
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8004f76:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8004f7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f84:	2303      	movs	r3, #3
 8004f86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004f88:	230c      	movs	r3, #12
 8004f8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f8c:	1d3b      	adds	r3, r7, #4
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4819      	ldr	r0, [pc, #100]	; (8004ff8 <HAL_FSMC_MspInit+0xc0>)
 8004f92:	f005 ffc7 	bl	800af24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 8004f96:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8004f9a:	607b      	str	r3, [r7, #4]
                            |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                            |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004fa8:	230c      	movs	r3, #12
 8004faa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fac:	1d3b      	adds	r3, r7, #4
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4812      	ldr	r0, [pc, #72]	; (8004ffc <HAL_FSMC_MspInit+0xc4>)
 8004fb2:	f005 ffb7 	bl	800af24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = NOE_Pin;
 8004fb6:	2310      	movs	r3, #16
 8004fb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fba:	2302      	movs	r3, #2
 8004fbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004fc6:	230c      	movs	r3, #12
 8004fc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NOE_GPIO_Port, &GPIO_InitStruct);
 8004fca:	1d3b      	adds	r3, r7, #4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	480b      	ldr	r0, [pc, #44]	; (8004ffc <HAL_FSMC_MspInit+0xc4>)
 8004fd0:	f005 ffa8 	bl	800af24 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2105      	movs	r1, #5
 8004fd8:	2030      	movs	r0, #48	; 0x30
 8004fda:	f005 fb69 	bl	800a6b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004fde:	2030      	movs	r0, #48	; 0x30
 8004fe0:	f005 fb82 	bl	800a6e8 <HAL_NVIC_EnableIRQ>
 8004fe4:	e000      	b.n	8004fe8 <HAL_FSMC_MspInit+0xb0>
    return;
 8004fe6:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20002e04 	.word	0x20002e04
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	40020c00 	.word	0x40020c00

08005000 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8005008:	f7ff ff96 	bl	8004f38 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08c      	sub	sp, #48	; 0x30
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005020:	2300      	movs	r3, #0
 8005022:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8005024:	2200      	movs	r2, #0
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	2019      	movs	r0, #25
 800502a:	f005 fb41 	bl	800a6b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800502e:	2019      	movs	r0, #25
 8005030:	f005 fb5a 	bl	800a6e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005034:	2300      	movs	r3, #0
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	4b1f      	ldr	r3, [pc, #124]	; (80050b8 <HAL_InitTick+0xa4>)
 800503a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503c:	4a1e      	ldr	r2, [pc, #120]	; (80050b8 <HAL_InitTick+0xa4>)
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	6453      	str	r3, [r2, #68]	; 0x44
 8005044:	4b1c      	ldr	r3, [pc, #112]	; (80050b8 <HAL_InitTick+0xa4>)
 8005046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005050:	f107 0210 	add.w	r2, r7, #16
 8005054:	f107 0314 	add.w	r3, r7, #20
 8005058:	4611      	mov	r1, r2
 800505a:	4618      	mov	r0, r3
 800505c:	f009 fca0 	bl	800e9a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005060:	f009 fc8a 	bl	800e978 <HAL_RCC_GetPCLK2Freq>
 8005064:	4603      	mov	r3, r0
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506c:	4a13      	ldr	r2, [pc, #76]	; (80050bc <HAL_InitTick+0xa8>)
 800506e:	fba2 2303 	umull	r2, r3, r2, r3
 8005072:	0c9b      	lsrs	r3, r3, #18
 8005074:	3b01      	subs	r3, #1
 8005076:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005078:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <HAL_InitTick+0xac>)
 800507a:	4a12      	ldr	r2, [pc, #72]	; (80050c4 <HAL_InitTick+0xb0>)
 800507c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800507e:	4b10      	ldr	r3, [pc, #64]	; (80050c0 <HAL_InitTick+0xac>)
 8005080:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005084:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005086:	4a0e      	ldr	r2, [pc, #56]	; (80050c0 <HAL_InitTick+0xac>)
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800508c:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <HAL_InitTick+0xac>)
 800508e:	2200      	movs	r2, #0
 8005090:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005092:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <HAL_InitTick+0xac>)
 8005094:	2200      	movs	r2, #0
 8005096:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005098:	4809      	ldr	r0, [pc, #36]	; (80050c0 <HAL_InitTick+0xac>)
 800509a:	f00a fd83 	bl	800fba4 <HAL_TIM_Base_Init>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d104      	bne.n	80050ae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80050a4:	4806      	ldr	r0, [pc, #24]	; (80050c0 <HAL_InitTick+0xac>)
 80050a6:	f00a fdcd 	bl	800fc44 <HAL_TIM_Base_Start_IT>
 80050aa:	4603      	mov	r3, r0
 80050ac:	e000      	b.n	80050b0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3730      	adds	r7, #48	; 0x30
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40023800 	.word	0x40023800
 80050bc:	431bde83 	.word	0x431bde83
 80050c0:	20002e08 	.word	0x20002e08
 80050c4:	40010000 	.word	0x40010000

080050c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80050cc:	bf00      	nop
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050d6:	b480      	push	{r7}
 80050d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050da:	e7fe      	b.n	80050da <HardFault_Handler+0x4>

080050dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050e0:	e7fe      	b.n	80050e0 <MemManage_Handler+0x4>

080050e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050e2:	b480      	push	{r7}
 80050e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050e6:	e7fe      	b.n	80050e6 <BusFault_Handler+0x4>

080050e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050ec:	e7fe      	b.n	80050ec <UsageFault_Handler+0x4>

080050ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050ee:	b480      	push	{r7}
 80050f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050f2:	bf00      	nop
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005100:	bf00      	nop
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005110:	4802      	ldr	r0, [pc, #8]	; (800511c <DMA1_Stream0_IRQHandler+0x10>)
 8005112:	f005 fc8f 	bl	800aa34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005116:	bf00      	nop
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	200002c4 	.word	0x200002c4

08005120 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005124:	4802      	ldr	r0, [pc, #8]	; (8005130 <DMA1_Stream3_IRQHandler+0x10>)
 8005126:	f005 fc85 	bl	800aa34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800512a:	bf00      	nop
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	200004e8 	.word	0x200004e8

08005134 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005138:	4802      	ldr	r0, [pc, #8]	; (8005144 <DMA1_Stream6_IRQHandler+0x10>)
 800513a:	f005 fc7b 	bl	800aa34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000324 	.word	0x20000324

08005148 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800514c:	4802      	ldr	r0, [pc, #8]	; (8005158 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800514e:	f00a fde9 	bl	800fd24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20002e08 	.word	0x20002e08

0800515c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005160:	4802      	ldr	r0, [pc, #8]	; (800516c <TIM2_IRQHandler+0x10>)
 8005162:	f00a fddf 	bl	800fd24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005166:	bf00      	nop
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	2000045c 	.word	0x2000045c

08005170 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005174:	4802      	ldr	r0, [pc, #8]	; (8005180 <I2C1_EV_IRQHandler+0x10>)
 8005176:	f006 fe3b 	bl	800bdf0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800517a:	bf00      	nop
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000270 	.word	0x20000270

08005184 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005188:	4802      	ldr	r0, [pc, #8]	; (8005194 <I2C1_ER_IRQHandler+0x10>)
 800518a:	f006 ffa2 	bl	800c0d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000270 	.word	0x20000270

08005198 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800519c:	4802      	ldr	r0, [pc, #8]	; (80051a8 <SPI1_IRQHandler+0x10>)
 800519e:	f00a fa8d 	bl	800f6bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80051a2:	bf00      	nop
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	200003a4 	.word	0x200003a4

080051ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80051b0:	4802      	ldr	r0, [pc, #8]	; (80051bc <USART3_IRQHandler+0x10>)
 80051b2:	f00b fa75 	bl	80106a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80051b6:	bf00      	nop
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	200004a4 	.word	0x200004a4

080051c0 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 80051c4:	4802      	ldr	r0, [pc, #8]	; (80051d0 <FSMC_IRQHandler+0x10>)
 80051c6:	f008 fe4b 	bl	800de60 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 80051ca:	bf00      	nop
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	20000548 	.word	0x20000548

080051d4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80051d8:	4802      	ldr	r0, [pc, #8]	; (80051e4 <DMA2_Stream3_IRQHandler+0x10>)
 80051da:	f005 fc2b 	bl	800aa34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80051de:	bf00      	nop
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	200003fc 	.word	0x200003fc

080051e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
	return 1;
 80051ec:	2301      	movs	r3, #1
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <_kill>:

int _kill(int pid, int sig)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005202:	f00f fc29 	bl	8014a58 <__errno>
 8005206:	4603      	mov	r3, r0
 8005208:	2216      	movs	r2, #22
 800520a:	601a      	str	r2, [r3, #0]
	return -1;
 800520c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <_exit>:

void _exit (int status)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005220:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff ffe7 	bl	80051f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800522a:	e7fe      	b.n	800522a <_exit+0x12>

0800522c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e00a      	b.n	8005254 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800523e:	f3af 8000 	nop.w
 8005242:	4601      	mov	r1, r0
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	60ba      	str	r2, [r7, #8]
 800524a:	b2ca      	uxtb	r2, r1
 800524c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	3301      	adds	r3, #1
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	429a      	cmp	r2, r3
 800525a:	dbf0      	blt.n	800523e <_read+0x12>
	}

return len;
 800525c:	687b      	ldr	r3, [r7, #4]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
	return -1;
 800526e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005272:	4618      	mov	r0, r3
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800528e:	605a      	str	r2, [r3, #4]
	return 0;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <_isatty>:

int _isatty(int file)
{
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
	return 1;
 80052a6:	2301      	movs	r3, #1
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
	return 0;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
	...

080052d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052d8:	4a14      	ldr	r2, [pc, #80]	; (800532c <_sbrk+0x5c>)
 80052da:	4b15      	ldr	r3, [pc, #84]	; (8005330 <_sbrk+0x60>)
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052e4:	4b13      	ldr	r3, [pc, #76]	; (8005334 <_sbrk+0x64>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d102      	bne.n	80052f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052ec:	4b11      	ldr	r3, [pc, #68]	; (8005334 <_sbrk+0x64>)
 80052ee:	4a12      	ldr	r2, [pc, #72]	; (8005338 <_sbrk+0x68>)
 80052f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052f2:	4b10      	ldr	r3, [pc, #64]	; (8005334 <_sbrk+0x64>)
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4413      	add	r3, r2
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d207      	bcs.n	8005310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005300:	f00f fbaa 	bl	8014a58 <__errno>
 8005304:	4603      	mov	r3, r0
 8005306:	220c      	movs	r2, #12
 8005308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800530a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800530e:	e009      	b.n	8005324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005310:	4b08      	ldr	r3, [pc, #32]	; (8005334 <_sbrk+0x64>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005316:	4b07      	ldr	r3, [pc, #28]	; (8005334 <_sbrk+0x64>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4413      	add	r3, r2
 800531e:	4a05      	ldr	r2, [pc, #20]	; (8005334 <_sbrk+0x64>)
 8005320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005322:	68fb      	ldr	r3, [r7, #12]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20020000 	.word	0x20020000
 8005330:	00000800 	.word	0x00000800
 8005334:	20002e50 	.word	0x20002e50
 8005338:	20008d38 	.word	0x20008d38

0800533c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005340:	4b08      	ldr	r3, [pc, #32]	; (8005364 <SystemInit+0x28>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005346:	4a07      	ldr	r2, [pc, #28]	; (8005364 <SystemInit+0x28>)
 8005348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800534c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005350:	4b04      	ldr	r3, [pc, #16]	; (8005364 <SystemInit+0x28>)
 8005352:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005356:	609a      	str	r2, [r3, #8]
#endif
}
 8005358:	bf00      	nop
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	e000ed00 	.word	0xe000ed00

08005368 <_fs_flash_read>:
/param: Number bytes to read
/return: 0 if all ok
-----------------------------------------------------------*/
int _fs_flash_read(  const struct lfs_config *cfg, lfs_block_t block,
                    lfs_off_t off, void *buffer, lfs_size_t size)
{
 8005368:	b590      	push	{r4, r7, lr}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
    assert(off  % cfg->read_size == 0);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	695a      	ldr	r2, [r3, #20]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005380:	fb01 f202 	mul.w	r2, r1, r2
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <_fs_flash_read+0x2e>
 800538a:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <_fs_flash_read+0x98>)
 800538c:	4a1d      	ldr	r2, [pc, #116]	; (8005404 <_fs_flash_read+0x9c>)
 800538e:	2121      	movs	r1, #33	; 0x21
 8005390:	481d      	ldr	r0, [pc, #116]	; (8005408 <_fs_flash_read+0xa0>)
 8005392:	f00f fb3f 	bl	8014a14 <__assert_func>
    assert(size % cfg->read_size == 0);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	695a      	ldr	r2, [r3, #20]
 800539a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539c:	fbb3 f1f2 	udiv	r1, r3, r2
 80053a0:	fb01 f202 	mul.w	r2, r1, r2
 80053a4:	1a9b      	subs	r3, r3, r2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <_fs_flash_read+0x4e>
 80053aa:	4b18      	ldr	r3, [pc, #96]	; (800540c <_fs_flash_read+0xa4>)
 80053ac:	4a15      	ldr	r2, [pc, #84]	; (8005404 <_fs_flash_read+0x9c>)
 80053ae:	2122      	movs	r1, #34	; 0x22
 80053b0:	4815      	ldr	r0, [pc, #84]	; (8005408 <_fs_flash_read+0xa0>)
 80053b2:	f00f fb2f 	bl	8014a14 <__assert_func>
    assert(block < cfg->block_count);   
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d305      	bcc.n	80053cc <_fs_flash_read+0x64>
 80053c0:	4b13      	ldr	r3, [pc, #76]	; (8005410 <_fs_flash_read+0xa8>)
 80053c2:	4a10      	ldr	r2, [pc, #64]	; (8005404 <_fs_flash_read+0x9c>)
 80053c4:	2123      	movs	r1, #35	; 0x23
 80053c6:	4810      	ldr	r0, [pc, #64]	; (8005408 <_fs_flash_read+0xa0>)
 80053c8:	f00f fb24 	bl	8014a14 <__assert_func>

    uint32_t addr = block * io_nand_get_block_size() + off / io_nand_get_page_size();
 80053cc:	f7fb fcda 	bl	8000d84 <io_nand_get_block_size>
 80053d0:	4602      	mov	r2, r0
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	fb03 f402 	mul.w	r4, r3, r2
 80053d8:	f7fb fcbc 	bl	8000d54 <io_nand_get_page_size>
 80053dc:	4602      	mov	r2, r0
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80053e4:	4423      	add	r3, r4
 80053e6:	617b      	str	r3, [r7, #20]
    io_nand_read(addr, (uint8_t*) buffer, size, 0);
 80053e8:	2300      	movs	r3, #0
 80053ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	6978      	ldr	r0, [r7, #20]
 80053f0:	f7fc fa92 	bl	8001918 <io_nand_read>

    return 0;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd90      	pop	{r4, r7, pc}
 80053fe:	bf00      	nop
 8005400:	08016b98 	.word	0x08016b98
 8005404:	08019e70 	.word	0x08019e70
 8005408:	08016bb4 	.word	0x08016bb4
 800540c:	08016bcc 	.word	0x08016bcc
 8005410:	08016be8 	.word	0x08016be8

08005414 <_fs_flash_prog>:
/param: Number bytes to write
/return: 0 if all ok
-----------------------------------------------------------*/
int _fs_flash_prog(  const struct lfs_config *cfg, lfs_block_t block,
                    lfs_off_t off, const void *buffer, lfs_size_t size)
{
 8005414:	b590      	push	{r4, r7, lr}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]

    assert(off  % cfg->prog_size == 0);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	fbb3 f1f2 	udiv	r1, r3, r2
 800542c:	fb01 f202 	mul.w	r2, r1, r2
 8005430:	1a9b      	subs	r3, r3, r2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <_fs_flash_prog+0x2e>
 8005436:	4b1d      	ldr	r3, [pc, #116]	; (80054ac <_fs_flash_prog+0x98>)
 8005438:	4a1d      	ldr	r2, [pc, #116]	; (80054b0 <_fs_flash_prog+0x9c>)
 800543a:	2138      	movs	r1, #56	; 0x38
 800543c:	481d      	ldr	r0, [pc, #116]	; (80054b4 <_fs_flash_prog+0xa0>)
 800543e:	f00f fae9 	bl	8014a14 <__assert_func>
    assert(size % cfg->prog_size == 0);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	fbb3 f1f2 	udiv	r1, r3, r2
 800544c:	fb01 f202 	mul.w	r2, r1, r2
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d005      	beq.n	8005462 <_fs_flash_prog+0x4e>
 8005456:	4b18      	ldr	r3, [pc, #96]	; (80054b8 <_fs_flash_prog+0xa4>)
 8005458:	4a15      	ldr	r2, [pc, #84]	; (80054b0 <_fs_flash_prog+0x9c>)
 800545a:	2139      	movs	r1, #57	; 0x39
 800545c:	4815      	ldr	r0, [pc, #84]	; (80054b4 <_fs_flash_prog+0xa0>)
 800545e:	f00f fad9 	bl	8014a14 <__assert_func>
    assert(block < cfg->block_count);  
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	429a      	cmp	r2, r3
 800546a:	d305      	bcc.n	8005478 <_fs_flash_prog+0x64>
 800546c:	4b13      	ldr	r3, [pc, #76]	; (80054bc <_fs_flash_prog+0xa8>)
 800546e:	4a10      	ldr	r2, [pc, #64]	; (80054b0 <_fs_flash_prog+0x9c>)
 8005470:	213a      	movs	r1, #58	; 0x3a
 8005472:	4810      	ldr	r0, [pc, #64]	; (80054b4 <_fs_flash_prog+0xa0>)
 8005474:	f00f face 	bl	8014a14 <__assert_func>

    uint32_t addr = block * io_nand_get_block_size() + off / io_nand_get_page_size();
 8005478:	f7fb fc84 	bl	8000d84 <io_nand_get_block_size>
 800547c:	4602      	mov	r2, r0
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	fb03 f402 	mul.w	r4, r3, r2
 8005484:	f7fb fc66 	bl	8000d54 <io_nand_get_page_size>
 8005488:	4602      	mov	r2, r0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005490:	4423      	add	r3, r4
 8005492:	617b      	str	r3, [r7, #20]
    io_nand_write(addr, (uint8_t*) buffer, size, 0);
 8005494:	2300      	movs	r3, #0
 8005496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005498:	6839      	ldr	r1, [r7, #0]
 800549a:	6978      	ldr	r0, [r7, #20]
 800549c:	f7fc fa5a 	bl	8001954 <io_nand_write>
  
    return 0;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd90      	pop	{r4, r7, pc}
 80054aa:	bf00      	nop
 80054ac:	08016c04 	.word	0x08016c04
 80054b0:	08019e80 	.word	0x08019e80
 80054b4:	08016bb4 	.word	0x08016bb4
 80054b8:	08016c20 	.word	0x08016c20
 80054bc:	08016be8 	.word	0x08016be8

080054c0 <_fs_flash_erase>:
/param: Pointer to lfs config
/param: Number block
/return: 0 if all ok
-----------------------------------------------------------*/
int _fs_flash_erase(const struct lfs_config *cfg, lfs_block_t block)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
    assert(block < cfg->block_count);  
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d305      	bcc.n	80054e0 <_fs_flash_erase+0x20>
 80054d4:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <_fs_flash_erase+0x40>)
 80054d6:	4a0b      	ldr	r2, [pc, #44]	; (8005504 <_fs_flash_erase+0x44>)
 80054d8:	214a      	movs	r1, #74	; 0x4a
 80054da:	480b      	ldr	r0, [pc, #44]	; (8005508 <_fs_flash_erase+0x48>)
 80054dc:	f00f fa9a 	bl	8014a14 <__assert_func>

    uint32_t addr = block * io_nand_get_block_size();
 80054e0:	f7fb fc50 	bl	8000d84 <io_nand_get_block_size>
 80054e4:	4602      	mov	r2, r0
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	fb02 f303 	mul.w	r3, r2, r3
 80054ec:	60fb      	str	r3, [r7, #12]
    io_nand_block_erase(addr);
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f7fc fa4e 	bl	8001990 <io_nand_block_erase>

    return 0;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	08016be8 	.word	0x08016be8
 8005504:	08019e90 	.word	0x08019e90
 8005508:	08016bb4 	.word	0x08016bb4

0800550c <_fs_flash_sync>:
/brief: Sync data
/param: Pointer to lfs config
/return: 0 if all ok
-----------------------------------------------------------*/
int _fs_flash_sync(const struct lfs_config *c)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
    return 0;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <io_fs_init>:
/brief: Init FS
/param:
/return: 0 if all ok
-----------------------------------------------------------*/
int io_fs_init(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
    uint32_t page_size = io_nand_get_page_size();
 800552a:	f7fb fc13 	bl	8000d54 <io_nand_get_page_size>
 800552e:	6078      	str	r0, [r7, #4]

    _lfs_config.read_size   = page_size;
 8005530:	4a19      	ldr	r2, [pc, #100]	; (8005598 <io_fs_init+0x74>)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6153      	str	r3, [r2, #20]
    _lfs_config.prog_size   = page_size;
 8005536:	4a18      	ldr	r2, [pc, #96]	; (8005598 <io_fs_init+0x74>)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6193      	str	r3, [r2, #24]
    
    _lfs_config.block_size  = io_nand_get_block_size() * page_size;
 800553c:	f7fb fc22 	bl	8000d84 <io_nand_get_block_size>
 8005540:	4602      	mov	r2, r0
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	fb02 f303 	mul.w	r3, r2, r3
 8005548:	4a13      	ldr	r2, [pc, #76]	; (8005598 <io_fs_init+0x74>)
 800554a:	61d3      	str	r3, [r2, #28]
    _lfs_config.block_count = io_nand_get_block_number();
 800554c:	f7fb fc0e 	bl	8000d6c <io_nand_get_block_number>
 8005550:	4603      	mov	r3, r0
 8005552:	4a11      	ldr	r2, [pc, #68]	; (8005598 <io_fs_init+0x74>)
 8005554:	6213      	str	r3, [r2, #32]
    
    _lfs_config.block_cycles = 100;
 8005556:	4b10      	ldr	r3, [pc, #64]	; (8005598 <io_fs_init+0x74>)
 8005558:	2264      	movs	r2, #100	; 0x64
 800555a:	625a      	str	r2, [r3, #36]	; 0x24
    _lfs_config.lookahead_size = page_size;
 800555c:	4a0e      	ldr	r2, [pc, #56]	; (8005598 <io_fs_init+0x74>)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	62d3      	str	r3, [r2, #44]	; 0x2c
    _lfs_config.cache_size     = page_size;
 8005562:	4a0d      	ldr	r2, [pc, #52]	; (8005598 <io_fs_init+0x74>)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6293      	str	r3, [r2, #40]	; 0x28
    
    _lfs_config.read_buffer = _rd;
 8005568:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <io_fs_init+0x74>)
 800556a:	4a0c      	ldr	r2, [pc, #48]	; (800559c <io_fs_init+0x78>)
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
    _lfs_config.prog_buffer = _wr;
 800556e:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <io_fs_init+0x74>)
 8005570:	4a0b      	ldr	r2, [pc, #44]	; (80055a0 <io_fs_init+0x7c>)
 8005572:	635a      	str	r2, [r3, #52]	; 0x34

    _lfs_config.read   = _fs_flash_read;
 8005574:	4b08      	ldr	r3, [pc, #32]	; (8005598 <io_fs_init+0x74>)
 8005576:	4a0b      	ldr	r2, [pc, #44]	; (80055a4 <io_fs_init+0x80>)
 8005578:	605a      	str	r2, [r3, #4]
    _lfs_config.prog   = _fs_flash_prog;
 800557a:	4b07      	ldr	r3, [pc, #28]	; (8005598 <io_fs_init+0x74>)
 800557c:	4a0a      	ldr	r2, [pc, #40]	; (80055a8 <io_fs_init+0x84>)
 800557e:	609a      	str	r2, [r3, #8]
    _lfs_config.erase  = _fs_flash_erase;
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <io_fs_init+0x74>)
 8005582:	4a0a      	ldr	r2, [pc, #40]	; (80055ac <io_fs_init+0x88>)
 8005584:	60da      	str	r2, [r3, #12]
    _lfs_config.sync   = _fs_flash_sync;
 8005586:	4b04      	ldr	r3, [pc, #16]	; (8005598 <io_fs_init+0x74>)
 8005588:	4a09      	ldr	r2, [pc, #36]	; (80055b0 <io_fs_init+0x8c>)
 800558a:	611a      	str	r2, [r3, #16]

    return 0;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20002ecc 	.word	0x20002ecc
 800559c:	20002f14 	.word	0x20002f14
 80055a0:	20003714 	.word	0x20003714
 80055a4:	08005369 	.word	0x08005369
 80055a8:	08005415 	.word	0x08005415
 80055ac:	080054c1 	.word	0x080054c1
 80055b0:	0800550d 	.word	0x0800550d

080055b4 <io_fs_format>:
/brief: Format a block device with the FS
/param:
/return: A negative error code on failure
-----------------------------------------------------------*/
int io_fs_format(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
    return lfs_format(&_lfs, &_lfs_config);
 80055b8:	4903      	ldr	r1, [pc, #12]	; (80055c8 <io_fs_format+0x14>)
 80055ba:	4804      	ldr	r0, [pc, #16]	; (80055cc <io_fs_format+0x18>)
 80055bc:	f004 f9ae 	bl	800991c <lfs_format>
 80055c0:	4603      	mov	r3, r0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20002ecc 	.word	0x20002ecc
 80055cc:	20002e54 	.word	0x20002e54

080055d0 <io_fs_mount>:
/brief: Mount a FS
/param:
/return: A negative error code on failure
-----------------------------------------------------------*/
int io_fs_mount(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
    return lfs_mount(&_lfs, &_lfs_config);
 80055d4:	4903      	ldr	r1, [pc, #12]	; (80055e4 <io_fs_mount+0x14>)
 80055d6:	4804      	ldr	r0, [pc, #16]	; (80055e8 <io_fs_mount+0x18>)
 80055d8:	f004 fa52 	bl	8009a80 <lfs_mount>
 80055dc:	4603      	mov	r3, r0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20002ecc 	.word	0x20002ecc
 80055e8:	20002e54 	.word	0x20002e54

080055ec <io_fs_unmount>:
/brief: Unmount a FS
/param:
/return: A negative error code on failure
-----------------------------------------------------------*/
int io_fs_unmount()
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
    return lfs_unmount(&_lfs);
 80055f0:	4802      	ldr	r0, [pc, #8]	; (80055fc <io_fs_unmount+0x10>)
 80055f2:	f004 fbad 	bl	8009d50 <lfs_unmount>
 80055f6:	4603      	mov	r3, r0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20002e54 	.word	0x20002e54

08005600 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4293      	cmp	r3, r2
 8005610:	bf38      	it	cc
 8005612:	4613      	movcc	r3, r2
}
 8005614:	4618      	mov	r0, r3
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4293      	cmp	r3, r2
 8005630:	bf28      	it	cs
 8005632:	4613      	movcs	r3, r2
}
 8005634:	4618      	mov	r0, r3
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005652:	6839      	ldr	r1, [r7, #0]
 8005654:	fb01 f202 	mul.w	r2, r1, r2
 8005658:	1a9b      	subs	r3, r3, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	1ad3      	subs	r3, r2, r3
}
 800565e:	4618      	mov	r0, r3
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	4413      	add	r3, r2
 800567a:	3b01      	subs	r3, #1
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff ffde 	bl	8005640 <lfs_aligndown>
 8005684:	4603      	mov	r3, r0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <lfs_npw2>:

// Find the next smallest power of 2 less than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3b01      	subs	r3, #1
 800569a:	fab3 f383 	clz	r3, r3
 800569e:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	fa93 f3a3 	rbit	r3, r3
 80056bc:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7fb f941 	bl	800095c <__popcountsi2>
 80056da:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	1ad3      	subs	r3, r2, r3
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return a;
 8005708:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800570a:	4618      	mov	r0, r3
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7ff ffee 	bl	8005700 <lfs_fromle32>
 8005724:	4603      	mov	r3, r0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff ffed 	bl	800572e <lfs_frombe32>
 8005754:	4603      	mov	r3, r0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f00f fb58 	bl	8014e1c <malloc>
 800576c:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f00f fb54 	bl	8014e2c <free>
#else
    (void)p;
#endif
}
 8005784:	bf00      	nop
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <lfs_cache_drop>:

#define LFS_BLOCK_NULL ((lfs_block_t)-1)
#define LFS_BLOCK_INLINE ((lfs_block_t)-2)

/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800579c:	601a      	str	r2, [r3, #0]
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68d8      	ldr	r0, [r3, #12]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	461a      	mov	r2, r3
 80057c0:	21ff      	movs	r1, #255	; 0xff
 80057c2:	f00f fb49 	bl	8014e58 <memset>
    pcache->block = LFS_BLOCK_NULL;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057cc:	601a      	str	r2, [r3, #0]
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 80057d8:	b5b0      	push	{r4, r5, r7, lr}
 80057da:	b08a      	sub	sp, #40	; 0x28
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80057e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e8:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block != LFS_BLOCK_NULL);
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057f0:	d105      	bne.n	80057fe <lfs_bd_read+0x26>
 80057f2:	4b7c      	ldr	r3, [pc, #496]	; (80059e4 <lfs_bd_read+0x20c>)
 80057f4:	4a7c      	ldr	r2, [pc, #496]	; (80059e8 <lfs_bd_read+0x210>)
 80057f6:	2122      	movs	r1, #34	; 0x22
 80057f8:	487c      	ldr	r0, [pc, #496]	; (80059ec <lfs_bd_read+0x214>)
 80057fa:	f00f f90b 	bl	8014a14 <__assert_func>
    if (off+size > lfs->cfg->block_size) {
 80057fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005802:	441a      	add	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	429a      	cmp	r2, r3
 800580c:	f240 80e0 	bls.w	80059d0 <lfs_bd_read+0x1f8>
        return LFS_ERR_CORRUPT;
 8005810:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005814:	e0e1      	b.n	80059da <lfs_bd_read+0x202>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8005816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005818:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d03f      	beq.n	80058a0 <lfs_bd_read+0xc8>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005826:	429a      	cmp	r2, r3
 8005828:	d13a      	bne.n	80058a0 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8005834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005836:	429a      	cmp	r2, r3
 8005838:	d232      	bcs.n	80058a0 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005840:	429a      	cmp	r2, r3
 8005842:	d324      	bcc.n	800588e <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	6859      	ldr	r1, [r3, #4]
 800584c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584e:	1acb      	subs	r3, r1, r3
 8005850:	4413      	add	r3, r2
 8005852:	4619      	mov	r1, r3
 8005854:	69b8      	ldr	r0, [r7, #24]
 8005856:	f7ff fee3 	bl	8005620 <lfs_min>
 800585a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005866:	1acb      	subs	r3, r1, r3
 8005868:	4413      	add	r3, r2
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	4619      	mov	r1, r3
 800586e:	69f8      	ldr	r0, [r7, #28]
 8005870:	f00f fae4 	bl	8014e3c <memcpy>

                data += diff;
 8005874:	69fa      	ldr	r2, [r7, #28]
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	4413      	add	r3, r2
 800587a:	61fb      	str	r3, [r7, #28]
                off += diff;
 800587c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	4413      	add	r3, r2
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8005884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800588c:	e0a0      	b.n	80059d0 <lfs_bd_read+0x1f8>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	4619      	mov	r1, r3
 8005898:	69b8      	ldr	r0, [r7, #24]
 800589a:	f7ff fec1 	bl	8005620 <lfs_min>
 800589e:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d13a      	bne.n	8005920 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	4413      	add	r3, r2
        if (block == rcache->block &&
 80058b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d232      	bcs.n	8005920 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d324      	bcc.n	800590e <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6859      	ldr	r1, [r3, #4]
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	1acb      	subs	r3, r1, r3
 80058d0:	4413      	add	r3, r2
 80058d2:	4619      	mov	r1, r3
 80058d4:	69b8      	ldr	r0, [r7, #24]
 80058d6:	f7ff fea3 	bl	8005620 <lfs_min>
 80058da:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058e6:	1acb      	subs	r3, r1, r3
 80058e8:	4413      	add	r3, r2
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	4619      	mov	r1, r3
 80058ee:	69f8      	ldr	r0, [r7, #28]
 80058f0:	f00f faa4 	bl	8014e3c <memcpy>

                data += diff;
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	4413      	add	r3, r2
 80058fa:	61fb      	str	r3, [r7, #28]
                off += diff;
 80058fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	4413      	add	r3, r2
 8005902:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8005904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800590c:	e060      	b.n	80059d0 <lfs_bd_read+0x1f8>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	4619      	mov	r1, r3
 8005918:	69b8      	ldr	r0, [r7, #24]
 800591a:	f7ff fe81 	bl	8005620 <lfs_min>
 800591e:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005928:	429a      	cmp	r2, r3
 800592a:	d305      	bcc.n	8005938 <lfs_bd_read+0x160>
 800592c:	4b30      	ldr	r3, [pc, #192]	; (80059f0 <lfs_bd_read+0x218>)
 800592e:	4a2e      	ldr	r2, [pc, #184]	; (80059e8 <lfs_bd_read+0x210>)
 8005930:	214d      	movs	r1, #77	; 0x4d
 8005932:	482e      	ldr	r0, [pc, #184]	; (80059ec <lfs_bd_read+0x214>)
 8005934:	f00f f86e 	bl	8014a14 <__assert_func>
        rcache->block = block;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593c:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	4619      	mov	r1, r3
 8005946:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005948:	f7ff fe7a 	bl	8005640 <lfs_aligndown>
 800594c:	4602      	mov	r2, r0
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8005952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	4619      	mov	r1, r3
 8005960:	4610      	mov	r0, r2
 8005962:	f7ff fe82 	bl	800566a <lfs_alignup>
 8005966:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	4619      	mov	r1, r3
 8005970:	4610      	mov	r0, r2
 8005972:	f7ff fe55 	bl	8005620 <lfs_min>
 8005976:	4602      	mov	r2, r0
                - rcache->off,
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800597c:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005984:	4619      	mov	r1, r3
 8005986:	4610      	mov	r0, r2
 8005988:	f7ff fe4a 	bl	8005620 <lfs_min>
 800598c:	4602      	mov	r2, r0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005996:	685c      	ldr	r4, [r3, #4]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6819      	ldr	r1, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	462b      	mov	r3, r5
 80059b0:	47a0      	blx	r4
 80059b2:	6178      	str	r0, [r7, #20]
        LFS_ASSERT(err <= 0);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	dd05      	ble.n	80059c6 <lfs_bd_read+0x1ee>
 80059ba:	4b0e      	ldr	r3, [pc, #56]	; (80059f4 <lfs_bd_read+0x21c>)
 80059bc:	4a0a      	ldr	r2, [pc, #40]	; (80059e8 <lfs_bd_read+0x210>)
 80059be:	2158      	movs	r1, #88	; 0x58
 80059c0:	480a      	ldr	r0, [pc, #40]	; (80059ec <lfs_bd_read+0x214>)
 80059c2:	f00f f827 	bl	8014a14 <__assert_func>
        if (err) {
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <lfs_bd_read+0x1f8>
            return err;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	e004      	b.n	80059da <lfs_bd_read+0x202>
    while (size > 0) {
 80059d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f47f af1f 	bne.w	8005816 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3720      	adds	r7, #32
 80059de:	46bd      	mov	sp, r7
 80059e0:	bdb0      	pop	{r4, r5, r7, pc}
 80059e2:	bf00      	nop
 80059e4:	08016c3c 	.word	0x08016c3c
 80059e8:	08019ea0 	.word	0x08019ea0
 80059ec:	08016c58 	.word	0x08016c58
 80059f0:	08016c70 	.word	0x08016c70
 80059f4:	08016c90 	.word	0x08016c90

080059f8 <lfs_bd_cmp>:
};

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08c      	sub	sp, #48	; 0x30
 80059fc:	af04      	add	r7, sp, #16
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
 8005a04:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	61bb      	str	r3, [r7, #24]

    for (lfs_off_t i = 0; i < size; i++) {
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61fb      	str	r3, [r7, #28]
 8005a0e:	e02e      	b.n	8005a6e <lfs_bd_cmp+0x76>
        uint8_t dat;
        int err = lfs_bd_read(lfs,
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	1ad1      	subs	r1, r2, r3
 8005a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	9203      	str	r2, [sp, #12]
 8005a20:	f107 0213 	add.w	r2, r7, #19
 8005a24:	9202      	str	r2, [sp, #8]
 8005a26:	9301      	str	r3, [sp, #4]
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f7ff fed0 	bl	80057d8 <lfs_bd_read>
 8005a38:	6178      	str	r0, [r7, #20]
                pcache, rcache, hint-i,
                block, off+i, &dat, 1);
        if (err) {
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <lfs_bd_cmp+0x4c>
            return err;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	e019      	b.n	8005a78 <lfs_bd_cmp+0x80>
        }

        if (dat != data[i]) {
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	781a      	ldrb	r2, [r3, #0]
 8005a4c:	7cfb      	ldrb	r3, [r7, #19]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d00a      	beq.n	8005a68 <lfs_bd_cmp+0x70>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	781a      	ldrb	r2, [r3, #0]
 8005a5a:	7cfb      	ldrb	r3, [r7, #19]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d901      	bls.n	8005a64 <lfs_bd_cmp+0x6c>
 8005a60:	2301      	movs	r3, #1
 8005a62:	e009      	b.n	8005a78 <lfs_bd_cmp+0x80>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e007      	b.n	8005a78 <lfs_bd_cmp+0x80>
    for (lfs_off_t i = 0; i < size; i++) {
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d3cc      	bcc.n	8005a10 <lfs_bd_cmp+0x18>
        }
    }

    return LFS_CMP_EQ;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3720      	adds	r7, #32
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <lfs_bd_flush>:

static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8005a80:	b5b0      	push	{r4, r5, r7, lr}
 8005a82:	b08c      	sub	sp, #48	; 0x30
 8005a84:	af04      	add	r7, sp, #16
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
 8005a8c:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a96:	d061      	beq.n	8005b5c <lfs_bd_flush+0xdc>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f113 0f02 	cmn.w	r3, #2
 8005aa0:	d05c      	beq.n	8005b5c <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d305      	bcc.n	8005abc <lfs_bd_flush+0x3c>
 8005ab0:	4b2d      	ldr	r3, [pc, #180]	; (8005b68 <lfs_bd_flush+0xe8>)
 8005ab2:	4a2e      	ldr	r2, [pc, #184]	; (8005b6c <lfs_bd_flush+0xec>)
 8005ab4:	2181      	movs	r1, #129	; 0x81
 8005ab6:	482e      	ldr	r0, [pc, #184]	; (8005b70 <lfs_bd_flush+0xf0>)
 8005ab8:	f00e ffac 	bl	8014a14 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4610      	mov	r0, r2
 8005aca:	f7ff fdce 	bl	800566a <lfs_alignup>
 8005ace:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ad4:	689c      	ldr	r4, [r3, #8]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	6819      	ldr	r1, [r3, #0]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	462b      	mov	r3, r5
 8005aec:	47a0      	blx	r4
 8005aee:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	dd05      	ble.n	8005b02 <lfs_bd_flush+0x82>
 8005af6:	4b1f      	ldr	r3, [pc, #124]	; (8005b74 <lfs_bd_flush+0xf4>)
 8005af8:	4a1c      	ldr	r2, [pc, #112]	; (8005b6c <lfs_bd_flush+0xec>)
 8005afa:	2185      	movs	r1, #133	; 0x85
 8005afc:	481c      	ldr	r0, [pc, #112]	; (8005b70 <lfs_bd_flush+0xf0>)
 8005afe:	f00e ff89 	bl	8014a14 <__assert_func>
        if (err) {
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <lfs_bd_flush+0x8c>
            return err;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	e028      	b.n	8005b5e <lfs_bd_flush+0xde>
        }

        if (validate) {
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d020      	beq.n	8005b54 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f7ff fe39 	bl	800578c <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8005b26:	69f8      	ldr	r0, [r7, #28]
 8005b28:	9003      	str	r0, [sp, #12]
 8005b2a:	9102      	str	r1, [sp, #8]
 8005b2c:	9201      	str	r2, [sp, #4]
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	2100      	movs	r1, #0
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f7ff ff5e 	bl	80059f8 <lfs_bd_cmp>
 8005b3c:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	da01      	bge.n	8005b48 <lfs_bd_flush+0xc8>
                return res;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	e00a      	b.n	8005b5e <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8005b4e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005b52:	e004      	b.n	8005b5e <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8005b54:	68b9      	ldr	r1, [r7, #8]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7ff fe27 	bl	80057aa <lfs_cache_zero>
    }

    return 0;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bdb0      	pop	{r4, r5, r7, pc}
 8005b66:	bf00      	nop
 8005b68:	08016c9c 	.word	0x08016c9c
 8005b6c:	08019eac 	.word	0x08019eac
 8005b70:	08016c58 	.word	0x08016c58
 8005b74:	08016c90 	.word	0x08016c90

08005b78 <lfs_bd_sync>:

static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f7ff fdff 	bl	800578c <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8005b8e:	78fb      	ldrb	r3, [r7, #3]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	68b9      	ldr	r1, [r7, #8]
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f7ff ff73 	bl	8005a80 <lfs_bd_flush>
 8005b9a:	6178      	str	r0, [r7, #20]
    if (err) {
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <lfs_bd_sync+0x2e>
        return err;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	e011      	b.n	8005bca <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	4798      	blx	r3
 8005bb4:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	dd05      	ble.n	8005bc8 <lfs_bd_sync+0x50>
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <lfs_bd_sync+0x5c>)
 8005bbe:	4a06      	ldr	r2, [pc, #24]	; (8005bd8 <lfs_bd_sync+0x60>)
 8005bc0:	21a9      	movs	r1, #169	; 0xa9
 8005bc2:	4806      	ldr	r0, [pc, #24]	; (8005bdc <lfs_bd_sync+0x64>)
 8005bc4:	f00e ff26 	bl	8014a14 <__assert_func>
    return err;
 8005bc8:	697b      	ldr	r3, [r7, #20]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	08016c90 	.word	0x08016c90
 8005bd8:	08019ebc 	.word	0x08019ebc
 8005bdc:	08016c58 	.word	0x08016c58

08005be0 <lfs_bd_prog>:

static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b088      	sub	sp, #32
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block != LFS_BLOCK_NULL);
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bf8:	d105      	bne.n	8005c06 <lfs_bd_prog+0x26>
 8005bfa:	4b47      	ldr	r3, [pc, #284]	; (8005d18 <lfs_bd_prog+0x138>)
 8005bfc:	4a47      	ldr	r2, [pc, #284]	; (8005d1c <lfs_bd_prog+0x13c>)
 8005bfe:	21b2      	movs	r1, #178	; 0xb2
 8005c00:	4847      	ldr	r0, [pc, #284]	; (8005d20 <lfs_bd_prog+0x140>)
 8005c02:	f00e ff07 	bl	8014a14 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8005c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0a:	441a      	add	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d977      	bls.n	8005d06 <lfs_bd_prog+0x126>
 8005c16:	4b43      	ldr	r3, [pc, #268]	; (8005d24 <lfs_bd_prog+0x144>)
 8005c18:	4a40      	ldr	r2, [pc, #256]	; (8005d1c <lfs_bd_prog+0x13c>)
 8005c1a:	21b3      	movs	r1, #179	; 0xb3
 8005c1c:	4840      	ldr	r0, [pc, #256]	; (8005d20 <lfs_bd_prog+0x140>)
 8005c1e:	f00e fef9 	bl	8014a14 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d151      	bne.n	8005cd0 <lfs_bd_prog+0xf0>
                off >= pcache->off &&
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8005c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d34c      	bcc.n	8005cd0 <lfs_bd_prog+0xf0>
                off < pcache->off + lfs->cfg->cache_size) {
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	4413      	add	r3, r2
                off >= pcache->off &&
 8005c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d243      	bcs.n	8005cd0 <lfs_bd_prog+0xf0>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	6859      	ldr	r1, [r3, #4]
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8005c56:	4413      	add	r3, r2
 8005c58:	4619      	mov	r1, r3
 8005c5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005c5c:	f7ff fce0 	bl	8005620 <lfs_min>
 8005c60:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c6c:	1acb      	subs	r3, r1, r3
 8005c6e:	4413      	add	r3, r2
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	69f9      	ldr	r1, [r7, #28]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f00f f8e1 	bl	8014e3c <memcpy>

            data += diff;
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	4413      	add	r3, r2
 8005c80:	61fb      	str	r3, [r7, #28]
            off += diff;
 8005c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	4413      	add	r3, r2
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8005c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	6898      	ldr	r0, [r3, #8]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	f7ff fcae 	bl	8005600 <lfs_max>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d126      	bne.n	8005d06 <lfs_bd_prog+0x126>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff fede 	bl	8005a80 <lfs_bd_flush>
 8005cc4:	6178      	str	r0, [r7, #20]
                if (err) {
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01c      	beq.n	8005d06 <lfs_bd_prog+0x126>
                    return err;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	e01e      	b.n	8005d0e <lfs_bd_prog+0x12e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cd8:	d005      	beq.n	8005ce6 <lfs_bd_prog+0x106>
 8005cda:	4b13      	ldr	r3, [pc, #76]	; (8005d28 <lfs_bd_prog+0x148>)
 8005cdc:	4a0f      	ldr	r2, [pc, #60]	; (8005d1c <lfs_bd_prog+0x13c>)
 8005cde:	21d0      	movs	r1, #208	; 0xd0
 8005ce0:	480f      	ldr	r0, [pc, #60]	; (8005d20 <lfs_bd_prog+0x140>)
 8005ce2:	f00e fe97 	bl	8014a14 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cea:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cf6:	f7ff fca3 	bl	8005640 <lfs_aligndown>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2200      	movs	r2, #0
 8005d04:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8005d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d18a      	bne.n	8005c22 <lfs_bd_prog+0x42>
    }

    return 0;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	08016c3c 	.word	0x08016c3c
 8005d1c:	08019ec8 	.word	0x08019ec8
 8005d20:	08016c58 	.word	0x08016c58
 8005d24:	08016cc4 	.word	0x08016cc4
 8005d28:	08016ce8 	.word	0x08016ce8

08005d2c <lfs_bd_erase>:

static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d305      	bcc.n	8005d4e <lfs_bd_erase+0x22>
 8005d42:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <lfs_bd_erase+0x50>)
 8005d44:	4a0e      	ldr	r2, [pc, #56]	; (8005d80 <lfs_bd_erase+0x54>)
 8005d46:	21dc      	movs	r1, #220	; 0xdc
 8005d48:	480e      	ldr	r0, [pc, #56]	; (8005d84 <lfs_bd_erase+0x58>)
 8005d4a:	f00e fe63 	bl	8014a14 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	4798      	blx	r3
 8005d5e:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	dd05      	ble.n	8005d72 <lfs_bd_erase+0x46>
 8005d66:	4b08      	ldr	r3, [pc, #32]	; (8005d88 <lfs_bd_erase+0x5c>)
 8005d68:	4a05      	ldr	r2, [pc, #20]	; (8005d80 <lfs_bd_erase+0x54>)
 8005d6a:	21de      	movs	r1, #222	; 0xde
 8005d6c:	4805      	ldr	r0, [pc, #20]	; (8005d84 <lfs_bd_erase+0x58>)
 8005d6e:	f00e fe51 	bl	8014a14 <__assert_func>
    return err;
 8005d72:	68fb      	ldr	r3, [r7, #12]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	08016c70 	.word	0x08016c70
 8005d80:	08019ed4 	.word	0x08019ed4
 8005d84:	08016c58 	.word	0x08016c58
 8005d88:	08016c90 	.word	0x08016c90

08005d8c <lfs_pair_swap>:


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3304      	adds	r3, #4
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	601a      	str	r2, [r3, #0]
}
 8005daa:	bf00      	nop
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc6:	d005      	beq.n	8005dd4 <lfs_pair_isnull+0x1e>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd2:	d101      	bne.n	8005dd8 <lfs_pair_isnull+0x22>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <lfs_pair_isnull+0x24>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	b2db      	uxtb	r3, r3
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d017      	beq.n	8005e32 <lfs_pair_cmp+0x46>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3304      	adds	r3, #4
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d00f      	beq.n	8005e32 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d008      	beq.n	8005e32 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3304      	adds	r3, #4
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d001      	beq.n	8005e32 <lfs_pair_cmp+0x46>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e000      	b.n	8005e34 <lfs_pair_cmp+0x48>
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <lfs_pair_fromle32>:
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
}

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8005e40:	b590      	push	{r4, r7, lr}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff fc57 	bl	8005700 <lfs_fromle32>
 8005e52:	4602      	mov	r2, r0
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	1d1c      	adds	r4, r3, #4
 8005e62:	4610      	mov	r0, r2
 8005e64:	f7ff fc4c 	bl	8005700 <lfs_fromle32>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	6023      	str	r3, [r4, #0]
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd90      	pop	{r4, r7, pc}

08005e74 <lfs_pair_tole32>:

static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8005e74:	b590      	push	{r4, r7, lr}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7ff fc48 	bl	8005716 <lfs_tole32>
 8005e86:	4602      	mov	r2, r0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3304      	adds	r3, #4
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	1d1c      	adds	r4, r3, #4
 8005e96:	4610      	mov	r0, r2
 8005e98:	f7ff fc3d 	bl	8005716 <lfs_tole32>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	6023      	str	r3, [r4, #0]
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd90      	pop	{r4, r7, pc}

08005ea8 <lfs_tag_isvalid>:
typedef int32_t lfs_stag_t;

#define LFS_MKTAG(type, id, size) \
    (((lfs_tag_t)(type) << 20) | ((lfs_tag_t)(id) << 10) | (lfs_tag_t)(size))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	0fdb      	lsrs	r3, r3, #31
 8005eb6:	b2db      	uxtb	r3, r3
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	059b      	lsls	r3, r3, #22
 8005ed0:	159b      	asrs	r3, r3, #22
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ed6:	bf0c      	ite	eq
 8005ed8:	2301      	moveq	r3, #1
 8005eda:	2300      	movne	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	0d1b      	lsrs	r3, r3, #20
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005efc:	b29b      	uxth	r3, r3
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	0d1b      	lsrs	r3, r3, #20
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f1c:	b29b      	uxth	r3, r3
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	0d1b      	lsrs	r3, r3, #20
 8005f36:	b2db      	uxtb	r3, r3
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff ffec 	bl	8005f2a <lfs_tag_chunk>
 8005f52:	4603      	mov	r3, r0
 8005f54:	b25b      	sxtb	r3, r3
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	0a9b      	lsrs	r3, r3, #10
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f70:	b29b      	uxth	r3, r3
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff ff8f 	bl	8005ec4 <lfs_tag_isdelete>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	461a      	mov	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4413      	add	r3, r2
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff ffe5 	bl	8005f7e <lfs_tag_size>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	3304      	adds	r3, #4
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <lfs_gstate_xor>:
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(struct lfs_gstate *a,
        const struct lfs_gstate *b) {
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	e012      	b.n	8005ff6 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	6819      	ldr	r1, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	4403      	add	r3, r0
 8005fec:	404a      	eors	r2, r1
 8005fee:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	dde9      	ble.n	8005fd0 <lfs_gstate_xor+0x10>
    }
}
 8005ffc:	bf00      	nop
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const struct lfs_gstate *a) {
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	e00b      	b.n	8006030 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	4413      	add	r3, r2
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <lfs_gstate_iszero+0x20>
            return false;
 8006026:	2300      	movs	r3, #0
 8006028:	e006      	b.n	8006038 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3301      	adds	r3, #1
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b02      	cmp	r3, #2
 8006034:	ddf0      	ble.n	8006018 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8006036:	2301      	movs	r3, #1
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <lfs_gstate_hasorphans>:

static inline bool lfs_gstate_hasorphans(const struct lfs_gstate *a) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff ff94 	bl	8005f7e <lfs_tag_size>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	bf14      	ite	ne
 800605c:	2301      	movne	r3, #1
 800605e:	2300      	moveq	r3, #0
 8006060:	b2db      	uxtb	r3, r3
}
 8006062:	4618      	mov	r0, r3
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <lfs_gstate_hasmove>:

static inline uint8_t lfs_gstate_getorphans(const struct lfs_gstate *a) {
    return lfs_tag_size(a->tag);
}

static inline bool lfs_gstate_hasmove(const struct lfs_gstate *a) {
 800606a:	b580      	push	{r7, lr}
 800606c:	b082      	sub	sp, #8
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f7ff ff37 	bl	8005eea <lfs_tag_type1>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	bf14      	ite	ne
 8006082:	2301      	movne	r3, #1
 8006084:	2300      	moveq	r3, #0
 8006086:	b2db      	uxtb	r3, r3
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const struct lfs_gstate *a,
        const lfs_block_t *pair) {
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff ff23 	bl	8005eea <lfs_tag_type1>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <lfs_gstate_hasmovehere+0x30>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3304      	adds	r3, #4
 80060ae:	6839      	ldr	r1, [r7, #0]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff fe9b 	bl	8005dec <lfs_pair_cmp>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <lfs_gstate_hasmovehere+0x30>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <lfs_gstate_hasmovehere+0x32>
 80060c0:	2300      	movs	r3, #0
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	b2db      	uxtb	r3, r3
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <lfs_gstate_xororphans>:

static inline void lfs_gstate_xororphans(struct lfs_gstate *a,
        const struct lfs_gstate *b, bool orphans) {
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	4613      	mov	r3, r2
 80060dc:	71fb      	strb	r3, [r7, #7]
    a->tag ^= LFS_MKTAG(0x800, 0, 0) & (b->tag ^ ((uint32_t)orphans << 31));
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	6819      	ldr	r1, [r3, #0]
 80060e6:	79fb      	ldrb	r3, [r7, #7]
 80060e8:	07db      	lsls	r3, r3, #31
 80060ea:	404b      	eors	r3, r1
 80060ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060f0:	405a      	eors	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	601a      	str	r2, [r3, #0]
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <lfs_gstate_xormove>:

static inline void lfs_gstate_xormove(struct lfs_gstate *a,
        const struct lfs_gstate *b, uint16_t id, const lfs_block_t pair[2]) {
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	603b      	str	r3, [r7, #0]
 8006110:	4613      	mov	r3, r2
 8006112:	80fb      	strh	r3, [r7, #6]
    a->tag ^= LFS_MKTAG(0x7ff, 0x3ff, 0) & (b->tag ^ (
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	6819      	ldr	r1, [r3, #0]
            (id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800611c:	88fb      	ldrh	r3, [r7, #6]
 800611e:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8006122:	4283      	cmp	r3, r0
 8006124:	d006      	beq.n	8006134 <lfs_gstate_xormove+0x30>
 8006126:	88fb      	ldrh	r3, [r7, #6]
 8006128:	029b      	lsls	r3, r3, #10
 800612a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800612e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006132:	e000      	b.n	8006136 <lfs_gstate_xormove+0x32>
 8006134:	2300      	movs	r3, #0
    a->tag ^= LFS_MKTAG(0x7ff, 0x3ff, 0) & (b->tag ^ (
 8006136:	4059      	eors	r1, r3
 8006138:	4b16      	ldr	r3, [pc, #88]	; (8006194 <lfs_gstate_xormove+0x90>)
 800613a:	400b      	ands	r3, r1
 800613c:	405a      	eors	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	601a      	str	r2, [r3, #0]
    a->pair[0] ^= b->pair[0] ^ ((id != 0x3ff) ? pair[0] : 0);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	6859      	ldr	r1, [r3, #4]
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8006150:	4283      	cmp	r3, r0
 8006152:	d002      	beq.n	800615a <lfs_gstate_xormove+0x56>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	e000      	b.n	800615c <lfs_gstate_xormove+0x58>
 800615a:	2300      	movs	r3, #0
 800615c:	404b      	eors	r3, r1
 800615e:	405a      	eors	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	605a      	str	r2, [r3, #4]
    a->pair[1] ^= b->pair[1] ^ ((id != 0x3ff) ? pair[1] : 0);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	6899      	ldr	r1, [r3, #8]
 800616c:	88fb      	ldrh	r3, [r7, #6]
 800616e:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8006172:	4283      	cmp	r3, r0
 8006174:	d003      	beq.n	800617e <lfs_gstate_xormove+0x7a>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	3304      	adds	r3, #4
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	e000      	b.n	8006180 <lfs_gstate_xormove+0x7c>
 800617e:	2300      	movs	r3, #0
 8006180:	404b      	eors	r3, r1
 8006182:	405a      	eors	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	609a      	str	r2, [r3, #8]
}
 8006188:	bf00      	nop
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	7ffffc00 	.word	0x7ffffc00

08006198 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(struct lfs_gstate *a) {
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff faab 	bl	8005700 <lfs_fromle32>
 80061aa:	4602      	mov	r2, r0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff faa3 	bl	8005700 <lfs_fromle32>
 80061ba:	4602      	mov	r2, r0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fa9b 	bl	8005700 <lfs_fromle32>
 80061ca:	4602      	mov	r2, r0
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	609a      	str	r2, [r3, #8]
}
 80061d0:	bf00      	nop
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <lfs_gstate_tole32>:

static inline void lfs_gstate_tole32(struct lfs_gstate *a) {
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7ff fa96 	bl	8005716 <lfs_tole32>
 80061ea:	4602      	mov	r2, r0
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff fa8e 	bl	8005716 <lfs_tole32>
 80061fa:	4602      	mov	r2, r0
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	4618      	mov	r0, r3
 8006206:	f7ff fa86 	bl	8005716 <lfs_tole32>
 800620a:	4602      	mov	r2, r0
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	609a      	str	r2, [r3, #8]
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <lfs_ctz_fromle32>:

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4618      	mov	r0, r3
 8006226:	f7ff fa6b 	bl	8005700 <lfs_fromle32>
 800622a:	4602      	mov	r2, r0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff fa63 	bl	8005700 <lfs_fromle32>
 800623a:	4602      	mov	r2, r0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	605a      	str	r2, [r3, #4]
}
 8006240:	bf00      	nop
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <lfs_superblock_fromle32>:
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
    ctz->head = lfs_tole32(ctz->head);
    ctz->size = lfs_tole32(ctz->size);
}

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff fa53 	bl	8005700 <lfs_fromle32>
 800625a:	4602      	mov	r2, r0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff fa4b 	bl	8005700 <lfs_fromle32>
 800626a:	4602      	mov	r2, r0
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff fa43 	bl	8005700 <lfs_fromle32>
 800627a:	4602      	mov	r2, r0
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fa3b 	bl	8005700 <lfs_fromle32>
 800628a:	4602      	mov	r2, r0
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff fa33 	bl	8005700 <lfs_fromle32>
 800629a:	4602      	mov	r2, r0
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff fa2b 	bl	8005700 <lfs_fromle32>
 80062aa:	4602      	mov	r2, r0
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	615a      	str	r2, [r3, #20]
}
 80062b0:	bf00      	nop
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <lfs_superblock_tole32>:

static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff fa26 	bl	8005716 <lfs_tole32>
 80062ca:	4602      	mov	r2, r0
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7ff fa1e 	bl	8005716 <lfs_tole32>
 80062da:	4602      	mov	r2, r0
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7ff fa16 	bl	8005716 <lfs_tole32>
 80062ea:	4602      	mov	r2, r0
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff fa0e 	bl	8005716 <lfs_tole32>
 80062fa:	4602      	mov	r2, r0
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff fa06 	bl	8005716 <lfs_tole32>
 800630a:	4602      	mov	r2, r0
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	4618      	mov	r0, r3
 8006316:	f7ff f9fe 	bl	8005716 <lfs_tole32>
 800631a:	4602      	mov	r2, r0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	615a      	str	r2, [r3, #20]
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <lfs_alloc_lookahead>:
static int lfs1_traverse(lfs_t *lfs,
        int (*cb)(void*, lfs_block_t), void *data);
#endif

/// Block allocator ///
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	4413      	add	r3, r2
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800634a:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 800634c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006350:	fb01 f202 	mul.w	r2, r1, r2
 8006354:	1a9b      	subs	r3, r3, r2
 8006356:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	429a      	cmp	r2, r3
 8006360:	d212      	bcs.n	8006388 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	009a      	lsls	r2, r3, #2
 800636c:	440a      	add	r2, r1
 800636e:	6811      	ldr	r1, [r2, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	f002 021f 	and.w	r2, r2, #31
 8006376:	2001      	movs	r0, #1
 8006378:	fa00 f202 	lsl.w	r2, r0, r2
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4403      	add	r3, r0
 8006384:	430a      	orrs	r2, r1
 8006386:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
	...

08006398 <lfs_alloc>:

static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 80063a2:	e04f      	b.n	8006444 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a8:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b8:	1e5a      	subs	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	095b      	lsrs	r3, r3, #5
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f003 031f 	and.w	r3, r3, #31
 80063d2:	2101      	movs	r1, #1
 80063d4:	fa01 f303 	lsl.w	r3, r1, r3
 80063d8:	4013      	ands	r3, r2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d132      	bne.n	8006444 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	4413      	add	r3, r2
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80063ea:	6a12      	ldr	r2, [r2, #32]
 80063ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80063f0:	fb01 f202 	mul.w	r2, r1, r2
 80063f4:	1a9a      	subs	r2, r3, r2
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 80063fa:	e009      	b.n	8006410 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800640a:	1e5a      	subs	r2, r3, #1
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006418:	429a      	cmp	r2, r3
 800641a:	d011      	beq.n	8006440 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006424:	095b      	lsrs	r3, r3, #5
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006430:	f003 031f 	and.w	r3, r3, #31
 8006434:	2101      	movs	r1, #1
 8006436:	fa01 f303 	lsl.w	r3, r1, r3
 800643a:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1dd      	bne.n	80063fc <lfs_alloc+0x64>
                }

                return 0;
 8006440:	2300      	movs	r3, #0
 8006442:	e04a      	b.n	80064da <lfs_alloc+0x142>
        while (lfs->free.i != lfs->free.size) {
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644c:	429a      	cmp	r2, r3
 800644e:	d1a9      	bne.n	80063a4 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10d      	bne.n	8006474 <lfs_alloc+0xdc>
            LFS_ERROR("No more free space %"PRIu32,
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006460:	4413      	add	r3, r2
 8006462:	461a      	mov	r2, r3
 8006464:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006468:	481e      	ldr	r0, [pc, #120]	; (80064e4 <lfs_alloc+0x14c>)
 800646a:	f00f f8cb 	bl	8015604 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 800646e:	f06f 031b 	mvn.w	r3, #27
 8006472:	e032      	b.n	80064da <lfs_alloc+0x142>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647c:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006482:	6a12      	ldr	r2, [r2, #32]
 8006484:	fbb3 f1f2 	udiv	r1, r3, r2
 8006488:	fb01 f202 	mul.w	r2, r1, r2
 800648c:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	00da      	lsls	r2, r3, #3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800649e:	4619      	mov	r1, r3
 80064a0:	4610      	mov	r0, r2
 80064a2:	f7ff f8bd 	bl	8005620 <lfs_min>
 80064a6:	4602      	mov	r2, r0
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	461a      	mov	r2, r3
 80064be:	2100      	movs	r1, #0
 80064c0:	f00e fcca 	bl	8014e58 <memset>
        int err = lfs_fs_traverse(lfs, lfs_alloc_lookahead, lfs);
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	4908      	ldr	r1, [pc, #32]	; (80064e8 <lfs_alloc+0x150>)
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f003 fc5f 	bl	8009d8c <lfs_fs_traverse>
 80064ce:	60f8      	str	r0, [r7, #12]
        if (err) {
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f43f af65 	beq.w	80063a2 <lfs_alloc+0xa>
            return err;
 80064d8:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	08016d0c 	.word	0x08016d0c
 80064e8:	08006329 	.word	0x08006329

080064ec <lfs_alloc_ack>:

static void lfs_alloc_ack(lfs_t *lfs) {
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064f8:	6a1a      	ldr	r2, [r3, #32]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	661a      	str	r2, [r3, #96]	; 0x60
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
	...

0800650c <lfs_dir_getslice>:


/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800650c:	b590      	push	{r4, r7, lr}
 800650e:	b08f      	sub	sp, #60	; 0x3c
 8006510:	af04      	add	r7, sp, #16
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
 8006518:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair) &&
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3330      	adds	r3, #48	; 0x30
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	4611      	mov	r1, r2
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fdac 	bl	8006090 <lfs_gstate_hasmovehere>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 80b2 	beq.w	80066a4 <lfs_dir_getslice+0x198>
            lfs_tag_id(gtag) <= lfs_tag_id(lfs->gstate.tag)) {
 8006540:	6838      	ldr	r0, [r7, #0]
 8006542:	f7ff fd0c 	bl	8005f5e <lfs_tag_id>
 8006546:	4603      	mov	r3, r0
 8006548:	461c      	mov	r4, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff fd05 	bl	8005f5e <lfs_tag_id>
 8006554:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair) &&
 8006556:	429c      	cmp	r4, r3
 8006558:	f200 80a4 	bhi.w	80066a4 <lfs_dir_getslice+0x198>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006562:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8006564:	e09e      	b.n	80066a4 <lfs_dir_getslice+0x198>
        off -= lfs_tag_dsize(ntag);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff fd15 	bl	8005f98 <lfs_tag_dsize>
 800656e:	4602      	mov	r2, r0
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	1a9b      	subs	r3, r3, r2
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800657a:	68f9      	ldr	r1, [r7, #12]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2204      	movs	r2, #4
 8006582:	9203      	str	r2, [sp, #12]
 8006584:	f107 0210 	add.w	r2, r7, #16
 8006588:	9202      	str	r2, [sp, #8]
 800658a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800658c:	9201      	str	r2, [sp, #4]
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	2304      	movs	r3, #4
 8006592:	460a      	mov	r2, r1
 8006594:	2100      	movs	r1, #0
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f7ff f91e 	bl	80057d8 <lfs_bd_read>
 800659c:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <lfs_dir_getslice+0x9c>
            return err;
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	e089      	b.n	80066bc <lfs_dir_getslice+0x1b0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff f8bf 	bl	800572e <lfs_frombe32>
 80065b0:	4602      	mov	r2, r0
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	4053      	eors	r3, r2
 80065b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065ba:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7ff fcce 	bl	8005f5e <lfs_tag_id>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d02b      	beq.n	8006620 <lfs_dir_getslice+0x114>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80065c8:	69f8      	ldr	r0, [r7, #28]
 80065ca:	f7ff fc8e 	bl	8005eea <lfs_tag_type1>
 80065ce:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 80065d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d4:	d124      	bne.n	8006620 <lfs_dir_getslice+0x114>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 80065d6:	69f8      	ldr	r0, [r7, #28]
 80065d8:	f7ff fcc1 	bl	8005f5e <lfs_tag_id>
 80065dc:	4603      	mov	r3, r0
 80065de:	461c      	mov	r4, r3
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff fcb9 	bl	8005f5e <lfs_tag_id>
 80065ec:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80065ee:	429c      	cmp	r4, r3
 80065f0:	d816      	bhi.n	8006620 <lfs_dir_getslice+0x114>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	1ad2      	subs	r2, r2, r3
 80065f8:	4b32      	ldr	r3, [pc, #200]	; (80066c4 <lfs_dir_getslice+0x1b8>)
 80065fa:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 80065fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006604:	69fa      	ldr	r2, [r7, #28]
 8006606:	429a      	cmp	r2, r3
 8006608:	d102      	bne.n	8006610 <lfs_dir_getslice+0x104>
                // found where we were created
                return LFS_ERR_NOENT;
 800660a:	f06f 0301 	mvn.w	r3, #1
 800660e:	e055      	b.n	80066bc <lfs_dir_getslice+0x1b0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8006610:	69f8      	ldr	r0, [r7, #28]
 8006612:	f7ff fc97 	bl	8005f44 <lfs_tag_splice>
 8006616:	4603      	mov	r3, r0
 8006618:	029a      	lsls	r2, r3, #10
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	4413      	add	r3, r2
 800661e:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	1ad2      	subs	r2, r2, r3
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	405a      	eors	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4013      	ands	r3, r2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d138      	bne.n	80066a4 <lfs_dir_getslice+0x198>
            if (lfs_tag_isdelete(tag)) {
 8006632:	69f8      	ldr	r0, [r7, #28]
 8006634:	f7ff fc46 	bl	8005ec4 <lfs_tag_isdelete>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <lfs_dir_getslice+0x138>
                return LFS_ERR_NOENT;
 800663e:	f06f 0301 	mvn.w	r3, #1
 8006642:	e03b      	b.n	80066bc <lfs_dir_getslice+0x1b0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8006644:	69f8      	ldr	r0, [r7, #28]
 8006646:	f7ff fc9a 	bl	8005f7e <lfs_tag_size>
 800664a:	4603      	mov	r3, r0
 800664c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe ffe6 	bl	8005620 <lfs_min>
 8006654:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800665c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800665e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006660:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8006662:	3204      	adds	r2, #4
 8006664:	6979      	ldr	r1, [r7, #20]
 8006666:	9103      	str	r1, [sp, #12]
 8006668:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800666a:	9102      	str	r1, [sp, #8]
 800666c:	9201      	str	r2, [sp, #4]
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	4602      	mov	r2, r0
 8006674:	2100      	movs	r1, #0
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f7ff f8ae 	bl	80057d8 <lfs_bd_read>
 800667c:	61b8      	str	r0, [r7, #24]
            if (err) {
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <lfs_dir_getslice+0x17c>
                return err;
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	e019      	b.n	80066bc <lfs_dir_getslice+0x1b0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8006688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	18d0      	adds	r0, r2, r3
 800668e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	461a      	mov	r2, r3
 8006696:	2100      	movs	r1, #0
 8006698:	f00e fbde 	bl	8014e58 <memset>

            return tag + gdiff;
 800669c:	6a3a      	ldr	r2, [r7, #32]
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4413      	add	r3, r2
 80066a2:	e00b      	b.n	80066bc <lfs_dir_getslice+0x1b0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7ff fc76 	bl	8005f98 <lfs_tag_dsize>
 80066ac:	4603      	mov	r3, r0
 80066ae:	3304      	adds	r3, #4
 80066b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b2:	429a      	cmp	r2, r3
 80066b4:	f4bf af57 	bcs.w	8006566 <lfs_dir_getslice+0x5a>
        }
    }

    return LFS_ERR_NOENT;
 80066b8:	f06f 0301 	mvn.w	r3, #1
}
 80066bc:	4618      	mov	r0, r3
 80066be:	372c      	adds	r7, #44	; 0x2c
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd90      	pop	{r4, r7, pc}
 80066c4:	000ffc00 	.word	0x000ffc00

080066c8 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af04      	add	r7, sp, #16
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 80066d6:	6838      	ldr	r0, [r7, #0]
 80066d8:	f7ff fc51 	bl	8005f7e <lfs_tag_size>
 80066dc:	4603      	mov	r3, r0
 80066de:	9302      	str	r3, [sp, #8]
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	9301      	str	r3, [sp, #4]
 80066e4:	2300      	movs	r3, #0
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	68b9      	ldr	r1, [r7, #8]
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff ff0c 	bl	800650c <lfs_dir_getslice>
 80066f4:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 80066fe:	b580      	push	{r7, lr}
 8006700:	b08c      	sub	sp, #48	; 0x30
 8006702:	af04      	add	r7, sp, #16
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	607a      	str	r2, [r7, #4]
 800670a:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800670c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670e:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8006710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006714:	441a      	add	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	429a      	cmp	r2, r3
 800671e:	f240 80c0 	bls.w	80068a2 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8006722:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006726:	e0c1      	b.n	80068ac <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8006728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672a:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d03f      	beq.n	80067b2 <lfs_dir_getread+0xb4>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f113 0f02 	cmn.w	r3, #2
 800673a:	d13a      	bne.n	80067b2 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8006746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006748:	429a      	cmp	r2, r3
 800674a:	d232      	bcs.n	80067b2 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006752:	429a      	cmp	r2, r3
 8006754:	d324      	bcc.n	80067a0 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6859      	ldr	r1, [r3, #4]
 800675e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006760:	1acb      	subs	r3, r1, r3
 8006762:	4413      	add	r3, r2
 8006764:	4619      	mov	r1, r3
 8006766:	69b8      	ldr	r0, [r7, #24]
 8006768:	f7fe ff5a 	bl	8005620 <lfs_min>
 800676c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006778:	1acb      	subs	r3, r1, r3
 800677a:	4413      	add	r3, r2
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	4619      	mov	r1, r3
 8006780:	69f8      	ldr	r0, [r7, #28]
 8006782:	f00e fb5b 	bl	8014e3c <memcpy>

                data += diff;
 8006786:	69fa      	ldr	r2, [r7, #28]
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	4413      	add	r3, r2
 800678c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800678e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	4413      	add	r3, r2
 8006794:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8006796:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800679e:	e080      	b.n	80068a2 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	4619      	mov	r1, r3
 80067aa:	69b8      	ldr	r0, [r7, #24]
 80067ac:	f7fe ff38 	bl	8005620 <lfs_min>
 80067b0:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f113 0f02 	cmn.w	r3, #2
 80067ba:	d13a      	bne.n	8006832 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 80067c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d232      	bcs.n	8006832 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d324      	bcc.n	8006820 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	6859      	ldr	r1, [r3, #4]
 80067de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e0:	1acb      	subs	r3, r1, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	4619      	mov	r1, r3
 80067e6:	69b8      	ldr	r0, [r7, #24]
 80067e8:	f7fe ff1a 	bl	8005620 <lfs_min>
 80067ec:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067f8:	1acb      	subs	r3, r1, r3
 80067fa:	4413      	add	r3, r2
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	4619      	mov	r1, r3
 8006800:	69f8      	ldr	r0, [r7, #28]
 8006802:	f00e fb1b 	bl	8014e3c <memcpy>

                data += diff;
 8006806:	69fa      	ldr	r2, [r7, #28]
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	4413      	add	r3, r2
 800680c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800680e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	4413      	add	r3, r2
 8006814:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8006816:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800681e:	e040      	b.n	80068a2 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	4619      	mov	r1, r3
 800682a:	69b8      	ldr	r0, [r7, #24]
 800682c:	f7fe fef8 	bl	8005620 <lfs_min>
 8006830:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	f06f 0201 	mvn.w	r2, #1
 8006838:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	4619      	mov	r1, r3
 8006842:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006844:	f7fe fefc 	bl	8005640 <lfs_aligndown>
 8006848:	4602      	mov	r2, r0
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800684e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	441a      	add	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	4619      	mov	r1, r3
 800685c:	4610      	mov	r0, r2
 800685e:	f7fe ff04 	bl	800566a <lfs_alignup>
 8006862:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8006868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686a:	4619      	mov	r1, r3
 800686c:	4610      	mov	r0, r2
 800686e:	f7fe fed7 	bl	8005620 <lfs_min>
 8006872:	4602      	mov	r2, r0
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	6889      	ldr	r1, [r1, #8]
 8006884:	9102      	str	r1, [sp, #8]
 8006886:	9201      	str	r2, [sp, #4]
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800688e:	68b9      	ldr	r1, [r7, #8]
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f7ff fe3b 	bl	800650c <lfs_dir_getslice>
 8006896:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	2b00      	cmp	r3, #0
 800689c:	da01      	bge.n	80068a2 <lfs_dir_getread+0x1a4>
            return err;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	e004      	b.n	80068ac <lfs_dir_getread+0x1ae>
    while (size > 0) {
 80068a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f47f af3f 	bne.w	8006728 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3720      	adds	r7, #32
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <lfs_dir_traverse_filter>:

static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 80068b4:	b590      	push	{r4, r7, lr}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <lfs_dir_traverse_filter+0x1e>
 80068ce:	4b23      	ldr	r3, [pc, #140]	; (800695c <lfs_dir_traverse_filter+0xa8>)
 80068d0:	e000      	b.n	80068d4 <lfs_dir_traverse_filter+0x20>
 80068d2:	4b23      	ldr	r3, [pc, #140]	; (8006960 <lfs_dir_traverse_filter+0xac>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 80068d4:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	405a      	eors	r2, r3
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	4013      	ands	r3, r2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d014      	beq.n	8006910 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff faea 	bl	8005ec4 <lfs_tag_isdelete>
 80068f0:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10c      	bne.n	8006910 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4a18      	ldr	r2, [pc, #96]	; (800695c <lfs_dir_traverse_filter+0xa8>)
 80068fa:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	6819      	ldr	r1, [r3, #0]
 8006900:	4b18      	ldr	r3, [pc, #96]	; (8006964 <lfs_dir_traverse_filter+0xb0>)
 8006902:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8006904:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006908:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800690c:	429a      	cmp	r2, r3
 800690e:	d101      	bne.n	8006914 <lfs_dir_traverse_filter+0x60>
        return true;
 8006910:	2301      	movs	r3, #1
 8006912:	e01e      	b.n	8006952 <lfs_dir_traverse_filter+0x9e>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8006914:	68b8      	ldr	r0, [r7, #8]
 8006916:	f7ff fae8 	bl	8005eea <lfs_tag_type1>
 800691a:	4603      	mov	r3, r0
 800691c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006920:	d116      	bne.n	8006950 <lfs_dir_traverse_filter+0x9c>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8006922:	68b8      	ldr	r0, [r7, #8]
 8006924:	f7ff fb1b 	bl	8005f5e <lfs_tag_id>
 8006928:	4603      	mov	r3, r0
 800692a:	461c      	mov	r4, r3
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff fb14 	bl	8005f5e <lfs_tag_id>
 8006936:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8006938:	429c      	cmp	r4, r3
 800693a:	d809      	bhi.n	8006950 <lfs_dir_traverse_filter+0x9c>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800693c:	68b8      	ldr	r0, [r7, #8]
 800693e:	f7ff fb01 	bl	8005f44 <lfs_tag_splice>
 8006942:	4603      	mov	r3, r0
 8006944:	029a      	lsls	r2, r3, #10
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	441a      	add	r2, r3
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	601a      	str	r2, [r3, #0]
    }

    return false;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	bd90      	pop	{r4, r7, pc}
 800695a:	bf00      	nop
 800695c:	7ffffc00 	.word	0x7ffffc00
 8006960:	700ffc00 	.word	0x700ffc00
 8006964:	000ffc00 	.word	0x000ffc00

08006968 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount, bool hasseenmove,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8006968:	b590      	push	{r4, r7, lr}
 800696a:	b09d      	sub	sp, #116	; 0x74
 800696c:	af0a      	add	r7, sp, #40	; 0x28
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
    // iterate over directory and attrs
    while (true) {
        lfs_tag_t tag;
        const void *buffer;
        struct lfs_diskoff disk;
        if (off+lfs_tag_dsize(ptag) < dir->off) {
 8006976:	6838      	ldr	r0, [r7, #0]
 8006978:	f7ff fb0e 	bl	8005f98 <lfs_tag_dsize>
 800697c:	4602      	mov	r2, r0
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	441a      	add	r2, r3
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	429a      	cmp	r2, r3
 8006988:	d233      	bcs.n	80069f2 <lfs_dir_traverse+0x8a>
            off += lfs_tag_dsize(ptag);
 800698a:	6838      	ldr	r0, [r7, #0]
 800698c:	f7ff fb04 	bl	8005f98 <lfs_tag_dsize>
 8006990:	4602      	mov	r2, r0
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4413      	add	r3, r2
 8006996:	607b      	str	r3, [r7, #4]
            int err = lfs_bd_read(lfs,
 8006998:	68f9      	ldr	r1, [r7, #12]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2204      	movs	r2, #4
 80069a0:	9203      	str	r2, [sp, #12]
 80069a2:	f107 021c 	add.w	r2, r7, #28
 80069a6:	9202      	str	r2, [sp, #8]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	9201      	str	r2, [sp, #4]
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	2304      	movs	r3, #4
 80069b0:	460a      	mov	r2, r1
 80069b2:	2100      	movs	r1, #0
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f7fe ff0f 	bl	80057d8 <lfs_bd_read>
 80069ba:	63f8      	str	r0, [r7, #60]	; 0x3c
                    NULL, &lfs->rcache, sizeof(tag),
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80069bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <lfs_dir_traverse+0x5e>
                return err;
 80069c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c4:	e13f      	b.n	8006c46 <lfs_dir_traverse+0x2de>
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fe feb0 	bl	800572e <lfs_frombe32>
 80069ce:	4602      	mov	r2, r0
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	4053      	eors	r3, r2
 80069d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069d8:	61fb      	str	r3, [r7, #28]
            disk.block = dir->pair[0];
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	617b      	str	r3, [r7, #20]
            disk.off = off+sizeof(lfs_tag_t);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3304      	adds	r3, #4
 80069e4:	61bb      	str	r3, [r7, #24]
            buffer = &disk;
 80069e6:	f107 0314 	add.w	r3, r7, #20
 80069ea:	647b      	str	r3, [r7, #68]	; 0x44
            ptag = tag;
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	603b      	str	r3, [r7, #0]
 80069f0:	e02d      	b.n	8006a4e <lfs_dir_traverse+0xe6>
        } else if (attrcount > 0) {
 80069f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dd0c      	ble.n	8006a12 <lfs_dir_traverse+0xaa>
            tag = attrs[0].tag;
 80069f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	61fb      	str	r3, [r7, #28]
            buffer = attrs[0].buffer;
 80069fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	647b      	str	r3, [r7, #68]	; 0x44
            attrs += 1;
 8006a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a06:	3308      	adds	r3, #8
 8006a08:	65bb      	str	r3, [r7, #88]	; 0x58
            attrcount -= 1;
 8006a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a10:	e01d      	b.n	8006a4e <lfs_dir_traverse+0xe6>
        } else if (!hasseenmove &&
 8006a12:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8006a16:	f083 0301 	eor.w	r3, r3, #1
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d014      	beq.n	8006a4a <lfs_dir_traverse+0xe2>
                lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	333c      	adds	r3, #60	; 0x3c
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	4611      	mov	r1, r2
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff fb31 	bl	8006090 <lfs_gstate_hasmovehere>
 8006a2e:	4603      	mov	r3, r0
        } else if (!hasseenmove &&
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00a      	beq.n	8006a4a <lfs_dir_traverse+0xe2>
            // Wait, we have pending move? Handle this here (we need to
            // or else we risk letting moves fall out of date)
            tag = lfs->gpending.tag & LFS_MKTAG(0x7ff, 0x3ff, 0);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a38:	4b85      	ldr	r3, [pc, #532]	; (8006c50 <lfs_dir_traverse+0x2e8>)
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	61fb      	str	r3, [r7, #28]
            buffer = NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	647b      	str	r3, [r7, #68]	; 0x44
            hasseenmove = true;
 8006a42:	2301      	movs	r3, #1
 8006a44:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8006a48:	e001      	b.n	8006a4e <lfs_dir_traverse+0xe6>
        } else {
            return 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e0fb      	b.n	8006c46 <lfs_dir_traverse+0x2de>
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8006a4e:	4b81      	ldr	r3, [pc, #516]	; (8006c54 <lfs_dir_traverse+0x2ec>)
 8006a50:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a56:	405a      	eors	r2, r3
 8006a58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a5c:	400b      	ands	r3, r1
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f040 80ea 	bne.w	8006c3a <lfs_dir_traverse+0x2d2>
            continue;
        }

        // do we need to filter? inlining the filtering logic here allows
        // for some minor optimizations
        if (lfs_tag_id(tmask) != 0) {
 8006a66:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8006a68:	f7ff fa79 	bl	8005f5e <lfs_tag_id>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d03b      	beq.n	8006aea <lfs_dir_traverse+0x182>
            // scan for duplicates and update tag based on creates/deletes
            int filter = lfs_dir_traverse(lfs,
 8006a72:	f107 031c 	add.w	r3, r7, #28
 8006a76:	9309      	str	r3, [sp, #36]	; 0x24
 8006a78:	4b77      	ldr	r3, [pc, #476]	; (8006c58 <lfs_dir_traverse+0x2f0>)
 8006a7a:	9308      	str	r3, [sp, #32]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	9307      	str	r3, [sp, #28]
 8006a80:	2300      	movs	r3, #0
 8006a82:	9306      	str	r3, [sp, #24]
 8006a84:	2300      	movs	r3, #0
 8006a86:	9305      	str	r3, [sp, #20]
 8006a88:	2300      	movs	r3, #0
 8006a8a:	9304      	str	r3, [sp, #16]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	9303      	str	r3, [sp, #12]
 8006a90:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8006a94:	9302      	str	r3, [sp, #8]
 8006a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a98:	9301      	str	r3, [sp, #4]
 8006a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f7ff ff5f 	bl	8006968 <lfs_dir_traverse>
 8006aaa:	6378      	str	r0, [r7, #52]	; 0x34
                    dir, off, ptag, attrs, attrcount, hasseenmove,
                    0, 0, 0, 0, 0,
                    lfs_dir_traverse_filter, &tag);
            if (filter < 0) {
 8006aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	da01      	bge.n	8006ab6 <lfs_dir_traverse+0x14e>
                return filter;
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	e0c7      	b.n	8006c46 <lfs_dir_traverse+0x2de>
            }

            if (filter) {
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f040 80c0 	bne.w	8006c3e <lfs_dir_traverse+0x2d6>
                continue;
            }

            // in filter range?
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff fa4c 	bl	8005f5e <lfs_tag_id>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	461a      	mov	r2, r3
 8006aca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	f200 80b7 	bhi.w	8006c42 <lfs_dir_traverse+0x2da>
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7ff fa41 	bl	8005f5e <lfs_tag_id>
 8006adc:	4603      	mov	r3, r0
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	f240 80ac 	bls.w	8006c42 <lfs_dir_traverse+0x2da>
                continue;
            }
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff fa0c 	bl	8005f0a <lfs_tag_type3>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f43f af3e 	beq.w	8006976 <lfs_dir_traverse+0xe>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff fa04 	bl	8005f0a <lfs_tag_type3>
 8006b02:	4603      	mov	r3, r0
 8006b04:	461a      	mov	r2, r3
 8006b06:	f240 1301 	movw	r3, #257	; 0x101
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d138      	bne.n	8006b80 <lfs_dir_traverse+0x218>
            uint16_t fromid = lfs_tag_size(tag);
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7ff fa34 	bl	8005f7e <lfs_tag_size>
 8006b16:	4603      	mov	r3, r0
 8006b18:	84fb      	strh	r3, [r7, #38]	; 0x26
            uint16_t toid = lfs_tag_id(tag);
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7ff fa1e 	bl	8005f5e <lfs_tag_id>
 8006b22:	4603      	mov	r3, r0
 8006b24:	84bb      	strh	r3, [r7, #36]	; 0x24
            int err = lfs_dir_traverse(lfs,
 8006b26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b28:	3301      	adds	r3, #1
 8006b2a:	b29b      	uxth	r3, r3
                    buffer, 0, LFS_BLOCK_NULL, NULL, 0, true,
                    LFS_MKTAG(0x600, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0),
                    fromid, fromid+1, toid-fromid+diff,
 8006b2c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8006b2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b30:	1a8a      	subs	r2, r1, r2
 8006b32:	b291      	uxth	r1, r2
 8006b34:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8006b38:	440a      	add	r2, r1
 8006b3a:	b292      	uxth	r2, r2
            int err = lfs_dir_traverse(lfs,
 8006b3c:	b212      	sxth	r2, r2
 8006b3e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b40:	9109      	str	r1, [sp, #36]	; 0x24
 8006b42:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006b44:	9108      	str	r1, [sp, #32]
 8006b46:	9207      	str	r2, [sp, #28]
 8006b48:	9306      	str	r3, [sp, #24]
 8006b4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b4c:	9305      	str	r3, [sp, #20]
 8006b4e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006b52:	9304      	str	r3, [sp, #16]
 8006b54:	4b41      	ldr	r3, [pc, #260]	; (8006c5c <lfs_dir_traverse+0x2f4>)
 8006b56:	9303      	str	r3, [sp, #12]
 8006b58:	2301      	movs	r3, #1
 8006b5a:	9302      	str	r3, [sp, #8]
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	9301      	str	r3, [sp, #4]
 8006b60:	2300      	movs	r3, #0
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b68:	2200      	movs	r2, #0
 8006b6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff fefb 	bl	8006968 <lfs_dir_traverse>
 8006b72:	6238      	str	r0, [r7, #32]
                    cb, data);
            if (err) {
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f43f aefd 	beq.w	8006976 <lfs_dir_traverse+0xe>
                return err;
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	e062      	b.n	8006c46 <lfs_dir_traverse+0x2de>
            }
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff f9c1 	bl	8005f0a <lfs_tag_type3>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8006b8e:	d144      	bne.n	8006c1a <lfs_dir_traverse+0x2b2>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8006b90:	2300      	movs	r3, #0
 8006b92:	643b      	str	r3, [r7, #64]	; 0x40
 8006b94:	e038      	b.n	8006c08 <lfs_dir_traverse+0x2a0>
                const struct lfs_attr *a = buffer;
 8006b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8006b9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba8:	4413      	add	r3, r2
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006bb0:	051c      	lsls	r4, r3, #20
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff f9d2 	bl	8005f5e <lfs_tag_id>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8006bc2:	4413      	add	r3, r2
 8006bc4:	029b      	lsls	r3, r3, #10
 8006bc6:	ea44 0103 	orr.w	r1, r4, r3
 8006bca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bcc:	4613      	mov	r3, r2
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	4413      	add	r3, r2
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8006bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006be0:	4613      	mov	r3, r2
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	461a      	mov	r2, r3
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	4413      	add	r3, r2
 8006bee:	685a      	ldr	r2, [r3, #4]
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8006bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bf2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8006bf4:	4798      	blx	r3
 8006bf6:	62b8      	str	r0, [r7, #40]	; 0x28
                if (err) {
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <lfs_dir_traverse+0x29a>
                    return err;
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	e021      	b.n	8006c46 <lfs_dir_traverse+0x2de>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8006c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c04:	3301      	adds	r3, #1
 8006c06:	643b      	str	r3, [r7, #64]	; 0x40
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff f9b7 	bl	8005f7e <lfs_tag_size>
 8006c10:	4602      	mov	r2, r0
 8006c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d3be      	bcc.n	8006b96 <lfs_dir_traverse+0x22e>
 8006c18:	e6ad      	b.n	8006976 <lfs_dir_traverse+0xe>
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8006c1a:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8006c1e:	029a      	lsls	r2, r3, #10
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	18d1      	adds	r1, r2, r3
 8006c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c28:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8006c2a:	4798      	blx	r3
 8006c2c:	6338      	str	r0, [r7, #48]	; 0x30
            if (err) {
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f43f aea0 	beq.w	8006976 <lfs_dir_traverse+0xe>
                return err;
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	e005      	b.n	8006c46 <lfs_dir_traverse+0x2de>
            continue;
 8006c3a:	bf00      	nop
 8006c3c:	e69b      	b.n	8006976 <lfs_dir_traverse+0xe>
                continue;
 8006c3e:	bf00      	nop
 8006c40:	e699      	b.n	8006976 <lfs_dir_traverse+0xe>
                continue;
 8006c42:	bf00      	nop
    while (true) {
 8006c44:	e697      	b.n	8006976 <lfs_dir_traverse+0xe>
            }
        }
    }
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	374c      	adds	r7, #76	; 0x4c
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd90      	pop	{r4, r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	7ffffc00 	.word	0x7ffffc00
 8006c54:	7ff00000 	.word	0x7ff00000
 8006c58:	080068b5 	.word	0x080068b5
 8006c5c:	600ffc00 	.word	0x600ffc00

08006c60 <lfs_dir_fetchmatch>:

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8006c60:	b590      	push	{r4, r7, lr}
 8006c62:	b09f      	sub	sp, #124	; 0x7c
 8006c64:	af04      	add	r7, sp, #16
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
 8006c6c:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8006c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c72:	667b      	str	r3, [r7, #100]	; 0x64

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8006c74:	2300      	movs	r3, #0
 8006c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c78:	2300      	movs	r3, #0
 8006c7a:	633b      	str	r3, [r7, #48]	; 0x30
    int r = 0;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8006c80:	2300      	movs	r3, #0
 8006c82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c84:	e052      	b.n	8006d2c <lfs_dir_fetchmatch+0xcc>
        int err = lfs_bd_read(lfs,
 8006c86:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8006c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8006c90:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8006c92:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8006c96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c98:	0092      	lsls	r2, r2, #2
 8006c9a:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8006c9c:	2104      	movs	r1, #4
 8006c9e:	9103      	str	r1, [sp, #12]
 8006ca0:	9202      	str	r2, [sp, #8]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	9201      	str	r2, [sp, #4]
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	2304      	movs	r3, #4
 8006caa:	4602      	mov	r2, r0
 8006cac:	2100      	movs	r1, #0
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f7fe fd92 	bl	80057d8 <lfs_bd_read>
 8006cb4:	6378      	str	r0, [r7, #52]	; 0x34
        revs[i] = lfs_fromle32(revs[i]);
 8006cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	3368      	adds	r3, #104	; 0x68
 8006cbc:	443b      	add	r3, r7
 8006cbe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe fd1c 	bl	8005700 <lfs_fromle32>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	3368      	adds	r3, #104	; 0x68
 8006cd0:	443b      	add	r3, r7
 8006cd2:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 8006cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <lfs_dir_fetchmatch+0x88>
 8006cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cde:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006ce2:	d001      	beq.n	8006ce8 <lfs_dir_fetchmatch+0x88>
            return err;
 8006ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce6:	e2e9      	b.n	80072bc <lfs_dir_fetchmatch+0x65c>
        }

        if (err != LFS_ERR_CORRUPT &&
 8006ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cea:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006cee:	d01a      	beq.n	8006d26 <lfs_dir_fetchmatch+0xc6>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8006cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	3368      	adds	r3, #104	; 0x68
 8006cf6:	443b      	add	r3, r7
 8006cf8:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8006cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cfe:	3301      	adds	r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	bfb8      	it	lt
 8006d08:	425b      	neglt	r3, r3
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	3368      	adds	r3, #104	; 0x68
 8006d0e:	443b      	add	r3, r7
 8006d10:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006d14:	4619      	mov	r1, r3
 8006d16:	4610      	mov	r0, r2
 8006d18:	f7fe fce4 	bl	80056e4 <lfs_scmp>
 8006d1c:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	dd01      	ble.n	8006d26 <lfs_dir_fetchmatch+0xc6>
            r = i;
 8006d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d24:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8006d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d28:	3301      	adds	r3, #1
 8006d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	dda9      	ble.n	8006c86 <lfs_dir_fetchmatch+0x26>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8006d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	bfb8      	it	lt
 8006d3c:	425b      	neglt	r3, r3
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	4413      	add	r3, r2
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8006d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	bfb8      	it	lt
 8006d56:	425b      	neglt	r3, r3
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8006d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	bfb8      	it	lt
 8006d6e:	425b      	neglt	r3, r3
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	3368      	adds	r3, #104	; 0x68
 8006d74:	443b      	add	r3, r7
 8006d76:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2200      	movs	r2, #0
 8006d82:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8006d84:	2300      	movs	r3, #0
 8006d86:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d88:	e289      	b.n	800729e <lfs_dir_fetchmatch+0x63e>
        lfs_off_t off = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = LFS_BLOCK_NULL;
 8006d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d92:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006d9a:	4a90      	ldr	r2, [pc, #576]	; (8006fdc <lfs_dir_fetchmatch+0x37c>)
 8006d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006da0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006da4:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8006da8:	2300      	movs	r3, #0
 8006daa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 8006dae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006db0:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe fcad 	bl	8005716 <lfs_tole32>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(LFS_BLOCK_NULL, &dir->rev, sizeof(dir->rev));
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	2204      	movs	r2, #4
 8006dc8:	4619      	mov	r1, r3
 8006dca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dce:	f003 fae9 	bl	800a3a4 <lfs_crc>
 8006dd2:	6478      	str	r0, [r7, #68]	; 0x44
        dir->rev = lfs_fromle32(dir->rev);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fe fc91 	bl	8005700 <lfs_fromle32>
 8006dde:	4602      	mov	r2, r0
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8006de4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006de6:	f7ff f8d7 	bl	8005f98 <lfs_tag_dsize>
 8006dea:	4602      	mov	r2, r0
 8006dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dee:	4413      	add	r3, r2
 8006df0:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 8006df2:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8006df8:	69d8      	ldr	r0, [r3, #28]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2204      	movs	r2, #4
 8006e00:	9203      	str	r2, [sp, #12]
 8006e02:	f107 0220 	add.w	r2, r7, #32
 8006e06:	9202      	str	r2, [sp, #8]
 8006e08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e0a:	9201      	str	r2, [sp, #4]
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	4603      	mov	r3, r0
 8006e10:	460a      	mov	r2, r1
 8006e12:	2100      	movs	r1, #0
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f7fe fcdf 	bl	80057d8 <lfs_bd_read>
 8006e1a:	63f8      	str	r0, [r7, #60]	; 0x3c
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8006e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d009      	beq.n	8006e36 <lfs_dir_fetchmatch+0x1d6>
                if (err == LFS_ERR_CORRUPT) {
 8006e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e24:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006e28:	d103      	bne.n	8006e32 <lfs_dir_fetchmatch+0x1d2>
                    // can't continue?
                    dir->erased = false;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	759a      	strb	r2, [r3, #22]
                    break;
 8006e30:	e1bd      	b.n	80071ae <lfs_dir_fetchmatch+0x54e>
                }
                return err;
 8006e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e34:	e242      	b.n	80072bc <lfs_dir_fetchmatch+0x65c>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8006e36:	f107 0320 	add.w	r3, r7, #32
 8006e3a:	2204      	movs	r2, #4
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006e40:	f003 fab0 	bl	800a3a4 <lfs_crc>
 8006e44:	6478      	str	r0, [r7, #68]	; 0x44
            tag = lfs_frombe32(tag) ^ ptag;
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fe fc70 	bl	800572e <lfs_frombe32>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e52:	4053      	eors	r3, r2
 8006e54:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag) ||
 8006e56:	6a3b      	ldr	r3, [r7, #32]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff f825 	bl	8005ea8 <lfs_tag_isvalid>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	f083 0301 	eor.w	r3, r3, #1
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10b      	bne.n	8006e82 <lfs_dir_fetchmatch+0x222>
                    off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7ff f893 	bl	8005f98 <lfs_tag_dsize>
 8006e72:	4602      	mov	r2, r0
 8006e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e76:	441a      	add	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e7c:	69db      	ldr	r3, [r3, #28]
            if (!lfs_tag_isvalid(tag) ||
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d91b      	bls.n	8006eba <lfs_dir_fetchmatch+0x25a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8006e82:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006e84:	f7ff f831 	bl	8005eea <lfs_tag_type1>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006e8e:	d10d      	bne.n	8006eac <lfs_dir_fetchmatch+0x24c>
                        dir->off % lfs->cfg->prog_size == 0);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e98:	6992      	ldr	r2, [r2, #24]
 8006e9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e9e:	fb01 f202 	mul.w	r2, r1, r2
 8006ea2:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <lfs_dir_fetchmatch+0x24c>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e000      	b.n	8006eae <lfs_dir_fetchmatch+0x24e>
 8006eac:	2300      	movs	r3, #0
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	759a      	strb	r2, [r3, #22]
                break;
 8006eb8:	e179      	b.n	80071ae <lfs_dir_fetchmatch+0x54e>
            }

            ptag = tag;
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff f812 	bl	8005eea <lfs_tag_type1>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006ecc:	d15f      	bne.n	8006f8e <lfs_dir_fetchmatch+0x32e>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8006ece:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8006ed4:	69dc      	ldr	r4, [r3, #28]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006edc:	3204      	adds	r2, #4
 8006ede:	2104      	movs	r1, #4
 8006ee0:	9103      	str	r1, [sp, #12]
 8006ee2:	f107 011c 	add.w	r1, r7, #28
 8006ee6:	9102      	str	r1, [sp, #8]
 8006ee8:	9201      	str	r2, [sp, #4]
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	4623      	mov	r3, r4
 8006eee:	4602      	mov	r2, r0
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7fe fc70 	bl	80057d8 <lfs_bd_read>
 8006ef8:	63f8      	str	r0, [r7, #60]	; 0x3c
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8006efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d009      	beq.n	8006f14 <lfs_dir_fetchmatch+0x2b4>
                    if (err == LFS_ERR_CORRUPT) {
 8006f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f02:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006f06:	d103      	bne.n	8006f10 <lfs_dir_fetchmatch+0x2b0>
                        dir->erased = false;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	759a      	strb	r2, [r3, #22]
                        break;
 8006f0e:	e14e      	b.n	80071ae <lfs_dir_fetchmatch+0x54e>
                    }
                    return err;
 8006f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 8006f12:	e1d3      	b.n	80072bc <lfs_dir_fetchmatch+0x65c>
                }
                dcrc = lfs_fromle32(dcrc);
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe fbf2 	bl	8005700 <lfs_fromle32>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d003      	beq.n	8006f30 <lfs_dir_fetchmatch+0x2d0>
                    dir->erased = false;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	759a      	strb	r2, [r3, #22]
                    break;
 8006f2e:	e13e      	b.n	80071ae <lfs_dir_fetchmatch+0x54e>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8006f30:	6a3b      	ldr	r3, [r7, #32]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fe fff9 	bl	8005f2a <lfs_tag_chunk>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	07db      	lsls	r3, r3, #31
 8006f3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f3e:	4053      	eors	r3, r2
 8006f40:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers
                lfs->seed ^= crc;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f48:	405a      	eors	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8006f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f50:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7ff f81f 	bl	8005f98 <lfs_tag_dsize>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f5e:	441a      	add	r2, r3
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f68:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006f70:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8006f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8006f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006f84:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = LFS_BLOCK_NULL;
 8006f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f8c:	e72a      	b.n	8006de4 <lfs_dir_fetchmatch+0x184>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8006f8e:	2304      	movs	r3, #4
 8006f90:	643b      	str	r3, [r7, #64]	; 0x40
 8006f92:	e030      	b.n	8006ff6 <lfs_dir_fetchmatch+0x396>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8006f94:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8006f9a:	69dc      	ldr	r4, [r3, #28]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fa4:	440a      	add	r2, r1
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	9103      	str	r1, [sp, #12]
 8006faa:	f107 011b 	add.w	r1, r7, #27
 8006fae:	9102      	str	r1, [sp, #8]
 8006fb0:	9201      	str	r2, [sp, #4]
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	4623      	mov	r3, r4
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	2100      	movs	r1, #0
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f7fe fc0c 	bl	80057d8 <lfs_bd_read>
 8006fc0:	63f8      	str	r0, [r7, #60]	; 0x3c
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8006fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <lfs_dir_fetchmatch+0x380>
                    if (err == LFS_ERR_CORRUPT) {
 8006fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fca:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006fce:	d103      	bne.n	8006fd8 <lfs_dir_fetchmatch+0x378>
                        dir->erased = false;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	759a      	strb	r2, [r3, #22]
 8006fd6:	e016      	b.n	8007006 <lfs_dir_fetchmatch+0x3a6>
                        break;
                    }
                    return err;
 8006fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 8006fda:	e16f      	b.n	80072bc <lfs_dir_fetchmatch+0x65c>
 8006fdc:	08016d64 	.word	0x08016d64
                }

                crc = lfs_crc(crc, &dat, 1);
 8006fe0:	f107 031b 	add.w	r3, r7, #27
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006fea:	f003 f9db 	bl	800a3a4 <lfs_crc>
 8006fee:	6478      	str	r0, [r7, #68]	; 0x44
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8006ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fe ffcd 	bl	8005f98 <lfs_tag_dsize>
 8006ffe:	4602      	mov	r2, r0
 8007000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007002:	4293      	cmp	r3, r2
 8007004:	d3c6      	bcc.n	8006f94 <lfs_dir_fetchmatch+0x334>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe ff6e 	bl	8005eea <lfs_tag_type1>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d113      	bne.n	800703c <lfs_dir_fetchmatch+0x3dc>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe ffa1 	bl	8005f5e <lfs_tag_id>
 800701c:	4603      	mov	r3, r0
 800701e:	461a      	mov	r2, r3
 8007020:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007024:	4293      	cmp	r3, r2
 8007026:	f200 8081 	bhi.w	800712c <lfs_dir_fetchmatch+0x4cc>
                    tempcount = lfs_tag_id(tag) + 1;
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe ff96 	bl	8005f5e <lfs_tag_id>
 8007032:	4603      	mov	r3, r0
 8007034:	3301      	adds	r3, #1
 8007036:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800703a:	e077      	b.n	800712c <lfs_dir_fetchmatch+0x4cc>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe ff53 	bl	8005eea <lfs_tag_type1>
 8007044:	4603      	mov	r3, r0
 8007046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800704a:	d134      	bne.n	80070b6 <lfs_dir_fetchmatch+0x456>
                tempcount += lfs_tag_splice(tag);
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe ff78 	bl	8005f44 <lfs_tag_splice>
 8007054:	4603      	mov	r3, r0
 8007056:	b29a      	uxth	r2, r3
 8007058:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800705c:	4413      	add	r3, r2
 800705e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8007062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007064:	4b97      	ldr	r3, [pc, #604]	; (80072c4 <lfs_dir_fetchmatch+0x664>)
 8007066:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8007068:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800706c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8007070:	6a3a      	ldr	r2, [r7, #32]
 8007072:	4293      	cmp	r3, r2
 8007074:	d104      	bne.n	8007080 <lfs_dir_fetchmatch+0x420>
                    tempbesttag |= 0x80000000;
 8007076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800707c:	64bb      	str	r3, [r7, #72]	; 0x48
 800707e:	e055      	b.n	800712c <lfs_dir_fetchmatch+0x4cc>
                } else if (tempbesttag != -1 &&
 8007080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007086:	d051      	beq.n	800712c <lfs_dir_fetchmatch+0x4cc>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	4618      	mov	r0, r3
 800708c:	f7fe ff67 	bl	8005f5e <lfs_tag_id>
 8007090:	4603      	mov	r3, r0
 8007092:	461c      	mov	r4, r3
 8007094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe ff61 	bl	8005f5e <lfs_tag_id>
 800709c:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800709e:	429c      	cmp	r4, r3
 80070a0:	d844      	bhi.n	800712c <lfs_dir_fetchmatch+0x4cc>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fe ff4d 	bl	8005f44 <lfs_tag_splice>
 80070aa:	4603      	mov	r3, r0
 80070ac:	029a      	lsls	r2, r3, #10
 80070ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070b0:	4413      	add	r3, r2
 80070b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80070b4:	e03a      	b.n	800712c <lfs_dir_fetchmatch+0x4cc>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe ff16 	bl	8005eea <lfs_tag_type1>
 80070be:	4603      	mov	r3, r0
 80070c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80070c4:	d132      	bne.n	800712c <lfs_dir_fetchmatch+0x4cc>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fe ff2e 	bl	8005f2a <lfs_tag_chunk>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	bf14      	ite	ne
 80070d8:	2301      	movne	r3, #1
 80070da:	2300      	moveq	r3, #0
 80070dc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 80070e0:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 80070e6:	69dc      	ldr	r4, [r3, #28]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070ee:	3204      	adds	r2, #4
 80070f0:	2108      	movs	r1, #8
 80070f2:	9103      	str	r1, [sp, #12]
 80070f4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80070f8:	9102      	str	r1, [sp, #8]
 80070fa:	9201      	str	r2, [sp, #4]
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	4623      	mov	r3, r4
 8007100:	4602      	mov	r2, r0
 8007102:	2100      	movs	r1, #0
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f7fe fb67 	bl	80057d8 <lfs_bd_read>
 800710a:	63f8      	str	r0, [r7, #60]	; 0x3c
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800710c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d007      	beq.n	8007122 <lfs_dir_fetchmatch+0x4c2>
                    if (err == LFS_ERR_CORRUPT) {
 8007112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007114:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007118:	d103      	bne.n	8007122 <lfs_dir_fetchmatch+0x4c2>
                        dir->erased = false;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2200      	movs	r2, #0
 800711e:	759a      	strb	r2, [r3, #22]
                        break;
 8007120:	e045      	b.n	80071ae <lfs_dir_fetchmatch+0x54e>
                    }
                }
                lfs_pair_fromle32(temptail);
 8007122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007126:	4618      	mov	r0, r3
 8007128:	f7fe fe8a 	bl	8005e40 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800712c:	6a3a      	ldr	r2, [r7, #32]
 800712e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007130:	405a      	eors	r2, r3
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	4013      	ands	r3, r2
 8007136:	2b00      	cmp	r3, #0
 8007138:	f47f ae54 	bne.w	8006de4 <lfs_dir_fetchmatch+0x184>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800713c:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8007142:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 8007144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007146:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	f107 0210 	add.w	r2, r7, #16
 800714e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007152:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8007156:	4798      	blx	r3
 8007158:	63b8      	str	r0, [r7, #56]	; 0x38
                if (res < 0) {
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	2b00      	cmp	r3, #0
 800715e:	da09      	bge.n	8007174 <lfs_dir_fetchmatch+0x514>
                    if (res == LFS_ERR_CORRUPT) {
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007166:	d103      	bne.n	8007170 <lfs_dir_fetchmatch+0x510>
                        dir->erased = false;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2200      	movs	r2, #0
 800716c:	759a      	strb	r2, [r3, #22]
 800716e:	e01e      	b.n	80071ae <lfs_dir_fetchmatch+0x54e>
                        break;
                    }
                    return res;
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                return err;
 8007172:	e0a3      	b.n	80072bc <lfs_dir_fetchmatch+0x65c>
                }

                if (res == LFS_CMP_EQ) {
 8007174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007176:	2b00      	cmp	r3, #0
 8007178:	d102      	bne.n	8007180 <lfs_dir_fetchmatch+0x520>
                    // found a match
                    tempbesttag = tag;
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	64bb      	str	r3, [r7, #72]	; 0x48
 800717e:	e631      	b.n	8006de4 <lfs_dir_fetchmatch+0x184>
                } else if (res == LFS_CMP_GT &&
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	2b02      	cmp	r3, #2
 8007184:	f47f ae2e 	bne.w	8006de4 <lfs_dir_fetchmatch+0x184>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe fee7 	bl	8005f5e <lfs_tag_id>
 8007190:	4603      	mov	r3, r0
 8007192:	461c      	mov	r4, r3
 8007194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe fee1 	bl	8005f5e <lfs_tag_id>
 800719c:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800719e:	429c      	cmp	r4, r3
 80071a0:	f63f ae20 	bhi.w	8006de4 <lfs_dir_fetchmatch+0x184>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ac:	e61a      	b.n	8006de4 <lfs_dir_fetchmatch+0x184>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d100      	bne.n	80071b8 <lfs_dir_fetchmatch+0x558>
 80071b6:	e05d      	b.n	8007274 <lfs_dir_fetchmatch+0x614>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair)) {
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3330      	adds	r3, #48	; 0x30
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	4611      	mov	r1, r2
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fe ff65 	bl	8006090 <lfs_gstate_hasmovehere>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d028      	beq.n	800721e <lfs_dir_fetchmatch+0x5be>
                if (lfs_tag_id(lfs->gstate.tag) == lfs_tag_id(besttag)) {
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fe fec4 	bl	8005f5e <lfs_tag_id>
 80071d6:	4603      	mov	r3, r0
 80071d8:	461c      	mov	r4, r3
 80071da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fe febe 	bl	8005f5e <lfs_tag_id>
 80071e2:	4603      	mov	r3, r0
 80071e4:	429c      	cmp	r4, r3
 80071e6:	d104      	bne.n	80071f2 <lfs_dir_fetchmatch+0x592>
                    besttag |= 0x80000000;
 80071e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071ee:	667b      	str	r3, [r7, #100]	; 0x64
 80071f0:	e015      	b.n	800721e <lfs_dir_fetchmatch+0x5be>
                } else if (besttag != -1 &&
 80071f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071f8:	d011      	beq.n	800721e <lfs_dir_fetchmatch+0x5be>
                        lfs_tag_id(lfs->gstate.tag) < lfs_tag_id(besttag)) {
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fe fead 	bl	8005f5e <lfs_tag_id>
 8007204:	4603      	mov	r3, r0
 8007206:	461c      	mov	r4, r3
 8007208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800720a:	4618      	mov	r0, r3
 800720c:	f7fe fea7 	bl	8005f5e <lfs_tag_id>
 8007210:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8007212:	429c      	cmp	r4, r3
 8007214:	d203      	bcs.n	800721e <lfs_dir_fetchmatch+0x5be>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8007216:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007218:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800721c:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 800721e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00f      	beq.n	8007244 <lfs_dir_fetchmatch+0x5e4>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8007224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe fe99 	bl	8005f5e <lfs_tag_id>
 800722c:	4603      	mov	r3, r0
 800722e:	461a      	mov	r2, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	8a9b      	ldrh	r3, [r3, #20]
 8007234:	4619      	mov	r1, r3
 8007236:	4610      	mov	r0, r2
 8007238:	f7fe f9f2 	bl	8005620 <lfs_min>
 800723c:	4603      	mov	r3, r0
 800723e:	b29a      	uxth	r2, r3
 8007240:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007242:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8007244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fe2e 	bl	8005ea8 <lfs_tag_isvalid>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <lfs_dir_fetchmatch+0x5f6>
                return besttag;
 8007252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007254:	e032      	b.n	80072bc <lfs_dir_fetchmatch+0x65c>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8007256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007258:	4618      	mov	r0, r3
 800725a:	f7fe fe80 	bl	8005f5e <lfs_tag_id>
 800725e:	4603      	mov	r3, r0
 8007260:	461a      	mov	r2, r3
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	8a9b      	ldrh	r3, [r3, #20]
 8007266:	429a      	cmp	r2, r3
 8007268:	d202      	bcs.n	8007270 <lfs_dir_fetchmatch+0x610>
                return LFS_ERR_NOENT;
 800726a:	f06f 0301 	mvn.w	r3, #1
 800726e:	e025      	b.n	80072bc <lfs_dir_fetchmatch+0x65c>
            } else {
                return 0;
 8007270:	2300      	movs	r3, #0
 8007272:	e023      	b.n	80072bc <lfs_dir_fetchmatch+0x65c>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	4618      	mov	r0, r3
 8007278:	f7fe fd88 	bl	8005d8c <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 800727c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800727e:	3301      	adds	r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	bfb8      	it	lt
 8007288:	425b      	neglt	r3, r3
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	3368      	adds	r3, #104	; 0x68
 800728e:	443b      	add	r3, r7
 8007290:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8007298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800729a:	3301      	adds	r3, #1
 800729c:	65bb      	str	r3, [r7, #88]	; 0x58
 800729e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	f77f ad72 	ble.w	8006d8a <lfs_dir_fetchmatch+0x12a>
    }

    LFS_ERROR("Corrupted dir pair at %"PRIx32" %"PRIx32,
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f240 31cd 	movw	r1, #973	; 0x3cd
 80072b2:	4805      	ldr	r0, [pc, #20]	; (80072c8 <lfs_dir_fetchmatch+0x668>)
 80072b4:	f00e f9a6 	bl	8015604 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 80072b8:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 80072bc:	4618      	mov	r0, r3
 80072be:	376c      	adds	r7, #108	; 0x6c
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd90      	pop	{r4, r7, pc}
 80072c4:	000ffc00 	.word	0x000ffc00
 80072c8:	08016d34 	.word	0x08016d34

080072cc <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b088      	sub	sp, #32
 80072d0:	af04      	add	r7, sp, #16
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=0 can never match a tag since this
    // pattern has the invalid bit set
    return lfs_dir_fetchmatch(lfs, dir, pair, -1, 0, NULL, NULL, NULL);
 80072d8:	2300      	movs	r3, #0
 80072da:	9303      	str	r3, [sp, #12]
 80072dc:	2300      	movs	r3, #0
 80072de:	9302      	str	r3, [sp, #8]
 80072e0:	2300      	movs	r3, #0
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	2300      	movs	r3, #0
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	68b9      	ldr	r1, [r7, #8]
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f7ff fcb5 	bl	8006c60 <lfs_dir_fetchmatch>
 80072f6:	4603      	mov	r3, r0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        struct lfs_gstate *gstate) {
 8007300:	b580      	push	{r7, lr}
 8007302:	b08a      	sub	sp, #40	; 0x28
 8007304:	af02      	add	r7, sp, #8
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
    struct lfs_gstate temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800730c:	f107 0310 	add.w	r3, r7, #16
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	4b12      	ldr	r3, [pc, #72]	; (800735c <lfs_dir_getgstate+0x5c>)
 8007314:	4a12      	ldr	r2, [pc, #72]	; (8007360 <lfs_dir_getgstate+0x60>)
 8007316:	68b9      	ldr	r1, [r7, #8]
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f7ff f9d5 	bl	80066c8 <lfs_dir_get>
 800731e:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	2b00      	cmp	r3, #0
 8007324:	da05      	bge.n	8007332 <lfs_dir_getgstate+0x32>
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	f113 0f02 	cmn.w	r3, #2
 800732c:	d001      	beq.n	8007332 <lfs_dir_getgstate+0x32>
        return res;
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	e00f      	b.n	8007352 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	f113 0f02 	cmn.w	r3, #2
 8007338:	d00a      	beq.n	8007350 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800733a:	f107 0310 	add.w	r3, r7, #16
 800733e:	4618      	mov	r0, r3
 8007340:	f7fe ff2a 	bl	8006198 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8007344:	f107 0310 	add.w	r3, r7, #16
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7fe fe38 	bl	8005fc0 <lfs_gstate_xor>
    }

    return 0;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3720      	adds	r7, #32
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	7ff0000c 	.word	0x7ff0000c
 8007360:	7ff00000 	.word	0x7ff00000

08007364 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8007364:	b590      	push	{r4, r7, lr}
 8007366:	b08f      	sub	sp, #60	; 0x3c
 8007368:	af04      	add	r7, sp, #16
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	689c      	ldr	r4, [r3, #8]
 8007382:	68b8      	ldr	r0, [r7, #8]
 8007384:	f7fe fdfb 	bl	8005f7e <lfs_tag_size>
 8007388:	4603      	mov	r3, r0
 800738a:	4619      	mov	r1, r3
 800738c:	4620      	mov	r0, r4
 800738e:	f7fe f947 	bl	8005620 <lfs_min>
 8007392:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8007394:	6a3c      	ldr	r4, [r7, #32]
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69fa      	ldr	r2, [r7, #28]
 800739c:	6852      	ldr	r2, [r2, #4]
 800739e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073a0:	6849      	ldr	r1, [r1, #4]
 80073a2:	69b8      	ldr	r0, [r7, #24]
 80073a4:	9003      	str	r0, [sp, #12]
 80073a6:	9102      	str	r1, [sp, #8]
 80073a8:	9201      	str	r2, [sp, #4]
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	4622      	mov	r2, r4
 80073b0:	2100      	movs	r1, #0
 80073b2:	6a38      	ldr	r0, [r7, #32]
 80073b4:	f7fe fb20 	bl	80059f8 <lfs_bd_cmp>
 80073b8:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <lfs_dir_find_match+0x60>
        return res;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	e014      	b.n	80073ee <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	689c      	ldr	r4, [r3, #8]
 80073c8:	68b8      	ldr	r0, [r7, #8]
 80073ca:	f7fe fdd8 	bl	8005f7e <lfs_tag_size>
 80073ce:	4603      	mov	r3, r0
 80073d0:	429c      	cmp	r4, r3
 80073d2:	d00b      	beq.n	80073ec <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	689c      	ldr	r4, [r3, #8]
 80073d8:	68b8      	ldr	r0, [r7, #8]
 80073da:	f7fe fdd0 	bl	8005f7e <lfs_tag_size>
 80073de:	4603      	mov	r3, r0
 80073e0:	429c      	cmp	r4, r3
 80073e2:	d201      	bcs.n	80073e8 <lfs_dir_find_match+0x84>
 80073e4:	2301      	movs	r3, #1
 80073e6:	e002      	b.n	80073ee <lfs_dir_find_match+0x8a>
 80073e8:	2302      	movs	r3, #2
 80073ea:	e000      	b.n	80073ee <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	372c      	adds	r7, #44	; 0x2c
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd90      	pop	{r4, r7, pc}

080073f6 <lfs_dir_commitprog>:
    lfs_off_t begin;
    lfs_off_t end;
};

static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 80073f6:	b590      	push	{r4, r7, lr}
 80073f8:	b08b      	sub	sp, #44	; 0x2c
 80073fa:	af04      	add	r7, sp, #16
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	607a      	str	r2, [r7, #4]
 8007402:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f103 0010 	add.w	r0, r3, #16
 800740a:	68fc      	ldr	r4, [r7, #12]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	6852      	ldr	r2, [r2, #4]
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	9103      	str	r1, [sp, #12]
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	9102      	str	r1, [sp, #8]
 800741c:	9201      	str	r2, [sp, #4]
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	2300      	movs	r3, #0
 8007422:	4622      	mov	r2, r4
 8007424:	4601      	mov	r1, r0
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7fe fbda 	bl	8005be0 <lfs_bd_prog>
 800742c:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <lfs_dir_commitprog+0x42>
        return err;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	e010      	b.n	800745a <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	4618      	mov	r0, r3
 8007442:	f002 ffaf 	bl	800a3a4 <lfs_crc>
 8007446:	4602      	mov	r2, r0
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	441a      	add	r2, r3
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	605a      	str	r2, [r3, #4]
    return 0;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	371c      	adds	r7, #28
 800745e:	46bd      	mov	sp, r7
 8007460:	bd90      	pop	{r4, r7, pc}

08007462 <lfs_dir_commitattr>:

static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8007462:	b590      	push	{r4, r7, lr}
 8007464:	b08f      	sub	sp, #60	; 0x3c
 8007466:	af04      	add	r7, sp, #16
 8007468:	60f8      	str	r0, [r7, #12]
 800746a:	60b9      	str	r1, [r7, #8]
 800746c:	607a      	str	r2, [r7, #4]
 800746e:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7fe fd91 	bl	8005f98 <lfs_tag_dsize>
 8007476:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	441a      	add	r2, r3
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	429a      	cmp	r2, r3
 8007486:	d902      	bls.n	800748e <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8007488:	f06f 031b 	mvn.w	r3, #27
 800748c:	e065      	b.n	800755a <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	4053      	eors	r3, r2
 800749a:	4618      	mov	r0, r3
 800749c:	f7fe f953 	bl	8005746 <lfs_tobe32>
 80074a0:	4603      	mov	r3, r0
 80074a2:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80074a4:	f107 0214 	add.w	r2, r7, #20
 80074a8:	2304      	movs	r3, #4
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f7ff ffa2 	bl	80073f6 <lfs_dir_commitprog>
 80074b2:	61f8      	str	r0, [r7, #28]
    if (err) {
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <lfs_dir_commitattr+0x5c>
        return err;
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	e04d      	b.n	800755a <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	db0c      	blt.n	80074de <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	3b04      	subs	r3, #4
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	68b9      	ldr	r1, [r7, #8]
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f7ff ff92 	bl	80073f6 <lfs_dir_commitprog>
 80074d2:	61f8      	str	r0, [r7, #28]
        if (err) {
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d039      	beq.n	800754e <lfs_dir_commitattr+0xec>
            return err;
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	e03d      	b.n	800755a <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80074e2:	2300      	movs	r3, #0
 80074e4:	627b      	str	r3, [r7, #36]	; 0x24
 80074e6:	e02d      	b.n	8007544 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80074e8:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 80074ea:	6a3a      	ldr	r2, [r7, #32]
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80074f0:	1f1c      	subs	r4, r3, #4
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 80074fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074fc:	440a      	add	r2, r1
 80074fe:	2101      	movs	r1, #1
 8007500:	9103      	str	r1, [sp, #12]
 8007502:	f107 0113 	add.w	r1, r7, #19
 8007506:	9102      	str	r1, [sp, #8]
 8007508:	9201      	str	r2, [sp, #4]
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	4623      	mov	r3, r4
 800750e:	4602      	mov	r2, r0
 8007510:	2100      	movs	r1, #0
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f7fe f960 	bl	80057d8 <lfs_bd_read>
 8007518:	61f8      	str	r0, [r7, #28]
            if (err) {
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <lfs_dir_commitattr+0xc2>
                return err;
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	e01a      	b.n	800755a <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8007524:	f107 0213 	add.w	r2, r7, #19
 8007528:	2301      	movs	r3, #1
 800752a:	68b9      	ldr	r1, [r7, #8]
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f7ff ff62 	bl	80073f6 <lfs_dir_commitprog>
 8007532:	61f8      	str	r0, [r7, #28]
            if (err) {
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <lfs_dir_commitattr+0xdc>
                return err;
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	e00d      	b.n	800755a <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	3301      	adds	r3, #1
 8007542:	627b      	str	r3, [r7, #36]	; 0x24
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	3b04      	subs	r3, #4
 8007548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800754a:	429a      	cmp	r2, r3
 800754c:	d3cc      	bcc.n	80074e8 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	609a      	str	r2, [r3, #8]
    return 0;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	372c      	adds	r7, #44	; 0x2c
 800755e:	46bd      	mov	sp, r7
 8007560:	bd90      	pop	{r4, r7, pc}

08007562 <lfs_dir_commitcrc>:

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8007562:	b590      	push	{r4, r7, lr}
 8007564:	b097      	sub	sp, #92	; 0x5c
 8007566:	af04      	add	r7, sp, #16
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t off1 = commit->off + sizeof(lfs_tag_t);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	3304      	adds	r3, #4
 8007572:	633b      	str	r3, [r7, #48]	; 0x30
    const lfs_off_t end = lfs_alignup(off1 + sizeof(uint32_t),
 8007574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007576:	1d1a      	adds	r2, r3, #4
            lfs->cfg->prog_size);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(off1 + sizeof(uint32_t),
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	4619      	mov	r1, r3
 8007580:	4610      	mov	r0, r2
 8007582:	f7fe f872 	bl	800566a <lfs_alignup>
 8007586:	62f8      	str	r0, [r7, #44]	; 0x2c

    // create crc tags to fill up remainder of commit, note that
    // padding is not crcd, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8007588:	e09c      	b.n	80076c4 <lfs_dir_commitcrc+0x162>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	3304      	adds	r3, #4
 8007590:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8007592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800759c:	4618      	mov	r0, r3
 800759e:	f7fe f83f 	bl	8005620 <lfs_min>
 80075a2:	4602      	mov	r2, r0
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	4413      	add	r3, r2
 80075a8:	647b      	str	r3, [r7, #68]	; 0x44
        if (noff < end) {
 80075aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d206      	bcs.n	80075c0 <lfs_dir_commitcrc+0x5e>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 80075b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b4:	3b08      	subs	r3, #8
 80075b6:	4619      	mov	r1, r3
 80075b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80075ba:	f7fe f831 	bl	8005620 <lfs_min>
 80075be:	6478      	str	r0, [r7, #68]	; 0x44
        }

        // read erased state from next program unit
        lfs_tag_t tag = LFS_BLOCK_NULL;
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075c4:	61bb      	str	r3, [r7, #24]
        int err = lfs_bd_read(lfs,
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2204      	movs	r2, #4
 80075ce:	9203      	str	r2, [sp, #12]
 80075d0:	f107 0218 	add.w	r2, r7, #24
 80075d4:	9202      	str	r2, [sp, #8]
 80075d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075d8:	9201      	str	r2, [sp, #4]
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	2304      	movs	r3, #4
 80075de:	460a      	mov	r2, r1
 80075e0:	2100      	movs	r1, #0
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7fe f8f8 	bl	80057d8 <lfs_bd_read>
 80075e8:	6238      	str	r0, [r7, #32]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d005      	beq.n	80075fc <lfs_dir_commitcrc+0x9a>
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80075f6:	d001      	beq.n	80075fc <lfs_dir_commitcrc+0x9a>
            return err;
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	e0d3      	b.n	80077a4 <lfs_dir_commitcrc+0x242>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe f895 	bl	800572e <lfs_frombe32>
 8007604:	4603      	mov	r3, r0
 8007606:	43db      	mvns	r3, r3
 8007608:	0fdb      	lsrs	r3, r3, #31
 800760a:	2b00      	cmp	r3, #0
 800760c:	bf14      	ite	ne
 800760e:	2301      	movne	r3, #1
 8007610:	2300      	moveq	r3, #0
 8007612:	77fb      	strb	r3, [r7, #31]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8007614:	7ffb      	ldrb	r3, [r7, #31]
 8007616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800761a:	051a      	lsls	r2, r3, #20
 800761c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	1acb      	subs	r3, r1, r3
 8007622:	4313      	orrs	r3, r2
 8007624:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8007628:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800762c:	61bb      	str	r3, [r7, #24]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	4053      	eors	r3, r2
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe f885 	bl	8005746 <lfs_tobe32>
 800763c:	4603      	mov	r3, r0
 800763e:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f107 0110 	add.w	r1, r7, #16
 8007648:	2204      	movs	r2, #4
 800764a:	4618      	mov	r0, r3
 800764c:	f002 feaa 	bl	800a3a4 <lfs_crc>
 8007650:	4602      	mov	r2, r0
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	4618      	mov	r0, r3
 800765c:	f7fe f85b 	bl	8005716 <lfs_tole32>
 8007660:	4603      	mov	r3, r0
 8007662:	617b      	str	r3, [r7, #20]
        err = lfs_bd_prog(lfs,
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f103 0010 	add.w	r0, r3, #16
 800766a:	687c      	ldr	r4, [r7, #4]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	6852      	ldr	r2, [r2, #4]
 8007674:	2108      	movs	r1, #8
 8007676:	9103      	str	r1, [sp, #12]
 8007678:	f107 0110 	add.w	r1, r7, #16
 800767c:	9102      	str	r1, [sp, #8]
 800767e:	9201      	str	r2, [sp, #4]
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	2300      	movs	r3, #0
 8007684:	4622      	mov	r2, r4
 8007686:	4601      	mov	r1, r0
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7fe faa9 	bl	8005be0 <lfs_bd_prog>
 800768e:	6238      	str	r0, [r7, #32]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 8007690:	6a3b      	ldr	r3, [r7, #32]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <lfs_dir_commitcrc+0x138>
            return err;
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	e084      	b.n	80077a4 <lfs_dir_commitcrc+0x242>
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	4618      	mov	r0, r3
 800769e:	f7fe fc6e 	bl	8005f7e <lfs_tag_size>
 80076a2:	4603      	mov	r3, r0
 80076a4:	1d1a      	adds	r2, r3, #4
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	441a      	add	r2, r3
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 80076b0:	7ffb      	ldrb	r3, [r7, #31]
 80076b2:	07da      	lsls	r2, r3, #31
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	405a      	eors	r2, r3
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	609a      	str	r2, [r3, #8]
        commit->crc = LFS_BLOCK_NULL; // reset crc for next "commit"
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076c2:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ca:	429a      	cmp	r2, r3
 80076cc:	f63f af5d 	bhi.w	800758a <lfs_dir_commitcrc+0x28>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f103 0110 	add.w	r1, r3, #16
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	2300      	movs	r3, #0
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7fe fa4c 	bl	8005b78 <lfs_bd_sync>
 80076e0:	62b8      	str	r0, [r7, #40]	; 0x28
    if (err) {
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <lfs_dir_commitcrc+0x18a>
        return err;
 80076e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ea:	e05b      	b.n	80077a4 <lfs_dir_commitcrc+0x242>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	643b      	str	r3, [r7, #64]	; 0x40
    lfs_off_t noff = off1;
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (off < end) {
 80076f6:	e050      	b.n	800779a <lfs_dir_commitcrc+0x238>
        uint32_t crc = LFS_BLOCK_NULL;
 80076f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076fc:	63bb      	str	r3, [r7, #56]	; 0x38
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 80076fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007700:	637b      	str	r3, [r7, #52]	; 0x34
 8007702:	e025      	b.n	8007750 <lfs_dir_commitcrc+0x1ee>
            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8007704:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 8007706:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770a:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800770c:	1d18      	adds	r0, r3, #4
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2201      	movs	r2, #1
 8007714:	9203      	str	r2, [sp, #12]
 8007716:	f107 020f 	add.w	r2, r7, #15
 800771a:	9202      	str	r2, [sp, #8]
 800771c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800771e:	9201      	str	r2, [sp, #4]
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	4603      	mov	r3, r0
 8007724:	460a      	mov	r2, r1
 8007726:	2100      	movs	r1, #0
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7fe f855 	bl	80057d8 <lfs_bd_read>
 800772e:	62b8      	str	r0, [r7, #40]	; 0x28
                    commit->block, i, &dat, 1);
            if (err) {
 8007730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <lfs_dir_commitcrc+0x1d8>
                return err;
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	e034      	b.n	80077a4 <lfs_dir_commitcrc+0x242>
            }

            crc = lfs_crc(crc, &dat, 1);
 800773a:	f107 030f 	add.w	r3, r7, #15
 800773e:	2201      	movs	r2, #1
 8007740:	4619      	mov	r1, r3
 8007742:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007744:	f002 fe2e 	bl	800a3a4 <lfs_crc>
 8007748:	63b8      	str	r0, [r7, #56]	; 0x38
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800774a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774c:	3301      	adds	r3, #1
 800774e:	637b      	str	r3, [r7, #52]	; 0x34
 8007750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007752:	3304      	adds	r3, #4
 8007754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007756:	429a      	cmp	r2, r3
 8007758:	d3d4      	bcc.n	8007704 <lfs_dir_commitcrc+0x1a2>
        }

        // detected write error?
        if (crc != 0) {
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <lfs_dir_commitcrc+0x204>
            return LFS_ERR_CORRUPT;
 8007760:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8007764:	e01e      	b.n	80077a4 <lfs_dir_commitcrc+0x242>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 8007766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8007770:	4618      	mov	r0, r3
 8007772:	f7fd ff55 	bl	8005620 <lfs_min>
 8007776:	4602      	mov	r2, r0
 8007778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800777a:	4413      	add	r3, r2
 800777c:	643b      	str	r3, [r7, #64]	; 0x40
        if (off < end) {
 800777e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007782:	429a      	cmp	r2, r3
 8007784:	d206      	bcs.n	8007794 <lfs_dir_commitcrc+0x232>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 8007786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007788:	3b08      	subs	r3, #8
 800778a:	4619      	mov	r1, r3
 800778c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800778e:	f7fd ff47 	bl	8005620 <lfs_min>
 8007792:	6438      	str	r0, [r7, #64]	; 0x40
        }
        noff = off + sizeof(uint32_t);
 8007794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007796:	3304      	adds	r3, #4
 8007798:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (off < end) {
 800779a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	429a      	cmp	r2, r3
 80077a0:	d3aa      	bcc.n	80076f8 <lfs_dir_commitcrc+0x196>
    }

    return 0;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	374c      	adds	r7, #76	; 0x4c
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd90      	pop	{r4, r7, pc}

080077ac <lfs_dir_alloc>:

static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08a      	sub	sp, #40	; 0x28
 80077b0:	af04      	add	r7, sp, #16
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80077b6:	2300      	movs	r3, #0
 80077b8:	617b      	str	r3, [r7, #20]
 80077ba:	e016      	b.n	80077ea <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	3301      	adds	r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	bfb8      	it	lt
 80077c8:	425b      	neglt	r3, r3
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	4413      	add	r3, r2
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7fe fde0 	bl	8006398 <lfs_alloc>
 80077d8:	60f8      	str	r0, [r7, #12]
        if (err) {
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <lfs_dir_alloc+0x38>
            return err;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	e048      	b.n	8007876 <lfs_dir_alloc+0xca>
    for (int i = 0; i < 2; i++) {
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	3301      	adds	r3, #1
 80077e8:	617b      	str	r3, [r7, #20]
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	dde5      	ble.n	80077bc <lfs_dir_alloc+0x10>
        }
    }

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 80077f0:	6879      	ldr	r1, [r7, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 80077fa:	2004      	movs	r0, #4
 80077fc:	9003      	str	r0, [sp, #12]
 80077fe:	9202      	str	r2, [sp, #8]
 8007800:	2200      	movs	r2, #0
 8007802:	9201      	str	r2, [sp, #4]
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	2304      	movs	r3, #4
 8007808:	460a      	mov	r2, r1
 800780a:	2100      	movs	r1, #0
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7fd ffe3 	bl	80057d8 <lfs_bd_read>
 8007812:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	4618      	mov	r0, r3
 800781a:	f7fd ff71 	bl	8005700 <lfs_fromle32>
 800781e:	4602      	mov	r2, r0
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d005      	beq.n	8007836 <lfs_dir_alloc+0x8a>
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007830:	d001      	beq.n	8007836 <lfs_dir_alloc+0x8a>
        return err;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	e01f      	b.n	8007876 <lfs_dir_alloc+0xca>
    }

    // make sure we don't immediately evict
    dir->rev += dir->rev & 1;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	3301      	adds	r3, #1
 800783c:	f023 0201 	bic.w	r2, r3, #1
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	609a      	str	r2, [r3, #8]

    // set defaults
    dir->off = sizeof(dir->rev);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2204      	movs	r2, #4
 8007848:	60da      	str	r2, [r3, #12]
    dir->etag = LFS_BLOCK_NULL;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007850:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2200      	movs	r2, #0
 8007856:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800785e:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007866:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2200      	movs	r2, #0
 800786c:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2200      	movs	r2, #0
 8007872:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <lfs_dir_drop>:

static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 8007880:	b580      	push	{r7, lr}
 8007882:	b08a      	sub	sp, #40	; 0x28
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	3348      	adds	r3, #72	; 0x48
 8007890:	461a      	mov	r2, r3
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f7ff fd33 	bl	8007300 <lfs_dir_getgstate>
 800789a:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <lfs_dir_drop+0x26>
        return err;
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	e022      	b.n	80078ec <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3318      	adds	r3, #24
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fae2 	bl	8005e74 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	7ddb      	ldrb	r3, [r3, #23]
 80078b4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80078b8:	051a      	lsls	r2, r3, #20
 80078ba:	4b0e      	ldr	r3, [pc, #56]	; (80078f4 <lfs_dir_drop+0x74>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	61fb      	str	r3, [r7, #28]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3318      	adds	r3, #24
 80078c4:	623b      	str	r3, [r7, #32]
 80078c6:	f107 021c 	add.w	r2, r7, #28
 80078ca:	2301      	movs	r3, #1
 80078cc:	68b9      	ldr	r1, [r7, #8]
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f000 fb6a 	bl	8007fa8 <lfs_dir_commit>
 80078d4:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	3318      	adds	r3, #24
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fe fab0 	bl	8005e40 <lfs_pair_fromle32>
    if (err) {
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <lfs_dir_drop+0x6a>
        return err;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	e000      	b.n	80078ec <lfs_dir_drop+0x6c>
    }

    return 0;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3728      	adds	r7, #40	; 0x28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	000ffc08 	.word	0x000ffc08

080078f8 <lfs_dir_split>:

static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b092      	sub	sp, #72	; 0x48
 80078fc:	af04      	add	r7, sp, #16
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	603b      	str	r3, [r7, #0]
    // create tail directory
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8007906:	f107 0314 	add.w	r3, r7, #20
 800790a:	4619      	mov	r1, r3
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f7ff ff4d 	bl	80077ac <lfs_dir_alloc>
 8007912:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8007914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <lfs_dir_split+0x26>
        return err;
 800791a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791c:	e03c      	b.n	8007998 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	7ddb      	ldrb	r3, [r3, #23]
 8007922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    tail.tail[0] = dir->tail[0];
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	62fb      	str	r3, [r7, #44]	; 0x2c
    tail.tail[1] = dir->tail[1];
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	633b      	str	r3, [r7, #48]	; 0x30

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8007932:	f107 0114 	add.w	r1, r7, #20
 8007936:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800793a:	9302      	str	r3, [sp, #8]
 800793c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 f854 	bl	80079f8 <lfs_dir_compact>
 8007950:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8007952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <lfs_dir_split+0x64>
        return err;
 8007958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795a:	e01d      	b.n	8007998 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8007962:	69ba      	ldr	r2, [r7, #24]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2201      	movs	r2, #1
 800796c:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3320      	adds	r3, #32
 8007974:	4619      	mov	r1, r3
 8007976:	4610      	mov	r0, r2
 8007978:	f7fe fa38 	bl	8005dec <lfs_pair_cmp>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d109      	bne.n	8007996 <lfs_dir_split+0x9e>
 8007982:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3738      	adds	r7, #56	; 0x38
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <lfs_dir_commit_size>:

static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80079b0:	68b8      	ldr	r0, [r7, #8]
 80079b2:	f7fe faf1 	bl	8005f98 <lfs_tag_dsize>
 80079b6:	4602      	mov	r2, r0
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	441a      	add	r2, r3
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	601a      	str	r2, [r3, #0]
    return 0;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <lfs_dir_commit_commit>:
struct lfs_dir_commit_commit {
    lfs_t *lfs;
    struct lfs_commit *commit;
};

static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	6859      	ldr	r1, [r3, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	f7ff fd3b 	bl	8007462 <lfs_dir_commitattr>
 80079ec:	4603      	mov	r3, r0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3718      	adds	r7, #24
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <lfs_dir_compact>:

static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80079f8:	b590      	push	{r4, r7, lr}
 80079fa:	b0a9      	sub	sp, #164	; 0xa4
 80079fc:	af0a      	add	r7, sp, #40	; 0x28
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[1], dir->pair[0]};
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	657b      	str	r3, [r7, #84]	; 0x54
    bool relocated = false;
 8007a12:	2300      	movs	r3, #0
 8007a14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    bool exhausted = false;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    // should we split?
    while (end - begin > 1) {
 8007a1e:	e080      	b.n	8007b22 <lfs_dir_compact+0x12a>
        // find size
        lfs_size_t size = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	64fb      	str	r3, [r7, #76]	; 0x4c
        int err = lfs_dir_traverse(lfs,
 8007a24:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007a28:	425b      	negs	r3, r3
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	b21b      	sxth	r3, r3
 8007a2e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8007a32:	9209      	str	r2, [sp, #36]	; 0x24
 8007a34:	4a9c      	ldr	r2, [pc, #624]	; (8007ca8 <lfs_dir_compact+0x2b0>)
 8007a36:	9208      	str	r2, [sp, #32]
 8007a38:	9307      	str	r3, [sp, #28]
 8007a3a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8007a3e:	9306      	str	r3, [sp, #24]
 8007a40:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007a44:	9305      	str	r3, [sp, #20]
 8007a46:	2300      	movs	r3, #0
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	4b98      	ldr	r3, [pc, #608]	; (8007cac <lfs_dir_compact+0x2b4>)
 8007a4c:	9303      	str	r3, [sp, #12]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	9302      	str	r3, [sp, #8]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f7fe ff7f 	bl	8006968 <lfs_dir_traverse>
 8007a6a:	6738      	str	r0, [r7, #112]	; 0x70
                source, 0, LFS_BLOCK_NULL, attrs, attrcount, false,
                LFS_MKTAG(0x400, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                begin, end, -begin,
                lfs_dir_commit_size, &size);
        if (err) {
 8007a6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <lfs_dir_compact+0x7e>
            return err;
 8007a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a74:	e27f      	b.n	8007f76 <lfs_dir_compact+0x57e>
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
 8007a76:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8007a7a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	2bfe      	cmp	r3, #254	; 0xfe
 8007a82:	dc18      	bgt.n	8007ab6 <lfs_dir_compact+0xbe>
                size <= lfs_min(lfs->cfg->block_size - 36,
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                    lfs_alignup(lfs->cfg->block_size/2,
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a92:	69db      	ldr	r3, [r3, #28]
                size <= lfs_min(lfs->cfg->block_size - 36,
 8007a94:	085a      	lsrs	r2, r3, #1
                        lfs->cfg->prog_size))) {
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                size <= lfs_min(lfs->cfg->block_size - 36,
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	4610      	mov	r0, r2
 8007aa0:	f7fd fde3 	bl	800566a <lfs_alignup>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f7fd fdb9 	bl	8005620 <lfs_min>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
        if (end - begin < 0xff &&
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d23e      	bcs.n	8007b34 <lfs_dir_compact+0x13c>
        }

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
 8007ab6:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8007aba:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	0fda      	lsrs	r2, r3, #31
 8007ac2:	4413      	add	r3, r2
 8007ac4:	105b      	asrs	r3, r3, #1
 8007ac6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8007aca:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007ace:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007ad2:	4413      	add	r3, r2
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8007ada:	9202      	str	r2, [sp, #8]
 8007adc:	9301      	str	r3, [sp, #4]
 8007ade:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	68b9      	ldr	r1, [r7, #8]
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f7ff ff04 	bl	80078f8 <lfs_dir_split>
 8007af0:	6738      	str	r0, [r7, #112]	; 0x70
                source, begin+split, end);
        if (err) {
 8007af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00d      	beq.n	8007b14 <lfs_dir_compact+0x11c>
            // if we fail to split, we may be able to overcompact, unless
            // we're too big for even the full block, in which case our
            // only option is to error
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
 8007af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007afa:	f113 0f1c 	cmn.w	r3, #28
 8007afe:	d107      	bne.n	8007b10 <lfs_dir_compact+0x118>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 8007b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d213      	bcs.n	8007b38 <lfs_dir_compact+0x140>
                break;
            }
            return err;
 8007b10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b12:	e230      	b.n	8007f76 <lfs_dir_compact+0x57e>
        }

        end = begin + split;
 8007b14:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007b18:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    while (end - begin > 1) {
 8007b22:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8007b26:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	f73f af77 	bgt.w	8007a20 <lfs_dir_compact+0x28>
 8007b32:	e002      	b.n	8007b3a <lfs_dir_compact+0x142>
            break;
 8007b34:	bf00      	nop
 8007b36:	e000      	b.n	8007b3a <lfs_dir_compact+0x142>
                break;
 8007b38:	bf00      	nop
    }

    // increment revision count
    dir->rev += 1;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	609a      	str	r2, [r3, #8]
    if (lfs->cfg->block_cycles > 0 &&
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	dd58      	ble.n	8007c00 <lfs_dir_compact+0x208>
            (dir->rev % (lfs->cfg->block_cycles+1) == 0)) {
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007b56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b58:	3201      	adds	r2, #1
 8007b5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b5e:	fb01 f202 	mul.w	r2, r1, r2
 8007b62:	1a9b      	subs	r3, r3, r2
    if (lfs->cfg->block_cycles > 0 &&
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d14b      	bne.n	8007c00 <lfs_dir_compact+0x208>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	647a      	str	r2, [r7, #68]	; 0x44
 8007b6e:	2201      	movs	r2, #1
 8007b70:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b72:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007b76:	4611      	mov	r1, r2
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fe f937 	bl	8005dec <lfs_pair_cmp>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d138      	bne.n	8007bf6 <lfs_dir_compact+0x1fe>
            // oh no! we're writing too much to the superblock,
            // should we expand?
            lfs_ssize_t res = lfs_fs_size(lfs);
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f002 fbdd 	bl	800a344 <lfs_fs_size>
 8007b8a:	66b8      	str	r0, [r7, #104]	; 0x68
            if (res < 0) {
 8007b8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	da01      	bge.n	8007b96 <lfs_dir_compact+0x19e>
                return res;
 8007b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b94:	e1ef      	b.n	8007f76 <lfs_dir_compact+0x57e>
            }

            // do we have extra space? littlefs can't reclaim this space
            // by itself, so expand cautiously
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	085a      	lsrs	r2, r3, #1
 8007b9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d92d      	bls.n	8007c00 <lfs_dir_compact+0x208>
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	f240 51d6 	movw	r1, #1494	; 0x5d6
 8007bae:	4840      	ldr	r0, [pc, #256]	; (8007cb0 <lfs_dir_compact+0x2b8>)
 8007bb0:	f00d fd28 	bl	8015604 <iprintf>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8007bb4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8007bb8:	9302      	str	r3, [sp, #8]
 8007bba:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007bbe:	9301      	str	r3, [sp, #4]
 8007bc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7ff fe93 	bl	80078f8 <lfs_dir_split>
 8007bd2:	6678      	str	r0, [r7, #100]	; 0x64
                        source, begin, end);
                if (err && err != LFS_ERR_NOSPC) {
 8007bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d005      	beq.n	8007be6 <lfs_dir_compact+0x1ee>
 8007bda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bdc:	f113 0f1c 	cmn.w	r3, #28
 8007be0:	d001      	beq.n	8007be6 <lfs_dir_compact+0x1ee>
                    return err;
 8007be2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007be4:	e1c7      	b.n	8007f76 <lfs_dir_compact+0x57e>
                }

                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                if (!err) {
 8007be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d109      	bne.n	8007c00 <lfs_dir_compact+0x208>
                    end = begin;
 8007bec:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007bf0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8007bf4:	e004      	b.n	8007c00 <lfs_dir_compact+0x208>
            // we can't relocate our root during migrations, as this would
            // cause the superblock to get updated, which would clobber v1
#endif
        } else {
            // we're writing too much, time to relocate
            exhausted = true;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8007bfc:	e13d      	b.n	8007e7a <lfs_dir_compact+0x482>
            goto relocate;
        }
    }

    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
 8007bfe:	bf00      	nop
        {
            // There's nothing special about our global delta, so feed it into
            // our local global delta
            int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3348      	adds	r3, #72	; 0x48
 8007c04:	461a      	mov	r2, r3
 8007c06:	68b9      	ldr	r1, [r7, #8]
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f7ff fb79 	bl	8007300 <lfs_dir_getgstate>
 8007c0e:	6638      	str	r0, [r7, #96]	; 0x60
            if (err) {
 8007c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d001      	beq.n	8007c1a <lfs_dir_compact+0x222>
                return err;
 8007c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c18:	e1ad      	b.n	8007f76 <lfs_dir_compact+0x57e>
            }

            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8007c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c20:	2300      	movs	r3, #0
 8007c22:	633b      	str	r3, [r7, #48]	; 0x30
 8007c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c28:	637b      	str	r3, [r7, #52]	; 0x34
 8007c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c30:	2300      	movs	r3, #0
 8007c32:	63fb      	str	r3, [r7, #60]	; 0x3c
                .off = 0,
                .ptag = LFS_BLOCK_NULL,
                .crc = LFS_BLOCK_NULL,

                .begin = 0,
                .end = lfs->cfg->block_size - 8,
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8007c3c:	643b      	str	r3, [r7, #64]	; 0x40
            };

            // erase block to write to
            err = lfs_bd_erase(lfs, dir->pair[1]);
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	4619      	mov	r1, r3
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f7fe f871 	bl	8005d2c <lfs_bd_erase>
 8007c4a:	6638      	str	r0, [r7, #96]	; 0x60
            if (err) {
 8007c4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d006      	beq.n	8007c60 <lfs_dir_compact+0x268>
                if (err == LFS_ERR_CORRUPT) {
 8007c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c54:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007c58:	f000 8104 	beq.w	8007e64 <lfs_dir_compact+0x46c>
                    goto relocate;
                }
                return err;
 8007c5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c5e:	e18a      	b.n	8007f76 <lfs_dir_compact+0x57e>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fd fd56 	bl	8005716 <lfs_tole32>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8007c76:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007c7a:	2304      	movs	r3, #4
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f7ff fbba 	bl	80073f6 <lfs_dir_commitprog>
 8007c82:	6638      	str	r0, [r7, #96]	; 0x60
            dir->rev = lfs_fromle32(dir->rev);
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fd fd39 	bl	8005700 <lfs_fromle32>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	609a      	str	r2, [r3, #8]
            if (err) {
 8007c94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00c      	beq.n	8007cb4 <lfs_dir_compact+0x2bc>
                if (err == LFS_ERR_CORRUPT) {
 8007c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c9c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007ca0:	f000 80e2 	beq.w	8007e68 <lfs_dir_compact+0x470>
                    goto relocate;
                }
                return err;
 8007ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ca6:	e166      	b.n	8007f76 <lfs_dir_compact+0x57e>
 8007ca8:	080079a1 	.word	0x080079a1
 8007cac:	400ffc00 	.word	0x400ffc00
 8007cb0:	08016d78 	.word	0x08016d78
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8007cb4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007cb8:	425b      	negs	r3, r3
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	b21b      	sxth	r3, r3
                    source, 0, LFS_BLOCK_NULL, attrs, attrcount, false,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	627a      	str	r2, [r7, #36]	; 0x24
 8007cc2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007cc6:	62ba      	str	r2, [r7, #40]	; 0x28
            err = lfs_dir_traverse(lfs,
 8007cc8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8007cce:	4aac      	ldr	r2, [pc, #688]	; (8007f80 <lfs_dir_compact+0x588>)
 8007cd0:	9208      	str	r2, [sp, #32]
 8007cd2:	9307      	str	r3, [sp, #28]
 8007cd4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8007cd8:	9306      	str	r3, [sp, #24]
 8007cda:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007cde:	9305      	str	r3, [sp, #20]
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	9304      	str	r3, [sp, #16]
 8007ce4:	4ba7      	ldr	r3, [pc, #668]	; (8007f84 <lfs_dir_compact+0x58c>)
 8007ce6:	9303      	str	r3, [sp, #12]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	9302      	str	r3, [sp, #8]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f7fe fe32 	bl	8006968 <lfs_dir_traverse>
 8007d04:	6638      	str	r0, [r7, #96]	; 0x60
                        lfs, &commit});
            if (err) {
 8007d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d006      	beq.n	8007d1a <lfs_dir_compact+0x322>
                if (err == LFS_ERR_CORRUPT) {
 8007d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d0e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007d12:	f000 80ab 	beq.w	8007e6c <lfs_dir_compact+0x474>
                    goto relocate;
                }
                return err;
 8007d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d18:	e12d      	b.n	8007f76 <lfs_dir_compact+0x57e>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	3318      	adds	r3, #24
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe f849 	bl	8005db6 <lfs_pair_isnull>
 8007d24:	4603      	mov	r3, r0
 8007d26:	f083 0301 	eor.w	r3, r3, #1
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d021      	beq.n	8007d74 <lfs_dir_compact+0x37c>
                lfs_pair_tole32(dir->tail);
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	3318      	adds	r3, #24
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fe f89d 	bl	8005e74 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	7ddb      	ldrb	r3, [r3, #23]
 8007d3e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007d42:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8007d44:	4a90      	ldr	r2, [pc, #576]	; (8007f88 <lfs_dir_compact+0x590>)
 8007d46:	431a      	orrs	r2, r3
                        dir->tail);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8007d4c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f7ff fb86 	bl	8007462 <lfs_dir_commitattr>
 8007d56:	6638      	str	r0, [r7, #96]	; 0x60
                lfs_pair_fromle32(dir->tail);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	3318      	adds	r3, #24
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fe f86f 	bl	8005e40 <lfs_pair_fromle32>
                if (err) {
 8007d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <lfs_dir_compact+0x37c>
                    if (err == LFS_ERR_CORRUPT) {
 8007d68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d6a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007d6e:	d07f      	beq.n	8007e70 <lfs_dir_compact+0x478>
                        goto relocate;
                    }
                    return err;
 8007d70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d72:	e100      	b.n	8007f76 <lfs_dir_compact+0x57e>
                }
            }

            if (!relocated && !lfs_gstate_iszero(&lfs->gdelta)) {
 8007d74:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007d78:	f083 0301 	eor.w	r3, r3, #1
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d026      	beq.n	8007dd0 <lfs_dir_compact+0x3d8>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	3348      	adds	r3, #72	; 0x48
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fe f93f 	bl	800600a <lfs_gstate_iszero>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	f083 0301 	eor.w	r3, r3, #1
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d01b      	beq.n	8007dd0 <lfs_dir_compact+0x3d8>
                // commit any globals, unless we're relocating,
                // in which case our parent will steal our globals
                lfs_gstate_tole32(&lfs->gdelta);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3348      	adds	r3, #72	; 0x48
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fe fa1b 	bl	80061d8 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(lfs->gdelta)), &lfs->gdelta);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3348      	adds	r3, #72	; 0x48
                err = lfs_dir_commitattr(lfs, &commit,
 8007da6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007daa:	4a78      	ldr	r2, [pc, #480]	; (8007f8c <lfs_dir_compact+0x594>)
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f7ff fb58 	bl	8007462 <lfs_dir_commitattr>
 8007db2:	6638      	str	r0, [r7, #96]	; 0x60
                lfs_gstate_fromle32(&lfs->gdelta);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3348      	adds	r3, #72	; 0x48
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fe f9ed 	bl	8006198 <lfs_gstate_fromle32>
                if (err) {
 8007dbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d005      	beq.n	8007dd0 <lfs_dir_compact+0x3d8>
                    if (err == LFS_ERR_CORRUPT) {
 8007dc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dc6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007dca:	d053      	beq.n	8007e74 <lfs_dir_compact+0x47c>
                        goto relocate;
                    }
                    return err;
 8007dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dce:	e0d2      	b.n	8007f76 <lfs_dir_compact+0x57e>
                }
            }

            err = lfs_dir_commitcrc(lfs, &commit);
 8007dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f7ff fbc3 	bl	8007562 <lfs_dir_commitcrc>
 8007ddc:	6638      	str	r0, [r7, #96]	; 0x60
            if (err) {
 8007dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d005      	beq.n	8007df0 <lfs_dir_compact+0x3f8>
                if (err == LFS_ERR_CORRUPT) {
 8007de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007de6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007dea:	d045      	beq.n	8007e78 <lfs_dir_compact+0x480>
                    goto relocate;
                }
                return err;
 8007dec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dee:	e0c2      	b.n	8007f76 <lfs_dir_compact+0x57e>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007df6:	6992      	ldr	r2, [r2, #24]
 8007df8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dfc:	fb01 f202 	mul.w	r2, r1, r2
 8007e00:	1a9b      	subs	r3, r3, r2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d006      	beq.n	8007e14 <lfs_dir_compact+0x41c>
 8007e06:	4b62      	ldr	r3, [pc, #392]	; (8007f90 <lfs_dir_compact+0x598>)
 8007e08:	4a62      	ldr	r2, [pc, #392]	; (8007f94 <lfs_dir_compact+0x59c>)
 8007e0a:	f44f 61ca 	mov.w	r1, #1616	; 0x650
 8007e0e:	4862      	ldr	r0, [pc, #392]	; (8007f98 <lfs_dir_compact+0x5a0>)
 8007e10:	f00c fe00 	bl	8014a14 <__assert_func>
            lfs_pair_swap(dir->pair);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fd ffb8 	bl	8005d8c <lfs_pair_swap>
            dir->count = end - begin;
 8007e1c:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8007e20:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8007e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8007e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	611a      	str	r2, [r3, #16]
            // note we able to have already handled move here
            if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	333c      	adds	r3, #60	; 0x3c
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	4611      	mov	r1, r2
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fe f925 	bl	8006090 <lfs_gstate_hasmovehere>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d061      	beq.n	8007f10 <lfs_dir_compact+0x518>
                lfs_gstate_xormove(&lfs->gpending,
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
                    &lfs->gpending, 0x3ff, NULL);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f103 013c 	add.w	r1, r3, #60	; 0x3c
                lfs_gstate_xormove(&lfs->gpending,
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007e5e:	f7fe f951 	bl	8006104 <lfs_gstate_xormove>
            }
        }
        break;
 8007e62:	e055      	b.n	8007f10 <lfs_dir_compact+0x518>
                    goto relocate;
 8007e64:	bf00      	nop
 8007e66:	e008      	b.n	8007e7a <lfs_dir_compact+0x482>
                    goto relocate;
 8007e68:	bf00      	nop
 8007e6a:	e006      	b.n	8007e7a <lfs_dir_compact+0x482>
                    goto relocate;
 8007e6c:	bf00      	nop
 8007e6e:	e004      	b.n	8007e7a <lfs_dir_compact+0x482>
                        goto relocate;
 8007e70:	bf00      	nop
 8007e72:	e002      	b.n	8007e7a <lfs_dir_compact+0x482>
                        goto relocate;
 8007e74:	bf00      	nop
 8007e76:	e000      	b.n	8007e7a <lfs_dir_compact+0x482>
                    goto relocate;
 8007e78:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        lfs_cache_drop(lfs, &lfs->pcache);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3310      	adds	r3, #16
 8007e84:	4619      	mov	r1, r3
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f7fd fc80 	bl	800578c <lfs_cache_drop>
        if (!exhausted) {
 8007e8c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8007e90:	f083 0301 	eor.w	r3, r3, #1
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d007      	beq.n	8007eaa <lfs_dir_compact+0x4b2>
            LFS_DEBUG("Bad block at %"PRIx32, dir->pair[1]);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f240 6162 	movw	r1, #1634	; 0x662
 8007ea4:	483d      	ldr	r0, [pc, #244]	; (8007f9c <lfs_dir_compact+0x5a4>)
 8007ea6:	f00d fbad 	bl	8015604 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(oldpair, (const lfs_block_t[2]){0, 1}) == 0) {
 8007eaa:	2300      	movs	r3, #0
 8007eac:	61fb      	str	r3, [r7, #28]
 8007eae:	2301      	movs	r3, #1
 8007eb0:	623b      	str	r3, [r7, #32]
 8007eb2:	f107 021c 	add.w	r2, r7, #28
 8007eb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007eba:	4611      	mov	r1, r2
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fd ff95 	bl	8005dec <lfs_pair_cmp>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d109      	bne.n	8007edc <lfs_dir_compact+0x4e4>
            LFS_WARN("Superblock %"PRIx32" has become unwritable", oldpair[1]);
 8007ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f240 6167 	movw	r1, #1639	; 0x667
 8007ed0:	4833      	ldr	r0, [pc, #204]	; (8007fa0 <lfs_dir_compact+0x5a8>)
 8007ed2:	f00d fb97 	bl	8015604 <iprintf>
            return LFS_ERR_NOSPC;
 8007ed6:	f06f 031b 	mvn.w	r3, #27
 8007eda:	e04c      	b.n	8007f76 <lfs_dir_compact+0x57e>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f7fe fa58 	bl	8006398 <lfs_alloc>
 8007ee8:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && (err != LFS_ERR_NOSPC && !exhausted)) {
 8007eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f43f ae86 	beq.w	8007bfe <lfs_dir_compact+0x206>
 8007ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ef4:	f113 0f1c 	cmn.w	r3, #28
 8007ef8:	f43f ae81 	beq.w	8007bfe <lfs_dir_compact+0x206>
 8007efc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8007f00:	f083 0301 	eor.w	r3, r3, #1
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f43f ae79 	beq.w	8007bfe <lfs_dir_compact+0x206>
            return err;
 8007f0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f0e:	e032      	b.n	8007f76 <lfs_dir_compact+0x57e>
        break;
 8007f10:	bf00      	nop
        }

        continue;
    }

    if (!relocated) {
 8007f12:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007f16:	f083 0301 	eor.w	r3, r3, #1
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00d      	beq.n	8007f3c <lfs_dir_compact+0x544>
        lfs->gstate = lfs->gpending;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	3330      	adds	r3, #48	; 0x30
 8007f26:	323c      	adds	r2, #60	; 0x3c
 8007f28:	ca07      	ldmia	r2, {r0, r1, r2}
 8007f2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (struct lfs_gstate){0};
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3348      	adds	r3, #72	; 0x48
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	605a      	str	r2, [r3, #4]
 8007f38:	609a      	str	r2, [r3, #8]
 8007f3a:	e01b      	b.n	8007f74 <lfs_dir_compact+0x57c>
    } else {
        // update references if we relocated
        LFS_DEBUG("Relocating %"PRIx32" %"PRIx32" -> %"PRIx32" %"PRIx32,
 8007f3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f3e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	6852      	ldr	r2, [r2, #4]
 8007f48:	9201      	str	r2, [sp, #4]
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	460a      	mov	r2, r1
 8007f50:	f240 6179 	movw	r1, #1657	; 0x679
 8007f54:	4813      	ldr	r0, [pc, #76]	; (8007fa4 <lfs_dir_compact+0x5ac>)
 8007f56:	f00d fb55 	bl	8015604 <iprintf>
                oldpair[0], oldpair[1], dir->pair[0], dir->pair[1]);
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007f60:	4619      	mov	r1, r3
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f002 f8fa 	bl	800a15c <lfs_fs_relocate>
 8007f68:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 8007f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <lfs_dir_compact+0x57c>
            return err;
 8007f70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f72:	e000      	b.n	8007f76 <lfs_dir_compact+0x57e>
        }
    }

    return 0;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	377c      	adds	r7, #124	; 0x7c
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd90      	pop	{r4, r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	080079cd 	.word	0x080079cd
 8007f84:	400ffc00 	.word	0x400ffc00
 8007f88:	000ffc08 	.word	0x000ffc08
 8007f8c:	7ffffc0c 	.word	0x7ffffc0c
 8007f90:	08016da8 	.word	0x08016da8
 8007f94:	08019ee4 	.word	0x08019ee4
 8007f98:	08016c58 	.word	0x08016c58
 8007f9c:	08016dd0 	.word	0x08016dd0
 8007fa0:	08016df0 	.word	0x08016df0
 8007fa4:	08016e24 	.word	0x08016e24

08007fa8 <lfs_dir_commit>:

static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount)
{
 8007fa8:	b5b0      	push	{r4, r5, r7, lr}
 8007faa:	b0b4      	sub	sp, #208	; 0xd0
 8007fac:	af0a      	add	r7, sp, #40	; 0x28
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fbe:	e045      	b.n	800804c <lfs_dir_commit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8007fc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d03a      	beq.n	8008042 <lfs_dir_commit+0x9a>
 8007fcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fd ff08 	bl	8005dec <lfs_pair_cmp>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d12f      	bne.n	8008042 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8007fe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fe6:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d12a      	bne.n	8008042 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8007fec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d023      	beq.n	8008042 <lfs_dir_commit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8007ffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8008006:	429a      	cmp	r2, r3
 8008008:	d91b      	bls.n	8008042 <lfs_dir_commit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800800a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 fe3a 	bl	8008c88 <lfs_file_outline>
 8008014:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
            if (err) {
 8008018:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800801c:	2b00      	cmp	r3, #0
 800801e:	d002      	beq.n	8008026 <lfs_dir_commit+0x7e>
                return err;
 8008020:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008024:	e2e3      	b.n	80085ee <lfs_dir_commit+0x646>
            }

            err = lfs_file_flush(lfs, f);
 8008026:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f000 fe4e 	bl	8008ccc <lfs_file_flush>
 8008030:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
            if (err) {
 8008034:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <lfs_dir_commit+0x9a>
                return err;
 800803c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008040:	e2d5      	b.n	80085ee <lfs_dir_commit+0x646>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8008042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800804c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1b5      	bne.n	8007fc0 <lfs_dir_commit+0x18>
            }
        }
    }

    // calculate changes to the directory
    lfs_tag_t deletetag = LFS_BLOCK_NULL;
 8008054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008058:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    lfs_tag_t createtag = LFS_BLOCK_NULL;
 800805c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008060:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    for (int i = 0; i < attrcount; i++) {
 8008064:	2300      	movs	r3, #0
 8008066:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800806a:	e082      	b.n	8008172 <lfs_dir_commit+0x1ca>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800806c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008070:	00db      	lsls	r3, r3, #3
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	4413      	add	r3, r2
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4618      	mov	r0, r3
 800807a:	f7fd ff46 	bl	8005f0a <lfs_tag_type3>
 800807e:	4603      	mov	r3, r0
 8008080:	461a      	mov	r2, r3
 8008082:	f240 4301 	movw	r3, #1025	; 0x401
 8008086:	429a      	cmp	r2, r3
 8008088:	d10e      	bne.n	80080a8 <lfs_dir_commit+0x100>
            createtag = attrs[i].tag;
 800808a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800808e:	00db      	lsls	r3, r3, #3
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	4413      	add	r3, r2
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            dir->count += 1;
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	8a9b      	ldrh	r3, [r3, #20]
 800809e:	3301      	adds	r3, #1
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	829a      	strh	r2, [r3, #20]
 80080a6:	e05f      	b.n	8008168 <lfs_dir_commit+0x1c0>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 80080a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080ac:	00db      	lsls	r3, r3, #3
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	4413      	add	r3, r2
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fd ff28 	bl	8005f0a <lfs_tag_type3>
 80080ba:	4603      	mov	r3, r0
 80080bc:	461a      	mov	r2, r3
 80080be:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d119      	bne.n	80080fa <lfs_dir_commit+0x152>
            deletetag = attrs[i].tag;
 80080c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080ca:	00db      	lsls	r3, r3, #3
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	4413      	add	r3, r2
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            LFS_ASSERT(dir->count > 0);
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	8a9b      	ldrh	r3, [r3, #20]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d106      	bne.n	80080ec <lfs_dir_commit+0x144>
 80080de:	4ba6      	ldr	r3, [pc, #664]	; (8008378 <lfs_dir_commit+0x3d0>)
 80080e0:	4aa6      	ldr	r2, [pc, #664]	; (800837c <lfs_dir_commit+0x3d4>)
 80080e2:	f240 61a1 	movw	r1, #1697	; 0x6a1
 80080e6:	48a6      	ldr	r0, [pc, #664]	; (8008380 <lfs_dir_commit+0x3d8>)
 80080e8:	f00c fc94 	bl	8014a14 <__assert_func>
            dir->count -= 1;
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	8a9b      	ldrh	r3, [r3, #20]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	829a      	strh	r2, [r3, #20]
 80080f8:	e036      	b.n	8008168 <lfs_dir_commit+0x1c0>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 80080fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080fe:	00db      	lsls	r3, r3, #3
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	4413      	add	r3, r2
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4618      	mov	r0, r3
 8008108:	f7fd feef 	bl	8005eea <lfs_tag_type1>
 800810c:	4603      	mov	r3, r0
 800810e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008112:	d129      	bne.n	8008168 <lfs_dir_commit+0x1c0>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8008114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008118:	00db      	lsls	r3, r3, #3
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	4413      	add	r3, r2
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8008126:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	4413      	add	r3, r2
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8008138:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800813c:	00db      	lsls	r3, r3, #3
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	4413      	add	r3, r2
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4618      	mov	r0, r3
 8008146:	f7fd fef0 	bl	8005f2a <lfs_tag_chunk>
 800814a:	4603      	mov	r3, r0
 800814c:	f003 0301 	and.w	r3, r3, #1
 8008150:	2b00      	cmp	r3, #0
 8008152:	bf14      	ite	ne
 8008154:	2301      	movne	r3, #1
 8008156:	2300      	moveq	r3, #0
 8008158:	b2da      	uxtb	r2, r3
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	3318      	adds	r3, #24
 8008162:	4618      	mov	r0, r3
 8008164:	f7fd fe6c 	bl	8005e40 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8008168:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800816c:	3301      	adds	r3, #1
 800816e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008172:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	429a      	cmp	r2, r3
 800817a:	f6ff af77 	blt.w	800806c <lfs_dir_commit+0xc4>
        }
    }

    // do we have a pending move?
    if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	333c      	adds	r3, #60	; 0x3c
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	4611      	mov	r1, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f7fd ff82 	bl	8006090 <lfs_gstate_hasmovehere>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d021      	beq.n	80081d6 <lfs_dir_commit+0x22e>
        deletetag = lfs->gpending.tag & LFS_MKTAG(0x7ff, 0x3ff, 0);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008196:	4b7b      	ldr	r3, [pc, #492]	; (8008384 <lfs_dir_commit+0x3dc>)
 8008198:	4013      	ands	r3, r2
 800819a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        LFS_ASSERT(dir->count > 0);
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	8a9b      	ldrh	r3, [r3, #20]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d106      	bne.n	80081b4 <lfs_dir_commit+0x20c>
 80081a6:	4b74      	ldr	r3, [pc, #464]	; (8008378 <lfs_dir_commit+0x3d0>)
 80081a8:	4a74      	ldr	r2, [pc, #464]	; (800837c <lfs_dir_commit+0x3d4>)
 80081aa:	f240 61ae 	movw	r1, #1710	; 0x6ae
 80081ae:	4874      	ldr	r0, [pc, #464]	; (8008380 <lfs_dir_commit+0x3d8>)
 80081b0:	f00c fc30 	bl	8014a14 <__assert_func>
        dir->count -= 1;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	8a9b      	ldrh	r3, [r3, #20]
 80081b8:	3b01      	subs	r3, #1
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	829a      	strh	r2, [r3, #20]

        // mark gdelta so we reflect the move we will fix
        lfs_gstate_xormove(&lfs->gdelta, &lfs->gpending, 0x3ff, NULL);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f103 0048 	add.w	r0, r3, #72	; 0x48
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80081cc:	2300      	movs	r3, #0
 80081ce:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80081d2:	f7fd ff97 	bl	8006104 <lfs_gstate_xormove>
    }

    // should we actually drop the directory block?
    if (lfs_tag_isvalid(deletetag) && dir->count == 0) {
 80081d6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80081da:	f7fd fe65 	bl	8005ea8 <lfs_tag_isvalid>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d02a      	beq.n	800823a <lfs_dir_commit+0x292>
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	8a9b      	ldrh	r3, [r3, #20]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d126      	bne.n	800823a <lfs_dir_commit+0x292>
        lfs_mdir_t pdir;
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f107 0214 	add.w	r2, r7, #20
 80081f2:	4619      	mov	r1, r3
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f001 fef1 	bl	8009fdc <lfs_fs_pred>
 80081fa:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        if (err && err != LFS_ERR_NOENT) {
 80081fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008202:	2b00      	cmp	r3, #0
 8008204:	d007      	beq.n	8008216 <lfs_dir_commit+0x26e>
 8008206:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800820a:	f113 0f02 	cmn.w	r3, #2
 800820e:	d002      	beq.n	8008216 <lfs_dir_commit+0x26e>
            return err;
 8008210:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008214:	e1eb      	b.n	80085ee <lfs_dir_commit+0x646>
        }

        if (err != LFS_ERR_NOENT && pdir.split) {
 8008216:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800821a:	f113 0f02 	cmn.w	r3, #2
 800821e:	d00c      	beq.n	800823a <lfs_dir_commit+0x292>
 8008220:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008224:	2b00      	cmp	r3, #0
 8008226:	d008      	beq.n	800823a <lfs_dir_commit+0x292>
            return lfs_dir_drop(lfs, &pdir, dir);
 8008228:	f107 0314 	add.w	r3, r7, #20
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	4619      	mov	r1, r3
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7ff fb25 	bl	8007880 <lfs_dir_drop>
 8008236:	4603      	mov	r3, r0
 8008238:	e1d9      	b.n	80085ee <lfs_dir_commit+0x646>
        }
    }

    if (dir->erased || dir->count >= 0xff) {
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	7d9b      	ldrb	r3, [r3, #22]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d104      	bne.n	800824c <lfs_dir_commit+0x2a4>
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	8a9b      	ldrh	r3, [r3, #20]
 8008246:	2bfe      	cmp	r3, #254	; 0xfe
 8008248:	f240 80f6 	bls.w	8008438 <lfs_dir_commit+0x490>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8008250:	64bb      	str	r3, [r7, #72]	; 0x48
            .off = dir->off,
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8008256:	64fb      	str	r3, [r7, #76]	; 0x4c
            .ptag = dir->etag,
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800825c:	653b      	str	r3, [r7, #80]	; 0x50
 800825e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008262:	657b      	str	r3, [r7, #84]	; 0x54
            .crc = LFS_BLOCK_NULL,

            .begin = dir->off,
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8008268:	65bb      	str	r3, [r7, #88]	; 0x58
            .end = lfs->cfg->block_size - 8,
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8008272:	65fb      	str	r3, [r7, #92]	; 0x5c
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	3318      	adds	r3, #24
 8008278:	4618      	mov	r0, r3
 800827a:	f7fd fdfb 	bl	8005e74 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount, false,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	643b      	str	r3, [r7, #64]	; 0x40
 800828a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800828e:	647b      	str	r3, [r7, #68]	; 0x44
        int err = lfs_dir_traverse(lfs,
 8008290:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008294:	9309      	str	r3, [sp, #36]	; 0x24
 8008296:	4b3c      	ldr	r3, [pc, #240]	; (8008388 <lfs_dir_commit+0x3e0>)
 8008298:	9308      	str	r3, [sp, #32]
 800829a:	2300      	movs	r3, #0
 800829c:	9307      	str	r3, [sp, #28]
 800829e:	2300      	movs	r3, #0
 80082a0:	9306      	str	r3, [sp, #24]
 80082a2:	2300      	movs	r3, #0
 80082a4:	9305      	str	r3, [sp, #20]
 80082a6:	2300      	movs	r3, #0
 80082a8:	9304      	str	r3, [sp, #16]
 80082aa:	2300      	movs	r3, #0
 80082ac:	9303      	str	r3, [sp, #12]
 80082ae:	2300      	movs	r3, #0
 80082b0:	9302      	str	r3, [sp, #8]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	460b      	mov	r3, r1
 80082bc:	68b9      	ldr	r1, [r7, #8]
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f7fe fb52 	bl	8006968 <lfs_dir_traverse>
 80082c4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	3318      	adds	r3, #24
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fd fdb7 	bl	8005e40 <lfs_pair_fromle32>
        if (err) {
 80082d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00e      	beq.n	80082f8 <lfs_dir_commit+0x350>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80082da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082de:	f113 0f1c 	cmn.w	r3, #28
 80082e2:	f000 80ab 	beq.w	800843c <lfs_dir_commit+0x494>
 80082e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082ea:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80082ee:	f000 80a5 	beq.w	800843c <lfs_dir_commit+0x494>
                goto compact;
            }
            return err;
 80082f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082f6:	e17a      	b.n	80085ee <lfs_dir_commit+0x646>
        }

        // commit any global diffs if we have any
        if (!lfs_gstate_iszero(&lfs->gdelta)) {
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3348      	adds	r3, #72	; 0x48
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fd fe84 	bl	800600a <lfs_gstate_iszero>
 8008302:	4603      	mov	r3, r0
 8008304:	f083 0301 	eor.w	r3, r3, #1
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d040      	beq.n	8008390 <lfs_dir_commit+0x3e8>
            err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3348      	adds	r3, #72	; 0x48
 8008312:	461a      	mov	r2, r3
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f7fe fff2 	bl	8007300 <lfs_dir_getgstate>
 800831c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 8008320:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <lfs_dir_commit+0x386>
                return err;
 8008328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800832c:	e15f      	b.n	80085ee <lfs_dir_commit+0x646>
            }

            lfs_gstate_tole32(&lfs->gdelta);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3348      	adds	r3, #72	; 0x48
 8008332:	4618      	mov	r0, r3
 8008334:	f7fd ff50 	bl	80061d8 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(lfs->gdelta)), &lfs->gdelta);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	3348      	adds	r3, #72	; 0x48
            err = lfs_dir_commitattr(lfs, &commit,
 800833c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8008340:	4a12      	ldr	r2, [pc, #72]	; (800838c <lfs_dir_commit+0x3e4>)
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f7ff f88d 	bl	8007462 <lfs_dir_commitattr>
 8008348:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            lfs_gstate_fromle32(&lfs->gdelta);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3348      	adds	r3, #72	; 0x48
 8008350:	4618      	mov	r0, r3
 8008352:	f7fd ff21 	bl	8006198 <lfs_gstate_fromle32>
            if (err) {
 8008356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d018      	beq.n	8008390 <lfs_dir_commit+0x3e8>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800835e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008362:	f113 0f1c 	cmn.w	r3, #28
 8008366:	d06b      	beq.n	8008440 <lfs_dir_commit+0x498>
 8008368:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800836c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008370:	d066      	beq.n	8008440 <lfs_dir_commit+0x498>
                    goto compact;
                }
                return err;
 8008372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008376:	e13a      	b.n	80085ee <lfs_dir_commit+0x646>
 8008378:	08016e54 	.word	0x08016e54
 800837c:	08019ef4 	.word	0x08019ef4
 8008380:	08016c58 	.word	0x08016c58
 8008384:	7ffffc00 	.word	0x7ffffc00
 8008388:	080079cd 	.word	0x080079cd
 800838c:	7ffffc0c 	.word	0x7ffffc0c
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8008390:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008394:	4619      	mov	r1, r3
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f7ff f8e3 	bl	8007562 <lfs_dir_commitcrc>
 800839c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (err) {
 80083a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00c      	beq.n	80083c2 <lfs_dir_commit+0x41a>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80083a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083ac:	f113 0f1c 	cmn.w	r3, #28
 80083b0:	d048      	beq.n	8008444 <lfs_dir_commit+0x49c>
 80083b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083b6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80083ba:	d043      	beq.n	8008444 <lfs_dir_commit+0x49c>
                goto compact;
            }
            return err;
 80083bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083c0:	e115      	b.n	80085ee <lfs_dir_commit+0x646>
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80083c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80083c8:	6992      	ldr	r2, [r2, #24]
 80083ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80083ce:	fb01 f202 	mul.w	r2, r1, r2
 80083d2:	1a9b      	subs	r3, r3, r2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d006      	beq.n	80083e6 <lfs_dir_commit+0x43e>
 80083d8:	4b87      	ldr	r3, [pc, #540]	; (80085f8 <lfs_dir_commit+0x650>)
 80083da:	4a88      	ldr	r2, [pc, #544]	; (80085fc <lfs_dir_commit+0x654>)
 80083dc:	f240 61fb 	movw	r1, #1787	; 0x6fb
 80083e0:	4887      	ldr	r0, [pc, #540]	; (8008600 <lfs_dir_commit+0x658>)
 80083e2:	f00c fb17 	bl	8014a14 <__assert_func>
        dir->off = commit.off;
 80083e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80083ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	611a      	str	r2, [r3, #16]

        // note we able to have already handled move here
        if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	333c      	adds	r3, #60	; 0x3c
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	4611      	mov	r1, r2
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fd fe48 	bl	8006090 <lfs_gstate_hasmovehere>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00a      	beq.n	800841c <lfs_dir_commit+0x474>
            lfs_gstate_xormove(&lfs->gpending, &lfs->gpending, 0x3ff, NULL);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008412:	2300      	movs	r3, #0
 8008414:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008418:	f7fd fe74 	bl	8006104 <lfs_gstate_xormove>
        }

        // update gstate
        lfs->gstate = lfs->gpending;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	3330      	adds	r3, #48	; 0x30
 8008422:	323c      	adds	r2, #60	; 0x3c
 8008424:	ca07      	ldmia	r2, {r0, r1, r2}
 8008426:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (struct lfs_gstate){0};
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3348      	adds	r3, #72	; 0x48
 800842e:	2200      	movs	r2, #0
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	605a      	str	r2, [r3, #4]
 8008434:	609a      	str	r2, [r3, #8]
    if (dir->erased || dir->count >= 0xff) {
 8008436:	e022      	b.n	800847e <lfs_dir_commit+0x4d6>
    } else {
compact:
 8008438:	bf00      	nop
 800843a:	e004      	b.n	8008446 <lfs_dir_commit+0x49e>
                goto compact;
 800843c:	bf00      	nop
 800843e:	e002      	b.n	8008446 <lfs_dir_commit+0x49e>
                    goto compact;
 8008440:	bf00      	nop
 8008442:	e000      	b.n	8008446 <lfs_dir_commit+0x49e>
                goto compact;
 8008444:	bf00      	nop
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3310      	adds	r3, #16
 800844a:	4619      	mov	r1, r3
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f7fd f99d 	bl	800578c <lfs_cache_drop>

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	8a9b      	ldrh	r3, [r3, #20]
 8008456:	9302      	str	r3, [sp, #8]
 8008458:	2300      	movs	r3, #0
 800845a:	9301      	str	r3, [sp, #4]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	68b9      	ldr	r1, [r7, #8]
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f7ff fac6 	bl	80079f8 <lfs_dir_compact>
 800846c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                dir, 0, dir->count);
        if (err) {
 8008470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <lfs_dir_commit+0x4d6>
            return err;
 8008478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800847c:	e0b7      	b.n	80085ee <lfs_dir_commit+0x646>
        }
    }

    // update any directories that are affected
    lfs_mdir_t copy = *dir;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8008484:	461d      	mov	r5, r3
 8008486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800848a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800848e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // two passes, once for things that aren't us, and one
    // for things that are
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008496:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800849a:	e0a2      	b.n	80085e2 <lfs_dir_commit+0x63a>
        if (lfs_pair_cmp(d->m.pair, copy.pair) == 0) {
 800849c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80084a0:	3308      	adds	r3, #8
 80084a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80084a6:	4611      	mov	r1, r2
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7fd fc9f 	bl	8005dec <lfs_pair_cmp>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f040 8091 	bne.w	80085d8 <lfs_dir_commit+0x630>
            d->m = *dir;
 80084b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	f103 0408 	add.w	r4, r3, #8
 80084c0:	4615      	mov	r5, r2
 80084c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80084ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->id == lfs_tag_id(deletetag)) {
 80084ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80084d2:	889c      	ldrh	r4, [r3, #4]
 80084d4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80084d8:	f7fd fd41 	bl	8005f5e <lfs_tag_id>
 80084dc:	4603      	mov	r3, r0
 80084de:	429c      	cmp	r4, r3
 80084e0:	d10a      	bne.n	80084f8 <lfs_dir_commit+0x550>
                d->m.pair[0] = LFS_BLOCK_NULL;
 80084e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80084e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084ea:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = LFS_BLOCK_NULL;
 80084ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80084f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084f4:	60da      	str	r2, [r3, #12]
 80084f6:	e062      	b.n	80085be <lfs_dir_commit+0x616>
            } else if (d->id > lfs_tag_id(deletetag)) {
 80084f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80084fc:	889c      	ldrh	r4, [r3, #4]
 80084fe:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008502:	f7fd fd2c 	bl	8005f5e <lfs_tag_id>
 8008506:	4603      	mov	r3, r0
 8008508:	429c      	cmp	r4, r3
 800850a:	d914      	bls.n	8008536 <lfs_dir_commit+0x58e>
                d->id -= 1;
 800850c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008510:	889b      	ldrh	r3, [r3, #4]
 8008512:	3b01      	subs	r3, #1
 8008514:	b29a      	uxth	r2, r3
 8008516:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800851a:	809a      	strh	r2, [r3, #4]
                if (d->type == LFS_TYPE_DIR) {
 800851c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008520:	799b      	ldrb	r3, [r3, #6]
 8008522:	2b02      	cmp	r3, #2
 8008524:	d14b      	bne.n	80085be <lfs_dir_commit+0x616>
                    ((lfs_dir_t*)d)->pos -= 1;
 8008526:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800852a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852c:	1e5a      	subs	r2, r3, #1
 800852e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008532:	629a      	str	r2, [r3, #40]	; 0x28
 8008534:	e043      	b.n	80085be <lfs_dir_commit+0x616>
                }
            } else if (&d->m != dir && d->id >= lfs_tag_id(createtag)) {
 8008536:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800853a:	3308      	adds	r3, #8
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	429a      	cmp	r2, r3
 8008540:	d03d      	beq.n	80085be <lfs_dir_commit+0x616>
 8008542:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008546:	889c      	ldrh	r4, [r3, #4]
 8008548:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800854c:	f7fd fd07 	bl	8005f5e <lfs_tag_id>
 8008550:	4603      	mov	r3, r0
 8008552:	429c      	cmp	r4, r3
 8008554:	d333      	bcc.n	80085be <lfs_dir_commit+0x616>
                d->id += 1;
 8008556:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800855a:	889b      	ldrh	r3, [r3, #4]
 800855c:	3301      	adds	r3, #1
 800855e:	b29a      	uxth	r2, r3
 8008560:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008564:	809a      	strh	r2, [r3, #4]
                if (d->type == LFS_TYPE_DIR) {
 8008566:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800856a:	799b      	ldrb	r3, [r3, #6]
 800856c:	2b02      	cmp	r3, #2
 800856e:	d126      	bne.n	80085be <lfs_dir_commit+0x616>
                    ((lfs_dir_t*)d)->pos += 1;
 8008570:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008576:	1c5a      	adds	r2, r3, #1
 8008578:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800857c:	629a      	str	r2, [r3, #40]	; 0x28
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 800857e:	e01e      	b.n	80085be <lfs_dir_commit+0x616>
                // we split and id is on tail now
                d->id -= d->m.count;
 8008580:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008584:	889a      	ldrh	r2, [r3, #4]
 8008586:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800858a:	8b9b      	ldrh	r3, [r3, #28]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	b29a      	uxth	r2, r3
 8008590:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008594:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8008596:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800859a:	f103 0108 	add.w	r1, r3, #8
 800859e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085a2:	3320      	adds	r3, #32
 80085a4:	461a      	mov	r2, r3
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f7fe fe90 	bl	80072cc <lfs_dir_fetch>
 80085ac:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                if (err) {
 80085b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <lfs_dir_commit+0x616>
                    return err;
 80085b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085bc:	e017      	b.n	80085ee <lfs_dir_commit+0x646>
            while (d->id >= d->m.count && d->m.split) {
 80085be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085c2:	889a      	ldrh	r2, [r3, #4]
 80085c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085c8:	8b9b      	ldrh	r3, [r3, #28]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d304      	bcc.n	80085d8 <lfs_dir_commit+0x630>
 80085ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085d2:	7fdb      	ldrb	r3, [r3, #31]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1d3      	bne.n	8008580 <lfs_dir_commit+0x5d8>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80085d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f47f af58 	bne.w	800849c <lfs_dir_commit+0x4f4>
                }
            }
        }
    }

    return 0;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	37a8      	adds	r7, #168	; 0xa8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bdb0      	pop	{r4, r5, r7, pc}
 80085f6:	bf00      	nop
 80085f8:	08016da8 	.word	0x08016da8
 80085fc:	08019ef4 	.word	0x08019ef4
 8008600:	08016c58 	.word	0x08016c58

08008604 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8008604:	b590      	push	{r4, r7, lr}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	3b08      	subs	r3, #8
 800861c:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	fbb2 f3f3 	udiv	r3, r2, r3
 8008626:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <lfs_ctz_index+0x2e>
        return 0;
 800862e:	2300      	movs	r3, #0
 8008630:	e01c      	b.n	800866c <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3b01      	subs	r3, #1
 8008636:	4618      	mov	r0, r3
 8008638:	f7fd f848 	bl	80056cc <lfs_popc>
 800863c:	4603      	mov	r3, r0
 800863e:	3302      	adds	r3, #2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	1ad2      	subs	r2, r2, r3
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	fbb2 f3f3 	udiv	r3, r2, r3
 800864c:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	fb02 f303 	mul.w	r3, r2, r3
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	1ad4      	subs	r4, r2, r3
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f7fd f836 	bl	80056cc <lfs_popc>
 8008660:	4603      	mov	r3, r0
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	1ae2      	subs	r2, r4, r3
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	601a      	str	r2, [r3, #0]
    return i;
 800866a:	68fb      	ldr	r3, [r7, #12]
}
 800866c:	4618      	mov	r0, r3
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	bd90      	pop	{r4, r7, pc}

08008674 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8008674:	b590      	push	{r4, r7, lr}
 8008676:	b08f      	sub	sp, #60	; 0x3c
 8008678:	af04      	add	r7, sp, #16
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
 8008680:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	2b00      	cmp	r3, #0
 8008686:	d108      	bne.n	800869a <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8008688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800868a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800868e:	601a      	str	r2, [r3, #0]
        *off = 0;
 8008690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]
        return 0;
 8008696:	2300      	movs	r3, #0
 8008698:	e063      	b.n	8008762 <lfs_ctz_find+0xee>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869c:	3b01      	subs	r3, #1
 800869e:	617b      	str	r3, [r7, #20]
 80086a0:	f107 0314 	add.w	r3, r7, #20
 80086a4:	4619      	mov	r1, r3
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f7ff ffac 	bl	8008604 <lfs_ctz_index>
 80086ac:	4603      	mov	r3, r0
 80086ae:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80086b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80086b4:	4619      	mov	r1, r3
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f7ff ffa4 	bl	8008604 <lfs_ctz_index>
 80086bc:	4603      	mov	r3, r0
 80086be:	623b      	str	r3, [r7, #32]

    while (current > target) {
 80086c0:	e044      	b.n	800874c <lfs_ctz_find+0xd8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 80086c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	3301      	adds	r3, #1
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fc ffdf 	bl	800568e <lfs_npw2>
 80086d0:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 80086d2:	1e5c      	subs	r4, r3, #1
 80086d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086d6:	f7fc ffea 	bl	80056ae <lfs_ctz>
 80086da:	4603      	mov	r3, r0
 80086dc:	4619      	mov	r1, r3
 80086de:	4620      	mov	r0, r4
 80086e0:	f7fc ff9e 	bl	8005620 <lfs_min>
 80086e4:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	69fa      	ldr	r2, [r7, #28]
 80086ea:	0092      	lsls	r2, r2, #2
 80086ec:	2104      	movs	r1, #4
 80086ee:	9103      	str	r1, [sp, #12]
 80086f0:	4639      	mov	r1, r7
 80086f2:	9102      	str	r1, [sp, #8]
 80086f4:	9201      	str	r2, [sp, #4]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	2304      	movs	r3, #4
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	68b9      	ldr	r1, [r7, #8]
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f7fd f86a 	bl	80057d8 <lfs_bd_read>
 8008704:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	4618      	mov	r0, r3
 800870a:	f7fc fff9 	bl	8005700 <lfs_fromle32>
 800870e:	4603      	mov	r3, r0
 8008710:	603b      	str	r3, [r7, #0]
        if (err) {
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <lfs_ctz_find+0xa8>
            return err;
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	e022      	b.n	8008762 <lfs_ctz_find+0xee>
        }

        LFS_ASSERT(head >= 2 && head <= lfs->cfg->block_count);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d905      	bls.n	800872e <lfs_ctz_find+0xba>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008726:	6a1a      	ldr	r2, [r3, #32]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	429a      	cmp	r2, r3
 800872c:	d206      	bcs.n	800873c <lfs_ctz_find+0xc8>
 800872e:	4b0f      	ldr	r3, [pc, #60]	; (800876c <lfs_ctz_find+0xf8>)
 8008730:	4a0f      	ldr	r2, [pc, #60]	; (8008770 <lfs_ctz_find+0xfc>)
 8008732:	f640 016d 	movw	r1, #2157	; 0x86d
 8008736:	480f      	ldr	r0, [pc, #60]	; (8008774 <lfs_ctz_find+0x100>)
 8008738:	f00c f96c 	bl	8014a14 <__assert_func>
        current -= 1 << skip;
 800873c:	2201      	movs	r2, #1
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	fa02 f303 	lsl.w	r3, r2, r3
 8008744:	461a      	mov	r2, r3
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	1a9b      	subs	r3, r3, r2
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 800874c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	429a      	cmp	r2, r3
 8008752:	d8b6      	bhi.n	80086c2 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008758:	601a      	str	r2, [r3, #0]
    *off = pos;
 800875a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800875c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800875e:	601a      	str	r2, [r3, #0]
    return 0;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	372c      	adds	r7, #44	; 0x2c
 8008766:	46bd      	mov	sp, r7
 8008768:	bd90      	pop	{r4, r7, pc}
 800876a:	bf00      	nop
 800876c:	08017074 	.word	0x08017074
 8008770:	08019f04 	.word	0x08019f04
 8008774:	08016c58 	.word	0x08016c58

08008778 <lfs_ctz_extend>:

static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8008778:	b580      	push	{r7, lr}
 800877a:	b090      	sub	sp, #64	; 0x40
 800877c:	af04      	add	r7, sp, #16
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
 8008784:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8008786:	f107 0318 	add.w	r3, r7, #24
 800878a:	4619      	mov	r1, r3
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f7fd fe03 	bl	8006398 <lfs_alloc>
 8008792:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <lfs_ctz_extend+0x26>
            return err;
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	e103      	b.n	80089a6 <lfs_ctz_extend+0x22e>
        }
        LFS_ASSERT(nblock >= 2 && nblock <= lfs->cfg->block_count);
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d905      	bls.n	80087b0 <lfs_ctz_extend+0x38>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087a8:	6a1a      	ldr	r2, [r3, #32]
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d206      	bcs.n	80087be <lfs_ctz_extend+0x46>
 80087b0:	4b7f      	ldr	r3, [pc, #508]	; (80089b0 <lfs_ctz_extend+0x238>)
 80087b2:	4a80      	ldr	r2, [pc, #512]	; (80089b4 <lfs_ctz_extend+0x23c>)
 80087b4:	f640 0181 	movw	r1, #2177	; 0x881
 80087b8:	487f      	ldr	r0, [pc, #508]	; (80089b8 <lfs_ctz_extend+0x240>)
 80087ba:	f00c f92b 	bl	8014a14 <__assert_func>

        {
            err = lfs_bd_erase(lfs, nblock);
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	4619      	mov	r1, r3
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f7fd fab2 	bl	8005d2c <lfs_bd_erase>
 80087c8:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d006      	beq.n	80087de <lfs_ctz_extend+0x66>
                if (err == LFS_ERR_CORRUPT) {
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80087d6:	f000 80d5 	beq.w	8008984 <lfs_ctz_extend+0x20c>
                    goto relocate;
                }
                return err;
 80087da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087dc:	e0e3      	b.n	80089a6 <lfs_ctz_extend+0x22e>
            }

            if (size == 0) {
 80087de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d107      	bne.n	80087f4 <lfs_ctz_extend+0x7c>
                *block = nblock;
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e8:	601a      	str	r2, [r3, #0]
                *off = 0;
 80087ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ec:	2200      	movs	r2, #0
 80087ee:	601a      	str	r2, [r3, #0]
                return 0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	e0d8      	b.n	80089a6 <lfs_ctz_extend+0x22e>
            }

            size -= 1;
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	3b01      	subs	r3, #1
 80087f8:	63bb      	str	r3, [r7, #56]	; 0x38
            lfs_off_t index = lfs_ctz_index(lfs, &size);
 80087fa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f7ff ff00 	bl	8008604 <lfs_ctz_index>
 8008804:	4603      	mov	r3, r0
 8008806:	623b      	str	r3, [r7, #32]
            size += 1;
 8008808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880a:	3301      	adds	r3, #1
 800880c:	63bb      	str	r3, [r7, #56]	; 0x38

            // just copy out the last block if it is incomplete
            if (size != lfs->cfg->block_size) {
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008812:	69da      	ldr	r2, [r3, #28]
 8008814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008816:	429a      	cmp	r2, r3
 8008818:	d043      	beq.n	80088a2 <lfs_ctz_extend+0x12a>
                for (lfs_off_t i = 0; i < size; i++) {
 800881a:	2300      	movs	r3, #0
 800881c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800881e:	e034      	b.n	800888a <lfs_ctz_extend+0x112>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8008820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008824:	1ad1      	subs	r1, r2, r3
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2201      	movs	r2, #1
 800882a:	9203      	str	r2, [sp, #12]
 800882c:	f107 0217 	add.w	r2, r7, #23
 8008830:	9202      	str	r2, [sp, #8]
 8008832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008834:	9201      	str	r2, [sp, #4]
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	460b      	mov	r3, r1
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	2100      	movs	r1, #0
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f7fc ffca 	bl	80057d8 <lfs_bd_read>
 8008844:	6278      	str	r0, [r7, #36]	; 0x24
                            NULL, rcache, size-i,
                            head, i, &data, 1);
                    if (err) {
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <lfs_ctz_extend+0xd8>
                        return err;
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	e0aa      	b.n	80089a6 <lfs_ctz_extend+0x22e>
                    }

                    err = lfs_bd_prog(lfs,
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	2201      	movs	r2, #1
 8008854:	9203      	str	r2, [sp, #12]
 8008856:	f107 0217 	add.w	r2, r7, #23
 800885a:	9202      	str	r2, [sp, #8]
 800885c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800885e:	9201      	str	r2, [sp, #4]
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	2301      	movs	r3, #1
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	68b9      	ldr	r1, [r7, #8]
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f7fd f9b9 	bl	8005be0 <lfs_bd_prog>
 800886e:	6278      	str	r0, [r7, #36]	; 0x24
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	2b00      	cmp	r3, #0
 8008874:	d006      	beq.n	8008884 <lfs_ctz_extend+0x10c>
                        if (err == LFS_ERR_CORRUPT) {
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800887c:	f000 8084 	beq.w	8008988 <lfs_ctz_extend+0x210>
                            goto relocate;
                        }
                        return err;
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	e090      	b.n	80089a6 <lfs_ctz_extend+0x22e>
                for (lfs_off_t i = 0; i < size; i++) {
 8008884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008886:	3301      	adds	r3, #1
 8008888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800888e:	429a      	cmp	r2, r3
 8008890:	d3c6      	bcc.n	8008820 <lfs_ctz_extend+0xa8>
                    }
                }

                *block = nblock;
 8008892:	69ba      	ldr	r2, [r7, #24]
 8008894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008896:	601a      	str	r2, [r3, #0]
                *off = size;
 8008898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800889a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800889c:	601a      	str	r2, [r3, #0]
                return 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	e081      	b.n	80089a6 <lfs_ctz_extend+0x22e>
            }

            // append block
            index += 1;
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	3301      	adds	r3, #1
 80088a6:	623b      	str	r3, [r7, #32]
            lfs_size_t skips = lfs_ctz(index) + 1;
 80088a8:	6a38      	ldr	r0, [r7, #32]
 80088aa:	f7fc ff00 	bl	80056ae <lfs_ctz>
 80088ae:	4603      	mov	r3, r0
 80088b0:	3301      	adds	r3, #1
 80088b2:	61fb      	str	r3, [r7, #28]

            for (lfs_off_t i = 0; i < skips; i++) {
 80088b4:	2300      	movs	r3, #0
 80088b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80088b8:	e057      	b.n	800896a <lfs_ctz_extend+0x1f2>
                head = lfs_tole32(head);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fc ff2a 	bl	8005716 <lfs_tole32>
 80088c2:	4603      	mov	r3, r0
 80088c4:	603b      	str	r3, [r7, #0]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ca:	0092      	lsls	r2, r2, #2
 80088cc:	2104      	movs	r1, #4
 80088ce:	9103      	str	r1, [sp, #12]
 80088d0:	4639      	mov	r1, r7
 80088d2:	9102      	str	r1, [sp, #8]
 80088d4:	9201      	str	r2, [sp, #4]
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	2301      	movs	r3, #1
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	68b9      	ldr	r1, [r7, #8]
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f7fd f97e 	bl	8005be0 <lfs_bd_prog>
 80088e4:	6278      	str	r0, [r7, #36]	; 0x24
                        nblock, 4*i, &head, 4);
                head = lfs_fromle32(head);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fc ff09 	bl	8005700 <lfs_fromle32>
 80088ee:	4603      	mov	r3, r0
 80088f0:	603b      	str	r3, [r7, #0]
                if (err) {
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d005      	beq.n	8008904 <lfs_ctz_extend+0x18c>
                    if (err == LFS_ERR_CORRUPT) {
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80088fe:	d045      	beq.n	800898c <lfs_ctz_extend+0x214>
                        goto relocate;
                    }
                    return err;
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	e050      	b.n	80089a6 <lfs_ctz_extend+0x22e>
                }

                if (i != skips-1) {
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	3b01      	subs	r3, #1
 8008908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800890a:	429a      	cmp	r2, r3
 800890c:	d01a      	beq.n	8008944 <lfs_ctz_extend+0x1cc>
                    err = lfs_bd_read(lfs,
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008912:	0092      	lsls	r2, r2, #2
 8008914:	2104      	movs	r1, #4
 8008916:	9103      	str	r1, [sp, #12]
 8008918:	4639      	mov	r1, r7
 800891a:	9102      	str	r1, [sp, #8]
 800891c:	9201      	str	r2, [sp, #4]
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	2304      	movs	r3, #4
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	2100      	movs	r1, #0
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f7fc ff56 	bl	80057d8 <lfs_bd_read>
 800892c:	6278      	str	r0, [r7, #36]	; 0x24
                            NULL, rcache, sizeof(head),
                            head, 4*i, &head, sizeof(head));
                    head = lfs_fromle32(head);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	4618      	mov	r0, r3
 8008932:	f7fc fee5 	bl	8005700 <lfs_fromle32>
 8008936:	4603      	mov	r3, r0
 8008938:	603b      	str	r3, [r7, #0]
                    if (err) {
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <lfs_ctz_extend+0x1cc>
                        return err;
 8008940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008942:	e030      	b.n	80089a6 <lfs_ctz_extend+0x22e>
                    }
                }

                LFS_ASSERT(head >= 2 && head <= lfs->cfg->block_count);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d905      	bls.n	8008956 <lfs_ctz_extend+0x1de>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800894e:	6a1a      	ldr	r2, [r3, #32]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	429a      	cmp	r2, r3
 8008954:	d206      	bcs.n	8008964 <lfs_ctz_extend+0x1ec>
 8008956:	4b19      	ldr	r3, [pc, #100]	; (80089bc <lfs_ctz_extend+0x244>)
 8008958:	4a16      	ldr	r2, [pc, #88]	; (80089b4 <lfs_ctz_extend+0x23c>)
 800895a:	f640 01cb 	movw	r1, #2251	; 0x8cb
 800895e:	4816      	ldr	r0, [pc, #88]	; (80089b8 <lfs_ctz_extend+0x240>)
 8008960:	f00c f858 	bl	8014a14 <__assert_func>
            for (lfs_off_t i = 0; i < skips; i++) {
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	3301      	adds	r3, #1
 8008968:	62bb      	str	r3, [r7, #40]	; 0x28
 800896a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	429a      	cmp	r2, r3
 8008970:	d3a3      	bcc.n	80088ba <lfs_ctz_extend+0x142>
            }

            *block = nblock;
 8008972:	69ba      	ldr	r2, [r7, #24]
 8008974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008976:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	009a      	lsls	r2, r3, #2
 800897c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800897e:	601a      	str	r2, [r3, #0]
            return 0;
 8008980:	2300      	movs	r3, #0
 8008982:	e010      	b.n	80089a6 <lfs_ctz_extend+0x22e>
                    goto relocate;
 8008984:	bf00      	nop
 8008986:	e002      	b.n	800898e <lfs_ctz_extend+0x216>
                            goto relocate;
 8008988:	bf00      	nop
 800898a:	e000      	b.n	800898e <lfs_ctz_extend+0x216>
                        goto relocate;
 800898c:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at %"PRIx32, nblock);
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	461a      	mov	r2, r3
 8008992:	f640 01d4 	movw	r1, #2260	; 0x8d4
 8008996:	480a      	ldr	r0, [pc, #40]	; (80089c0 <lfs_ctz_extend+0x248>)
 8008998:	f00c fe34 	bl	8015604 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 800899c:	68b9      	ldr	r1, [r7, #8]
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f7fc fef4 	bl	800578c <lfs_cache_drop>
    while (true) {
 80089a4:	e6ef      	b.n	8008786 <lfs_ctz_extend+0xe>
    }
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3730      	adds	r7, #48	; 0x30
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	080170a0 	.word	0x080170a0
 80089b4:	08019f14 	.word	0x08019f14
 80089b8:	08016c58 	.word	0x08016c58
 80089bc:	08017074 	.word	0x08017074
 80089c0:	08016dd0 	.word	0x08016dd0

080089c4 <lfs_ctz_traverse>:

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b090      	sub	sp, #64	; 0x40
 80089c8:	af04      	add	r7, sp, #16
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <lfs_ctz_traverse+0x18>
        return 0;
 80089d8:	2300      	movs	r3, #0
 80089da:	e06b      	b.n	8008ab4 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80089dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089de:	3b01      	subs	r3, #1
 80089e0:	61fb      	str	r3, [r7, #28]
 80089e2:	f107 031c 	add.w	r3, r7, #28
 80089e6:	4619      	mov	r1, r3
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f7ff fe0b 	bl	8008604 <lfs_ctz_index>
 80089ee:	4603      	mov	r3, r0
 80089f0:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 80089f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80089f8:	4798      	blx	r3
 80089fa:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <lfs_ctz_traverse+0x42>
            return err;
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	e056      	b.n	8008ab4 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8008a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d101      	bne.n	8008a10 <lfs_ctz_traverse+0x4c>
            return 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	e051      	b.n	8008ab4 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8008a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	f1c3 0302 	rsb	r3, r3, #2
 8008a1a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8008a1e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8008a20:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8008a22:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8008a24:	9303      	str	r3, [sp, #12]
 8008a26:	f107 0314 	add.w	r3, r7, #20
 8008a2a:	9302      	str	r3, [sp, #8]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	4613      	mov	r3, r2
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	68b9      	ldr	r1, [r7, #8]
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f7fc fecc 	bl	80057d8 <lfs_bd_read>
 8008a40:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fc fe5b 	bl	8005700 <lfs_fromle32>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7fc fe55 	bl	8005700 <lfs_fromle32>
 8008a56:	4603      	mov	r3, r0
 8008a58:	61bb      	str	r3, [r7, #24]
        if (err) {
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <lfs_ctz_traverse+0xa0>
            return err;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	e027      	b.n	8008ab4 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8008a64:	2300      	movs	r3, #0
 8008a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a68:	e012      	b.n	8008a90 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8008a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	3330      	adds	r3, #48	; 0x30
 8008a70:	443b      	add	r3, r7
 8008a72:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8008a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a78:	4611      	mov	r1, r2
 8008a7a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008a7c:	4798      	blx	r3
 8008a7e:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <lfs_ctz_traverse+0xc6>
                return err;
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	e014      	b.n	8008ab4 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a96:	429a      	cmp	r2, r3
 8008a98:	dbe7      	blt.n	8008a6a <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8008a9a:	6a3b      	ldr	r3, [r7, #32]
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	3330      	adds	r3, #48	; 0x30
 8008aa2:	443b      	add	r3, r7
 8008aa4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8008aa8:	603b      	str	r3, [r7, #0]
        index -= count;
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8008ab2:	e79e      	b.n	80089f2 <lfs_ctz_traverse+0x2e>
    }
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3730      	adds	r7, #48	; 0x30
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <lfs_file_relocate>:
    file->flags &= ~LFS_F_OPENED;
    LFS_TRACE("lfs_file_close -> %d", err);
    return err;
}

static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8008abc:	b590      	push	{r4, r7, lr}
 8008abe:	b08d      	sub	sp, #52	; 0x34
 8008ac0:	af06      	add	r7, sp, #24
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(file->flags & LFS_F_OPENED);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d106      	bne.n	8008ae0 <lfs_file_relocate+0x24>
 8008ad2:	4b68      	ldr	r3, [pc, #416]	; (8008c74 <lfs_file_relocate+0x1b8>)
 8008ad4:	4a68      	ldr	r2, [pc, #416]	; (8008c78 <lfs_file_relocate+0x1bc>)
 8008ad6:	f640 11c5 	movw	r1, #2501	; 0x9c5
 8008ada:	4868      	ldr	r0, [pc, #416]	; (8008c7c <lfs_file_relocate+0x1c0>)
 8008adc:	f00b ff9a 	bl	8014a14 <__assert_func>

    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8008ae0:	f107 030c 	add.w	r3, r7, #12
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7fd fc56 	bl	8006398 <lfs_alloc>
 8008aec:	6138      	str	r0, [r7, #16]
        if (err) {
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <lfs_file_relocate+0x3c>
            return err;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	e0b9      	b.n	8008c6c <lfs_file_relocate+0x1b0>
        }

        err = lfs_bd_erase(lfs, nblock);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7fd f915 	bl	8005d2c <lfs_bd_erase>
 8008b02:	6138      	str	r0, [r7, #16]
        if (err) {
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d006      	beq.n	8008b18 <lfs_file_relocate+0x5c>
            if (err == LFS_ERR_CORRUPT) {
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008b10:	f000 809b 	beq.w	8008c4a <lfs_file_relocate+0x18e>
                goto relocate;
            }
            return err;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	e0a9      	b.n	8008c6c <lfs_file_relocate+0x1b0>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8008b18:	2300      	movs	r3, #0
 8008b1a:	617b      	str	r3, [r7, #20]
 8008b1c:	e069      	b.n	8008bf2 <lfs_file_relocate+0x136>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d027      	beq.n	8008b7a <lfs_file_relocate+0xbe>
                err = lfs_dir_getread(lfs, &file->m,
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	f103 0008 	add.w	r0, r3, #8
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	889b      	ldrh	r3, [r3, #4]
 8008b42:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8008b44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	9105      	str	r1, [sp, #20]
 8008b50:	f107 010b 	add.w	r1, r7, #11
 8008b54:	9104      	str	r1, [sp, #16]
 8008b56:	6979      	ldr	r1, [r7, #20]
 8008b58:	9103      	str	r1, [sp, #12]
 8008b5a:	9302      	str	r3, [sp, #8]
 8008b5c:	4b48      	ldr	r3, [pc, #288]	; (8008c80 <lfs_file_relocate+0x1c4>)
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	9200      	str	r2, [sp, #0]
 8008b62:	4623      	mov	r3, r4
 8008b64:	2200      	movs	r2, #0
 8008b66:	4601      	mov	r1, r0
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7fd fdc8 	bl	80066fe <lfs_dir_getread>
 8008b6e:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d01e      	beq.n	8008bb4 <lfs_file_relocate+0xf8>
                    return err;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	e078      	b.n	8008c6c <lfs_file_relocate+0x1b0>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8008b80:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	1ad4      	subs	r4, r2, r3
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8e:	2201      	movs	r2, #1
 8008b90:	9203      	str	r2, [sp, #12]
 8008b92:	f107 020b 	add.w	r2, r7, #11
 8008b96:	9202      	str	r2, [sp, #8]
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	9201      	str	r2, [sp, #4]
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	4623      	mov	r3, r4
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7fc fe18 	bl	80057d8 <lfs_bd_read>
 8008ba8:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <lfs_file_relocate+0xf8>
                    return err;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	e05b      	b.n	8008c6c <lfs_file_relocate+0x1b0>
                }
            }

            err = lfs_bd_prog(lfs,
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f103 0110 	add.w	r1, r3, #16
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	9203      	str	r2, [sp, #12]
 8008bc2:	f107 020b 	add.w	r2, r7, #11
 8008bc6:	9202      	str	r2, [sp, #8]
 8008bc8:	697a      	ldr	r2, [r7, #20]
 8008bca:	9201      	str	r2, [sp, #4]
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	2301      	movs	r3, #1
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7fd f804 	bl	8005be0 <lfs_bd_prog>
 8008bd8:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d005      	beq.n	8008bec <lfs_file_relocate+0x130>
                if (err == LFS_ERR_CORRUPT) {
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008be6:	d032      	beq.n	8008c4e <lfs_file_relocate+0x192>
                    goto relocate;
                }
                return err;
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	e03f      	b.n	8008c6c <lfs_file_relocate+0x1b0>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	617b      	str	r3, [r7, #20]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d390      	bcc.n	8008b1e <lfs_file_relocate+0x62>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	69d9      	ldr	r1, [r3, #28]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f00c f916 	bl	8014e3c <memcpy>
        file->cache.block = lfs->pcache.block;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	691a      	ldr	r2, [r3, #16]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	695a      	ldr	r2, [r3, #20]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	699a      	ldr	r2, [r3, #24]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	3310      	adds	r3, #16
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7fc fdbb 	bl	80057aa <lfs_cache_zero>

        file->block = nblock;
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8008c46:	2300      	movs	r3, #0
 8008c48:	e010      	b.n	8008c6c <lfs_file_relocate+0x1b0>
                goto relocate;
 8008c4a:	bf00      	nop
 8008c4c:	e000      	b.n	8008c50 <lfs_file_relocate+0x194>
                    goto relocate;
 8008c4e:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at %"PRIx32, nblock);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	461a      	mov	r2, r3
 8008c54:	f640 2104 	movw	r1, #2564	; 0xa04
 8008c58:	480a      	ldr	r0, [pc, #40]	; (8008c84 <lfs_file_relocate+0x1c8>)
 8008c5a:	f00c fcd3 	bl	8015604 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	3310      	adds	r3, #16
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7fc fd91 	bl	800578c <lfs_cache_drop>
    while (true) {
 8008c6a:	e739      	b.n	8008ae0 <lfs_file_relocate+0x24>
    }
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	371c      	adds	r7, #28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd90      	pop	{r4, r7, pc}
 8008c74:	080171d4 	.word	0x080171d4
 8008c78:	08019f24 	.word	0x08019f24
 8008c7c:	08016c58 	.word	0x08016c58
 8008c80:	fff7fc00 	.word	0xfff7fc00
 8008c84:	08016dd0 	.word	0x08016dd0

08008c88 <lfs_file_outline>:

static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7fd fc26 	bl	80064ec <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7ff ff0a 	bl	8008abc <lfs_file_relocate>
 8008ca8:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d001      	beq.n	8008cb4 <lfs_file_outline+0x2c>
        return err;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	e006      	b.n	8008cc2 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <lfs_file_flush>:

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8008ccc:	b590      	push	{r4, r7, lr}
 8008cce:	b09d      	sub	sp, #116	; 0x74
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(file->flags & LFS_F_OPENED);
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d106      	bne.n	8008cf0 <lfs_file_flush+0x24>
 8008ce2:	4b66      	ldr	r3, [pc, #408]	; (8008e7c <lfs_file_flush+0x1b0>)
 8008ce4:	4a66      	ldr	r2, [pc, #408]	; (8008e80 <lfs_file_flush+0x1b4>)
 8008ce6:	f640 2118 	movw	r1, #2584	; 0xa18
 8008cea:	4866      	ldr	r0, [pc, #408]	; (8008e84 <lfs_file_flush+0x1b8>)
 8008cec:	f00b fe92 	bl	8014a14 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d011      	beq.n	8008d20 <lfs_file_flush+0x54>
        if (!(file->flags & LFS_F_INLINE)) {
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d105      	bne.n	8008d14 <lfs_file_flush+0x48>
            lfs_cache_drop(lfs, &file->cache);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	3340      	adds	r3, #64	; 0x40
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7fc fd3c 	bl	800578c <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d18:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    if (file->flags & LFS_F_WRITING) {
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 80a2 	beq.w	8008e72 <lfs_file_flush+0x1a6>
        lfs_off_t pos = file->pos;
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d32:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d174      	bne.n	8008e2a <lfs_file_flush+0x15e>
            // copy over anything after current branch
            lfs_file_t orig = {
 8008d40:	f107 030c 	add.w	r3, r7, #12
 8008d44:	2254      	movs	r2, #84	; 0x54
 8008d46:	2100      	movs	r1, #0
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f00c f885 	bl	8014e58 <memset>
                .ctz.head = file->ctz.head,
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8008d52:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8008d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d5a:	4b4b      	ldr	r3, [pc, #300]	; (8008e88 <lfs_file_flush+0x1bc>)
 8008d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY | LFS_F_OPENED,
                .pos = file->pos,
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8008d62:	643b      	str	r3, [r7, #64]	; 0x40
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8008d6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7fc fd09 	bl	800578c <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8008d7a:	e02b      	b.n	8008dd4 <lfs_file_flush+0x108>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
 8008d7c:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8008d80:	f107 010c 	add.w	r1, r7, #12
 8008d84:	2301      	movs	r3, #1
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f882 	bl	8008e90 <lfs_file_read>
 8008d8c:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8008d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	da01      	bge.n	8008d98 <lfs_file_flush+0xcc>
                    return res;
 8008d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d96:	e06d      	b.n	8008e74 <lfs_file_flush+0x1a8>
                }

                res = lfs_file_write(lfs, file, &data, 1);
 8008d98:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f9ab 	bl	80090fc <lfs_file_write>
 8008da6:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8008da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	da01      	bge.n	8008db2 <lfs_file_flush+0xe6>
                    return res;
 8008dae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008db0:	e060      	b.n	8008e74 <lfs_file_flush+0x1a8>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dba:	d00b      	beq.n	8008dd4 <lfs_file_flush+0x108>
                    lfs_cache_drop(lfs, &orig.cache);
 8008dbc:	f107 030c 	add.w	r3, r7, #12
 8008dc0:	3340      	adds	r3, #64	; 0x40
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7fc fce1 	bl	800578c <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7fc fcdc 	bl	800578c <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d3cd      	bcc.n	8008d7c <lfs_file_flush+0xb0>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	2301      	movs	r3, #1
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7fc fe48 	bl	8005a80 <lfs_bd_flush>
 8008df0:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8008df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d024      	beq.n	8008e42 <lfs_file_flush+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8008df8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dfa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008dfe:	d001      	beq.n	8008e04 <lfs_file_flush+0x138>
                        goto relocate;
                    }
                    return err;
 8008e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e02:	e037      	b.n	8008e74 <lfs_file_flush+0x1a8>
                        goto relocate;
 8008e04:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at %"PRIx32, file->block);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	f640 2151 	movw	r1, #2641	; 0xa51
 8008e10:	481e      	ldr	r0, [pc, #120]	; (8008e8c <lfs_file_flush+0x1c0>)
 8008e12:	f00c fbf7 	bl	8015604 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff fe4f 	bl	8008abc <lfs_file_relocate>
 8008e1e:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8008e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0dc      	beq.n	8008de0 <lfs_file_flush+0x114>
                    return err;
 8008e26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e28:	e024      	b.n	8008e74 <lfs_file_flush+0x1a8>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e32:	4619      	mov	r1, r3
 8008e34:	4610      	mov	r0, r2
 8008e36:	f7fc fbe3 	bl	8005600 <lfs_max>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	635a      	str	r2, [r3, #52]	; 0x34
 8008e40:	e000      	b.n	8008e44 <lfs_file_flush+0x178>
                break;
 8008e42:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e58:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e70:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return 0;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3774      	adds	r7, #116	; 0x74
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd90      	pop	{r4, r7, pc}
 8008e7c:	080171d4 	.word	0x080171d4
 8008e80:	08019f38 	.word	0x08019f38
 8008e84:	08016c58 	.word	0x08016c58
 8008e88:	00200001 	.word	0x00200001
 8008e8c:	08016dd0 	.word	0x08016dd0

08008e90 <lfs_file_read>:
        }
    }
}

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008e90:	b5b0      	push	{r4, r5, r7, lr}
 8008e92:	b092      	sub	sp, #72	; 0x48
 8008e94:	af06      	add	r7, sp, #24
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
 8008e9c:	603b      	str	r3, [r7, #0]
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	f640 21ab 	movw	r1, #2731	; 0xaab
 8008eae:	488c      	ldr	r0, [pc, #560]	; (80090e0 <lfs_file_read+0x250>)
 8008eb0:	f00c fba8 	bl	8015604 <iprintf>
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d106      	bne.n	8008ece <lfs_file_read+0x3e>
 8008ec0:	4b88      	ldr	r3, [pc, #544]	; (80090e4 <lfs_file_read+0x254>)
 8008ec2:	4a89      	ldr	r2, [pc, #548]	; (80090e8 <lfs_file_read+0x258>)
 8008ec4:	f640 21ad 	movw	r1, #2733	; 0xaad
 8008ec8:	4888      	ldr	r0, [pc, #544]	; (80090ec <lfs_file_read+0x25c>)
 8008eca:	f00b fda3 	bl	8014a14 <__assert_func>
    LFS_ASSERT((file->flags & 3) != LFS_O_WRONLY);
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed2:	f003 0303 	and.w	r3, r3, #3
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d106      	bne.n	8008ee8 <lfs_file_read+0x58>
 8008eda:	4b85      	ldr	r3, [pc, #532]	; (80090f0 <lfs_file_read+0x260>)
 8008edc:	4a82      	ldr	r2, [pc, #520]	; (80090e8 <lfs_file_read+0x258>)
 8008ede:	f640 21ae 	movw	r1, #2734	; 0xaae
 8008ee2:	4882      	ldr	r0, [pc, #520]	; (80090ec <lfs_file_read+0x25c>)
 8008ee4:	f00b fd96 	bl	8014a14 <__assert_func>

    uint8_t *data = buffer;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	62bb      	str	r3, [r7, #40]	; 0x28

    if (file->flags & LFS_F_WRITING) {
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00f      	beq.n	8008f1c <lfs_file_read+0x8c>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8008efc:	68b9      	ldr	r1, [r7, #8]
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f7ff fee4 	bl	8008ccc <lfs_file_flush>
 8008f04:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d007      	beq.n	8008f1c <lfs_file_read+0x8c>
            LFS_TRACE("lfs_file_read -> %"PRId32, err);
 8008f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0e:	f640 21b7 	movw	r1, #2743	; 0xab7
 8008f12:	4878      	ldr	r0, [pc, #480]	; (80090f4 <lfs_file_read+0x264>)
 8008f14:	f00c fb76 	bl	8015604 <iprintf>
            return err;
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	e0dd      	b.n	80090d8 <lfs_file_read+0x248>
        }
    }

    if (file->pos >= file->ctz.size) {
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d307      	bcc.n	8008f38 <lfs_file_read+0xa8>
        // eof if past end
        LFS_TRACE("lfs_file_read -> %"PRId32, 0);
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f640 21be 	movw	r1, #2750	; 0xabe
 8008f2e:	4871      	ldr	r0, [pc, #452]	; (80090f4 <lfs_file_read+0x264>)
 8008f30:	f00c fb68 	bl	8015604 <iprintf>
        return 0;
 8008f34:	2300      	movs	r3, #0
 8008f36:	e0cf      	b.n	80090d8 <lfs_file_read+0x248>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	4619      	mov	r1, r3
 8008f44:	6838      	ldr	r0, [r7, #0]
 8008f46:	f7fc fb6b 	bl	8005620 <lfs_min>
 8008f4a:	6038      	str	r0, [r7, #0]
    nsize = size;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	62bb      	str	r3, [r7, #40]	; 0x28

    while (nsize > 0) {
 8008f50:	e0b7      	b.n	80090c2 <lfs_file_read+0x232>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d006      	beq.n	8008f6c <lfs_file_read+0xdc>
                file->off == lfs->cfg->block_size) {
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f66:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d136      	bne.n	8008fda <lfs_file_read+0x14a>
            if (!(file->flags & LFS_F_INLINE)) {
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d122      	bne.n	8008fbe <lfs_file_read+0x12e>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008f8a:	68b9      	ldr	r1, [r7, #8]
 8008f8c:	3138      	adds	r1, #56	; 0x38
 8008f8e:	68b8      	ldr	r0, [r7, #8]
 8008f90:	303c      	adds	r0, #60	; 0x3c
 8008f92:	9003      	str	r0, [sp, #12]
 8008f94:	9102      	str	r1, [sp, #8]
 8008f96:	9201      	str	r2, [sp, #4]
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	462b      	mov	r3, r5
 8008f9c:	4622      	mov	r2, r4
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f7ff fb67 	bl	8008674 <lfs_ctz_find>
 8008fa6:	6238      	str	r0, [r7, #32]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00f      	beq.n	8008fce <lfs_file_read+0x13e>
                    LFS_TRACE("lfs_file_read -> %"PRId32, err);
 8008fae:	6a3a      	ldr	r2, [r7, #32]
 8008fb0:	f640 21ce 	movw	r1, #2766	; 0xace
 8008fb4:	484f      	ldr	r0, [pc, #316]	; (80090f4 <lfs_file_read+0x264>)
 8008fb6:	f00c fb25 	bl	8015604 <iprintf>
                    return err;
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	e08c      	b.n	80090d8 <lfs_file_read+0x248>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	f06f 0201 	mvn.w	r2, #1
 8008fc4:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fde:	69da      	ldr	r2, [r3, #28]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fea:	f7fc fb19 	bl	8005620 <lfs_min>
 8008fee:	61f8      	str	r0, [r7, #28]
        if (file->flags & LFS_F_INLINE) {
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d02c      	beq.n	8009056 <lfs_file_read+0x1c6>
            int err = lfs_dir_getread(lfs, &file->m,
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	f103 0408 	add.w	r4, r3, #8
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 800900c:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	889b      	ldrh	r3, [r3, #4]
 8009012:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8009014:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800901c:	68b9      	ldr	r1, [r7, #8]
 800901e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8009020:	69f8      	ldr	r0, [r7, #28]
 8009022:	9005      	str	r0, [sp, #20]
 8009024:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009026:	9004      	str	r0, [sp, #16]
 8009028:	9103      	str	r1, [sp, #12]
 800902a:	9302      	str	r3, [sp, #8]
 800902c:	4b32      	ldr	r3, [pc, #200]	; (80090f8 <lfs_file_read+0x268>)
 800902e:	9301      	str	r3, [sp, #4]
 8009030:	9200      	str	r2, [sp, #0]
 8009032:	462b      	mov	r3, r5
 8009034:	2200      	movs	r2, #0
 8009036:	4621      	mov	r1, r4
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f7fd fb60 	bl	80066fe <lfs_dir_getread>
 800903e:	6178      	str	r0, [r7, #20]
                    file->off, data, diff);
            if (err) {
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d029      	beq.n	800909a <lfs_file_read+0x20a>
                LFS_TRACE("lfs_file_read -> %"PRId32, err);
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	f640 21e2 	movw	r1, #2786	; 0xae2
 800904c:	4829      	ldr	r0, [pc, #164]	; (80090f4 <lfs_file_read+0x264>)
 800904e:	f00c fad9 	bl	8015604 <iprintf>
                return err;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	e040      	b.n	80090d8 <lfs_file_read+0x248>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8009060:	69dc      	ldr	r4, [r3, #28]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800906a:	69f9      	ldr	r1, [r7, #28]
 800906c:	9103      	str	r1, [sp, #12]
 800906e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009070:	9102      	str	r1, [sp, #8]
 8009072:	9201      	str	r2, [sp, #4]
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	4623      	mov	r3, r4
 8009078:	4602      	mov	r2, r0
 800907a:	2100      	movs	r1, #0
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f7fc fbab 	bl	80057d8 <lfs_bd_read>
 8009082:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d007      	beq.n	800909a <lfs_file_read+0x20a>
                LFS_TRACE("lfs_file_read -> %"PRId32, err);
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	f640 21ea 	movw	r1, #2794	; 0xaea
 8009090:	4818      	ldr	r0, [pc, #96]	; (80090f4 <lfs_file_read+0x264>)
 8009092:	f00c fab7 	bl	8015604 <iprintf>
                return err;
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	e01e      	b.n	80090d8 <lfs_file_read+0x248>
            }
        }

        file->pos += diff;
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	441a      	add	r2, r3
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	441a      	add	r2, r3
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80090b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	4413      	add	r3, r2
 80090b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 80090ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	62bb      	str	r3, [r7, #40]	; 0x28
    while (nsize > 0) {
 80090c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f47f af44 	bne.w	8008f52 <lfs_file_read+0xc2>
    }

    LFS_TRACE("lfs_file_read -> %"PRId32, size);
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	f640 21f5 	movw	r1, #2805	; 0xaf5
 80090d0:	4808      	ldr	r0, [pc, #32]	; (80090f4 <lfs_file_read+0x264>)
 80090d2:	f00c fa97 	bl	8015604 <iprintf>
    return size;
 80090d6:	683b      	ldr	r3, [r7, #0]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3730      	adds	r7, #48	; 0x30
 80090dc:	46bd      	mov	sp, r7
 80090de:	bdb0      	pop	{r4, r5, r7, pc}
 80090e0:	08017260 	.word	0x08017260
 80090e4:	080171d4 	.word	0x080171d4
 80090e8:	08019f48 	.word	0x08019f48
 80090ec:	08016c58 	.word	0x08016c58
 80090f0:	08017290 	.word	0x08017290
 80090f4:	080172b4 	.word	0x080172b4
 80090f8:	fff7fc00 	.word	0xfff7fc00

080090fc <lfs_file_write>:

lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80090fc:	b5b0      	push	{r4, r5, r7, lr}
 80090fe:	b094      	sub	sp, #80	; 0x50
 8009100:	af04      	add	r7, sp, #16
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	603b      	str	r3, [r7, #0]
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	f640 21fb 	movw	r1, #2811	; 0xafb
 800911a:	4886      	ldr	r0, [pc, #536]	; (8009334 <lfs_file_write+0x238>)
 800911c:	f00c fa72 	bl	8015604 <iprintf>
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d106      	bne.n	800913a <lfs_file_write+0x3e>
 800912c:	4b82      	ldr	r3, [pc, #520]	; (8009338 <lfs_file_write+0x23c>)
 800912e:	4a83      	ldr	r2, [pc, #524]	; (800933c <lfs_file_write+0x240>)
 8009130:	f640 21fd 	movw	r1, #2813	; 0xafd
 8009134:	4882      	ldr	r0, [pc, #520]	; (8009340 <lfs_file_write+0x244>)
 8009136:	f00b fc6d 	bl	8014a14 <__assert_func>
    LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913e:	f003 0303 	and.w	r3, r3, #3
 8009142:	2b01      	cmp	r3, #1
 8009144:	d106      	bne.n	8009154 <lfs_file_write+0x58>
 8009146:	4b7f      	ldr	r3, [pc, #508]	; (8009344 <lfs_file_write+0x248>)
 8009148:	4a7c      	ldr	r2, [pc, #496]	; (800933c <lfs_file_write+0x240>)
 800914a:	f640 21fe 	movw	r1, #2814	; 0xafe
 800914e:	487c      	ldr	r0, [pc, #496]	; (8009340 <lfs_file_write+0x244>)
 8009150:	f00b fc60 	bl	8014a14 <__assert_func>

    const uint8_t *data = buffer;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	63fb      	str	r3, [r7, #60]	; 0x3c
    lfs_size_t nsize = size;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	63bb      	str	r3, [r7, #56]	; 0x38

    if (file->flags & LFS_F_READING) {
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00f      	beq.n	8009188 <lfs_file_write+0x8c>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8009168:	68b9      	ldr	r1, [r7, #8]
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f7ff fdae 	bl	8008ccc <lfs_file_flush>
 8009170:	6378      	str	r0, [r7, #52]	; 0x34
        if (err) {
 8009172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009174:	2b00      	cmp	r3, #0
 8009176:	d007      	beq.n	8009188 <lfs_file_write+0x8c>
            LFS_TRACE("lfs_file_write -> %"PRId32, err);
 8009178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800917a:	f640 3107 	movw	r1, #2823	; 0xb07
 800917e:	4872      	ldr	r0, [pc, #456]	; (8009348 <lfs_file_write+0x24c>)
 8009180:	f00c fa40 	bl	8015604 <iprintf>
            return err;
 8009184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009186:	e194      	b.n	80094b2 <lfs_file_write+0x3b6>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009190:	2b00      	cmp	r3, #0
 8009192:	d009      	beq.n	80091a8 <lfs_file_write+0xac>
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919c:	429a      	cmp	r2, r3
 800919e:	d203      	bcs.n	80091a8 <lfs_file_write+0xac>
        file->pos = file->ctz.size;
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	441a      	add	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d909      	bls.n	80091cc <lfs_file_write+0xd0>
        // Larger than file limit?
        LFS_TRACE("lfs_file_write -> %"PRId32, LFS_ERR_FBIG);
 80091b8:	f06f 021a 	mvn.w	r2, #26
 80091bc:	f640 3112 	movw	r1, #2834	; 0xb12
 80091c0:	4861      	ldr	r0, [pc, #388]	; (8009348 <lfs_file_write+0x24c>)
 80091c2:	f00c fa1f 	bl	8015604 <iprintf>
        return LFS_ERR_FBIG;
 80091c6:	f06f 031a 	mvn.w	r3, #26
 80091ca:	e172      	b.n	80094b2 <lfs_file_write+0x3b6>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d127      	bne.n	8009228 <lfs_file_write+0x12c>
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d921      	bls.n	8009228 <lfs_file_write+0x12c>
        // fill with zeros
        lfs_off_t pos = file->pos;
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e8:	633b      	str	r3, [r7, #48]	; 0x30
        file->pos = file->ctz.size;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 80091f2:	e014      	b.n	800921e <lfs_file_write+0x122>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
 80091f4:	2300      	movs	r3, #0
 80091f6:	75fb      	strb	r3, [r7, #23]
 80091f8:	f107 0217 	add.w	r2, r7, #23
 80091fc:	2301      	movs	r3, #1
 80091fe:	68b9      	ldr	r1, [r7, #8]
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f7ff ff7b 	bl	80090fc <lfs_file_write>
 8009206:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (res < 0) {
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	2b00      	cmp	r3, #0
 800920c:	da07      	bge.n	800921e <lfs_file_write+0x122>
                LFS_TRACE("lfs_file_write -> %"PRId32, res);
 800920e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009210:	f640 311e 	movw	r1, #2846	; 0xb1e
 8009214:	484c      	ldr	r0, [pc, #304]	; (8009348 <lfs_file_write+0x24c>)
 8009216:	f00c f9f5 	bl	8015604 <iprintf>
                return res;
 800921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921c:	e149      	b.n	80094b2 <lfs_file_write+0x3b6>
        while (file->pos < pos) {
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009224:	429a      	cmp	r2, r3
 8009226:	d8e5      	bhi.n	80091f4 <lfs_file_write+0xf8>
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 812d 	beq.w	8009490 <lfs_file_write+0x394>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800923a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923c:	441a      	add	r2, r3
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009242:	4619      	mov	r1, r3
 8009244:	4610      	mov	r0, r2
 8009246:	f7fc f9db 	bl	8005600 <lfs_max>
 800924a:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 8009250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009256:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8009258:	08db      	lsrs	r3, r3, #3
 800925a:	4619      	mov	r1, r3
 800925c:	4610      	mov	r0, r2
 800925e:	f7fc f9df 	bl	8005620 <lfs_min>
 8009262:	4603      	mov	r3, r0
 8009264:	4619      	mov	r1, r3
 8009266:	f240 30fe 	movw	r0, #1022	; 0x3fe
 800926a:	f7fc f9d9 	bl	8005620 <lfs_min>
 800926e:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8009270:	429c      	cmp	r4, r3
 8009272:	f240 810d 	bls.w	8009490 <lfs_file_write+0x394>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8009276:	68b9      	ldr	r1, [r7, #8]
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7ff fd05 	bl	8008c88 <lfs_file_outline>
 800927e:	62b8      	str	r0, [r7, #40]	; 0x28
        if (err) {
 8009280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009282:	2b00      	cmp	r3, #0
 8009284:	f000 8104 	beq.w	8009490 <lfs_file_write+0x394>
            file->flags |= LFS_F_ERRED;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	631a      	str	r2, [r3, #48]	; 0x30
            LFS_TRACE("lfs_file_write -> %"PRId32, err);
 8009294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009296:	f640 312c 	movw	r1, #2860	; 0xb2c
 800929a:	482b      	ldr	r0, [pc, #172]	; (8009348 <lfs_file_write+0x24c>)
 800929c:	f00c f9b2 	bl	8015604 <iprintf>
            return err;
 80092a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a2:	e106      	b.n	80094b2 <lfs_file_write+0x3b6>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d007      	beq.n	80092c0 <lfs_file_write+0x1c4>
                file->off == lfs->cfg->block_size) {
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092b8:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 80092ba:	429a      	cmp	r2, r3
 80092bc:	f040 8084 	bne.w	80093c8 <lfs_file_write+0x2cc>
            if (!(file->flags & LFS_F_INLINE)) {
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d16f      	bne.n	80093ac <lfs_file_write+0x2b0>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d13f      	bne.n	8009358 <lfs_file_write+0x25c>
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d03b      	beq.n	8009358 <lfs_file_write+0x25c>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80092f2:	3a01      	subs	r2, #1
 80092f4:	68b9      	ldr	r1, [r7, #8]
 80092f6:	3138      	adds	r1, #56	; 0x38
 80092f8:	68b8      	ldr	r0, [r7, #8]
 80092fa:	303c      	adds	r0, #60	; 0x3c
 80092fc:	9003      	str	r0, [sp, #12]
 80092fe:	9102      	str	r1, [sp, #8]
 8009300:	9201      	str	r2, [sp, #4]
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	462b      	mov	r3, r5
 8009306:	4622      	mov	r2, r4
 8009308:	2100      	movs	r1, #0
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f7ff f9b2 	bl	8008674 <lfs_ctz_find>
 8009310:	6278      	str	r0, [r7, #36]	; 0x24
                    if (err) {
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	2b00      	cmp	r3, #0
 8009316:	d019      	beq.n	800934c <lfs_file_write+0x250>
                        file->flags |= LFS_F_ERRED;
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	631a      	str	r2, [r3, #48]	; 0x30
                        LFS_TRACE("lfs_file_write -> %"PRId32, err);
 8009324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009326:	f640 313d 	movw	r1, #2877	; 0xb3d
 800932a:	4807      	ldr	r0, [pc, #28]	; (8009348 <lfs_file_write+0x24c>)
 800932c:	f00c f96a 	bl	8015604 <iprintf>
                        return err;
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	e0be      	b.n	80094b2 <lfs_file_write+0x3b6>
 8009334:	080172d8 	.word	0x080172d8
 8009338:	080171d4 	.word	0x080171d4
 800933c:	08019f58 	.word	0x08019f58
 8009340:	08016c58 	.word	0x08016c58
 8009344:	08017308 	.word	0x08017308
 8009348:	0801732c 	.word	0x0801732c
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	3340      	adds	r3, #64	; 0x40
 8009350:	4619      	mov	r1, r3
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f7fc fa29 	bl	80057aa <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f7fd f8c7 	bl	80064ec <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8009364:	68fc      	ldr	r4, [r7, #12]
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	3238      	adds	r2, #56	; 0x38
 8009372:	68b9      	ldr	r1, [r7, #8]
 8009374:	313c      	adds	r1, #60	; 0x3c
 8009376:	9102      	str	r1, [sp, #8]
 8009378:	9201      	str	r2, [sp, #4]
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	462b      	mov	r3, r5
 800937e:	4622      	mov	r2, r4
 8009380:	4601      	mov	r1, r0
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7ff f9f8 	bl	8008778 <lfs_ctz_extend>
 8009388:	6238      	str	r0, [r7, #32]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 800938a:	6a3b      	ldr	r3, [r7, #32]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d015      	beq.n	80093bc <lfs_file_write+0x2c0>
                    file->flags |= LFS_F_ERRED;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009394:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	631a      	str	r2, [r3, #48]	; 0x30
                    LFS_TRACE("lfs_file_write -> %"PRId32, err);
 800939c:	6a3a      	ldr	r2, [r7, #32]
 800939e:	f640 314c 	movw	r1, #2892	; 0xb4c
 80093a2:	4846      	ldr	r0, [pc, #280]	; (80094bc <lfs_file_write+0x3c0>)
 80093a4:	f00c f92e 	bl	8015604 <iprintf>
                    return err;
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	e082      	b.n	80094b2 <lfs_file_write+0x3b6>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	f06f 0201 	mvn.w	r2, #1
 80093b2:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093cc:	69da      	ldr	r2, [r3, #28]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	4619      	mov	r1, r3
 80093d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093d8:	f7fc f922 	bl	8005620 <lfs_min>
 80093dc:	61f8      	str	r0, [r7, #28]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80093e4:	68fc      	ldr	r4, [r7, #12]
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80093ee:	69f9      	ldr	r1, [r7, #28]
 80093f0:	9103      	str	r1, [sp, #12]
 80093f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093f4:	9102      	str	r1, [sp, #8]
 80093f6:	9201      	str	r2, [sp, #4]
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	2301      	movs	r3, #1
 80093fc:	4622      	mov	r2, r4
 80093fe:	4601      	mov	r1, r0
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7fc fbed 	bl	8005be0 <lfs_bd_prog>
 8009406:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d028      	beq.n	8009460 <lfs_file_write+0x364>
                if (err == LFS_ERR_CORRUPT) {
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8009414:	d00d      	beq.n	8009432 <lfs_file_write+0x336>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	631a      	str	r2, [r3, #48]	; 0x30
                LFS_TRACE("lfs_file_write -> %"PRId32, err);
 8009422:	69ba      	ldr	r2, [r7, #24]
 8009424:	f640 3161 	movw	r1, #2913	; 0xb61
 8009428:	4824      	ldr	r0, [pc, #144]	; (80094bc <lfs_file_write+0x3c0>)
 800942a:	f00c f8eb 	bl	8015604 <iprintf>
                return err;
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	e03f      	b.n	80094b2 <lfs_file_write+0x3b6>
                    goto relocate;
 8009432:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8009434:	68b9      	ldr	r1, [r7, #8]
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f7ff fb40 	bl	8008abc <lfs_file_relocate>
 800943c:	61b8      	str	r0, [r7, #24]
            if (err) {
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d0cc      	beq.n	80093de <lfs_file_write+0x2e2>
                file->flags |= LFS_F_ERRED;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009448:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	631a      	str	r2, [r3, #48]	; 0x30
                LFS_TRACE("lfs_file_write -> %"PRId32, err);
 8009450:	69ba      	ldr	r2, [r7, #24]
 8009452:	f640 316a 	movw	r1, #2922	; 0xb6a
 8009456:	4819      	ldr	r0, [pc, #100]	; (80094bc <lfs_file_write+0x3c0>)
 8009458:	f00c f8d4 	bl	8015604 <iprintf>
                return err;
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	e028      	b.n	80094b2 <lfs_file_write+0x3b6>
            break;
 8009460:	bf00      	nop
            }
        }

        file->pos += diff;
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	441a      	add	r2, r3
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	441a      	add	r2, r3
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800947a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	4413      	add	r3, r2
 8009480:	63fb      	str	r3, [r7, #60]	; 0x3c
        nsize -= diff;
 8009482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	63bb      	str	r3, [r7, #56]	; 0x38

        lfs_alloc_ack(lfs);
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f7fd f82e 	bl	80064ec <lfs_alloc_ack>
    while (nsize > 0) {
 8009490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009492:	2b00      	cmp	r3, #0
 8009494:	f47f af06 	bne.w	80092a4 <lfs_file_write+0x1a8>
    }

    file->flags &= ~LFS_F_ERRED;
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	631a      	str	r2, [r3, #48]	; 0x30
    LFS_TRACE("lfs_file_write -> %"PRId32, size);
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	f640 3178 	movw	r1, #2936	; 0xb78
 80094aa:	4804      	ldr	r0, [pc, #16]	; (80094bc <lfs_file_write+0x3c0>)
 80094ac:	f00c f8aa 	bl	8015604 <iprintf>
    return size;
 80094b0:	683b      	ldr	r3, [r7, #0]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3740      	adds	r7, #64	; 0x40
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bdb0      	pop	{r4, r5, r7, pc}
 80094ba:	bf00      	nop
 80094bc:	0801732c 	.word	0x0801732c

080094c0 <lfs_init>:
    return err;
}


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b08c      	sub	sp, #48	; 0x30
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d106      	bne.n	80094ec <lfs_init+0x2c>
 80094de:	4b92      	ldr	r3, [pc, #584]	; (8009728 <lfs_init+0x268>)
 80094e0:	4a92      	ldr	r2, [pc, #584]	; (800972c <lfs_init+0x26c>)
 80094e2:	f44f 6153 	mov.w	r1, #3376	; 0xd30
 80094e6:	4892      	ldr	r0, [pc, #584]	; (8009730 <lfs_init+0x270>)
 80094e8:	f00b fa94 	bl	8014a14 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d106      	bne.n	8009504 <lfs_init+0x44>
 80094f6:	4b8f      	ldr	r3, [pc, #572]	; (8009734 <lfs_init+0x274>)
 80094f8:	4a8c      	ldr	r2, [pc, #560]	; (800972c <lfs_init+0x26c>)
 80094fa:	f640 5131 	movw	r1, #3377	; 0xd31
 80094fe:	488c      	ldr	r0, [pc, #560]	; (8009730 <lfs_init+0x270>)
 8009500:	f00b fa88 	bl	8014a14 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950a:	2b00      	cmp	r3, #0
 800950c:	d106      	bne.n	800951c <lfs_init+0x5c>
 800950e:	4b8a      	ldr	r3, [pc, #552]	; (8009738 <lfs_init+0x278>)
 8009510:	4a86      	ldr	r2, [pc, #536]	; (800972c <lfs_init+0x26c>)
 8009512:	f640 5132 	movw	r1, #3378	; 0xd32
 8009516:	4886      	ldr	r0, [pc, #536]	; (8009730 <lfs_init+0x270>)
 8009518:	f00b fa7c 	bl	8014a14 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009526:	6952      	ldr	r2, [r2, #20]
 8009528:	fbb3 f1f2 	udiv	r1, r3, r2
 800952c:	fb01 f202 	mul.w	r2, r1, r2
 8009530:	1a9b      	subs	r3, r3, r2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d006      	beq.n	8009544 <lfs_init+0x84>
 8009536:	4b81      	ldr	r3, [pc, #516]	; (800973c <lfs_init+0x27c>)
 8009538:	4a7c      	ldr	r2, [pc, #496]	; (800972c <lfs_init+0x26c>)
 800953a:	f640 5136 	movw	r1, #3382	; 0xd36
 800953e:	487c      	ldr	r0, [pc, #496]	; (8009730 <lfs_init+0x270>)
 8009540:	f00b fa68 	bl	8014a14 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800954e:	6992      	ldr	r2, [r2, #24]
 8009550:	fbb3 f1f2 	udiv	r1, r3, r2
 8009554:	fb01 f202 	mul.w	r2, r1, r2
 8009558:	1a9b      	subs	r3, r3, r2
 800955a:	2b00      	cmp	r3, #0
 800955c:	d006      	beq.n	800956c <lfs_init+0xac>
 800955e:	4b78      	ldr	r3, [pc, #480]	; (8009740 <lfs_init+0x280>)
 8009560:	4a72      	ldr	r2, [pc, #456]	; (800972c <lfs_init+0x26c>)
 8009562:	f640 5137 	movw	r1, #3383	; 0xd37
 8009566:	4872      	ldr	r0, [pc, #456]	; (8009730 <lfs_init+0x270>)
 8009568:	f00b fa54 	bl	8014a14 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009570:	69db      	ldr	r3, [r3, #28]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009576:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009578:	fbb3 f1f2 	udiv	r1, r3, r2
 800957c:	fb01 f202 	mul.w	r2, r1, r2
 8009580:	1a9b      	subs	r3, r3, r2
 8009582:	2b00      	cmp	r3, #0
 8009584:	d006      	beq.n	8009594 <lfs_init+0xd4>
 8009586:	4b6f      	ldr	r3, [pc, #444]	; (8009744 <lfs_init+0x284>)
 8009588:	4a68      	ldr	r2, [pc, #416]	; (800972c <lfs_init+0x26c>)
 800958a:	f640 5138 	movw	r1, #3384	; 0xd38
 800958e:	4868      	ldr	r0, [pc, #416]	; (8009730 <lfs_init+0x270>)
 8009590:	f00b fa40 	bl	8014a14 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(LFS_BLOCK_NULL / (lfs->cfg->block_size-2*4))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	3b08      	subs	r3, #8
 800959c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fc f872 	bl	800568e <lfs_npw2>
 80095aa:	4603      	mov	r3, r0
 80095ac:	009a      	lsls	r2, r3, #2
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d906      	bls.n	80095c6 <lfs_init+0x106>
 80095b8:	4b63      	ldr	r3, [pc, #396]	; (8009748 <lfs_init+0x288>)
 80095ba:	4a5c      	ldr	r2, [pc, #368]	; (800972c <lfs_init+0x26c>)
 80095bc:	f640 513b 	movw	r1, #3387	; 0xd3b
 80095c0:	485b      	ldr	r0, [pc, #364]	; (8009730 <lfs_init+0x270>)
 80095c2:	f00b fa27 	bl	8014a14 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d106      	bne.n	80095de <lfs_init+0x11e>
 80095d0:	4b5e      	ldr	r3, [pc, #376]	; (800974c <lfs_init+0x28c>)
 80095d2:	4a56      	ldr	r2, [pc, #344]	; (800972c <lfs_init+0x26c>)
 80095d4:	f640 5144 	movw	r1, #3396	; 0xd44
 80095d8:	4855      	ldr	r0, [pc, #340]	; (8009730 <lfs_init+0x270>)
 80095da:	f00b fa1b 	bl	8014a14 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d005      	beq.n	80095f4 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	60da      	str	r2, [r3, #12]
 80095f2:	e010      	b.n	8009616 <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fc f8af 	bl	800575e <lfs_malloc>
 8009600:	4602      	mov	r2, r0
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d103      	bne.n	8009616 <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 800960e:	f06f 030b 	mvn.w	r3, #11
 8009612:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8009614:	e0ee      	b.n	80097f4 <lfs_init+0x334>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800961a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800961c:	2b00      	cmp	r3, #0
 800961e:	d005      	beq.n	800962c <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	61da      	str	r2, [r3, #28]
 800962a:	e010      	b.n	800964e <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009632:	4618      	mov	r0, r3
 8009634:	f7fc f893 	bl	800575e <lfs_malloc>
 8009638:	4602      	mov	r2, r0
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d103      	bne.n	800964e <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 8009646:	f06f 030b 	mvn.w	r3, #11
 800964a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800964c:	e0d2      	b.n	80097f4 <lfs_init+0x334>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4619      	mov	r1, r3
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7fc f8a9 	bl	80057aa <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	3310      	adds	r3, #16
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7fc f8a3 	bl	80057aa <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966a:	2b00      	cmp	r3, #0
 800966c:	d106      	bne.n	800967c <lfs_init+0x1bc>
 800966e:	4b38      	ldr	r3, [pc, #224]	; (8009750 <lfs_init+0x290>)
 8009670:	4a2e      	ldr	r2, [pc, #184]	; (800972c <lfs_init+0x26c>)
 8009672:	f640 5162 	movw	r1, #3426	; 0xd62
 8009676:	482e      	ldr	r0, [pc, #184]	; (8009730 <lfs_init+0x270>)
 8009678:	f00b f9cc 	bl	8014a14 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009682:	f003 0307 	and.w	r3, r3, #7
 8009686:	2b00      	cmp	r3, #0
 8009688:	d106      	bne.n	8009698 <lfs_init+0x1d8>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800968e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009690:	f003 0303 	and.w	r3, r3, #3
 8009694:	2b00      	cmp	r3, #0
 8009696:	d006      	beq.n	80096a6 <lfs_init+0x1e6>
 8009698:	4b2e      	ldr	r3, [pc, #184]	; (8009754 <lfs_init+0x294>)
 800969a:	4a24      	ldr	r2, [pc, #144]	; (800972c <lfs_init+0x26c>)
 800969c:	f640 5163 	movw	r1, #3427	; 0xd63
 80096a0:	4823      	ldr	r0, [pc, #140]	; (8009730 <lfs_init+0x270>)
 80096a2:	f00b f9b7 	bl	8014a14 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d005      	beq.n	80096bc <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	665a      	str	r2, [r3, #100]	; 0x64
 80096ba:	e010      	b.n	80096de <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fc f84b 	bl	800575e <lfs_malloc>
 80096c8:	4602      	mov	r2, r0
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d103      	bne.n	80096de <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 80096d6:	f06f 030b 	mvn.w	r3, #11
 80096da:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80096dc:	e08a      	b.n	80097f4 <lfs_init+0x334>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e4:	2bff      	cmp	r3, #255	; 0xff
 80096e6:	d906      	bls.n	80096f6 <lfs_init+0x236>
 80096e8:	4b1b      	ldr	r3, [pc, #108]	; (8009758 <lfs_init+0x298>)
 80096ea:	4a10      	ldr	r2, [pc, #64]	; (800972c <lfs_init+0x26c>)
 80096ec:	f44f 6157 	mov.w	r1, #3440	; 0xd70
 80096f0:	480f      	ldr	r0, [pc, #60]	; (8009730 <lfs_init+0x270>)
 80096f2:	f00b f98f 	bl	8014a14 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009704:	2b00      	cmp	r3, #0
 8009706:	d102      	bne.n	800970e <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	22ff      	movs	r2, #255	; 0xff
 800970c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009714:	2b00      	cmp	r3, #0
 8009716:	da23      	bge.n	8009760 <lfs_init+0x2a0>
 8009718:	4b10      	ldr	r3, [pc, #64]	; (800975c <lfs_init+0x29c>)
 800971a:	4a04      	ldr	r2, [pc, #16]	; (800972c <lfs_init+0x26c>)
 800971c:	f640 5176 	movw	r1, #3446	; 0xd76
 8009720:	4803      	ldr	r0, [pc, #12]	; (8009730 <lfs_init+0x270>)
 8009722:	f00b f977 	bl	8014a14 <__assert_func>
 8009726:	bf00      	nop
 8009728:	080176c4 	.word	0x080176c4
 800972c:	08019f68 	.word	0x08019f68
 8009730:	08016c58 	.word	0x08016c58
 8009734:	080176e0 	.word	0x080176e0
 8009738:	080176fc 	.word	0x080176fc
 800973c:	08017718 	.word	0x08017718
 8009740:	08017748 	.word	0x08017748
 8009744:	08017778 	.word	0x08017778
 8009748:	080177ac 	.word	0x080177ac
 800974c:	08017800 	.word	0x08017800
 8009750:	0801781c 	.word	0x0801781c
 8009754:	0801783c 	.word	0x0801783c
 8009758:	08017890 	.word	0x08017890
 800975c:	080178ac 	.word	0x080178ac
    lfs->file_max = lfs->cfg->file_max;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800976e:	2b00      	cmp	r3, #0
 8009770:	d103      	bne.n	800977a <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009778:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800977e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009780:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8009784:	4293      	cmp	r3, r2
 8009786:	d906      	bls.n	8009796 <lfs_init+0x2d6>
 8009788:	4b1e      	ldr	r3, [pc, #120]	; (8009804 <lfs_init+0x344>)
 800978a:	4a1f      	ldr	r2, [pc, #124]	; (8009808 <lfs_init+0x348>)
 800978c:	f640 517c 	movw	r1, #3452	; 0xd7c
 8009790:	481e      	ldr	r0, [pc, #120]	; (800980c <lfs_init+0x34c>)
 8009792:	f00b f93f 	bl	8014a14 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800979a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d103      	bne.n	80097b0 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80097ae:	675a      	str	r2, [r3, #116]	; 0x74
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097b6:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097be:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gstate = (struct lfs_gstate){0};
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	3330      	adds	r3, #48	; 0x30
 80097d0:	2200      	movs	r2, #0
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	605a      	str	r2, [r3, #4]
 80097d6:	609a      	str	r2, [r3, #8]
    lfs->gpending = (struct lfs_gstate){0};
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	333c      	adds	r3, #60	; 0x3c
 80097dc:	2200      	movs	r2, #0
 80097de:	601a      	str	r2, [r3, #0]
 80097e0:	605a      	str	r2, [r3, #4]
 80097e2:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (struct lfs_gstate){0};
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	3348      	adds	r3, #72	; 0x48
 80097e8:	2200      	movs	r2, #0
 80097ea:	601a      	str	r2, [r3, #0]
 80097ec:	605a      	str	r2, [r3, #4]
 80097ee:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	e003      	b.n	80097fc <lfs_init+0x33c>

cleanup:
    lfs_deinit(lfs);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f80b 	bl	8009810 <lfs_deinit>
    return err;
 80097fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3730      	adds	r7, #48	; 0x30
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	080178d0 	.word	0x080178d0
 8009808:	08019f68 	.word	0x08019f68
 800980c:	08016c58 	.word	0x08016c58

08009810 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800981c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981e:	2b00      	cmp	r3, #0
 8009820:	d104      	bne.n	800982c <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	4618      	mov	r0, r3
 8009828:	f7fb ffa5 	bl	8005776 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009832:	2b00      	cmp	r3, #0
 8009834:	d104      	bne.n	8009840 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	4618      	mov	r0, r3
 800983c:	f7fb ff9b 	bl	8005776 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009846:	2b00      	cmp	r3, #0
 8009848:	d104      	bne.n	8009854 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800984e:	4618      	mov	r0, r3
 8009850:	f7fb ff91 	bl	8005776 <lfs_free>
    }

    return 0;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3708      	adds	r7, #8
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
	...

08009860 <cfg_prn>:

void cfg_prn(lfs_t *lfs, const struct lfs_config *cfg)
{
 8009860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009862:	b0a1      	sub	sp, #132	; 0x84
 8009864:	af12      	add	r7, sp, #72	; 0x48
 8009866:	6378      	str	r0, [r7, #52]	; 0x34
 8009868:	6339      	str	r1, [r7, #48]	; 0x30
	LFS_TRACE("lfs_format(%p, %p\n{\n\t.context=%p, "
 800986a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986c:	681d      	ldr	r5, [r3, #0]
 800986e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009870:	685e      	ldr	r6, [r3, #4]
 8009872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987a:	68da      	ldr	r2, [r3, #12]
 800987c:	62ba      	str	r2, [r7, #40]	; 0x28
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	6919      	ldr	r1, [r3, #16]
 8009882:	6279      	str	r1, [r7, #36]	; 0x24
 8009884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009886:	6958      	ldr	r0, [r3, #20]
 8009888:	6238      	str	r0, [r7, #32]
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	699c      	ldr	r4, [r3, #24]
 800988e:	61fc      	str	r4, [r7, #28]
 8009890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009892:	69db      	ldr	r3, [r3, #28]
 8009894:	61bb      	str	r3, [r7, #24]
 8009896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009898:	6a1a      	ldr	r2, [r3, #32]
 800989a:	617a      	str	r2, [r7, #20]
 800989c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80098a0:	6139      	str	r1, [r7, #16]
 80098a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098aa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80098ac:	60bc      	str	r4, [r7, #8]
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b2:	607b      	str	r3, [r7, #4]
 80098b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80098b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80098bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098be:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80098c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098c8:	9311      	str	r3, [sp, #68]	; 0x44
 80098ca:	9210      	str	r2, [sp, #64]	; 0x40
 80098cc:	910f      	str	r1, [sp, #60]	; 0x3c
 80098ce:	900e      	str	r0, [sp, #56]	; 0x38
 80098d0:	940d      	str	r4, [sp, #52]	; 0x34
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	930c      	str	r3, [sp, #48]	; 0x30
 80098d6:	68bc      	ldr	r4, [r7, #8]
 80098d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	900a      	str	r0, [sp, #40]	; 0x28
 80098de:	6939      	ldr	r1, [r7, #16]
 80098e0:	9109      	str	r1, [sp, #36]	; 0x24
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	9208      	str	r2, [sp, #32]
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	9307      	str	r3, [sp, #28]
 80098ea:	69fc      	ldr	r4, [r7, #28]
 80098ec:	9406      	str	r4, [sp, #24]
 80098ee:	6a38      	ldr	r0, [r7, #32]
 80098f0:	9005      	str	r0, [sp, #20]
 80098f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098f4:	9104      	str	r1, [sp, #16]
 80098f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098f8:	9203      	str	r2, [sp, #12]
 80098fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fc:	9302      	str	r3, [sp, #8]
 80098fe:	9601      	str	r6, [sp, #4]
 8009900:	9500      	str	r5, [sp, #0]
 8009902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009906:	f640 51a8 	movw	r1, #3496	; 0xda8
 800990a:	4803      	ldr	r0, [pc, #12]	; (8009918 <cfg_prn+0xb8>)
 800990c:	f00b fe7a 	bl	8015604 <iprintf>
	            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,
	            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
	            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
	            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
	            cfg->name_max, cfg->file_max, cfg->attr_max);
}
 8009910:	bf00      	nop
 8009912:	373c      	adds	r7, #60	; 0x3c
 8009914:	46bd      	mov	sp, r7
 8009916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009918:	080178ec 	.word	0x080178ec

0800991c <lfs_format>:

int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800991c:	b580      	push	{r7, lr}
 800991e:	b0a0      	sub	sp, #128	; 0x80
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
	cfg_prn(lfs, cfg);
 8009926:	6839      	ldr	r1, [r7, #0]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7ff ff99 	bl	8009860 <cfg_prn>
            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);*/
    int err = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8009932:	6839      	ldr	r1, [r7, #0]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7ff fdc3 	bl	80094c0 <lfs_init>
 800993a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800993c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800993e:	2b00      	cmp	r3, #0
 8009940:	d007      	beq.n	8009952 <lfs_format+0x36>
            LFS_TRACE("lfs_format -> %d", err);
 8009942:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009944:	f44f 615d 	mov.w	r1, #3536	; 0xdd0
 8009948:	4848      	ldr	r0, [pc, #288]	; (8009a6c <lfs_format+0x150>)
 800994a:	f00b fe5b 	bl	8015604 <iprintf>
            return err;
 800994e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009950:	e088      	b.n	8009a64 <lfs_format+0x148>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800995a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995c:	461a      	mov	r2, r3
 800995e:	2100      	movs	r1, #0
 8009960:	f00b fa7a 	bl	8014e58 <memset>
        lfs->free.off = 0;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800996e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009970:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8009976:	6a1b      	ldr	r3, [r3, #32]
 8009978:	4619      	mov	r1, r3
 800997a:	4610      	mov	r0, r2
 800997c:	f7fb fe50 	bl	8005620 <lfs_min>
 8009980:	4602      	mov	r2, r0
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7fc fdad 	bl	80064ec <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8009992:	f107 030c 	add.w	r3, r7, #12
 8009996:	4619      	mov	r1, r3
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f7fd ff07 	bl	80077ac <lfs_dir_alloc>
 800999e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80099a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d14f      	bne.n	8009a46 <lfs_format+0x12a>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 80099a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80099aa:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099b0:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 80099b2:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099b8:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 80099ba:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 80099c0:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 80099c6:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 80099cc:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 80099ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fc fc70 	bl	80062b8 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80099d8:	4b25      	ldr	r3, [pc, #148]	; (8009a70 <lfs_format+0x154>)
 80099da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099dc:	2300      	movs	r3, #0
 80099de:	653b      	str	r3, [r7, #80]	; 0x50
 80099e0:	4b24      	ldr	r3, [pc, #144]	; (8009a74 <lfs_format+0x158>)
 80099e2:	657b      	str	r3, [r7, #84]	; 0x54
 80099e4:	4b24      	ldr	r3, [pc, #144]	; (8009a78 <lfs_format+0x15c>)
 80099e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80099e8:	4b24      	ldr	r3, [pc, #144]	; (8009a7c <lfs_format+0x160>)
 80099ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80099f0:	663b      	str	r3, [r7, #96]	; 0x60
 80099f2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80099f6:	f107 010c 	add.w	r1, r7, #12
 80099fa:	2303      	movs	r3, #3
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7fe fad3 	bl	8007fa8 <lfs_dir_commit>
 8009a02:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)), &superblock}));
        if (err) {
 8009a04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d11f      	bne.n	8009a4a <lfs_format+0x12e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a0e:	2301      	movs	r3, #1
 8009a10:	633b      	str	r3, [r7, #48]	; 0x30
 8009a12:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009a16:	f107 030c 	add.w	r3, r7, #12
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7fd fc55 	bl	80072cc <lfs_dir_fetch>
 8009a22:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8009a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d111      	bne.n	8009a4e <lfs_format+0x132>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8009a30:	f107 010c 	add.w	r1, r7, #12
 8009a34:	2300      	movs	r3, #0
 8009a36:	2200      	movs	r2, #0
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7fe fab5 	bl	8007fa8 <lfs_dir_commit>
 8009a3e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8009a40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	e004      	b.n	8009a50 <lfs_format+0x134>
            goto cleanup;
 8009a46:	bf00      	nop
 8009a48:	e002      	b.n	8009a50 <lfs_format+0x134>
            goto cleanup;
 8009a4a:	bf00      	nop
 8009a4c:	e000      	b.n	8009a50 <lfs_format+0x134>
            goto cleanup;
 8009a4e:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f7ff fedd 	bl	8009810 <lfs_deinit>
    LFS_TRACE("lfs_format -> %d", err);
 8009a56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009a58:	f640 6107 	movw	r1, #3591	; 0xe07
 8009a5c:	4803      	ldr	r0, [pc, #12]	; (8009a6c <lfs_format+0x150>)
 8009a5e:	f00b fdd1 	bl	8015604 <iprintf>
    return err;
 8009a62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3780      	adds	r7, #128	; 0x80
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	08017a4c 	.word	0x08017a4c
 8009a70:	40100000 	.word	0x40100000
 8009a74:	0ff00008 	.word	0x0ff00008
 8009a78:	08017a6c 	.word	0x08017a6c
 8009a7c:	20100018 	.word	0x20100018

08009a80 <lfs_mount>:

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8009a80:	b5b0      	push	{r4, r5, r7, lr}
 8009a82:	b09a      	sub	sp, #104	; 0x68
 8009a84:	af04      	add	r7, sp, #16
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
	cfg_prn(lfs, cfg);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff fee7 	bl	8009860 <cfg_prn>
            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);*/
    int err = lfs_init(lfs, cfg);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f7ff fd13 	bl	80094c0 <lfs_init>
 8009a9a:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 8009a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d007      	beq.n	8009ab2 <lfs_mount+0x32>
        LFS_TRACE("lfs_mount -> %d", err);
 8009aa2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009aa4:	f640 611f 	movw	r1, #3615	; 0xe1f
 8009aa8:	489e      	ldr	r0, [pc, #632]	; (8009d24 <lfs_mount+0x2a4>)
 8009aaa:	f00b fdab 	bl	8015604 <iprintf>
        return err;
 8009aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ab0:	e134      	b.n	8009d1c <lfs_mount+0x29c>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8009ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ab6:	2220      	movs	r2, #32
 8009ab8:	2100      	movs	r1, #0
 8009aba:	4618      	mov	r0, r3
 8009abc:	f00b f9cc 	bl	8014e58 <memset>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	64bb      	str	r3, [r7, #72]	; 0x48
    while (!lfs_pair_isnull(dir.tail)) {
 8009ac4:	e0b9      	b.n	8009c3a <lfs_mount+0x1ba>
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	623b      	str	r3, [r7, #32]
 8009aca:	4b97      	ldr	r3, [pc, #604]	; (8009d28 <lfs_mount+0x2a8>)
 8009acc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ace:	2308      	movs	r3, #8
 8009ad0:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8009ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ad6:	f103 0218 	add.w	r2, r3, #24
 8009ada:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8009ade:	f107 0320 	add.w	r3, r7, #32
 8009ae2:	9303      	str	r3, [sp, #12]
 8009ae4:	4b91      	ldr	r3, [pc, #580]	; (8009d2c <lfs_mount+0x2ac>)
 8009ae6:	9302      	str	r3, [sp, #8]
 8009ae8:	2300      	movs	r3, #0
 8009aea:	9301      	str	r3, [sp, #4]
 8009aec:	4b90      	ldr	r3, [pc, #576]	; (8009d30 <lfs_mount+0x2b0>)
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	4b90      	ldr	r3, [pc, #576]	; (8009d34 <lfs_mount+0x2b4>)
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f7fd f8b4 	bl	8006c60 <lfs_dir_fetchmatch>
 8009af8:	6538      	str	r0, [r7, #80]	; 0x50
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8009afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	da02      	bge.n	8009b06 <lfs_mount+0x86>
            err = tag;
 8009b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b02:	657b      	str	r3, [r7, #84]	; 0x54
            goto cleanup;
 8009b04:	e100      	b.n	8009d08 <lfs_mount+0x288>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8009b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f000 8089 	beq.w	8009c20 <lfs_mount+0x1a0>
 8009b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fc f9d7 	bl	8005ec4 <lfs_tag_isdelete>
 8009b16:	4603      	mov	r3, r0
 8009b18:	f083 0301 	eor.w	r3, r3, #1
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d07e      	beq.n	8009c20 <lfs_mount+0x1a0>
            // update root
            lfs->root[0] = dir.pair[0];
 8009b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8009b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8009b2e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8009b32:	f107 0308 	add.w	r3, r7, #8
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	4b7f      	ldr	r3, [pc, #508]	; (8009d38 <lfs_mount+0x2b8>)
 8009b3a:	4a7e      	ldr	r2, [pc, #504]	; (8009d34 <lfs_mount+0x2b4>)
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7fc fdc3 	bl	80066c8 <lfs_dir_get>
 8009b42:	6538      	str	r0, [r7, #80]	; 0x50
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8009b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	da02      	bge.n	8009b50 <lfs_mount+0xd0>
                err = tag;
 8009b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b4c:	657b      	str	r3, [r7, #84]	; 0x54
                goto cleanup;
 8009b4e:	e0db      	b.n	8009d08 <lfs_mount+0x288>
            }
            lfs_superblock_fromle32(&superblock);
 8009b50:	f107 0308 	add.w	r3, r7, #8
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fc fb77 	bl	8006248 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	0c1b      	lsrs	r3, r3, #16
 8009b5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8009b68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d103      	bne.n	8009b78 <lfs_mount+0xf8>
 8009b70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00c      	beq.n	8009b92 <lfs_mount+0x112>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version %"PRIu16".%"PRIu16,
 8009b78:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009b7c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009b80:	f640 6148 	movw	r1, #3656	; 0xe48
 8009b84:	486d      	ldr	r0, [pc, #436]	; (8009d3c <lfs_mount+0x2bc>)
 8009b86:	f00b fd3d 	bl	8015604 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8009b8a:	f06f 0315 	mvn.w	r3, #21
 8009b8e:	657b      	str	r3, [r7, #84]	; 0x54
                goto cleanup;
 8009b90:	e045      	b.n	8009c1e <lfs_mount+0x19e>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d013      	beq.n	8009bc0 <lfs_mount+0x140>
                if (superblock.name_max > lfs->name_max) {
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d90b      	bls.n	8009bba <lfs_mount+0x13a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ba8:	f640 6151 	movw	r1, #3665	; 0xe51
 8009bac:	4864      	ldr	r0, [pc, #400]	; (8009d40 <lfs_mount+0x2c0>)
 8009bae:	f00b fd29 	bl	8015604 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8009bb2:	f06f 0315 	mvn.w	r3, #21
 8009bb6:	657b      	str	r3, [r7, #84]	; 0x54
                    goto cleanup;
 8009bb8:	e031      	b.n	8009c1e <lfs_mount+0x19e>
                }

                lfs->name_max = superblock.name_max;
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d013      	beq.n	8009bee <lfs_mount+0x16e>
                if (superblock.file_max > lfs->file_max) {
 8009bc6:	69ba      	ldr	r2, [r7, #24]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d90b      	bls.n	8009be8 <lfs_mount+0x168>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8009bd0:	69ba      	ldr	r2, [r7, #24]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd6:	f640 615c 	movw	r1, #3676	; 0xe5c
 8009bda:	485a      	ldr	r0, [pc, #360]	; (8009d44 <lfs_mount+0x2c4>)
 8009bdc:	f00b fd12 	bl	8015604 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8009be0:	f06f 0315 	mvn.w	r3, #21
 8009be4:	657b      	str	r3, [r7, #84]	; 0x54
                    goto cleanup;
 8009be6:	e01a      	b.n	8009c1e <lfs_mount+0x19e>
                }

                lfs->file_max = superblock.file_max;
 8009be8:	69ba      	ldr	r2, [r7, #24]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d015      	beq.n	8009c20 <lfs_mount+0x1a0>
                if (superblock.attr_max > lfs->attr_max) {
 8009bf4:	69fa      	ldr	r2, [r7, #28]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d90b      	bls.n	8009c16 <lfs_mount+0x196>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8009bfe:	69fa      	ldr	r2, [r7, #28]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c04:	f640 6167 	movw	r1, #3687	; 0xe67
 8009c08:	484f      	ldr	r0, [pc, #316]	; (8009d48 <lfs_mount+0x2c8>)
 8009c0a:	f00b fcfb 	bl	8015604 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8009c0e:	f06f 0315 	mvn.w	r3, #21
 8009c12:	657b      	str	r3, [r7, #84]	; 0x54
                    goto cleanup;
 8009c14:	e003      	b.n	8009c1e <lfs_mount+0x19e>
                }

                lfs->attr_max = superblock.attr_max;
 8009c16:	69fa      	ldr	r2, [r7, #28]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	675a      	str	r2, [r3, #116]	; 0x74
 8009c1c:	e000      	b.n	8009c20 <lfs_mount+0x1a0>
            goto cleanup;
 8009c1e:	e073      	b.n	8009d08 <lfs_mount+0x288>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gpending);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8009c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f7fd fb67 	bl	8007300 <lfs_dir_getgstate>
 8009c32:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8009c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d165      	bne.n	8009d06 <lfs_mount+0x286>
    while (!lfs_pair_isnull(dir.tail)) {
 8009c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c3e:	3318      	adds	r3, #24
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fc f8b8 	bl	8005db6 <lfs_pair_isnull>
 8009c46:	4603      	mov	r3, r0
 8009c48:	f083 0301 	eor.w	r3, r3, #1
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f47f af39 	bne.w	8009ac6 <lfs_mount+0x46>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	3320      	adds	r3, #32
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7fc f8ac 	bl	8005db6 <lfs_pair_isnull>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d003      	beq.n	8009c6c <lfs_mount+0x1ec>
        err = LFS_ERR_INVAL;
 8009c64:	f06f 0315 	mvn.w	r3, #21
 8009c68:	657b      	str	r3, [r7, #84]	; 0x54
        goto cleanup;
 8009c6a:	e04d      	b.n	8009d08 <lfs_mount+0x288>
    }

    // update littlefs with gstate
    lfs->gpending.tag += !lfs_tag_isvalid(lfs->gpending.tag);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fc f919 	bl	8005ea8 <lfs_tag_isvalid>
 8009c76:	4603      	mov	r3, r0
 8009c78:	f083 0301 	eor.w	r3, r3, #1
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	461a      	mov	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c84:	441a      	add	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs->gstate = lfs->gpending;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	3330      	adds	r3, #48	; 0x30
 8009c90:	323c      	adds	r2, #60	; 0x3c
 8009c92:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (lfs_gstate_hasmove(&lfs->gstate)) {
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	3330      	adds	r3, #48	; 0x30
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fc f9e4 	bl	800606a <lfs_gstate_hasmove>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d011      	beq.n	8009ccc <lfs_mount+0x24c>
        LFS_DEBUG("Found move %"PRIx32" %"PRIx32" %"PRIx16,
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fc f952 	bl	8005f5e <lfs_tag_id>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	462b      	mov	r3, r5
 8009cc0:	4622      	mov	r2, r4
 8009cc2:	f640 6182 	movw	r1, #3714	; 0xe82
 8009cc6:	4821      	ldr	r0, [pc, #132]	; (8009d4c <lfs_mount+0x2cc>)
 8009cc8:	f00b fc9c 	bl	8015604 <iprintf>
                lfs->gstate.pair[1],
                lfs_tag_id(lfs->gstate.tag));
    }

    // setup free lookahead
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009cd4:	69d2      	ldr	r2, [r2, #28]
 8009cd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cda:	fb01 f202 	mul.w	r2, r1, r2
 8009cde:	1a9a      	subs	r2, r3, r2
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->free.size = 0;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7fc fbfb 	bl	80064ec <lfs_alloc_ack>

    LFS_TRACE("lfs_mount -> %d", 0);
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f640 618e 	movw	r1, #3726	; 0xe8e
 8009cfc:	4809      	ldr	r0, [pc, #36]	; (8009d24 <lfs_mount+0x2a4>)
 8009cfe:	f00b fc81 	bl	8015604 <iprintf>
    return 0;
 8009d02:	2300      	movs	r3, #0
 8009d04:	e00a      	b.n	8009d1c <lfs_mount+0x29c>
            goto cleanup;
 8009d06:	bf00      	nop

cleanup:
    lfs_unmount(lfs);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f821 	bl	8009d50 <lfs_unmount>
    LFS_TRACE("lfs_mount -> %d", err);
 8009d0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d10:	f640 6193 	movw	r1, #3731	; 0xe93
 8009d14:	4803      	ldr	r0, [pc, #12]	; (8009d24 <lfs_mount+0x2a4>)
 8009d16:	f00b fc75 	bl	8015604 <iprintf>
    return err;
 8009d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3758      	adds	r7, #88	; 0x58
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bdb0      	pop	{r4, r5, r7, pc}
 8009d24:	08017a78 	.word	0x08017a78
 8009d28:	08017a6c 	.word	0x08017a6c
 8009d2c:	08007365 	.word	0x08007365
 8009d30:	0ff00008 	.word	0x0ff00008
 8009d34:	7ffffc00 	.word	0x7ffffc00
 8009d38:	20100018 	.word	0x20100018
 8009d3c:	08017a98 	.word	0x08017a98
 8009d40:	08017ac0 	.word	0x08017ac0
 8009d44:	08017af0 	.word	0x08017af0
 8009d48:	08017b20 	.word	0x08017b20
 8009d4c:	08017b50 	.word	0x08017b50

08009d50 <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	f640 6198 	movw	r1, #3736	; 0xe98
 8009d5e:	4809      	ldr	r0, [pc, #36]	; (8009d84 <lfs_unmount+0x34>)
 8009d60:	f00b fc50 	bl	8015604 <iprintf>
    int err = lfs_deinit(lfs);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7ff fd53 	bl	8009810 <lfs_deinit>
 8009d6a:	60f8      	str	r0, [r7, #12]
    LFS_TRACE("lfs_unmount -> %d", err);
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	f640 619a 	movw	r1, #3738	; 0xe9a
 8009d72:	4805      	ldr	r0, [pc, #20]	; (8009d88 <lfs_unmount+0x38>)
 8009d74:	f00b fc46 	bl	8015604 <iprintf>
    return err;
 8009d78:	68fb      	ldr	r3, [r7, #12]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	08017b78 	.word	0x08017b78
 8009d88:	08017b98 	.word	0x08017b98

08009d8c <lfs_fs_traverse>:


/// Filesystem filesystem operations ///
int lfs_fs_traverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data) {
 8009d8c:	b590      	push	{r4, r7, lr}
 8009d8e:	b09b      	sub	sp, #108	; 0x6c
 8009d90:	af04      	add	r7, sp, #16
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
    LFS_TRACE("lfs_fs_traverse(%p, %p, %p)",
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	f640 61a2 	movw	r1, #3746	; 0xea2
 8009da4:	488a      	ldr	r0, [pc, #552]	; (8009fd0 <lfs_fs_traverse+0x244>)
 8009da6:	f00b fc2d 	bl	8015604 <iprintf>
            (void*)lfs, (void*)(uintptr_t)cb, data);
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8009daa:	f107 0318 	add.w	r3, r7, #24
 8009dae:	2220      	movs	r2, #32
 8009db0:	2100      	movs	r1, #0
 8009db2:	4618      	mov	r0, r3
 8009db4:	f00b f850 	bl	8014e58 <memset>
 8009db8:	2301      	movs	r3, #1
 8009dba:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    while (!lfs_pair_isnull(dir.tail)) {
 8009dbc:	e08d      	b.n	8009eda <lfs_fs_traverse+0x14e>
        for (int i = 0; i < 2; i++) {
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	657b      	str	r3, [r7, #84]	; 0x54
 8009dc2:	e019      	b.n	8009df8 <lfs_fs_traverse+0x6c>
            int err = cb(data, dir.tail[i]);
 8009dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dc6:	3306      	adds	r3, #6
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	3358      	adds	r3, #88	; 0x58
 8009dcc:	443b      	add	r3, r7
 8009dce:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	4798      	blx	r3
 8009dda:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8009ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d007      	beq.n	8009df2 <lfs_fs_traverse+0x66>
                LFS_TRACE("lfs_fs_traverse -> %d", err);
 8009de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009de4:	f640 61b9 	movw	r1, #3769	; 0xeb9
 8009de8:	487a      	ldr	r0, [pc, #488]	; (8009fd4 <lfs_fs_traverse+0x248>)
 8009dea:	f00b fc0b 	bl	8015604 <iprintf>
                return err;
 8009dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df0:	e0ea      	b.n	8009fc8 <lfs_fs_traverse+0x23c>
        for (int i = 0; i < 2; i++) {
 8009df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009df4:	3301      	adds	r3, #1
 8009df6:	657b      	str	r3, [r7, #84]	; 0x54
 8009df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	dde2      	ble.n	8009dc4 <lfs_fs_traverse+0x38>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8009dfe:	f107 0318 	add.w	r3, r7, #24
 8009e02:	f103 0218 	add.w	r2, r3, #24
 8009e06:	f107 0318 	add.w	r3, r7, #24
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f7fd fa5d 	bl	80072cc <lfs_dir_fetch>
 8009e12:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 8009e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d007      	beq.n	8009e2a <lfs_fs_traverse+0x9e>
            LFS_TRACE("lfs_fs_traverse -> %d", err);
 8009e1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e1c:	f640 61c1 	movw	r1, #3777	; 0xec1
 8009e20:	486c      	ldr	r0, [pc, #432]	; (8009fd4 <lfs_fs_traverse+0x248>)
 8009e22:	f00b fbef 	bl	8015604 <iprintf>
            return err;
 8009e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e28:	e0ce      	b.n	8009fc8 <lfs_fs_traverse+0x23c>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8009e30:	e04e      	b.n	8009ed0 <lfs_fs_traverse+0x144>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8009e32:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009e36:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8009e38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e3c:	f043 0308 	orr.w	r3, r3, #8
 8009e40:	f107 0118 	add.w	r1, r7, #24
 8009e44:	f107 0210 	add.w	r2, r7, #16
 8009e48:	9200      	str	r2, [sp, #0]
 8009e4a:	4a63      	ldr	r2, [pc, #396]	; (8009fd8 <lfs_fs_traverse+0x24c>)
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f7fc fc3b 	bl	80066c8 <lfs_dir_get>
 8009e52:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 8009e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	da0b      	bge.n	8009e72 <lfs_fs_traverse+0xe6>
                if (tag == LFS_ERR_NOENT) {
 8009e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e5c:	f113 0f02 	cmn.w	r3, #2
 8009e60:	d030      	beq.n	8009ec4 <lfs_fs_traverse+0x138>
                    continue;
                }
                LFS_TRACE("lfs_fs_traverse -> %d", tag);
 8009e62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e64:	f640 61cd 	movw	r1, #3789	; 0xecd
 8009e68:	485a      	ldr	r0, [pc, #360]	; (8009fd4 <lfs_fs_traverse+0x248>)
 8009e6a:	f00b fbcb 	bl	8015604 <iprintf>
                return tag;
 8009e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e70:	e0aa      	b.n	8009fc8 <lfs_fs_traverse+0x23c>
            }
            lfs_ctz_fromle32(&ctz);
 8009e72:	f107 0310 	add.w	r3, r7, #16
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7fc f9ce 	bl	8006218 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8009e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fc f843 	bl	8005f0a <lfs_tag_type3>
 8009e84:	4603      	mov	r3, r0
 8009e86:	461a      	mov	r2, r3
 8009e88:	f240 2302 	movw	r3, #514	; 0x202
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d11a      	bne.n	8009ec6 <lfs_fs_traverse+0x13a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8009e90:	68f9      	ldr	r1, [r7, #12]
 8009e92:	6938      	ldr	r0, [r7, #16]
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	9202      	str	r2, [sp, #8]
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	9201      	str	r2, [sp, #4]
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	460a      	mov	r2, r1
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f7fe fd8c 	bl	80089c4 <lfs_ctz_traverse>
 8009eac:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8009eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d008      	beq.n	8009ec6 <lfs_fs_traverse+0x13a>
                    LFS_TRACE("lfs_fs_traverse -> %d", err);
 8009eb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009eb6:	f640 61d6 	movw	r1, #3798	; 0xed6
 8009eba:	4846      	ldr	r0, [pc, #280]	; (8009fd4 <lfs_fs_traverse+0x248>)
 8009ebc:	f00b fba2 	bl	8015604 <iprintf>
                    return err;
 8009ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ec2:	e081      	b.n	8009fc8 <lfs_fs_traverse+0x23c>
                    continue;
 8009ec4:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8009ec6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009eca:	3301      	adds	r3, #1
 8009ecc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8009ed0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009ed2:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d3ab      	bcc.n	8009e32 <lfs_fs_traverse+0xa6>
    while (!lfs_pair_isnull(dir.tail)) {
 8009eda:	f107 0318 	add.w	r3, r7, #24
 8009ede:	3318      	adds	r3, #24
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fb ff68 	bl	8005db6 <lfs_pair_isnull>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	f083 0301 	eor.w	r3, r3, #1
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f47f af65 	bne.w	8009dbe <lfs_fs_traverse+0x32>
            }
        }
    }

    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009efa:	e05b      	b.n	8009fb4 <lfs_fs_traverse+0x228>
        if (f->type != LFS_TYPE_REG) {
 8009efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009efe:	799b      	ldrb	r3, [r3, #6]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d153      	bne.n	8009fac <lfs_fs_traverse+0x220>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8009f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d023      	beq.n	8009f58 <lfs_fs_traverse+0x1cc>
 8009f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d11d      	bne.n	8009f58 <lfs_fs_traverse+0x1cc>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8009f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f1e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f26:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8009f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	9202      	str	r2, [sp, #8]
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	9201      	str	r2, [sp, #4]
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	4623      	mov	r3, r4
 8009f38:	4602      	mov	r2, r0
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f7fe fd42 	bl	80089c4 <lfs_ctz_traverse>
 8009f40:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8009f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d007      	beq.n	8009f58 <lfs_fs_traverse+0x1cc>
                LFS_TRACE("lfs_fs_traverse -> %d", err);
 8009f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f4a:	f640 61e7 	movw	r1, #3815	; 0xee7
 8009f4e:	4821      	ldr	r0, [pc, #132]	; (8009fd4 <lfs_fs_traverse+0x248>)
 8009f50:	f00b fb58 	bl	8015604 <iprintf>
                return err;
 8009f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f56:	e037      	b.n	8009fc8 <lfs_fs_traverse+0x23c>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8009f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d024      	beq.n	8009fae <lfs_fs_traverse+0x222>
 8009f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d11e      	bne.n	8009fae <lfs_fs_traverse+0x222>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8009f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f72:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f7a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8009f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	9202      	str	r2, [sp, #8]
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	9201      	str	r2, [sp, #4]
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	4623      	mov	r3, r4
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f7fe fd18 	bl	80089c4 <lfs_ctz_traverse>
 8009f94:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8009f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d008      	beq.n	8009fae <lfs_fs_traverse+0x222>
                LFS_TRACE("lfs_fs_traverse -> %d", err);
 8009f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f9e:	f44f 616f 	mov.w	r1, #3824	; 0xef0
 8009fa2:	480c      	ldr	r0, [pc, #48]	; (8009fd4 <lfs_fs_traverse+0x248>)
 8009fa4:	f00b fb2e 	bl	8015604 <iprintf>
                return err;
 8009fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009faa:	e00d      	b.n	8009fc8 <lfs_fs_traverse+0x23c>
            continue;
 8009fac:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1a0      	bne.n	8009efc <lfs_fs_traverse+0x170>
            }
        }
    }

    LFS_TRACE("lfs_fs_traverse -> %d", 0);
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f640 61f6 	movw	r1, #3830	; 0xef6
 8009fc0:	4804      	ldr	r0, [pc, #16]	; (8009fd4 <lfs_fs_traverse+0x248>)
 8009fc2:	f00b fb1f 	bl	8015604 <iprintf>
    return 0;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	375c      	adds	r7, #92	; 0x5c
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd90      	pop	{r4, r7, pc}
 8009fd0:	08017bbc 	.word	0x08017bbc
 8009fd4:	08017be8 	.word	0x08017be8
 8009fd8:	700ffc00 	.word	0x700ffc00

08009fdc <lfs_fs_pred>:

static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	61da      	str	r2, [r3, #28]
    while (!lfs_pair_isnull(pdir->tail)) {
 8009ff4:	e017      	b.n	800a026 <lfs_fs_pred+0x4a>
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	3318      	adds	r3, #24
 8009ffa:	68b9      	ldr	r1, [r7, #8]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fb fef5 	bl	8005dec <lfs_pair_cmp>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <lfs_fs_pred+0x30>
            return 0;
 800a008:	2300      	movs	r3, #0
 800a00a:	e019      	b.n	800a040 <lfs_fs_pred+0x64>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3318      	adds	r3, #24
 800a010:	461a      	mov	r2, r3
 800a012:	6879      	ldr	r1, [r7, #4]
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f7fd f959 	bl	80072cc <lfs_dir_fetch>
 800a01a:	6178      	str	r0, [r7, #20]
        if (err) {
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <lfs_fs_pred+0x4a>
            return err;
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	e00c      	b.n	800a040 <lfs_fs_pred+0x64>
    while (!lfs_pair_isnull(pdir->tail)) {
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	3318      	adds	r3, #24
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7fb fec3 	bl	8005db6 <lfs_pair_isnull>
 800a030:	4603      	mov	r3, r0
 800a032:	f083 0301 	eor.w	r3, r3, #1
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1dc      	bne.n	8009ff6 <lfs_fs_pred+0x1a>
        }
    }

    return LFS_ERR_NOENT;
 800a03c:	f06f 0301 	mvn.w	r3, #1
}
 800a040:	4618      	mov	r0, r3
 800a042:	3718      	adds	r7, #24
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <lfs_fs_parent_match>:
    lfs_t *lfs;
    const lfs_block_t pair[2];
};

static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800a048:	b5b0      	push	{r4, r5, r7, lr}
 800a04a:	b08e      	sub	sp, #56	; 0x38
 800a04c:	af04      	add	r7, sp, #16
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 800a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800a062:	6a3b      	ldr	r3, [r7, #32]
 800a064:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 800a068:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 800a06e:	69dd      	ldr	r5, [r3, #28]
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	69fa      	ldr	r2, [r7, #28]
 800a076:	6852      	ldr	r2, [r2, #4]
 800a078:	2108      	movs	r1, #8
 800a07a:	9103      	str	r1, [sp, #12]
 800a07c:	f107 0110 	add.w	r1, r7, #16
 800a080:	9102      	str	r1, [sp, #8]
 800a082:	9201      	str	r2, [sp, #4]
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	462b      	mov	r3, r5
 800a088:	4622      	mov	r2, r4
 800a08a:	4601      	mov	r1, r0
 800a08c:	6a38      	ldr	r0, [r7, #32]
 800a08e:	f7fb fba3 	bl	80057d8 <lfs_bd_read>
 800a092:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d001      	beq.n	800a09e <lfs_fs_parent_match+0x56>
        return err;
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	e012      	b.n	800a0c4 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800a09e:	f107 0310 	add.w	r3, r7, #16
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fb fecc 	bl	8005e40 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	1d1a      	adds	r2, r3, #4
 800a0ac:	f107 0310 	add.w	r3, r7, #16
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fb fe9a 	bl	8005dec <lfs_pair_cmp>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	bf14      	ite	ne
 800a0be:	2301      	movne	r3, #1
 800a0c0:	2300      	moveq	r3, #0
 800a0c2:	b2db      	uxtb	r3, r3
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3728      	adds	r7, #40	; 0x28
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bdb0      	pop	{r4, r5, r7, pc}

0800a0cc <lfs_fs_parent>:

static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b08c      	sub	sp, #48	; 0x30
 800a0d0:	af04      	add	r7, sp, #16
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	61da      	str	r2, [r3, #28]
    while (!lfs_pair_isnull(parent->tail)) {
 800a0e4:	e022      	b.n	800a12c <lfs_fs_parent+0x60>
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800a0f4:	617b      	str	r3, [r7, #20]
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800a0fc:	f107 0310 	add.w	r3, r7, #16
 800a100:	9303      	str	r3, [sp, #12]
 800a102:	4b13      	ldr	r3, [pc, #76]	; (800a150 <lfs_fs_parent+0x84>)
 800a104:	9302      	str	r3, [sp, #8]
 800a106:	2300      	movs	r3, #0
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	4b12      	ldr	r3, [pc, #72]	; (800a154 <lfs_fs_parent+0x88>)
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	4b12      	ldr	r3, [pc, #72]	; (800a158 <lfs_fs_parent+0x8c>)
 800a110:	6879      	ldr	r1, [r7, #4]
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f7fc fda4 	bl	8006c60 <lfs_dir_fetchmatch>
 800a118:	61f8      	str	r0, [r7, #28]
        if (tag && tag != LFS_ERR_NOENT) {
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d005      	beq.n	800a12c <lfs_fs_parent+0x60>
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	f113 0f02 	cmn.w	r3, #2
 800a126:	d001      	beq.n	800a12c <lfs_fs_parent+0x60>
            return tag;
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	e00c      	b.n	800a146 <lfs_fs_parent+0x7a>
    while (!lfs_pair_isnull(parent->tail)) {
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	3318      	adds	r3, #24
 800a130:	4618      	mov	r0, r3
 800a132:	f7fb fe40 	bl	8005db6 <lfs_pair_isnull>
 800a136:	4603      	mov	r3, r0
 800a138:	f083 0301 	eor.w	r3, r3, #1
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1d1      	bne.n	800a0e6 <lfs_fs_parent+0x1a>
        }
    }

    return LFS_ERR_NOENT;
 800a142:	f06f 0301 	mvn.w	r3, #1
}
 800a146:	4618      	mov	r0, r3
 800a148:	3720      	adds	r7, #32
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	0800a049 	.word	0x0800a049
 800a154:	20000008 	.word	0x20000008
 800a158:	7ff003ff 	.word	0x7ff003ff

0800a15c <lfs_fs_relocate>:

static int lfs_fs_relocate(lfs_t *lfs,
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b098      	sub	sp, #96	; 0x60
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
    // update internal root
    if (lfs_pair_cmp(oldpair, lfs->root) == 0) {
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	3320      	adds	r3, #32
 800a16c:	4619      	mov	r1, r3
 800a16e:	68b8      	ldr	r0, [r7, #8]
 800a170:	f7fb fe3c 	bl	8005dec <lfs_pair_cmp>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d111      	bne.n	800a19e <lfs_fs_relocate+0x42>
        LFS_DEBUG("Relocating root %"PRIx32" %"PRIx32,
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	3304      	adds	r3, #4
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f640 713d 	movw	r1, #3901	; 0xf3d
 800a188:	4849      	ldr	r0, [pc, #292]	; (800a2b0 <lfs_fs_relocate+0x154>)
 800a18a:	f00b fa3b 	bl	8015604 <iprintf>
                newpair[0], newpair[1]);
        lfs->root[0] = newpair[0];
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	621a      	str	r2, [r3, #32]
        lfs->root[1] = newpair[1];
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	685a      	ldr	r2, [r3, #4]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1a4:	e013      	b.n	800a1ce <lfs_fs_relocate+0x72>
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
 800a1a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	68b8      	ldr	r0, [r7, #8]
 800a1ae:	f7fb fe1d 	bl	8005dec <lfs_pair_cmp>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d107      	bne.n	800a1c8 <lfs_fs_relocate+0x6c>
            d->m.pair[0] = newpair[0];
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1be:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685a      	ldr	r2, [r3, #4]
 800a1c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1c6:	60da      	str	r2, [r3, #12]
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800a1c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1e8      	bne.n	800a1a6 <lfs_fs_relocate+0x4a>
        }
    }

    // find parent
    lfs_mdir_t parent;
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
 800a1d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a1d8:	461a      	mov	r2, r3
 800a1da:	68b9      	ldr	r1, [r7, #8]
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f7ff ff75 	bl	800a0cc <lfs_fs_parent>
 800a1e2:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 800a1e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	da05      	bge.n	800a1f6 <lfs_fs_relocate+0x9a>
 800a1ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1ec:	f113 0f02 	cmn.w	r3, #2
 800a1f0:	d001      	beq.n	800a1f6 <lfs_fs_relocate+0x9a>
        return tag;
 800a1f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1f4:	e058      	b.n	800a2a8 <lfs_fs_relocate+0x14c>
    }

    if (tag != LFS_ERR_NOENT) {
 800a1f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1f8:	f113 0f02 	cmn.w	r3, #2
 800a1fc:	d020      	beq.n	800a240 <lfs_fs_relocate+0xe4>
        // update disk, this creates a desync
        lfs_fs_preporphans(lfs, +1);
 800a1fe:	2101      	movs	r1, #1
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 f859 	bl	800a2b8 <lfs_fs_preporphans>

        lfs_pair_tole32(newpair);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f7fb fe34 	bl	8005e74 <lfs_pair_tole32>
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS({tag, newpair}));
 800a20c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a20e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a214:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a218:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a21c:	2301      	movs	r3, #1
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f7fd fec2 	bl	8007fa8 <lfs_dir_commit>
 800a224:	6578      	str	r0, [r7, #84]	; 0x54
        lfs_pair_fromle32(newpair);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7fb fe0a 	bl	8005e40 <lfs_pair_fromle32>
        if (err) {
 800a22c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d001      	beq.n	800a236 <lfs_fs_relocate+0xda>
            return err;
 800a232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a234:	e038      	b.n	800a2a8 <lfs_fs_relocate+0x14c>
        }

        // next step, clean up orphans
        lfs_fs_preporphans(lfs, -1);
 800a236:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f000 f83c 	bl	800a2b8 <lfs_fs_preporphans>
    }

    // find pred
    int err = lfs_fs_pred(lfs, oldpair, &parent);
 800a240:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a244:	461a      	mov	r2, r3
 800a246:	68b9      	ldr	r1, [r7, #8]
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7ff fec7 	bl	8009fdc <lfs_fs_pred>
 800a24e:	6538      	str	r0, [r7, #80]	; 0x50
    if (err && err != LFS_ERR_NOENT) {
 800a250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a252:	2b00      	cmp	r3, #0
 800a254:	d005      	beq.n	800a262 <lfs_fs_relocate+0x106>
 800a256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a258:	f113 0f02 	cmn.w	r3, #2
 800a25c:	d001      	beq.n	800a262 <lfs_fs_relocate+0x106>
        return err;
 800a25e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a260:	e022      	b.n	800a2a8 <lfs_fs_relocate+0x14c>
    }

    // if we can't find dir, it must be new
    if (err != LFS_ERR_NOENT) {
 800a262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a264:	f113 0f02 	cmn.w	r3, #2
 800a268:	d01d      	beq.n	800a2a6 <lfs_fs_relocate+0x14a>
        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7fb fe02 	bl	8005e74 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 800a270:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a274:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800a278:	051a      	lsls	r2, r3, #20
 800a27a:	4b0e      	ldr	r3, [pc, #56]	; (800a2b4 <lfs_fs_relocate+0x158>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	61bb      	str	r3, [r7, #24]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	61fb      	str	r3, [r7, #28]
 800a284:	f107 0218 	add.w	r2, r7, #24
 800a288:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a28c:	2301      	movs	r3, #1
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f7fd fe8a 	bl	8007fa8 <lfs_dir_commit>
 800a294:	6538      	str	r0, [r7, #80]	; 0x50
                {LFS_MKTAG(LFS_TYPE_TAIL + parent.split, 0x3ff, 8), newpair}));
        lfs_pair_fromle32(newpair);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7fb fdd2 	bl	8005e40 <lfs_pair_fromle32>
        if (err) {
 800a29c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <lfs_fs_relocate+0x14a>
            return err;
 800a2a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2a4:	e000      	b.n	800a2a8 <lfs_fs_relocate+0x14c>
        }
    }

    return 0;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3760      	adds	r7, #96	; 0x60
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	08017c10 	.word	0x08017c10
 800a2b4:	000ffc08 	.word	0x000ffc08

0800a2b8 <lfs_fs_preporphans>:

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800a2b8:	b5b0      	push	{r4, r5, r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	70fb      	strb	r3, [r7, #3]
    lfs->gpending.tag += orphans;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2cc:	441a      	add	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_gstate_xororphans(&lfs->gdelta,   &lfs->gpending,
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f103 0448 	add.w	r4, r3, #72	; 0x48
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f103 053c 	add.w	r5, r3, #60	; 0x3c
            lfs_gstate_hasorphans(&lfs->gpending));
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	333c      	adds	r3, #60	; 0x3c
    lfs_gstate_xororphans(&lfs->gdelta,   &lfs->gpending,
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fb feae 	bl	8006044 <lfs_gstate_hasorphans>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f7fb feee 	bl	80060d0 <lfs_gstate_xororphans>
    lfs_gstate_xororphans(&lfs->gpending, &lfs->gpending,
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f103 053c 	add.w	r5, r3, #60	; 0x3c
            lfs_gstate_hasorphans(&lfs->gpending));
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	333c      	adds	r3, #60	; 0x3c
    lfs_gstate_xororphans(&lfs->gpending, &lfs->gpending,
 800a304:	4618      	mov	r0, r3
 800a306:	f7fb fe9d 	bl	8006044 <lfs_gstate_hasorphans>
 800a30a:	4603      	mov	r3, r0
 800a30c:	461a      	mov	r2, r3
 800a30e:	4629      	mov	r1, r5
 800a310:	4620      	mov	r0, r4
 800a312:	f7fb fedd 	bl	80060d0 <lfs_gstate_xororphans>
}
 800a316:	bf00      	nop
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bdb0      	pop	{r4, r5, r7, pc}

0800a31e <lfs_fs_size_count>:
    }

    return 0;
}

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800a31e:	b480      	push	{r7}
 800a320:	b085      	sub	sp, #20
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	1c5a      	adds	r2, r3, #1
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	601a      	str	r2, [r3, #0]
    return 0;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3714      	adds	r7, #20
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <lfs_fs_size>:

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	f640 71fe 	movw	r1, #4094	; 0xffe
 800a352:	4811      	ldr	r0, [pc, #68]	; (800a398 <lfs_fs_size+0x54>)
 800a354:	f00b f956 	bl	8015604 <iprintf>
    lfs_size_t size = 0;
 800a358:	2300      	movs	r3, #0
 800a35a:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse(lfs, lfs_fs_size_count, &size);
 800a35c:	f107 0308 	add.w	r3, r7, #8
 800a360:	461a      	mov	r2, r3
 800a362:	490e      	ldr	r1, [pc, #56]	; (800a39c <lfs_fs_size+0x58>)
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff fd11 	bl	8009d8c <lfs_fs_traverse>
 800a36a:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d007      	beq.n	800a382 <lfs_fs_size+0x3e>
        LFS_TRACE("lfs_fs_size -> %"PRId32, err);
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	f241 0102 	movw	r1, #4098	; 0x1002
 800a378:	4809      	ldr	r0, [pc, #36]	; (800a3a0 <lfs_fs_size+0x5c>)
 800a37a:	f00b f943 	bl	8015604 <iprintf>
        return err;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	e006      	b.n	800a390 <lfs_fs_size+0x4c>
    }

    LFS_TRACE("lfs_fs_size -> %"PRId32, err);
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	f241 0106 	movw	r1, #4102	; 0x1006
 800a388:	4805      	ldr	r0, [pc, #20]	; (800a3a0 <lfs_fs_size+0x5c>)
 800a38a:	f00b f93b 	bl	8015604 <iprintf>
    return size;
 800a38e:	68bb      	ldr	r3, [r7, #8]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	08017cb4 	.word	0x08017cb4
 800a39c:	0800a31f 	.word	0x0800a31f
 800a3a0:	08017cd4 	.word	0x08017cd4

0800a3a4 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800a3a4:	b480      	push	{r7}
 800a3a6:	b087      	sub	sp, #28
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	617b      	str	r3, [r7, #20]
 800a3b8:	e024      	b.n	800a404 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	091a      	lsrs	r2, r3, #4
 800a3be:	6939      	ldr	r1, [r7, #16]
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	440b      	add	r3, r1
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	404b      	eors	r3, r1
 800a3cc:	f003 030f 	and.w	r3, r3, #15
 800a3d0:	4912      	ldr	r1, [pc, #72]	; (800a41c <lfs_crc+0x78>)
 800a3d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a3d6:	4053      	eors	r3, r2
 800a3d8:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	091a      	lsrs	r2, r3, #4
 800a3de:	6939      	ldr	r1, [r7, #16]
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	440b      	add	r3, r1
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	091b      	lsrs	r3, r3, #4
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	404b      	eors	r3, r1
 800a3f0:	f003 030f 	and.w	r3, r3, #15
 800a3f4:	4909      	ldr	r1, [pc, #36]	; (800a41c <lfs_crc+0x78>)
 800a3f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a3fa:	4053      	eors	r3, r2
 800a3fc:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	3301      	adds	r3, #1
 800a402:	617b      	str	r3, [r7, #20]
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d3d6      	bcc.n	800a3ba <lfs_crc+0x16>
    }

    return crc;
 800a40c:	68fb      	ldr	r3, [r7, #12]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	371c      	adds	r7, #28
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	08019f74 	.word	0x08019f74

0800a420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a420:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a458 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a424:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a426:	e003      	b.n	800a430 <LoopCopyDataInit>

0800a428 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a428:	4b0c      	ldr	r3, [pc, #48]	; (800a45c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a42a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a42c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a42e:	3104      	adds	r1, #4

0800a430 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a430:	480b      	ldr	r0, [pc, #44]	; (800a460 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a432:	4b0c      	ldr	r3, [pc, #48]	; (800a464 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a434:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a436:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a438:	d3f6      	bcc.n	800a428 <CopyDataInit>
  ldr  r2, =_sbss
 800a43a:	4a0b      	ldr	r2, [pc, #44]	; (800a468 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a43c:	e002      	b.n	800a444 <LoopFillZerobss>

0800a43e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a43e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a440:	f842 3b04 	str.w	r3, [r2], #4

0800a444 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a444:	4b09      	ldr	r3, [pc, #36]	; (800a46c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a446:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a448:	d3f9      	bcc.n	800a43e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a44a:	f7fa ff77 	bl	800533c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a44e:	f00a fcbd 	bl	8014dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a452:	f7f7 facb 	bl	80019ec <main>
  bx  lr    
 800a456:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a458:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a45c:	0801a1a0 	.word	0x0801a1a0
  ldr  r0, =_sdata
 800a460:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a464:	20000130 	.word	0x20000130
  ldr  r2, =_sbss
 800a468:	20000130 	.word	0x20000130
  ldr  r3, = _ebss
 800a46c:	20008d38 	.word	0x20008d38

0800a470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a470:	e7fe      	b.n	800a470 <ADC_IRQHandler>
	...

0800a474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a478:	4b0e      	ldr	r3, [pc, #56]	; (800a4b4 <HAL_Init+0x40>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a0d      	ldr	r2, [pc, #52]	; (800a4b4 <HAL_Init+0x40>)
 800a47e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a484:	4b0b      	ldr	r3, [pc, #44]	; (800a4b4 <HAL_Init+0x40>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a0a      	ldr	r2, [pc, #40]	; (800a4b4 <HAL_Init+0x40>)
 800a48a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a48e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a490:	4b08      	ldr	r3, [pc, #32]	; (800a4b4 <HAL_Init+0x40>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a07      	ldr	r2, [pc, #28]	; (800a4b4 <HAL_Init+0x40>)
 800a496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a49a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a49c:	2003      	movs	r0, #3
 800a49e:	f000 f8fc 	bl	800a69a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a4a2:	200f      	movs	r0, #15
 800a4a4:	f7fa fdb6 	bl	8005014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a4a8:	f7fa fad8 	bl	8004a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	40023c00 	.word	0x40023c00

0800a4b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a4bc:	4b06      	ldr	r3, [pc, #24]	; (800a4d8 <HAL_IncTick+0x20>)
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	4b06      	ldr	r3, [pc, #24]	; (800a4dc <HAL_IncTick+0x24>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	4a04      	ldr	r2, [pc, #16]	; (800a4dc <HAL_IncTick+0x24>)
 800a4ca:	6013      	str	r3, [r2, #0]
}
 800a4cc:	bf00      	nop
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	200000b4 	.word	0x200000b4
 800a4dc:	20003f14 	.word	0x20003f14

0800a4e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	af00      	add	r7, sp, #0
  return uwTick;
 800a4e4:	4b03      	ldr	r3, [pc, #12]	; (800a4f4 <HAL_GetTick+0x14>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	20003f14 	.word	0x20003f14

0800a4f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a500:	f7ff ffee 	bl	800a4e0 <HAL_GetTick>
 800a504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a510:	d005      	beq.n	800a51e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a512:	4b0a      	ldr	r3, [pc, #40]	; (800a53c <HAL_Delay+0x44>)
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	461a      	mov	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	4413      	add	r3, r2
 800a51c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a51e:	bf00      	nop
 800a520:	f7ff ffde 	bl	800a4e0 <HAL_GetTick>
 800a524:	4602      	mov	r2, r0
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d8f7      	bhi.n	800a520 <HAL_Delay+0x28>
  {
  }
}
 800a530:	bf00      	nop
 800a532:	bf00      	nop
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	200000b4 	.word	0x200000b4

0800a540 <__NVIC_SetPriorityGrouping>:
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f003 0307 	and.w	r3, r3, #7
 800a54e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a550:	4b0c      	ldr	r3, [pc, #48]	; (800a584 <__NVIC_SetPriorityGrouping+0x44>)
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a55c:	4013      	ands	r3, r2
 800a55e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a56c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a572:	4a04      	ldr	r2, [pc, #16]	; (800a584 <__NVIC_SetPriorityGrouping+0x44>)
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	60d3      	str	r3, [r2, #12]
}
 800a578:	bf00      	nop
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr
 800a584:	e000ed00 	.word	0xe000ed00

0800a588 <__NVIC_GetPriorityGrouping>:
{
 800a588:	b480      	push	{r7}
 800a58a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a58c:	4b04      	ldr	r3, [pc, #16]	; (800a5a0 <__NVIC_GetPriorityGrouping+0x18>)
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	0a1b      	lsrs	r3, r3, #8
 800a592:	f003 0307 	and.w	r3, r3, #7
}
 800a596:	4618      	mov	r0, r3
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	e000ed00 	.word	0xe000ed00

0800a5a4 <__NVIC_EnableIRQ>:
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	db0b      	blt.n	800a5ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a5b6:	79fb      	ldrb	r3, [r7, #7]
 800a5b8:	f003 021f 	and.w	r2, r3, #31
 800a5bc:	4907      	ldr	r1, [pc, #28]	; (800a5dc <__NVIC_EnableIRQ+0x38>)
 800a5be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5c2:	095b      	lsrs	r3, r3, #5
 800a5c4:	2001      	movs	r0, #1
 800a5c6:	fa00 f202 	lsl.w	r2, r0, r2
 800a5ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a5ce:	bf00      	nop
 800a5d0:	370c      	adds	r7, #12
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	e000e100 	.word	0xe000e100

0800a5e0 <__NVIC_SetPriority>:
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	6039      	str	r1, [r7, #0]
 800a5ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	db0a      	blt.n	800a60a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	490c      	ldr	r1, [pc, #48]	; (800a62c <__NVIC_SetPriority+0x4c>)
 800a5fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5fe:	0112      	lsls	r2, r2, #4
 800a600:	b2d2      	uxtb	r2, r2
 800a602:	440b      	add	r3, r1
 800a604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a608:	e00a      	b.n	800a620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	4908      	ldr	r1, [pc, #32]	; (800a630 <__NVIC_SetPriority+0x50>)
 800a610:	79fb      	ldrb	r3, [r7, #7]
 800a612:	f003 030f 	and.w	r3, r3, #15
 800a616:	3b04      	subs	r3, #4
 800a618:	0112      	lsls	r2, r2, #4
 800a61a:	b2d2      	uxtb	r2, r2
 800a61c:	440b      	add	r3, r1
 800a61e:	761a      	strb	r2, [r3, #24]
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	e000e100 	.word	0xe000e100
 800a630:	e000ed00 	.word	0xe000ed00

0800a634 <NVIC_EncodePriority>:
{
 800a634:	b480      	push	{r7}
 800a636:	b089      	sub	sp, #36	; 0x24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f003 0307 	and.w	r3, r3, #7
 800a646:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	f1c3 0307 	rsb	r3, r3, #7
 800a64e:	2b04      	cmp	r3, #4
 800a650:	bf28      	it	cs
 800a652:	2304      	movcs	r3, #4
 800a654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	3304      	adds	r3, #4
 800a65a:	2b06      	cmp	r3, #6
 800a65c:	d902      	bls.n	800a664 <NVIC_EncodePriority+0x30>
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	3b03      	subs	r3, #3
 800a662:	e000      	b.n	800a666 <NVIC_EncodePriority+0x32>
 800a664:	2300      	movs	r3, #0
 800a666:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	fa02 f303 	lsl.w	r3, r2, r3
 800a672:	43da      	mvns	r2, r3
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	401a      	ands	r2, r3
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a67c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	fa01 f303 	lsl.w	r3, r1, r3
 800a686:	43d9      	mvns	r1, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a68c:	4313      	orrs	r3, r2
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3724      	adds	r7, #36	; 0x24
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b082      	sub	sp, #8
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7ff ff4c 	bl	800a540 <__NVIC_SetPriorityGrouping>
}
 800a6a8:	bf00      	nop
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
 800a6bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a6c2:	f7ff ff61 	bl	800a588 <__NVIC_GetPriorityGrouping>
 800a6c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	68b9      	ldr	r1, [r7, #8]
 800a6cc:	6978      	ldr	r0, [r7, #20]
 800a6ce:	f7ff ffb1 	bl	800a634 <NVIC_EncodePriority>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6d8:	4611      	mov	r1, r2
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7ff ff80 	bl	800a5e0 <__NVIC_SetPriority>
}
 800a6e0:	bf00      	nop
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a6f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7ff ff54 	bl	800a5a4 <__NVIC_EnableIRQ>
}
 800a6fc:	bf00      	nop
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a70c:	2300      	movs	r3, #0
 800a70e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a710:	f7ff fee6 	bl	800a4e0 <HAL_GetTick>
 800a714:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e099      	b.n	800a854 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2202      	movs	r2, #2
 800a724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f022 0201 	bic.w	r2, r2, #1
 800a73e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a740:	e00f      	b.n	800a762 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a742:	f7ff fecd 	bl	800a4e0 <HAL_GetTick>
 800a746:	4602      	mov	r2, r0
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	2b05      	cmp	r3, #5
 800a74e:	d908      	bls.n	800a762 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2220      	movs	r2, #32
 800a754:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2203      	movs	r2, #3
 800a75a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a75e:	2303      	movs	r3, #3
 800a760:	e078      	b.n	800a854 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 0301 	and.w	r3, r3, #1
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1e8      	bne.n	800a742 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a778:	697a      	ldr	r2, [r7, #20]
 800a77a:	4b38      	ldr	r3, [pc, #224]	; (800a85c <HAL_DMA_Init+0x158>)
 800a77c:	4013      	ands	r3, r2
 800a77e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	685a      	ldr	r2, [r3, #4]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a78e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a79a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a7a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a1b      	ldr	r3, [r3, #32]
 800a7ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b8:	2b04      	cmp	r3, #4
 800a7ba:	d107      	bne.n	800a7cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	697a      	ldr	r2, [r7, #20]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	697a      	ldr	r2, [r7, #20]
 800a7d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	f023 0307 	bic.w	r3, r3, #7
 800a7e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f2:	2b04      	cmp	r3, #4
 800a7f4:	d117      	bne.n	800a826 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00e      	beq.n	800a826 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fb0f 	bl	800ae2c <DMA_CheckFifoParam>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d008      	beq.n	800a826 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2240      	movs	r2, #64	; 0x40
 800a818:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a822:	2301      	movs	r3, #1
 800a824:	e016      	b.n	800a854 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	697a      	ldr	r2, [r7, #20]
 800a82c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fac6 	bl	800adc0 <DMA_CalcBaseAndBitshift>
 800a834:	4603      	mov	r3, r0
 800a836:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a83c:	223f      	movs	r2, #63	; 0x3f
 800a83e:	409a      	lsls	r2, r3
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2201      	movs	r2, #1
 800a84e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3718      	adds	r7, #24
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	f010803f 	.word	0xf010803f

0800a860 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
 800a86c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a876:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d101      	bne.n	800a886 <HAL_DMA_Start_IT+0x26>
 800a882:	2302      	movs	r3, #2
 800a884:	e040      	b.n	800a908 <HAL_DMA_Start_IT+0xa8>
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b01      	cmp	r3, #1
 800a898:	d12f      	bne.n	800a8fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2202      	movs	r2, #2
 800a89e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	68b9      	ldr	r1, [r7, #8]
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f000 fa58 	bl	800ad64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8b8:	223f      	movs	r2, #63	; 0x3f
 800a8ba:	409a      	lsls	r2, r3
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f042 0216 	orr.w	r2, r2, #22
 800a8ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d007      	beq.n	800a8e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f042 0208 	orr.w	r2, r2, #8
 800a8e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f042 0201 	orr.w	r2, r2, #1
 800a8f6:	601a      	str	r2, [r3, #0]
 800a8f8:	e005      	b.n	800a906 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a902:	2302      	movs	r3, #2
 800a904:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a906:	7dfb      	ldrb	r3, [r7, #23]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3718      	adds	r7, #24
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a91c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a91e:	f7ff fddf 	bl	800a4e0 <HAL_GetTick>
 800a922:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d008      	beq.n	800a942 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2280      	movs	r2, #128	; 0x80
 800a934:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e052      	b.n	800a9e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f022 0216 	bic.w	r2, r2, #22
 800a950:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	695a      	ldr	r2, [r3, #20]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a960:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a966:	2b00      	cmp	r3, #0
 800a968:	d103      	bne.n	800a972 <HAL_DMA_Abort+0x62>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d007      	beq.n	800a982 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f022 0208 	bic.w	r2, r2, #8
 800a980:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f022 0201 	bic.w	r2, r2, #1
 800a990:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a992:	e013      	b.n	800a9bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a994:	f7ff fda4 	bl	800a4e0 <HAL_GetTick>
 800a998:	4602      	mov	r2, r0
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	1ad3      	subs	r3, r2, r3
 800a99e:	2b05      	cmp	r3, #5
 800a9a0:	d90c      	bls.n	800a9bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2220      	movs	r2, #32
 800a9a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2203      	movs	r2, #3
 800a9ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	e015      	b.n	800a9e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1e4      	bne.n	800a994 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9ce:	223f      	movs	r2, #63	; 0x3f
 800a9d0:	409a      	lsls	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d004      	beq.n	800aa0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2280      	movs	r2, #128	; 0x80
 800aa08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e00c      	b.n	800aa28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2205      	movs	r2, #5
 800aa12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f022 0201 	bic.w	r2, r2, #1
 800aa24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800aa40:	4b8e      	ldr	r3, [pc, #568]	; (800ac7c <HAL_DMA_IRQHandler+0x248>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a8e      	ldr	r2, [pc, #568]	; (800ac80 <HAL_DMA_IRQHandler+0x24c>)
 800aa46:	fba2 2303 	umull	r2, r3, r2, r3
 800aa4a:	0a9b      	lsrs	r3, r3, #10
 800aa4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa5e:	2208      	movs	r2, #8
 800aa60:	409a      	lsls	r2, r3
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	4013      	ands	r3, r2
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d01a      	beq.n	800aaa0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0304 	and.w	r3, r3, #4
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d013      	beq.n	800aaa0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f022 0204 	bic.w	r2, r2, #4
 800aa86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa8c:	2208      	movs	r2, #8
 800aa8e:	409a      	lsls	r2, r3
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa98:	f043 0201 	orr.w	r2, r3, #1
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	409a      	lsls	r2, r3
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	4013      	ands	r3, r2
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d012      	beq.n	800aad6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00b      	beq.n	800aad6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aac2:	2201      	movs	r2, #1
 800aac4:	409a      	lsls	r2, r3
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aace:	f043 0202 	orr.w	r2, r3, #2
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aada:	2204      	movs	r2, #4
 800aadc:	409a      	lsls	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	4013      	ands	r3, r2
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d012      	beq.n	800ab0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 0302 	and.w	r3, r3, #2
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00b      	beq.n	800ab0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaf8:	2204      	movs	r2, #4
 800aafa:	409a      	lsls	r2, r3
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab04:	f043 0204 	orr.w	r2, r3, #4
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab10:	2210      	movs	r2, #16
 800ab12:	409a      	lsls	r2, r3
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4013      	ands	r3, r2
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d043      	beq.n	800aba4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f003 0308 	and.w	r3, r3, #8
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d03c      	beq.n	800aba4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab2e:	2210      	movs	r2, #16
 800ab30:	409a      	lsls	r2, r3
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d018      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d108      	bne.n	800ab64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d024      	beq.n	800aba4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	4798      	blx	r3
 800ab62:	e01f      	b.n	800aba4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d01b      	beq.n	800aba4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	4798      	blx	r3
 800ab74:	e016      	b.n	800aba4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d107      	bne.n	800ab94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f022 0208 	bic.w	r2, r2, #8
 800ab92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d003      	beq.n	800aba4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aba8:	2220      	movs	r2, #32
 800abaa:	409a      	lsls	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	4013      	ands	r3, r2
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f000 808f 	beq.w	800acd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 0310 	and.w	r3, r3, #16
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f000 8087 	beq.w	800acd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abca:	2220      	movs	r2, #32
 800abcc:	409a      	lsls	r2, r3
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b05      	cmp	r3, #5
 800abdc:	d136      	bne.n	800ac4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f022 0216 	bic.w	r2, r2, #22
 800abec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	695a      	ldr	r2, [r3, #20]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800abfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d103      	bne.n	800ac0e <HAL_DMA_IRQHandler+0x1da>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d007      	beq.n	800ac1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f022 0208 	bic.w	r2, r2, #8
 800ac1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac22:	223f      	movs	r2, #63	; 0x3f
 800ac24:	409a      	lsls	r2, r3
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d07e      	beq.n	800ad40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	4798      	blx	r3
        }
        return;
 800ac4a:	e079      	b.n	800ad40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d01d      	beq.n	800ac96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10d      	bne.n	800ac84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d031      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	4798      	blx	r3
 800ac78:	e02c      	b.n	800acd4 <HAL_DMA_IRQHandler+0x2a0>
 800ac7a:	bf00      	nop
 800ac7c:	200000ac 	.word	0x200000ac
 800ac80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d023      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	4798      	blx	r3
 800ac94:	e01e      	b.n	800acd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10f      	bne.n	800acc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f022 0210 	bic.w	r2, r2, #16
 800acb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d003      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d032      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ace0:	f003 0301 	and.w	r3, r3, #1
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d022      	beq.n	800ad2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2205      	movs	r2, #5
 800acec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f022 0201 	bic.w	r2, r2, #1
 800acfe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	3301      	adds	r3, #1
 800ad04:	60bb      	str	r3, [r7, #8]
 800ad06:	697a      	ldr	r2, [r7, #20]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d307      	bcc.n	800ad1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 0301 	and.w	r3, r3, #1
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1f2      	bne.n	800ad00 <HAL_DMA_IRQHandler+0x2cc>
 800ad1a:	e000      	b.n	800ad1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800ad1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2201      	movs	r2, #1
 800ad22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d005      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	4798      	blx	r3
 800ad3e:	e000      	b.n	800ad42 <HAL_DMA_IRQHandler+0x30e>
        return;
 800ad40:	bf00      	nop
    }
  }
}
 800ad42:	3718      	adds	r7, #24
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad56:	b2db      	uxtb	r3, r3
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	370c      	adds	r7, #12
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
 800ad70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ad80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	683a      	ldr	r2, [r7, #0]
 800ad88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	2b40      	cmp	r3, #64	; 0x40
 800ad90:	d108      	bne.n	800ada4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ada2:	e007      	b.n	800adb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	60da      	str	r2, [r3, #12]
}
 800adb4:	bf00      	nop
 800adb6:	3714      	adds	r7, #20
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	3b10      	subs	r3, #16
 800add0:	4a14      	ldr	r2, [pc, #80]	; (800ae24 <DMA_CalcBaseAndBitshift+0x64>)
 800add2:	fba2 2303 	umull	r2, r3, r2, r3
 800add6:	091b      	lsrs	r3, r3, #4
 800add8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800adda:	4a13      	ldr	r2, [pc, #76]	; (800ae28 <DMA_CalcBaseAndBitshift+0x68>)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4413      	add	r3, r2
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2b03      	cmp	r3, #3
 800adec:	d909      	bls.n	800ae02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800adf6:	f023 0303 	bic.w	r3, r3, #3
 800adfa:	1d1a      	adds	r2, r3, #4
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	659a      	str	r2, [r3, #88]	; 0x58
 800ae00:	e007      	b.n	800ae12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ae0a:	f023 0303 	bic.w	r3, r3, #3
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3714      	adds	r7, #20
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	aaaaaaab 	.word	0xaaaaaaab
 800ae28:	08019fb4 	.word	0x08019fb4

0800ae2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	699b      	ldr	r3, [r3, #24]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d11f      	bne.n	800ae86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	2b03      	cmp	r3, #3
 800ae4a:	d856      	bhi.n	800aefa <DMA_CheckFifoParam+0xce>
 800ae4c:	a201      	add	r2, pc, #4	; (adr r2, 800ae54 <DMA_CheckFifoParam+0x28>)
 800ae4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae52:	bf00      	nop
 800ae54:	0800ae65 	.word	0x0800ae65
 800ae58:	0800ae77 	.word	0x0800ae77
 800ae5c:	0800ae65 	.word	0x0800ae65
 800ae60:	0800aefb 	.word	0x0800aefb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d046      	beq.n	800aefe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ae70:	2301      	movs	r3, #1
 800ae72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae74:	e043      	b.n	800aefe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ae7e:	d140      	bne.n	800af02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae84:	e03d      	b.n	800af02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae8e:	d121      	bne.n	800aed4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d837      	bhi.n	800af06 <DMA_CheckFifoParam+0xda>
 800ae96:	a201      	add	r2, pc, #4	; (adr r2, 800ae9c <DMA_CheckFifoParam+0x70>)
 800ae98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9c:	0800aead 	.word	0x0800aead
 800aea0:	0800aeb3 	.word	0x0800aeb3
 800aea4:	0800aead 	.word	0x0800aead
 800aea8:	0800aec5 	.word	0x0800aec5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	73fb      	strb	r3, [r7, #15]
      break;
 800aeb0:	e030      	b.n	800af14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d025      	beq.n	800af0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
 800aec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aec2:	e022      	b.n	800af0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aecc:	d11f      	bne.n	800af0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aed2:	e01c      	b.n	800af0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d903      	bls.n	800aee2 <DMA_CheckFifoParam+0xb6>
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	2b03      	cmp	r3, #3
 800aede:	d003      	beq.n	800aee8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aee0:	e018      	b.n	800af14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	73fb      	strb	r3, [r7, #15]
      break;
 800aee6:	e015      	b.n	800af14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00e      	beq.n	800af12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	73fb      	strb	r3, [r7, #15]
      break;
 800aef8:	e00b      	b.n	800af12 <DMA_CheckFifoParam+0xe6>
      break;
 800aefa:	bf00      	nop
 800aefc:	e00a      	b.n	800af14 <DMA_CheckFifoParam+0xe8>
      break;
 800aefe:	bf00      	nop
 800af00:	e008      	b.n	800af14 <DMA_CheckFifoParam+0xe8>
      break;
 800af02:	bf00      	nop
 800af04:	e006      	b.n	800af14 <DMA_CheckFifoParam+0xe8>
      break;
 800af06:	bf00      	nop
 800af08:	e004      	b.n	800af14 <DMA_CheckFifoParam+0xe8>
      break;
 800af0a:	bf00      	nop
 800af0c:	e002      	b.n	800af14 <DMA_CheckFifoParam+0xe8>
      break;   
 800af0e:	bf00      	nop
 800af10:	e000      	b.n	800af14 <DMA_CheckFifoParam+0xe8>
      break;
 800af12:	bf00      	nop
    }
  } 
  
  return status; 
 800af14:	7bfb      	ldrb	r3, [r7, #15]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3714      	adds	r7, #20
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop

0800af24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af24:	b480      	push	{r7}
 800af26:	b089      	sub	sp, #36	; 0x24
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800af2e:	2300      	movs	r3, #0
 800af30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800af32:	2300      	movs	r3, #0
 800af34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800af36:	2300      	movs	r3, #0
 800af38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800af3a:	2300      	movs	r3, #0
 800af3c:	61fb      	str	r3, [r7, #28]
 800af3e:	e16b      	b.n	800b218 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800af40:	2201      	movs	r2, #1
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	fa02 f303 	lsl.w	r3, r2, r3
 800af48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	4013      	ands	r3, r2
 800af52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800af54:	693a      	ldr	r2, [r7, #16]
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	429a      	cmp	r2, r3
 800af5a:	f040 815a 	bne.w	800b212 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	f003 0303 	and.w	r3, r3, #3
 800af66:	2b01      	cmp	r3, #1
 800af68:	d005      	beq.n	800af76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800af72:	2b02      	cmp	r3, #2
 800af74:	d130      	bne.n	800afd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	005b      	lsls	r3, r3, #1
 800af80:	2203      	movs	r2, #3
 800af82:	fa02 f303 	lsl.w	r3, r2, r3
 800af86:	43db      	mvns	r3, r3
 800af88:	69ba      	ldr	r2, [r7, #24]
 800af8a:	4013      	ands	r3, r2
 800af8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	68da      	ldr	r2, [r3, #12]
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	005b      	lsls	r3, r3, #1
 800af96:	fa02 f303 	lsl.w	r3, r2, r3
 800af9a:	69ba      	ldr	r2, [r7, #24]
 800af9c:	4313      	orrs	r3, r2
 800af9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	69ba      	ldr	r2, [r7, #24]
 800afa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800afac:	2201      	movs	r2, #1
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	fa02 f303 	lsl.w	r3, r2, r3
 800afb4:	43db      	mvns	r3, r3
 800afb6:	69ba      	ldr	r2, [r7, #24]
 800afb8:	4013      	ands	r3, r2
 800afba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	091b      	lsrs	r3, r3, #4
 800afc2:	f003 0201 	and.w	r2, r3, #1
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	fa02 f303 	lsl.w	r3, r2, r3
 800afcc:	69ba      	ldr	r2, [r7, #24]
 800afce:	4313      	orrs	r3, r2
 800afd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	69ba      	ldr	r2, [r7, #24]
 800afd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	f003 0303 	and.w	r3, r3, #3
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	d017      	beq.n	800b014 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	005b      	lsls	r3, r3, #1
 800afee:	2203      	movs	r2, #3
 800aff0:	fa02 f303 	lsl.w	r3, r2, r3
 800aff4:	43db      	mvns	r3, r3
 800aff6:	69ba      	ldr	r2, [r7, #24]
 800aff8:	4013      	ands	r3, r2
 800affa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	689a      	ldr	r2, [r3, #8]
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	fa02 f303 	lsl.w	r3, r2, r3
 800b008:	69ba      	ldr	r2, [r7, #24]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	69ba      	ldr	r2, [r7, #24]
 800b012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	f003 0303 	and.w	r3, r3, #3
 800b01c:	2b02      	cmp	r3, #2
 800b01e:	d123      	bne.n	800b068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	08da      	lsrs	r2, r3, #3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	3208      	adds	r2, #8
 800b028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b02c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	f003 0307 	and.w	r3, r3, #7
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	220f      	movs	r2, #15
 800b038:	fa02 f303 	lsl.w	r3, r2, r3
 800b03c:	43db      	mvns	r3, r3
 800b03e:	69ba      	ldr	r2, [r7, #24]
 800b040:	4013      	ands	r3, r2
 800b042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	691a      	ldr	r2, [r3, #16]
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	f003 0307 	and.w	r3, r3, #7
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	fa02 f303 	lsl.w	r3, r2, r3
 800b054:	69ba      	ldr	r2, [r7, #24]
 800b056:	4313      	orrs	r3, r2
 800b058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	08da      	lsrs	r2, r3, #3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	3208      	adds	r2, #8
 800b062:	69b9      	ldr	r1, [r7, #24]
 800b064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	005b      	lsls	r3, r3, #1
 800b072:	2203      	movs	r2, #3
 800b074:	fa02 f303 	lsl.w	r3, r2, r3
 800b078:	43db      	mvns	r3, r3
 800b07a:	69ba      	ldr	r2, [r7, #24]
 800b07c:	4013      	ands	r3, r2
 800b07e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	f003 0203 	and.w	r2, r3, #3
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	005b      	lsls	r3, r3, #1
 800b08c:	fa02 f303 	lsl.w	r3, r2, r3
 800b090:	69ba      	ldr	r2, [r7, #24]
 800b092:	4313      	orrs	r3, r2
 800b094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	69ba      	ldr	r2, [r7, #24]
 800b09a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 80b4 	beq.w	800b212 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60fb      	str	r3, [r7, #12]
 800b0ae:	4b60      	ldr	r3, [pc, #384]	; (800b230 <HAL_GPIO_Init+0x30c>)
 800b0b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0b2:	4a5f      	ldr	r2, [pc, #380]	; (800b230 <HAL_GPIO_Init+0x30c>)
 800b0b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b0b8:	6453      	str	r3, [r2, #68]	; 0x44
 800b0ba:	4b5d      	ldr	r3, [pc, #372]	; (800b230 <HAL_GPIO_Init+0x30c>)
 800b0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0c2:	60fb      	str	r3, [r7, #12]
 800b0c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b0c6:	4a5b      	ldr	r2, [pc, #364]	; (800b234 <HAL_GPIO_Init+0x310>)
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	089b      	lsrs	r3, r3, #2
 800b0cc:	3302      	adds	r3, #2
 800b0ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	f003 0303 	and.w	r3, r3, #3
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	220f      	movs	r2, #15
 800b0de:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e2:	43db      	mvns	r3, r3
 800b0e4:	69ba      	ldr	r2, [r7, #24]
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a52      	ldr	r2, [pc, #328]	; (800b238 <HAL_GPIO_Init+0x314>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d02b      	beq.n	800b14a <HAL_GPIO_Init+0x226>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a51      	ldr	r2, [pc, #324]	; (800b23c <HAL_GPIO_Init+0x318>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d025      	beq.n	800b146 <HAL_GPIO_Init+0x222>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a50      	ldr	r2, [pc, #320]	; (800b240 <HAL_GPIO_Init+0x31c>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d01f      	beq.n	800b142 <HAL_GPIO_Init+0x21e>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a4f      	ldr	r2, [pc, #316]	; (800b244 <HAL_GPIO_Init+0x320>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d019      	beq.n	800b13e <HAL_GPIO_Init+0x21a>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a4e      	ldr	r2, [pc, #312]	; (800b248 <HAL_GPIO_Init+0x324>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d013      	beq.n	800b13a <HAL_GPIO_Init+0x216>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4a4d      	ldr	r2, [pc, #308]	; (800b24c <HAL_GPIO_Init+0x328>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d00d      	beq.n	800b136 <HAL_GPIO_Init+0x212>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a4c      	ldr	r2, [pc, #304]	; (800b250 <HAL_GPIO_Init+0x32c>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d007      	beq.n	800b132 <HAL_GPIO_Init+0x20e>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4a4b      	ldr	r2, [pc, #300]	; (800b254 <HAL_GPIO_Init+0x330>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d101      	bne.n	800b12e <HAL_GPIO_Init+0x20a>
 800b12a:	2307      	movs	r3, #7
 800b12c:	e00e      	b.n	800b14c <HAL_GPIO_Init+0x228>
 800b12e:	2308      	movs	r3, #8
 800b130:	e00c      	b.n	800b14c <HAL_GPIO_Init+0x228>
 800b132:	2306      	movs	r3, #6
 800b134:	e00a      	b.n	800b14c <HAL_GPIO_Init+0x228>
 800b136:	2305      	movs	r3, #5
 800b138:	e008      	b.n	800b14c <HAL_GPIO_Init+0x228>
 800b13a:	2304      	movs	r3, #4
 800b13c:	e006      	b.n	800b14c <HAL_GPIO_Init+0x228>
 800b13e:	2303      	movs	r3, #3
 800b140:	e004      	b.n	800b14c <HAL_GPIO_Init+0x228>
 800b142:	2302      	movs	r3, #2
 800b144:	e002      	b.n	800b14c <HAL_GPIO_Init+0x228>
 800b146:	2301      	movs	r3, #1
 800b148:	e000      	b.n	800b14c <HAL_GPIO_Init+0x228>
 800b14a:	2300      	movs	r3, #0
 800b14c:	69fa      	ldr	r2, [r7, #28]
 800b14e:	f002 0203 	and.w	r2, r2, #3
 800b152:	0092      	lsls	r2, r2, #2
 800b154:	4093      	lsls	r3, r2
 800b156:	69ba      	ldr	r2, [r7, #24]
 800b158:	4313      	orrs	r3, r2
 800b15a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b15c:	4935      	ldr	r1, [pc, #212]	; (800b234 <HAL_GPIO_Init+0x310>)
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	089b      	lsrs	r3, r3, #2
 800b162:	3302      	adds	r3, #2
 800b164:	69ba      	ldr	r2, [r7, #24]
 800b166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b16a:	4b3b      	ldr	r3, [pc, #236]	; (800b258 <HAL_GPIO_Init+0x334>)
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	43db      	mvns	r3, r3
 800b174:	69ba      	ldr	r2, [r7, #24]
 800b176:	4013      	ands	r3, r2
 800b178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b182:	2b00      	cmp	r3, #0
 800b184:	d003      	beq.n	800b18e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b186:	69ba      	ldr	r2, [r7, #24]
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b18e:	4a32      	ldr	r2, [pc, #200]	; (800b258 <HAL_GPIO_Init+0x334>)
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b194:	4b30      	ldr	r3, [pc, #192]	; (800b258 <HAL_GPIO_Init+0x334>)
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	43db      	mvns	r3, r3
 800b19e:	69ba      	ldr	r2, [r7, #24]
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d003      	beq.n	800b1b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b1b0:	69ba      	ldr	r2, [r7, #24]
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b1b8:	4a27      	ldr	r2, [pc, #156]	; (800b258 <HAL_GPIO_Init+0x334>)
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b1be:	4b26      	ldr	r3, [pc, #152]	; (800b258 <HAL_GPIO_Init+0x334>)
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	43db      	mvns	r3, r3
 800b1c8:	69ba      	ldr	r2, [r7, #24]
 800b1ca:	4013      	ands	r3, r2
 800b1cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d003      	beq.n	800b1e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b1da:	69ba      	ldr	r2, [r7, #24]
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b1e2:	4a1d      	ldr	r2, [pc, #116]	; (800b258 <HAL_GPIO_Init+0x334>)
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b1e8:	4b1b      	ldr	r3, [pc, #108]	; (800b258 <HAL_GPIO_Init+0x334>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	43db      	mvns	r3, r3
 800b1f2:	69ba      	ldr	r2, [r7, #24]
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b200:	2b00      	cmp	r3, #0
 800b202:	d003      	beq.n	800b20c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b204:	69ba      	ldr	r2, [r7, #24]
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	4313      	orrs	r3, r2
 800b20a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b20c:	4a12      	ldr	r2, [pc, #72]	; (800b258 <HAL_GPIO_Init+0x334>)
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	3301      	adds	r3, #1
 800b216:	61fb      	str	r3, [r7, #28]
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	2b0f      	cmp	r3, #15
 800b21c:	f67f ae90 	bls.w	800af40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b220:	bf00      	nop
 800b222:	bf00      	nop
 800b224:	3724      	adds	r7, #36	; 0x24
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	40023800 	.word	0x40023800
 800b234:	40013800 	.word	0x40013800
 800b238:	40020000 	.word	0x40020000
 800b23c:	40020400 	.word	0x40020400
 800b240:	40020800 	.word	0x40020800
 800b244:	40020c00 	.word	0x40020c00
 800b248:	40021000 	.word	0x40021000
 800b24c:	40021400 	.word	0x40021400
 800b250:	40021800 	.word	0x40021800
 800b254:	40021c00 	.word	0x40021c00
 800b258:	40013c00 	.word	0x40013c00

0800b25c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	460b      	mov	r3, r1
 800b266:	807b      	strh	r3, [r7, #2]
 800b268:	4613      	mov	r3, r2
 800b26a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b26c:	787b      	ldrb	r3, [r7, #1]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b272:	887a      	ldrh	r2, [r7, #2]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b278:	e003      	b.n	800b282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b27a:	887b      	ldrh	r3, [r7, #2]
 800b27c:	041a      	lsls	r2, r3, #16
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	619a      	str	r2, [r3, #24]
}
 800b282:	bf00      	nop
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b28e:	b480      	push	{r7}
 800b290:	b085      	sub	sp, #20
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
 800b296:	460b      	mov	r3, r1
 800b298:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	695b      	ldr	r3, [r3, #20]
 800b29e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b2a0:	887a      	ldrh	r2, [r7, #2]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	4013      	ands	r3, r2
 800b2a6:	041a      	lsls	r2, r3, #16
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	43d9      	mvns	r1, r3
 800b2ac:	887b      	ldrh	r3, [r7, #2]
 800b2ae:	400b      	ands	r3, r1
 800b2b0:	431a      	orrs	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	619a      	str	r2, [r3, #24]
}
 800b2b6:	bf00      	nop
 800b2b8:	3714      	adds	r7, #20
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
	...

0800b2c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e12b      	b.n	800b52e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d106      	bne.n	800b2f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f7f9 fbf2 	bl	8004ad4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2224      	movs	r2, #36	; 0x24
 800b2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f022 0201 	bic.w	r2, r2, #1
 800b306:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b316:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b326:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b328:	f003 fb12 	bl	800e950 <HAL_RCC_GetPCLK1Freq>
 800b32c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	4a81      	ldr	r2, [pc, #516]	; (800b538 <HAL_I2C_Init+0x274>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d807      	bhi.n	800b348 <HAL_I2C_Init+0x84>
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	4a80      	ldr	r2, [pc, #512]	; (800b53c <HAL_I2C_Init+0x278>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	bf94      	ite	ls
 800b340:	2301      	movls	r3, #1
 800b342:	2300      	movhi	r3, #0
 800b344:	b2db      	uxtb	r3, r3
 800b346:	e006      	b.n	800b356 <HAL_I2C_Init+0x92>
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	4a7d      	ldr	r2, [pc, #500]	; (800b540 <HAL_I2C_Init+0x27c>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	bf94      	ite	ls
 800b350:	2301      	movls	r3, #1
 800b352:	2300      	movhi	r3, #0
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b00      	cmp	r3, #0
 800b358:	d001      	beq.n	800b35e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	e0e7      	b.n	800b52e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	4a78      	ldr	r2, [pc, #480]	; (800b544 <HAL_I2C_Init+0x280>)
 800b362:	fba2 2303 	umull	r2, r3, r2, r3
 800b366:	0c9b      	lsrs	r3, r3, #18
 800b368:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	430a      	orrs	r2, r1
 800b37c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	6a1b      	ldr	r3, [r3, #32]
 800b384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	4a6a      	ldr	r2, [pc, #424]	; (800b538 <HAL_I2C_Init+0x274>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d802      	bhi.n	800b398 <HAL_I2C_Init+0xd4>
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	3301      	adds	r3, #1
 800b396:	e009      	b.n	800b3ac <HAL_I2C_Init+0xe8>
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b39e:	fb02 f303 	mul.w	r3, r2, r3
 800b3a2:	4a69      	ldr	r2, [pc, #420]	; (800b548 <HAL_I2C_Init+0x284>)
 800b3a4:	fba2 2303 	umull	r2, r3, r2, r3
 800b3a8:	099b      	lsrs	r3, r3, #6
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	6812      	ldr	r2, [r2, #0]
 800b3b0:	430b      	orrs	r3, r1
 800b3b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	69db      	ldr	r3, [r3, #28]
 800b3ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b3be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	495c      	ldr	r1, [pc, #368]	; (800b538 <HAL_I2C_Init+0x274>)
 800b3c8:	428b      	cmp	r3, r1
 800b3ca:	d819      	bhi.n	800b400 <HAL_I2C_Init+0x13c>
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	1e59      	subs	r1, r3, #1
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	005b      	lsls	r3, r3, #1
 800b3d6:	fbb1 f3f3 	udiv	r3, r1, r3
 800b3da:	1c59      	adds	r1, r3, #1
 800b3dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b3e0:	400b      	ands	r3, r1
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00a      	beq.n	800b3fc <HAL_I2C_Init+0x138>
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	1e59      	subs	r1, r3, #1
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	005b      	lsls	r3, r3, #1
 800b3f0:	fbb1 f3f3 	udiv	r3, r1, r3
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3fa:	e051      	b.n	800b4a0 <HAL_I2C_Init+0x1dc>
 800b3fc:	2304      	movs	r3, #4
 800b3fe:	e04f      	b.n	800b4a0 <HAL_I2C_Init+0x1dc>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d111      	bne.n	800b42c <HAL_I2C_Init+0x168>
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	1e58      	subs	r0, r3, #1
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6859      	ldr	r1, [r3, #4]
 800b410:	460b      	mov	r3, r1
 800b412:	005b      	lsls	r3, r3, #1
 800b414:	440b      	add	r3, r1
 800b416:	fbb0 f3f3 	udiv	r3, r0, r3
 800b41a:	3301      	adds	r3, #1
 800b41c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b420:	2b00      	cmp	r3, #0
 800b422:	bf0c      	ite	eq
 800b424:	2301      	moveq	r3, #1
 800b426:	2300      	movne	r3, #0
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	e012      	b.n	800b452 <HAL_I2C_Init+0x18e>
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	1e58      	subs	r0, r3, #1
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6859      	ldr	r1, [r3, #4]
 800b434:	460b      	mov	r3, r1
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	440b      	add	r3, r1
 800b43a:	0099      	lsls	r1, r3, #2
 800b43c:	440b      	add	r3, r1
 800b43e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b442:	3301      	adds	r3, #1
 800b444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b448:	2b00      	cmp	r3, #0
 800b44a:	bf0c      	ite	eq
 800b44c:	2301      	moveq	r3, #1
 800b44e:	2300      	movne	r3, #0
 800b450:	b2db      	uxtb	r3, r3
 800b452:	2b00      	cmp	r3, #0
 800b454:	d001      	beq.n	800b45a <HAL_I2C_Init+0x196>
 800b456:	2301      	movs	r3, #1
 800b458:	e022      	b.n	800b4a0 <HAL_I2C_Init+0x1dc>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10e      	bne.n	800b480 <HAL_I2C_Init+0x1bc>
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	1e58      	subs	r0, r3, #1
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6859      	ldr	r1, [r3, #4]
 800b46a:	460b      	mov	r3, r1
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	440b      	add	r3, r1
 800b470:	fbb0 f3f3 	udiv	r3, r0, r3
 800b474:	3301      	adds	r3, #1
 800b476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b47a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b47e:	e00f      	b.n	800b4a0 <HAL_I2C_Init+0x1dc>
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	1e58      	subs	r0, r3, #1
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6859      	ldr	r1, [r3, #4]
 800b488:	460b      	mov	r3, r1
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	440b      	add	r3, r1
 800b48e:	0099      	lsls	r1, r3, #2
 800b490:	440b      	add	r3, r1
 800b492:	fbb0 f3f3 	udiv	r3, r0, r3
 800b496:	3301      	adds	r3, #1
 800b498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b49c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b4a0:	6879      	ldr	r1, [r7, #4]
 800b4a2:	6809      	ldr	r1, [r1, #0]
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	69da      	ldr	r2, [r3, #28]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	431a      	orrs	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	430a      	orrs	r2, r1
 800b4c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b4ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	6911      	ldr	r1, [r2, #16]
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	68d2      	ldr	r2, [r2, #12]
 800b4da:	4311      	orrs	r1, r2
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	6812      	ldr	r2, [r2, #0]
 800b4e0:	430b      	orrs	r3, r1
 800b4e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	695a      	ldr	r2, [r3, #20]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	699b      	ldr	r3, [r3, #24]
 800b4f6:	431a      	orrs	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	430a      	orrs	r2, r1
 800b4fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f042 0201 	orr.w	r2, r2, #1
 800b50e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2220      	movs	r2, #32
 800b51a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	000186a0 	.word	0x000186a0
 800b53c:	001e847f 	.word	0x001e847f
 800b540:	003d08ff 	.word	0x003d08ff
 800b544:	431bde83 	.word	0x431bde83
 800b548:	10624dd3 	.word	0x10624dd3

0800b54c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b088      	sub	sp, #32
 800b550:	af02      	add	r7, sp, #8
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	607a      	str	r2, [r7, #4]
 800b556:	461a      	mov	r2, r3
 800b558:	460b      	mov	r3, r1
 800b55a:	817b      	strh	r3, [r7, #10]
 800b55c:	4613      	mov	r3, r2
 800b55e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b560:	f7fe ffbe 	bl	800a4e0 <HAL_GetTick>
 800b564:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	2b20      	cmp	r3, #32
 800b570:	f040 80e0 	bne.w	800b734 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	2319      	movs	r3, #25
 800b57a:	2201      	movs	r2, #1
 800b57c:	4970      	ldr	r1, [pc, #448]	; (800b740 <HAL_I2C_Master_Transmit+0x1f4>)
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f002 f9f6 	bl	800d970 <I2C_WaitOnFlagUntilTimeout>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b58a:	2302      	movs	r3, #2
 800b58c:	e0d3      	b.n	800b736 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b594:	2b01      	cmp	r3, #1
 800b596:	d101      	bne.n	800b59c <HAL_I2C_Master_Transmit+0x50>
 800b598:	2302      	movs	r3, #2
 800b59a:	e0cc      	b.n	800b736 <HAL_I2C_Master_Transmit+0x1ea>
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 0301 	and.w	r3, r3, #1
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d007      	beq.n	800b5c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f042 0201 	orr.w	r2, r2, #1
 800b5c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b5d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2221      	movs	r2, #33	; 0x21
 800b5d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2210      	movs	r2, #16
 800b5de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	893a      	ldrh	r2, [r7, #8]
 800b5f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	4a50      	ldr	r2, [pc, #320]	; (800b744 <HAL_I2C_Master_Transmit+0x1f8>)
 800b602:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b604:	8979      	ldrh	r1, [r7, #10]
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	6a3a      	ldr	r2, [r7, #32]
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f001 ffb8 	bl	800d580 <I2C_MasterRequestWrite>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	e08d      	b.n	800b736 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b61a:	2300      	movs	r3, #0
 800b61c:	613b      	str	r3, [r7, #16]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	695b      	ldr	r3, [r3, #20]
 800b624:	613b      	str	r3, [r7, #16]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	699b      	ldr	r3, [r3, #24]
 800b62c:	613b      	str	r3, [r7, #16]
 800b62e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b630:	e066      	b.n	800b700 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b632:	697a      	ldr	r2, [r7, #20]
 800b634:	6a39      	ldr	r1, [r7, #32]
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f002 fa70 	bl	800db1c <I2C_WaitOnTXEFlagUntilTimeout>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00d      	beq.n	800b65e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b646:	2b04      	cmp	r3, #4
 800b648:	d107      	bne.n	800b65a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b658:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	e06b      	b.n	800b736 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b662:	781a      	ldrb	r2, [r3, #0]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66e:	1c5a      	adds	r2, r3, #1
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b678:	b29b      	uxth	r3, r3
 800b67a:	3b01      	subs	r3, #1
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b686:	3b01      	subs	r3, #1
 800b688:	b29a      	uxth	r2, r3
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	695b      	ldr	r3, [r3, #20]
 800b694:	f003 0304 	and.w	r3, r3, #4
 800b698:	2b04      	cmp	r3, #4
 800b69a:	d11b      	bne.n	800b6d4 <HAL_I2C_Master_Transmit+0x188>
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d017      	beq.n	800b6d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a8:	781a      	ldrb	r2, [r3, #0]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b4:	1c5a      	adds	r2, r3, #1
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	b29a      	uxth	r2, r3
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	6a39      	ldr	r1, [r7, #32]
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f002 fa60 	bl	800db9e <I2C_WaitOnBTFFlagUntilTimeout>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00d      	beq.n	800b700 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e8:	2b04      	cmp	r3, #4
 800b6ea:	d107      	bne.n	800b6fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e01a      	b.n	800b736 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b704:	2b00      	cmp	r3, #0
 800b706:	d194      	bne.n	800b632 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2220      	movs	r2, #32
 800b71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	e000      	b.n	800b736 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b734:	2302      	movs	r3, #2
  }
}
 800b736:	4618      	mov	r0, r3
 800b738:	3718      	adds	r7, #24
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	00100002 	.word	0x00100002
 800b744:	ffff0000 	.word	0xffff0000

0800b748 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b08c      	sub	sp, #48	; 0x30
 800b74c:	af02      	add	r7, sp, #8
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	607a      	str	r2, [r7, #4]
 800b752:	461a      	mov	r2, r3
 800b754:	460b      	mov	r3, r1
 800b756:	817b      	strh	r3, [r7, #10]
 800b758:	4613      	mov	r3, r2
 800b75a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b75c:	f7fe fec0 	bl	800a4e0 <HAL_GetTick>
 800b760:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	2b20      	cmp	r3, #32
 800b76c:	f040 820b 	bne.w	800bb86 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	2319      	movs	r3, #25
 800b776:	2201      	movs	r2, #1
 800b778:	497c      	ldr	r1, [pc, #496]	; (800b96c <HAL_I2C_Master_Receive+0x224>)
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f002 f8f8 	bl	800d970 <I2C_WaitOnFlagUntilTimeout>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b786:	2302      	movs	r3, #2
 800b788:	e1fe      	b.n	800bb88 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b790:	2b01      	cmp	r3, #1
 800b792:	d101      	bne.n	800b798 <HAL_I2C_Master_Receive+0x50>
 800b794:	2302      	movs	r3, #2
 800b796:	e1f7      	b.n	800bb88 <HAL_I2C_Master_Receive+0x440>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2201      	movs	r2, #1
 800b79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f003 0301 	and.w	r3, r3, #1
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d007      	beq.n	800b7be <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f042 0201 	orr.w	r2, r2, #1
 800b7bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b7cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2222      	movs	r2, #34	; 0x22
 800b7d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2210      	movs	r2, #16
 800b7da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	893a      	ldrh	r2, [r7, #8]
 800b7ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	4a5c      	ldr	r2, [pc, #368]	; (800b970 <HAL_I2C_Master_Receive+0x228>)
 800b7fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b800:	8979      	ldrh	r1, [r7, #10]
 800b802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f001 ff3c 	bl	800d684 <I2C_MasterRequestRead>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d001      	beq.n	800b816 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	e1b8      	b.n	800bb88 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d113      	bne.n	800b846 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b81e:	2300      	movs	r3, #0
 800b820:	623b      	str	r3, [r7, #32]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	695b      	ldr	r3, [r3, #20]
 800b828:	623b      	str	r3, [r7, #32]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	699b      	ldr	r3, [r3, #24]
 800b830:	623b      	str	r3, [r7, #32]
 800b832:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b842:	601a      	str	r2, [r3, #0]
 800b844:	e18c      	b.n	800bb60 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d11b      	bne.n	800b886 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b85c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b85e:	2300      	movs	r3, #0
 800b860:	61fb      	str	r3, [r7, #28]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	695b      	ldr	r3, [r3, #20]
 800b868:	61fb      	str	r3, [r7, #28]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	61fb      	str	r3, [r7, #28]
 800b872:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b882:	601a      	str	r2, [r3, #0]
 800b884:	e16c      	b.n	800bb60 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b88a:	2b02      	cmp	r3, #2
 800b88c:	d11b      	bne.n	800b8c6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b89c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	61bb      	str	r3, [r7, #24]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	695b      	ldr	r3, [r3, #20]
 800b8b8:	61bb      	str	r3, [r7, #24]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	699b      	ldr	r3, [r3, #24]
 800b8c0:	61bb      	str	r3, [r7, #24]
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	e14c      	b.n	800bb60 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b8d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	617b      	str	r3, [r7, #20]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	695b      	ldr	r3, [r3, #20]
 800b8e0:	617b      	str	r3, [r7, #20]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	699b      	ldr	r3, [r3, #24]
 800b8e8:	617b      	str	r3, [r7, #20]
 800b8ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b8ec:	e138      	b.n	800bb60 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8f2:	2b03      	cmp	r3, #3
 800b8f4:	f200 80f1 	bhi.w	800bada <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d123      	bne.n	800b948 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b902:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	f002 f9bd 	bl	800dc84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d001      	beq.n	800b914 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	e139      	b.n	800bb88 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	691a      	ldr	r2, [r3, #16]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91e:	b2d2      	uxtb	r2, r2
 800b920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b926:	1c5a      	adds	r2, r3, #1
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b930:	3b01      	subs	r3, #1
 800b932:	b29a      	uxth	r2, r3
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	3b01      	subs	r3, #1
 800b940:	b29a      	uxth	r2, r3
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b946:	e10b      	b.n	800bb60 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d14e      	bne.n	800b9ee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b956:	2200      	movs	r2, #0
 800b958:	4906      	ldr	r1, [pc, #24]	; (800b974 <HAL_I2C_Master_Receive+0x22c>)
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f002 f808 	bl	800d970 <I2C_WaitOnFlagUntilTimeout>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d008      	beq.n	800b978 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	e10e      	b.n	800bb88 <HAL_I2C_Master_Receive+0x440>
 800b96a:	bf00      	nop
 800b96c:	00100002 	.word	0x00100002
 800b970:	ffff0000 	.word	0xffff0000
 800b974:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	691a      	ldr	r2, [r3, #16]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b992:	b2d2      	uxtb	r2, r2
 800b994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99a:	1c5a      	adds	r2, r3, #1
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	3b01      	subs	r3, #1
 800b9b4:	b29a      	uxth	r2, r3
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	691a      	ldr	r2, [r3, #16]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c4:	b2d2      	uxtb	r2, r2
 800b9c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9cc:	1c5a      	adds	r2, r3, #1
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b9ec:	e0b8      	b.n	800bb60 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	4966      	ldr	r1, [pc, #408]	; (800bb90 <HAL_I2C_Master_Receive+0x448>)
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f001 ffb9 	bl	800d970 <I2C_WaitOnFlagUntilTimeout>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	e0bf      	b.n	800bb88 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	691a      	ldr	r2, [r3, #16]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba22:	b2d2      	uxtb	r2, r2
 800ba24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2a:	1c5a      	adds	r2, r3, #1
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba34:	3b01      	subs	r3, #1
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	3b01      	subs	r3, #1
 800ba44:	b29a      	uxth	r2, r3
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	9300      	str	r3, [sp, #0]
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba50:	2200      	movs	r2, #0
 800ba52:	494f      	ldr	r1, [pc, #316]	; (800bb90 <HAL_I2C_Master_Receive+0x448>)
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f001 ff8b 	bl	800d970 <I2C_WaitOnFlagUntilTimeout>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	e091      	b.n	800bb88 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	691a      	ldr	r2, [r3, #16]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7e:	b2d2      	uxtb	r2, r2
 800ba80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba86:	1c5a      	adds	r2, r3, #1
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba90:	3b01      	subs	r3, #1
 800ba92:	b29a      	uxth	r2, r3
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	691a      	ldr	r2, [r3, #16]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab0:	b2d2      	uxtb	r2, r2
 800bab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab8:	1c5a      	adds	r2, r3, #1
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bac2:	3b01      	subs	r3, #1
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bace:	b29b      	uxth	r3, r3
 800bad0:	3b01      	subs	r3, #1
 800bad2:	b29a      	uxth	r2, r3
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bad8:	e042      	b.n	800bb60 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800badc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f002 f8d0 	bl	800dc84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800baea:	2301      	movs	r3, #1
 800baec:	e04c      	b.n	800bb88 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	691a      	ldr	r2, [r3, #16]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf8:	b2d2      	uxtb	r2, r2
 800bafa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb00:	1c5a      	adds	r2, r3, #1
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	695b      	ldr	r3, [r3, #20]
 800bb26:	f003 0304 	and.w	r3, r3, #4
 800bb2a:	2b04      	cmp	r3, #4
 800bb2c:	d118      	bne.n	800bb60 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	691a      	ldr	r2, [r3, #16]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb38:	b2d2      	uxtb	r2, r2
 800bb3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb40:	1c5a      	adds	r2, r3, #1
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	b29a      	uxth	r2, r3
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f47f aec2 	bne.w	800b8ee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2220      	movs	r2, #32
 800bb6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bb82:	2300      	movs	r3, #0
 800bb84:	e000      	b.n	800bb88 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bb86:	2302      	movs	r3, #2
  }
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3728      	adds	r7, #40	; 0x28
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	00010004 	.word	0x00010004

0800bb94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b08a      	sub	sp, #40	; 0x28
 800bb98:	af02      	add	r7, sp, #8
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	607a      	str	r2, [r7, #4]
 800bb9e:	603b      	str	r3, [r7, #0]
 800bba0:	460b      	mov	r3, r1
 800bba2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800bba4:	f7fe fc9c 	bl	800a4e0 <HAL_GetTick>
 800bba8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	2b20      	cmp	r3, #32
 800bbb8:	f040 8111 	bne.w	800bdde <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	2319      	movs	r3, #25
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	4988      	ldr	r1, [pc, #544]	; (800bde8 <HAL_I2C_IsDeviceReady+0x254>)
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f001 fed2 	bl	800d970 <I2C_WaitOnFlagUntilTimeout>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d001      	beq.n	800bbd6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800bbd2:	2302      	movs	r3, #2
 800bbd4:	e104      	b.n	800bde0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d101      	bne.n	800bbe4 <HAL_I2C_IsDeviceReady+0x50>
 800bbe0:	2302      	movs	r3, #2
 800bbe2:	e0fd      	b.n	800bde0 <HAL_I2C_IsDeviceReady+0x24c>
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f003 0301 	and.w	r3, r3, #1
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d007      	beq.n	800bc0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f042 0201 	orr.w	r2, r2, #1
 800bc08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bc18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2224      	movs	r2, #36	; 0x24
 800bc1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	4a70      	ldr	r2, [pc, #448]	; (800bdec <HAL_I2C_IsDeviceReady+0x258>)
 800bc2c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f001 fe90 	bl	800d970 <I2C_WaitOnFlagUntilTimeout>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00d      	beq.n	800bc72 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc64:	d103      	bne.n	800bc6e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc6c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800bc6e:	2303      	movs	r3, #3
 800bc70:	e0b6      	b.n	800bde0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bc72:	897b      	ldrh	r3, [r7, #10]
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	461a      	mov	r2, r3
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bc80:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800bc82:	f7fe fc2d 	bl	800a4e0 <HAL_GetTick>
 800bc86:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	695b      	ldr	r3, [r3, #20]
 800bc8e:	f003 0302 	and.w	r3, r3, #2
 800bc92:	2b02      	cmp	r3, #2
 800bc94:	bf0c      	ite	eq
 800bc96:	2301      	moveq	r3, #1
 800bc98:	2300      	movne	r3, #0
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	695b      	ldr	r3, [r3, #20]
 800bca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcac:	bf0c      	ite	eq
 800bcae:	2301      	moveq	r3, #1
 800bcb0:	2300      	movne	r3, #0
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800bcb6:	e025      	b.n	800bd04 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bcb8:	f7fe fc12 	bl	800a4e0 <HAL_GetTick>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	1ad3      	subs	r3, r2, r3
 800bcc2:	683a      	ldr	r2, [r7, #0]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d302      	bcc.n	800bcce <HAL_I2C_IsDeviceReady+0x13a>
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d103      	bne.n	800bcd6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	22a0      	movs	r2, #160	; 0xa0
 800bcd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	695b      	ldr	r3, [r3, #20]
 800bcdc:	f003 0302 	and.w	r3, r3, #2
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	bf0c      	ite	eq
 800bce4:	2301      	moveq	r3, #1
 800bce6:	2300      	movne	r3, #0
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcfa:	bf0c      	ite	eq
 800bcfc:	2301      	moveq	r3, #1
 800bcfe:	2300      	movne	r3, #0
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	2ba0      	cmp	r3, #160	; 0xa0
 800bd0e:	d005      	beq.n	800bd1c <HAL_I2C_IsDeviceReady+0x188>
 800bd10:	7dfb      	ldrb	r3, [r7, #23]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d102      	bne.n	800bd1c <HAL_I2C_IsDeviceReady+0x188>
 800bd16:	7dbb      	ldrb	r3, [r7, #22]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d0cd      	beq.n	800bcb8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2220      	movs	r2, #32
 800bd20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	695b      	ldr	r3, [r3, #20]
 800bd2a:	f003 0302 	and.w	r3, r3, #2
 800bd2e:	2b02      	cmp	r3, #2
 800bd30:	d129      	bne.n	800bd86 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd40:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd42:	2300      	movs	r3, #0
 800bd44:	613b      	str	r3, [r7, #16]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	695b      	ldr	r3, [r3, #20]
 800bd4c:	613b      	str	r3, [r7, #16]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	699b      	ldr	r3, [r3, #24]
 800bd54:	613b      	str	r3, [r7, #16]
 800bd56:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	9300      	str	r3, [sp, #0]
 800bd5c:	2319      	movs	r3, #25
 800bd5e:	2201      	movs	r2, #1
 800bd60:	4921      	ldr	r1, [pc, #132]	; (800bde8 <HAL_I2C_IsDeviceReady+0x254>)
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f001 fe04 	bl	800d970 <I2C_WaitOnFlagUntilTimeout>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d001      	beq.n	800bd72 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e036      	b.n	800bde0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2220      	movs	r2, #32
 800bd76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	e02c      	b.n	800bde0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd94:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bd9e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	2319      	movs	r3, #25
 800bda6:	2201      	movs	r2, #1
 800bda8:	490f      	ldr	r1, [pc, #60]	; (800bde8 <HAL_I2C_IsDeviceReady+0x254>)
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f001 fde0 	bl	800d970 <I2C_WaitOnFlagUntilTimeout>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d001      	beq.n	800bdba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e012      	b.n	800bde0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800bdc0:	69ba      	ldr	r2, [r7, #24]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	f4ff af32 	bcc.w	800bc2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2220      	movs	r2, #32
 800bdce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bdda:	2301      	movs	r3, #1
 800bddc:	e000      	b.n	800bde0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800bdde:	2302      	movs	r3, #2
  }
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3720      	adds	r7, #32
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	00100002 	.word	0x00100002
 800bdec:	ffff0000 	.word	0xffff0000

0800bdf0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b088      	sub	sp, #32
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be08:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be10:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be18:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800be1a:	7bfb      	ldrb	r3, [r7, #15]
 800be1c:	2b10      	cmp	r3, #16
 800be1e:	d003      	beq.n	800be28 <HAL_I2C_EV_IRQHandler+0x38>
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	2b40      	cmp	r3, #64	; 0x40
 800be24:	f040 80c1 	bne.w	800bfaa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	699b      	ldr	r3, [r3, #24]
 800be2e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	695b      	ldr	r3, [r3, #20]
 800be36:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	f003 0301 	and.w	r3, r3, #1
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10d      	bne.n	800be5e <HAL_I2C_EV_IRQHandler+0x6e>
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800be48:	d003      	beq.n	800be52 <HAL_I2C_EV_IRQHandler+0x62>
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800be50:	d101      	bne.n	800be56 <HAL_I2C_EV_IRQHandler+0x66>
 800be52:	2301      	movs	r3, #1
 800be54:	e000      	b.n	800be58 <HAL_I2C_EV_IRQHandler+0x68>
 800be56:	2300      	movs	r3, #0
 800be58:	2b01      	cmp	r3, #1
 800be5a:	f000 8132 	beq.w	800c0c2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	f003 0301 	and.w	r3, r3, #1
 800be64:	2b00      	cmp	r3, #0
 800be66:	d00c      	beq.n	800be82 <HAL_I2C_EV_IRQHandler+0x92>
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	0a5b      	lsrs	r3, r3, #9
 800be6c:	f003 0301 	and.w	r3, r3, #1
 800be70:	2b00      	cmp	r3, #0
 800be72:	d006      	beq.n	800be82 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f001 ff8a 	bl	800dd8e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fd65 	bl	800c94a <I2C_Master_SB>
 800be80:	e092      	b.n	800bfa8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	08db      	lsrs	r3, r3, #3
 800be86:	f003 0301 	and.w	r3, r3, #1
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d009      	beq.n	800bea2 <HAL_I2C_EV_IRQHandler+0xb2>
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	0a5b      	lsrs	r3, r3, #9
 800be92:	f003 0301 	and.w	r3, r3, #1
 800be96:	2b00      	cmp	r3, #0
 800be98:	d003      	beq.n	800bea2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 fddb 	bl	800ca56 <I2C_Master_ADD10>
 800bea0:	e082      	b.n	800bfa8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	085b      	lsrs	r3, r3, #1
 800bea6:	f003 0301 	and.w	r3, r3, #1
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d009      	beq.n	800bec2 <HAL_I2C_EV_IRQHandler+0xd2>
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	0a5b      	lsrs	r3, r3, #9
 800beb2:	f003 0301 	and.w	r3, r3, #1
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d003      	beq.n	800bec2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 fdf5 	bl	800caaa <I2C_Master_ADDR>
 800bec0:	e072      	b.n	800bfa8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	089b      	lsrs	r3, r3, #2
 800bec6:	f003 0301 	and.w	r3, r3, #1
 800beca:	2b00      	cmp	r3, #0
 800becc:	d03b      	beq.n	800bf46 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bedc:	f000 80f3 	beq.w	800c0c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	09db      	lsrs	r3, r3, #7
 800bee4:	f003 0301 	and.w	r3, r3, #1
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00f      	beq.n	800bf0c <HAL_I2C_EV_IRQHandler+0x11c>
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	0a9b      	lsrs	r3, r3, #10
 800bef0:	f003 0301 	and.w	r3, r3, #1
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d009      	beq.n	800bf0c <HAL_I2C_EV_IRQHandler+0x11c>
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	089b      	lsrs	r3, r3, #2
 800befc:	f003 0301 	and.w	r3, r3, #1
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d103      	bne.n	800bf0c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 f9d5 	bl	800c2b4 <I2C_MasterTransmit_TXE>
 800bf0a:	e04d      	b.n	800bfa8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	089b      	lsrs	r3, r3, #2
 800bf10:	f003 0301 	and.w	r3, r3, #1
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f000 80d6 	beq.w	800c0c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	0a5b      	lsrs	r3, r3, #9
 800bf1e:	f003 0301 	and.w	r3, r3, #1
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	f000 80cf 	beq.w	800c0c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800bf28:	7bbb      	ldrb	r3, [r7, #14]
 800bf2a:	2b21      	cmp	r3, #33	; 0x21
 800bf2c:	d103      	bne.n	800bf36 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fa5c 	bl	800c3ec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf34:	e0c7      	b.n	800c0c6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800bf36:	7bfb      	ldrb	r3, [r7, #15]
 800bf38:	2b40      	cmp	r3, #64	; 0x40
 800bf3a:	f040 80c4 	bne.w	800c0c6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 faca 	bl	800c4d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf44:	e0bf      	b.n	800c0c6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf54:	f000 80b7 	beq.w	800c0c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	099b      	lsrs	r3, r3, #6
 800bf5c:	f003 0301 	and.w	r3, r3, #1
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00f      	beq.n	800bf84 <HAL_I2C_EV_IRQHandler+0x194>
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	0a9b      	lsrs	r3, r3, #10
 800bf68:	f003 0301 	and.w	r3, r3, #1
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d009      	beq.n	800bf84 <HAL_I2C_EV_IRQHandler+0x194>
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	089b      	lsrs	r3, r3, #2
 800bf74:	f003 0301 	and.w	r3, r3, #1
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d103      	bne.n	800bf84 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 fb3f 	bl	800c600 <I2C_MasterReceive_RXNE>
 800bf82:	e011      	b.n	800bfa8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	089b      	lsrs	r3, r3, #2
 800bf88:	f003 0301 	and.w	r3, r3, #1
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	f000 809a 	beq.w	800c0c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	0a5b      	lsrs	r3, r3, #9
 800bf96:	f003 0301 	and.w	r3, r3, #1
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f000 8093 	beq.w	800c0c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fbe8 	bl	800c776 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bfa6:	e08e      	b.n	800c0c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800bfa8:	e08d      	b.n	800c0c6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d004      	beq.n	800bfbc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	695b      	ldr	r3, [r3, #20]
 800bfb8:	61fb      	str	r3, [r7, #28]
 800bfba:	e007      	b.n	800bfcc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	699b      	ldr	r3, [r3, #24]
 800bfc2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	695b      	ldr	r3, [r3, #20]
 800bfca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	085b      	lsrs	r3, r3, #1
 800bfd0:	f003 0301 	and.w	r3, r3, #1
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d012      	beq.n	800bffe <HAL_I2C_EV_IRQHandler+0x20e>
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	0a5b      	lsrs	r3, r3, #9
 800bfdc:	f003 0301 	and.w	r3, r3, #1
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d00c      	beq.n	800bffe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d003      	beq.n	800bff4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	699b      	ldr	r3, [r3, #24]
 800bff2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800bff4:	69b9      	ldr	r1, [r7, #24]
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 ffa6 	bl	800cf48 <I2C_Slave_ADDR>
 800bffc:	e066      	b.n	800c0cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	091b      	lsrs	r3, r3, #4
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	2b00      	cmp	r3, #0
 800c008:	d009      	beq.n	800c01e <HAL_I2C_EV_IRQHandler+0x22e>
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	0a5b      	lsrs	r3, r3, #9
 800c00e:	f003 0301 	and.w	r3, r3, #1
 800c012:	2b00      	cmp	r3, #0
 800c014:	d003      	beq.n	800c01e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 ffe0 	bl	800cfdc <I2C_Slave_STOPF>
 800c01c:	e056      	b.n	800c0cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c01e:	7bbb      	ldrb	r3, [r7, #14]
 800c020:	2b21      	cmp	r3, #33	; 0x21
 800c022:	d002      	beq.n	800c02a <HAL_I2C_EV_IRQHandler+0x23a>
 800c024:	7bbb      	ldrb	r3, [r7, #14]
 800c026:	2b29      	cmp	r3, #41	; 0x29
 800c028:	d125      	bne.n	800c076 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	09db      	lsrs	r3, r3, #7
 800c02e:	f003 0301 	and.w	r3, r3, #1
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00f      	beq.n	800c056 <HAL_I2C_EV_IRQHandler+0x266>
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	0a9b      	lsrs	r3, r3, #10
 800c03a:	f003 0301 	and.w	r3, r3, #1
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d009      	beq.n	800c056 <HAL_I2C_EV_IRQHandler+0x266>
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	089b      	lsrs	r3, r3, #2
 800c046:	f003 0301 	and.w	r3, r3, #1
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d103      	bne.n	800c056 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 febc 	bl	800cdcc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c054:	e039      	b.n	800c0ca <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	089b      	lsrs	r3, r3, #2
 800c05a:	f003 0301 	and.w	r3, r3, #1
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d033      	beq.n	800c0ca <HAL_I2C_EV_IRQHandler+0x2da>
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	0a5b      	lsrs	r3, r3, #9
 800c066:	f003 0301 	and.w	r3, r3, #1
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d02d      	beq.n	800c0ca <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 fee9 	bl	800ce46 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c074:	e029      	b.n	800c0ca <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	099b      	lsrs	r3, r3, #6
 800c07a:	f003 0301 	and.w	r3, r3, #1
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00f      	beq.n	800c0a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	0a9b      	lsrs	r3, r3, #10
 800c086:	f003 0301 	and.w	r3, r3, #1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d009      	beq.n	800c0a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800c08e:	69fb      	ldr	r3, [r7, #28]
 800c090:	089b      	lsrs	r3, r3, #2
 800c092:	f003 0301 	and.w	r3, r3, #1
 800c096:	2b00      	cmp	r3, #0
 800c098:	d103      	bne.n	800c0a2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 fef4 	bl	800ce88 <I2C_SlaveReceive_RXNE>
 800c0a0:	e014      	b.n	800c0cc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	089b      	lsrs	r3, r3, #2
 800c0a6:	f003 0301 	and.w	r3, r3, #1
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00e      	beq.n	800c0cc <HAL_I2C_EV_IRQHandler+0x2dc>
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	0a5b      	lsrs	r3, r3, #9
 800c0b2:	f003 0301 	and.w	r3, r3, #1
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d008      	beq.n	800c0cc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 ff22 	bl	800cf04 <I2C_SlaveReceive_BTF>
 800c0c0:	e004      	b.n	800c0cc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800c0c2:	bf00      	nop
 800c0c4:	e002      	b.n	800c0cc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c0c6:	bf00      	nop
 800c0c8:	e000      	b.n	800c0cc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c0ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800c0cc:	3720      	adds	r7, #32
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b08a      	sub	sp, #40	; 0x28
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	695b      	ldr	r3, [r3, #20]
 800c0e0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c0f4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c0f6:	6a3b      	ldr	r3, [r7, #32]
 800c0f8:	0a1b      	lsrs	r3, r3, #8
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00e      	beq.n	800c120 <HAL_I2C_ER_IRQHandler+0x4e>
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	0a1b      	lsrs	r3, r3, #8
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d008      	beq.n	800c120 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800c10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c110:	f043 0301 	orr.w	r3, r3, #1
 800c114:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c11e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c120:	6a3b      	ldr	r3, [r7, #32]
 800c122:	0a5b      	lsrs	r3, r3, #9
 800c124:	f003 0301 	and.w	r3, r3, #1
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00e      	beq.n	800c14a <HAL_I2C_ER_IRQHandler+0x78>
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	0a1b      	lsrs	r3, r3, #8
 800c130:	f003 0301 	and.w	r3, r3, #1
 800c134:	2b00      	cmp	r3, #0
 800c136:	d008      	beq.n	800c14a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800c138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13a:	f043 0302 	orr.w	r3, r3, #2
 800c13e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800c148:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c14a:	6a3b      	ldr	r3, [r7, #32]
 800c14c:	0a9b      	lsrs	r3, r3, #10
 800c14e:	f003 0301 	and.w	r3, r3, #1
 800c152:	2b00      	cmp	r3, #0
 800c154:	d03f      	beq.n	800c1d6 <HAL_I2C_ER_IRQHandler+0x104>
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	0a1b      	lsrs	r3, r3, #8
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d039      	beq.n	800c1d6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800c162:	7efb      	ldrb	r3, [r7, #27]
 800c164:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c174:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800c17c:	7ebb      	ldrb	r3, [r7, #26]
 800c17e:	2b20      	cmp	r3, #32
 800c180:	d112      	bne.n	800c1a8 <HAL_I2C_ER_IRQHandler+0xd6>
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10f      	bne.n	800c1a8 <HAL_I2C_ER_IRQHandler+0xd6>
 800c188:	7cfb      	ldrb	r3, [r7, #19]
 800c18a:	2b21      	cmp	r3, #33	; 0x21
 800c18c:	d008      	beq.n	800c1a0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800c18e:	7cfb      	ldrb	r3, [r7, #19]
 800c190:	2b29      	cmp	r3, #41	; 0x29
 800c192:	d005      	beq.n	800c1a0 <HAL_I2C_ER_IRQHandler+0xce>
 800c194:	7cfb      	ldrb	r3, [r7, #19]
 800c196:	2b28      	cmp	r3, #40	; 0x28
 800c198:	d106      	bne.n	800c1a8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2b21      	cmp	r3, #33	; 0x21
 800c19e:	d103      	bne.n	800c1a8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f001 f84b 	bl	800d23c <I2C_Slave_AF>
 800c1a6:	e016      	b.n	800c1d6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c1b0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b4:	f043 0304 	orr.w	r3, r3, #4
 800c1b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c1ba:	7efb      	ldrb	r3, [r7, #27]
 800c1bc:	2b10      	cmp	r3, #16
 800c1be:	d002      	beq.n	800c1c6 <HAL_I2C_ER_IRQHandler+0xf4>
 800c1c0:	7efb      	ldrb	r3, [r7, #27]
 800c1c2:	2b40      	cmp	r3, #64	; 0x40
 800c1c4:	d107      	bne.n	800c1d6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c1d4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c1d6:	6a3b      	ldr	r3, [r7, #32]
 800c1d8:	0adb      	lsrs	r3, r3, #11
 800c1da:	f003 0301 	and.w	r3, r3, #1
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00e      	beq.n	800c200 <HAL_I2C_ER_IRQHandler+0x12e>
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	0a1b      	lsrs	r3, r3, #8
 800c1e6:	f003 0301 	and.w	r3, r3, #1
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d008      	beq.n	800c200 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f0:	f043 0308 	orr.w	r3, r3, #8
 800c1f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800c1fe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800c200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c202:	2b00      	cmp	r3, #0
 800c204:	d008      	beq.n	800c218 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20c:	431a      	orrs	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f001 f882 	bl	800d31c <I2C_ITError>
  }
}
 800c218:	bf00      	nop
 800c21a:	3728      	adds	r7, #40	; 0x28
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c228:	bf00      	nop
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c23c:	bf00      	nop
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	460b      	mov	r3, r1
 800c252:	70fb      	strb	r3, [r7, #3]
 800c254:	4613      	mov	r3, r2
 800c256:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c258:	bf00      	nop
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800c26c:	bf00      	nop
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c280:	bf00      	nop
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c294:	bf00      	nop
 800c296:	370c      	adds	r7, #12
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c2a8:	bf00      	nop
 800c2aa:	370c      	adds	r7, #12
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c2ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d150      	bne.n	800c37c <I2C_MasterTransmit_TXE+0xc8>
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
 800c2dc:	2b21      	cmp	r3, #33	; 0x21
 800c2de:	d14d      	bne.n	800c37c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	2b08      	cmp	r3, #8
 800c2e4:	d01d      	beq.n	800c322 <I2C_MasterTransmit_TXE+0x6e>
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	2b20      	cmp	r3, #32
 800c2ea:	d01a      	beq.n	800c322 <I2C_MasterTransmit_TXE+0x6e>
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c2f2:	d016      	beq.n	800c322 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	685a      	ldr	r2, [r3, #4]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c302:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2211      	movs	r2, #17
 800c308:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2220      	movs	r2, #32
 800c316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f7f6 ff78 	bl	8003210 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c320:	e060      	b.n	800c3e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	685a      	ldr	r2, [r3, #4]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c330:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c340:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2200      	movs	r2, #0
 800c346:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2220      	movs	r2, #32
 800c34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c356:	b2db      	uxtb	r3, r3
 800c358:	2b40      	cmp	r3, #64	; 0x40
 800c35a:	d107      	bne.n	800c36c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f7ff ff87 	bl	800c278 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c36a:	e03b      	b.n	800c3e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f7f6 ff4b 	bl	8003210 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c37a:	e033      	b.n	800c3e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800c37c:	7bfb      	ldrb	r3, [r7, #15]
 800c37e:	2b21      	cmp	r3, #33	; 0x21
 800c380:	d005      	beq.n	800c38e <I2C_MasterTransmit_TXE+0xda>
 800c382:	7bbb      	ldrb	r3, [r7, #14]
 800c384:	2b40      	cmp	r3, #64	; 0x40
 800c386:	d12d      	bne.n	800c3e4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800c388:	7bfb      	ldrb	r3, [r7, #15]
 800c38a:	2b22      	cmp	r3, #34	; 0x22
 800c38c:	d12a      	bne.n	800c3e4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c392:	b29b      	uxth	r3, r3
 800c394:	2b00      	cmp	r3, #0
 800c396:	d108      	bne.n	800c3aa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3a6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800c3a8:	e01c      	b.n	800c3e4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	2b40      	cmp	r3, #64	; 0x40
 800c3b4:	d103      	bne.n	800c3be <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 f88e 	bl	800c4d8 <I2C_MemoryTransmit_TXE_BTF>
}
 800c3bc:	e012      	b.n	800c3e4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c2:	781a      	ldrb	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ce:	1c5a      	adds	r2, r3, #1
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	b29a      	uxth	r2, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c3e2:	e7ff      	b.n	800c3e4 <I2C_MasterTransmit_TXE+0x130>
 800c3e4:	bf00      	nop
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c400:	b2db      	uxtb	r3, r3
 800c402:	2b21      	cmp	r3, #33	; 0x21
 800c404:	d164      	bne.n	800c4d0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d012      	beq.n	800c436 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c414:	781a      	ldrb	r2, [r3, #0]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c420:	1c5a      	adds	r2, r3, #1
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	3b01      	subs	r3, #1
 800c42e:	b29a      	uxth	r2, r3
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800c434:	e04c      	b.n	800c4d0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2b08      	cmp	r3, #8
 800c43a:	d01d      	beq.n	800c478 <I2C_MasterTransmit_BTF+0x8c>
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2b20      	cmp	r3, #32
 800c440:	d01a      	beq.n	800c478 <I2C_MasterTransmit_BTF+0x8c>
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c448:	d016      	beq.n	800c478 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	685a      	ldr	r2, [r3, #4]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c458:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2211      	movs	r2, #17
 800c45e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2200      	movs	r2, #0
 800c464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2220      	movs	r2, #32
 800c46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f7f6 fecd 	bl	8003210 <HAL_I2C_MasterTxCpltCallback>
}
 800c476:	e02b      	b.n	800c4d0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	685a      	ldr	r2, [r3, #4]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c486:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c496:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2220      	movs	r2, #32
 800c4a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	2b40      	cmp	r3, #64	; 0x40
 800c4b0:	d107      	bne.n	800c4c2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f7ff fedc 	bl	800c278 <HAL_I2C_MemTxCpltCallback>
}
 800c4c0:	e006      	b.n	800c4d0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f7f6 fea0 	bl	8003210 <HAL_I2C_MasterTxCpltCallback>
}
 800c4d0:	bf00      	nop
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d11d      	bne.n	800c52c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d10b      	bne.n	800c510 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4fc:	b2da      	uxtb	r2, r3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c508:	1c9a      	adds	r2, r3, #2
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800c50e:	e073      	b.n	800c5f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c514:	b29b      	uxth	r3, r3
 800c516:	121b      	asrs	r3, r3, #8
 800c518:	b2da      	uxtb	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c524:	1c5a      	adds	r2, r3, #1
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c52a:	e065      	b.n	800c5f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c530:	2b01      	cmp	r3, #1
 800c532:	d10b      	bne.n	800c54c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c538:	b2da      	uxtb	r2, r3
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c544:	1c5a      	adds	r2, r3, #1
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c54a:	e055      	b.n	800c5f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c550:	2b02      	cmp	r3, #2
 800c552:	d151      	bne.n	800c5f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800c554:	7bfb      	ldrb	r3, [r7, #15]
 800c556:	2b22      	cmp	r3, #34	; 0x22
 800c558:	d10d      	bne.n	800c576 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c568:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c56e:	1c5a      	adds	r2, r3, #1
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c574:	e040      	b.n	800c5f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d015      	beq.n	800c5ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800c580:	7bfb      	ldrb	r3, [r7, #15]
 800c582:	2b21      	cmp	r3, #33	; 0x21
 800c584:	d112      	bne.n	800c5ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58a:	781a      	ldrb	r2, [r3, #0]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c596:	1c5a      	adds	r2, r3, #1
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c5aa:	e025      	b.n	800c5f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d120      	bne.n	800c5f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800c5b6:	7bfb      	ldrb	r3, [r7, #15]
 800c5b8:	2b21      	cmp	r3, #33	; 0x21
 800c5ba:	d11d      	bne.n	800c5f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	685a      	ldr	r2, [r3, #4]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c5ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c5da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2220      	movs	r2, #32
 800c5e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7ff fe40 	bl	800c278 <HAL_I2C_MemTxCpltCallback>
}
 800c5f8:	bf00      	nop
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b22      	cmp	r3, #34	; 0x22
 800c612:	f040 80ac 	bne.w	800c76e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2b03      	cmp	r3, #3
 800c622:	d921      	bls.n	800c668 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	691a      	ldr	r2, [r3, #16]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62e:	b2d2      	uxtb	r2, r2
 800c630:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c636:	1c5a      	adds	r2, r3, #1
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c640:	b29b      	uxth	r3, r3
 800c642:	3b01      	subs	r3, #1
 800c644:	b29a      	uxth	r2, r3
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c64e:	b29b      	uxth	r3, r3
 800c650:	2b03      	cmp	r3, #3
 800c652:	f040 808c 	bne.w	800c76e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c664:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800c666:	e082      	b.n	800c76e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c66c:	2b02      	cmp	r3, #2
 800c66e:	d075      	beq.n	800c75c <I2C_MasterReceive_RXNE+0x15c>
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2b01      	cmp	r3, #1
 800c674:	d002      	beq.n	800c67c <I2C_MasterReceive_RXNE+0x7c>
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d16f      	bne.n	800c75c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f001 facf 	bl	800dc20 <I2C_WaitOnSTOPRequestThroughIT>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d142      	bne.n	800c70e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c696:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c6a6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	691a      	ldr	r2, [r3, #16]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b2:	b2d2      	uxtb	r2, r2
 800c6b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ba:	1c5a      	adds	r2, r3, #1
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	3b01      	subs	r3, #1
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2220      	movs	r2, #32
 800c6d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	2b40      	cmp	r3, #64	; 0x40
 800c6e0:	d10a      	bne.n	800c6f8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7ff fdcb 	bl	800c28c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c6f6:	e03a      	b.n	800c76e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2212      	movs	r2, #18
 800c704:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f7f6 fd98 	bl	800323c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c70c:	e02f      	b.n	800c76e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	685a      	ldr	r2, [r3, #4]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c71c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	691a      	ldr	r2, [r3, #16]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c728:	b2d2      	uxtb	r2, r2
 800c72a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c730:	1c5a      	adds	r2, r3, #1
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	3b01      	subs	r3, #1
 800c73e:	b29a      	uxth	r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2220      	movs	r2, #32
 800c748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f7f6 fd41 	bl	80031dc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c75a:	e008      	b.n	800c76e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	685a      	ldr	r2, [r3, #4]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c76a:	605a      	str	r2, [r3, #4]
}
 800c76c:	e7ff      	b.n	800c76e <I2C_MasterReceive_RXNE+0x16e>
 800c76e:	bf00      	nop
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b084      	sub	sp, #16
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c782:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c788:	b29b      	uxth	r3, r3
 800c78a:	2b04      	cmp	r3, #4
 800c78c:	d11b      	bne.n	800c7c6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	685a      	ldr	r2, [r3, #4]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c79c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	691a      	ldr	r2, [r3, #16]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a8:	b2d2      	uxtb	r2, r2
 800c7aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b0:	1c5a      	adds	r2, r3, #1
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	b29a      	uxth	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800c7c4:	e0bd      	b.n	800c942 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	2b03      	cmp	r3, #3
 800c7ce:	d129      	bne.n	800c824 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	685a      	ldr	r2, [r3, #4]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7de:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2b04      	cmp	r3, #4
 800c7e4:	d00a      	beq.n	800c7fc <I2C_MasterReceive_BTF+0x86>
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2b02      	cmp	r3, #2
 800c7ea:	d007      	beq.n	800c7fc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	691a      	ldr	r2, [r3, #16]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c806:	b2d2      	uxtb	r2, r2
 800c808:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80e:	1c5a      	adds	r2, r3, #1
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c818:	b29b      	uxth	r3, r3
 800c81a:	3b01      	subs	r3, #1
 800c81c:	b29a      	uxth	r2, r3
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c822:	e08e      	b.n	800c942 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c828:	b29b      	uxth	r3, r3
 800c82a:	2b02      	cmp	r3, #2
 800c82c:	d176      	bne.n	800c91c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d002      	beq.n	800c83a <I2C_MasterReceive_BTF+0xc4>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2b10      	cmp	r3, #16
 800c838:	d108      	bne.n	800c84c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c848:	601a      	str	r2, [r3, #0]
 800c84a:	e019      	b.n	800c880 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2b04      	cmp	r3, #4
 800c850:	d002      	beq.n	800c858 <I2C_MasterReceive_BTF+0xe2>
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2b02      	cmp	r3, #2
 800c856:	d108      	bne.n	800c86a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c866:	601a      	str	r2, [r3, #0]
 800c868:	e00a      	b.n	800c880 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2b10      	cmp	r3, #16
 800c86e:	d007      	beq.n	800c880 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c87e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	691a      	ldr	r2, [r3, #16]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88a:	b2d2      	uxtb	r2, r2
 800c88c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c892:	1c5a      	adds	r2, r3, #1
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	691a      	ldr	r2, [r3, #16]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b0:	b2d2      	uxtb	r2, r2
 800c8b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b8:	1c5a      	adds	r2, r3, #1
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	685a      	ldr	r2, [r3, #4]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c8da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2220      	movs	r2, #32
 800c8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	2b40      	cmp	r3, #64	; 0x40
 800c8ee:	d10a      	bne.n	800c906 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f7ff fcc4 	bl	800c28c <HAL_I2C_MemRxCpltCallback>
}
 800c904:	e01d      	b.n	800c942 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2212      	movs	r2, #18
 800c912:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7f6 fc91 	bl	800323c <HAL_I2C_MasterRxCpltCallback>
}
 800c91a:	e012      	b.n	800c942 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	691a      	ldr	r2, [r3, #16]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c926:	b2d2      	uxtb	r2, r2
 800c928:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92e:	1c5a      	adds	r2, r3, #1
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c938:	b29b      	uxth	r3, r3
 800c93a:	3b01      	subs	r3, #1
 800c93c:	b29a      	uxth	r2, r3
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c942:	bf00      	nop
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800c94a:	b480      	push	{r7}
 800c94c:	b083      	sub	sp, #12
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	2b40      	cmp	r3, #64	; 0x40
 800c95c:	d117      	bne.n	800c98e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c962:	2b00      	cmp	r3, #0
 800c964:	d109      	bne.n	800c97a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	461a      	mov	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c976:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800c978:	e067      	b.n	800ca4a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	f043 0301 	orr.w	r3, r3, #1
 800c984:	b2da      	uxtb	r2, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	611a      	str	r2, [r3, #16]
}
 800c98c:	e05d      	b.n	800ca4a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	691b      	ldr	r3, [r3, #16]
 800c992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c996:	d133      	bne.n	800ca00 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	2b21      	cmp	r3, #33	; 0x21
 800c9a2:	d109      	bne.n	800c9b8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c9b4:	611a      	str	r2, [r3, #16]
 800c9b6:	e008      	b.n	800c9ca <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	f043 0301 	orr.w	r3, r3, #1
 800c9c2:	b2da      	uxtb	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d004      	beq.n	800c9dc <I2C_Master_SB+0x92>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d108      	bne.n	800c9ee <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d032      	beq.n	800ca4a <I2C_Master_SB+0x100>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d02d      	beq.n	800ca4a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9fc:	605a      	str	r2, [r3, #4]
}
 800c9fe:	e024      	b.n	800ca4a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10e      	bne.n	800ca26 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	11db      	asrs	r3, r3, #7
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	f003 0306 	and.w	r3, r3, #6
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	f063 030f 	orn	r3, r3, #15
 800ca1c:	b2da      	uxtb	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	611a      	str	r2, [r3, #16]
}
 800ca24:	e011      	b.n	800ca4a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d10d      	bne.n	800ca4a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	11db      	asrs	r3, r3, #7
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	f003 0306 	and.w	r3, r3, #6
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	f063 030e 	orn	r3, r3, #14
 800ca42:	b2da      	uxtb	r2, r3
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	611a      	str	r2, [r3, #16]
}
 800ca4a:	bf00      	nop
 800ca4c:	370c      	adds	r7, #12
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr

0800ca56 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800ca56:	b480      	push	{r7}
 800ca58:	b083      	sub	sp, #12
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca62:	b2da      	uxtb	r2, r3
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d004      	beq.n	800ca7c <I2C_Master_ADD10+0x26>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d108      	bne.n	800ca8e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d00c      	beq.n	800ca9e <I2C_Master_ADD10+0x48>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d007      	beq.n	800ca9e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	685a      	ldr	r2, [r3, #4]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca9c:	605a      	str	r2, [r3, #4]
  }
}
 800ca9e:	bf00      	nop
 800caa0:	370c      	adds	r7, #12
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr

0800caaa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800caaa:	b480      	push	{r7}
 800caac:	b091      	sub	sp, #68	; 0x44
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cab8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	2b22      	cmp	r3, #34	; 0x22
 800cad2:	f040 8169 	bne.w	800cda8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d10f      	bne.n	800cafe <I2C_Master_ADDR+0x54>
 800cade:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cae2:	2b40      	cmp	r3, #64	; 0x40
 800cae4:	d10b      	bne.n	800cafe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cae6:	2300      	movs	r3, #0
 800cae8:	633b      	str	r3, [r7, #48]	; 0x30
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	695b      	ldr	r3, [r3, #20]
 800caf0:	633b      	str	r3, [r7, #48]	; 0x30
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	699b      	ldr	r3, [r3, #24]
 800caf8:	633b      	str	r3, [r7, #48]	; 0x30
 800cafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafc:	e160      	b.n	800cdc0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d11d      	bne.n	800cb42 <I2C_Master_ADDR+0x98>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cb0e:	d118      	bne.n	800cb42 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb10:	2300      	movs	r3, #0
 800cb12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	695b      	ldr	r3, [r3, #20]
 800cb1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	699b      	ldr	r3, [r3, #24]
 800cb22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb34:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb3a:	1c5a      	adds	r2, r3, #1
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	651a      	str	r2, [r3, #80]	; 0x50
 800cb40:	e13e      	b.n	800cdc0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d113      	bne.n	800cb74 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	699b      	ldr	r3, [r3, #24]
 800cb5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb60:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb70:	601a      	str	r2, [r3, #0]
 800cb72:	e115      	b.n	800cda0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	f040 808a 	bne.w	800cc94 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cb86:	d137      	bne.n	800cbf8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb96:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cba6:	d113      	bne.n	800cbd0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbb6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cbb8:	2300      	movs	r3, #0
 800cbba:	627b      	str	r3, [r7, #36]	; 0x24
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	695b      	ldr	r3, [r3, #20]
 800cbc2:	627b      	str	r3, [r7, #36]	; 0x24
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	699b      	ldr	r3, [r3, #24]
 800cbca:	627b      	str	r3, [r7, #36]	; 0x24
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbce:	e0e7      	b.n	800cda0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	623b      	str	r3, [r7, #32]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	695b      	ldr	r3, [r3, #20]
 800cbda:	623b      	str	r3, [r7, #32]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	699b      	ldr	r3, [r3, #24]
 800cbe2:	623b      	str	r3, [r7, #32]
 800cbe4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbf4:	601a      	str	r2, [r3, #0]
 800cbf6:	e0d3      	b.n	800cda0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800cbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfa:	2b08      	cmp	r3, #8
 800cbfc:	d02e      	beq.n	800cc5c <I2C_Master_ADDR+0x1b2>
 800cbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc00:	2b20      	cmp	r3, #32
 800cc02:	d02b      	beq.n	800cc5c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800cc04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc06:	2b12      	cmp	r3, #18
 800cc08:	d102      	bne.n	800cc10 <I2C_Master_ADDR+0x166>
 800cc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d125      	bne.n	800cc5c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800cc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc12:	2b04      	cmp	r3, #4
 800cc14:	d00e      	beq.n	800cc34 <I2C_Master_ADDR+0x18a>
 800cc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	d00b      	beq.n	800cc34 <I2C_Master_ADDR+0x18a>
 800cc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1e:	2b10      	cmp	r3, #16
 800cc20:	d008      	beq.n	800cc34 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc30:	601a      	str	r2, [r3, #0]
 800cc32:	e007      	b.n	800cc44 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cc42:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc44:	2300      	movs	r3, #0
 800cc46:	61fb      	str	r3, [r7, #28]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	695b      	ldr	r3, [r3, #20]
 800cc4e:	61fb      	str	r3, [r7, #28]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	699b      	ldr	r3, [r3, #24]
 800cc56:	61fb      	str	r3, [r7, #28]
 800cc58:	69fb      	ldr	r3, [r7, #28]
 800cc5a:	e0a1      	b.n	800cda0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc6a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	61bb      	str	r3, [r7, #24]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	695b      	ldr	r3, [r3, #20]
 800cc76:	61bb      	str	r3, [r7, #24]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	699b      	ldr	r3, [r3, #24]
 800cc7e:	61bb      	str	r3, [r7, #24]
 800cc80:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc90:	601a      	str	r2, [r3, #0]
 800cc92:	e085      	b.n	800cda0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	2b02      	cmp	r3, #2
 800cc9c:	d14d      	bne.n	800cd3a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800cc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca0:	2b04      	cmp	r3, #4
 800cca2:	d016      	beq.n	800ccd2 <I2C_Master_ADDR+0x228>
 800cca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d013      	beq.n	800ccd2 <I2C_Master_ADDR+0x228>
 800ccaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccac:	2b10      	cmp	r3, #16
 800ccae:	d010      	beq.n	800ccd2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccbe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccce:	601a      	str	r2, [r3, #0]
 800ccd0:	e007      	b.n	800cce2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cce0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	685b      	ldr	r3, [r3, #4]
 800cce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccf0:	d117      	bne.n	800cd22 <I2C_Master_ADDR+0x278>
 800ccf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ccf8:	d00b      	beq.n	800cd12 <I2C_Master_ADDR+0x268>
 800ccfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d008      	beq.n	800cd12 <I2C_Master_ADDR+0x268>
 800cd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd02:	2b08      	cmp	r3, #8
 800cd04:	d005      	beq.n	800cd12 <I2C_Master_ADDR+0x268>
 800cd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd08:	2b10      	cmp	r3, #16
 800cd0a:	d002      	beq.n	800cd12 <I2C_Master_ADDR+0x268>
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0e:	2b20      	cmp	r3, #32
 800cd10:	d107      	bne.n	800cd22 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cd20:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd22:	2300      	movs	r3, #0
 800cd24:	617b      	str	r3, [r7, #20]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	695b      	ldr	r3, [r3, #20]
 800cd2c:	617b      	str	r3, [r7, #20]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	699b      	ldr	r3, [r3, #24]
 800cd34:	617b      	str	r3, [r7, #20]
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	e032      	b.n	800cda0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	681a      	ldr	r2, [r3, #0]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd48:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd58:	d117      	bne.n	800cd8a <I2C_Master_ADDR+0x2e0>
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cd60:	d00b      	beq.n	800cd7a <I2C_Master_ADDR+0x2d0>
 800cd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d008      	beq.n	800cd7a <I2C_Master_ADDR+0x2d0>
 800cd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6a:	2b08      	cmp	r3, #8
 800cd6c:	d005      	beq.n	800cd7a <I2C_Master_ADDR+0x2d0>
 800cd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd70:	2b10      	cmp	r3, #16
 800cd72:	d002      	beq.n	800cd7a <I2C_Master_ADDR+0x2d0>
 800cd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd76:	2b20      	cmp	r3, #32
 800cd78:	d107      	bne.n	800cd8a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	685a      	ldr	r2, [r3, #4]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cd88:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	613b      	str	r3, [r7, #16]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	695b      	ldr	r3, [r3, #20]
 800cd94:	613b      	str	r3, [r7, #16]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	699b      	ldr	r3, [r3, #24]
 800cd9c:	613b      	str	r3, [r7, #16]
 800cd9e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800cda6:	e00b      	b.n	800cdc0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cda8:	2300      	movs	r3, #0
 800cdaa:	60fb      	str	r3, [r7, #12]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	695b      	ldr	r3, [r3, #20]
 800cdb2:	60fb      	str	r3, [r7, #12]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	699b      	ldr	r3, [r3, #24]
 800cdba:	60fb      	str	r3, [r7, #12]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
}
 800cdbe:	e7ff      	b.n	800cdc0 <I2C_Master_ADDR+0x316>
 800cdc0:	bf00      	nop
 800cdc2:	3744      	adds	r7, #68	; 0x44
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr

0800cdcc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d02b      	beq.n	800ce3e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdea:	781a      	ldrb	r2, [r3, #0]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf6:	1c5a      	adds	r2, r3, #1
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	3b01      	subs	r3, #1
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d114      	bne.n	800ce3e <I2C_SlaveTransmit_TXE+0x72>
 800ce14:	7bfb      	ldrb	r3, [r7, #15]
 800ce16:	2b29      	cmp	r3, #41	; 0x29
 800ce18:	d111      	bne.n	800ce3e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	685a      	ldr	r2, [r3, #4]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce28:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2221      	movs	r2, #33	; 0x21
 800ce2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2228      	movs	r2, #40	; 0x28
 800ce34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f7ff f9f1 	bl	800c220 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800ce3e:	bf00      	nop
 800ce40:	3710      	adds	r7, #16
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ce46:	b480      	push	{r7}
 800ce48:	b083      	sub	sp, #12
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d011      	beq.n	800ce7c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce5c:	781a      	ldrb	r2, [r3, #0]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce68:	1c5a      	adds	r2, r3, #1
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	3b01      	subs	r3, #1
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800ce7c:	bf00      	nop
 800ce7e:	370c      	adds	r7, #12
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr

0800ce88 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b084      	sub	sp, #16
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d02c      	beq.n	800cefc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	691a      	ldr	r2, [r3, #16]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceac:	b2d2      	uxtb	r2, r2
 800ceae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb4:	1c5a      	adds	r2, r3, #1
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	3b01      	subs	r3, #1
 800cec2:	b29a      	uxth	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cecc:	b29b      	uxth	r3, r3
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d114      	bne.n	800cefc <I2C_SlaveReceive_RXNE+0x74>
 800ced2:	7bfb      	ldrb	r3, [r7, #15]
 800ced4:	2b2a      	cmp	r3, #42	; 0x2a
 800ced6:	d111      	bne.n	800cefc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	685a      	ldr	r2, [r3, #4]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cee6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2222      	movs	r2, #34	; 0x22
 800ceec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2228      	movs	r2, #40	; 0x28
 800cef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7ff f99c 	bl	800c234 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800cefc:	bf00      	nop
 800cefe:	3710      	adds	r7, #16
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d012      	beq.n	800cf3c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	691a      	ldr	r2, [r3, #16]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf20:	b2d2      	uxtb	r2, r2
 800cf22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf28:	1c5a      	adds	r2, r3, #1
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	3b01      	subs	r3, #1
 800cf36:	b29a      	uxth	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800cf3c:	bf00      	nop
 800cf3e:	370c      	adds	r7, #12
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr

0800cf48 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800cf52:	2300      	movs	r3, #0
 800cf54:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cf62:	2b28      	cmp	r3, #40	; 0x28
 800cf64:	d127      	bne.n	800cfb6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	685a      	ldr	r2, [r3, #4]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf74:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	089b      	lsrs	r3, r3, #2
 800cf7a:	f003 0301 	and.w	r3, r3, #1
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d101      	bne.n	800cf86 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800cf82:	2301      	movs	r3, #1
 800cf84:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	09db      	lsrs	r3, r3, #7
 800cf8a:	f003 0301 	and.w	r3, r3, #1
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d103      	bne.n	800cf9a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	68db      	ldr	r3, [r3, #12]
 800cf96:	81bb      	strh	r3, [r7, #12]
 800cf98:	e002      	b.n	800cfa0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	699b      	ldr	r3, [r3, #24]
 800cf9e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800cfa8:	89ba      	ldrh	r2, [r7, #12]
 800cfaa:	7bfb      	ldrb	r3, [r7, #15]
 800cfac:	4619      	mov	r1, r3
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7ff f94a 	bl	800c248 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800cfb4:	e00e      	b.n	800cfd4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	60bb      	str	r3, [r7, #8]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	695b      	ldr	r3, [r3, #20]
 800cfc0:	60bb      	str	r3, [r7, #8]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	699b      	ldr	r3, [r3, #24]
 800cfc8:	60bb      	str	r3, [r7, #8]
 800cfca:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800cfd4:	bf00      	nop
 800cfd6:	3710      	adds	r7, #16
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	685a      	ldr	r2, [r3, #4]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cffa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800cffc:	2300      	movs	r3, #0
 800cffe:	60bb      	str	r3, [r7, #8]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	695b      	ldr	r3, [r3, #20]
 800d006:	60bb      	str	r3, [r7, #8]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f042 0201 	orr.w	r2, r2, #1
 800d016:	601a      	str	r2, [r3, #0]
 800d018:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	681a      	ldr	r2, [r3, #0]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d028:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d038:	d172      	bne.n	800d120 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d03a:	7bfb      	ldrb	r3, [r7, #15]
 800d03c:	2b22      	cmp	r3, #34	; 0x22
 800d03e:	d002      	beq.n	800d046 <I2C_Slave_STOPF+0x6a>
 800d040:	7bfb      	ldrb	r3, [r7, #15]
 800d042:	2b2a      	cmp	r3, #42	; 0x2a
 800d044:	d135      	bne.n	800d0b2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	b29a      	uxth	r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d058:	b29b      	uxth	r3, r3
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d005      	beq.n	800d06a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d062:	f043 0204 	orr.w	r2, r3, #4
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	685a      	ldr	r2, [r3, #4]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d078:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07e:	4618      	mov	r0, r3
 800d080:	f7fd fe62 	bl	800ad48 <HAL_DMA_GetState>
 800d084:	4603      	mov	r3, r0
 800d086:	2b01      	cmp	r3, #1
 800d088:	d049      	beq.n	800d11e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d08e:	4a69      	ldr	r2, [pc, #420]	; (800d234 <I2C_Slave_STOPF+0x258>)
 800d090:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d096:	4618      	mov	r0, r3
 800d098:	f7fd fcaa 	bl	800a9f0 <HAL_DMA_Abort_IT>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d03d      	beq.n	800d11e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d0b0:	e035      	b.n	800d11e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d005      	beq.n	800d0d6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ce:	f043 0204 	orr.w	r2, r3, #4
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	685a      	ldr	r2, [r3, #4]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d0e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fd fe2c 	bl	800ad48 <HAL_DMA_GetState>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d014      	beq.n	800d120 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0fa:	4a4e      	ldr	r2, [pc, #312]	; (800d234 <I2C_Slave_STOPF+0x258>)
 800d0fc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d102:	4618      	mov	r0, r3
 800d104:	f7fd fc74 	bl	800a9f0 <HAL_DMA_Abort_IT>
 800d108:	4603      	mov	r3, r0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d008      	beq.n	800d120 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d118:	4610      	mov	r0, r2
 800d11a:	4798      	blx	r3
 800d11c:	e000      	b.n	800d120 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d11e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d124:	b29b      	uxth	r3, r3
 800d126:	2b00      	cmp	r3, #0
 800d128:	d03e      	beq.n	800d1a8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	695b      	ldr	r3, [r3, #20]
 800d130:	f003 0304 	and.w	r3, r3, #4
 800d134:	2b04      	cmp	r3, #4
 800d136:	d112      	bne.n	800d15e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	691a      	ldr	r2, [r3, #16]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d142:	b2d2      	uxtb	r2, r2
 800d144:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14a:	1c5a      	adds	r2, r3, #1
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d154:	b29b      	uxth	r3, r3
 800d156:	3b01      	subs	r3, #1
 800d158:	b29a      	uxth	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	695b      	ldr	r3, [r3, #20]
 800d164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d168:	2b40      	cmp	r3, #64	; 0x40
 800d16a:	d112      	bne.n	800d192 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	691a      	ldr	r2, [r3, #16]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d176:	b2d2      	uxtb	r2, r2
 800d178:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17e:	1c5a      	adds	r2, r3, #1
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d188:	b29b      	uxth	r3, r3
 800d18a:	3b01      	subs	r3, #1
 800d18c:	b29a      	uxth	r2, r3
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d196:	b29b      	uxth	r3, r3
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d005      	beq.n	800d1a8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a0:	f043 0204 	orr.w	r2, r3, #4
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d003      	beq.n	800d1b8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f000 f8b3 	bl	800d31c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800d1b6:	e039      	b.n	800d22c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d1b8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ba:	2b2a      	cmp	r3, #42	; 0x2a
 800d1bc:	d109      	bne.n	800d1d2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2228      	movs	r2, #40	; 0x28
 800d1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f7ff f831 	bl	800c234 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	2b28      	cmp	r3, #40	; 0x28
 800d1dc:	d111      	bne.n	800d202 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4a15      	ldr	r2, [pc, #84]	; (800d238 <I2C_Slave_STOPF+0x25c>)
 800d1e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2220      	movs	r2, #32
 800d1ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7ff f832 	bl	800c264 <HAL_I2C_ListenCpltCallback>
}
 800d200:	e014      	b.n	800d22c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d206:	2b22      	cmp	r3, #34	; 0x22
 800d208:	d002      	beq.n	800d210 <I2C_Slave_STOPF+0x234>
 800d20a:	7bfb      	ldrb	r3, [r7, #15]
 800d20c:	2b22      	cmp	r3, #34	; 0x22
 800d20e:	d10d      	bne.n	800d22c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2200      	movs	r2, #0
 800d214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2220      	movs	r2, #32
 800d21a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2200      	movs	r2, #0
 800d222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f7ff f804 	bl	800c234 <HAL_I2C_SlaveRxCpltCallback>
}
 800d22c:	bf00      	nop
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	0800d821 	.word	0x0800d821
 800d238:	ffff0000 	.word	0xffff0000

0800d23c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d24a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d250:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	2b08      	cmp	r3, #8
 800d256:	d002      	beq.n	800d25e <I2C_Slave_AF+0x22>
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	2b20      	cmp	r3, #32
 800d25c:	d129      	bne.n	800d2b2 <I2C_Slave_AF+0x76>
 800d25e:	7bfb      	ldrb	r3, [r7, #15]
 800d260:	2b28      	cmp	r3, #40	; 0x28
 800d262:	d126      	bne.n	800d2b2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	4a2c      	ldr	r2, [pc, #176]	; (800d318 <I2C_Slave_AF+0xdc>)
 800d268:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	685a      	ldr	r2, [r3, #4]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d278:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d282:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d292:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2220      	movs	r2, #32
 800d29e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f7fe ffda 	bl	800c264 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800d2b0:	e02e      	b.n	800d310 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800d2b2:	7bfb      	ldrb	r3, [r7, #15]
 800d2b4:	2b21      	cmp	r3, #33	; 0x21
 800d2b6:	d126      	bne.n	800d306 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	4a17      	ldr	r2, [pc, #92]	; (800d318 <I2C_Slave_AF+0xdc>)
 800d2bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2221      	movs	r2, #33	; 0x21
 800d2c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2220      	movs	r2, #32
 800d2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	685a      	ldr	r2, [r3, #4]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d2e2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d2ec:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2fc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f7fe ff8e 	bl	800c220 <HAL_I2C_SlaveTxCpltCallback>
}
 800d304:	e004      	b.n	800d310 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d30e:	615a      	str	r2, [r3, #20]
}
 800d310:	bf00      	nop
 800d312:	3710      	adds	r7, #16
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	ffff0000 	.word	0xffff0000

0800d31c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d32a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d332:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d334:	7bbb      	ldrb	r3, [r7, #14]
 800d336:	2b10      	cmp	r3, #16
 800d338:	d002      	beq.n	800d340 <I2C_ITError+0x24>
 800d33a:	7bbb      	ldrb	r3, [r7, #14]
 800d33c:	2b40      	cmp	r3, #64	; 0x40
 800d33e:	d10a      	bne.n	800d356 <I2C_ITError+0x3a>
 800d340:	7bfb      	ldrb	r3, [r7, #15]
 800d342:	2b22      	cmp	r3, #34	; 0x22
 800d344:	d107      	bne.n	800d356 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d354:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d356:	7bfb      	ldrb	r3, [r7, #15]
 800d358:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d35c:	2b28      	cmp	r3, #40	; 0x28
 800d35e:	d107      	bne.n	800d370 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2228      	movs	r2, #40	; 0x28
 800d36a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d36e:	e015      	b.n	800d39c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d37a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d37e:	d00a      	beq.n	800d396 <I2C_ITError+0x7a>
 800d380:	7bfb      	ldrb	r3, [r7, #15]
 800d382:	2b60      	cmp	r3, #96	; 0x60
 800d384:	d007      	beq.n	800d396 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2220      	movs	r2, #32
 800d38a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2200      	movs	r2, #0
 800d392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2200      	movs	r2, #0
 800d39a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3aa:	d162      	bne.n	800d472 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	685a      	ldr	r2, [r3, #4]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d3ba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d020      	beq.n	800d40c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ce:	4a6a      	ldr	r2, [pc, #424]	; (800d578 <I2C_ITError+0x25c>)
 800d3d0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7fd fb0a 	bl	800a9f0 <HAL_DMA_Abort_IT>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	f000 8089 	beq.w	800d4f6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f022 0201 	bic.w	r2, r2, #1
 800d3f2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2220      	movs	r2, #32
 800d3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d406:	4610      	mov	r0, r2
 800d408:	4798      	blx	r3
 800d40a:	e074      	b.n	800d4f6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d410:	4a59      	ldr	r2, [pc, #356]	; (800d578 <I2C_ITError+0x25c>)
 800d412:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d418:	4618      	mov	r0, r3
 800d41a:	f7fd fae9 	bl	800a9f0 <HAL_DMA_Abort_IT>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d068      	beq.n	800d4f6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	695b      	ldr	r3, [r3, #20]
 800d42a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d42e:	2b40      	cmp	r3, #64	; 0x40
 800d430:	d10b      	bne.n	800d44a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	691a      	ldr	r2, [r3, #16]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43c:	b2d2      	uxtb	r2, r2
 800d43e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d444:	1c5a      	adds	r2, r3, #1
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f022 0201 	bic.w	r2, r2, #1
 800d458:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2220      	movs	r2, #32
 800d45e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d46c:	4610      	mov	r0, r2
 800d46e:	4798      	blx	r3
 800d470:	e041      	b.n	800d4f6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	2b60      	cmp	r3, #96	; 0x60
 800d47c:	d125      	bne.n	800d4ca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2220      	movs	r2, #32
 800d482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2200      	movs	r2, #0
 800d48a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	695b      	ldr	r3, [r3, #20]
 800d492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d496:	2b40      	cmp	r3, #64	; 0x40
 800d498:	d10b      	bne.n	800d4b2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	691a      	ldr	r2, [r3, #16]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a4:	b2d2      	uxtb	r2, r2
 800d4a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ac:	1c5a      	adds	r2, r3, #1
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f022 0201 	bic.w	r2, r2, #1
 800d4c0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f7fe feec 	bl	800c2a0 <HAL_I2C_AbortCpltCallback>
 800d4c8:	e015      	b.n	800d4f6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	695b      	ldr	r3, [r3, #20]
 800d4d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4d4:	2b40      	cmp	r3, #64	; 0x40
 800d4d6:	d10b      	bne.n	800d4f0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	691a      	ldr	r2, [r3, #16]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e2:	b2d2      	uxtb	r2, r2
 800d4e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ea:	1c5a      	adds	r2, r3, #1
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f7f5 fe73 	bl	80031dc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4fa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	f003 0301 	and.w	r3, r3, #1
 800d502:	2b00      	cmp	r3, #0
 800d504:	d10e      	bne.n	800d524 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d109      	bne.n	800d524 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d516:	2b00      	cmp	r3, #0
 800d518:	d104      	bne.n	800d524 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d520:	2b00      	cmp	r3, #0
 800d522:	d007      	beq.n	800d534 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	685a      	ldr	r2, [r3, #4]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d532:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d53a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d540:	f003 0304 	and.w	r3, r3, #4
 800d544:	2b04      	cmp	r3, #4
 800d546:	d113      	bne.n	800d570 <I2C_ITError+0x254>
 800d548:	7bfb      	ldrb	r3, [r7, #15]
 800d54a:	2b28      	cmp	r3, #40	; 0x28
 800d54c:	d110      	bne.n	800d570 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	4a0a      	ldr	r2, [pc, #40]	; (800d57c <I2C_ITError+0x260>)
 800d552:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2200      	movs	r2, #0
 800d558:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2220      	movs	r2, #32
 800d55e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2200      	movs	r2, #0
 800d566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f7fe fe7a 	bl	800c264 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d570:	bf00      	nop
 800d572:	3710      	adds	r7, #16
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}
 800d578:	0800d821 	.word	0x0800d821
 800d57c:	ffff0000 	.word	0xffff0000

0800d580 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b088      	sub	sp, #32
 800d584:	af02      	add	r7, sp, #8
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	607a      	str	r2, [r7, #4]
 800d58a:	603b      	str	r3, [r7, #0]
 800d58c:	460b      	mov	r3, r1
 800d58e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d594:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	2b08      	cmp	r3, #8
 800d59a:	d006      	beq.n	800d5aa <I2C_MasterRequestWrite+0x2a>
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d003      	beq.n	800d5aa <I2C_MasterRequestWrite+0x2a>
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d5a8:	d108      	bne.n	800d5bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d5b8:	601a      	str	r2, [r3, #0]
 800d5ba:	e00b      	b.n	800d5d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5c0:	2b12      	cmp	r3, #18
 800d5c2:	d107      	bne.n	800d5d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d5d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	9300      	str	r3, [sp, #0]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f000 f9c5 	bl	800d970 <I2C_WaitOnFlagUntilTimeout>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00d      	beq.n	800d608 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5fa:	d103      	bne.n	800d604 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d602:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d604:	2303      	movs	r3, #3
 800d606:	e035      	b.n	800d674 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	691b      	ldr	r3, [r3, #16]
 800d60c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d610:	d108      	bne.n	800d624 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d612:	897b      	ldrh	r3, [r7, #10]
 800d614:	b2db      	uxtb	r3, r3
 800d616:	461a      	mov	r2, r3
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d620:	611a      	str	r2, [r3, #16]
 800d622:	e01b      	b.n	800d65c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d624:	897b      	ldrh	r3, [r7, #10]
 800d626:	11db      	asrs	r3, r3, #7
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	f003 0306 	and.w	r3, r3, #6
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	f063 030f 	orn	r3, r3, #15
 800d634:	b2da      	uxtb	r2, r3
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	490e      	ldr	r1, [pc, #56]	; (800d67c <I2C_MasterRequestWrite+0xfc>)
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	f000 f9eb 	bl	800da1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d001      	beq.n	800d652 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800d64e:	2301      	movs	r3, #1
 800d650:	e010      	b.n	800d674 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d652:	897b      	ldrh	r3, [r7, #10]
 800d654:	b2da      	uxtb	r2, r3
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	4907      	ldr	r1, [pc, #28]	; (800d680 <I2C_MasterRequestWrite+0x100>)
 800d662:	68f8      	ldr	r0, [r7, #12]
 800d664:	f000 f9db 	bl	800da1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d001      	beq.n	800d672 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800d66e:	2301      	movs	r3, #1
 800d670:	e000      	b.n	800d674 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800d672:	2300      	movs	r3, #0
}
 800d674:	4618      	mov	r0, r3
 800d676:	3718      	adds	r7, #24
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	00010008 	.word	0x00010008
 800d680:	00010002 	.word	0x00010002

0800d684 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b088      	sub	sp, #32
 800d688:	af02      	add	r7, sp, #8
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	607a      	str	r2, [r7, #4]
 800d68e:	603b      	str	r3, [r7, #0]
 800d690:	460b      	mov	r3, r1
 800d692:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d698:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d6a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	2b08      	cmp	r3, #8
 800d6ae:	d006      	beq.n	800d6be <I2C_MasterRequestRead+0x3a>
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d003      	beq.n	800d6be <I2C_MasterRequestRead+0x3a>
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d6bc:	d108      	bne.n	800d6d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6cc:	601a      	str	r2, [r3, #0]
 800d6ce:	e00b      	b.n	800d6e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6d4:	2b11      	cmp	r3, #17
 800d6d6:	d107      	bne.n	800d6e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	9300      	str	r3, [sp, #0]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f000 f93b 	bl	800d970 <I2C_WaitOnFlagUntilTimeout>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00d      	beq.n	800d71c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d70a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d70e:	d103      	bne.n	800d718 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d716:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d718:	2303      	movs	r3, #3
 800d71a:	e079      	b.n	800d810 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	691b      	ldr	r3, [r3, #16]
 800d720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d724:	d108      	bne.n	800d738 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d726:	897b      	ldrh	r3, [r7, #10]
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	f043 0301 	orr.w	r3, r3, #1
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	611a      	str	r2, [r3, #16]
 800d736:	e05f      	b.n	800d7f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d738:	897b      	ldrh	r3, [r7, #10]
 800d73a:	11db      	asrs	r3, r3, #7
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	f003 0306 	and.w	r3, r3, #6
 800d742:	b2db      	uxtb	r3, r3
 800d744:	f063 030f 	orn	r3, r3, #15
 800d748:	b2da      	uxtb	r2, r3
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	4930      	ldr	r1, [pc, #192]	; (800d818 <I2C_MasterRequestRead+0x194>)
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f000 f961 	bl	800da1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d75c:	4603      	mov	r3, r0
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d001      	beq.n	800d766 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d762:	2301      	movs	r3, #1
 800d764:	e054      	b.n	800d810 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d766:	897b      	ldrh	r3, [r7, #10]
 800d768:	b2da      	uxtb	r2, r3
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	4929      	ldr	r1, [pc, #164]	; (800d81c <I2C_MasterRequestRead+0x198>)
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	f000 f951 	bl	800da1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d001      	beq.n	800d786 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d782:	2301      	movs	r3, #1
 800d784:	e044      	b.n	800d810 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d786:	2300      	movs	r3, #0
 800d788:	613b      	str	r3, [r7, #16]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	695b      	ldr	r3, [r3, #20]
 800d790:	613b      	str	r3, [r7, #16]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	699b      	ldr	r3, [r3, #24]
 800d798:	613b      	str	r3, [r7, #16]
 800d79a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d7aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	9300      	str	r3, [sp, #0]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f000 f8d9 	bl	800d970 <I2C_WaitOnFlagUntilTimeout>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d00d      	beq.n	800d7e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7d2:	d103      	bne.n	800d7dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7da:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800d7dc:	2303      	movs	r3, #3
 800d7de:	e017      	b.n	800d810 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d7e0:	897b      	ldrh	r3, [r7, #10]
 800d7e2:	11db      	asrs	r3, r3, #7
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	f003 0306 	and.w	r3, r3, #6
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	f063 030e 	orn	r3, r3, #14
 800d7f0:	b2da      	uxtb	r2, r3
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	4907      	ldr	r1, [pc, #28]	; (800d81c <I2C_MasterRequestRead+0x198>)
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f000 f90d 	bl	800da1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d001      	beq.n	800d80e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d80a:	2301      	movs	r3, #1
 800d80c:	e000      	b.n	800d810 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d80e:	2300      	movs	r3, #0
}
 800d810:	4618      	mov	r0, r3
 800d812:	3718      	adds	r7, #24
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}
 800d818:	00010008 	.word	0x00010008
 800d81c:	00010002 	.word	0x00010002

0800d820 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b086      	sub	sp, #24
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d828:	2300      	movs	r3, #0
 800d82a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d830:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d838:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800d83a:	4b4b      	ldr	r3, [pc, #300]	; (800d968 <I2C_DMAAbort+0x148>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	08db      	lsrs	r3, r3, #3
 800d840:	4a4a      	ldr	r2, [pc, #296]	; (800d96c <I2C_DMAAbort+0x14c>)
 800d842:	fba2 2303 	umull	r2, r3, r2, r3
 800d846:	0a1a      	lsrs	r2, r3, #8
 800d848:	4613      	mov	r3, r2
 800d84a:	009b      	lsls	r3, r3, #2
 800d84c:	4413      	add	r3, r2
 800d84e:	00da      	lsls	r2, r3, #3
 800d850:	1ad3      	subs	r3, r2, r3
 800d852:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d106      	bne.n	800d868 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d85e:	f043 0220 	orr.w	r2, r3, #32
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800d866:	e00a      	b.n	800d87e <I2C_DMAAbort+0x5e>
    }
    count--;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	3b01      	subs	r3, #1
 800d86c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d87c:	d0ea      	beq.n	800d854 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d882:	2b00      	cmp	r3, #0
 800d884:	d003      	beq.n	800d88e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d88a:	2200      	movs	r2, #0
 800d88c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d892:	2b00      	cmp	r3, #0
 800d894:	d003      	beq.n	800d89e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d89a:	2200      	movs	r2, #0
 800d89c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d003      	beq.n	800d8c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d003      	beq.n	800d8d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f022 0201 	bic.w	r2, r2, #1
 800d8e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	2b60      	cmp	r3, #96	; 0x60
 800d8ee:	d10e      	bne.n	800d90e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	2220      	movs	r2, #32
 800d8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	2200      	movs	r2, #0
 800d904:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d906:	6978      	ldr	r0, [r7, #20]
 800d908:	f7fe fcca 	bl	800c2a0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d90c:	e027      	b.n	800d95e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d90e:	7cfb      	ldrb	r3, [r7, #19]
 800d910:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d914:	2b28      	cmp	r3, #40	; 0x28
 800d916:	d117      	bne.n	800d948 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f042 0201 	orr.w	r2, r2, #1
 800d926:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	681a      	ldr	r2, [r3, #0]
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d936:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	2200      	movs	r2, #0
 800d93c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	2228      	movs	r2, #40	; 0x28
 800d942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d946:	e007      	b.n	800d958 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	2220      	movs	r2, #32
 800d94c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	2200      	movs	r2, #0
 800d954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800d958:	6978      	ldr	r0, [r7, #20]
 800d95a:	f7f5 fc3f 	bl	80031dc <HAL_I2C_ErrorCallback>
}
 800d95e:	bf00      	nop
 800d960:	3718      	adds	r7, #24
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	200000ac 	.word	0x200000ac
 800d96c:	14f8b589 	.word	0x14f8b589

0800d970 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	603b      	str	r3, [r7, #0]
 800d97c:	4613      	mov	r3, r2
 800d97e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d980:	e025      	b.n	800d9ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d988:	d021      	beq.n	800d9ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d98a:	f7fc fda9 	bl	800a4e0 <HAL_GetTick>
 800d98e:	4602      	mov	r2, r0
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	1ad3      	subs	r3, r2, r3
 800d994:	683a      	ldr	r2, [r7, #0]
 800d996:	429a      	cmp	r2, r3
 800d998:	d302      	bcc.n	800d9a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d116      	bne.n	800d9ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2220      	movs	r2, #32
 800d9aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ba:	f043 0220 	orr.w	r2, r3, #32
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e023      	b.n	800da16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	0c1b      	lsrs	r3, r3, #16
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d10d      	bne.n	800d9f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	695b      	ldr	r3, [r3, #20]
 800d9de:	43da      	mvns	r2, r3
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	4013      	ands	r3, r2
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	bf0c      	ite	eq
 800d9ea:	2301      	moveq	r3, #1
 800d9ec:	2300      	movne	r3, #0
 800d9ee:	b2db      	uxtb	r3, r3
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	e00c      	b.n	800da0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	43da      	mvns	r2, r3
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	4013      	ands	r3, r2
 800da00:	b29b      	uxth	r3, r3
 800da02:	2b00      	cmp	r3, #0
 800da04:	bf0c      	ite	eq
 800da06:	2301      	moveq	r3, #1
 800da08:	2300      	movne	r3, #0
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	461a      	mov	r2, r3
 800da0e:	79fb      	ldrb	r3, [r7, #7]
 800da10:	429a      	cmp	r2, r3
 800da12:	d0b6      	beq.n	800d982 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800da14:	2300      	movs	r3, #0
}
 800da16:	4618      	mov	r0, r3
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}

0800da1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800da1e:	b580      	push	{r7, lr}
 800da20:	b084      	sub	sp, #16
 800da22:	af00      	add	r7, sp, #0
 800da24:	60f8      	str	r0, [r7, #12]
 800da26:	60b9      	str	r1, [r7, #8]
 800da28:	607a      	str	r2, [r7, #4]
 800da2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800da2c:	e051      	b.n	800dad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	695b      	ldr	r3, [r3, #20]
 800da34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800da3c:	d123      	bne.n	800da86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800da56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2200      	movs	r2, #0
 800da5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2220      	movs	r2, #32
 800da62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2200      	movs	r2, #0
 800da6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da72:	f043 0204 	orr.w	r2, r3, #4
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2200      	movs	r2, #0
 800da7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800da82:	2301      	movs	r3, #1
 800da84:	e046      	b.n	800db14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da8c:	d021      	beq.n	800dad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da8e:	f7fc fd27 	bl	800a4e0 <HAL_GetTick>
 800da92:	4602      	mov	r2, r0
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	1ad3      	subs	r3, r2, r3
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d302      	bcc.n	800daa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d116      	bne.n	800dad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2200      	movs	r2, #0
 800daa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2220      	movs	r2, #32
 800daae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2200      	movs	r2, #0
 800dab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dabe:	f043 0220 	orr.w	r2, r3, #32
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2200      	movs	r2, #0
 800daca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dace:	2301      	movs	r3, #1
 800dad0:	e020      	b.n	800db14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	0c1b      	lsrs	r3, r3, #16
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d10c      	bne.n	800daf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	695b      	ldr	r3, [r3, #20]
 800dae2:	43da      	mvns	r2, r3
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	4013      	ands	r3, r2
 800dae8:	b29b      	uxth	r3, r3
 800daea:	2b00      	cmp	r3, #0
 800daec:	bf14      	ite	ne
 800daee:	2301      	movne	r3, #1
 800daf0:	2300      	moveq	r3, #0
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	e00b      	b.n	800db0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	699b      	ldr	r3, [r3, #24]
 800dafc:	43da      	mvns	r2, r3
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	4013      	ands	r3, r2
 800db02:	b29b      	uxth	r3, r3
 800db04:	2b00      	cmp	r3, #0
 800db06:	bf14      	ite	ne
 800db08:	2301      	movne	r3, #1
 800db0a:	2300      	moveq	r3, #0
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d18d      	bne.n	800da2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800db12:	2300      	movs	r3, #0
}
 800db14:	4618      	mov	r0, r3
 800db16:	3710      	adds	r7, #16
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800db28:	e02d      	b.n	800db86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800db2a:	68f8      	ldr	r0, [r7, #12]
 800db2c:	f000 f900 	bl	800dd30 <I2C_IsAcknowledgeFailed>
 800db30:	4603      	mov	r3, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d001      	beq.n	800db3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800db36:	2301      	movs	r3, #1
 800db38:	e02d      	b.n	800db96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db40:	d021      	beq.n	800db86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db42:	f7fc fccd 	bl	800a4e0 <HAL_GetTick>
 800db46:	4602      	mov	r2, r0
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	1ad3      	subs	r3, r2, r3
 800db4c:	68ba      	ldr	r2, [r7, #8]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d302      	bcc.n	800db58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d116      	bne.n	800db86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2200      	movs	r2, #0
 800db5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2220      	movs	r2, #32
 800db62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2200      	movs	r2, #0
 800db6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db72:	f043 0220 	orr.w	r2, r3, #32
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2200      	movs	r2, #0
 800db7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800db82:	2301      	movs	r3, #1
 800db84:	e007      	b.n	800db96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	695b      	ldr	r3, [r3, #20]
 800db8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db90:	2b80      	cmp	r3, #128	; 0x80
 800db92:	d1ca      	bne.n	800db2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b084      	sub	sp, #16
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	60f8      	str	r0, [r7, #12]
 800dba6:	60b9      	str	r1, [r7, #8]
 800dba8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dbaa:	e02d      	b.n	800dc08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800dbac:	68f8      	ldr	r0, [r7, #12]
 800dbae:	f000 f8bf 	bl	800dd30 <I2C_IsAcknowledgeFailed>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d001      	beq.n	800dbbc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	e02d      	b.n	800dc18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbc2:	d021      	beq.n	800dc08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbc4:	f7fc fc8c 	bl	800a4e0 <HAL_GetTick>
 800dbc8:	4602      	mov	r2, r0
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	1ad3      	subs	r3, r2, r3
 800dbce:	68ba      	ldr	r2, [r7, #8]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d302      	bcc.n	800dbda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d116      	bne.n	800dc08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2220      	movs	r2, #32
 800dbe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2200      	movs	r2, #0
 800dbec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbf4:	f043 0220 	orr.w	r2, r3, #32
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dc04:	2301      	movs	r3, #1
 800dc06:	e007      	b.n	800dc18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	695b      	ldr	r3, [r3, #20]
 800dc0e:	f003 0304 	and.w	r3, r3, #4
 800dc12:	2b04      	cmp	r3, #4
 800dc14:	d1ca      	bne.n	800dbac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dc16:	2300      	movs	r3, #0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3710      	adds	r7, #16
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b085      	sub	sp, #20
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800dc2c:	4b13      	ldr	r3, [pc, #76]	; (800dc7c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	08db      	lsrs	r3, r3, #3
 800dc32:	4a13      	ldr	r2, [pc, #76]	; (800dc80 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800dc34:	fba2 2303 	umull	r2, r3, r2, r3
 800dc38:	0a1a      	lsrs	r2, r3, #8
 800dc3a:	4613      	mov	r3, r2
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	4413      	add	r3, r2
 800dc40:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	3b01      	subs	r3, #1
 800dc46:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d107      	bne.n	800dc5e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc52:	f043 0220 	orr.w	r2, r3, #32
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	e008      	b.n	800dc70 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dc68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc6c:	d0e9      	beq.n	800dc42 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800dc6e:	2300      	movs	r3, #0
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3714      	adds	r7, #20
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr
 800dc7c:	200000ac 	.word	0x200000ac
 800dc80:	14f8b589 	.word	0x14f8b589

0800dc84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dc90:	e042      	b.n	800dd18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	695b      	ldr	r3, [r3, #20]
 800dc98:	f003 0310 	and.w	r3, r3, #16
 800dc9c:	2b10      	cmp	r3, #16
 800dc9e:	d119      	bne.n	800dcd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f06f 0210 	mvn.w	r2, #16
 800dca8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2200      	movs	r2, #0
 800dcae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2220      	movs	r2, #32
 800dcb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2200      	movs	r2, #0
 800dccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e029      	b.n	800dd28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dcd4:	f7fc fc04 	bl	800a4e0 <HAL_GetTick>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	1ad3      	subs	r3, r2, r3
 800dcde:	68ba      	ldr	r2, [r7, #8]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d302      	bcc.n	800dcea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d116      	bne.n	800dd18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2200      	movs	r2, #0
 800dcee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2220      	movs	r2, #32
 800dcf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd04:	f043 0220 	orr.w	r2, r3, #32
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dd14:	2301      	movs	r3, #1
 800dd16:	e007      	b.n	800dd28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	695b      	ldr	r3, [r3, #20]
 800dd1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd22:	2b40      	cmp	r3, #64	; 0x40
 800dd24:	d1b5      	bne.n	800dc92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800dd26:	2300      	movs	r3, #0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3710      	adds	r7, #16
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	695b      	ldr	r3, [r3, #20]
 800dd3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd46:	d11b      	bne.n	800dd80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800dd50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2200      	movs	r2, #0
 800dd56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2220      	movs	r2, #32
 800dd5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd6c:	f043 0204 	orr.w	r2, r3, #4
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2200      	movs	r2, #0
 800dd78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	e000      	b.n	800dd82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800dd80:	2300      	movs	r3, #0
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	370c      	adds	r7, #12
 800dd86:	46bd      	mov	sp, r7
 800dd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8c:	4770      	bx	lr

0800dd8e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800dd8e:	b480      	push	{r7}
 800dd90:	b083      	sub	sp, #12
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd9a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800dd9e:	d103      	bne.n	800dda8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2201      	movs	r2, #1
 800dda4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800dda6:	e007      	b.n	800ddb8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ddb0:	d102      	bne.n	800ddb8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2208      	movs	r2, #8
 800ddb6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ddb8:	bf00      	nop
 800ddba:	370c      	adds	r7, #12
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr

0800ddc4 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d101      	bne.n	800ddda <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e03e      	b.n	800de58 <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d106      	bne.n	800ddf4 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 800ddee:	68f8      	ldr	r0, [r7, #12]
 800ddf0:	f7f7 f906 	bl	8005000 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	3304      	adds	r3, #4
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	4610      	mov	r0, r2
 800de00:	f003 fc16 	bl	8011630 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	6818      	ldr	r0, [r3, #0]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	461a      	mov	r2, r3
 800de0e:	68b9      	ldr	r1, [r7, #8]
 800de10:	f003 fc5a 	bl	80116c8 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	6818      	ldr	r0, [r3, #0]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	685b      	ldr	r3, [r3, #4]
 800de1c:	461a      	mov	r2, r3
 800de1e:	6879      	ldr	r1, [r7, #4]
 800de20:	f003 fc87 	bl	8011732 <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	2b10      	cmp	r3, #16
 800de2a:	d108      	bne.n	800de3e <HAL_NAND_Init+0x7a>
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f042 0204 	orr.w	r2, r2, #4
 800de3a:	601a      	str	r2, [r3, #0]
 800de3c:	e007      	b.n	800de4e <HAL_NAND_Init+0x8a>
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	6a1a      	ldr	r2, [r3, #32]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f042 0204 	orr.w	r2, r2, #4
 800de4c:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2201      	movs	r2, #1
 800de52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 800de56:	2300      	movs	r3, #0
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	2b10      	cmp	r3, #16
 800de6e:	d10a      	bne.n	800de86 <HAL_NAND_IRQHandler+0x26>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	f003 0301 	and.w	r3, r3, #1
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	bf0c      	ite	eq
 800de7e:	2301      	moveq	r3, #1
 800de80:	2300      	movne	r3, #0
 800de82:	b2db      	uxtb	r3, r3
 800de84:	e009      	b.n	800de9a <HAL_NAND_IRQHandler+0x3a>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de8c:	f003 0301 	and.w	r3, r3, #1
 800de90:	2b01      	cmp	r3, #1
 800de92:	bf0c      	ite	eq
 800de94:	2301      	moveq	r3, #1
 800de96:	2300      	movne	r3, #0
 800de98:	b2db      	uxtb	r3, r3
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d017      	beq.n	800dece <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f7f5 f98a 	bl	80031b8 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	2b10      	cmp	r3, #16
 800deaa:	d108      	bne.n	800debe <HAL_NAND_IRQHandler+0x5e>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	685a      	ldr	r2, [r3, #4]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f022 0201 	bic.w	r2, r2, #1
 800deba:	605a      	str	r2, [r3, #4]
 800debc:	e007      	b.n	800dece <HAL_NAND_IRQHandler+0x6e>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f022 0201 	bic.w	r2, r2, #1
 800decc:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	2b10      	cmp	r3, #16
 800ded4:	d10a      	bne.n	800deec <HAL_NAND_IRQHandler+0x8c>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	f003 0302 	and.w	r3, r3, #2
 800dee0:	2b02      	cmp	r3, #2
 800dee2:	bf0c      	ite	eq
 800dee4:	2301      	moveq	r3, #1
 800dee6:	2300      	movne	r3, #0
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	e009      	b.n	800df00 <HAL_NAND_IRQHandler+0xa0>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def2:	f003 0302 	and.w	r3, r3, #2
 800def6:	2b02      	cmp	r3, #2
 800def8:	bf0c      	ite	eq
 800defa:	2301      	moveq	r3, #1
 800defc:	2300      	movne	r3, #0
 800defe:	b2db      	uxtb	r3, r3
 800df00:	2b00      	cmp	r3, #0
 800df02:	d017      	beq.n	800df34 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f7f5 f957 	bl	80031b8 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	2b10      	cmp	r3, #16
 800df10:	d108      	bne.n	800df24 <HAL_NAND_IRQHandler+0xc4>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	685a      	ldr	r2, [r3, #4]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f022 0202 	bic.w	r2, r2, #2
 800df20:	605a      	str	r2, [r3, #4]
 800df22:	e007      	b.n	800df34 <HAL_NAND_IRQHandler+0xd4>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f022 0202 	bic.w	r2, r2, #2
 800df32:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	2b10      	cmp	r3, #16
 800df3a:	d10a      	bne.n	800df52 <HAL_NAND_IRQHandler+0xf2>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	f003 0304 	and.w	r3, r3, #4
 800df46:	2b04      	cmp	r3, #4
 800df48:	bf0c      	ite	eq
 800df4a:	2301      	moveq	r3, #1
 800df4c:	2300      	movne	r3, #0
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	e009      	b.n	800df66 <HAL_NAND_IRQHandler+0x106>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df58:	f003 0304 	and.w	r3, r3, #4
 800df5c:	2b04      	cmp	r3, #4
 800df5e:	bf0c      	ite	eq
 800df60:	2301      	moveq	r3, #1
 800df62:	2300      	movne	r3, #0
 800df64:	b2db      	uxtb	r3, r3
 800df66:	2b00      	cmp	r3, #0
 800df68:	d017      	beq.n	800df9a <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f7f5 f924 	bl	80031b8 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	685b      	ldr	r3, [r3, #4]
 800df74:	2b10      	cmp	r3, #16
 800df76:	d108      	bne.n	800df8a <HAL_NAND_IRQHandler+0x12a>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	685a      	ldr	r2, [r3, #4]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f022 0204 	bic.w	r2, r2, #4
 800df86:	605a      	str	r2, [r3, #4]
 800df88:	e007      	b.n	800df9a <HAL_NAND_IRQHandler+0x13a>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f022 0204 	bic.w	r2, r2, #4
 800df98:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	2b10      	cmp	r3, #16
 800dfa0:	d10a      	bne.n	800dfb8 <HAL_NAND_IRQHandler+0x158>
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	685b      	ldr	r3, [r3, #4]
 800dfa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfac:	2b40      	cmp	r3, #64	; 0x40
 800dfae:	bf0c      	ite	eq
 800dfb0:	2301      	moveq	r3, #1
 800dfb2:	2300      	movne	r3, #0
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	e009      	b.n	800dfcc <HAL_NAND_IRQHandler+0x16c>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfc2:	2b40      	cmp	r3, #64	; 0x40
 800dfc4:	bf0c      	ite	eq
 800dfc6:	2301      	moveq	r3, #1
 800dfc8:	2300      	movne	r3, #0
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d017      	beq.n	800e000 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f7f5 f8f1 	bl	80031b8 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	2b10      	cmp	r3, #16
 800dfdc:	d108      	bne.n	800dff0 <HAL_NAND_IRQHandler+0x190>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	685a      	ldr	r2, [r3, #4]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dfec:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 800dfee:	e007      	b.n	800e000 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dffe:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e000:	bf00      	nop
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  return hnand->State;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e016:	b2db      	uxtb	r3, r3
}
 800e018:	4618      	mov	r0, r3
 800e01a:	370c      	adds	r7, #12
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr

0800e024 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 800e024:	b480      	push	{r7}
 800e026:	b085      	sub	sp, #20
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  else
  {
    deviceaddress = NAND_DEVICE2;
  }
#else
  deviceaddress = NAND_DEVICE;
 800e02c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e030:	60fb      	str	r3, [r7, #12]
#endif

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e038:	2270      	movs	r2, #112	; 0x70
 800e03a:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	b2db      	uxtb	r3, r3
 800e042:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	f003 0301 	and.w	r3, r3, #1
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d001      	beq.n	800e052 <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 800e04e:	2301      	movs	r3, #1
 800e050:	e007      	b.n	800e062 <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d001      	beq.n	800e060 <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 800e05c:	2340      	movs	r3, #64	; 0x40
 800e05e:	e000      	b.n	800e062 <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 800e060:	2300      	movs	r3, #0
  }
}
 800e062:	4618      	mov	r0, r3
 800e064:	3714      	adds	r7, #20
 800e066:	46bd      	mov	sp, r7
 800e068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06c:	4770      	bx	lr
	...

0800e070 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b086      	sub	sp, #24
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d101      	bne.n	800e082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e07e:	2301      	movs	r3, #1
 800e080:	e267      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f003 0301 	and.w	r3, r3, #1
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d075      	beq.n	800e17a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e08e:	4b88      	ldr	r3, [pc, #544]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	f003 030c 	and.w	r3, r3, #12
 800e096:	2b04      	cmp	r3, #4
 800e098:	d00c      	beq.n	800e0b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e09a:	4b85      	ldr	r3, [pc, #532]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e09c:	689b      	ldr	r3, [r3, #8]
 800e09e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e0a2:	2b08      	cmp	r3, #8
 800e0a4:	d112      	bne.n	800e0cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e0a6:	4b82      	ldr	r3, [pc, #520]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e0ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e0b2:	d10b      	bne.n	800e0cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e0b4:	4b7e      	ldr	r3, [pc, #504]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d05b      	beq.n	800e178 <HAL_RCC_OscConfig+0x108>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d157      	bne.n	800e178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	e242      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0d4:	d106      	bne.n	800e0e4 <HAL_RCC_OscConfig+0x74>
 800e0d6:	4b76      	ldr	r3, [pc, #472]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4a75      	ldr	r2, [pc, #468]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e0dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e0e0:	6013      	str	r3, [r2, #0]
 800e0e2:	e01d      	b.n	800e120 <HAL_RCC_OscConfig+0xb0>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e0ec:	d10c      	bne.n	800e108 <HAL_RCC_OscConfig+0x98>
 800e0ee:	4b70      	ldr	r3, [pc, #448]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	4a6f      	ldr	r2, [pc, #444]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e0f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e0f8:	6013      	str	r3, [r2, #0]
 800e0fa:	4b6d      	ldr	r3, [pc, #436]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4a6c      	ldr	r2, [pc, #432]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e104:	6013      	str	r3, [r2, #0]
 800e106:	e00b      	b.n	800e120 <HAL_RCC_OscConfig+0xb0>
 800e108:	4b69      	ldr	r3, [pc, #420]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4a68      	ldr	r2, [pc, #416]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e10e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e112:	6013      	str	r3, [r2, #0]
 800e114:	4b66      	ldr	r3, [pc, #408]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4a65      	ldr	r2, [pc, #404]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e11a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e11e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d013      	beq.n	800e150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e128:	f7fc f9da 	bl	800a4e0 <HAL_GetTick>
 800e12c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e12e:	e008      	b.n	800e142 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e130:	f7fc f9d6 	bl	800a4e0 <HAL_GetTick>
 800e134:	4602      	mov	r2, r0
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	1ad3      	subs	r3, r2, r3
 800e13a:	2b64      	cmp	r3, #100	; 0x64
 800e13c:	d901      	bls.n	800e142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e13e:	2303      	movs	r3, #3
 800e140:	e207      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e142:	4b5b      	ldr	r3, [pc, #364]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d0f0      	beq.n	800e130 <HAL_RCC_OscConfig+0xc0>
 800e14e:	e014      	b.n	800e17a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e150:	f7fc f9c6 	bl	800a4e0 <HAL_GetTick>
 800e154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e156:	e008      	b.n	800e16a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e158:	f7fc f9c2 	bl	800a4e0 <HAL_GetTick>
 800e15c:	4602      	mov	r2, r0
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	2b64      	cmp	r3, #100	; 0x64
 800e164:	d901      	bls.n	800e16a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e166:	2303      	movs	r3, #3
 800e168:	e1f3      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e16a:	4b51      	ldr	r3, [pc, #324]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e172:	2b00      	cmp	r3, #0
 800e174:	d1f0      	bne.n	800e158 <HAL_RCC_OscConfig+0xe8>
 800e176:	e000      	b.n	800e17a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f003 0302 	and.w	r3, r3, #2
 800e182:	2b00      	cmp	r3, #0
 800e184:	d063      	beq.n	800e24e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e186:	4b4a      	ldr	r3, [pc, #296]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e188:	689b      	ldr	r3, [r3, #8]
 800e18a:	f003 030c 	and.w	r3, r3, #12
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d00b      	beq.n	800e1aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e192:	4b47      	ldr	r3, [pc, #284]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e19a:	2b08      	cmp	r3, #8
 800e19c:	d11c      	bne.n	800e1d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e19e:	4b44      	ldr	r3, [pc, #272]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d116      	bne.n	800e1d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e1aa:	4b41      	ldr	r3, [pc, #260]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f003 0302 	and.w	r3, r3, #2
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d005      	beq.n	800e1c2 <HAL_RCC_OscConfig+0x152>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	68db      	ldr	r3, [r3, #12]
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d001      	beq.n	800e1c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e1c7      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e1c2:	4b3b      	ldr	r3, [pc, #236]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	691b      	ldr	r3, [r3, #16]
 800e1ce:	00db      	lsls	r3, r3, #3
 800e1d0:	4937      	ldr	r1, [pc, #220]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e1d6:	e03a      	b.n	800e24e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d020      	beq.n	800e222 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e1e0:	4b34      	ldr	r3, [pc, #208]	; (800e2b4 <HAL_RCC_OscConfig+0x244>)
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1e6:	f7fc f97b 	bl	800a4e0 <HAL_GetTick>
 800e1ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e1ec:	e008      	b.n	800e200 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e1ee:	f7fc f977 	bl	800a4e0 <HAL_GetTick>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	1ad3      	subs	r3, r2, r3
 800e1f8:	2b02      	cmp	r3, #2
 800e1fa:	d901      	bls.n	800e200 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e1fc:	2303      	movs	r3, #3
 800e1fe:	e1a8      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e200:	4b2b      	ldr	r3, [pc, #172]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f003 0302 	and.w	r3, r3, #2
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d0f0      	beq.n	800e1ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e20c:	4b28      	ldr	r3, [pc, #160]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	691b      	ldr	r3, [r3, #16]
 800e218:	00db      	lsls	r3, r3, #3
 800e21a:	4925      	ldr	r1, [pc, #148]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e21c:	4313      	orrs	r3, r2
 800e21e:	600b      	str	r3, [r1, #0]
 800e220:	e015      	b.n	800e24e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e222:	4b24      	ldr	r3, [pc, #144]	; (800e2b4 <HAL_RCC_OscConfig+0x244>)
 800e224:	2200      	movs	r2, #0
 800e226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e228:	f7fc f95a 	bl	800a4e0 <HAL_GetTick>
 800e22c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e22e:	e008      	b.n	800e242 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e230:	f7fc f956 	bl	800a4e0 <HAL_GetTick>
 800e234:	4602      	mov	r2, r0
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	1ad3      	subs	r3, r2, r3
 800e23a:	2b02      	cmp	r3, #2
 800e23c:	d901      	bls.n	800e242 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e23e:	2303      	movs	r3, #3
 800e240:	e187      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e242:	4b1b      	ldr	r3, [pc, #108]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f003 0302 	and.w	r3, r3, #2
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d1f0      	bne.n	800e230 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f003 0308 	and.w	r3, r3, #8
 800e256:	2b00      	cmp	r3, #0
 800e258:	d036      	beq.n	800e2c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	695b      	ldr	r3, [r3, #20]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d016      	beq.n	800e290 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e262:	4b15      	ldr	r3, [pc, #84]	; (800e2b8 <HAL_RCC_OscConfig+0x248>)
 800e264:	2201      	movs	r2, #1
 800e266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e268:	f7fc f93a 	bl	800a4e0 <HAL_GetTick>
 800e26c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e26e:	e008      	b.n	800e282 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e270:	f7fc f936 	bl	800a4e0 <HAL_GetTick>
 800e274:	4602      	mov	r2, r0
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	1ad3      	subs	r3, r2, r3
 800e27a:	2b02      	cmp	r3, #2
 800e27c:	d901      	bls.n	800e282 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e27e:	2303      	movs	r3, #3
 800e280:	e167      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e282:	4b0b      	ldr	r3, [pc, #44]	; (800e2b0 <HAL_RCC_OscConfig+0x240>)
 800e284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e286:	f003 0302 	and.w	r3, r3, #2
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d0f0      	beq.n	800e270 <HAL_RCC_OscConfig+0x200>
 800e28e:	e01b      	b.n	800e2c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e290:	4b09      	ldr	r3, [pc, #36]	; (800e2b8 <HAL_RCC_OscConfig+0x248>)
 800e292:	2200      	movs	r2, #0
 800e294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e296:	f7fc f923 	bl	800a4e0 <HAL_GetTick>
 800e29a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e29c:	e00e      	b.n	800e2bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e29e:	f7fc f91f 	bl	800a4e0 <HAL_GetTick>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	1ad3      	subs	r3, r2, r3
 800e2a8:	2b02      	cmp	r3, #2
 800e2aa:	d907      	bls.n	800e2bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e2ac:	2303      	movs	r3, #3
 800e2ae:	e150      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
 800e2b0:	40023800 	.word	0x40023800
 800e2b4:	42470000 	.word	0x42470000
 800e2b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e2bc:	4b88      	ldr	r3, [pc, #544]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e2be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2c0:	f003 0302 	and.w	r3, r3, #2
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d1ea      	bne.n	800e29e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f003 0304 	and.w	r3, r3, #4
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	f000 8097 	beq.w	800e404 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e2da:	4b81      	ldr	r3, [pc, #516]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d10f      	bne.n	800e306 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	60bb      	str	r3, [r7, #8]
 800e2ea:	4b7d      	ldr	r3, [pc, #500]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ee:	4a7c      	ldr	r2, [pc, #496]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e2f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2f4:	6413      	str	r3, [r2, #64]	; 0x40
 800e2f6:	4b7a      	ldr	r3, [pc, #488]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e2fe:	60bb      	str	r3, [r7, #8]
 800e300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e302:	2301      	movs	r3, #1
 800e304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e306:	4b77      	ldr	r3, [pc, #476]	; (800e4e4 <HAL_RCC_OscConfig+0x474>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d118      	bne.n	800e344 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e312:	4b74      	ldr	r3, [pc, #464]	; (800e4e4 <HAL_RCC_OscConfig+0x474>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	4a73      	ldr	r2, [pc, #460]	; (800e4e4 <HAL_RCC_OscConfig+0x474>)
 800e318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e31c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e31e:	f7fc f8df 	bl	800a4e0 <HAL_GetTick>
 800e322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e324:	e008      	b.n	800e338 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e326:	f7fc f8db 	bl	800a4e0 <HAL_GetTick>
 800e32a:	4602      	mov	r2, r0
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	2b02      	cmp	r3, #2
 800e332:	d901      	bls.n	800e338 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800e334:	2303      	movs	r3, #3
 800e336:	e10c      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e338:	4b6a      	ldr	r3, [pc, #424]	; (800e4e4 <HAL_RCC_OscConfig+0x474>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e340:	2b00      	cmp	r3, #0
 800e342:	d0f0      	beq.n	800e326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d106      	bne.n	800e35a <HAL_RCC_OscConfig+0x2ea>
 800e34c:	4b64      	ldr	r3, [pc, #400]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e34e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e350:	4a63      	ldr	r2, [pc, #396]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e352:	f043 0301 	orr.w	r3, r3, #1
 800e356:	6713      	str	r3, [r2, #112]	; 0x70
 800e358:	e01c      	b.n	800e394 <HAL_RCC_OscConfig+0x324>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	689b      	ldr	r3, [r3, #8]
 800e35e:	2b05      	cmp	r3, #5
 800e360:	d10c      	bne.n	800e37c <HAL_RCC_OscConfig+0x30c>
 800e362:	4b5f      	ldr	r3, [pc, #380]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e366:	4a5e      	ldr	r2, [pc, #376]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e368:	f043 0304 	orr.w	r3, r3, #4
 800e36c:	6713      	str	r3, [r2, #112]	; 0x70
 800e36e:	4b5c      	ldr	r3, [pc, #368]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e372:	4a5b      	ldr	r2, [pc, #364]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e374:	f043 0301 	orr.w	r3, r3, #1
 800e378:	6713      	str	r3, [r2, #112]	; 0x70
 800e37a:	e00b      	b.n	800e394 <HAL_RCC_OscConfig+0x324>
 800e37c:	4b58      	ldr	r3, [pc, #352]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e37e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e380:	4a57      	ldr	r2, [pc, #348]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e382:	f023 0301 	bic.w	r3, r3, #1
 800e386:	6713      	str	r3, [r2, #112]	; 0x70
 800e388:	4b55      	ldr	r3, [pc, #340]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e38a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e38c:	4a54      	ldr	r2, [pc, #336]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e38e:	f023 0304 	bic.w	r3, r3, #4
 800e392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	689b      	ldr	r3, [r3, #8]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d015      	beq.n	800e3c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e39c:	f7fc f8a0 	bl	800a4e0 <HAL_GetTick>
 800e3a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e3a2:	e00a      	b.n	800e3ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e3a4:	f7fc f89c 	bl	800a4e0 <HAL_GetTick>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	1ad3      	subs	r3, r2, r3
 800e3ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d901      	bls.n	800e3ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800e3b6:	2303      	movs	r3, #3
 800e3b8:	e0cb      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e3ba:	4b49      	ldr	r3, [pc, #292]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3be:	f003 0302 	and.w	r3, r3, #2
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d0ee      	beq.n	800e3a4 <HAL_RCC_OscConfig+0x334>
 800e3c6:	e014      	b.n	800e3f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e3c8:	f7fc f88a 	bl	800a4e0 <HAL_GetTick>
 800e3cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e3ce:	e00a      	b.n	800e3e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e3d0:	f7fc f886 	bl	800a4e0 <HAL_GetTick>
 800e3d4:	4602      	mov	r2, r0
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	1ad3      	subs	r3, r2, r3
 800e3da:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d901      	bls.n	800e3e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800e3e2:	2303      	movs	r3, #3
 800e3e4:	e0b5      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e3e6:	4b3e      	ldr	r3, [pc, #248]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e3e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3ea:	f003 0302 	and.w	r3, r3, #2
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d1ee      	bne.n	800e3d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e3f2:	7dfb      	ldrb	r3, [r7, #23]
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	d105      	bne.n	800e404 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e3f8:	4b39      	ldr	r3, [pc, #228]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e3fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3fc:	4a38      	ldr	r2, [pc, #224]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e3fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e402:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	699b      	ldr	r3, [r3, #24]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	f000 80a1 	beq.w	800e550 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e40e:	4b34      	ldr	r3, [pc, #208]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e410:	689b      	ldr	r3, [r3, #8]
 800e412:	f003 030c 	and.w	r3, r3, #12
 800e416:	2b08      	cmp	r3, #8
 800e418:	d05c      	beq.n	800e4d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	699b      	ldr	r3, [r3, #24]
 800e41e:	2b02      	cmp	r3, #2
 800e420:	d141      	bne.n	800e4a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e422:	4b31      	ldr	r3, [pc, #196]	; (800e4e8 <HAL_RCC_OscConfig+0x478>)
 800e424:	2200      	movs	r2, #0
 800e426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e428:	f7fc f85a 	bl	800a4e0 <HAL_GetTick>
 800e42c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e42e:	e008      	b.n	800e442 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e430:	f7fc f856 	bl	800a4e0 <HAL_GetTick>
 800e434:	4602      	mov	r2, r0
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	1ad3      	subs	r3, r2, r3
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	d901      	bls.n	800e442 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800e43e:	2303      	movs	r3, #3
 800e440:	e087      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e442:	4b27      	ldr	r3, [pc, #156]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d1f0      	bne.n	800e430 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	69da      	ldr	r2, [r3, #28]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6a1b      	ldr	r3, [r3, #32]
 800e456:	431a      	orrs	r2, r3
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e45c:	019b      	lsls	r3, r3, #6
 800e45e:	431a      	orrs	r2, r3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e464:	085b      	lsrs	r3, r3, #1
 800e466:	3b01      	subs	r3, #1
 800e468:	041b      	lsls	r3, r3, #16
 800e46a:	431a      	orrs	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e470:	061b      	lsls	r3, r3, #24
 800e472:	491b      	ldr	r1, [pc, #108]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e474:	4313      	orrs	r3, r2
 800e476:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e478:	4b1b      	ldr	r3, [pc, #108]	; (800e4e8 <HAL_RCC_OscConfig+0x478>)
 800e47a:	2201      	movs	r2, #1
 800e47c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e47e:	f7fc f82f 	bl	800a4e0 <HAL_GetTick>
 800e482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e484:	e008      	b.n	800e498 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e486:	f7fc f82b 	bl	800a4e0 <HAL_GetTick>
 800e48a:	4602      	mov	r2, r0
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	1ad3      	subs	r3, r2, r3
 800e490:	2b02      	cmp	r3, #2
 800e492:	d901      	bls.n	800e498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e494:	2303      	movs	r3, #3
 800e496:	e05c      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e498:	4b11      	ldr	r3, [pc, #68]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d0f0      	beq.n	800e486 <HAL_RCC_OscConfig+0x416>
 800e4a4:	e054      	b.n	800e550 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e4a6:	4b10      	ldr	r3, [pc, #64]	; (800e4e8 <HAL_RCC_OscConfig+0x478>)
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e4ac:	f7fc f818 	bl	800a4e0 <HAL_GetTick>
 800e4b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e4b2:	e008      	b.n	800e4c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e4b4:	f7fc f814 	bl	800a4e0 <HAL_GetTick>
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	1ad3      	subs	r3, r2, r3
 800e4be:	2b02      	cmp	r3, #2
 800e4c0:	d901      	bls.n	800e4c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800e4c2:	2303      	movs	r3, #3
 800e4c4:	e045      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e4c6:	4b06      	ldr	r3, [pc, #24]	; (800e4e0 <HAL_RCC_OscConfig+0x470>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1f0      	bne.n	800e4b4 <HAL_RCC_OscConfig+0x444>
 800e4d2:	e03d      	b.n	800e550 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	699b      	ldr	r3, [r3, #24]
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d107      	bne.n	800e4ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	e038      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
 800e4e0:	40023800 	.word	0x40023800
 800e4e4:	40007000 	.word	0x40007000
 800e4e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e4ec:	4b1b      	ldr	r3, [pc, #108]	; (800e55c <HAL_RCC_OscConfig+0x4ec>)
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	699b      	ldr	r3, [r3, #24]
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	d028      	beq.n	800e54c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e504:	429a      	cmp	r2, r3
 800e506:	d121      	bne.n	800e54c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e512:	429a      	cmp	r2, r3
 800e514:	d11a      	bne.n	800e54c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e516:	68fa      	ldr	r2, [r7, #12]
 800e518:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e51c:	4013      	ands	r3, r2
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e524:	4293      	cmp	r3, r2
 800e526:	d111      	bne.n	800e54c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e532:	085b      	lsrs	r3, r3, #1
 800e534:	3b01      	subs	r3, #1
 800e536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e538:	429a      	cmp	r2, r3
 800e53a:	d107      	bne.n	800e54c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e548:	429a      	cmp	r2, r3
 800e54a:	d001      	beq.n	800e550 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800e54c:	2301      	movs	r3, #1
 800e54e:	e000      	b.n	800e552 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800e550:	2300      	movs	r3, #0
}
 800e552:	4618      	mov	r0, r3
 800e554:	3718      	adds	r7, #24
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
 800e55a:	bf00      	nop
 800e55c:	40023800 	.word	0x40023800

0800e560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b084      	sub	sp, #16
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d101      	bne.n	800e574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e570:	2301      	movs	r3, #1
 800e572:	e0cc      	b.n	800e70e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e574:	4b68      	ldr	r3, [pc, #416]	; (800e718 <HAL_RCC_ClockConfig+0x1b8>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f003 0307 	and.w	r3, r3, #7
 800e57c:	683a      	ldr	r2, [r7, #0]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d90c      	bls.n	800e59c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e582:	4b65      	ldr	r3, [pc, #404]	; (800e718 <HAL_RCC_ClockConfig+0x1b8>)
 800e584:	683a      	ldr	r2, [r7, #0]
 800e586:	b2d2      	uxtb	r2, r2
 800e588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e58a:	4b63      	ldr	r3, [pc, #396]	; (800e718 <HAL_RCC_ClockConfig+0x1b8>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f003 0307 	and.w	r3, r3, #7
 800e592:	683a      	ldr	r2, [r7, #0]
 800e594:	429a      	cmp	r2, r3
 800e596:	d001      	beq.n	800e59c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e598:	2301      	movs	r3, #1
 800e59a:	e0b8      	b.n	800e70e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f003 0302 	and.w	r3, r3, #2
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d020      	beq.n	800e5ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f003 0304 	and.w	r3, r3, #4
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d005      	beq.n	800e5c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e5b4:	4b59      	ldr	r3, [pc, #356]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e5b6:	689b      	ldr	r3, [r3, #8]
 800e5b8:	4a58      	ldr	r2, [pc, #352]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e5ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e5be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f003 0308 	and.w	r3, r3, #8
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d005      	beq.n	800e5d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e5cc:	4b53      	ldr	r3, [pc, #332]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e5ce:	689b      	ldr	r3, [r3, #8]
 800e5d0:	4a52      	ldr	r2, [pc, #328]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e5d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e5d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e5d8:	4b50      	ldr	r3, [pc, #320]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e5da:	689b      	ldr	r3, [r3, #8]
 800e5dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	689b      	ldr	r3, [r3, #8]
 800e5e4:	494d      	ldr	r1, [pc, #308]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f003 0301 	and.w	r3, r3, #1
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d044      	beq.n	800e680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d107      	bne.n	800e60e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e5fe:	4b47      	ldr	r3, [pc, #284]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e606:	2b00      	cmp	r3, #0
 800e608:	d119      	bne.n	800e63e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e60a:	2301      	movs	r3, #1
 800e60c:	e07f      	b.n	800e70e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	685b      	ldr	r3, [r3, #4]
 800e612:	2b02      	cmp	r3, #2
 800e614:	d003      	beq.n	800e61e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e61a:	2b03      	cmp	r3, #3
 800e61c:	d107      	bne.n	800e62e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e61e:	4b3f      	ldr	r3, [pc, #252]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e626:	2b00      	cmp	r3, #0
 800e628:	d109      	bne.n	800e63e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e62a:	2301      	movs	r3, #1
 800e62c:	e06f      	b.n	800e70e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e62e:	4b3b      	ldr	r3, [pc, #236]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f003 0302 	and.w	r3, r3, #2
 800e636:	2b00      	cmp	r3, #0
 800e638:	d101      	bne.n	800e63e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e63a:	2301      	movs	r3, #1
 800e63c:	e067      	b.n	800e70e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e63e:	4b37      	ldr	r3, [pc, #220]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e640:	689b      	ldr	r3, [r3, #8]
 800e642:	f023 0203 	bic.w	r2, r3, #3
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	4934      	ldr	r1, [pc, #208]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e64c:	4313      	orrs	r3, r2
 800e64e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e650:	f7fb ff46 	bl	800a4e0 <HAL_GetTick>
 800e654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e656:	e00a      	b.n	800e66e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e658:	f7fb ff42 	bl	800a4e0 <HAL_GetTick>
 800e65c:	4602      	mov	r2, r0
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	1ad3      	subs	r3, r2, r3
 800e662:	f241 3288 	movw	r2, #5000	; 0x1388
 800e666:	4293      	cmp	r3, r2
 800e668:	d901      	bls.n	800e66e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e66a:	2303      	movs	r3, #3
 800e66c:	e04f      	b.n	800e70e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e66e:	4b2b      	ldr	r3, [pc, #172]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e670:	689b      	ldr	r3, [r3, #8]
 800e672:	f003 020c 	and.w	r2, r3, #12
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	009b      	lsls	r3, r3, #2
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d1eb      	bne.n	800e658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e680:	4b25      	ldr	r3, [pc, #148]	; (800e718 <HAL_RCC_ClockConfig+0x1b8>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f003 0307 	and.w	r3, r3, #7
 800e688:	683a      	ldr	r2, [r7, #0]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d20c      	bcs.n	800e6a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e68e:	4b22      	ldr	r3, [pc, #136]	; (800e718 <HAL_RCC_ClockConfig+0x1b8>)
 800e690:	683a      	ldr	r2, [r7, #0]
 800e692:	b2d2      	uxtb	r2, r2
 800e694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e696:	4b20      	ldr	r3, [pc, #128]	; (800e718 <HAL_RCC_ClockConfig+0x1b8>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f003 0307 	and.w	r3, r3, #7
 800e69e:	683a      	ldr	r2, [r7, #0]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d001      	beq.n	800e6a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	e032      	b.n	800e70e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f003 0304 	and.w	r3, r3, #4
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d008      	beq.n	800e6c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e6b4:	4b19      	ldr	r3, [pc, #100]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e6b6:	689b      	ldr	r3, [r3, #8]
 800e6b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	68db      	ldr	r3, [r3, #12]
 800e6c0:	4916      	ldr	r1, [pc, #88]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f003 0308 	and.w	r3, r3, #8
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d009      	beq.n	800e6e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e6d2:	4b12      	ldr	r3, [pc, #72]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e6d4:	689b      	ldr	r3, [r3, #8]
 800e6d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	691b      	ldr	r3, [r3, #16]
 800e6de:	00db      	lsls	r3, r3, #3
 800e6e0:	490e      	ldr	r1, [pc, #56]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e6e6:	f000 f821 	bl	800e72c <HAL_RCC_GetSysClockFreq>
 800e6ea:	4602      	mov	r2, r0
 800e6ec:	4b0b      	ldr	r3, [pc, #44]	; (800e71c <HAL_RCC_ClockConfig+0x1bc>)
 800e6ee:	689b      	ldr	r3, [r3, #8]
 800e6f0:	091b      	lsrs	r3, r3, #4
 800e6f2:	f003 030f 	and.w	r3, r3, #15
 800e6f6:	490a      	ldr	r1, [pc, #40]	; (800e720 <HAL_RCC_ClockConfig+0x1c0>)
 800e6f8:	5ccb      	ldrb	r3, [r1, r3]
 800e6fa:	fa22 f303 	lsr.w	r3, r2, r3
 800e6fe:	4a09      	ldr	r2, [pc, #36]	; (800e724 <HAL_RCC_ClockConfig+0x1c4>)
 800e700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e702:	4b09      	ldr	r3, [pc, #36]	; (800e728 <HAL_RCC_ClockConfig+0x1c8>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4618      	mov	r0, r3
 800e708:	f7f6 fc84 	bl	8005014 <HAL_InitTick>

  return HAL_OK;
 800e70c:	2300      	movs	r3, #0
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3710      	adds	r7, #16
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	40023c00 	.word	0x40023c00
 800e71c:	40023800 	.word	0x40023800
 800e720:	08019e58 	.word	0x08019e58
 800e724:	200000ac 	.word	0x200000ac
 800e728:	200000b0 	.word	0x200000b0

0800e72c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e72c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e730:	b094      	sub	sp, #80	; 0x50
 800e732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e734:	2300      	movs	r3, #0
 800e736:	647b      	str	r3, [r7, #68]	; 0x44
 800e738:	2300      	movs	r3, #0
 800e73a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e73c:	2300      	movs	r3, #0
 800e73e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800e740:	2300      	movs	r3, #0
 800e742:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e744:	4b79      	ldr	r3, [pc, #484]	; (800e92c <HAL_RCC_GetSysClockFreq+0x200>)
 800e746:	689b      	ldr	r3, [r3, #8]
 800e748:	f003 030c 	and.w	r3, r3, #12
 800e74c:	2b08      	cmp	r3, #8
 800e74e:	d00d      	beq.n	800e76c <HAL_RCC_GetSysClockFreq+0x40>
 800e750:	2b08      	cmp	r3, #8
 800e752:	f200 80e1 	bhi.w	800e918 <HAL_RCC_GetSysClockFreq+0x1ec>
 800e756:	2b00      	cmp	r3, #0
 800e758:	d002      	beq.n	800e760 <HAL_RCC_GetSysClockFreq+0x34>
 800e75a:	2b04      	cmp	r3, #4
 800e75c:	d003      	beq.n	800e766 <HAL_RCC_GetSysClockFreq+0x3a>
 800e75e:	e0db      	b.n	800e918 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e760:	4b73      	ldr	r3, [pc, #460]	; (800e930 <HAL_RCC_GetSysClockFreq+0x204>)
 800e762:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800e764:	e0db      	b.n	800e91e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e766:	4b73      	ldr	r3, [pc, #460]	; (800e934 <HAL_RCC_GetSysClockFreq+0x208>)
 800e768:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e76a:	e0d8      	b.n	800e91e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e76c:	4b6f      	ldr	r3, [pc, #444]	; (800e92c <HAL_RCC_GetSysClockFreq+0x200>)
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e774:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e776:	4b6d      	ldr	r3, [pc, #436]	; (800e92c <HAL_RCC_GetSysClockFreq+0x200>)
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d063      	beq.n	800e84a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e782:	4b6a      	ldr	r3, [pc, #424]	; (800e92c <HAL_RCC_GetSysClockFreq+0x200>)
 800e784:	685b      	ldr	r3, [r3, #4]
 800e786:	099b      	lsrs	r3, r3, #6
 800e788:	2200      	movs	r2, #0
 800e78a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e78c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e794:	633b      	str	r3, [r7, #48]	; 0x30
 800e796:	2300      	movs	r3, #0
 800e798:	637b      	str	r3, [r7, #52]	; 0x34
 800e79a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e79e:	4622      	mov	r2, r4
 800e7a0:	462b      	mov	r3, r5
 800e7a2:	f04f 0000 	mov.w	r0, #0
 800e7a6:	f04f 0100 	mov.w	r1, #0
 800e7aa:	0159      	lsls	r1, r3, #5
 800e7ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e7b0:	0150      	lsls	r0, r2, #5
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	4621      	mov	r1, r4
 800e7b8:	1a51      	subs	r1, r2, r1
 800e7ba:	6139      	str	r1, [r7, #16]
 800e7bc:	4629      	mov	r1, r5
 800e7be:	eb63 0301 	sbc.w	r3, r3, r1
 800e7c2:	617b      	str	r3, [r7, #20]
 800e7c4:	f04f 0200 	mov.w	r2, #0
 800e7c8:	f04f 0300 	mov.w	r3, #0
 800e7cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e7d0:	4659      	mov	r1, fp
 800e7d2:	018b      	lsls	r3, r1, #6
 800e7d4:	4651      	mov	r1, sl
 800e7d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e7da:	4651      	mov	r1, sl
 800e7dc:	018a      	lsls	r2, r1, #6
 800e7de:	4651      	mov	r1, sl
 800e7e0:	ebb2 0801 	subs.w	r8, r2, r1
 800e7e4:	4659      	mov	r1, fp
 800e7e6:	eb63 0901 	sbc.w	r9, r3, r1
 800e7ea:	f04f 0200 	mov.w	r2, #0
 800e7ee:	f04f 0300 	mov.w	r3, #0
 800e7f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e7f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e7fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e7fe:	4690      	mov	r8, r2
 800e800:	4699      	mov	r9, r3
 800e802:	4623      	mov	r3, r4
 800e804:	eb18 0303 	adds.w	r3, r8, r3
 800e808:	60bb      	str	r3, [r7, #8]
 800e80a:	462b      	mov	r3, r5
 800e80c:	eb49 0303 	adc.w	r3, r9, r3
 800e810:	60fb      	str	r3, [r7, #12]
 800e812:	f04f 0200 	mov.w	r2, #0
 800e816:	f04f 0300 	mov.w	r3, #0
 800e81a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e81e:	4629      	mov	r1, r5
 800e820:	024b      	lsls	r3, r1, #9
 800e822:	4621      	mov	r1, r4
 800e824:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e828:	4621      	mov	r1, r4
 800e82a:	024a      	lsls	r2, r1, #9
 800e82c:	4610      	mov	r0, r2
 800e82e:	4619      	mov	r1, r3
 800e830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e832:	2200      	movs	r2, #0
 800e834:	62bb      	str	r3, [r7, #40]	; 0x28
 800e836:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e838:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e83c:	f7f2 f876 	bl	800092c <__aeabi_uldivmod>
 800e840:	4602      	mov	r2, r0
 800e842:	460b      	mov	r3, r1
 800e844:	4613      	mov	r3, r2
 800e846:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e848:	e058      	b.n	800e8fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e84a:	4b38      	ldr	r3, [pc, #224]	; (800e92c <HAL_RCC_GetSysClockFreq+0x200>)
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	099b      	lsrs	r3, r3, #6
 800e850:	2200      	movs	r2, #0
 800e852:	4618      	mov	r0, r3
 800e854:	4611      	mov	r1, r2
 800e856:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e85a:	623b      	str	r3, [r7, #32]
 800e85c:	2300      	movs	r3, #0
 800e85e:	627b      	str	r3, [r7, #36]	; 0x24
 800e860:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e864:	4642      	mov	r2, r8
 800e866:	464b      	mov	r3, r9
 800e868:	f04f 0000 	mov.w	r0, #0
 800e86c:	f04f 0100 	mov.w	r1, #0
 800e870:	0159      	lsls	r1, r3, #5
 800e872:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e876:	0150      	lsls	r0, r2, #5
 800e878:	4602      	mov	r2, r0
 800e87a:	460b      	mov	r3, r1
 800e87c:	4641      	mov	r1, r8
 800e87e:	ebb2 0a01 	subs.w	sl, r2, r1
 800e882:	4649      	mov	r1, r9
 800e884:	eb63 0b01 	sbc.w	fp, r3, r1
 800e888:	f04f 0200 	mov.w	r2, #0
 800e88c:	f04f 0300 	mov.w	r3, #0
 800e890:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800e894:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800e898:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800e89c:	ebb2 040a 	subs.w	r4, r2, sl
 800e8a0:	eb63 050b 	sbc.w	r5, r3, fp
 800e8a4:	f04f 0200 	mov.w	r2, #0
 800e8a8:	f04f 0300 	mov.w	r3, #0
 800e8ac:	00eb      	lsls	r3, r5, #3
 800e8ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e8b2:	00e2      	lsls	r2, r4, #3
 800e8b4:	4614      	mov	r4, r2
 800e8b6:	461d      	mov	r5, r3
 800e8b8:	4643      	mov	r3, r8
 800e8ba:	18e3      	adds	r3, r4, r3
 800e8bc:	603b      	str	r3, [r7, #0]
 800e8be:	464b      	mov	r3, r9
 800e8c0:	eb45 0303 	adc.w	r3, r5, r3
 800e8c4:	607b      	str	r3, [r7, #4]
 800e8c6:	f04f 0200 	mov.w	r2, #0
 800e8ca:	f04f 0300 	mov.w	r3, #0
 800e8ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e8d2:	4629      	mov	r1, r5
 800e8d4:	028b      	lsls	r3, r1, #10
 800e8d6:	4621      	mov	r1, r4
 800e8d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e8dc:	4621      	mov	r1, r4
 800e8de:	028a      	lsls	r2, r1, #10
 800e8e0:	4610      	mov	r0, r2
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	61bb      	str	r3, [r7, #24]
 800e8ea:	61fa      	str	r2, [r7, #28]
 800e8ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e8f0:	f7f2 f81c 	bl	800092c <__aeabi_uldivmod>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e8fc:	4b0b      	ldr	r3, [pc, #44]	; (800e92c <HAL_RCC_GetSysClockFreq+0x200>)
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	0c1b      	lsrs	r3, r3, #16
 800e902:	f003 0303 	and.w	r3, r3, #3
 800e906:	3301      	adds	r3, #1
 800e908:	005b      	lsls	r3, r3, #1
 800e90a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800e90c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e90e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e910:	fbb2 f3f3 	udiv	r3, r2, r3
 800e914:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e916:	e002      	b.n	800e91e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e918:	4b05      	ldr	r3, [pc, #20]	; (800e930 <HAL_RCC_GetSysClockFreq+0x204>)
 800e91a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e91c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e91e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800e920:	4618      	mov	r0, r3
 800e922:	3750      	adds	r7, #80	; 0x50
 800e924:	46bd      	mov	sp, r7
 800e926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e92a:	bf00      	nop
 800e92c:	40023800 	.word	0x40023800
 800e930:	00f42400 	.word	0x00f42400
 800e934:	007a1200 	.word	0x007a1200

0800e938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e938:	b480      	push	{r7}
 800e93a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e93c:	4b03      	ldr	r3, [pc, #12]	; (800e94c <HAL_RCC_GetHCLKFreq+0x14>)
 800e93e:	681b      	ldr	r3, [r3, #0]
}
 800e940:	4618      	mov	r0, r3
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr
 800e94a:	bf00      	nop
 800e94c:	200000ac 	.word	0x200000ac

0800e950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e954:	f7ff fff0 	bl	800e938 <HAL_RCC_GetHCLKFreq>
 800e958:	4602      	mov	r2, r0
 800e95a:	4b05      	ldr	r3, [pc, #20]	; (800e970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	0a9b      	lsrs	r3, r3, #10
 800e960:	f003 0307 	and.w	r3, r3, #7
 800e964:	4903      	ldr	r1, [pc, #12]	; (800e974 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e966:	5ccb      	ldrb	r3, [r1, r3]
 800e968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	40023800 	.word	0x40023800
 800e974:	08019e68 	.word	0x08019e68

0800e978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e97c:	f7ff ffdc 	bl	800e938 <HAL_RCC_GetHCLKFreq>
 800e980:	4602      	mov	r2, r0
 800e982:	4b05      	ldr	r3, [pc, #20]	; (800e998 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e984:	689b      	ldr	r3, [r3, #8]
 800e986:	0b5b      	lsrs	r3, r3, #13
 800e988:	f003 0307 	and.w	r3, r3, #7
 800e98c:	4903      	ldr	r1, [pc, #12]	; (800e99c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e98e:	5ccb      	ldrb	r3, [r1, r3]
 800e990:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e994:	4618      	mov	r0, r3
 800e996:	bd80      	pop	{r7, pc}
 800e998:	40023800 	.word	0x40023800
 800e99c:	08019e68 	.word	0x08019e68

0800e9a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b083      	sub	sp, #12
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	220f      	movs	r2, #15
 800e9ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e9b0:	4b12      	ldr	r3, [pc, #72]	; (800e9fc <HAL_RCC_GetClockConfig+0x5c>)
 800e9b2:	689b      	ldr	r3, [r3, #8]
 800e9b4:	f003 0203 	and.w	r2, r3, #3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e9bc:	4b0f      	ldr	r3, [pc, #60]	; (800e9fc <HAL_RCC_GetClockConfig+0x5c>)
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e9c8:	4b0c      	ldr	r3, [pc, #48]	; (800e9fc <HAL_RCC_GetClockConfig+0x5c>)
 800e9ca:	689b      	ldr	r3, [r3, #8]
 800e9cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e9d4:	4b09      	ldr	r3, [pc, #36]	; (800e9fc <HAL_RCC_GetClockConfig+0x5c>)
 800e9d6:	689b      	ldr	r3, [r3, #8]
 800e9d8:	08db      	lsrs	r3, r3, #3
 800e9da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e9e2:	4b07      	ldr	r3, [pc, #28]	; (800ea00 <HAL_RCC_GetClockConfig+0x60>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f003 0207 	and.w	r2, r3, #7
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	601a      	str	r2, [r3, #0]
}
 800e9ee:	bf00      	nop
 800e9f0:	370c      	adds	r7, #12
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop
 800e9fc:	40023800 	.word	0x40023800
 800ea00:	40023c00 	.word	0x40023c00

0800ea04 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b086      	sub	sp, #24
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800ea10:	2300      	movs	r3, #0
 800ea12:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f003 0301 	and.w	r3, r3, #1
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d105      	bne.n	800ea2c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d035      	beq.n	800ea98 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ea2c:	4b62      	ldr	r3, [pc, #392]	; (800ebb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800ea2e:	2200      	movs	r2, #0
 800ea30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ea32:	f7fb fd55 	bl	800a4e0 <HAL_GetTick>
 800ea36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ea38:	e008      	b.n	800ea4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ea3a:	f7fb fd51 	bl	800a4e0 <HAL_GetTick>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	1ad3      	subs	r3, r2, r3
 800ea44:	2b02      	cmp	r3, #2
 800ea46:	d901      	bls.n	800ea4c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ea48:	2303      	movs	r3, #3
 800ea4a:	e0b0      	b.n	800ebae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ea4c:	4b5b      	ldr	r3, [pc, #364]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d1f0      	bne.n	800ea3a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	019a      	lsls	r2, r3, #6
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	689b      	ldr	r3, [r3, #8]
 800ea62:	071b      	lsls	r3, r3, #28
 800ea64:	4955      	ldr	r1, [pc, #340]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ea66:	4313      	orrs	r3, r2
 800ea68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ea6c:	4b52      	ldr	r3, [pc, #328]	; (800ebb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800ea6e:	2201      	movs	r2, #1
 800ea70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ea72:	f7fb fd35 	bl	800a4e0 <HAL_GetTick>
 800ea76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ea78:	e008      	b.n	800ea8c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ea7a:	f7fb fd31 	bl	800a4e0 <HAL_GetTick>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	1ad3      	subs	r3, r2, r3
 800ea84:	2b02      	cmp	r3, #2
 800ea86:	d901      	bls.n	800ea8c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ea88:	2303      	movs	r3, #3
 800ea8a:	e090      	b.n	800ebae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ea8c:	4b4b      	ldr	r3, [pc, #300]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d0f0      	beq.n	800ea7a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f003 0302 	and.w	r3, r3, #2
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	f000 8083 	beq.w	800ebac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	60fb      	str	r3, [r7, #12]
 800eaaa:	4b44      	ldr	r3, [pc, #272]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800eaac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaae:	4a43      	ldr	r2, [pc, #268]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800eab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eab4:	6413      	str	r3, [r2, #64]	; 0x40
 800eab6:	4b41      	ldr	r3, [pc, #260]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800eab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eabe:	60fb      	str	r3, [r7, #12]
 800eac0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800eac2:	4b3f      	ldr	r3, [pc, #252]	; (800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	4a3e      	ldr	r2, [pc, #248]	; (800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800eac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eacc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800eace:	f7fb fd07 	bl	800a4e0 <HAL_GetTick>
 800ead2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ead4:	e008      	b.n	800eae8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ead6:	f7fb fd03 	bl	800a4e0 <HAL_GetTick>
 800eada:	4602      	mov	r2, r0
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	1ad3      	subs	r3, r2, r3
 800eae0:	2b02      	cmp	r3, #2
 800eae2:	d901      	bls.n	800eae8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800eae4:	2303      	movs	r3, #3
 800eae6:	e062      	b.n	800ebae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800eae8:	4b35      	ldr	r3, [pc, #212]	; (800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d0f0      	beq.n	800ead6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800eaf4:	4b31      	ldr	r3, [pc, #196]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800eaf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eafc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d02f      	beq.n	800eb64 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	68db      	ldr	r3, [r3, #12]
 800eb08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb0c:	693a      	ldr	r2, [r7, #16]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d028      	beq.n	800eb64 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800eb12:	4b2a      	ldr	r3, [pc, #168]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800eb14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb1a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800eb1c:	4b29      	ldr	r3, [pc, #164]	; (800ebc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800eb1e:	2201      	movs	r2, #1
 800eb20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800eb22:	4b28      	ldr	r3, [pc, #160]	; (800ebc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800eb24:	2200      	movs	r2, #0
 800eb26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800eb28:	4a24      	ldr	r2, [pc, #144]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800eb2e:	4b23      	ldr	r3, [pc, #140]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800eb30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb32:	f003 0301 	and.w	r3, r3, #1
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d114      	bne.n	800eb64 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800eb3a:	f7fb fcd1 	bl	800a4e0 <HAL_GetTick>
 800eb3e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eb40:	e00a      	b.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eb42:	f7fb fccd 	bl	800a4e0 <HAL_GetTick>
 800eb46:	4602      	mov	r2, r0
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	1ad3      	subs	r3, r2, r3
 800eb4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d901      	bls.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800eb54:	2303      	movs	r3, #3
 800eb56:	e02a      	b.n	800ebae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eb58:	4b18      	ldr	r3, [pc, #96]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800eb5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb5c:	f003 0302 	and.w	r3, r3, #2
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d0ee      	beq.n	800eb42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	68db      	ldr	r3, [r3, #12]
 800eb68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eb70:	d10d      	bne.n	800eb8e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800eb72:	4b12      	ldr	r3, [pc, #72]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800eb74:	689b      	ldr	r3, [r3, #8]
 800eb76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	68db      	ldr	r3, [r3, #12]
 800eb7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800eb82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb86:	490d      	ldr	r1, [pc, #52]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800eb88:	4313      	orrs	r3, r2
 800eb8a:	608b      	str	r3, [r1, #8]
 800eb8c:	e005      	b.n	800eb9a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800eb8e:	4b0b      	ldr	r3, [pc, #44]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800eb90:	689b      	ldr	r3, [r3, #8]
 800eb92:	4a0a      	ldr	r2, [pc, #40]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800eb94:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800eb98:	6093      	str	r3, [r2, #8]
 800eb9a:	4b08      	ldr	r3, [pc, #32]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800eb9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	68db      	ldr	r3, [r3, #12]
 800eba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eba6:	4905      	ldr	r1, [pc, #20]	; (800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800eba8:	4313      	orrs	r3, r2
 800ebaa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800ebac:	2300      	movs	r3, #0
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3718      	adds	r7, #24
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
 800ebb6:	bf00      	nop
 800ebb8:	42470068 	.word	0x42470068
 800ebbc:	40023800 	.word	0x40023800
 800ebc0:	40007000 	.word	0x40007000
 800ebc4:	42470e40 	.word	0x42470e40

0800ebc8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d101      	bne.n	800ebde <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	e066      	b.n	800ecac <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	7f5b      	ldrb	r3, [r3, #29]
 800ebe2:	b2db      	uxtb	r3, r3
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d105      	bne.n	800ebf4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f7f6 f840 	bl	8004c74 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2202      	movs	r2, #2
 800ebf8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	22ca      	movs	r2, #202	; 0xca
 800ec00:	625a      	str	r2, [r3, #36]	; 0x24
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	2253      	movs	r2, #83	; 0x53
 800ec08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f000 fa45 	bl	800f09a <RTC_EnterInitMode>
 800ec10:	4603      	mov	r3, r0
 800ec12:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800ec14:	7bfb      	ldrb	r3, [r7, #15]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d12c      	bne.n	800ec74 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	689b      	ldr	r3, [r3, #8]
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	6812      	ldr	r2, [r2, #0]
 800ec24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ec28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec2c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	6899      	ldr	r1, [r3, #8]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	685a      	ldr	r2, [r3, #4]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	691b      	ldr	r3, [r3, #16]
 800ec3c:	431a      	orrs	r2, r3
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	695b      	ldr	r3, [r3, #20]
 800ec42:	431a      	orrs	r2, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	430a      	orrs	r2, r1
 800ec4a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	68d2      	ldr	r2, [r2, #12]
 800ec54:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	6919      	ldr	r1, [r3, #16]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	689b      	ldr	r3, [r3, #8]
 800ec60:	041a      	lsls	r2, r3, #16
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	430a      	orrs	r2, r1
 800ec68:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f000 fa4c 	bl	800f108 <RTC_ExitInitMode>
 800ec70:	4603      	mov	r3, r0
 800ec72:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800ec74:	7bfb      	ldrb	r3, [r7, #15]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d113      	bne.n	800eca2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ec88:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	699a      	ldr	r2, [r3, #24]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	430a      	orrs	r2, r1
 800ec9a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2201      	movs	r2, #1
 800eca0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	22ff      	movs	r2, #255	; 0xff
 800eca8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800ecaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3710      	adds	r7, #16
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ecb4:	b590      	push	{r4, r7, lr}
 800ecb6:	b087      	sub	sp, #28
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	60f8      	str	r0, [r7, #12]
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	7f1b      	ldrb	r3, [r3, #28]
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d101      	bne.n	800ecd0 <HAL_RTC_SetTime+0x1c>
 800eccc:	2302      	movs	r3, #2
 800ecce:	e087      	b.n	800ede0 <HAL_RTC_SetTime+0x12c>
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	2202      	movs	r2, #2
 800ecda:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d126      	bne.n	800ed30 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	689b      	ldr	r3, [r3, #8]
 800ece8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d102      	bne.n	800ecf6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f000 fa29 	bl	800f152 <RTC_ByteToBcd2>
 800ed00:	4603      	mov	r3, r0
 800ed02:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	785b      	ldrb	r3, [r3, #1]
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f000 fa22 	bl	800f152 <RTC_ByteToBcd2>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ed12:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	789b      	ldrb	r3, [r3, #2]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f000 fa1a 	bl	800f152 <RTC_ByteToBcd2>
 800ed1e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ed20:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	78db      	ldrb	r3, [r3, #3]
 800ed28:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	617b      	str	r3, [r7, #20]
 800ed2e:	e018      	b.n	800ed62 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	689b      	ldr	r3, [r3, #8]
 800ed36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d102      	bne.n	800ed44 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	2200      	movs	r2, #0
 800ed42:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	785b      	ldrb	r3, [r3, #1]
 800ed4e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ed50:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800ed52:	68ba      	ldr	r2, [r7, #8]
 800ed54:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ed56:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	78db      	ldrb	r3, [r3, #3]
 800ed5c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ed5e:	4313      	orrs	r3, r2
 800ed60:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	22ca      	movs	r2, #202	; 0xca
 800ed68:	625a      	str	r2, [r3, #36]	; 0x24
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	2253      	movs	r2, #83	; 0x53
 800ed70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ed72:	68f8      	ldr	r0, [r7, #12]
 800ed74:	f000 f991 	bl	800f09a <RTC_EnterInitMode>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ed7c:	7cfb      	ldrb	r3, [r7, #19]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d120      	bne.n	800edc4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ed8c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ed90:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	689a      	ldr	r2, [r3, #8]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800eda0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	6899      	ldr	r1, [r3, #8]
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	68da      	ldr	r2, [r3, #12]
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	691b      	ldr	r3, [r3, #16]
 800edb0:	431a      	orrs	r2, r3
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	430a      	orrs	r2, r1
 800edb8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800edba:	68f8      	ldr	r0, [r7, #12]
 800edbc:	f000 f9a4 	bl	800f108 <RTC_ExitInitMode>
 800edc0:	4603      	mov	r3, r0
 800edc2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800edc4:	7cfb      	ldrb	r3, [r7, #19]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d102      	bne.n	800edd0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	2201      	movs	r2, #1
 800edce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	22ff      	movs	r2, #255	; 0xff
 800edd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2200      	movs	r2, #0
 800eddc:	771a      	strb	r2, [r3, #28]

  return status;
 800edde:	7cfb      	ldrb	r3, [r7, #19]
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	371c      	adds	r7, #28
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd90      	pop	{r4, r7, pc}

0800ede8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b086      	sub	sp, #24
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	60b9      	str	r1, [r7, #8]
 800edf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800edf4:	2300      	movs	r3, #0
 800edf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	691b      	ldr	r3, [r3, #16]
 800ee08:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ee1a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ee1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	0c1b      	lsrs	r3, r3, #16
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee2a:	b2da      	uxtb	r2, r3
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	0a1b      	lsrs	r3, r3, #8
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee3a:	b2da      	uxtb	r2, r3
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee48:	b2da      	uxtb	r2, r3
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	0d9b      	lsrs	r3, r3, #22
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	f003 0301 	and.w	r3, r3, #1
 800ee58:	b2da      	uxtb	r2, r3
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d11a      	bne.n	800ee9a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f000 f98f 	bl	800f18c <RTC_Bcd2ToByte>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	461a      	mov	r2, r3
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	785b      	ldrb	r3, [r3, #1]
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f000 f986 	bl	800f18c <RTC_Bcd2ToByte>
 800ee80:	4603      	mov	r3, r0
 800ee82:	461a      	mov	r2, r3
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	789b      	ldrb	r3, [r3, #2]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f000 f97d 	bl	800f18c <RTC_Bcd2ToByte>
 800ee92:	4603      	mov	r3, r0
 800ee94:	461a      	mov	r2, r3
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ee9a:	2300      	movs	r3, #0
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3718      	adds	r7, #24
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800eea4:	b590      	push	{r4, r7, lr}
 800eea6:	b087      	sub	sp, #28
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	60f8      	str	r0, [r7, #12]
 800eeac:	60b9      	str	r1, [r7, #8]
 800eeae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	7f1b      	ldrb	r3, [r3, #28]
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d101      	bne.n	800eec0 <HAL_RTC_SetDate+0x1c>
 800eebc:	2302      	movs	r3, #2
 800eebe:	e071      	b.n	800efa4 <HAL_RTC_SetDate+0x100>
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	2201      	movs	r2, #1
 800eec4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2202      	movs	r2, #2
 800eeca:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d10e      	bne.n	800eef0 <HAL_RTC_SetDate+0x4c>
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	785b      	ldrb	r3, [r3, #1]
 800eed6:	f003 0310 	and.w	r3, r3, #16
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d008      	beq.n	800eef0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	785b      	ldrb	r3, [r3, #1]
 800eee2:	f023 0310 	bic.w	r3, r3, #16
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	330a      	adds	r3, #10
 800eeea:	b2da      	uxtb	r2, r3
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d11c      	bne.n	800ef30 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	78db      	ldrb	r3, [r3, #3]
 800eefa:	4618      	mov	r0, r3
 800eefc:	f000 f929 	bl	800f152 <RTC_ByteToBcd2>
 800ef00:	4603      	mov	r3, r0
 800ef02:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	785b      	ldrb	r3, [r3, #1]
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f000 f922 	bl	800f152 <RTC_ByteToBcd2>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ef12:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	789b      	ldrb	r3, [r3, #2]
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f000 f91a 	bl	800f152 <RTC_ByteToBcd2>
 800ef1e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ef20:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ef2a:	4313      	orrs	r3, r2
 800ef2c:	617b      	str	r3, [r7, #20]
 800ef2e:	e00e      	b.n	800ef4e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	78db      	ldrb	r3, [r3, #3]
 800ef34:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	785b      	ldrb	r3, [r3, #1]
 800ef3a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ef3c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800ef3e:	68ba      	ldr	r2, [r7, #8]
 800ef40:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ef42:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ef4a:	4313      	orrs	r3, r2
 800ef4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	22ca      	movs	r2, #202	; 0xca
 800ef54:	625a      	str	r2, [r3, #36]	; 0x24
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2253      	movs	r2, #83	; 0x53
 800ef5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ef5e:	68f8      	ldr	r0, [r7, #12]
 800ef60:	f000 f89b 	bl	800f09a <RTC_EnterInitMode>
 800ef64:	4603      	mov	r3, r0
 800ef66:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ef68:	7cfb      	ldrb	r3, [r7, #19]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d10c      	bne.n	800ef88 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ef78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ef7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ef7e:	68f8      	ldr	r0, [r7, #12]
 800ef80:	f000 f8c2 	bl	800f108 <RTC_ExitInitMode>
 800ef84:	4603      	mov	r3, r0
 800ef86:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ef88:	7cfb      	ldrb	r3, [r7, #19]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d102      	bne.n	800ef94 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2201      	movs	r2, #1
 800ef92:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	22ff      	movs	r2, #255	; 0xff
 800ef9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	771a      	strb	r2, [r3, #28]

  return status;
 800efa2:	7cfb      	ldrb	r3, [r7, #19]
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	371c      	adds	r7, #28
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd90      	pop	{r4, r7, pc}

0800efac <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b086      	sub	sp, #24
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	60f8      	str	r0, [r7, #12]
 800efb4:	60b9      	str	r1, [r7, #8]
 800efb6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800efb8:	2300      	movs	r3, #0
 800efba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800efc6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800efca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	0c1b      	lsrs	r3, r3, #16
 800efd0:	b2da      	uxtb	r2, r3
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	0a1b      	lsrs	r3, r3, #8
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	f003 031f 	and.w	r3, r3, #31
 800efe0:	b2da      	uxtb	r2, r3
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800efee:	b2da      	uxtb	r2, r3
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	0b5b      	lsrs	r3, r3, #13
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	f003 0307 	and.w	r3, r3, #7
 800effe:	b2da      	uxtb	r2, r3
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d11a      	bne.n	800f040 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	78db      	ldrb	r3, [r3, #3]
 800f00e:	4618      	mov	r0, r3
 800f010:	f000 f8bc 	bl	800f18c <RTC_Bcd2ToByte>
 800f014:	4603      	mov	r3, r0
 800f016:	461a      	mov	r2, r3
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	785b      	ldrb	r3, [r3, #1]
 800f020:	4618      	mov	r0, r3
 800f022:	f000 f8b3 	bl	800f18c <RTC_Bcd2ToByte>
 800f026:	4603      	mov	r3, r0
 800f028:	461a      	mov	r2, r3
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	789b      	ldrb	r3, [r3, #2]
 800f032:	4618      	mov	r0, r3
 800f034:	f000 f8aa 	bl	800f18c <RTC_Bcd2ToByte>
 800f038:	4603      	mov	r3, r0
 800f03a:	461a      	mov	r2, r3
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800f040:	2300      	movs	r3, #0
}
 800f042:	4618      	mov	r0, r3
 800f044:	3718      	adds	r7, #24
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}

0800f04a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800f04a:	b580      	push	{r7, lr}
 800f04c:	b084      	sub	sp, #16
 800f04e:	af00      	add	r7, sp, #0
 800f050:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f052:	2300      	movs	r3, #0
 800f054:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	68da      	ldr	r2, [r3, #12]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800f064:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f066:	f7fb fa3b 	bl	800a4e0 <HAL_GetTick>
 800f06a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f06c:	e009      	b.n	800f082 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f06e:	f7fb fa37 	bl	800a4e0 <HAL_GetTick>
 800f072:	4602      	mov	r2, r0
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	1ad3      	subs	r3, r2, r3
 800f078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f07c:	d901      	bls.n	800f082 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800f07e:	2303      	movs	r3, #3
 800f080:	e007      	b.n	800f092 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	68db      	ldr	r3, [r3, #12]
 800f088:	f003 0320 	and.w	r3, r3, #32
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d0ee      	beq.n	800f06e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800f090:	2300      	movs	r3, #0
}
 800f092:	4618      	mov	r0, r3
 800f094:	3710      	adds	r7, #16
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}

0800f09a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800f09a:	b580      	push	{r7, lr}
 800f09c:	b084      	sub	sp, #16
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d122      	bne.n	800f0fe <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	68da      	ldr	r2, [r3, #12]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f0c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f0c8:	f7fb fa0a 	bl	800a4e0 <HAL_GetTick>
 800f0cc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800f0ce:	e00c      	b.n	800f0ea <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f0d0:	f7fb fa06 	bl	800a4e0 <HAL_GetTick>
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	1ad3      	subs	r3, r2, r3
 800f0da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f0de:	d904      	bls.n	800f0ea <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2204      	movs	r2, #4
 800f0e4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	68db      	ldr	r3, [r3, #12]
 800f0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d102      	bne.n	800f0fe <RTC_EnterInitMode+0x64>
 800f0f8:	7bfb      	ldrb	r3, [r7, #15]
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d1e8      	bne.n	800f0d0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800f0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f100:	4618      	mov	r0, r3
 800f102:	3710      	adds	r7, #16
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f110:	2300      	movs	r3, #0
 800f112:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	68da      	ldr	r2, [r3, #12]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f122:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	689b      	ldr	r3, [r3, #8]
 800f12a:	f003 0320 	and.w	r3, r3, #32
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d10a      	bne.n	800f148 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f7ff ff89 	bl	800f04a <HAL_RTC_WaitForSynchro>
 800f138:	4603      	mov	r3, r0
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d004      	beq.n	800f148 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2204      	movs	r2, #4
 800f142:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800f144:	2301      	movs	r3, #1
 800f146:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800f148:	7bfb      	ldrb	r3, [r7, #15]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3710      	adds	r7, #16
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800f152:	b480      	push	{r7}
 800f154:	b085      	sub	sp, #20
 800f156:	af00      	add	r7, sp, #0
 800f158:	4603      	mov	r3, r0
 800f15a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800f15c:	2300      	movs	r3, #0
 800f15e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800f160:	e005      	b.n	800f16e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800f162:	7bfb      	ldrb	r3, [r7, #15]
 800f164:	3301      	adds	r3, #1
 800f166:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800f168:	79fb      	ldrb	r3, [r7, #7]
 800f16a:	3b0a      	subs	r3, #10
 800f16c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800f16e:	79fb      	ldrb	r3, [r7, #7]
 800f170:	2b09      	cmp	r3, #9
 800f172:	d8f6      	bhi.n	800f162 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800f174:	7bfb      	ldrb	r3, [r7, #15]
 800f176:	011b      	lsls	r3, r3, #4
 800f178:	b2da      	uxtb	r2, r3
 800f17a:	79fb      	ldrb	r3, [r7, #7]
 800f17c:	4313      	orrs	r3, r2
 800f17e:	b2db      	uxtb	r3, r3
}
 800f180:	4618      	mov	r0, r3
 800f182:	3714      	adds	r7, #20
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b085      	sub	sp, #20
 800f190:	af00      	add	r7, sp, #0
 800f192:	4603      	mov	r3, r0
 800f194:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800f196:	2300      	movs	r3, #0
 800f198:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800f19a:	79fb      	ldrb	r3, [r7, #7]
 800f19c:	091b      	lsrs	r3, r3, #4
 800f19e:	b2db      	uxtb	r3, r3
 800f1a0:	461a      	mov	r2, r3
 800f1a2:	0092      	lsls	r2, r2, #2
 800f1a4:	4413      	add	r3, r2
 800f1a6:	005b      	lsls	r3, r3, #1
 800f1a8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800f1aa:	79fb      	ldrb	r3, [r7, #7]
 800f1ac:	f003 030f 	and.w	r3, r3, #15
 800f1b0:	b2da      	uxtb	r2, r3
 800f1b2:	7bfb      	ldrb	r3, [r7, #15]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	b2db      	uxtb	r3, r3
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3714      	adds	r7, #20
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b082      	sub	sp, #8
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d101      	bne.n	800f1d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	e07b      	b.n	800f2ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d108      	bne.n	800f1f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	685b      	ldr	r3, [r3, #4]
 800f1e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f1e6:	d009      	beq.n	800f1fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	61da      	str	r2, [r3, #28]
 800f1ee:	e005      	b.n	800f1fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2200      	movs	r2, #0
 800f200:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d106      	bne.n	800f21c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2200      	movs	r2, #0
 800f212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f7f5 fd58 	bl	8004ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2202      	movs	r2, #2
 800f220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f232:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	685b      	ldr	r3, [r3, #4]
 800f238:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	689b      	ldr	r3, [r3, #8]
 800f240:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f244:	431a      	orrs	r2, r3
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f24e:	431a      	orrs	r2, r3
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	691b      	ldr	r3, [r3, #16]
 800f254:	f003 0302 	and.w	r3, r3, #2
 800f258:	431a      	orrs	r2, r3
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	695b      	ldr	r3, [r3, #20]
 800f25e:	f003 0301 	and.w	r3, r3, #1
 800f262:	431a      	orrs	r2, r3
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	699b      	ldr	r3, [r3, #24]
 800f268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f26c:	431a      	orrs	r2, r3
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	69db      	ldr	r3, [r3, #28]
 800f272:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f276:	431a      	orrs	r2, r3
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6a1b      	ldr	r3, [r3, #32]
 800f27c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f280:	ea42 0103 	orr.w	r1, r2, r3
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f288:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	430a      	orrs	r2, r1
 800f292:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	699b      	ldr	r3, [r3, #24]
 800f298:	0c1b      	lsrs	r3, r3, #16
 800f29a:	f003 0104 	and.w	r1, r3, #4
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2a2:	f003 0210 	and.w	r2, r3, #16
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	430a      	orrs	r2, r1
 800f2ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	69da      	ldr	r2, [r3, #28]
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f2bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f2cc:	2300      	movs	r3, #0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3708      	adds	r7, #8
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b088      	sub	sp, #32
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	60f8      	str	r0, [r7, #12]
 800f2de:	60b9      	str	r1, [r7, #8]
 800f2e0:	603b      	str	r3, [r7, #0]
 800f2e2:	4613      	mov	r3, r2
 800f2e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d101      	bne.n	800f2f8 <HAL_SPI_Transmit+0x22>
 800f2f4:	2302      	movs	r3, #2
 800f2f6:	e126      	b.n	800f546 <HAL_SPI_Transmit+0x270>
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f300:	f7fb f8ee 	bl	800a4e0 <HAL_GetTick>
 800f304:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f306:	88fb      	ldrh	r3, [r7, #6]
 800f308:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f310:	b2db      	uxtb	r3, r3
 800f312:	2b01      	cmp	r3, #1
 800f314:	d002      	beq.n	800f31c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800f316:	2302      	movs	r3, #2
 800f318:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f31a:	e10b      	b.n	800f534 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d002      	beq.n	800f328 <HAL_SPI_Transmit+0x52>
 800f322:	88fb      	ldrh	r3, [r7, #6]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d102      	bne.n	800f32e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800f328:	2301      	movs	r3, #1
 800f32a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f32c:	e102      	b.n	800f534 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2203      	movs	r2, #3
 800f332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2200      	movs	r2, #0
 800f33a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	68ba      	ldr	r2, [r7, #8]
 800f340:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	88fa      	ldrh	r2, [r7, #6]
 800f346:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	88fa      	ldrh	r2, [r7, #6]
 800f34c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2200      	movs	r2, #0
 800f352:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2200      	movs	r2, #0
 800f358:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2200      	movs	r2, #0
 800f35e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2200      	movs	r2, #0
 800f364:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2200      	movs	r2, #0
 800f36a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	689b      	ldr	r3, [r3, #8]
 800f370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f374:	d10f      	bne.n	800f396 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f384:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f394:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3a0:	2b40      	cmp	r3, #64	; 0x40
 800f3a2:	d007      	beq.n	800f3b4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	681a      	ldr	r2, [r3, #0]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f3b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f3bc:	d14b      	bne.n	800f456 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	685b      	ldr	r3, [r3, #4]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d002      	beq.n	800f3cc <HAL_SPI_Transmit+0xf6>
 800f3c6:	8afb      	ldrh	r3, [r7, #22]
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d13e      	bne.n	800f44a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3d0:	881a      	ldrh	r2, [r3, #0]
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3dc:	1c9a      	adds	r2, r3, #2
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	3b01      	subs	r3, #1
 800f3ea:	b29a      	uxth	r2, r3
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f3f0:	e02b      	b.n	800f44a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	f003 0302 	and.w	r3, r3, #2
 800f3fc:	2b02      	cmp	r3, #2
 800f3fe:	d112      	bne.n	800f426 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f404:	881a      	ldrh	r2, [r3, #0]
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f410:	1c9a      	adds	r2, r3, #2
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	3b01      	subs	r3, #1
 800f41e:	b29a      	uxth	r2, r3
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	86da      	strh	r2, [r3, #54]	; 0x36
 800f424:	e011      	b.n	800f44a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f426:	f7fb f85b 	bl	800a4e0 <HAL_GetTick>
 800f42a:	4602      	mov	r2, r0
 800f42c:	69bb      	ldr	r3, [r7, #24]
 800f42e:	1ad3      	subs	r3, r2, r3
 800f430:	683a      	ldr	r2, [r7, #0]
 800f432:	429a      	cmp	r2, r3
 800f434:	d803      	bhi.n	800f43e <HAL_SPI_Transmit+0x168>
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f43c:	d102      	bne.n	800f444 <HAL_SPI_Transmit+0x16e>
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d102      	bne.n	800f44a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800f444:	2303      	movs	r3, #3
 800f446:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f448:	e074      	b.n	800f534 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f44e:	b29b      	uxth	r3, r3
 800f450:	2b00      	cmp	r3, #0
 800f452:	d1ce      	bne.n	800f3f2 <HAL_SPI_Transmit+0x11c>
 800f454:	e04c      	b.n	800f4f0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d002      	beq.n	800f464 <HAL_SPI_Transmit+0x18e>
 800f45e:	8afb      	ldrh	r3, [r7, #22]
 800f460:	2b01      	cmp	r3, #1
 800f462:	d140      	bne.n	800f4e6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	330c      	adds	r3, #12
 800f46e:	7812      	ldrb	r2, [r2, #0]
 800f470:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f476:	1c5a      	adds	r2, r3, #1
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f480:	b29b      	uxth	r3, r3
 800f482:	3b01      	subs	r3, #1
 800f484:	b29a      	uxth	r2, r3
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f48a:	e02c      	b.n	800f4e6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	689b      	ldr	r3, [r3, #8]
 800f492:	f003 0302 	and.w	r3, r3, #2
 800f496:	2b02      	cmp	r3, #2
 800f498:	d113      	bne.n	800f4c2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	330c      	adds	r3, #12
 800f4a4:	7812      	ldrb	r2, [r2, #0]
 800f4a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4ac:	1c5a      	adds	r2, r3, #1
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	3b01      	subs	r3, #1
 800f4ba:	b29a      	uxth	r2, r3
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	86da      	strh	r2, [r3, #54]	; 0x36
 800f4c0:	e011      	b.n	800f4e6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4c2:	f7fb f80d 	bl	800a4e0 <HAL_GetTick>
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	1ad3      	subs	r3, r2, r3
 800f4cc:	683a      	ldr	r2, [r7, #0]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d803      	bhi.n	800f4da <HAL_SPI_Transmit+0x204>
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4d8:	d102      	bne.n	800f4e0 <HAL_SPI_Transmit+0x20a>
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d102      	bne.n	800f4e6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800f4e0:	2303      	movs	r3, #3
 800f4e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f4e4:	e026      	b.n	800f534 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d1cd      	bne.n	800f48c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f4f0:	69ba      	ldr	r2, [r7, #24]
 800f4f2:	6839      	ldr	r1, [r7, #0]
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	f000 fb13 	bl	800fb20 <SPI_EndRxTxTransaction>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d002      	beq.n	800f506 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	2220      	movs	r2, #32
 800f504:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	689b      	ldr	r3, [r3, #8]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d10a      	bne.n	800f524 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f50e:	2300      	movs	r3, #0
 800f510:	613b      	str	r3, [r7, #16]
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	68db      	ldr	r3, [r3, #12]
 800f518:	613b      	str	r3, [r7, #16]
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	689b      	ldr	r3, [r3, #8]
 800f520:	613b      	str	r3, [r7, #16]
 800f522:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d002      	beq.n	800f532 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800f52c:	2301      	movs	r3, #1
 800f52e:	77fb      	strb	r3, [r7, #31]
 800f530:	e000      	b.n	800f534 <HAL_SPI_Transmit+0x25e>
  }

error:
 800f532:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	2201      	movs	r2, #1
 800f538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2200      	movs	r2, #0
 800f540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f544:	7ffb      	ldrb	r3, [r7, #31]
}
 800f546:	4618      	mov	r0, r3
 800f548:	3720      	adds	r7, #32
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
	...

0800f550 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b086      	sub	sp, #24
 800f554:	af00      	add	r7, sp, #0
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	4613      	mov	r3, r2
 800f55c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f55e:	2300      	movs	r3, #0
 800f560:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d101      	bne.n	800f570 <HAL_SPI_Transmit_DMA+0x20>
 800f56c:	2302      	movs	r3, #2
 800f56e:	e09b      	b.n	800f6a8 <HAL_SPI_Transmit_DMA+0x158>
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2201      	movs	r2, #1
 800f574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f57e:	b2db      	uxtb	r3, r3
 800f580:	2b01      	cmp	r3, #1
 800f582:	d002      	beq.n	800f58a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800f584:	2302      	movs	r3, #2
 800f586:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f588:	e089      	b.n	800f69e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d002      	beq.n	800f596 <HAL_SPI_Transmit_DMA+0x46>
 800f590:	88fb      	ldrh	r3, [r7, #6]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d102      	bne.n	800f59c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800f596:	2301      	movs	r3, #1
 800f598:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f59a:	e080      	b.n	800f69e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2203      	movs	r2, #3
 800f5a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	68ba      	ldr	r2, [r7, #8]
 800f5ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	88fa      	ldrh	r2, [r7, #6]
 800f5b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	88fa      	ldrh	r2, [r7, #6]
 800f5ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	689b      	ldr	r3, [r3, #8]
 800f5de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5e2:	d10f      	bne.n	800f604 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	681a      	ldr	r2, [r3, #0]
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f5f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	681a      	ldr	r2, [r3, #0]
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f602:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f608:	4a29      	ldr	r2, [pc, #164]	; (800f6b0 <HAL_SPI_Transmit_DMA+0x160>)
 800f60a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f610:	4a28      	ldr	r2, [pc, #160]	; (800f6b4 <HAL_SPI_Transmit_DMA+0x164>)
 800f612:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f618:	4a27      	ldr	r2, [pc, #156]	; (800f6b8 <HAL_SPI_Transmit_DMA+0x168>)
 800f61a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f620:	2200      	movs	r2, #0
 800f622:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f62c:	4619      	mov	r1, r3
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	330c      	adds	r3, #12
 800f634:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f63a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f63c:	f7fb f910 	bl	800a860 <HAL_DMA_Start_IT>
 800f640:	4603      	mov	r3, r0
 800f642:	2b00      	cmp	r3, #0
 800f644:	d00c      	beq.n	800f660 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f64a:	f043 0210 	orr.w	r2, r3, #16
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800f652:	2301      	movs	r3, #1
 800f654:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	2201      	movs	r2, #1
 800f65a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800f65e:	e01e      	b.n	800f69e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f66a:	2b40      	cmp	r3, #64	; 0x40
 800f66c:	d007      	beq.n	800f67e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	681a      	ldr	r2, [r3, #0]
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f67c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	685a      	ldr	r2, [r3, #4]
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	f042 0220 	orr.w	r2, r2, #32
 800f68c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	685a      	ldr	r2, [r3, #4]
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f042 0202 	orr.w	r2, r2, #2
 800f69c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f6a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3718      	adds	r7, #24
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}
 800f6b0:	0800f98d 	.word	0x0800f98d
 800f6b4:	0800f8e5 	.word	0x0800f8e5
 800f6b8:	0800f9a9 	.word	0x0800f9a9

0800f6bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b088      	sub	sp, #32
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	685b      	ldr	r3, [r3, #4]
 800f6ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	689b      	ldr	r3, [r3, #8]
 800f6d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f6d4:	69bb      	ldr	r3, [r7, #24]
 800f6d6:	099b      	lsrs	r3, r3, #6
 800f6d8:	f003 0301 	and.w	r3, r3, #1
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d10f      	bne.n	800f700 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f6e0:	69bb      	ldr	r3, [r7, #24]
 800f6e2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d00a      	beq.n	800f700 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f6ea:	69fb      	ldr	r3, [r7, #28]
 800f6ec:	099b      	lsrs	r3, r3, #6
 800f6ee:	f003 0301 	and.w	r3, r3, #1
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d004      	beq.n	800f700 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	4798      	blx	r3
    return;
 800f6fe:	e0d7      	b.n	800f8b0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f700:	69bb      	ldr	r3, [r7, #24]
 800f702:	085b      	lsrs	r3, r3, #1
 800f704:	f003 0301 	and.w	r3, r3, #1
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d00a      	beq.n	800f722 <HAL_SPI_IRQHandler+0x66>
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	09db      	lsrs	r3, r3, #7
 800f710:	f003 0301 	and.w	r3, r3, #1
 800f714:	2b00      	cmp	r3, #0
 800f716:	d004      	beq.n	800f722 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	4798      	blx	r3
    return;
 800f720:	e0c6      	b.n	800f8b0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f722:	69bb      	ldr	r3, [r7, #24]
 800f724:	095b      	lsrs	r3, r3, #5
 800f726:	f003 0301 	and.w	r3, r3, #1
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d10c      	bne.n	800f748 <HAL_SPI_IRQHandler+0x8c>
 800f72e:	69bb      	ldr	r3, [r7, #24]
 800f730:	099b      	lsrs	r3, r3, #6
 800f732:	f003 0301 	and.w	r3, r3, #1
 800f736:	2b00      	cmp	r3, #0
 800f738:	d106      	bne.n	800f748 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f73a:	69bb      	ldr	r3, [r7, #24]
 800f73c:	0a1b      	lsrs	r3, r3, #8
 800f73e:	f003 0301 	and.w	r3, r3, #1
 800f742:	2b00      	cmp	r3, #0
 800f744:	f000 80b4 	beq.w	800f8b0 <HAL_SPI_IRQHandler+0x1f4>
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	095b      	lsrs	r3, r3, #5
 800f74c:	f003 0301 	and.w	r3, r3, #1
 800f750:	2b00      	cmp	r3, #0
 800f752:	f000 80ad 	beq.w	800f8b0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f756:	69bb      	ldr	r3, [r7, #24]
 800f758:	099b      	lsrs	r3, r3, #6
 800f75a:	f003 0301 	and.w	r3, r3, #1
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d023      	beq.n	800f7aa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f768:	b2db      	uxtb	r3, r3
 800f76a:	2b03      	cmp	r3, #3
 800f76c:	d011      	beq.n	800f792 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f772:	f043 0204 	orr.w	r2, r3, #4
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f77a:	2300      	movs	r3, #0
 800f77c:	617b      	str	r3, [r7, #20]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	617b      	str	r3, [r7, #20]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	689b      	ldr	r3, [r3, #8]
 800f78c:	617b      	str	r3, [r7, #20]
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	e00b      	b.n	800f7aa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f792:	2300      	movs	r3, #0
 800f794:	613b      	str	r3, [r7, #16]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	68db      	ldr	r3, [r3, #12]
 800f79c:	613b      	str	r3, [r7, #16]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	689b      	ldr	r3, [r3, #8]
 800f7a4:	613b      	str	r3, [r7, #16]
 800f7a6:	693b      	ldr	r3, [r7, #16]
        return;
 800f7a8:	e082      	b.n	800f8b0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f7aa:	69bb      	ldr	r3, [r7, #24]
 800f7ac:	095b      	lsrs	r3, r3, #5
 800f7ae:	f003 0301 	and.w	r3, r3, #1
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d014      	beq.n	800f7e0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7ba:	f043 0201 	orr.w	r2, r3, #1
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	60fb      	str	r3, [r7, #12]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	689b      	ldr	r3, [r3, #8]
 800f7cc:	60fb      	str	r3, [r7, #12]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f7dc:	601a      	str	r2, [r3, #0]
 800f7de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f7e0:	69bb      	ldr	r3, [r7, #24]
 800f7e2:	0a1b      	lsrs	r3, r3, #8
 800f7e4:	f003 0301 	and.w	r3, r3, #1
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d00c      	beq.n	800f806 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7f0:	f043 0208 	orr.w	r2, r3, #8
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	60bb      	str	r3, [r7, #8]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	689b      	ldr	r3, [r3, #8]
 800f802:	60bb      	str	r3, [r7, #8]
 800f804:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d04f      	beq.n	800f8ae <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	685a      	ldr	r2, [r3, #4]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f81c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2201      	movs	r2, #1
 800f822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f826:	69fb      	ldr	r3, [r7, #28]
 800f828:	f003 0302 	and.w	r3, r3, #2
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d104      	bne.n	800f83a <HAL_SPI_IRQHandler+0x17e>
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	f003 0301 	and.w	r3, r3, #1
 800f836:	2b00      	cmp	r3, #0
 800f838:	d034      	beq.n	800f8a4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	685a      	ldr	r2, [r3, #4]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f022 0203 	bic.w	r2, r2, #3
 800f848:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d011      	beq.n	800f876 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f856:	4a18      	ldr	r2, [pc, #96]	; (800f8b8 <HAL_SPI_IRQHandler+0x1fc>)
 800f858:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f85e:	4618      	mov	r0, r3
 800f860:	f7fb f8c6 	bl	800a9f0 <HAL_DMA_Abort_IT>
 800f864:	4603      	mov	r3, r0
 800f866:	2b00      	cmp	r3, #0
 800f868:	d005      	beq.n	800f876 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f86e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d016      	beq.n	800f8ac <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f882:	4a0d      	ldr	r2, [pc, #52]	; (800f8b8 <HAL_SPI_IRQHandler+0x1fc>)
 800f884:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fb f8b0 	bl	800a9f0 <HAL_DMA_Abort_IT>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d00a      	beq.n	800f8ac <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f89a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800f8a2:	e003      	b.n	800f8ac <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f000 f813 	bl	800f8d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f8aa:	e000      	b.n	800f8ae <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800f8ac:	bf00      	nop
    return;
 800f8ae:	bf00      	nop
  }
}
 800f8b0:	3720      	adds	r7, #32
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	0800f9e9 	.word	0x0800f9e9

0800f8bc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f8bc:	b480      	push	{r7}
 800f8be:	b083      	sub	sp, #12
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800f8c4:	bf00      	nop
 800f8c6:	370c      	adds	r7, #12
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ce:	4770      	bx	lr

0800f8d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b083      	sub	sp, #12
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f8d8:	bf00      	nop
 800f8da:	370c      	adds	r7, #12
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e2:	4770      	bx	lr

0800f8e4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b086      	sub	sp, #24
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f8f2:	f7fa fdf5 	bl	800a4e0 <HAL_GetTick>
 800f8f6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f906:	d03b      	beq.n	800f980 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	685a      	ldr	r2, [r3, #4]
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	f022 0220 	bic.w	r2, r2, #32
 800f916:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	685a      	ldr	r2, [r3, #4]
 800f91e:	697b      	ldr	r3, [r7, #20]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	f022 0202 	bic.w	r2, r2, #2
 800f926:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f928:	693a      	ldr	r2, [r7, #16]
 800f92a:	2164      	movs	r1, #100	; 0x64
 800f92c:	6978      	ldr	r0, [r7, #20]
 800f92e:	f000 f8f7 	bl	800fb20 <SPI_EndRxTxTransaction>
 800f932:	4603      	mov	r3, r0
 800f934:	2b00      	cmp	r3, #0
 800f936:	d005      	beq.n	800f944 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f93c:	f043 0220 	orr.w	r2, r3, #32
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	689b      	ldr	r3, [r3, #8]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d10a      	bne.n	800f962 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f94c:	2300      	movs	r3, #0
 800f94e:	60fb      	str	r3, [r7, #12]
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	60fb      	str	r3, [r7, #12]
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	689b      	ldr	r3, [r3, #8]
 800f95e:	60fb      	str	r3, [r7, #12]
 800f960:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800f962:	697b      	ldr	r3, [r7, #20]
 800f964:	2200      	movs	r2, #0
 800f966:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	2201      	movs	r2, #1
 800f96c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f974:	2b00      	cmp	r3, #0
 800f976:	d003      	beq.n	800f980 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f978:	6978      	ldr	r0, [r7, #20]
 800f97a:	f7ff ffa9 	bl	800f8d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f97e:	e002      	b.n	800f986 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800f980:	6978      	ldr	r0, [r7, #20]
 800f982:	f7f3 fc03 	bl	800318c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f986:	3718      	adds	r7, #24
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b084      	sub	sp, #16
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f998:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800f99a:	68f8      	ldr	r0, [r7, #12]
 800f99c:	f7ff ff8e 	bl	800f8bc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f9a0:	bf00      	nop
 800f9a2:	3710      	adds	r7, #16
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b084      	sub	sp, #16
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9b4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	685a      	ldr	r2, [r3, #4]
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f022 0203 	bic.w	r2, r2, #3
 800f9c4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9ca:	f043 0210 	orr.w	r2, r3, #16
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f9da:	68f8      	ldr	r0, [r7, #12]
 800f9dc:	f7ff ff78 	bl	800f8d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f9e0:	bf00      	nop
 800f9e2:	3710      	adds	r7, #16
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b084      	sub	sp, #16
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800fa02:	68f8      	ldr	r0, [r7, #12]
 800fa04:	f7ff ff64 	bl	800f8d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fa08:	bf00      	nop
 800fa0a:	3710      	adds	r7, #16
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b088      	sub	sp, #32
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	60b9      	str	r1, [r7, #8]
 800fa1a:	603b      	str	r3, [r7, #0]
 800fa1c:	4613      	mov	r3, r2
 800fa1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800fa20:	f7fa fd5e 	bl	800a4e0 <HAL_GetTick>
 800fa24:	4602      	mov	r2, r0
 800fa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa28:	1a9b      	subs	r3, r3, r2
 800fa2a:	683a      	ldr	r2, [r7, #0]
 800fa2c:	4413      	add	r3, r2
 800fa2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800fa30:	f7fa fd56 	bl	800a4e0 <HAL_GetTick>
 800fa34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800fa36:	4b39      	ldr	r3, [pc, #228]	; (800fb1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	015b      	lsls	r3, r3, #5
 800fa3c:	0d1b      	lsrs	r3, r3, #20
 800fa3e:	69fa      	ldr	r2, [r7, #28]
 800fa40:	fb02 f303 	mul.w	r3, r2, r3
 800fa44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fa46:	e054      	b.n	800faf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa4e:	d050      	beq.n	800faf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fa50:	f7fa fd46 	bl	800a4e0 <HAL_GetTick>
 800fa54:	4602      	mov	r2, r0
 800fa56:	69bb      	ldr	r3, [r7, #24]
 800fa58:	1ad3      	subs	r3, r2, r3
 800fa5a:	69fa      	ldr	r2, [r7, #28]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d902      	bls.n	800fa66 <SPI_WaitFlagStateUntilTimeout+0x56>
 800fa60:	69fb      	ldr	r3, [r7, #28]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d13d      	bne.n	800fae2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	685a      	ldr	r2, [r3, #4]
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fa74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fa7e:	d111      	bne.n	800faa4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	689b      	ldr	r3, [r3, #8]
 800fa84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa88:	d004      	beq.n	800fa94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	689b      	ldr	r3, [r3, #8]
 800fa8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa92:	d107      	bne.n	800faa4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800faa2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800faac:	d10f      	bne.n	800face <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	681a      	ldr	r2, [r3, #0]
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fabc:	601a      	str	r2, [r3, #0]
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	681a      	ldr	r2, [r3, #0]
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800facc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	2201      	movs	r2, #1
 800fad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	2200      	movs	r2, #0
 800fada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800fade:	2303      	movs	r3, #3
 800fae0:	e017      	b.n	800fb12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d101      	bne.n	800faec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800fae8:	2300      	movs	r3, #0
 800faea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	3b01      	subs	r3, #1
 800faf0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	689a      	ldr	r2, [r3, #8]
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	4013      	ands	r3, r2
 800fafc:	68ba      	ldr	r2, [r7, #8]
 800fafe:	429a      	cmp	r2, r3
 800fb00:	bf0c      	ite	eq
 800fb02:	2301      	moveq	r3, #1
 800fb04:	2300      	movne	r3, #0
 800fb06:	b2db      	uxtb	r3, r3
 800fb08:	461a      	mov	r2, r3
 800fb0a:	79fb      	ldrb	r3, [r7, #7]
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d19b      	bne.n	800fa48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800fb10:	2300      	movs	r3, #0
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3720      	adds	r7, #32
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	200000ac 	.word	0x200000ac

0800fb20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b088      	sub	sp, #32
 800fb24:	af02      	add	r7, sp, #8
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fb2c:	4b1b      	ldr	r3, [pc, #108]	; (800fb9c <SPI_EndRxTxTransaction+0x7c>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	4a1b      	ldr	r2, [pc, #108]	; (800fba0 <SPI_EndRxTxTransaction+0x80>)
 800fb32:	fba2 2303 	umull	r2, r3, r2, r3
 800fb36:	0d5b      	lsrs	r3, r3, #21
 800fb38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fb3c:	fb02 f303 	mul.w	r3, r2, r3
 800fb40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fb4a:	d112      	bne.n	800fb72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	9300      	str	r3, [sp, #0]
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	2200      	movs	r2, #0
 800fb54:	2180      	movs	r1, #128	; 0x80
 800fb56:	68f8      	ldr	r0, [r7, #12]
 800fb58:	f7ff ff5a 	bl	800fa10 <SPI_WaitFlagStateUntilTimeout>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d016      	beq.n	800fb90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb66:	f043 0220 	orr.w	r2, r3, #32
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800fb6e:	2303      	movs	r3, #3
 800fb70:	e00f      	b.n	800fb92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d00a      	beq.n	800fb8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	689b      	ldr	r3, [r3, #8]
 800fb84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb88:	2b80      	cmp	r3, #128	; 0x80
 800fb8a:	d0f2      	beq.n	800fb72 <SPI_EndRxTxTransaction+0x52>
 800fb8c:	e000      	b.n	800fb90 <SPI_EndRxTxTransaction+0x70>
        break;
 800fb8e:	bf00      	nop
  }

  return HAL_OK;
 800fb90:	2300      	movs	r3, #0
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3718      	adds	r7, #24
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	200000ac 	.word	0x200000ac
 800fba0:	165e9f81 	.word	0x165e9f81

0800fba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d101      	bne.n	800fbb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e041      	b.n	800fc3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d106      	bne.n	800fbd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f7f5 f90a 	bl	8004de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2202      	movs	r2, #2
 800fbd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681a      	ldr	r2, [r3, #0]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	3304      	adds	r3, #4
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	4610      	mov	r0, r2
 800fbe4:	f000 fa96 	bl	8010114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2201      	movs	r2, #1
 800fbec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2201      	movs	r2, #1
 800fc04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2201      	movs	r2, #1
 800fc14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2201      	movs	r2, #1
 800fc1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2201      	movs	r2, #1
 800fc24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2201      	movs	r2, #1
 800fc34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fc38:	2300      	movs	r3, #0
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3708      	adds	r7, #8
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
	...

0800fc44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b085      	sub	sp, #20
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	2b01      	cmp	r3, #1
 800fc56:	d001      	beq.n	800fc5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fc58:	2301      	movs	r3, #1
 800fc5a:	e04e      	b.n	800fcfa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2202      	movs	r2, #2
 800fc60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	68da      	ldr	r2, [r3, #12]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	f042 0201 	orr.w	r2, r2, #1
 800fc72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4a23      	ldr	r2, [pc, #140]	; (800fd08 <HAL_TIM_Base_Start_IT+0xc4>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d022      	beq.n	800fcc4 <HAL_TIM_Base_Start_IT+0x80>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc86:	d01d      	beq.n	800fcc4 <HAL_TIM_Base_Start_IT+0x80>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	4a1f      	ldr	r2, [pc, #124]	; (800fd0c <HAL_TIM_Base_Start_IT+0xc8>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d018      	beq.n	800fcc4 <HAL_TIM_Base_Start_IT+0x80>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	4a1e      	ldr	r2, [pc, #120]	; (800fd10 <HAL_TIM_Base_Start_IT+0xcc>)
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d013      	beq.n	800fcc4 <HAL_TIM_Base_Start_IT+0x80>
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4a1c      	ldr	r2, [pc, #112]	; (800fd14 <HAL_TIM_Base_Start_IT+0xd0>)
 800fca2:	4293      	cmp	r3, r2
 800fca4:	d00e      	beq.n	800fcc4 <HAL_TIM_Base_Start_IT+0x80>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	4a1b      	ldr	r2, [pc, #108]	; (800fd18 <HAL_TIM_Base_Start_IT+0xd4>)
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d009      	beq.n	800fcc4 <HAL_TIM_Base_Start_IT+0x80>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4a19      	ldr	r2, [pc, #100]	; (800fd1c <HAL_TIM_Base_Start_IT+0xd8>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d004      	beq.n	800fcc4 <HAL_TIM_Base_Start_IT+0x80>
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	4a18      	ldr	r2, [pc, #96]	; (800fd20 <HAL_TIM_Base_Start_IT+0xdc>)
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	d111      	bne.n	800fce8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	689b      	ldr	r3, [r3, #8]
 800fcca:	f003 0307 	and.w	r3, r3, #7
 800fcce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2b06      	cmp	r3, #6
 800fcd4:	d010      	beq.n	800fcf8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	681a      	ldr	r2, [r3, #0]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	f042 0201 	orr.w	r2, r2, #1
 800fce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fce6:	e007      	b.n	800fcf8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	681a      	ldr	r2, [r3, #0]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	f042 0201 	orr.w	r2, r2, #1
 800fcf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fcf8:	2300      	movs	r3, #0
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	3714      	adds	r7, #20
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr
 800fd06:	bf00      	nop
 800fd08:	40010000 	.word	0x40010000
 800fd0c:	40000400 	.word	0x40000400
 800fd10:	40000800 	.word	0x40000800
 800fd14:	40000c00 	.word	0x40000c00
 800fd18:	40010400 	.word	0x40010400
 800fd1c:	40014000 	.word	0x40014000
 800fd20:	40001800 	.word	0x40001800

0800fd24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	691b      	ldr	r3, [r3, #16]
 800fd32:	f003 0302 	and.w	r3, r3, #2
 800fd36:	2b02      	cmp	r3, #2
 800fd38:	d122      	bne.n	800fd80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	f003 0302 	and.w	r3, r3, #2
 800fd44:	2b02      	cmp	r3, #2
 800fd46:	d11b      	bne.n	800fd80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f06f 0202 	mvn.w	r2, #2
 800fd50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2201      	movs	r2, #1
 800fd56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	699b      	ldr	r3, [r3, #24]
 800fd5e:	f003 0303 	and.w	r3, r3, #3
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d003      	beq.n	800fd6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 f9b5 	bl	80100d6 <HAL_TIM_IC_CaptureCallback>
 800fd6c:	e005      	b.n	800fd7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f000 f9a7 	bl	80100c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f000 f9b8 	bl	80100ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	691b      	ldr	r3, [r3, #16]
 800fd86:	f003 0304 	and.w	r3, r3, #4
 800fd8a:	2b04      	cmp	r3, #4
 800fd8c:	d122      	bne.n	800fdd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	68db      	ldr	r3, [r3, #12]
 800fd94:	f003 0304 	and.w	r3, r3, #4
 800fd98:	2b04      	cmp	r3, #4
 800fd9a:	d11b      	bne.n	800fdd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f06f 0204 	mvn.w	r2, #4
 800fda4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2202      	movs	r2, #2
 800fdaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	699b      	ldr	r3, [r3, #24]
 800fdb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d003      	beq.n	800fdc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 f98b 	bl	80100d6 <HAL_TIM_IC_CaptureCallback>
 800fdc0:	e005      	b.n	800fdce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f000 f97d 	bl	80100c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f000 f98e 	bl	80100ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	691b      	ldr	r3, [r3, #16]
 800fdda:	f003 0308 	and.w	r3, r3, #8
 800fdde:	2b08      	cmp	r3, #8
 800fde0:	d122      	bne.n	800fe28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	68db      	ldr	r3, [r3, #12]
 800fde8:	f003 0308 	and.w	r3, r3, #8
 800fdec:	2b08      	cmp	r3, #8
 800fdee:	d11b      	bne.n	800fe28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f06f 0208 	mvn.w	r2, #8
 800fdf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2204      	movs	r2, #4
 800fdfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	69db      	ldr	r3, [r3, #28]
 800fe06:	f003 0303 	and.w	r3, r3, #3
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d003      	beq.n	800fe16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f000 f961 	bl	80100d6 <HAL_TIM_IC_CaptureCallback>
 800fe14:	e005      	b.n	800fe22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f000 f953 	bl	80100c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f000 f964 	bl	80100ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2200      	movs	r2, #0
 800fe26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	691b      	ldr	r3, [r3, #16]
 800fe2e:	f003 0310 	and.w	r3, r3, #16
 800fe32:	2b10      	cmp	r3, #16
 800fe34:	d122      	bne.n	800fe7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	f003 0310 	and.w	r3, r3, #16
 800fe40:	2b10      	cmp	r3, #16
 800fe42:	d11b      	bne.n	800fe7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f06f 0210 	mvn.w	r2, #16
 800fe4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2208      	movs	r2, #8
 800fe52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	69db      	ldr	r3, [r3, #28]
 800fe5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d003      	beq.n	800fe6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f000 f937 	bl	80100d6 <HAL_TIM_IC_CaptureCallback>
 800fe68:	e005      	b.n	800fe76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f000 f929 	bl	80100c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f000 f93a 	bl	80100ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	691b      	ldr	r3, [r3, #16]
 800fe82:	f003 0301 	and.w	r3, r3, #1
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d10e      	bne.n	800fea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	68db      	ldr	r3, [r3, #12]
 800fe90:	f003 0301 	and.w	r3, r3, #1
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d107      	bne.n	800fea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f06f 0201 	mvn.w	r2, #1
 800fea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f7f4 f9b4 	bl	8004210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	691b      	ldr	r3, [r3, #16]
 800feae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800feb2:	2b80      	cmp	r3, #128	; 0x80
 800feb4:	d10e      	bne.n	800fed4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	68db      	ldr	r3, [r3, #12]
 800febc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fec0:	2b80      	cmp	r3, #128	; 0x80
 800fec2:	d107      	bne.n	800fed4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f000 fae0 	bl	8010494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	691b      	ldr	r3, [r3, #16]
 800feda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fede:	2b40      	cmp	r3, #64	; 0x40
 800fee0:	d10e      	bne.n	800ff00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	68db      	ldr	r3, [r3, #12]
 800fee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800feec:	2b40      	cmp	r3, #64	; 0x40
 800feee:	d107      	bne.n	800ff00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f000 f8ff 	bl	80100fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	691b      	ldr	r3, [r3, #16]
 800ff06:	f003 0320 	and.w	r3, r3, #32
 800ff0a:	2b20      	cmp	r3, #32
 800ff0c:	d10e      	bne.n	800ff2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	68db      	ldr	r3, [r3, #12]
 800ff14:	f003 0320 	and.w	r3, r3, #32
 800ff18:	2b20      	cmp	r3, #32
 800ff1a:	d107      	bne.n	800ff2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	f06f 0220 	mvn.w	r2, #32
 800ff24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f000 faaa 	bl	8010480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ff2c:	bf00      	nop
 800ff2e:	3708      	adds	r7, #8
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff48:	2b01      	cmp	r3, #1
 800ff4a:	d101      	bne.n	800ff50 <HAL_TIM_ConfigClockSource+0x1c>
 800ff4c:	2302      	movs	r3, #2
 800ff4e:	e0b4      	b.n	80100ba <HAL_TIM_ConfigClockSource+0x186>
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2201      	movs	r2, #1
 800ff54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2202      	movs	r2, #2
 800ff5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	689b      	ldr	r3, [r3, #8]
 800ff66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ff6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ff76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	68ba      	ldr	r2, [r7, #8]
 800ff7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff88:	d03e      	beq.n	8010008 <HAL_TIM_ConfigClockSource+0xd4>
 800ff8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff8e:	f200 8087 	bhi.w	80100a0 <HAL_TIM_ConfigClockSource+0x16c>
 800ff92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff96:	f000 8086 	beq.w	80100a6 <HAL_TIM_ConfigClockSource+0x172>
 800ff9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff9e:	d87f      	bhi.n	80100a0 <HAL_TIM_ConfigClockSource+0x16c>
 800ffa0:	2b70      	cmp	r3, #112	; 0x70
 800ffa2:	d01a      	beq.n	800ffda <HAL_TIM_ConfigClockSource+0xa6>
 800ffa4:	2b70      	cmp	r3, #112	; 0x70
 800ffa6:	d87b      	bhi.n	80100a0 <HAL_TIM_ConfigClockSource+0x16c>
 800ffa8:	2b60      	cmp	r3, #96	; 0x60
 800ffaa:	d050      	beq.n	801004e <HAL_TIM_ConfigClockSource+0x11a>
 800ffac:	2b60      	cmp	r3, #96	; 0x60
 800ffae:	d877      	bhi.n	80100a0 <HAL_TIM_ConfigClockSource+0x16c>
 800ffb0:	2b50      	cmp	r3, #80	; 0x50
 800ffb2:	d03c      	beq.n	801002e <HAL_TIM_ConfigClockSource+0xfa>
 800ffb4:	2b50      	cmp	r3, #80	; 0x50
 800ffb6:	d873      	bhi.n	80100a0 <HAL_TIM_ConfigClockSource+0x16c>
 800ffb8:	2b40      	cmp	r3, #64	; 0x40
 800ffba:	d058      	beq.n	801006e <HAL_TIM_ConfigClockSource+0x13a>
 800ffbc:	2b40      	cmp	r3, #64	; 0x40
 800ffbe:	d86f      	bhi.n	80100a0 <HAL_TIM_ConfigClockSource+0x16c>
 800ffc0:	2b30      	cmp	r3, #48	; 0x30
 800ffc2:	d064      	beq.n	801008e <HAL_TIM_ConfigClockSource+0x15a>
 800ffc4:	2b30      	cmp	r3, #48	; 0x30
 800ffc6:	d86b      	bhi.n	80100a0 <HAL_TIM_ConfigClockSource+0x16c>
 800ffc8:	2b20      	cmp	r3, #32
 800ffca:	d060      	beq.n	801008e <HAL_TIM_ConfigClockSource+0x15a>
 800ffcc:	2b20      	cmp	r3, #32
 800ffce:	d867      	bhi.n	80100a0 <HAL_TIM_ConfigClockSource+0x16c>
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d05c      	beq.n	801008e <HAL_TIM_ConfigClockSource+0x15a>
 800ffd4:	2b10      	cmp	r3, #16
 800ffd6:	d05a      	beq.n	801008e <HAL_TIM_ConfigClockSource+0x15a>
 800ffd8:	e062      	b.n	80100a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6818      	ldr	r0, [r3, #0]
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	6899      	ldr	r1, [r3, #8]
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	685a      	ldr	r2, [r3, #4]
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	68db      	ldr	r3, [r3, #12]
 800ffea:	f000 f9ad 	bl	8010348 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	689b      	ldr	r3, [r3, #8]
 800fff4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fffc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	68ba      	ldr	r2, [r7, #8]
 8010004:	609a      	str	r2, [r3, #8]
      break;
 8010006:	e04f      	b.n	80100a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6818      	ldr	r0, [r3, #0]
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	6899      	ldr	r1, [r3, #8]
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	685a      	ldr	r2, [r3, #4]
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	68db      	ldr	r3, [r3, #12]
 8010018:	f000 f996 	bl	8010348 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	689a      	ldr	r2, [r3, #8]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801002a:	609a      	str	r2, [r3, #8]
      break;
 801002c:	e03c      	b.n	80100a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6818      	ldr	r0, [r3, #0]
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	6859      	ldr	r1, [r3, #4]
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	68db      	ldr	r3, [r3, #12]
 801003a:	461a      	mov	r2, r3
 801003c:	f000 f90a 	bl	8010254 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	2150      	movs	r1, #80	; 0x50
 8010046:	4618      	mov	r0, r3
 8010048:	f000 f963 	bl	8010312 <TIM_ITRx_SetConfig>
      break;
 801004c:	e02c      	b.n	80100a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6818      	ldr	r0, [r3, #0]
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	6859      	ldr	r1, [r3, #4]
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	68db      	ldr	r3, [r3, #12]
 801005a:	461a      	mov	r2, r3
 801005c:	f000 f929 	bl	80102b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	2160      	movs	r1, #96	; 0x60
 8010066:	4618      	mov	r0, r3
 8010068:	f000 f953 	bl	8010312 <TIM_ITRx_SetConfig>
      break;
 801006c:	e01c      	b.n	80100a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6818      	ldr	r0, [r3, #0]
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	6859      	ldr	r1, [r3, #4]
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	68db      	ldr	r3, [r3, #12]
 801007a:	461a      	mov	r2, r3
 801007c:	f000 f8ea 	bl	8010254 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	2140      	movs	r1, #64	; 0x40
 8010086:	4618      	mov	r0, r3
 8010088:	f000 f943 	bl	8010312 <TIM_ITRx_SetConfig>
      break;
 801008c:	e00c      	b.n	80100a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681a      	ldr	r2, [r3, #0]
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	4619      	mov	r1, r3
 8010098:	4610      	mov	r0, r2
 801009a:	f000 f93a 	bl	8010312 <TIM_ITRx_SetConfig>
      break;
 801009e:	e003      	b.n	80100a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80100a0:	2301      	movs	r3, #1
 80100a2:	73fb      	strb	r3, [r7, #15]
      break;
 80100a4:	e000      	b.n	80100a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80100a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2201      	movs	r2, #1
 80100ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2200      	movs	r2, #0
 80100b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80100b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3710      	adds	r7, #16
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}

080100c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80100c2:	b480      	push	{r7}
 80100c4:	b083      	sub	sp, #12
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80100ca:	bf00      	nop
 80100cc:	370c      	adds	r7, #12
 80100ce:	46bd      	mov	sp, r7
 80100d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d4:	4770      	bx	lr

080100d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80100d6:	b480      	push	{r7}
 80100d8:	b083      	sub	sp, #12
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80100de:	bf00      	nop
 80100e0:	370c      	adds	r7, #12
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr

080100ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80100ea:	b480      	push	{r7}
 80100ec:	b083      	sub	sp, #12
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80100f2:	bf00      	nop
 80100f4:	370c      	adds	r7, #12
 80100f6:	46bd      	mov	sp, r7
 80100f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fc:	4770      	bx	lr

080100fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80100fe:	b480      	push	{r7}
 8010100:	b083      	sub	sp, #12
 8010102:	af00      	add	r7, sp, #0
 8010104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010106:	bf00      	nop
 8010108:	370c      	adds	r7, #12
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr
	...

08010114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010114:	b480      	push	{r7}
 8010116:	b085      	sub	sp, #20
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	4a40      	ldr	r2, [pc, #256]	; (8010228 <TIM_Base_SetConfig+0x114>)
 8010128:	4293      	cmp	r3, r2
 801012a:	d013      	beq.n	8010154 <TIM_Base_SetConfig+0x40>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010132:	d00f      	beq.n	8010154 <TIM_Base_SetConfig+0x40>
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	4a3d      	ldr	r2, [pc, #244]	; (801022c <TIM_Base_SetConfig+0x118>)
 8010138:	4293      	cmp	r3, r2
 801013a:	d00b      	beq.n	8010154 <TIM_Base_SetConfig+0x40>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	4a3c      	ldr	r2, [pc, #240]	; (8010230 <TIM_Base_SetConfig+0x11c>)
 8010140:	4293      	cmp	r3, r2
 8010142:	d007      	beq.n	8010154 <TIM_Base_SetConfig+0x40>
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	4a3b      	ldr	r2, [pc, #236]	; (8010234 <TIM_Base_SetConfig+0x120>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d003      	beq.n	8010154 <TIM_Base_SetConfig+0x40>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	4a3a      	ldr	r2, [pc, #232]	; (8010238 <TIM_Base_SetConfig+0x124>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d108      	bne.n	8010166 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801015a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	685b      	ldr	r3, [r3, #4]
 8010160:	68fa      	ldr	r2, [r7, #12]
 8010162:	4313      	orrs	r3, r2
 8010164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	4a2f      	ldr	r2, [pc, #188]	; (8010228 <TIM_Base_SetConfig+0x114>)
 801016a:	4293      	cmp	r3, r2
 801016c:	d02b      	beq.n	80101c6 <TIM_Base_SetConfig+0xb2>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010174:	d027      	beq.n	80101c6 <TIM_Base_SetConfig+0xb2>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	4a2c      	ldr	r2, [pc, #176]	; (801022c <TIM_Base_SetConfig+0x118>)
 801017a:	4293      	cmp	r3, r2
 801017c:	d023      	beq.n	80101c6 <TIM_Base_SetConfig+0xb2>
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	4a2b      	ldr	r2, [pc, #172]	; (8010230 <TIM_Base_SetConfig+0x11c>)
 8010182:	4293      	cmp	r3, r2
 8010184:	d01f      	beq.n	80101c6 <TIM_Base_SetConfig+0xb2>
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	4a2a      	ldr	r2, [pc, #168]	; (8010234 <TIM_Base_SetConfig+0x120>)
 801018a:	4293      	cmp	r3, r2
 801018c:	d01b      	beq.n	80101c6 <TIM_Base_SetConfig+0xb2>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	4a29      	ldr	r2, [pc, #164]	; (8010238 <TIM_Base_SetConfig+0x124>)
 8010192:	4293      	cmp	r3, r2
 8010194:	d017      	beq.n	80101c6 <TIM_Base_SetConfig+0xb2>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	4a28      	ldr	r2, [pc, #160]	; (801023c <TIM_Base_SetConfig+0x128>)
 801019a:	4293      	cmp	r3, r2
 801019c:	d013      	beq.n	80101c6 <TIM_Base_SetConfig+0xb2>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4a27      	ldr	r2, [pc, #156]	; (8010240 <TIM_Base_SetConfig+0x12c>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d00f      	beq.n	80101c6 <TIM_Base_SetConfig+0xb2>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	4a26      	ldr	r2, [pc, #152]	; (8010244 <TIM_Base_SetConfig+0x130>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d00b      	beq.n	80101c6 <TIM_Base_SetConfig+0xb2>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	4a25      	ldr	r2, [pc, #148]	; (8010248 <TIM_Base_SetConfig+0x134>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d007      	beq.n	80101c6 <TIM_Base_SetConfig+0xb2>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	4a24      	ldr	r2, [pc, #144]	; (801024c <TIM_Base_SetConfig+0x138>)
 80101ba:	4293      	cmp	r3, r2
 80101bc:	d003      	beq.n	80101c6 <TIM_Base_SetConfig+0xb2>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	4a23      	ldr	r2, [pc, #140]	; (8010250 <TIM_Base_SetConfig+0x13c>)
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d108      	bne.n	80101d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	68db      	ldr	r3, [r3, #12]
 80101d2:	68fa      	ldr	r2, [r7, #12]
 80101d4:	4313      	orrs	r3, r2
 80101d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	695b      	ldr	r3, [r3, #20]
 80101e2:	4313      	orrs	r3, r2
 80101e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	68fa      	ldr	r2, [r7, #12]
 80101ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	689a      	ldr	r2, [r3, #8]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	681a      	ldr	r2, [r3, #0]
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	4a0a      	ldr	r2, [pc, #40]	; (8010228 <TIM_Base_SetConfig+0x114>)
 8010200:	4293      	cmp	r3, r2
 8010202:	d003      	beq.n	801020c <TIM_Base_SetConfig+0xf8>
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	4a0c      	ldr	r2, [pc, #48]	; (8010238 <TIM_Base_SetConfig+0x124>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d103      	bne.n	8010214 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	691a      	ldr	r2, [r3, #16]
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2201      	movs	r2, #1
 8010218:	615a      	str	r2, [r3, #20]
}
 801021a:	bf00      	nop
 801021c:	3714      	adds	r7, #20
 801021e:	46bd      	mov	sp, r7
 8010220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop
 8010228:	40010000 	.word	0x40010000
 801022c:	40000400 	.word	0x40000400
 8010230:	40000800 	.word	0x40000800
 8010234:	40000c00 	.word	0x40000c00
 8010238:	40010400 	.word	0x40010400
 801023c:	40014000 	.word	0x40014000
 8010240:	40014400 	.word	0x40014400
 8010244:	40014800 	.word	0x40014800
 8010248:	40001800 	.word	0x40001800
 801024c:	40001c00 	.word	0x40001c00
 8010250:	40002000 	.word	0x40002000

08010254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010254:	b480      	push	{r7}
 8010256:	b087      	sub	sp, #28
 8010258:	af00      	add	r7, sp, #0
 801025a:	60f8      	str	r0, [r7, #12]
 801025c:	60b9      	str	r1, [r7, #8]
 801025e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	6a1b      	ldr	r3, [r3, #32]
 8010264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	6a1b      	ldr	r3, [r3, #32]
 801026a:	f023 0201 	bic.w	r2, r3, #1
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	699b      	ldr	r3, [r3, #24]
 8010276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801027e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	011b      	lsls	r3, r3, #4
 8010284:	693a      	ldr	r2, [r7, #16]
 8010286:	4313      	orrs	r3, r2
 8010288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	f023 030a 	bic.w	r3, r3, #10
 8010290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010292:	697a      	ldr	r2, [r7, #20]
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	4313      	orrs	r3, r2
 8010298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	693a      	ldr	r2, [r7, #16]
 801029e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	697a      	ldr	r2, [r7, #20]
 80102a4:	621a      	str	r2, [r3, #32]
}
 80102a6:	bf00      	nop
 80102a8:	371c      	adds	r7, #28
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr

080102b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80102b2:	b480      	push	{r7}
 80102b4:	b087      	sub	sp, #28
 80102b6:	af00      	add	r7, sp, #0
 80102b8:	60f8      	str	r0, [r7, #12]
 80102ba:	60b9      	str	r1, [r7, #8]
 80102bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	6a1b      	ldr	r3, [r3, #32]
 80102c2:	f023 0210 	bic.w	r2, r3, #16
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	699b      	ldr	r3, [r3, #24]
 80102ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	6a1b      	ldr	r3, [r3, #32]
 80102d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80102dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	031b      	lsls	r3, r3, #12
 80102e2:	697a      	ldr	r2, [r7, #20]
 80102e4:	4313      	orrs	r3, r2
 80102e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80102ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	011b      	lsls	r3, r3, #4
 80102f4:	693a      	ldr	r2, [r7, #16]
 80102f6:	4313      	orrs	r3, r2
 80102f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	697a      	ldr	r2, [r7, #20]
 80102fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	693a      	ldr	r2, [r7, #16]
 8010304:	621a      	str	r2, [r3, #32]
}
 8010306:	bf00      	nop
 8010308:	371c      	adds	r7, #28
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr

08010312 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010312:	b480      	push	{r7}
 8010314:	b085      	sub	sp, #20
 8010316:	af00      	add	r7, sp, #0
 8010318:	6078      	str	r0, [r7, #4]
 801031a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	689b      	ldr	r3, [r3, #8]
 8010320:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801032a:	683a      	ldr	r2, [r7, #0]
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	4313      	orrs	r3, r2
 8010330:	f043 0307 	orr.w	r3, r3, #7
 8010334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	68fa      	ldr	r2, [r7, #12]
 801033a:	609a      	str	r2, [r3, #8]
}
 801033c:	bf00      	nop
 801033e:	3714      	adds	r7, #20
 8010340:	46bd      	mov	sp, r7
 8010342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010346:	4770      	bx	lr

08010348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010348:	b480      	push	{r7}
 801034a:	b087      	sub	sp, #28
 801034c:	af00      	add	r7, sp, #0
 801034e:	60f8      	str	r0, [r7, #12]
 8010350:	60b9      	str	r1, [r7, #8]
 8010352:	607a      	str	r2, [r7, #4]
 8010354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	689b      	ldr	r3, [r3, #8]
 801035a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	021a      	lsls	r2, r3, #8
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	431a      	orrs	r2, r3
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	4313      	orrs	r3, r2
 8010370:	697a      	ldr	r2, [r7, #20]
 8010372:	4313      	orrs	r3, r2
 8010374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	697a      	ldr	r2, [r7, #20]
 801037a:	609a      	str	r2, [r3, #8]
}
 801037c:	bf00      	nop
 801037e:	371c      	adds	r7, #28
 8010380:	46bd      	mov	sp, r7
 8010382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010386:	4770      	bx	lr

08010388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010388:	b480      	push	{r7}
 801038a:	b085      	sub	sp, #20
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010398:	2b01      	cmp	r3, #1
 801039a:	d101      	bne.n	80103a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801039c:	2302      	movs	r3, #2
 801039e:	e05a      	b.n	8010456 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2201      	movs	r2, #1
 80103a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2202      	movs	r2, #2
 80103ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	685b      	ldr	r3, [r3, #4]
 80103b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	689b      	ldr	r3, [r3, #8]
 80103be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	68fa      	ldr	r2, [r7, #12]
 80103ce:	4313      	orrs	r3, r2
 80103d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	68fa      	ldr	r2, [r7, #12]
 80103d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	4a21      	ldr	r2, [pc, #132]	; (8010464 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80103e0:	4293      	cmp	r3, r2
 80103e2:	d022      	beq.n	801042a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80103ec:	d01d      	beq.n	801042a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	4a1d      	ldr	r2, [pc, #116]	; (8010468 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80103f4:	4293      	cmp	r3, r2
 80103f6:	d018      	beq.n	801042a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	4a1b      	ldr	r2, [pc, #108]	; (801046c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80103fe:	4293      	cmp	r3, r2
 8010400:	d013      	beq.n	801042a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	4a1a      	ldr	r2, [pc, #104]	; (8010470 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010408:	4293      	cmp	r3, r2
 801040a:	d00e      	beq.n	801042a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4a18      	ldr	r2, [pc, #96]	; (8010474 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d009      	beq.n	801042a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	4a17      	ldr	r2, [pc, #92]	; (8010478 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801041c:	4293      	cmp	r3, r2
 801041e:	d004      	beq.n	801042a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	4a15      	ldr	r2, [pc, #84]	; (801047c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010426:	4293      	cmp	r3, r2
 8010428:	d10c      	bne.n	8010444 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010430:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	685b      	ldr	r3, [r3, #4]
 8010436:	68ba      	ldr	r2, [r7, #8]
 8010438:	4313      	orrs	r3, r2
 801043a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	68ba      	ldr	r2, [r7, #8]
 8010442:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2201      	movs	r2, #1
 8010448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2200      	movs	r2, #0
 8010450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010454:	2300      	movs	r3, #0
}
 8010456:	4618      	mov	r0, r3
 8010458:	3714      	adds	r7, #20
 801045a:	46bd      	mov	sp, r7
 801045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010460:	4770      	bx	lr
 8010462:	bf00      	nop
 8010464:	40010000 	.word	0x40010000
 8010468:	40000400 	.word	0x40000400
 801046c:	40000800 	.word	0x40000800
 8010470:	40000c00 	.word	0x40000c00
 8010474:	40010400 	.word	0x40010400
 8010478:	40014000 	.word	0x40014000
 801047c:	40001800 	.word	0x40001800

08010480 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010480:	b480      	push	{r7}
 8010482:	b083      	sub	sp, #12
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010488:	bf00      	nop
 801048a:	370c      	adds	r7, #12
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr

08010494 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010494:	b480      	push	{r7}
 8010496:	b083      	sub	sp, #12
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801049c:	bf00      	nop
 801049e:	370c      	adds	r7, #12
 80104a0:	46bd      	mov	sp, r7
 80104a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a6:	4770      	bx	lr

080104a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b082      	sub	sp, #8
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d101      	bne.n	80104ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80104b6:	2301      	movs	r3, #1
 80104b8:	e03f      	b.n	801053a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d106      	bne.n	80104d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2200      	movs	r2, #0
 80104ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f7f4 fcae 	bl	8004e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2224      	movs	r2, #36	; 0x24
 80104d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	68da      	ldr	r2, [r3, #12]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80104ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 fe2b 	bl	8011148 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	691a      	ldr	r2, [r3, #16]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010500:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	695a      	ldr	r2, [r3, #20]
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010510:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	68da      	ldr	r2, [r3, #12]
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010520:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	2200      	movs	r2, #0
 8010526:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2220      	movs	r2, #32
 801052c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2220      	movs	r2, #32
 8010534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010538:	2300      	movs	r3, #0
}
 801053a:	4618      	mov	r0, r3
 801053c:	3708      	adds	r7, #8
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010542:	b580      	push	{r7, lr}
 8010544:	b084      	sub	sp, #16
 8010546:	af00      	add	r7, sp, #0
 8010548:	60f8      	str	r0, [r7, #12]
 801054a:	60b9      	str	r1, [r7, #8]
 801054c:	4613      	mov	r3, r2
 801054e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010556:	b2db      	uxtb	r3, r3
 8010558:	2b20      	cmp	r3, #32
 801055a:	d11d      	bne.n	8010598 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d002      	beq.n	8010568 <HAL_UART_Receive_IT+0x26>
 8010562:	88fb      	ldrh	r3, [r7, #6]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d101      	bne.n	801056c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010568:	2301      	movs	r3, #1
 801056a:	e016      	b.n	801059a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010572:	2b01      	cmp	r3, #1
 8010574:	d101      	bne.n	801057a <HAL_UART_Receive_IT+0x38>
 8010576:	2302      	movs	r3, #2
 8010578:	e00f      	b.n	801059a <HAL_UART_Receive_IT+0x58>
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2201      	movs	r2, #1
 801057e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	2200      	movs	r2, #0
 8010586:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010588:	88fb      	ldrh	r3, [r7, #6]
 801058a:	461a      	mov	r2, r3
 801058c:	68b9      	ldr	r1, [r7, #8]
 801058e:	68f8      	ldr	r0, [r7, #12]
 8010590:	f000 fbd9 	bl	8010d46 <UART_Start_Receive_IT>
 8010594:	4603      	mov	r3, r0
 8010596:	e000      	b.n	801059a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8010598:	2302      	movs	r3, #2
  }
}
 801059a:	4618      	mov	r0, r3
 801059c:	3710      	adds	r7, #16
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}
	...

080105a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b08c      	sub	sp, #48	; 0x30
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	60f8      	str	r0, [r7, #12]
 80105ac:	60b9      	str	r1, [r7, #8]
 80105ae:	4613      	mov	r3, r2
 80105b0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105b8:	b2db      	uxtb	r3, r3
 80105ba:	2b20      	cmp	r3, #32
 80105bc:	d165      	bne.n	801068a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d002      	beq.n	80105ca <HAL_UART_Transmit_DMA+0x26>
 80105c4:	88fb      	ldrh	r3, [r7, #6]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d101      	bne.n	80105ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80105ca:	2301      	movs	r3, #1
 80105cc:	e05e      	b.n	801068c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	d101      	bne.n	80105dc <HAL_UART_Transmit_DMA+0x38>
 80105d8:	2302      	movs	r3, #2
 80105da:	e057      	b.n	801068c <HAL_UART_Transmit_DMA+0xe8>
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	2201      	movs	r2, #1
 80105e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80105e4:	68ba      	ldr	r2, [r7, #8]
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	88fa      	ldrh	r2, [r7, #6]
 80105ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	88fa      	ldrh	r2, [r7, #6]
 80105f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	2200      	movs	r2, #0
 80105fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	2221      	movs	r2, #33	; 0x21
 8010600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010608:	4a22      	ldr	r2, [pc, #136]	; (8010694 <HAL_UART_Transmit_DMA+0xf0>)
 801060a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010610:	4a21      	ldr	r2, [pc, #132]	; (8010698 <HAL_UART_Transmit_DMA+0xf4>)
 8010612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010618:	4a20      	ldr	r2, [pc, #128]	; (801069c <HAL_UART_Transmit_DMA+0xf8>)
 801061a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010620:	2200      	movs	r2, #0
 8010622:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8010624:	f107 0308 	add.w	r3, r7, #8
 8010628:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801062e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010630:	6819      	ldr	r1, [r3, #0]
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	3304      	adds	r3, #4
 8010638:	461a      	mov	r2, r3
 801063a:	88fb      	ldrh	r3, [r7, #6]
 801063c:	f7fa f910 	bl	800a860 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010648:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	2200      	movs	r2, #0
 801064e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	3314      	adds	r3, #20
 8010658:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801065a:	69bb      	ldr	r3, [r7, #24]
 801065c:	e853 3f00 	ldrex	r3, [r3]
 8010660:	617b      	str	r3, [r7, #20]
   return(result);
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010668:	62bb      	str	r3, [r7, #40]	; 0x28
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	3314      	adds	r3, #20
 8010670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010672:	627a      	str	r2, [r7, #36]	; 0x24
 8010674:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010676:	6a39      	ldr	r1, [r7, #32]
 8010678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801067a:	e841 2300 	strex	r3, r2, [r1]
 801067e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d1e5      	bne.n	8010652 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8010686:	2300      	movs	r3, #0
 8010688:	e000      	b.n	801068c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 801068a:	2302      	movs	r3, #2
  }
}
 801068c:	4618      	mov	r0, r3
 801068e:	3730      	adds	r7, #48	; 0x30
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}
 8010694:	08010bfd 	.word	0x08010bfd
 8010698:	08010c97 	.word	0x08010c97
 801069c:	08010cb3 	.word	0x08010cb3

080106a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b0ba      	sub	sp, #232	; 0xe8
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	68db      	ldr	r3, [r3, #12]
 80106b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	695b      	ldr	r3, [r3, #20]
 80106c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80106c6:	2300      	movs	r3, #0
 80106c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80106cc:	2300      	movs	r3, #0
 80106ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80106d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106d6:	f003 030f 	and.w	r3, r3, #15
 80106da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80106de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d10f      	bne.n	8010706 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80106e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106ea:	f003 0320 	and.w	r3, r3, #32
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d009      	beq.n	8010706 <HAL_UART_IRQHandler+0x66>
 80106f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106f6:	f003 0320 	and.w	r3, r3, #32
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d003      	beq.n	8010706 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f000 fc66 	bl	8010fd0 <UART_Receive_IT>
      return;
 8010704:	e256      	b.n	8010bb4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8010706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801070a:	2b00      	cmp	r3, #0
 801070c:	f000 80de 	beq.w	80108cc <HAL_UART_IRQHandler+0x22c>
 8010710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010714:	f003 0301 	and.w	r3, r3, #1
 8010718:	2b00      	cmp	r3, #0
 801071a:	d106      	bne.n	801072a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801071c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010720:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010724:	2b00      	cmp	r3, #0
 8010726:	f000 80d1 	beq.w	80108cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801072a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801072e:	f003 0301 	and.w	r3, r3, #1
 8010732:	2b00      	cmp	r3, #0
 8010734:	d00b      	beq.n	801074e <HAL_UART_IRQHandler+0xae>
 8010736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801073a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801073e:	2b00      	cmp	r3, #0
 8010740:	d005      	beq.n	801074e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010746:	f043 0201 	orr.w	r2, r3, #1
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801074e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010752:	f003 0304 	and.w	r3, r3, #4
 8010756:	2b00      	cmp	r3, #0
 8010758:	d00b      	beq.n	8010772 <HAL_UART_IRQHandler+0xd2>
 801075a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801075e:	f003 0301 	and.w	r3, r3, #1
 8010762:	2b00      	cmp	r3, #0
 8010764:	d005      	beq.n	8010772 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801076a:	f043 0202 	orr.w	r2, r3, #2
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010776:	f003 0302 	and.w	r3, r3, #2
 801077a:	2b00      	cmp	r3, #0
 801077c:	d00b      	beq.n	8010796 <HAL_UART_IRQHandler+0xf6>
 801077e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010782:	f003 0301 	and.w	r3, r3, #1
 8010786:	2b00      	cmp	r3, #0
 8010788:	d005      	beq.n	8010796 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801078e:	f043 0204 	orr.w	r2, r3, #4
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801079a:	f003 0308 	and.w	r3, r3, #8
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d011      	beq.n	80107c6 <HAL_UART_IRQHandler+0x126>
 80107a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107a6:	f003 0320 	and.w	r3, r3, #32
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d105      	bne.n	80107ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80107ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107b2:	f003 0301 	and.w	r3, r3, #1
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d005      	beq.n	80107c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107be:	f043 0208 	orr.w	r2, r3, #8
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	f000 81ed 	beq.w	8010baa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80107d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107d4:	f003 0320 	and.w	r3, r3, #32
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d008      	beq.n	80107ee <HAL_UART_IRQHandler+0x14e>
 80107dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107e0:	f003 0320 	and.w	r3, r3, #32
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d002      	beq.n	80107ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f000 fbf1 	bl	8010fd0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	695b      	ldr	r3, [r3, #20]
 80107f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107f8:	2b40      	cmp	r3, #64	; 0x40
 80107fa:	bf0c      	ite	eq
 80107fc:	2301      	moveq	r3, #1
 80107fe:	2300      	movne	r3, #0
 8010800:	b2db      	uxtb	r3, r3
 8010802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801080a:	f003 0308 	and.w	r3, r3, #8
 801080e:	2b00      	cmp	r3, #0
 8010810:	d103      	bne.n	801081a <HAL_UART_IRQHandler+0x17a>
 8010812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010816:	2b00      	cmp	r3, #0
 8010818:	d04f      	beq.n	80108ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f000 faf9 	bl	8010e12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	695b      	ldr	r3, [r3, #20]
 8010826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801082a:	2b40      	cmp	r3, #64	; 0x40
 801082c:	d141      	bne.n	80108b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	3314      	adds	r3, #20
 8010834:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010838:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801083c:	e853 3f00 	ldrex	r3, [r3]
 8010840:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010844:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801084c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	3314      	adds	r3, #20
 8010856:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801085a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801085e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010862:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010866:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801086a:	e841 2300 	strex	r3, r2, [r1]
 801086e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010876:	2b00      	cmp	r3, #0
 8010878:	d1d9      	bne.n	801082e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801087e:	2b00      	cmp	r3, #0
 8010880:	d013      	beq.n	80108aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010886:	4a7d      	ldr	r2, [pc, #500]	; (8010a7c <HAL_UART_IRQHandler+0x3dc>)
 8010888:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801088e:	4618      	mov	r0, r3
 8010890:	f7fa f8ae 	bl	800a9f0 <HAL_DMA_Abort_IT>
 8010894:	4603      	mov	r3, r0
 8010896:	2b00      	cmp	r3, #0
 8010898:	d016      	beq.n	80108c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801089e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108a0:	687a      	ldr	r2, [r7, #4]
 80108a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80108a4:	4610      	mov	r0, r2
 80108a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108a8:	e00e      	b.n	80108c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f000 f990 	bl	8010bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108b0:	e00a      	b.n	80108c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f000 f98c 	bl	8010bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108b8:	e006      	b.n	80108c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f000 f988 	bl	8010bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2200      	movs	r2, #0
 80108c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80108c6:	e170      	b.n	8010baa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108c8:	bf00      	nop
    return;
 80108ca:	e16e      	b.n	8010baa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108d0:	2b01      	cmp	r3, #1
 80108d2:	f040 814a 	bne.w	8010b6a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80108d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108da:	f003 0310 	and.w	r3, r3, #16
 80108de:	2b00      	cmp	r3, #0
 80108e0:	f000 8143 	beq.w	8010b6a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80108e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108e8:	f003 0310 	and.w	r3, r3, #16
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	f000 813c 	beq.w	8010b6a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80108f2:	2300      	movs	r3, #0
 80108f4:	60bb      	str	r3, [r7, #8]
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	60bb      	str	r3, [r7, #8]
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	60bb      	str	r3, [r7, #8]
 8010906:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	695b      	ldr	r3, [r3, #20]
 801090e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010912:	2b40      	cmp	r3, #64	; 0x40
 8010914:	f040 80b4 	bne.w	8010a80 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010924:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010928:	2b00      	cmp	r3, #0
 801092a:	f000 8140 	beq.w	8010bae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010936:	429a      	cmp	r2, r3
 8010938:	f080 8139 	bcs.w	8010bae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010942:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010948:	69db      	ldr	r3, [r3, #28]
 801094a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801094e:	f000 8088 	beq.w	8010a62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	330c      	adds	r3, #12
 8010958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801095c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010960:	e853 3f00 	ldrex	r3, [r3]
 8010964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010968:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801096c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010970:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	330c      	adds	r3, #12
 801097a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801097e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010986:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801098a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801098e:	e841 2300 	strex	r3, r2, [r1]
 8010992:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801099a:	2b00      	cmp	r3, #0
 801099c:	d1d9      	bne.n	8010952 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	3314      	adds	r3, #20
 80109a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109a8:	e853 3f00 	ldrex	r3, [r3]
 80109ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80109ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80109b0:	f023 0301 	bic.w	r3, r3, #1
 80109b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	3314      	adds	r3, #20
 80109be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80109c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80109c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80109ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80109ce:	e841 2300 	strex	r3, r2, [r1]
 80109d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80109d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d1e1      	bne.n	801099e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	3314      	adds	r3, #20
 80109e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109e4:	e853 3f00 	ldrex	r3, [r3]
 80109e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80109ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	3314      	adds	r3, #20
 80109fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80109fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010a00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010a04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010a06:	e841 2300 	strex	r3, r2, [r1]
 8010a0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d1e3      	bne.n	80109da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2220      	movs	r2, #32
 8010a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	330c      	adds	r3, #12
 8010a26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a2a:	e853 3f00 	ldrex	r3, [r3]
 8010a2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a32:	f023 0310 	bic.w	r3, r3, #16
 8010a36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	330c      	adds	r3, #12
 8010a40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010a44:	65ba      	str	r2, [r7, #88]	; 0x58
 8010a46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010a4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a4c:	e841 2300 	strex	r3, r2, [r1]
 8010a50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d1e3      	bne.n	8010a20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7f9 ff57 	bl	800a910 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010a6a:	b29b      	uxth	r3, r3
 8010a6c:	1ad3      	subs	r3, r2, r3
 8010a6e:	b29b      	uxth	r3, r3
 8010a70:	4619      	mov	r1, r3
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f000 f8b6 	bl	8010be4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010a78:	e099      	b.n	8010bae <HAL_UART_IRQHandler+0x50e>
 8010a7a:	bf00      	nop
 8010a7c:	08010ed9 	.word	0x08010ed9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	1ad3      	subs	r3, r2, r3
 8010a8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010a94:	b29b      	uxth	r3, r3
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	f000 808b 	beq.w	8010bb2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8010a9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	f000 8086 	beq.w	8010bb2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	330c      	adds	r3, #12
 8010aac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab0:	e853 3f00 	ldrex	r3, [r3]
 8010ab4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ab8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010abc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	330c      	adds	r3, #12
 8010ac6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010aca:	647a      	str	r2, [r7, #68]	; 0x44
 8010acc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ace:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010ad0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ad2:	e841 2300 	strex	r3, r2, [r1]
 8010ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d1e3      	bne.n	8010aa6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	3314      	adds	r3, #20
 8010ae4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae8:	e853 3f00 	ldrex	r3, [r3]
 8010aec:	623b      	str	r3, [r7, #32]
   return(result);
 8010aee:	6a3b      	ldr	r3, [r7, #32]
 8010af0:	f023 0301 	bic.w	r3, r3, #1
 8010af4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	3314      	adds	r3, #20
 8010afe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010b02:	633a      	str	r2, [r7, #48]	; 0x30
 8010b04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b0a:	e841 2300 	strex	r3, r2, [r1]
 8010b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d1e3      	bne.n	8010ade <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2220      	movs	r2, #32
 8010b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2200      	movs	r2, #0
 8010b22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	330c      	adds	r3, #12
 8010b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b2c:	693b      	ldr	r3, [r7, #16]
 8010b2e:	e853 3f00 	ldrex	r3, [r3]
 8010b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	f023 0310 	bic.w	r3, r3, #16
 8010b3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	330c      	adds	r3, #12
 8010b44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010b48:	61fa      	str	r2, [r7, #28]
 8010b4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b4c:	69b9      	ldr	r1, [r7, #24]
 8010b4e:	69fa      	ldr	r2, [r7, #28]
 8010b50:	e841 2300 	strex	r3, r2, [r1]
 8010b54:	617b      	str	r3, [r7, #20]
   return(result);
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d1e3      	bne.n	8010b24 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010b5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010b60:	4619      	mov	r1, r3
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f000 f83e 	bl	8010be4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010b68:	e023      	b.n	8010bb2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d009      	beq.n	8010b8a <HAL_UART_IRQHandler+0x4ea>
 8010b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d003      	beq.n	8010b8a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f000 f9bc 	bl	8010f00 <UART_Transmit_IT>
    return;
 8010b88:	e014      	b.n	8010bb4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d00e      	beq.n	8010bb4 <HAL_UART_IRQHandler+0x514>
 8010b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d008      	beq.n	8010bb4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f000 f9fc 	bl	8010fa0 <UART_EndTransmit_IT>
    return;
 8010ba8:	e004      	b.n	8010bb4 <HAL_UART_IRQHandler+0x514>
    return;
 8010baa:	bf00      	nop
 8010bac:	e002      	b.n	8010bb4 <HAL_UART_IRQHandler+0x514>
      return;
 8010bae:	bf00      	nop
 8010bb0:	e000      	b.n	8010bb4 <HAL_UART_IRQHandler+0x514>
      return;
 8010bb2:	bf00      	nop
  }
}
 8010bb4:	37e8      	adds	r7, #232	; 0xe8
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}
 8010bba:	bf00      	nop

08010bbc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	b083      	sub	sp, #12
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8010bc4:	bf00      	nop
 8010bc6:	370c      	adds	r7, #12
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bce:	4770      	bx	lr

08010bd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b083      	sub	sp, #12
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010bd8:	bf00      	nop
 8010bda:	370c      	adds	r7, #12
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr

08010be4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b083      	sub	sp, #12
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	460b      	mov	r3, r1
 8010bee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010bf0:	bf00      	nop
 8010bf2:	370c      	adds	r7, #12
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfa:	4770      	bx	lr

08010bfc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b090      	sub	sp, #64	; 0x40
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c08:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d137      	bne.n	8010c88 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8010c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	3314      	adds	r3, #20
 8010c24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c28:	e853 3f00 	ldrex	r3, [r3]
 8010c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8010c2e:	6a3b      	ldr	r3, [r7, #32]
 8010c30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c34:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	3314      	adds	r3, #20
 8010c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c3e:	633a      	str	r2, [r7, #48]	; 0x30
 8010c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c46:	e841 2300 	strex	r3, r2, [r1]
 8010c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d1e5      	bne.n	8010c1e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	330c      	adds	r3, #12
 8010c58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	e853 3f00 	ldrex	r3, [r3]
 8010c60:	60fb      	str	r3, [r7, #12]
   return(result);
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c68:	637b      	str	r3, [r7, #52]	; 0x34
 8010c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	330c      	adds	r3, #12
 8010c70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c72:	61fa      	str	r2, [r7, #28]
 8010c74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c76:	69b9      	ldr	r1, [r7, #24]
 8010c78:	69fa      	ldr	r2, [r7, #28]
 8010c7a:	e841 2300 	strex	r3, r2, [r1]
 8010c7e:	617b      	str	r3, [r7, #20]
   return(result);
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d1e5      	bne.n	8010c52 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010c86:	e002      	b.n	8010c8e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8010c88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c8a:	f7f2 fa69 	bl	8003160 <HAL_UART_TxCpltCallback>
}
 8010c8e:	bf00      	nop
 8010c90:	3740      	adds	r7, #64	; 0x40
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}

08010c96 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010c96:	b580      	push	{r7, lr}
 8010c98:	b084      	sub	sp, #16
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ca2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010ca4:	68f8      	ldr	r0, [r7, #12]
 8010ca6:	f7ff ff89 	bl	8010bbc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010caa:	bf00      	nop
 8010cac:	3710      	adds	r7, #16
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}

08010cb2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010cb2:	b580      	push	{r7, lr}
 8010cb4:	b084      	sub	sp, #16
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cc2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	695b      	ldr	r3, [r3, #20]
 8010cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cce:	2b80      	cmp	r3, #128	; 0x80
 8010cd0:	bf0c      	ite	eq
 8010cd2:	2301      	moveq	r3, #1
 8010cd4:	2300      	movne	r3, #0
 8010cd6:	b2db      	uxtb	r3, r3
 8010cd8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010ce0:	b2db      	uxtb	r3, r3
 8010ce2:	2b21      	cmp	r3, #33	; 0x21
 8010ce4:	d108      	bne.n	8010cf8 <UART_DMAError+0x46>
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d005      	beq.n	8010cf8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	2200      	movs	r2, #0
 8010cf0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010cf2:	68b8      	ldr	r0, [r7, #8]
 8010cf4:	f000 f865 	bl	8010dc2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	695b      	ldr	r3, [r3, #20]
 8010cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d02:	2b40      	cmp	r3, #64	; 0x40
 8010d04:	bf0c      	ite	eq
 8010d06:	2301      	moveq	r3, #1
 8010d08:	2300      	movne	r3, #0
 8010d0a:	b2db      	uxtb	r3, r3
 8010d0c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010d14:	b2db      	uxtb	r3, r3
 8010d16:	2b22      	cmp	r3, #34	; 0x22
 8010d18:	d108      	bne.n	8010d2c <UART_DMAError+0x7a>
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d005      	beq.n	8010d2c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	2200      	movs	r2, #0
 8010d24:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010d26:	68b8      	ldr	r0, [r7, #8]
 8010d28:	f000 f873 	bl	8010e12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d30:	f043 0210 	orr.w	r2, r3, #16
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010d38:	68b8      	ldr	r0, [r7, #8]
 8010d3a:	f7ff ff49 	bl	8010bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d3e:	bf00      	nop
 8010d40:	3710      	adds	r7, #16
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}

08010d46 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010d46:	b480      	push	{r7}
 8010d48:	b085      	sub	sp, #20
 8010d4a:	af00      	add	r7, sp, #0
 8010d4c:	60f8      	str	r0, [r7, #12]
 8010d4e:	60b9      	str	r1, [r7, #8]
 8010d50:	4613      	mov	r3, r2
 8010d52:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	68ba      	ldr	r2, [r7, #8]
 8010d58:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	88fa      	ldrh	r2, [r7, #6]
 8010d5e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	88fa      	ldrh	r2, [r7, #6]
 8010d64:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	2222      	movs	r2, #34	; 0x22
 8010d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	2200      	movs	r2, #0
 8010d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	691b      	ldr	r3, [r3, #16]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d007      	beq.n	8010d94 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	68da      	ldr	r2, [r3, #12]
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010d92:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	695a      	ldr	r2, [r3, #20]
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	f042 0201 	orr.w	r2, r2, #1
 8010da2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	68da      	ldr	r2, [r3, #12]
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	f042 0220 	orr.w	r2, r2, #32
 8010db2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010db4:	2300      	movs	r3, #0
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3714      	adds	r7, #20
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc0:	4770      	bx	lr

08010dc2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010dc2:	b480      	push	{r7}
 8010dc4:	b089      	sub	sp, #36	; 0x24
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	330c      	adds	r3, #12
 8010dd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	e853 3f00 	ldrex	r3, [r3]
 8010dd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010de0:	61fb      	str	r3, [r7, #28]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	330c      	adds	r3, #12
 8010de8:	69fa      	ldr	r2, [r7, #28]
 8010dea:	61ba      	str	r2, [r7, #24]
 8010dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dee:	6979      	ldr	r1, [r7, #20]
 8010df0:	69ba      	ldr	r2, [r7, #24]
 8010df2:	e841 2300 	strex	r3, r2, [r1]
 8010df6:	613b      	str	r3, [r7, #16]
   return(result);
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d1e5      	bne.n	8010dca <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2220      	movs	r2, #32
 8010e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8010e06:	bf00      	nop
 8010e08:	3724      	adds	r7, #36	; 0x24
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e10:	4770      	bx	lr

08010e12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010e12:	b480      	push	{r7}
 8010e14:	b095      	sub	sp, #84	; 0x54
 8010e16:	af00      	add	r7, sp, #0
 8010e18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	330c      	adds	r3, #12
 8010e20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e24:	e853 3f00 	ldrex	r3, [r3]
 8010e28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010e30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	330c      	adds	r3, #12
 8010e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010e3a:	643a      	str	r2, [r7, #64]	; 0x40
 8010e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010e40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010e42:	e841 2300 	strex	r3, r2, [r1]
 8010e46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d1e5      	bne.n	8010e1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	3314      	adds	r3, #20
 8010e54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e56:	6a3b      	ldr	r3, [r7, #32]
 8010e58:	e853 3f00 	ldrex	r3, [r3]
 8010e5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8010e5e:	69fb      	ldr	r3, [r7, #28]
 8010e60:	f023 0301 	bic.w	r3, r3, #1
 8010e64:	64bb      	str	r3, [r7, #72]	; 0x48
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	3314      	adds	r3, #20
 8010e6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010e6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010e70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e76:	e841 2300 	strex	r3, r2, [r1]
 8010e7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d1e5      	bne.n	8010e4e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e86:	2b01      	cmp	r3, #1
 8010e88:	d119      	bne.n	8010ebe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	330c      	adds	r3, #12
 8010e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	e853 3f00 	ldrex	r3, [r3]
 8010e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	f023 0310 	bic.w	r3, r3, #16
 8010ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	330c      	adds	r3, #12
 8010ea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010eaa:	61ba      	str	r2, [r7, #24]
 8010eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eae:	6979      	ldr	r1, [r7, #20]
 8010eb0:	69ba      	ldr	r2, [r7, #24]
 8010eb2:	e841 2300 	strex	r3, r2, [r1]
 8010eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d1e5      	bne.n	8010e8a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2220      	movs	r2, #32
 8010ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010ecc:	bf00      	nop
 8010ece:	3754      	adds	r7, #84	; 0x54
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed6:	4770      	bx	lr

08010ed8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ee4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010ef2:	68f8      	ldr	r0, [r7, #12]
 8010ef4:	f7ff fe6c 	bl	8010bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ef8:	bf00      	nop
 8010efa:	3710      	adds	r7, #16
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}

08010f00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010f00:	b480      	push	{r7}
 8010f02:	b085      	sub	sp, #20
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f0e:	b2db      	uxtb	r3, r3
 8010f10:	2b21      	cmp	r3, #33	; 0x21
 8010f12:	d13e      	bne.n	8010f92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	689b      	ldr	r3, [r3, #8]
 8010f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f1c:	d114      	bne.n	8010f48 <UART_Transmit_IT+0x48>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	691b      	ldr	r3, [r3, #16]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d110      	bne.n	8010f48 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6a1b      	ldr	r3, [r3, #32]
 8010f2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	881b      	ldrh	r3, [r3, #0]
 8010f30:	461a      	mov	r2, r3
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010f3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6a1b      	ldr	r3, [r3, #32]
 8010f40:	1c9a      	adds	r2, r3, #2
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	621a      	str	r2, [r3, #32]
 8010f46:	e008      	b.n	8010f5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6a1b      	ldr	r3, [r3, #32]
 8010f4c:	1c59      	adds	r1, r3, #1
 8010f4e:	687a      	ldr	r2, [r7, #4]
 8010f50:	6211      	str	r1, [r2, #32]
 8010f52:	781a      	ldrb	r2, [r3, #0]
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	3b01      	subs	r3, #1
 8010f62:	b29b      	uxth	r3, r3
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	4619      	mov	r1, r3
 8010f68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d10f      	bne.n	8010f8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	68da      	ldr	r2, [r3, #12]
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010f7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	68da      	ldr	r2, [r3, #12]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010f8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	e000      	b.n	8010f94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010f92:	2302      	movs	r3, #2
  }
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3714      	adds	r7, #20
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr

08010fa0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	68da      	ldr	r2, [r3, #12]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010fb6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2220      	movs	r2, #32
 8010fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f7f2 f8cd 	bl	8003160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010fc6:	2300      	movs	r3, #0
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3708      	adds	r7, #8
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}

08010fd0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b08c      	sub	sp, #48	; 0x30
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010fde:	b2db      	uxtb	r3, r3
 8010fe0:	2b22      	cmp	r3, #34	; 0x22
 8010fe2:	f040 80ab 	bne.w	801113c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	689b      	ldr	r3, [r3, #8]
 8010fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010fee:	d117      	bne.n	8011020 <UART_Receive_IT+0x50>
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	691b      	ldr	r3, [r3, #16]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d113      	bne.n	8011020 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011000:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	b29b      	uxth	r3, r3
 801100a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801100e:	b29a      	uxth	r2, r3
 8011010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011012:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011018:	1c9a      	adds	r2, r3, #2
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	629a      	str	r2, [r3, #40]	; 0x28
 801101e:	e026      	b.n	801106e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011024:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8011026:	2300      	movs	r3, #0
 8011028:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	689b      	ldr	r3, [r3, #8]
 801102e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011032:	d007      	beq.n	8011044 <UART_Receive_IT+0x74>
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	689b      	ldr	r3, [r3, #8]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d10a      	bne.n	8011052 <UART_Receive_IT+0x82>
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	691b      	ldr	r3, [r3, #16]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d106      	bne.n	8011052 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	b2da      	uxtb	r2, r3
 801104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104e:	701a      	strb	r2, [r3, #0]
 8011050:	e008      	b.n	8011064 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	b2db      	uxtb	r3, r3
 801105a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801105e:	b2da      	uxtb	r2, r3
 8011060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011062:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011068:	1c5a      	adds	r2, r3, #1
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011072:	b29b      	uxth	r3, r3
 8011074:	3b01      	subs	r3, #1
 8011076:	b29b      	uxth	r3, r3
 8011078:	687a      	ldr	r2, [r7, #4]
 801107a:	4619      	mov	r1, r3
 801107c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801107e:	2b00      	cmp	r3, #0
 8011080:	d15a      	bne.n	8011138 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	68da      	ldr	r2, [r3, #12]
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	f022 0220 	bic.w	r2, r2, #32
 8011090:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	68da      	ldr	r2, [r3, #12]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80110a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	695a      	ldr	r2, [r3, #20]
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	f022 0201 	bic.w	r2, r2, #1
 80110b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2220      	movs	r2, #32
 80110b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110be:	2b01      	cmp	r3, #1
 80110c0:	d135      	bne.n	801112e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2200      	movs	r2, #0
 80110c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	330c      	adds	r3, #12
 80110ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	e853 3f00 	ldrex	r3, [r3]
 80110d6:	613b      	str	r3, [r7, #16]
   return(result);
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	f023 0310 	bic.w	r3, r3, #16
 80110de:	627b      	str	r3, [r7, #36]	; 0x24
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	330c      	adds	r3, #12
 80110e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110e8:	623a      	str	r2, [r7, #32]
 80110ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110ec:	69f9      	ldr	r1, [r7, #28]
 80110ee:	6a3a      	ldr	r2, [r7, #32]
 80110f0:	e841 2300 	strex	r3, r2, [r1]
 80110f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80110f6:	69bb      	ldr	r3, [r7, #24]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d1e5      	bne.n	80110c8 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	f003 0310 	and.w	r3, r3, #16
 8011106:	2b10      	cmp	r3, #16
 8011108:	d10a      	bne.n	8011120 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801110a:	2300      	movs	r3, #0
 801110c:	60fb      	str	r3, [r7, #12]
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	60fb      	str	r3, [r7, #12]
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	60fb      	str	r3, [r7, #12]
 801111e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011124:	4619      	mov	r1, r3
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f7ff fd5c 	bl	8010be4 <HAL_UARTEx_RxEventCallback>
 801112c:	e002      	b.n	8011134 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f7f1 fd7c 	bl	8002c2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011134:	2300      	movs	r3, #0
 8011136:	e002      	b.n	801113e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8011138:	2300      	movs	r3, #0
 801113a:	e000      	b.n	801113e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801113c:	2302      	movs	r3, #2
  }
}
 801113e:	4618      	mov	r0, r3
 8011140:	3730      	adds	r7, #48	; 0x30
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
	...

08011148 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801114c:	b0c0      	sub	sp, #256	; 0x100
 801114e:	af00      	add	r7, sp, #0
 8011150:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	691b      	ldr	r3, [r3, #16]
 801115c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011164:	68d9      	ldr	r1, [r3, #12]
 8011166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801116a:	681a      	ldr	r2, [r3, #0]
 801116c:	ea40 0301 	orr.w	r3, r0, r1
 8011170:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011176:	689a      	ldr	r2, [r3, #8]
 8011178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801117c:	691b      	ldr	r3, [r3, #16]
 801117e:	431a      	orrs	r2, r3
 8011180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011184:	695b      	ldr	r3, [r3, #20]
 8011186:	431a      	orrs	r2, r3
 8011188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801118c:	69db      	ldr	r3, [r3, #28]
 801118e:	4313      	orrs	r3, r2
 8011190:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	68db      	ldr	r3, [r3, #12]
 801119c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80111a0:	f021 010c 	bic.w	r1, r1, #12
 80111a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80111a8:	681a      	ldr	r2, [r3, #0]
 80111aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80111ae:	430b      	orrs	r3, r1
 80111b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80111b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	695b      	ldr	r3, [r3, #20]
 80111ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80111be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80111c2:	6999      	ldr	r1, [r3, #24]
 80111c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80111c8:	681a      	ldr	r2, [r3, #0]
 80111ca:	ea40 0301 	orr.w	r3, r0, r1
 80111ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80111d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80111d4:	681a      	ldr	r2, [r3, #0]
 80111d6:	4b8f      	ldr	r3, [pc, #572]	; (8011414 <UART_SetConfig+0x2cc>)
 80111d8:	429a      	cmp	r2, r3
 80111da:	d005      	beq.n	80111e8 <UART_SetConfig+0xa0>
 80111dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80111e0:	681a      	ldr	r2, [r3, #0]
 80111e2:	4b8d      	ldr	r3, [pc, #564]	; (8011418 <UART_SetConfig+0x2d0>)
 80111e4:	429a      	cmp	r2, r3
 80111e6:	d104      	bne.n	80111f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80111e8:	f7fd fbc6 	bl	800e978 <HAL_RCC_GetPCLK2Freq>
 80111ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80111f0:	e003      	b.n	80111fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80111f2:	f7fd fbad 	bl	800e950 <HAL_RCC_GetPCLK1Freq>
 80111f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80111fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80111fe:	69db      	ldr	r3, [r3, #28]
 8011200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011204:	f040 810c 	bne.w	8011420 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801120c:	2200      	movs	r2, #0
 801120e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011212:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8011216:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801121a:	4622      	mov	r2, r4
 801121c:	462b      	mov	r3, r5
 801121e:	1891      	adds	r1, r2, r2
 8011220:	65b9      	str	r1, [r7, #88]	; 0x58
 8011222:	415b      	adcs	r3, r3
 8011224:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011226:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801122a:	4621      	mov	r1, r4
 801122c:	eb12 0801 	adds.w	r8, r2, r1
 8011230:	4629      	mov	r1, r5
 8011232:	eb43 0901 	adc.w	r9, r3, r1
 8011236:	f04f 0200 	mov.w	r2, #0
 801123a:	f04f 0300 	mov.w	r3, #0
 801123e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801124a:	4690      	mov	r8, r2
 801124c:	4699      	mov	r9, r3
 801124e:	4623      	mov	r3, r4
 8011250:	eb18 0303 	adds.w	r3, r8, r3
 8011254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011258:	462b      	mov	r3, r5
 801125a:	eb49 0303 	adc.w	r3, r9, r3
 801125e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	2200      	movs	r2, #0
 801126a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801126e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8011272:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8011276:	460b      	mov	r3, r1
 8011278:	18db      	adds	r3, r3, r3
 801127a:	653b      	str	r3, [r7, #80]	; 0x50
 801127c:	4613      	mov	r3, r2
 801127e:	eb42 0303 	adc.w	r3, r2, r3
 8011282:	657b      	str	r3, [r7, #84]	; 0x54
 8011284:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011288:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801128c:	f7ef fb4e 	bl	800092c <__aeabi_uldivmod>
 8011290:	4602      	mov	r2, r0
 8011292:	460b      	mov	r3, r1
 8011294:	4b61      	ldr	r3, [pc, #388]	; (801141c <UART_SetConfig+0x2d4>)
 8011296:	fba3 2302 	umull	r2, r3, r3, r2
 801129a:	095b      	lsrs	r3, r3, #5
 801129c:	011c      	lsls	r4, r3, #4
 801129e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80112a2:	2200      	movs	r2, #0
 80112a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80112a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80112ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80112b0:	4642      	mov	r2, r8
 80112b2:	464b      	mov	r3, r9
 80112b4:	1891      	adds	r1, r2, r2
 80112b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80112b8:	415b      	adcs	r3, r3
 80112ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80112bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80112c0:	4641      	mov	r1, r8
 80112c2:	eb12 0a01 	adds.w	sl, r2, r1
 80112c6:	4649      	mov	r1, r9
 80112c8:	eb43 0b01 	adc.w	fp, r3, r1
 80112cc:	f04f 0200 	mov.w	r2, #0
 80112d0:	f04f 0300 	mov.w	r3, #0
 80112d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80112d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80112dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80112e0:	4692      	mov	sl, r2
 80112e2:	469b      	mov	fp, r3
 80112e4:	4643      	mov	r3, r8
 80112e6:	eb1a 0303 	adds.w	r3, sl, r3
 80112ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80112ee:	464b      	mov	r3, r9
 80112f0:	eb4b 0303 	adc.w	r3, fp, r3
 80112f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80112f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80112fc:	685b      	ldr	r3, [r3, #4]
 80112fe:	2200      	movs	r2, #0
 8011300:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011304:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8011308:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801130c:	460b      	mov	r3, r1
 801130e:	18db      	adds	r3, r3, r3
 8011310:	643b      	str	r3, [r7, #64]	; 0x40
 8011312:	4613      	mov	r3, r2
 8011314:	eb42 0303 	adc.w	r3, r2, r3
 8011318:	647b      	str	r3, [r7, #68]	; 0x44
 801131a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801131e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8011322:	f7ef fb03 	bl	800092c <__aeabi_uldivmod>
 8011326:	4602      	mov	r2, r0
 8011328:	460b      	mov	r3, r1
 801132a:	4611      	mov	r1, r2
 801132c:	4b3b      	ldr	r3, [pc, #236]	; (801141c <UART_SetConfig+0x2d4>)
 801132e:	fba3 2301 	umull	r2, r3, r3, r1
 8011332:	095b      	lsrs	r3, r3, #5
 8011334:	2264      	movs	r2, #100	; 0x64
 8011336:	fb02 f303 	mul.w	r3, r2, r3
 801133a:	1acb      	subs	r3, r1, r3
 801133c:	00db      	lsls	r3, r3, #3
 801133e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011342:	4b36      	ldr	r3, [pc, #216]	; (801141c <UART_SetConfig+0x2d4>)
 8011344:	fba3 2302 	umull	r2, r3, r3, r2
 8011348:	095b      	lsrs	r3, r3, #5
 801134a:	005b      	lsls	r3, r3, #1
 801134c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011350:	441c      	add	r4, r3
 8011352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011356:	2200      	movs	r2, #0
 8011358:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801135c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011360:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8011364:	4642      	mov	r2, r8
 8011366:	464b      	mov	r3, r9
 8011368:	1891      	adds	r1, r2, r2
 801136a:	63b9      	str	r1, [r7, #56]	; 0x38
 801136c:	415b      	adcs	r3, r3
 801136e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011370:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011374:	4641      	mov	r1, r8
 8011376:	1851      	adds	r1, r2, r1
 8011378:	6339      	str	r1, [r7, #48]	; 0x30
 801137a:	4649      	mov	r1, r9
 801137c:	414b      	adcs	r3, r1
 801137e:	637b      	str	r3, [r7, #52]	; 0x34
 8011380:	f04f 0200 	mov.w	r2, #0
 8011384:	f04f 0300 	mov.w	r3, #0
 8011388:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801138c:	4659      	mov	r1, fp
 801138e:	00cb      	lsls	r3, r1, #3
 8011390:	4651      	mov	r1, sl
 8011392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011396:	4651      	mov	r1, sl
 8011398:	00ca      	lsls	r2, r1, #3
 801139a:	4610      	mov	r0, r2
 801139c:	4619      	mov	r1, r3
 801139e:	4603      	mov	r3, r0
 80113a0:	4642      	mov	r2, r8
 80113a2:	189b      	adds	r3, r3, r2
 80113a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80113a8:	464b      	mov	r3, r9
 80113aa:	460a      	mov	r2, r1
 80113ac:	eb42 0303 	adc.w	r3, r2, r3
 80113b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80113b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80113b8:	685b      	ldr	r3, [r3, #4]
 80113ba:	2200      	movs	r2, #0
 80113bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80113c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80113c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80113c8:	460b      	mov	r3, r1
 80113ca:	18db      	adds	r3, r3, r3
 80113cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80113ce:	4613      	mov	r3, r2
 80113d0:	eb42 0303 	adc.w	r3, r2, r3
 80113d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80113da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80113de:	f7ef faa5 	bl	800092c <__aeabi_uldivmod>
 80113e2:	4602      	mov	r2, r0
 80113e4:	460b      	mov	r3, r1
 80113e6:	4b0d      	ldr	r3, [pc, #52]	; (801141c <UART_SetConfig+0x2d4>)
 80113e8:	fba3 1302 	umull	r1, r3, r3, r2
 80113ec:	095b      	lsrs	r3, r3, #5
 80113ee:	2164      	movs	r1, #100	; 0x64
 80113f0:	fb01 f303 	mul.w	r3, r1, r3
 80113f4:	1ad3      	subs	r3, r2, r3
 80113f6:	00db      	lsls	r3, r3, #3
 80113f8:	3332      	adds	r3, #50	; 0x32
 80113fa:	4a08      	ldr	r2, [pc, #32]	; (801141c <UART_SetConfig+0x2d4>)
 80113fc:	fba2 2303 	umull	r2, r3, r2, r3
 8011400:	095b      	lsrs	r3, r3, #5
 8011402:	f003 0207 	and.w	r2, r3, #7
 8011406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	4422      	add	r2, r4
 801140e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011410:	e105      	b.n	801161e <UART_SetConfig+0x4d6>
 8011412:	bf00      	nop
 8011414:	40011000 	.word	0x40011000
 8011418:	40011400 	.word	0x40011400
 801141c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011424:	2200      	movs	r2, #0
 8011426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801142a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801142e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8011432:	4642      	mov	r2, r8
 8011434:	464b      	mov	r3, r9
 8011436:	1891      	adds	r1, r2, r2
 8011438:	6239      	str	r1, [r7, #32]
 801143a:	415b      	adcs	r3, r3
 801143c:	627b      	str	r3, [r7, #36]	; 0x24
 801143e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011442:	4641      	mov	r1, r8
 8011444:	1854      	adds	r4, r2, r1
 8011446:	4649      	mov	r1, r9
 8011448:	eb43 0501 	adc.w	r5, r3, r1
 801144c:	f04f 0200 	mov.w	r2, #0
 8011450:	f04f 0300 	mov.w	r3, #0
 8011454:	00eb      	lsls	r3, r5, #3
 8011456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801145a:	00e2      	lsls	r2, r4, #3
 801145c:	4614      	mov	r4, r2
 801145e:	461d      	mov	r5, r3
 8011460:	4643      	mov	r3, r8
 8011462:	18e3      	adds	r3, r4, r3
 8011464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011468:	464b      	mov	r3, r9
 801146a:	eb45 0303 	adc.w	r3, r5, r3
 801146e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011476:	685b      	ldr	r3, [r3, #4]
 8011478:	2200      	movs	r2, #0
 801147a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801147e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011482:	f04f 0200 	mov.w	r2, #0
 8011486:	f04f 0300 	mov.w	r3, #0
 801148a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801148e:	4629      	mov	r1, r5
 8011490:	008b      	lsls	r3, r1, #2
 8011492:	4621      	mov	r1, r4
 8011494:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011498:	4621      	mov	r1, r4
 801149a:	008a      	lsls	r2, r1, #2
 801149c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80114a0:	f7ef fa44 	bl	800092c <__aeabi_uldivmod>
 80114a4:	4602      	mov	r2, r0
 80114a6:	460b      	mov	r3, r1
 80114a8:	4b60      	ldr	r3, [pc, #384]	; (801162c <UART_SetConfig+0x4e4>)
 80114aa:	fba3 2302 	umull	r2, r3, r3, r2
 80114ae:	095b      	lsrs	r3, r3, #5
 80114b0:	011c      	lsls	r4, r3, #4
 80114b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80114b6:	2200      	movs	r2, #0
 80114b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80114bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80114c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80114c4:	4642      	mov	r2, r8
 80114c6:	464b      	mov	r3, r9
 80114c8:	1891      	adds	r1, r2, r2
 80114ca:	61b9      	str	r1, [r7, #24]
 80114cc:	415b      	adcs	r3, r3
 80114ce:	61fb      	str	r3, [r7, #28]
 80114d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80114d4:	4641      	mov	r1, r8
 80114d6:	1851      	adds	r1, r2, r1
 80114d8:	6139      	str	r1, [r7, #16]
 80114da:	4649      	mov	r1, r9
 80114dc:	414b      	adcs	r3, r1
 80114de:	617b      	str	r3, [r7, #20]
 80114e0:	f04f 0200 	mov.w	r2, #0
 80114e4:	f04f 0300 	mov.w	r3, #0
 80114e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80114ec:	4659      	mov	r1, fp
 80114ee:	00cb      	lsls	r3, r1, #3
 80114f0:	4651      	mov	r1, sl
 80114f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80114f6:	4651      	mov	r1, sl
 80114f8:	00ca      	lsls	r2, r1, #3
 80114fa:	4610      	mov	r0, r2
 80114fc:	4619      	mov	r1, r3
 80114fe:	4603      	mov	r3, r0
 8011500:	4642      	mov	r2, r8
 8011502:	189b      	adds	r3, r3, r2
 8011504:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011508:	464b      	mov	r3, r9
 801150a:	460a      	mov	r2, r1
 801150c:	eb42 0303 	adc.w	r3, r2, r3
 8011510:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	2200      	movs	r2, #0
 801151c:	67bb      	str	r3, [r7, #120]	; 0x78
 801151e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011520:	f04f 0200 	mov.w	r2, #0
 8011524:	f04f 0300 	mov.w	r3, #0
 8011528:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801152c:	4649      	mov	r1, r9
 801152e:	008b      	lsls	r3, r1, #2
 8011530:	4641      	mov	r1, r8
 8011532:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011536:	4641      	mov	r1, r8
 8011538:	008a      	lsls	r2, r1, #2
 801153a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801153e:	f7ef f9f5 	bl	800092c <__aeabi_uldivmod>
 8011542:	4602      	mov	r2, r0
 8011544:	460b      	mov	r3, r1
 8011546:	4b39      	ldr	r3, [pc, #228]	; (801162c <UART_SetConfig+0x4e4>)
 8011548:	fba3 1302 	umull	r1, r3, r3, r2
 801154c:	095b      	lsrs	r3, r3, #5
 801154e:	2164      	movs	r1, #100	; 0x64
 8011550:	fb01 f303 	mul.w	r3, r1, r3
 8011554:	1ad3      	subs	r3, r2, r3
 8011556:	011b      	lsls	r3, r3, #4
 8011558:	3332      	adds	r3, #50	; 0x32
 801155a:	4a34      	ldr	r2, [pc, #208]	; (801162c <UART_SetConfig+0x4e4>)
 801155c:	fba2 2303 	umull	r2, r3, r2, r3
 8011560:	095b      	lsrs	r3, r3, #5
 8011562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011566:	441c      	add	r4, r3
 8011568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801156c:	2200      	movs	r2, #0
 801156e:	673b      	str	r3, [r7, #112]	; 0x70
 8011570:	677a      	str	r2, [r7, #116]	; 0x74
 8011572:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8011576:	4642      	mov	r2, r8
 8011578:	464b      	mov	r3, r9
 801157a:	1891      	adds	r1, r2, r2
 801157c:	60b9      	str	r1, [r7, #8]
 801157e:	415b      	adcs	r3, r3
 8011580:	60fb      	str	r3, [r7, #12]
 8011582:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011586:	4641      	mov	r1, r8
 8011588:	1851      	adds	r1, r2, r1
 801158a:	6039      	str	r1, [r7, #0]
 801158c:	4649      	mov	r1, r9
 801158e:	414b      	adcs	r3, r1
 8011590:	607b      	str	r3, [r7, #4]
 8011592:	f04f 0200 	mov.w	r2, #0
 8011596:	f04f 0300 	mov.w	r3, #0
 801159a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801159e:	4659      	mov	r1, fp
 80115a0:	00cb      	lsls	r3, r1, #3
 80115a2:	4651      	mov	r1, sl
 80115a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80115a8:	4651      	mov	r1, sl
 80115aa:	00ca      	lsls	r2, r1, #3
 80115ac:	4610      	mov	r0, r2
 80115ae:	4619      	mov	r1, r3
 80115b0:	4603      	mov	r3, r0
 80115b2:	4642      	mov	r2, r8
 80115b4:	189b      	adds	r3, r3, r2
 80115b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80115b8:	464b      	mov	r3, r9
 80115ba:	460a      	mov	r2, r1
 80115bc:	eb42 0303 	adc.w	r3, r2, r3
 80115c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80115c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80115c6:	685b      	ldr	r3, [r3, #4]
 80115c8:	2200      	movs	r2, #0
 80115ca:	663b      	str	r3, [r7, #96]	; 0x60
 80115cc:	667a      	str	r2, [r7, #100]	; 0x64
 80115ce:	f04f 0200 	mov.w	r2, #0
 80115d2:	f04f 0300 	mov.w	r3, #0
 80115d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80115da:	4649      	mov	r1, r9
 80115dc:	008b      	lsls	r3, r1, #2
 80115de:	4641      	mov	r1, r8
 80115e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80115e4:	4641      	mov	r1, r8
 80115e6:	008a      	lsls	r2, r1, #2
 80115e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80115ec:	f7ef f99e 	bl	800092c <__aeabi_uldivmod>
 80115f0:	4602      	mov	r2, r0
 80115f2:	460b      	mov	r3, r1
 80115f4:	4b0d      	ldr	r3, [pc, #52]	; (801162c <UART_SetConfig+0x4e4>)
 80115f6:	fba3 1302 	umull	r1, r3, r3, r2
 80115fa:	095b      	lsrs	r3, r3, #5
 80115fc:	2164      	movs	r1, #100	; 0x64
 80115fe:	fb01 f303 	mul.w	r3, r1, r3
 8011602:	1ad3      	subs	r3, r2, r3
 8011604:	011b      	lsls	r3, r3, #4
 8011606:	3332      	adds	r3, #50	; 0x32
 8011608:	4a08      	ldr	r2, [pc, #32]	; (801162c <UART_SetConfig+0x4e4>)
 801160a:	fba2 2303 	umull	r2, r3, r2, r3
 801160e:	095b      	lsrs	r3, r3, #5
 8011610:	f003 020f 	and.w	r2, r3, #15
 8011614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	4422      	add	r2, r4
 801161c:	609a      	str	r2, [r3, #8]
}
 801161e:	bf00      	nop
 8011620:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8011624:	46bd      	mov	sp, r7
 8011626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801162a:	bf00      	nop
 801162c:	51eb851f 	.word	0x51eb851f

08011630 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8011630:	b480      	push	{r7}
 8011632:	b083      	sub	sp, #12
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
 8011638:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	2b10      	cmp	r3, #16
 8011640:	d11c      	bne.n	801167c <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	4b1f      	ldr	r3, [pc, #124]	; (80116c4 <FSMC_NAND_Init+0x94>)
 8011648:	4013      	ands	r3, r2
 801164a:	683a      	ldr	r2, [r7, #0]
 801164c:	6851      	ldr	r1, [r2, #4]
 801164e:	683a      	ldr	r2, [r7, #0]
 8011650:	6892      	ldr	r2, [r2, #8]
 8011652:	4311      	orrs	r1, r2
 8011654:	683a      	ldr	r2, [r7, #0]
 8011656:	68d2      	ldr	r2, [r2, #12]
 8011658:	4311      	orrs	r1, r2
 801165a:	683a      	ldr	r2, [r7, #0]
 801165c:	6912      	ldr	r2, [r2, #16]
 801165e:	4311      	orrs	r1, r2
 8011660:	683a      	ldr	r2, [r7, #0]
 8011662:	6952      	ldr	r2, [r2, #20]
 8011664:	0252      	lsls	r2, r2, #9
 8011666:	4311      	orrs	r1, r2
 8011668:	683a      	ldr	r2, [r7, #0]
 801166a:	6992      	ldr	r2, [r2, #24]
 801166c:	0352      	lsls	r2, r2, #13
 801166e:	430a      	orrs	r2, r1
 8011670:	4313      	orrs	r3, r2
 8011672:	f043 0208 	orr.w	r2, r3, #8
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	601a      	str	r2, [r3, #0]
 801167a:	e01b      	b.n	80116b4 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6a1a      	ldr	r2, [r3, #32]
 8011680:	4b10      	ldr	r3, [pc, #64]	; (80116c4 <FSMC_NAND_Init+0x94>)
 8011682:	4013      	ands	r3, r2
 8011684:	683a      	ldr	r2, [r7, #0]
 8011686:	6851      	ldr	r1, [r2, #4]
 8011688:	683a      	ldr	r2, [r7, #0]
 801168a:	6892      	ldr	r2, [r2, #8]
 801168c:	4311      	orrs	r1, r2
 801168e:	683a      	ldr	r2, [r7, #0]
 8011690:	68d2      	ldr	r2, [r2, #12]
 8011692:	4311      	orrs	r1, r2
 8011694:	683a      	ldr	r2, [r7, #0]
 8011696:	6912      	ldr	r2, [r2, #16]
 8011698:	4311      	orrs	r1, r2
 801169a:	683a      	ldr	r2, [r7, #0]
 801169c:	6952      	ldr	r2, [r2, #20]
 801169e:	0252      	lsls	r2, r2, #9
 80116a0:	4311      	orrs	r1, r2
 80116a2:	683a      	ldr	r2, [r7, #0]
 80116a4:	6992      	ldr	r2, [r2, #24]
 80116a6:	0352      	lsls	r2, r2, #13
 80116a8:	430a      	orrs	r2, r1
 80116aa:	4313      	orrs	r3, r2
 80116ac:	f043 0208 	orr.w	r2, r3, #8
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 80116b4:	2300      	movs	r3, #0
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	370c      	adds	r7, #12
 80116ba:	46bd      	mov	sp, r7
 80116bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c0:	4770      	bx	lr
 80116c2:	bf00      	nop
 80116c4:	fff00181 	.word	0xfff00181

080116c8 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80116c8:	b480      	push	{r7}
 80116ca:	b085      	sub	sp, #20
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	60f8      	str	r0, [r7, #12]
 80116d0:	60b9      	str	r1, [r7, #8]
 80116d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	2b10      	cmp	r3, #16
 80116d8:	d112      	bne.n	8011700 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	689b      	ldr	r3, [r3, #8]
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	681a      	ldr	r2, [r3, #0]
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	021b      	lsls	r3, r3, #8
 80116e8:	431a      	orrs	r2, r3
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	689b      	ldr	r3, [r3, #8]
 80116ee:	041b      	lsls	r3, r3, #16
 80116f0:	431a      	orrs	r2, r3
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	68db      	ldr	r3, [r3, #12]
 80116f6:	061b      	lsls	r3, r3, #24
 80116f8:	431a      	orrs	r2, r3
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	609a      	str	r2, [r3, #8]
 80116fe:	e011      	b.n	8011724 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	681a      	ldr	r2, [r3, #0]
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	021b      	lsls	r3, r3, #8
 801170e:	431a      	orrs	r2, r3
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	689b      	ldr	r3, [r3, #8]
 8011714:	041b      	lsls	r3, r3, #16
 8011716:	431a      	orrs	r2, r3
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	68db      	ldr	r3, [r3, #12]
 801171c:	061b      	lsls	r3, r3, #24
 801171e:	431a      	orrs	r2, r3
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 8011724:	2300      	movs	r3, #0
}
 8011726:	4618      	mov	r0, r3
 8011728:	3714      	adds	r7, #20
 801172a:	46bd      	mov	sp, r7
 801172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011730:	4770      	bx	lr

08011732 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8011732:	b480      	push	{r7}
 8011734:	b085      	sub	sp, #20
 8011736:	af00      	add	r7, sp, #0
 8011738:	60f8      	str	r0, [r7, #12]
 801173a:	60b9      	str	r1, [r7, #8]
 801173c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2b10      	cmp	r3, #16
 8011742:	d112      	bne.n	801176a <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	685b      	ldr	r3, [r3, #4]
 8011750:	021b      	lsls	r3, r3, #8
 8011752:	431a      	orrs	r2, r3
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	689b      	ldr	r3, [r3, #8]
 8011758:	041b      	lsls	r3, r3, #16
 801175a:	431a      	orrs	r2, r3
 801175c:	68bb      	ldr	r3, [r7, #8]
 801175e:	68db      	ldr	r3, [r3, #12]
 8011760:	061b      	lsls	r3, r3, #24
 8011762:	431a      	orrs	r2, r3
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	60da      	str	r2, [r3, #12]
 8011768:	e011      	b.n	801178e <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	681a      	ldr	r2, [r3, #0]
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	021b      	lsls	r3, r3, #8
 8011778:	431a      	orrs	r2, r3
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	689b      	ldr	r3, [r3, #8]
 801177e:	041b      	lsls	r3, r3, #16
 8011780:	431a      	orrs	r2, r3
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	68db      	ldr	r3, [r3, #12]
 8011786:	061b      	lsls	r3, r3, #24
 8011788:	431a      	orrs	r2, r3
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 801178e:	2300      	movs	r3, #0
}
 8011790:	4618      	mov	r0, r3
 8011792:	3714      	adds	r7, #20
 8011794:	46bd      	mov	sp, r7
 8011796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179a:	4770      	bx	lr

0801179c <__NVIC_SetPriority>:
{
 801179c:	b480      	push	{r7}
 801179e:	b083      	sub	sp, #12
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	4603      	mov	r3, r0
 80117a4:	6039      	str	r1, [r7, #0]
 80117a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80117a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	db0a      	blt.n	80117c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	b2da      	uxtb	r2, r3
 80117b4:	490c      	ldr	r1, [pc, #48]	; (80117e8 <__NVIC_SetPriority+0x4c>)
 80117b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80117ba:	0112      	lsls	r2, r2, #4
 80117bc:	b2d2      	uxtb	r2, r2
 80117be:	440b      	add	r3, r1
 80117c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80117c4:	e00a      	b.n	80117dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	b2da      	uxtb	r2, r3
 80117ca:	4908      	ldr	r1, [pc, #32]	; (80117ec <__NVIC_SetPriority+0x50>)
 80117cc:	79fb      	ldrb	r3, [r7, #7]
 80117ce:	f003 030f 	and.w	r3, r3, #15
 80117d2:	3b04      	subs	r3, #4
 80117d4:	0112      	lsls	r2, r2, #4
 80117d6:	b2d2      	uxtb	r2, r2
 80117d8:	440b      	add	r3, r1
 80117da:	761a      	strb	r2, [r3, #24]
}
 80117dc:	bf00      	nop
 80117de:	370c      	adds	r7, #12
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr
 80117e8:	e000e100 	.word	0xe000e100
 80117ec:	e000ed00 	.word	0xe000ed00

080117f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80117f0:	b580      	push	{r7, lr}
 80117f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80117f4:	4b05      	ldr	r3, [pc, #20]	; (801180c <SysTick_Handler+0x1c>)
 80117f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80117f8:	f002 f856 	bl	80138a8 <xTaskGetSchedulerState>
 80117fc:	4603      	mov	r3, r0
 80117fe:	2b01      	cmp	r3, #1
 8011800:	d001      	beq.n	8011806 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8011802:	f002 fe41 	bl	8014488 <xPortSysTickHandler>
  }
}
 8011806:	bf00      	nop
 8011808:	bd80      	pop	{r7, pc}
 801180a:	bf00      	nop
 801180c:	e000e010 	.word	0xe000e010

08011810 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011810:	b580      	push	{r7, lr}
 8011812:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011814:	2100      	movs	r1, #0
 8011816:	f06f 0004 	mvn.w	r0, #4
 801181a:	f7ff ffbf 	bl	801179c <__NVIC_SetPriority>
#endif
}
 801181e:	bf00      	nop
 8011820:	bd80      	pop	{r7, pc}
	...

08011824 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011824:	b580      	push	{r7, lr}
 8011826:	b082      	sub	sp, #8
 8011828:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801182a:	f3ef 8305 	mrs	r3, IPSR
 801182e:	603b      	str	r3, [r7, #0]
  return(result);
 8011830:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011832:	2b00      	cmp	r3, #0
 8011834:	d003      	beq.n	801183e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011836:	f06f 0305 	mvn.w	r3, #5
 801183a:	607b      	str	r3, [r7, #4]
 801183c:	e00f      	b.n	801185e <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 801183e:	4b0a      	ldr	r3, [pc, #40]	; (8011868 <osKernelInitialize+0x44>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d108      	bne.n	8011858 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 8011846:	4809      	ldr	r0, [pc, #36]	; (801186c <osKernelInitialize+0x48>)
 8011848:	f003 f81a 	bl	8014880 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 801184c:	4b06      	ldr	r3, [pc, #24]	; (8011868 <osKernelInitialize+0x44>)
 801184e:	2201      	movs	r2, #1
 8011850:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011852:	2300      	movs	r3, #0
 8011854:	607b      	str	r3, [r7, #4]
 8011856:	e002      	b.n	801185e <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 8011858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801185c:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801185e:	687b      	ldr	r3, [r7, #4]
}
 8011860:	4618      	mov	r0, r3
 8011862:	3708      	adds	r7, #8
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}
 8011868:	20003f18 	.word	0x20003f18
 801186c:	200000b8 	.word	0x200000b8

08011870 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011870:	b580      	push	{r7, lr}
 8011872:	b082      	sub	sp, #8
 8011874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011876:	f3ef 8305 	mrs	r3, IPSR
 801187a:	603b      	str	r3, [r7, #0]
  return(result);
 801187c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801187e:	2b00      	cmp	r3, #0
 8011880:	d003      	beq.n	801188a <osKernelStart+0x1a>
    stat = osErrorISR;
 8011882:	f06f 0305 	mvn.w	r3, #5
 8011886:	607b      	str	r3, [r7, #4]
 8011888:	e010      	b.n	80118ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801188a:	4b0b      	ldr	r3, [pc, #44]	; (80118b8 <osKernelStart+0x48>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	2b01      	cmp	r3, #1
 8011890:	d109      	bne.n	80118a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011892:	f7ff ffbd 	bl	8011810 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011896:	4b08      	ldr	r3, [pc, #32]	; (80118b8 <osKernelStart+0x48>)
 8011898:	2202      	movs	r2, #2
 801189a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801189c:	f001 fba8 	bl	8012ff0 <vTaskStartScheduler>
      stat = osOK;
 80118a0:	2300      	movs	r3, #0
 80118a2:	607b      	str	r3, [r7, #4]
 80118a4:	e002      	b.n	80118ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80118a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80118ac:	687b      	ldr	r3, [r7, #4]
}
 80118ae:	4618      	mov	r0, r3
 80118b0:	3708      	adds	r7, #8
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd80      	pop	{r7, pc}
 80118b6:	bf00      	nop
 80118b8:	20003f18 	.word	0x20003f18

080118bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80118bc:	b580      	push	{r7, lr}
 80118be:	b08e      	sub	sp, #56	; 0x38
 80118c0:	af04      	add	r7, sp, #16
 80118c2:	60f8      	str	r0, [r7, #12]
 80118c4:	60b9      	str	r1, [r7, #8]
 80118c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80118c8:	2300      	movs	r3, #0
 80118ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80118cc:	f3ef 8305 	mrs	r3, IPSR
 80118d0:	617b      	str	r3, [r7, #20]
  return(result);
 80118d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d17e      	bne.n	80119d6 <osThreadNew+0x11a>
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d07b      	beq.n	80119d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80118de:	2380      	movs	r3, #128	; 0x80
 80118e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80118e2:	2318      	movs	r3, #24
 80118e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80118e6:	2300      	movs	r3, #0
 80118e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80118ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d045      	beq.n	8011982 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d002      	beq.n	8011904 <osThreadNew+0x48>
        name = attr->name;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	699b      	ldr	r3, [r3, #24]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d002      	beq.n	8011912 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	699b      	ldr	r3, [r3, #24]
 8011910:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011912:	69fb      	ldr	r3, [r7, #28]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d008      	beq.n	801192a <osThreadNew+0x6e>
 8011918:	69fb      	ldr	r3, [r7, #28]
 801191a:	2b38      	cmp	r3, #56	; 0x38
 801191c:	d805      	bhi.n	801192a <osThreadNew+0x6e>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	685b      	ldr	r3, [r3, #4]
 8011922:	f003 0301 	and.w	r3, r3, #1
 8011926:	2b00      	cmp	r3, #0
 8011928:	d001      	beq.n	801192e <osThreadNew+0x72>
        return (NULL);
 801192a:	2300      	movs	r3, #0
 801192c:	e054      	b.n	80119d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	695b      	ldr	r3, [r3, #20]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d003      	beq.n	801193e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	695b      	ldr	r3, [r3, #20]
 801193a:	089b      	lsrs	r3, r3, #2
 801193c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	689b      	ldr	r3, [r3, #8]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d00e      	beq.n	8011964 <osThreadNew+0xa8>
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	68db      	ldr	r3, [r3, #12]
 801194a:	2bbb      	cmp	r3, #187	; 0xbb
 801194c:	d90a      	bls.n	8011964 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011952:	2b00      	cmp	r3, #0
 8011954:	d006      	beq.n	8011964 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	695b      	ldr	r3, [r3, #20]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d002      	beq.n	8011964 <osThreadNew+0xa8>
        mem = 1;
 801195e:	2301      	movs	r3, #1
 8011960:	61bb      	str	r3, [r7, #24]
 8011962:	e010      	b.n	8011986 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	689b      	ldr	r3, [r3, #8]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d10c      	bne.n	8011986 <osThreadNew+0xca>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	68db      	ldr	r3, [r3, #12]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d108      	bne.n	8011986 <osThreadNew+0xca>
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	691b      	ldr	r3, [r3, #16]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d104      	bne.n	8011986 <osThreadNew+0xca>
          mem = 0;
 801197c:	2300      	movs	r3, #0
 801197e:	61bb      	str	r3, [r7, #24]
 8011980:	e001      	b.n	8011986 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011982:	2300      	movs	r3, #0
 8011984:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011986:	69bb      	ldr	r3, [r7, #24]
 8011988:	2b01      	cmp	r3, #1
 801198a:	d110      	bne.n	80119ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011994:	9202      	str	r2, [sp, #8]
 8011996:	9301      	str	r3, [sp, #4]
 8011998:	69fb      	ldr	r3, [r7, #28]
 801199a:	9300      	str	r3, [sp, #0]
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	6a3a      	ldr	r2, [r7, #32]
 80119a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80119a2:	68f8      	ldr	r0, [r7, #12]
 80119a4:	f001 f938 	bl	8012c18 <xTaskCreateStatic>
 80119a8:	4603      	mov	r3, r0
 80119aa:	613b      	str	r3, [r7, #16]
 80119ac:	e013      	b.n	80119d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80119ae:	69bb      	ldr	r3, [r7, #24]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d110      	bne.n	80119d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80119b4:	6a3b      	ldr	r3, [r7, #32]
 80119b6:	b29a      	uxth	r2, r3
 80119b8:	f107 0310 	add.w	r3, r7, #16
 80119bc:	9301      	str	r3, [sp, #4]
 80119be:	69fb      	ldr	r3, [r7, #28]
 80119c0:	9300      	str	r3, [sp, #0]
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80119c6:	68f8      	ldr	r0, [r7, #12]
 80119c8:	f001 f983 	bl	8012cd2 <xTaskCreate>
 80119cc:	4603      	mov	r3, r0
 80119ce:	2b01      	cmp	r3, #1
 80119d0:	d001      	beq.n	80119d6 <osThreadNew+0x11a>
            hTask = NULL;
 80119d2:	2300      	movs	r3, #0
 80119d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80119d6:	693b      	ldr	r3, [r7, #16]
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3728      	adds	r7, #40	; 0x28
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}

080119e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b084      	sub	sp, #16
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119e8:	f3ef 8305 	mrs	r3, IPSR
 80119ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80119ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d003      	beq.n	80119fc <osDelay+0x1c>
    stat = osErrorISR;
 80119f4:	f06f 0305 	mvn.w	r3, #5
 80119f8:	60fb      	str	r3, [r7, #12]
 80119fa:	e007      	b.n	8011a0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80119fc:	2300      	movs	r3, #0
 80119fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d002      	beq.n	8011a0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f001 fabe 	bl	8012f88 <vTaskDelay>
    }
  }

  return (stat);
 8011a0c:	68fb      	ldr	r3, [r7, #12]
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3710      	adds	r7, #16
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}

08011a16 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011a16:	b580      	push	{r7, lr}
 8011a18:	b08a      	sub	sp, #40	; 0x28
 8011a1a:	af02      	add	r7, sp, #8
 8011a1c:	60f8      	str	r0, [r7, #12]
 8011a1e:	60b9      	str	r1, [r7, #8]
 8011a20:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011a22:	2300      	movs	r3, #0
 8011a24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a26:	f3ef 8305 	mrs	r3, IPSR
 8011a2a:	613b      	str	r3, [r7, #16]
  return(result);
 8011a2c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d175      	bne.n	8011b1e <osSemaphoreNew+0x108>
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d072      	beq.n	8011b1e <osSemaphoreNew+0x108>
 8011a38:	68ba      	ldr	r2, [r7, #8]
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d86e      	bhi.n	8011b1e <osSemaphoreNew+0x108>
    mem = -1;
 8011a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a44:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d015      	beq.n	8011a78 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	689b      	ldr	r3, [r3, #8]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d006      	beq.n	8011a62 <osSemaphoreNew+0x4c>
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	68db      	ldr	r3, [r3, #12]
 8011a58:	2b4f      	cmp	r3, #79	; 0x4f
 8011a5a:	d902      	bls.n	8011a62 <osSemaphoreNew+0x4c>
        mem = 1;
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	61bb      	str	r3, [r7, #24]
 8011a60:	e00c      	b.n	8011a7c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	689b      	ldr	r3, [r3, #8]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d108      	bne.n	8011a7c <osSemaphoreNew+0x66>
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	68db      	ldr	r3, [r3, #12]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d104      	bne.n	8011a7c <osSemaphoreNew+0x66>
          mem = 0;
 8011a72:	2300      	movs	r3, #0
 8011a74:	61bb      	str	r3, [r7, #24]
 8011a76:	e001      	b.n	8011a7c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8011a7c:	69bb      	ldr	r3, [r7, #24]
 8011a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a82:	d04c      	beq.n	8011b1e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	2b01      	cmp	r3, #1
 8011a88:	d128      	bne.n	8011adc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	d10a      	bne.n	8011aa6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	689b      	ldr	r3, [r3, #8]
 8011a94:	2203      	movs	r2, #3
 8011a96:	9200      	str	r2, [sp, #0]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	2100      	movs	r1, #0
 8011a9c:	2001      	movs	r0, #1
 8011a9e:	f000 fac5 	bl	801202c <xQueueGenericCreateStatic>
 8011aa2:	61f8      	str	r0, [r7, #28]
 8011aa4:	e005      	b.n	8011ab2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8011aa6:	2203      	movs	r2, #3
 8011aa8:	2100      	movs	r1, #0
 8011aaa:	2001      	movs	r0, #1
 8011aac:	f000 fb36 	bl	801211c <xQueueGenericCreate>
 8011ab0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011ab2:	69fb      	ldr	r3, [r7, #28]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d022      	beq.n	8011afe <osSemaphoreNew+0xe8>
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d01f      	beq.n	8011afe <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011abe:	2300      	movs	r3, #0
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	2100      	movs	r1, #0
 8011ac4:	69f8      	ldr	r0, [r7, #28]
 8011ac6:	f000 fbf1 	bl	80122ac <xQueueGenericSend>
 8011aca:	4603      	mov	r3, r0
 8011acc:	2b01      	cmp	r3, #1
 8011ace:	d016      	beq.n	8011afe <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8011ad0:	69f8      	ldr	r0, [r7, #28]
 8011ad2:	f000 fee5 	bl	80128a0 <vQueueDelete>
            hSemaphore = NULL;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	61fb      	str	r3, [r7, #28]
 8011ada:	e010      	b.n	8011afe <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8011adc:	69bb      	ldr	r3, [r7, #24]
 8011ade:	2b01      	cmp	r3, #1
 8011ae0:	d108      	bne.n	8011af4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	689b      	ldr	r3, [r3, #8]
 8011ae6:	461a      	mov	r2, r3
 8011ae8:	68b9      	ldr	r1, [r7, #8]
 8011aea:	68f8      	ldr	r0, [r7, #12]
 8011aec:	f000 fb73 	bl	80121d6 <xQueueCreateCountingSemaphoreStatic>
 8011af0:	61f8      	str	r0, [r7, #28]
 8011af2:	e004      	b.n	8011afe <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011af4:	68b9      	ldr	r1, [r7, #8]
 8011af6:	68f8      	ldr	r0, [r7, #12]
 8011af8:	f000 fba4 	bl	8012244 <xQueueCreateCountingSemaphore>
 8011afc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011afe:	69fb      	ldr	r3, [r7, #28]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d00c      	beq.n	8011b1e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d003      	beq.n	8011b12 <osSemaphoreNew+0xfc>
          name = attr->name;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	617b      	str	r3, [r7, #20]
 8011b10:	e001      	b.n	8011b16 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8011b12:	2300      	movs	r3, #0
 8011b14:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011b16:	6979      	ldr	r1, [r7, #20]
 8011b18:	69f8      	ldr	r0, [r7, #28]
 8011b1a:	f000 fff5 	bl	8012b08 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011b1e:	69fb      	ldr	r3, [r7, #28]
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3720      	adds	r7, #32
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b08a      	sub	sp, #40	; 0x28
 8011b2c:	af02      	add	r7, sp, #8
 8011b2e:	60f8      	str	r0, [r7, #12]
 8011b30:	60b9      	str	r1, [r7, #8]
 8011b32:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011b34:	2300      	movs	r3, #0
 8011b36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b38:	f3ef 8305 	mrs	r3, IPSR
 8011b3c:	613b      	str	r3, [r7, #16]
  return(result);
 8011b3e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d15f      	bne.n	8011c04 <osMessageQueueNew+0xdc>
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d05c      	beq.n	8011c04 <osMessageQueueNew+0xdc>
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d059      	beq.n	8011c04 <osMessageQueueNew+0xdc>
    mem = -1;
 8011b50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b54:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d029      	beq.n	8011bb0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	689b      	ldr	r3, [r3, #8]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d012      	beq.n	8011b8a <osMessageQueueNew+0x62>
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	68db      	ldr	r3, [r3, #12]
 8011b68:	2b4f      	cmp	r3, #79	; 0x4f
 8011b6a:	d90e      	bls.n	8011b8a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d00a      	beq.n	8011b8a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	695a      	ldr	r2, [r3, #20]
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	68b9      	ldr	r1, [r7, #8]
 8011b7c:	fb01 f303 	mul.w	r3, r1, r3
 8011b80:	429a      	cmp	r2, r3
 8011b82:	d302      	bcc.n	8011b8a <osMessageQueueNew+0x62>
        mem = 1;
 8011b84:	2301      	movs	r3, #1
 8011b86:	61bb      	str	r3, [r7, #24]
 8011b88:	e014      	b.n	8011bb4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	689b      	ldr	r3, [r3, #8]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d110      	bne.n	8011bb4 <osMessageQueueNew+0x8c>
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	68db      	ldr	r3, [r3, #12]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d10c      	bne.n	8011bb4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d108      	bne.n	8011bb4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	695b      	ldr	r3, [r3, #20]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d104      	bne.n	8011bb4 <osMessageQueueNew+0x8c>
          mem = 0;
 8011baa:	2300      	movs	r3, #0
 8011bac:	61bb      	str	r3, [r7, #24]
 8011bae:	e001      	b.n	8011bb4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011bb4:	69bb      	ldr	r3, [r7, #24]
 8011bb6:	2b01      	cmp	r3, #1
 8011bb8:	d10b      	bne.n	8011bd2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	691a      	ldr	r2, [r3, #16]
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	689b      	ldr	r3, [r3, #8]
 8011bc2:	2100      	movs	r1, #0
 8011bc4:	9100      	str	r1, [sp, #0]
 8011bc6:	68b9      	ldr	r1, [r7, #8]
 8011bc8:	68f8      	ldr	r0, [r7, #12]
 8011bca:	f000 fa2f 	bl	801202c <xQueueGenericCreateStatic>
 8011bce:	61f8      	str	r0, [r7, #28]
 8011bd0:	e008      	b.n	8011be4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8011bd2:	69bb      	ldr	r3, [r7, #24]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d105      	bne.n	8011be4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011bd8:	2200      	movs	r2, #0
 8011bda:	68b9      	ldr	r1, [r7, #8]
 8011bdc:	68f8      	ldr	r0, [r7, #12]
 8011bde:	f000 fa9d 	bl	801211c <xQueueGenericCreate>
 8011be2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011be4:	69fb      	ldr	r3, [r7, #28]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d00c      	beq.n	8011c04 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d003      	beq.n	8011bf8 <osMessageQueueNew+0xd0>
        name = attr->name;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	617b      	str	r3, [r7, #20]
 8011bf6:	e001      	b.n	8011bfc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8011bfc:	6979      	ldr	r1, [r7, #20]
 8011bfe:	69f8      	ldr	r0, [r7, #28]
 8011c00:	f000 ff82 	bl	8012b08 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011c04:	69fb      	ldr	r3, [r7, #28]
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3720      	adds	r7, #32
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}
	...

08011c10 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b088      	sub	sp, #32
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	60f8      	str	r0, [r7, #12]
 8011c18:	60b9      	str	r1, [r7, #8]
 8011c1a:	603b      	str	r3, [r7, #0]
 8011c1c:	4613      	mov	r3, r2
 8011c1e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011c24:	2300      	movs	r3, #0
 8011c26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c28:	f3ef 8305 	mrs	r3, IPSR
 8011c2c:	617b      	str	r3, [r7, #20]
  return(result);
 8011c2e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d028      	beq.n	8011c86 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011c34:	69bb      	ldr	r3, [r7, #24]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d005      	beq.n	8011c46 <osMessageQueuePut+0x36>
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d002      	beq.n	8011c46 <osMessageQueuePut+0x36>
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d003      	beq.n	8011c4e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8011c46:	f06f 0303 	mvn.w	r3, #3
 8011c4a:	61fb      	str	r3, [r7, #28]
 8011c4c:	e038      	b.n	8011cc0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011c52:	f107 0210 	add.w	r2, r7, #16
 8011c56:	2300      	movs	r3, #0
 8011c58:	68b9      	ldr	r1, [r7, #8]
 8011c5a:	69b8      	ldr	r0, [r7, #24]
 8011c5c:	f000 fc24 	bl	80124a8 <xQueueGenericSendFromISR>
 8011c60:	4603      	mov	r3, r0
 8011c62:	2b01      	cmp	r3, #1
 8011c64:	d003      	beq.n	8011c6e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8011c66:	f06f 0302 	mvn.w	r3, #2
 8011c6a:	61fb      	str	r3, [r7, #28]
 8011c6c:	e028      	b.n	8011cc0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8011c6e:	693b      	ldr	r3, [r7, #16]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d025      	beq.n	8011cc0 <osMessageQueuePut+0xb0>
 8011c74:	4b15      	ldr	r3, [pc, #84]	; (8011ccc <osMessageQueuePut+0xbc>)
 8011c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c7a:	601a      	str	r2, [r3, #0]
 8011c7c:	f3bf 8f4f 	dsb	sy
 8011c80:	f3bf 8f6f 	isb	sy
 8011c84:	e01c      	b.n	8011cc0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011c86:	69bb      	ldr	r3, [r7, #24]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d002      	beq.n	8011c92 <osMessageQueuePut+0x82>
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d103      	bne.n	8011c9a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8011c92:	f06f 0303 	mvn.w	r3, #3
 8011c96:	61fb      	str	r3, [r7, #28]
 8011c98:	e012      	b.n	8011cc0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	683a      	ldr	r2, [r7, #0]
 8011c9e:	68b9      	ldr	r1, [r7, #8]
 8011ca0:	69b8      	ldr	r0, [r7, #24]
 8011ca2:	f000 fb03 	bl	80122ac <xQueueGenericSend>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d009      	beq.n	8011cc0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d003      	beq.n	8011cba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8011cb2:	f06f 0301 	mvn.w	r3, #1
 8011cb6:	61fb      	str	r3, [r7, #28]
 8011cb8:	e002      	b.n	8011cc0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8011cba:	f06f 0302 	mvn.w	r3, #2
 8011cbe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011cc0:	69fb      	ldr	r3, [r7, #28]
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3720      	adds	r7, #32
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	e000ed04 	.word	0xe000ed04

08011cd0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b088      	sub	sp, #32
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	60f8      	str	r0, [r7, #12]
 8011cd8:	60b9      	str	r1, [r7, #8]
 8011cda:	607a      	str	r2, [r7, #4]
 8011cdc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ce6:	f3ef 8305 	mrs	r3, IPSR
 8011cea:	617b      	str	r3, [r7, #20]
  return(result);
 8011cec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d028      	beq.n	8011d44 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011cf2:	69bb      	ldr	r3, [r7, #24]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d005      	beq.n	8011d04 <osMessageQueueGet+0x34>
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d002      	beq.n	8011d04 <osMessageQueueGet+0x34>
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d003      	beq.n	8011d0c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8011d04:	f06f 0303 	mvn.w	r3, #3
 8011d08:	61fb      	str	r3, [r7, #28]
 8011d0a:	e037      	b.n	8011d7c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011d10:	f107 0310 	add.w	r3, r7, #16
 8011d14:	461a      	mov	r2, r3
 8011d16:	68b9      	ldr	r1, [r7, #8]
 8011d18:	69b8      	ldr	r0, [r7, #24]
 8011d1a:	f000 fd41 	bl	80127a0 <xQueueReceiveFromISR>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	2b01      	cmp	r3, #1
 8011d22:	d003      	beq.n	8011d2c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8011d24:	f06f 0302 	mvn.w	r3, #2
 8011d28:	61fb      	str	r3, [r7, #28]
 8011d2a:	e027      	b.n	8011d7c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d024      	beq.n	8011d7c <osMessageQueueGet+0xac>
 8011d32:	4b15      	ldr	r3, [pc, #84]	; (8011d88 <osMessageQueueGet+0xb8>)
 8011d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d38:	601a      	str	r2, [r3, #0]
 8011d3a:	f3bf 8f4f 	dsb	sy
 8011d3e:	f3bf 8f6f 	isb	sy
 8011d42:	e01b      	b.n	8011d7c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011d44:	69bb      	ldr	r3, [r7, #24]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d002      	beq.n	8011d50 <osMessageQueueGet+0x80>
 8011d4a:	68bb      	ldr	r3, [r7, #8]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d103      	bne.n	8011d58 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8011d50:	f06f 0303 	mvn.w	r3, #3
 8011d54:	61fb      	str	r3, [r7, #28]
 8011d56:	e011      	b.n	8011d7c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011d58:	683a      	ldr	r2, [r7, #0]
 8011d5a:	68b9      	ldr	r1, [r7, #8]
 8011d5c:	69b8      	ldr	r0, [r7, #24]
 8011d5e:	f000 fc3f 	bl	80125e0 <xQueueReceive>
 8011d62:	4603      	mov	r3, r0
 8011d64:	2b01      	cmp	r3, #1
 8011d66:	d009      	beq.n	8011d7c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d003      	beq.n	8011d76 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8011d6e:	f06f 0301 	mvn.w	r3, #1
 8011d72:	61fb      	str	r3, [r7, #28]
 8011d74:	e002      	b.n	8011d7c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8011d76:	f06f 0302 	mvn.w	r3, #2
 8011d7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011d7c:	69fb      	ldr	r3, [r7, #28]
}
 8011d7e:	4618      	mov	r0, r3
 8011d80:	3720      	adds	r7, #32
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
 8011d86:	bf00      	nop
 8011d88:	e000ed04 	.word	0xe000ed04

08011d8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011d8c:	b480      	push	{r7}
 8011d8e:	b085      	sub	sp, #20
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	60f8      	str	r0, [r7, #12]
 8011d94:	60b9      	str	r1, [r7, #8]
 8011d96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	4a07      	ldr	r2, [pc, #28]	; (8011db8 <vApplicationGetIdleTaskMemory+0x2c>)
 8011d9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	4a06      	ldr	r2, [pc, #24]	; (8011dbc <vApplicationGetIdleTaskMemory+0x30>)
 8011da2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2280      	movs	r2, #128	; 0x80
 8011da8:	601a      	str	r2, [r3, #0]
}
 8011daa:	bf00      	nop
 8011dac:	3714      	adds	r7, #20
 8011dae:	46bd      	mov	sp, r7
 8011db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db4:	4770      	bx	lr
 8011db6:	bf00      	nop
 8011db8:	20007f1c 	.word	0x20007f1c
 8011dbc:	20007fd8 	.word	0x20007fd8

08011dc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011dc0:	b480      	push	{r7}
 8011dc2:	b085      	sub	sp, #20
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	60f8      	str	r0, [r7, #12]
 8011dc8:	60b9      	str	r1, [r7, #8]
 8011dca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	4a07      	ldr	r2, [pc, #28]	; (8011dec <vApplicationGetTimerTaskMemory+0x2c>)
 8011dd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	4a06      	ldr	r2, [pc, #24]	; (8011df0 <vApplicationGetTimerTaskMemory+0x30>)
 8011dd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011dde:	601a      	str	r2, [r3, #0]
}
 8011de0:	bf00      	nop
 8011de2:	3714      	adds	r7, #20
 8011de4:	46bd      	mov	sp, r7
 8011de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dea:	4770      	bx	lr
 8011dec:	200081d8 	.word	0x200081d8
 8011df0:	20008294 	.word	0x20008294

08011df4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011df4:	b480      	push	{r7}
 8011df6:	b083      	sub	sp, #12
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f103 0208 	add.w	r2, r3, #8
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f103 0208 	add.w	r2, r3, #8
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	f103 0208 	add.w	r2, r3, #8
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2200      	movs	r2, #0
 8011e26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011e28:	bf00      	nop
 8011e2a:	370c      	adds	r7, #12
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e32:	4770      	bx	lr

08011e34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011e34:	b480      	push	{r7}
 8011e36:	b083      	sub	sp, #12
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2200      	movs	r2, #0
 8011e40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011e42:	bf00      	nop
 8011e44:	370c      	adds	r7, #12
 8011e46:	46bd      	mov	sp, r7
 8011e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4c:	4770      	bx	lr

08011e4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011e4e:	b480      	push	{r7}
 8011e50:	b085      	sub	sp, #20
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	6078      	str	r0, [r7, #4]
 8011e56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	685b      	ldr	r3, [r3, #4]
 8011e5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	68fa      	ldr	r2, [r7, #12]
 8011e62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	689a      	ldr	r2, [r3, #8]
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	689b      	ldr	r3, [r3, #8]
 8011e70:	683a      	ldr	r2, [r7, #0]
 8011e72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	683a      	ldr	r2, [r7, #0]
 8011e78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	687a      	ldr	r2, [r7, #4]
 8011e7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	1c5a      	adds	r2, r3, #1
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	601a      	str	r2, [r3, #0]
}
 8011e8a:	bf00      	nop
 8011e8c:	3714      	adds	r7, #20
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e94:	4770      	bx	lr

08011e96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011e96:	b480      	push	{r7}
 8011e98:	b085      	sub	sp, #20
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	6078      	str	r0, [r7, #4]
 8011e9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011eac:	d103      	bne.n	8011eb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	691b      	ldr	r3, [r3, #16]
 8011eb2:	60fb      	str	r3, [r7, #12]
 8011eb4:	e00c      	b.n	8011ed0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	3308      	adds	r3, #8
 8011eba:	60fb      	str	r3, [r7, #12]
 8011ebc:	e002      	b.n	8011ec4 <vListInsert+0x2e>
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	685b      	ldr	r3, [r3, #4]
 8011ec2:	60fb      	str	r3, [r7, #12]
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	685b      	ldr	r3, [r3, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	68ba      	ldr	r2, [r7, #8]
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d2f6      	bcs.n	8011ebe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	685a      	ldr	r2, [r3, #4]
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	683a      	ldr	r2, [r7, #0]
 8011ede:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	68fa      	ldr	r2, [r7, #12]
 8011ee4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	683a      	ldr	r2, [r7, #0]
 8011eea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	687a      	ldr	r2, [r7, #4]
 8011ef0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	1c5a      	adds	r2, r3, #1
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	601a      	str	r2, [r3, #0]
}
 8011efc:	bf00      	nop
 8011efe:	3714      	adds	r7, #20
 8011f00:	46bd      	mov	sp, r7
 8011f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f06:	4770      	bx	lr

08011f08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b085      	sub	sp, #20
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	691b      	ldr	r3, [r3, #16]
 8011f14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	6892      	ldr	r2, [r2, #8]
 8011f1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	689b      	ldr	r3, [r3, #8]
 8011f24:	687a      	ldr	r2, [r7, #4]
 8011f26:	6852      	ldr	r2, [r2, #4]
 8011f28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	687a      	ldr	r2, [r7, #4]
 8011f30:	429a      	cmp	r2, r3
 8011f32:	d103      	bne.n	8011f3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	689a      	ldr	r2, [r3, #8]
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	1e5a      	subs	r2, r3, #1
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	681b      	ldr	r3, [r3, #0]
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	3714      	adds	r7, #20
 8011f54:	46bd      	mov	sp, r7
 8011f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5a:	4770      	bx	lr

08011f5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b084      	sub	sp, #16
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d10a      	bne.n	8011f86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f74:	f383 8811 	msr	BASEPRI, r3
 8011f78:	f3bf 8f6f 	isb	sy
 8011f7c:	f3bf 8f4f 	dsb	sy
 8011f80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011f82:	bf00      	nop
 8011f84:	e7fe      	b.n	8011f84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011f86:	f002 f9ed 	bl	8014364 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	681a      	ldr	r2, [r3, #0]
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f92:	68f9      	ldr	r1, [r7, #12]
 8011f94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011f96:	fb01 f303 	mul.w	r3, r1, r3
 8011f9a:	441a      	add	r2, r3
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	681a      	ldr	r2, [r3, #0]
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	681a      	ldr	r2, [r3, #0]
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fb6:	3b01      	subs	r3, #1
 8011fb8:	68f9      	ldr	r1, [r7, #12]
 8011fba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011fbc:	fb01 f303 	mul.w	r3, r1, r3
 8011fc0:	441a      	add	r2, r3
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	22ff      	movs	r2, #255	; 0xff
 8011fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	22ff      	movs	r2, #255	; 0xff
 8011fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d114      	bne.n	8012006 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	691b      	ldr	r3, [r3, #16]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d01a      	beq.n	801201a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	3310      	adds	r3, #16
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f001 fa9b 	bl	8013524 <xTaskRemoveFromEventList>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d012      	beq.n	801201a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011ff4:	4b0c      	ldr	r3, [pc, #48]	; (8012028 <xQueueGenericReset+0xcc>)
 8011ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ffa:	601a      	str	r2, [r3, #0]
 8011ffc:	f3bf 8f4f 	dsb	sy
 8012000:	f3bf 8f6f 	isb	sy
 8012004:	e009      	b.n	801201a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	3310      	adds	r3, #16
 801200a:	4618      	mov	r0, r3
 801200c:	f7ff fef2 	bl	8011df4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	3324      	adds	r3, #36	; 0x24
 8012014:	4618      	mov	r0, r3
 8012016:	f7ff feed 	bl	8011df4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801201a:	f002 f9d3 	bl	80143c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801201e:	2301      	movs	r3, #1
}
 8012020:	4618      	mov	r0, r3
 8012022:	3710      	adds	r7, #16
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}
 8012028:	e000ed04 	.word	0xe000ed04

0801202c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801202c:	b580      	push	{r7, lr}
 801202e:	b08e      	sub	sp, #56	; 0x38
 8012030:	af02      	add	r7, sp, #8
 8012032:	60f8      	str	r0, [r7, #12]
 8012034:	60b9      	str	r1, [r7, #8]
 8012036:	607a      	str	r2, [r7, #4]
 8012038:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d10a      	bne.n	8012056 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012044:	f383 8811 	msr	BASEPRI, r3
 8012048:	f3bf 8f6f 	isb	sy
 801204c:	f3bf 8f4f 	dsb	sy
 8012050:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012052:	bf00      	nop
 8012054:	e7fe      	b.n	8012054 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d10a      	bne.n	8012072 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801205c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012060:	f383 8811 	msr	BASEPRI, r3
 8012064:	f3bf 8f6f 	isb	sy
 8012068:	f3bf 8f4f 	dsb	sy
 801206c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801206e:	bf00      	nop
 8012070:	e7fe      	b.n	8012070 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d002      	beq.n	801207e <xQueueGenericCreateStatic+0x52>
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d001      	beq.n	8012082 <xQueueGenericCreateStatic+0x56>
 801207e:	2301      	movs	r3, #1
 8012080:	e000      	b.n	8012084 <xQueueGenericCreateStatic+0x58>
 8012082:	2300      	movs	r3, #0
 8012084:	2b00      	cmp	r3, #0
 8012086:	d10a      	bne.n	801209e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801208c:	f383 8811 	msr	BASEPRI, r3
 8012090:	f3bf 8f6f 	isb	sy
 8012094:	f3bf 8f4f 	dsb	sy
 8012098:	623b      	str	r3, [r7, #32]
}
 801209a:	bf00      	nop
 801209c:	e7fe      	b.n	801209c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d102      	bne.n	80120aa <xQueueGenericCreateStatic+0x7e>
 80120a4:	68bb      	ldr	r3, [r7, #8]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d101      	bne.n	80120ae <xQueueGenericCreateStatic+0x82>
 80120aa:	2301      	movs	r3, #1
 80120ac:	e000      	b.n	80120b0 <xQueueGenericCreateStatic+0x84>
 80120ae:	2300      	movs	r3, #0
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d10a      	bne.n	80120ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80120b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b8:	f383 8811 	msr	BASEPRI, r3
 80120bc:	f3bf 8f6f 	isb	sy
 80120c0:	f3bf 8f4f 	dsb	sy
 80120c4:	61fb      	str	r3, [r7, #28]
}
 80120c6:	bf00      	nop
 80120c8:	e7fe      	b.n	80120c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80120ca:	2350      	movs	r3, #80	; 0x50
 80120cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80120ce:	697b      	ldr	r3, [r7, #20]
 80120d0:	2b50      	cmp	r3, #80	; 0x50
 80120d2:	d00a      	beq.n	80120ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80120d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d8:	f383 8811 	msr	BASEPRI, r3
 80120dc:	f3bf 8f6f 	isb	sy
 80120e0:	f3bf 8f4f 	dsb	sy
 80120e4:	61bb      	str	r3, [r7, #24]
}
 80120e6:	bf00      	nop
 80120e8:	e7fe      	b.n	80120e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80120ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80120f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d00d      	beq.n	8012112 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80120f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f8:	2201      	movs	r2, #1
 80120fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80120fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012104:	9300      	str	r3, [sp, #0]
 8012106:	4613      	mov	r3, r2
 8012108:	687a      	ldr	r2, [r7, #4]
 801210a:	68b9      	ldr	r1, [r7, #8]
 801210c:	68f8      	ldr	r0, [r7, #12]
 801210e:	f000 f83f 	bl	8012190 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012114:	4618      	mov	r0, r3
 8012116:	3730      	adds	r7, #48	; 0x30
 8012118:	46bd      	mov	sp, r7
 801211a:	bd80      	pop	{r7, pc}

0801211c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801211c:	b580      	push	{r7, lr}
 801211e:	b08a      	sub	sp, #40	; 0x28
 8012120:	af02      	add	r7, sp, #8
 8012122:	60f8      	str	r0, [r7, #12]
 8012124:	60b9      	str	r1, [r7, #8]
 8012126:	4613      	mov	r3, r2
 8012128:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d10a      	bne.n	8012146 <xQueueGenericCreate+0x2a>
	__asm volatile
 8012130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012134:	f383 8811 	msr	BASEPRI, r3
 8012138:	f3bf 8f6f 	isb	sy
 801213c:	f3bf 8f4f 	dsb	sy
 8012140:	613b      	str	r3, [r7, #16]
}
 8012142:	bf00      	nop
 8012144:	e7fe      	b.n	8012144 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	68ba      	ldr	r2, [r7, #8]
 801214a:	fb02 f303 	mul.w	r3, r2, r3
 801214e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012150:	69fb      	ldr	r3, [r7, #28]
 8012152:	3350      	adds	r3, #80	; 0x50
 8012154:	4618      	mov	r0, r3
 8012156:	f002 fa27 	bl	80145a8 <pvPortMalloc>
 801215a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801215c:	69bb      	ldr	r3, [r7, #24]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d011      	beq.n	8012186 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012162:	69bb      	ldr	r3, [r7, #24]
 8012164:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	3350      	adds	r3, #80	; 0x50
 801216a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801216c:	69bb      	ldr	r3, [r7, #24]
 801216e:	2200      	movs	r2, #0
 8012170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012174:	79fa      	ldrb	r2, [r7, #7]
 8012176:	69bb      	ldr	r3, [r7, #24]
 8012178:	9300      	str	r3, [sp, #0]
 801217a:	4613      	mov	r3, r2
 801217c:	697a      	ldr	r2, [r7, #20]
 801217e:	68b9      	ldr	r1, [r7, #8]
 8012180:	68f8      	ldr	r0, [r7, #12]
 8012182:	f000 f805 	bl	8012190 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012186:	69bb      	ldr	r3, [r7, #24]
	}
 8012188:	4618      	mov	r0, r3
 801218a:	3720      	adds	r7, #32
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b084      	sub	sp, #16
 8012194:	af00      	add	r7, sp, #0
 8012196:	60f8      	str	r0, [r7, #12]
 8012198:	60b9      	str	r1, [r7, #8]
 801219a:	607a      	str	r2, [r7, #4]
 801219c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801219e:	68bb      	ldr	r3, [r7, #8]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d103      	bne.n	80121ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80121a4:	69bb      	ldr	r3, [r7, #24]
 80121a6:	69ba      	ldr	r2, [r7, #24]
 80121a8:	601a      	str	r2, [r3, #0]
 80121aa:	e002      	b.n	80121b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80121ac:	69bb      	ldr	r3, [r7, #24]
 80121ae:	687a      	ldr	r2, [r7, #4]
 80121b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80121b2:	69bb      	ldr	r3, [r7, #24]
 80121b4:	68fa      	ldr	r2, [r7, #12]
 80121b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80121b8:	69bb      	ldr	r3, [r7, #24]
 80121ba:	68ba      	ldr	r2, [r7, #8]
 80121bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80121be:	2101      	movs	r1, #1
 80121c0:	69b8      	ldr	r0, [r7, #24]
 80121c2:	f7ff fecb 	bl	8011f5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	78fa      	ldrb	r2, [r7, #3]
 80121ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80121ce:	bf00      	nop
 80121d0:	3710      	adds	r7, #16
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}

080121d6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80121d6:	b580      	push	{r7, lr}
 80121d8:	b08a      	sub	sp, #40	; 0x28
 80121da:	af02      	add	r7, sp, #8
 80121dc:	60f8      	str	r0, [r7, #12]
 80121de:	60b9      	str	r1, [r7, #8]
 80121e0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d10a      	bne.n	80121fe <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80121e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ec:	f383 8811 	msr	BASEPRI, r3
 80121f0:	f3bf 8f6f 	isb	sy
 80121f4:	f3bf 8f4f 	dsb	sy
 80121f8:	61bb      	str	r3, [r7, #24]
}
 80121fa:	bf00      	nop
 80121fc:	e7fe      	b.n	80121fc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80121fe:	68ba      	ldr	r2, [r7, #8]
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	429a      	cmp	r2, r3
 8012204:	d90a      	bls.n	801221c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8012206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801220a:	f383 8811 	msr	BASEPRI, r3
 801220e:	f3bf 8f6f 	isb	sy
 8012212:	f3bf 8f4f 	dsb	sy
 8012216:	617b      	str	r3, [r7, #20]
}
 8012218:	bf00      	nop
 801221a:	e7fe      	b.n	801221a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801221c:	2302      	movs	r3, #2
 801221e:	9300      	str	r3, [sp, #0]
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2200      	movs	r2, #0
 8012224:	2100      	movs	r1, #0
 8012226:	68f8      	ldr	r0, [r7, #12]
 8012228:	f7ff ff00 	bl	801202c <xQueueGenericCreateStatic>
 801222c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801222e:	69fb      	ldr	r3, [r7, #28]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d002      	beq.n	801223a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	68ba      	ldr	r2, [r7, #8]
 8012238:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801223a:	69fb      	ldr	r3, [r7, #28]
	}
 801223c:	4618      	mov	r0, r3
 801223e:	3720      	adds	r7, #32
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}

08012244 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8012244:	b580      	push	{r7, lr}
 8012246:	b086      	sub	sp, #24
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d10a      	bne.n	801226a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8012254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012258:	f383 8811 	msr	BASEPRI, r3
 801225c:	f3bf 8f6f 	isb	sy
 8012260:	f3bf 8f4f 	dsb	sy
 8012264:	613b      	str	r3, [r7, #16]
}
 8012266:	bf00      	nop
 8012268:	e7fe      	b.n	8012268 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801226a:	683a      	ldr	r2, [r7, #0]
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	429a      	cmp	r2, r3
 8012270:	d90a      	bls.n	8012288 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8012272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012276:	f383 8811 	msr	BASEPRI, r3
 801227a:	f3bf 8f6f 	isb	sy
 801227e:	f3bf 8f4f 	dsb	sy
 8012282:	60fb      	str	r3, [r7, #12]
}
 8012284:	bf00      	nop
 8012286:	e7fe      	b.n	8012286 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012288:	2202      	movs	r2, #2
 801228a:	2100      	movs	r1, #0
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f7ff ff45 	bl	801211c <xQueueGenericCreate>
 8012292:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d002      	beq.n	80122a0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801229a:	697b      	ldr	r3, [r7, #20]
 801229c:	683a      	ldr	r2, [r7, #0]
 801229e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80122a0:	697b      	ldr	r3, [r7, #20]
	}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3718      	adds	r7, #24
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}
	...

080122ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b08e      	sub	sp, #56	; 0x38
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	60f8      	str	r0, [r7, #12]
 80122b4:	60b9      	str	r1, [r7, #8]
 80122b6:	607a      	str	r2, [r7, #4]
 80122b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80122ba:	2300      	movs	r3, #0
 80122bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80122c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d10a      	bne.n	80122de <xQueueGenericSend+0x32>
	__asm volatile
 80122c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122cc:	f383 8811 	msr	BASEPRI, r3
 80122d0:	f3bf 8f6f 	isb	sy
 80122d4:	f3bf 8f4f 	dsb	sy
 80122d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80122da:	bf00      	nop
 80122dc:	e7fe      	b.n	80122dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d103      	bne.n	80122ec <xQueueGenericSend+0x40>
 80122e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d101      	bne.n	80122f0 <xQueueGenericSend+0x44>
 80122ec:	2301      	movs	r3, #1
 80122ee:	e000      	b.n	80122f2 <xQueueGenericSend+0x46>
 80122f0:	2300      	movs	r3, #0
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d10a      	bne.n	801230c <xQueueGenericSend+0x60>
	__asm volatile
 80122f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122fa:	f383 8811 	msr	BASEPRI, r3
 80122fe:	f3bf 8f6f 	isb	sy
 8012302:	f3bf 8f4f 	dsb	sy
 8012306:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012308:	bf00      	nop
 801230a:	e7fe      	b.n	801230a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	2b02      	cmp	r3, #2
 8012310:	d103      	bne.n	801231a <xQueueGenericSend+0x6e>
 8012312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012316:	2b01      	cmp	r3, #1
 8012318:	d101      	bne.n	801231e <xQueueGenericSend+0x72>
 801231a:	2301      	movs	r3, #1
 801231c:	e000      	b.n	8012320 <xQueueGenericSend+0x74>
 801231e:	2300      	movs	r3, #0
 8012320:	2b00      	cmp	r3, #0
 8012322:	d10a      	bne.n	801233a <xQueueGenericSend+0x8e>
	__asm volatile
 8012324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012328:	f383 8811 	msr	BASEPRI, r3
 801232c:	f3bf 8f6f 	isb	sy
 8012330:	f3bf 8f4f 	dsb	sy
 8012334:	623b      	str	r3, [r7, #32]
}
 8012336:	bf00      	nop
 8012338:	e7fe      	b.n	8012338 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801233a:	f001 fab5 	bl	80138a8 <xTaskGetSchedulerState>
 801233e:	4603      	mov	r3, r0
 8012340:	2b00      	cmp	r3, #0
 8012342:	d102      	bne.n	801234a <xQueueGenericSend+0x9e>
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d101      	bne.n	801234e <xQueueGenericSend+0xa2>
 801234a:	2301      	movs	r3, #1
 801234c:	e000      	b.n	8012350 <xQueueGenericSend+0xa4>
 801234e:	2300      	movs	r3, #0
 8012350:	2b00      	cmp	r3, #0
 8012352:	d10a      	bne.n	801236a <xQueueGenericSend+0xbe>
	__asm volatile
 8012354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012358:	f383 8811 	msr	BASEPRI, r3
 801235c:	f3bf 8f6f 	isb	sy
 8012360:	f3bf 8f4f 	dsb	sy
 8012364:	61fb      	str	r3, [r7, #28]
}
 8012366:	bf00      	nop
 8012368:	e7fe      	b.n	8012368 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801236a:	f001 fffb 	bl	8014364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012376:	429a      	cmp	r2, r3
 8012378:	d302      	bcc.n	8012380 <xQueueGenericSend+0xd4>
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	2b02      	cmp	r3, #2
 801237e:	d129      	bne.n	80123d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012380:	683a      	ldr	r2, [r7, #0]
 8012382:	68b9      	ldr	r1, [r7, #8]
 8012384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012386:	f000 faae 	bl	80128e6 <prvCopyDataToQueue>
 801238a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012390:	2b00      	cmp	r3, #0
 8012392:	d010      	beq.n	80123b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012396:	3324      	adds	r3, #36	; 0x24
 8012398:	4618      	mov	r0, r3
 801239a:	f001 f8c3 	bl	8013524 <xTaskRemoveFromEventList>
 801239e:	4603      	mov	r3, r0
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d013      	beq.n	80123cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80123a4:	4b3f      	ldr	r3, [pc, #252]	; (80124a4 <xQueueGenericSend+0x1f8>)
 80123a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123aa:	601a      	str	r2, [r3, #0]
 80123ac:	f3bf 8f4f 	dsb	sy
 80123b0:	f3bf 8f6f 	isb	sy
 80123b4:	e00a      	b.n	80123cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80123b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d007      	beq.n	80123cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80123bc:	4b39      	ldr	r3, [pc, #228]	; (80124a4 <xQueueGenericSend+0x1f8>)
 80123be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123c2:	601a      	str	r2, [r3, #0]
 80123c4:	f3bf 8f4f 	dsb	sy
 80123c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80123cc:	f001 fffa 	bl	80143c4 <vPortExitCritical>
				return pdPASS;
 80123d0:	2301      	movs	r3, #1
 80123d2:	e063      	b.n	801249c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d103      	bne.n	80123e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80123da:	f001 fff3 	bl	80143c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80123de:	2300      	movs	r3, #0
 80123e0:	e05c      	b.n	801249c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80123e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d106      	bne.n	80123f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80123e8:	f107 0314 	add.w	r3, r7, #20
 80123ec:	4618      	mov	r0, r3
 80123ee:	f001 f8fd 	bl	80135ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80123f2:	2301      	movs	r3, #1
 80123f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80123f6:	f001 ffe5 	bl	80143c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80123fa:	f000 fe69 	bl	80130d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80123fe:	f001 ffb1 	bl	8014364 <vPortEnterCritical>
 8012402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012404:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012408:	b25b      	sxtb	r3, r3
 801240a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801240e:	d103      	bne.n	8012418 <xQueueGenericSend+0x16c>
 8012410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012412:	2200      	movs	r2, #0
 8012414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801241e:	b25b      	sxtb	r3, r3
 8012420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012424:	d103      	bne.n	801242e <xQueueGenericSend+0x182>
 8012426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012428:	2200      	movs	r2, #0
 801242a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801242e:	f001 ffc9 	bl	80143c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012432:	1d3a      	adds	r2, r7, #4
 8012434:	f107 0314 	add.w	r3, r7, #20
 8012438:	4611      	mov	r1, r2
 801243a:	4618      	mov	r0, r3
 801243c:	f001 f8ec 	bl	8013618 <xTaskCheckForTimeOut>
 8012440:	4603      	mov	r3, r0
 8012442:	2b00      	cmp	r3, #0
 8012444:	d124      	bne.n	8012490 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012448:	f000 fb45 	bl	8012ad6 <prvIsQueueFull>
 801244c:	4603      	mov	r3, r0
 801244e:	2b00      	cmp	r3, #0
 8012450:	d018      	beq.n	8012484 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012454:	3310      	adds	r3, #16
 8012456:	687a      	ldr	r2, [r7, #4]
 8012458:	4611      	mov	r1, r2
 801245a:	4618      	mov	r0, r3
 801245c:	f001 f812 	bl	8013484 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012462:	f000 fad0 	bl	8012a06 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012466:	f000 fe41 	bl	80130ec <xTaskResumeAll>
 801246a:	4603      	mov	r3, r0
 801246c:	2b00      	cmp	r3, #0
 801246e:	f47f af7c 	bne.w	801236a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8012472:	4b0c      	ldr	r3, [pc, #48]	; (80124a4 <xQueueGenericSend+0x1f8>)
 8012474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012478:	601a      	str	r2, [r3, #0]
 801247a:	f3bf 8f4f 	dsb	sy
 801247e:	f3bf 8f6f 	isb	sy
 8012482:	e772      	b.n	801236a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012486:	f000 fabe 	bl	8012a06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801248a:	f000 fe2f 	bl	80130ec <xTaskResumeAll>
 801248e:	e76c      	b.n	801236a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012492:	f000 fab8 	bl	8012a06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012496:	f000 fe29 	bl	80130ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801249a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801249c:	4618      	mov	r0, r3
 801249e:	3738      	adds	r7, #56	; 0x38
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	e000ed04 	.word	0xe000ed04

080124a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b090      	sub	sp, #64	; 0x40
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	607a      	str	r2, [r7, #4]
 80124b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80124ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d10a      	bne.n	80124d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80124c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124c4:	f383 8811 	msr	BASEPRI, r3
 80124c8:	f3bf 8f6f 	isb	sy
 80124cc:	f3bf 8f4f 	dsb	sy
 80124d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80124d2:	bf00      	nop
 80124d4:	e7fe      	b.n	80124d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d103      	bne.n	80124e4 <xQueueGenericSendFromISR+0x3c>
 80124dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d101      	bne.n	80124e8 <xQueueGenericSendFromISR+0x40>
 80124e4:	2301      	movs	r3, #1
 80124e6:	e000      	b.n	80124ea <xQueueGenericSendFromISR+0x42>
 80124e8:	2300      	movs	r3, #0
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d10a      	bne.n	8012504 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80124ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124f2:	f383 8811 	msr	BASEPRI, r3
 80124f6:	f3bf 8f6f 	isb	sy
 80124fa:	f3bf 8f4f 	dsb	sy
 80124fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012500:	bf00      	nop
 8012502:	e7fe      	b.n	8012502 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	2b02      	cmp	r3, #2
 8012508:	d103      	bne.n	8012512 <xQueueGenericSendFromISR+0x6a>
 801250a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801250e:	2b01      	cmp	r3, #1
 8012510:	d101      	bne.n	8012516 <xQueueGenericSendFromISR+0x6e>
 8012512:	2301      	movs	r3, #1
 8012514:	e000      	b.n	8012518 <xQueueGenericSendFromISR+0x70>
 8012516:	2300      	movs	r3, #0
 8012518:	2b00      	cmp	r3, #0
 801251a:	d10a      	bne.n	8012532 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801251c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012520:	f383 8811 	msr	BASEPRI, r3
 8012524:	f3bf 8f6f 	isb	sy
 8012528:	f3bf 8f4f 	dsb	sy
 801252c:	623b      	str	r3, [r7, #32]
}
 801252e:	bf00      	nop
 8012530:	e7fe      	b.n	8012530 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012532:	f001 fff9 	bl	8014528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012536:	f3ef 8211 	mrs	r2, BASEPRI
 801253a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801253e:	f383 8811 	msr	BASEPRI, r3
 8012542:	f3bf 8f6f 	isb	sy
 8012546:	f3bf 8f4f 	dsb	sy
 801254a:	61fa      	str	r2, [r7, #28]
 801254c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801254e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012550:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801255a:	429a      	cmp	r2, r3
 801255c:	d302      	bcc.n	8012564 <xQueueGenericSendFromISR+0xbc>
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	2b02      	cmp	r3, #2
 8012562:	d12f      	bne.n	80125c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012566:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801256a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801256e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012572:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012574:	683a      	ldr	r2, [r7, #0]
 8012576:	68b9      	ldr	r1, [r7, #8]
 8012578:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801257a:	f000 f9b4 	bl	80128e6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801257e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012586:	d112      	bne.n	80125ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801258c:	2b00      	cmp	r3, #0
 801258e:	d016      	beq.n	80125be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012592:	3324      	adds	r3, #36	; 0x24
 8012594:	4618      	mov	r0, r3
 8012596:	f000 ffc5 	bl	8013524 <xTaskRemoveFromEventList>
 801259a:	4603      	mov	r3, r0
 801259c:	2b00      	cmp	r3, #0
 801259e:	d00e      	beq.n	80125be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d00b      	beq.n	80125be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2201      	movs	r2, #1
 80125aa:	601a      	str	r2, [r3, #0]
 80125ac:	e007      	b.n	80125be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80125ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80125b2:	3301      	adds	r3, #1
 80125b4:	b2db      	uxtb	r3, r3
 80125b6:	b25a      	sxtb	r2, r3
 80125b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80125be:	2301      	movs	r3, #1
 80125c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80125c2:	e001      	b.n	80125c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80125c4:	2300      	movs	r3, #0
 80125c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80125c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80125cc:	697b      	ldr	r3, [r7, #20]
 80125ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80125d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80125d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3740      	adds	r7, #64	; 0x40
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}
	...

080125e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b08c      	sub	sp, #48	; 0x30
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	60b9      	str	r1, [r7, #8]
 80125ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80125ec:	2300      	movs	r3, #0
 80125ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80125f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d10a      	bne.n	8012610 <xQueueReceive+0x30>
	__asm volatile
 80125fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125fe:	f383 8811 	msr	BASEPRI, r3
 8012602:	f3bf 8f6f 	isb	sy
 8012606:	f3bf 8f4f 	dsb	sy
 801260a:	623b      	str	r3, [r7, #32]
}
 801260c:	bf00      	nop
 801260e:	e7fe      	b.n	801260e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d103      	bne.n	801261e <xQueueReceive+0x3e>
 8012616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801261a:	2b00      	cmp	r3, #0
 801261c:	d101      	bne.n	8012622 <xQueueReceive+0x42>
 801261e:	2301      	movs	r3, #1
 8012620:	e000      	b.n	8012624 <xQueueReceive+0x44>
 8012622:	2300      	movs	r3, #0
 8012624:	2b00      	cmp	r3, #0
 8012626:	d10a      	bne.n	801263e <xQueueReceive+0x5e>
	__asm volatile
 8012628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801262c:	f383 8811 	msr	BASEPRI, r3
 8012630:	f3bf 8f6f 	isb	sy
 8012634:	f3bf 8f4f 	dsb	sy
 8012638:	61fb      	str	r3, [r7, #28]
}
 801263a:	bf00      	nop
 801263c:	e7fe      	b.n	801263c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801263e:	f001 f933 	bl	80138a8 <xTaskGetSchedulerState>
 8012642:	4603      	mov	r3, r0
 8012644:	2b00      	cmp	r3, #0
 8012646:	d102      	bne.n	801264e <xQueueReceive+0x6e>
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d101      	bne.n	8012652 <xQueueReceive+0x72>
 801264e:	2301      	movs	r3, #1
 8012650:	e000      	b.n	8012654 <xQueueReceive+0x74>
 8012652:	2300      	movs	r3, #0
 8012654:	2b00      	cmp	r3, #0
 8012656:	d10a      	bne.n	801266e <xQueueReceive+0x8e>
	__asm volatile
 8012658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801265c:	f383 8811 	msr	BASEPRI, r3
 8012660:	f3bf 8f6f 	isb	sy
 8012664:	f3bf 8f4f 	dsb	sy
 8012668:	61bb      	str	r3, [r7, #24]
}
 801266a:	bf00      	nop
 801266c:	e7fe      	b.n	801266c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801266e:	f001 fe79 	bl	8014364 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012676:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267a:	2b00      	cmp	r3, #0
 801267c:	d01f      	beq.n	80126be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801267e:	68b9      	ldr	r1, [r7, #8]
 8012680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012682:	f000 f99a 	bl	80129ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012688:	1e5a      	subs	r2, r3, #1
 801268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801268c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012690:	691b      	ldr	r3, [r3, #16]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d00f      	beq.n	80126b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012698:	3310      	adds	r3, #16
 801269a:	4618      	mov	r0, r3
 801269c:	f000 ff42 	bl	8013524 <xTaskRemoveFromEventList>
 80126a0:	4603      	mov	r3, r0
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d007      	beq.n	80126b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80126a6:	4b3d      	ldr	r3, [pc, #244]	; (801279c <xQueueReceive+0x1bc>)
 80126a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126ac:	601a      	str	r2, [r3, #0]
 80126ae:	f3bf 8f4f 	dsb	sy
 80126b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80126b6:	f001 fe85 	bl	80143c4 <vPortExitCritical>
				return pdPASS;
 80126ba:	2301      	movs	r3, #1
 80126bc:	e069      	b.n	8012792 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d103      	bne.n	80126cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80126c4:	f001 fe7e 	bl	80143c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80126c8:	2300      	movs	r3, #0
 80126ca:	e062      	b.n	8012792 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80126cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d106      	bne.n	80126e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80126d2:	f107 0310 	add.w	r3, r7, #16
 80126d6:	4618      	mov	r0, r3
 80126d8:	f000 ff88 	bl	80135ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80126dc:	2301      	movs	r3, #1
 80126de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80126e0:	f001 fe70 	bl	80143c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80126e4:	f000 fcf4 	bl	80130d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80126e8:	f001 fe3c 	bl	8014364 <vPortEnterCritical>
 80126ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80126f2:	b25b      	sxtb	r3, r3
 80126f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80126f8:	d103      	bne.n	8012702 <xQueueReceive+0x122>
 80126fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126fc:	2200      	movs	r2, #0
 80126fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012708:	b25b      	sxtb	r3, r3
 801270a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801270e:	d103      	bne.n	8012718 <xQueueReceive+0x138>
 8012710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012712:	2200      	movs	r2, #0
 8012714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012718:	f001 fe54 	bl	80143c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801271c:	1d3a      	adds	r2, r7, #4
 801271e:	f107 0310 	add.w	r3, r7, #16
 8012722:	4611      	mov	r1, r2
 8012724:	4618      	mov	r0, r3
 8012726:	f000 ff77 	bl	8013618 <xTaskCheckForTimeOut>
 801272a:	4603      	mov	r3, r0
 801272c:	2b00      	cmp	r3, #0
 801272e:	d123      	bne.n	8012778 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012732:	f000 f9ba 	bl	8012aaa <prvIsQueueEmpty>
 8012736:	4603      	mov	r3, r0
 8012738:	2b00      	cmp	r3, #0
 801273a:	d017      	beq.n	801276c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801273e:	3324      	adds	r3, #36	; 0x24
 8012740:	687a      	ldr	r2, [r7, #4]
 8012742:	4611      	mov	r1, r2
 8012744:	4618      	mov	r0, r3
 8012746:	f000 fe9d 	bl	8013484 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801274a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801274c:	f000 f95b 	bl	8012a06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012750:	f000 fccc 	bl	80130ec <xTaskResumeAll>
 8012754:	4603      	mov	r3, r0
 8012756:	2b00      	cmp	r3, #0
 8012758:	d189      	bne.n	801266e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801275a:	4b10      	ldr	r3, [pc, #64]	; (801279c <xQueueReceive+0x1bc>)
 801275c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012760:	601a      	str	r2, [r3, #0]
 8012762:	f3bf 8f4f 	dsb	sy
 8012766:	f3bf 8f6f 	isb	sy
 801276a:	e780      	b.n	801266e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801276c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801276e:	f000 f94a 	bl	8012a06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012772:	f000 fcbb 	bl	80130ec <xTaskResumeAll>
 8012776:	e77a      	b.n	801266e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801277a:	f000 f944 	bl	8012a06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801277e:	f000 fcb5 	bl	80130ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012784:	f000 f991 	bl	8012aaa <prvIsQueueEmpty>
 8012788:	4603      	mov	r3, r0
 801278a:	2b00      	cmp	r3, #0
 801278c:	f43f af6f 	beq.w	801266e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012790:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012792:	4618      	mov	r0, r3
 8012794:	3730      	adds	r7, #48	; 0x30
 8012796:	46bd      	mov	sp, r7
 8012798:	bd80      	pop	{r7, pc}
 801279a:	bf00      	nop
 801279c:	e000ed04 	.word	0xe000ed04

080127a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b08e      	sub	sp, #56	; 0x38
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	60f8      	str	r0, [r7, #12]
 80127a8:	60b9      	str	r1, [r7, #8]
 80127aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80127b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d10a      	bne.n	80127cc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80127b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ba:	f383 8811 	msr	BASEPRI, r3
 80127be:	f3bf 8f6f 	isb	sy
 80127c2:	f3bf 8f4f 	dsb	sy
 80127c6:	623b      	str	r3, [r7, #32]
}
 80127c8:	bf00      	nop
 80127ca:	e7fe      	b.n	80127ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d103      	bne.n	80127da <xQueueReceiveFromISR+0x3a>
 80127d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d101      	bne.n	80127de <xQueueReceiveFromISR+0x3e>
 80127da:	2301      	movs	r3, #1
 80127dc:	e000      	b.n	80127e0 <xQueueReceiveFromISR+0x40>
 80127de:	2300      	movs	r3, #0
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d10a      	bne.n	80127fa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80127e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127e8:	f383 8811 	msr	BASEPRI, r3
 80127ec:	f3bf 8f6f 	isb	sy
 80127f0:	f3bf 8f4f 	dsb	sy
 80127f4:	61fb      	str	r3, [r7, #28]
}
 80127f6:	bf00      	nop
 80127f8:	e7fe      	b.n	80127f8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80127fa:	f001 fe95 	bl	8014528 <vPortValidateInterruptPriority>
	__asm volatile
 80127fe:	f3ef 8211 	mrs	r2, BASEPRI
 8012802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012806:	f383 8811 	msr	BASEPRI, r3
 801280a:	f3bf 8f6f 	isb	sy
 801280e:	f3bf 8f4f 	dsb	sy
 8012812:	61ba      	str	r2, [r7, #24]
 8012814:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012816:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012818:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801281e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012822:	2b00      	cmp	r3, #0
 8012824:	d02f      	beq.n	8012886 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801282c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012830:	68b9      	ldr	r1, [r7, #8]
 8012832:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012834:	f000 f8c1 	bl	80129ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801283a:	1e5a      	subs	r2, r3, #1
 801283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801283e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012840:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012848:	d112      	bne.n	8012870 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801284c:	691b      	ldr	r3, [r3, #16]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d016      	beq.n	8012880 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012854:	3310      	adds	r3, #16
 8012856:	4618      	mov	r0, r3
 8012858:	f000 fe64 	bl	8013524 <xTaskRemoveFromEventList>
 801285c:	4603      	mov	r3, r0
 801285e:	2b00      	cmp	r3, #0
 8012860:	d00e      	beq.n	8012880 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d00b      	beq.n	8012880 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2201      	movs	r2, #1
 801286c:	601a      	str	r2, [r3, #0]
 801286e:	e007      	b.n	8012880 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012874:	3301      	adds	r3, #1
 8012876:	b2db      	uxtb	r3, r3
 8012878:	b25a      	sxtb	r2, r3
 801287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801287c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012880:	2301      	movs	r3, #1
 8012882:	637b      	str	r3, [r7, #52]	; 0x34
 8012884:	e001      	b.n	801288a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012886:	2300      	movs	r3, #0
 8012888:	637b      	str	r3, [r7, #52]	; 0x34
 801288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801288c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	f383 8811 	msr	BASEPRI, r3
}
 8012894:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012898:	4618      	mov	r0, r3
 801289a:	3738      	adds	r7, #56	; 0x38
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}

080128a0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b084      	sub	sp, #16
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d10a      	bne.n	80128c8 <vQueueDelete+0x28>
	__asm volatile
 80128b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b6:	f383 8811 	msr	BASEPRI, r3
 80128ba:	f3bf 8f6f 	isb	sy
 80128be:	f3bf 8f4f 	dsb	sy
 80128c2:	60bb      	str	r3, [r7, #8]
}
 80128c4:	bf00      	nop
 80128c6:	e7fe      	b.n	80128c6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80128c8:	68f8      	ldr	r0, [r7, #12]
 80128ca:	f000 f947 	bl	8012b5c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d102      	bne.n	80128de <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80128d8:	68f8      	ldr	r0, [r7, #12]
 80128da:	f001 ff09 	bl	80146f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80128de:	bf00      	nop
 80128e0:	3710      	adds	r7, #16
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}

080128e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80128e6:	b580      	push	{r7, lr}
 80128e8:	b086      	sub	sp, #24
 80128ea:	af00      	add	r7, sp, #0
 80128ec:	60f8      	str	r0, [r7, #12]
 80128ee:	60b9      	str	r1, [r7, #8]
 80128f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80128f2:	2300      	movs	r3, #0
 80128f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012900:	2b00      	cmp	r3, #0
 8012902:	d10d      	bne.n	8012920 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d14d      	bne.n	80129a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	689b      	ldr	r3, [r3, #8]
 8012910:	4618      	mov	r0, r3
 8012912:	f000 ffe7 	bl	80138e4 <xTaskPriorityDisinherit>
 8012916:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	2200      	movs	r2, #0
 801291c:	609a      	str	r2, [r3, #8]
 801291e:	e043      	b.n	80129a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d119      	bne.n	801295a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	6858      	ldr	r0, [r3, #4]
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801292e:	461a      	mov	r2, r3
 8012930:	68b9      	ldr	r1, [r7, #8]
 8012932:	f002 fa83 	bl	8014e3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	685a      	ldr	r2, [r3, #4]
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801293e:	441a      	add	r2, r3
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	685a      	ldr	r2, [r3, #4]
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	689b      	ldr	r3, [r3, #8]
 801294c:	429a      	cmp	r2, r3
 801294e:	d32b      	bcc.n	80129a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	681a      	ldr	r2, [r3, #0]
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	605a      	str	r2, [r3, #4]
 8012958:	e026      	b.n	80129a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	68d8      	ldr	r0, [r3, #12]
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012962:	461a      	mov	r2, r3
 8012964:	68b9      	ldr	r1, [r7, #8]
 8012966:	f002 fa69 	bl	8014e3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	68da      	ldr	r2, [r3, #12]
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012972:	425b      	negs	r3, r3
 8012974:	441a      	add	r2, r3
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	68da      	ldr	r2, [r3, #12]
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	429a      	cmp	r2, r3
 8012984:	d207      	bcs.n	8012996 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	689a      	ldr	r2, [r3, #8]
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801298e:	425b      	negs	r3, r3
 8012990:	441a      	add	r2, r3
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2b02      	cmp	r3, #2
 801299a:	d105      	bne.n	80129a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d002      	beq.n	80129a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	3b01      	subs	r3, #1
 80129a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	1c5a      	adds	r2, r3, #1
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80129b0:	697b      	ldr	r3, [r7, #20]
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	3718      	adds	r7, #24
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}

080129ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80129ba:	b580      	push	{r7, lr}
 80129bc:	b082      	sub	sp, #8
 80129be:	af00      	add	r7, sp, #0
 80129c0:	6078      	str	r0, [r7, #4]
 80129c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d018      	beq.n	80129fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	68da      	ldr	r2, [r3, #12]
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129d4:	441a      	add	r2, r3
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	68da      	ldr	r2, [r3, #12]
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	689b      	ldr	r3, [r3, #8]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d303      	bcc.n	80129ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681a      	ldr	r2, [r3, #0]
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	68d9      	ldr	r1, [r3, #12]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129f6:	461a      	mov	r2, r3
 80129f8:	6838      	ldr	r0, [r7, #0]
 80129fa:	f002 fa1f 	bl	8014e3c <memcpy>
	}
}
 80129fe:	bf00      	nop
 8012a00:	3708      	adds	r7, #8
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}

08012a06 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012a06:	b580      	push	{r7, lr}
 8012a08:	b084      	sub	sp, #16
 8012a0a:	af00      	add	r7, sp, #0
 8012a0c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012a0e:	f001 fca9 	bl	8014364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a18:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012a1a:	e011      	b.n	8012a40 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d012      	beq.n	8012a4a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	3324      	adds	r3, #36	; 0x24
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f000 fd7b 	bl	8013524 <xTaskRemoveFromEventList>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d001      	beq.n	8012a38 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012a34:	f000 fe52 	bl	80136dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012a38:	7bfb      	ldrb	r3, [r7, #15]
 8012a3a:	3b01      	subs	r3, #1
 8012a3c:	b2db      	uxtb	r3, r3
 8012a3e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	dce9      	bgt.n	8012a1c <prvUnlockQueue+0x16>
 8012a48:	e000      	b.n	8012a4c <prvUnlockQueue+0x46>
					break;
 8012a4a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	22ff      	movs	r2, #255	; 0xff
 8012a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012a54:	f001 fcb6 	bl	80143c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012a58:	f001 fc84 	bl	8014364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a62:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012a64:	e011      	b.n	8012a8a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	691b      	ldr	r3, [r3, #16]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d012      	beq.n	8012a94 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	3310      	adds	r3, #16
 8012a72:	4618      	mov	r0, r3
 8012a74:	f000 fd56 	bl	8013524 <xTaskRemoveFromEventList>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d001      	beq.n	8012a82 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012a7e:	f000 fe2d 	bl	80136dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012a82:	7bbb      	ldrb	r3, [r7, #14]
 8012a84:	3b01      	subs	r3, #1
 8012a86:	b2db      	uxtb	r3, r3
 8012a88:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012a8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	dce9      	bgt.n	8012a66 <prvUnlockQueue+0x60>
 8012a92:	e000      	b.n	8012a96 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012a94:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	22ff      	movs	r2, #255	; 0xff
 8012a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012a9e:	f001 fc91 	bl	80143c4 <vPortExitCritical>
}
 8012aa2:	bf00      	nop
 8012aa4:	3710      	adds	r7, #16
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}

08012aaa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012aaa:	b580      	push	{r7, lr}
 8012aac:	b084      	sub	sp, #16
 8012aae:	af00      	add	r7, sp, #0
 8012ab0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012ab2:	f001 fc57 	bl	8014364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d102      	bne.n	8012ac4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012abe:	2301      	movs	r3, #1
 8012ac0:	60fb      	str	r3, [r7, #12]
 8012ac2:	e001      	b.n	8012ac8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012ac8:	f001 fc7c 	bl	80143c4 <vPortExitCritical>

	return xReturn;
 8012acc:	68fb      	ldr	r3, [r7, #12]
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3710      	adds	r7, #16
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}

08012ad6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012ad6:	b580      	push	{r7, lr}
 8012ad8:	b084      	sub	sp, #16
 8012ada:	af00      	add	r7, sp, #0
 8012adc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012ade:	f001 fc41 	bl	8014364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012aea:	429a      	cmp	r2, r3
 8012aec:	d102      	bne.n	8012af4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012aee:	2301      	movs	r3, #1
 8012af0:	60fb      	str	r3, [r7, #12]
 8012af2:	e001      	b.n	8012af8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012af4:	2300      	movs	r3, #0
 8012af6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012af8:	f001 fc64 	bl	80143c4 <vPortExitCritical>

	return xReturn;
 8012afc:	68fb      	ldr	r3, [r7, #12]
}
 8012afe:	4618      	mov	r0, r3
 8012b00:	3710      	adds	r7, #16
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}
	...

08012b08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012b08:	b480      	push	{r7}
 8012b0a:	b085      	sub	sp, #20
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012b12:	2300      	movs	r3, #0
 8012b14:	60fb      	str	r3, [r7, #12]
 8012b16:	e014      	b.n	8012b42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012b18:	4a0f      	ldr	r2, [pc, #60]	; (8012b58 <vQueueAddToRegistry+0x50>)
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d10b      	bne.n	8012b3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012b24:	490c      	ldr	r1, [pc, #48]	; (8012b58 <vQueueAddToRegistry+0x50>)
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	683a      	ldr	r2, [r7, #0]
 8012b2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012b2e:	4a0a      	ldr	r2, [pc, #40]	; (8012b58 <vQueueAddToRegistry+0x50>)
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	00db      	lsls	r3, r3, #3
 8012b34:	4413      	add	r3, r2
 8012b36:	687a      	ldr	r2, [r7, #4]
 8012b38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012b3a:	e006      	b.n	8012b4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	3301      	adds	r3, #1
 8012b40:	60fb      	str	r3, [r7, #12]
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	2b07      	cmp	r3, #7
 8012b46:	d9e7      	bls.n	8012b18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012b48:	bf00      	nop
 8012b4a:	bf00      	nop
 8012b4c:	3714      	adds	r7, #20
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b54:	4770      	bx	lr
 8012b56:	bf00      	nop
 8012b58:	20008694 	.word	0x20008694

08012b5c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012b5c:	b480      	push	{r7}
 8012b5e:	b085      	sub	sp, #20
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012b64:	2300      	movs	r3, #0
 8012b66:	60fb      	str	r3, [r7, #12]
 8012b68:	e016      	b.n	8012b98 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012b6a:	4a10      	ldr	r2, [pc, #64]	; (8012bac <vQueueUnregisterQueue+0x50>)
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	00db      	lsls	r3, r3, #3
 8012b70:	4413      	add	r3, r2
 8012b72:	685b      	ldr	r3, [r3, #4]
 8012b74:	687a      	ldr	r2, [r7, #4]
 8012b76:	429a      	cmp	r2, r3
 8012b78:	d10b      	bne.n	8012b92 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012b7a:	4a0c      	ldr	r2, [pc, #48]	; (8012bac <vQueueUnregisterQueue+0x50>)
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	2100      	movs	r1, #0
 8012b80:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012b84:	4a09      	ldr	r2, [pc, #36]	; (8012bac <vQueueUnregisterQueue+0x50>)
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	00db      	lsls	r3, r3, #3
 8012b8a:	4413      	add	r3, r2
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	605a      	str	r2, [r3, #4]
				break;
 8012b90:	e006      	b.n	8012ba0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	3301      	adds	r3, #1
 8012b96:	60fb      	str	r3, [r7, #12]
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	2b07      	cmp	r3, #7
 8012b9c:	d9e5      	bls.n	8012b6a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012b9e:	bf00      	nop
 8012ba0:	bf00      	nop
 8012ba2:	3714      	adds	r7, #20
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012baa:	4770      	bx	lr
 8012bac:	20008694 	.word	0x20008694

08012bb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b086      	sub	sp, #24
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	60f8      	str	r0, [r7, #12]
 8012bb8:	60b9      	str	r1, [r7, #8]
 8012bba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012bc0:	f001 fbd0 	bl	8014364 <vPortEnterCritical>
 8012bc4:	697b      	ldr	r3, [r7, #20]
 8012bc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012bca:	b25b      	sxtb	r3, r3
 8012bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012bd0:	d103      	bne.n	8012bda <vQueueWaitForMessageRestricted+0x2a>
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012be0:	b25b      	sxtb	r3, r3
 8012be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012be6:	d103      	bne.n	8012bf0 <vQueueWaitForMessageRestricted+0x40>
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	2200      	movs	r2, #0
 8012bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012bf0:	f001 fbe8 	bl	80143c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d106      	bne.n	8012c0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	3324      	adds	r3, #36	; 0x24
 8012c00:	687a      	ldr	r2, [r7, #4]
 8012c02:	68b9      	ldr	r1, [r7, #8]
 8012c04:	4618      	mov	r0, r3
 8012c06:	f000 fc61 	bl	80134cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012c0a:	6978      	ldr	r0, [r7, #20]
 8012c0c:	f7ff fefb 	bl	8012a06 <prvUnlockQueue>
	}
 8012c10:	bf00      	nop
 8012c12:	3718      	adds	r7, #24
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}

08012c18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b08e      	sub	sp, #56	; 0x38
 8012c1c:	af04      	add	r7, sp, #16
 8012c1e:	60f8      	str	r0, [r7, #12]
 8012c20:	60b9      	str	r1, [r7, #8]
 8012c22:	607a      	str	r2, [r7, #4]
 8012c24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d10a      	bne.n	8012c42 <xTaskCreateStatic+0x2a>
	__asm volatile
 8012c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c30:	f383 8811 	msr	BASEPRI, r3
 8012c34:	f3bf 8f6f 	isb	sy
 8012c38:	f3bf 8f4f 	dsb	sy
 8012c3c:	623b      	str	r3, [r7, #32]
}
 8012c3e:	bf00      	nop
 8012c40:	e7fe      	b.n	8012c40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d10a      	bne.n	8012c5e <xTaskCreateStatic+0x46>
	__asm volatile
 8012c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c4c:	f383 8811 	msr	BASEPRI, r3
 8012c50:	f3bf 8f6f 	isb	sy
 8012c54:	f3bf 8f4f 	dsb	sy
 8012c58:	61fb      	str	r3, [r7, #28]
}
 8012c5a:	bf00      	nop
 8012c5c:	e7fe      	b.n	8012c5c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012c5e:	23bc      	movs	r3, #188	; 0xbc
 8012c60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012c62:	693b      	ldr	r3, [r7, #16]
 8012c64:	2bbc      	cmp	r3, #188	; 0xbc
 8012c66:	d00a      	beq.n	8012c7e <xTaskCreateStatic+0x66>
	__asm volatile
 8012c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c6c:	f383 8811 	msr	BASEPRI, r3
 8012c70:	f3bf 8f6f 	isb	sy
 8012c74:	f3bf 8f4f 	dsb	sy
 8012c78:	61bb      	str	r3, [r7, #24]
}
 8012c7a:	bf00      	nop
 8012c7c:	e7fe      	b.n	8012c7c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012c7e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d01e      	beq.n	8012cc4 <xTaskCreateStatic+0xac>
 8012c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d01b      	beq.n	8012cc4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c8e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c94:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c98:	2202      	movs	r2, #2
 8012c9a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	9303      	str	r3, [sp, #12]
 8012ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca4:	9302      	str	r3, [sp, #8]
 8012ca6:	f107 0314 	add.w	r3, r7, #20
 8012caa:	9301      	str	r3, [sp, #4]
 8012cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cae:	9300      	str	r3, [sp, #0]
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	687a      	ldr	r2, [r7, #4]
 8012cb4:	68b9      	ldr	r1, [r7, #8]
 8012cb6:	68f8      	ldr	r0, [r7, #12]
 8012cb8:	f000 f850 	bl	8012d5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012cbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cbe:	f000 f8f3 	bl	8012ea8 <prvAddNewTaskToReadyList>
 8012cc2:	e001      	b.n	8012cc8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012cc8:	697b      	ldr	r3, [r7, #20]
	}
 8012cca:	4618      	mov	r0, r3
 8012ccc:	3728      	adds	r7, #40	; 0x28
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}

08012cd2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012cd2:	b580      	push	{r7, lr}
 8012cd4:	b08c      	sub	sp, #48	; 0x30
 8012cd6:	af04      	add	r7, sp, #16
 8012cd8:	60f8      	str	r0, [r7, #12]
 8012cda:	60b9      	str	r1, [r7, #8]
 8012cdc:	603b      	str	r3, [r7, #0]
 8012cde:	4613      	mov	r3, r2
 8012ce0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012ce2:	88fb      	ldrh	r3, [r7, #6]
 8012ce4:	009b      	lsls	r3, r3, #2
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f001 fc5e 	bl	80145a8 <pvPortMalloc>
 8012cec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012cee:	697b      	ldr	r3, [r7, #20]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d00e      	beq.n	8012d12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012cf4:	20bc      	movs	r0, #188	; 0xbc
 8012cf6:	f001 fc57 	bl	80145a8 <pvPortMalloc>
 8012cfa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012cfc:	69fb      	ldr	r3, [r7, #28]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d003      	beq.n	8012d0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012d02:	69fb      	ldr	r3, [r7, #28]
 8012d04:	697a      	ldr	r2, [r7, #20]
 8012d06:	631a      	str	r2, [r3, #48]	; 0x30
 8012d08:	e005      	b.n	8012d16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012d0a:	6978      	ldr	r0, [r7, #20]
 8012d0c:	f001 fcf0 	bl	80146f0 <vPortFree>
 8012d10:	e001      	b.n	8012d16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012d12:	2300      	movs	r3, #0
 8012d14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012d16:	69fb      	ldr	r3, [r7, #28]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d017      	beq.n	8012d4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012d1c:	69fb      	ldr	r3, [r7, #28]
 8012d1e:	2200      	movs	r2, #0
 8012d20:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012d24:	88fa      	ldrh	r2, [r7, #6]
 8012d26:	2300      	movs	r3, #0
 8012d28:	9303      	str	r3, [sp, #12]
 8012d2a:	69fb      	ldr	r3, [r7, #28]
 8012d2c:	9302      	str	r3, [sp, #8]
 8012d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d30:	9301      	str	r3, [sp, #4]
 8012d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d34:	9300      	str	r3, [sp, #0]
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	68b9      	ldr	r1, [r7, #8]
 8012d3a:	68f8      	ldr	r0, [r7, #12]
 8012d3c:	f000 f80e 	bl	8012d5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012d40:	69f8      	ldr	r0, [r7, #28]
 8012d42:	f000 f8b1 	bl	8012ea8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012d46:	2301      	movs	r3, #1
 8012d48:	61bb      	str	r3, [r7, #24]
 8012d4a:	e002      	b.n	8012d52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012d52:	69bb      	ldr	r3, [r7, #24]
	}
 8012d54:	4618      	mov	r0, r3
 8012d56:	3720      	adds	r7, #32
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}

08012d5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b088      	sub	sp, #32
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	60f8      	str	r0, [r7, #12]
 8012d64:	60b9      	str	r1, [r7, #8]
 8012d66:	607a      	str	r2, [r7, #4]
 8012d68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	009b      	lsls	r3, r3, #2
 8012d72:	461a      	mov	r2, r3
 8012d74:	21a5      	movs	r1, #165	; 0xa5
 8012d76:	f002 f86f 	bl	8014e58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012d84:	3b01      	subs	r3, #1
 8012d86:	009b      	lsls	r3, r3, #2
 8012d88:	4413      	add	r3, r2
 8012d8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012d8c:	69bb      	ldr	r3, [r7, #24]
 8012d8e:	f023 0307 	bic.w	r3, r3, #7
 8012d92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012d94:	69bb      	ldr	r3, [r7, #24]
 8012d96:	f003 0307 	and.w	r3, r3, #7
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d00a      	beq.n	8012db4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8012d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012da2:	f383 8811 	msr	BASEPRI, r3
 8012da6:	f3bf 8f6f 	isb	sy
 8012daa:	f3bf 8f4f 	dsb	sy
 8012dae:	617b      	str	r3, [r7, #20]
}
 8012db0:	bf00      	nop
 8012db2:	e7fe      	b.n	8012db2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d01f      	beq.n	8012dfa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012dba:	2300      	movs	r3, #0
 8012dbc:	61fb      	str	r3, [r7, #28]
 8012dbe:	e012      	b.n	8012de6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012dc0:	68ba      	ldr	r2, [r7, #8]
 8012dc2:	69fb      	ldr	r3, [r7, #28]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	7819      	ldrb	r1, [r3, #0]
 8012dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dca:	69fb      	ldr	r3, [r7, #28]
 8012dcc:	4413      	add	r3, r2
 8012dce:	3334      	adds	r3, #52	; 0x34
 8012dd0:	460a      	mov	r2, r1
 8012dd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012dd4:	68ba      	ldr	r2, [r7, #8]
 8012dd6:	69fb      	ldr	r3, [r7, #28]
 8012dd8:	4413      	add	r3, r2
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d006      	beq.n	8012dee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012de0:	69fb      	ldr	r3, [r7, #28]
 8012de2:	3301      	adds	r3, #1
 8012de4:	61fb      	str	r3, [r7, #28]
 8012de6:	69fb      	ldr	r3, [r7, #28]
 8012de8:	2b0f      	cmp	r3, #15
 8012dea:	d9e9      	bls.n	8012dc0 <prvInitialiseNewTask+0x64>
 8012dec:	e000      	b.n	8012df0 <prvInitialiseNewTask+0x94>
			{
				break;
 8012dee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df2:	2200      	movs	r2, #0
 8012df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012df8:	e003      	b.n	8012e02 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e04:	2b37      	cmp	r3, #55	; 0x37
 8012e06:	d901      	bls.n	8012e0c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012e08:	2337      	movs	r3, #55	; 0x37
 8012e0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e16:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e20:	3304      	adds	r3, #4
 8012e22:	4618      	mov	r0, r3
 8012e24:	f7ff f806 	bl	8011e34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e2a:	3318      	adds	r3, #24
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7ff f801 	bl	8011e34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e52:	2200      	movs	r2, #0
 8012e54:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e5a:	3354      	adds	r3, #84	; 0x54
 8012e5c:	2260      	movs	r2, #96	; 0x60
 8012e5e:	2100      	movs	r1, #0
 8012e60:	4618      	mov	r0, r3
 8012e62:	f001 fff9 	bl	8014e58 <memset>
 8012e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e68:	4a0c      	ldr	r2, [pc, #48]	; (8012e9c <prvInitialiseNewTask+0x140>)
 8012e6a:	659a      	str	r2, [r3, #88]	; 0x58
 8012e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e6e:	4a0c      	ldr	r2, [pc, #48]	; (8012ea0 <prvInitialiseNewTask+0x144>)
 8012e70:	65da      	str	r2, [r3, #92]	; 0x5c
 8012e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e74:	4a0b      	ldr	r2, [pc, #44]	; (8012ea4 <prvInitialiseNewTask+0x148>)
 8012e76:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012e78:	683a      	ldr	r2, [r7, #0]
 8012e7a:	68f9      	ldr	r1, [r7, #12]
 8012e7c:	69b8      	ldr	r0, [r7, #24]
 8012e7e:	f001 f941 	bl	8014104 <pxPortInitialiseStack>
 8012e82:	4602      	mov	r2, r0
 8012e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d002      	beq.n	8012e94 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012e94:	bf00      	nop
 8012e96:	3720      	adds	r7, #32
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd80      	pop	{r7, pc}
 8012e9c:	0801a018 	.word	0x0801a018
 8012ea0:	0801a038 	.word	0x0801a038
 8012ea4:	08019ff8 	.word	0x08019ff8

08012ea8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b082      	sub	sp, #8
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012eb0:	f001 fa58 	bl	8014364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012eb4:	4b2d      	ldr	r3, [pc, #180]	; (8012f6c <prvAddNewTaskToReadyList+0xc4>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	3301      	adds	r3, #1
 8012eba:	4a2c      	ldr	r2, [pc, #176]	; (8012f6c <prvAddNewTaskToReadyList+0xc4>)
 8012ebc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012ebe:	4b2c      	ldr	r3, [pc, #176]	; (8012f70 <prvAddNewTaskToReadyList+0xc8>)
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d109      	bne.n	8012eda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012ec6:	4a2a      	ldr	r2, [pc, #168]	; (8012f70 <prvAddNewTaskToReadyList+0xc8>)
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012ecc:	4b27      	ldr	r3, [pc, #156]	; (8012f6c <prvAddNewTaskToReadyList+0xc4>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	2b01      	cmp	r3, #1
 8012ed2:	d110      	bne.n	8012ef6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012ed4:	f000 fc26 	bl	8013724 <prvInitialiseTaskLists>
 8012ed8:	e00d      	b.n	8012ef6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012eda:	4b26      	ldr	r3, [pc, #152]	; (8012f74 <prvAddNewTaskToReadyList+0xcc>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d109      	bne.n	8012ef6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012ee2:	4b23      	ldr	r3, [pc, #140]	; (8012f70 <prvAddNewTaskToReadyList+0xc8>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eec:	429a      	cmp	r2, r3
 8012eee:	d802      	bhi.n	8012ef6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012ef0:	4a1f      	ldr	r2, [pc, #124]	; (8012f70 <prvAddNewTaskToReadyList+0xc8>)
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012ef6:	4b20      	ldr	r3, [pc, #128]	; (8012f78 <prvAddNewTaskToReadyList+0xd0>)
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	3301      	adds	r3, #1
 8012efc:	4a1e      	ldr	r2, [pc, #120]	; (8012f78 <prvAddNewTaskToReadyList+0xd0>)
 8012efe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012f00:	4b1d      	ldr	r3, [pc, #116]	; (8012f78 <prvAddNewTaskToReadyList+0xd0>)
 8012f02:	681a      	ldr	r2, [r3, #0]
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f0c:	4b1b      	ldr	r3, [pc, #108]	; (8012f7c <prvAddNewTaskToReadyList+0xd4>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d903      	bls.n	8012f1c <prvAddNewTaskToReadyList+0x74>
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f18:	4a18      	ldr	r2, [pc, #96]	; (8012f7c <prvAddNewTaskToReadyList+0xd4>)
 8012f1a:	6013      	str	r3, [r2, #0]
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f20:	4613      	mov	r3, r2
 8012f22:	009b      	lsls	r3, r3, #2
 8012f24:	4413      	add	r3, r2
 8012f26:	009b      	lsls	r3, r3, #2
 8012f28:	4a15      	ldr	r2, [pc, #84]	; (8012f80 <prvAddNewTaskToReadyList+0xd8>)
 8012f2a:	441a      	add	r2, r3
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	3304      	adds	r3, #4
 8012f30:	4619      	mov	r1, r3
 8012f32:	4610      	mov	r0, r2
 8012f34:	f7fe ff8b 	bl	8011e4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012f38:	f001 fa44 	bl	80143c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012f3c:	4b0d      	ldr	r3, [pc, #52]	; (8012f74 <prvAddNewTaskToReadyList+0xcc>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d00e      	beq.n	8012f62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012f44:	4b0a      	ldr	r3, [pc, #40]	; (8012f70 <prvAddNewTaskToReadyList+0xc8>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	d207      	bcs.n	8012f62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012f52:	4b0c      	ldr	r3, [pc, #48]	; (8012f84 <prvAddNewTaskToReadyList+0xdc>)
 8012f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f58:	601a      	str	r2, [r3, #0]
 8012f5a:	f3bf 8f4f 	dsb	sy
 8012f5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012f62:	bf00      	nop
 8012f64:	3708      	adds	r7, #8
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	20008ba8 	.word	0x20008ba8
 8012f70:	200086d4 	.word	0x200086d4
 8012f74:	20008bb4 	.word	0x20008bb4
 8012f78:	20008bc4 	.word	0x20008bc4
 8012f7c:	20008bb0 	.word	0x20008bb0
 8012f80:	200086d8 	.word	0x200086d8
 8012f84:	e000ed04 	.word	0xe000ed04

08012f88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012f90:	2300      	movs	r3, #0
 8012f92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d017      	beq.n	8012fca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012f9a:	4b13      	ldr	r3, [pc, #76]	; (8012fe8 <vTaskDelay+0x60>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d00a      	beq.n	8012fb8 <vTaskDelay+0x30>
	__asm volatile
 8012fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fa6:	f383 8811 	msr	BASEPRI, r3
 8012faa:	f3bf 8f6f 	isb	sy
 8012fae:	f3bf 8f4f 	dsb	sy
 8012fb2:	60bb      	str	r3, [r7, #8]
}
 8012fb4:	bf00      	nop
 8012fb6:	e7fe      	b.n	8012fb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012fb8:	f000 f88a 	bl	80130d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012fbc:	2100      	movs	r1, #0
 8012fbe:	6878      	ldr	r0, [r7, #4]
 8012fc0:	f000 fcfe 	bl	80139c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012fc4:	f000 f892 	bl	80130ec <xTaskResumeAll>
 8012fc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d107      	bne.n	8012fe0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012fd0:	4b06      	ldr	r3, [pc, #24]	; (8012fec <vTaskDelay+0x64>)
 8012fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fd6:	601a      	str	r2, [r3, #0]
 8012fd8:	f3bf 8f4f 	dsb	sy
 8012fdc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012fe0:	bf00      	nop
 8012fe2:	3710      	adds	r7, #16
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}
 8012fe8:	20008bd0 	.word	0x20008bd0
 8012fec:	e000ed04 	.word	0xe000ed04

08012ff0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b08a      	sub	sp, #40	; 0x28
 8012ff4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012ffe:	463a      	mov	r2, r7
 8013000:	1d39      	adds	r1, r7, #4
 8013002:	f107 0308 	add.w	r3, r7, #8
 8013006:	4618      	mov	r0, r3
 8013008:	f7fe fec0 	bl	8011d8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801300c:	6839      	ldr	r1, [r7, #0]
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	68ba      	ldr	r2, [r7, #8]
 8013012:	9202      	str	r2, [sp, #8]
 8013014:	9301      	str	r3, [sp, #4]
 8013016:	2300      	movs	r3, #0
 8013018:	9300      	str	r3, [sp, #0]
 801301a:	2300      	movs	r3, #0
 801301c:	460a      	mov	r2, r1
 801301e:	4924      	ldr	r1, [pc, #144]	; (80130b0 <vTaskStartScheduler+0xc0>)
 8013020:	4824      	ldr	r0, [pc, #144]	; (80130b4 <vTaskStartScheduler+0xc4>)
 8013022:	f7ff fdf9 	bl	8012c18 <xTaskCreateStatic>
 8013026:	4603      	mov	r3, r0
 8013028:	4a23      	ldr	r2, [pc, #140]	; (80130b8 <vTaskStartScheduler+0xc8>)
 801302a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801302c:	4b22      	ldr	r3, [pc, #136]	; (80130b8 <vTaskStartScheduler+0xc8>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d002      	beq.n	801303a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013034:	2301      	movs	r3, #1
 8013036:	617b      	str	r3, [r7, #20]
 8013038:	e001      	b.n	801303e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801303a:	2300      	movs	r3, #0
 801303c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	2b01      	cmp	r3, #1
 8013042:	d102      	bne.n	801304a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013044:	f000 fd10 	bl	8013a68 <xTimerCreateTimerTask>
 8013048:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	2b01      	cmp	r3, #1
 801304e:	d11b      	bne.n	8013088 <vTaskStartScheduler+0x98>
	__asm volatile
 8013050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013054:	f383 8811 	msr	BASEPRI, r3
 8013058:	f3bf 8f6f 	isb	sy
 801305c:	f3bf 8f4f 	dsb	sy
 8013060:	613b      	str	r3, [r7, #16]
}
 8013062:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013064:	4b15      	ldr	r3, [pc, #84]	; (80130bc <vTaskStartScheduler+0xcc>)
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	3354      	adds	r3, #84	; 0x54
 801306a:	4a15      	ldr	r2, [pc, #84]	; (80130c0 <vTaskStartScheduler+0xd0>)
 801306c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801306e:	4b15      	ldr	r3, [pc, #84]	; (80130c4 <vTaskStartScheduler+0xd4>)
 8013070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013074:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013076:	4b14      	ldr	r3, [pc, #80]	; (80130c8 <vTaskStartScheduler+0xd8>)
 8013078:	2201      	movs	r2, #1
 801307a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801307c:	4b13      	ldr	r3, [pc, #76]	; (80130cc <vTaskStartScheduler+0xdc>)
 801307e:	2200      	movs	r2, #0
 8013080:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013082:	f001 f8cd 	bl	8014220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013086:	e00e      	b.n	80130a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013088:	697b      	ldr	r3, [r7, #20]
 801308a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801308e:	d10a      	bne.n	80130a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8013090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013094:	f383 8811 	msr	BASEPRI, r3
 8013098:	f3bf 8f6f 	isb	sy
 801309c:	f3bf 8f4f 	dsb	sy
 80130a0:	60fb      	str	r3, [r7, #12]
}
 80130a2:	bf00      	nop
 80130a4:	e7fe      	b.n	80130a4 <vTaskStartScheduler+0xb4>
}
 80130a6:	bf00      	nop
 80130a8:	3718      	adds	r7, #24
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
 80130ae:	bf00      	nop
 80130b0:	08017cf8 	.word	0x08017cf8
 80130b4:	080136f5 	.word	0x080136f5
 80130b8:	20008bcc 	.word	0x20008bcc
 80130bc:	200086d4 	.word	0x200086d4
 80130c0:	200000cc 	.word	0x200000cc
 80130c4:	20008bc8 	.word	0x20008bc8
 80130c8:	20008bb4 	.word	0x20008bb4
 80130cc:	20008bac 	.word	0x20008bac

080130d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80130d0:	b480      	push	{r7}
 80130d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80130d4:	4b04      	ldr	r3, [pc, #16]	; (80130e8 <vTaskSuspendAll+0x18>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	3301      	adds	r3, #1
 80130da:	4a03      	ldr	r2, [pc, #12]	; (80130e8 <vTaskSuspendAll+0x18>)
 80130dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80130de:	bf00      	nop
 80130e0:	46bd      	mov	sp, r7
 80130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e6:	4770      	bx	lr
 80130e8:	20008bd0 	.word	0x20008bd0

080130ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b084      	sub	sp, #16
 80130f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80130f2:	2300      	movs	r3, #0
 80130f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80130f6:	2300      	movs	r3, #0
 80130f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80130fa:	4b42      	ldr	r3, [pc, #264]	; (8013204 <xTaskResumeAll+0x118>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d10a      	bne.n	8013118 <xTaskResumeAll+0x2c>
	__asm volatile
 8013102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013106:	f383 8811 	msr	BASEPRI, r3
 801310a:	f3bf 8f6f 	isb	sy
 801310e:	f3bf 8f4f 	dsb	sy
 8013112:	603b      	str	r3, [r7, #0]
}
 8013114:	bf00      	nop
 8013116:	e7fe      	b.n	8013116 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013118:	f001 f924 	bl	8014364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801311c:	4b39      	ldr	r3, [pc, #228]	; (8013204 <xTaskResumeAll+0x118>)
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	3b01      	subs	r3, #1
 8013122:	4a38      	ldr	r2, [pc, #224]	; (8013204 <xTaskResumeAll+0x118>)
 8013124:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013126:	4b37      	ldr	r3, [pc, #220]	; (8013204 <xTaskResumeAll+0x118>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d162      	bne.n	80131f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801312e:	4b36      	ldr	r3, [pc, #216]	; (8013208 <xTaskResumeAll+0x11c>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d05e      	beq.n	80131f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013136:	e02f      	b.n	8013198 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013138:	4b34      	ldr	r3, [pc, #208]	; (801320c <xTaskResumeAll+0x120>)
 801313a:	68db      	ldr	r3, [r3, #12]
 801313c:	68db      	ldr	r3, [r3, #12]
 801313e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	3318      	adds	r3, #24
 8013144:	4618      	mov	r0, r3
 8013146:	f7fe fedf 	bl	8011f08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	3304      	adds	r3, #4
 801314e:	4618      	mov	r0, r3
 8013150:	f7fe feda 	bl	8011f08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013158:	4b2d      	ldr	r3, [pc, #180]	; (8013210 <xTaskResumeAll+0x124>)
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	429a      	cmp	r2, r3
 801315e:	d903      	bls.n	8013168 <xTaskResumeAll+0x7c>
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013164:	4a2a      	ldr	r2, [pc, #168]	; (8013210 <xTaskResumeAll+0x124>)
 8013166:	6013      	str	r3, [r2, #0]
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801316c:	4613      	mov	r3, r2
 801316e:	009b      	lsls	r3, r3, #2
 8013170:	4413      	add	r3, r2
 8013172:	009b      	lsls	r3, r3, #2
 8013174:	4a27      	ldr	r2, [pc, #156]	; (8013214 <xTaskResumeAll+0x128>)
 8013176:	441a      	add	r2, r3
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	3304      	adds	r3, #4
 801317c:	4619      	mov	r1, r3
 801317e:	4610      	mov	r0, r2
 8013180:	f7fe fe65 	bl	8011e4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013188:	4b23      	ldr	r3, [pc, #140]	; (8013218 <xTaskResumeAll+0x12c>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801318e:	429a      	cmp	r2, r3
 8013190:	d302      	bcc.n	8013198 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013192:	4b22      	ldr	r3, [pc, #136]	; (801321c <xTaskResumeAll+0x130>)
 8013194:	2201      	movs	r2, #1
 8013196:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013198:	4b1c      	ldr	r3, [pc, #112]	; (801320c <xTaskResumeAll+0x120>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d1cb      	bne.n	8013138 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d001      	beq.n	80131aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80131a6:	f000 fb5f 	bl	8013868 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80131aa:	4b1d      	ldr	r3, [pc, #116]	; (8013220 <xTaskResumeAll+0x134>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d010      	beq.n	80131d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80131b6:	f000 f847 	bl	8013248 <xTaskIncrementTick>
 80131ba:	4603      	mov	r3, r0
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d002      	beq.n	80131c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80131c0:	4b16      	ldr	r3, [pc, #88]	; (801321c <xTaskResumeAll+0x130>)
 80131c2:	2201      	movs	r2, #1
 80131c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	3b01      	subs	r3, #1
 80131ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d1f1      	bne.n	80131b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80131d2:	4b13      	ldr	r3, [pc, #76]	; (8013220 <xTaskResumeAll+0x134>)
 80131d4:	2200      	movs	r2, #0
 80131d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80131d8:	4b10      	ldr	r3, [pc, #64]	; (801321c <xTaskResumeAll+0x130>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d009      	beq.n	80131f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80131e0:	2301      	movs	r3, #1
 80131e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80131e4:	4b0f      	ldr	r3, [pc, #60]	; (8013224 <xTaskResumeAll+0x138>)
 80131e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131ea:	601a      	str	r2, [r3, #0]
 80131ec:	f3bf 8f4f 	dsb	sy
 80131f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80131f4:	f001 f8e6 	bl	80143c4 <vPortExitCritical>

	return xAlreadyYielded;
 80131f8:	68bb      	ldr	r3, [r7, #8]
}
 80131fa:	4618      	mov	r0, r3
 80131fc:	3710      	adds	r7, #16
 80131fe:	46bd      	mov	sp, r7
 8013200:	bd80      	pop	{r7, pc}
 8013202:	bf00      	nop
 8013204:	20008bd0 	.word	0x20008bd0
 8013208:	20008ba8 	.word	0x20008ba8
 801320c:	20008b68 	.word	0x20008b68
 8013210:	20008bb0 	.word	0x20008bb0
 8013214:	200086d8 	.word	0x200086d8
 8013218:	200086d4 	.word	0x200086d4
 801321c:	20008bbc 	.word	0x20008bbc
 8013220:	20008bb8 	.word	0x20008bb8
 8013224:	e000ed04 	.word	0xe000ed04

08013228 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013228:	b480      	push	{r7}
 801322a:	b083      	sub	sp, #12
 801322c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801322e:	4b05      	ldr	r3, [pc, #20]	; (8013244 <xTaskGetTickCount+0x1c>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013234:	687b      	ldr	r3, [r7, #4]
}
 8013236:	4618      	mov	r0, r3
 8013238:	370c      	adds	r7, #12
 801323a:	46bd      	mov	sp, r7
 801323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013240:	4770      	bx	lr
 8013242:	bf00      	nop
 8013244:	20008bac 	.word	0x20008bac

08013248 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b086      	sub	sp, #24
 801324c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801324e:	2300      	movs	r3, #0
 8013250:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013252:	4b4f      	ldr	r3, [pc, #316]	; (8013390 <xTaskIncrementTick+0x148>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	2b00      	cmp	r3, #0
 8013258:	f040 808f 	bne.w	801337a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801325c:	4b4d      	ldr	r3, [pc, #308]	; (8013394 <xTaskIncrementTick+0x14c>)
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	3301      	adds	r3, #1
 8013262:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013264:	4a4b      	ldr	r2, [pc, #300]	; (8013394 <xTaskIncrementTick+0x14c>)
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801326a:	693b      	ldr	r3, [r7, #16]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d120      	bne.n	80132b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013270:	4b49      	ldr	r3, [pc, #292]	; (8013398 <xTaskIncrementTick+0x150>)
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d00a      	beq.n	8013290 <xTaskIncrementTick+0x48>
	__asm volatile
 801327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801327e:	f383 8811 	msr	BASEPRI, r3
 8013282:	f3bf 8f6f 	isb	sy
 8013286:	f3bf 8f4f 	dsb	sy
 801328a:	603b      	str	r3, [r7, #0]
}
 801328c:	bf00      	nop
 801328e:	e7fe      	b.n	801328e <xTaskIncrementTick+0x46>
 8013290:	4b41      	ldr	r3, [pc, #260]	; (8013398 <xTaskIncrementTick+0x150>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	60fb      	str	r3, [r7, #12]
 8013296:	4b41      	ldr	r3, [pc, #260]	; (801339c <xTaskIncrementTick+0x154>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	4a3f      	ldr	r2, [pc, #252]	; (8013398 <xTaskIncrementTick+0x150>)
 801329c:	6013      	str	r3, [r2, #0]
 801329e:	4a3f      	ldr	r2, [pc, #252]	; (801339c <xTaskIncrementTick+0x154>)
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	6013      	str	r3, [r2, #0]
 80132a4:	4b3e      	ldr	r3, [pc, #248]	; (80133a0 <xTaskIncrementTick+0x158>)
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	3301      	adds	r3, #1
 80132aa:	4a3d      	ldr	r2, [pc, #244]	; (80133a0 <xTaskIncrementTick+0x158>)
 80132ac:	6013      	str	r3, [r2, #0]
 80132ae:	f000 fadb 	bl	8013868 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80132b2:	4b3c      	ldr	r3, [pc, #240]	; (80133a4 <xTaskIncrementTick+0x15c>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	693a      	ldr	r2, [r7, #16]
 80132b8:	429a      	cmp	r2, r3
 80132ba:	d349      	bcc.n	8013350 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80132bc:	4b36      	ldr	r3, [pc, #216]	; (8013398 <xTaskIncrementTick+0x150>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d104      	bne.n	80132d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132c6:	4b37      	ldr	r3, [pc, #220]	; (80133a4 <xTaskIncrementTick+0x15c>)
 80132c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80132cc:	601a      	str	r2, [r3, #0]
					break;
 80132ce:	e03f      	b.n	8013350 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132d0:	4b31      	ldr	r3, [pc, #196]	; (8013398 <xTaskIncrementTick+0x150>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	68db      	ldr	r3, [r3, #12]
 80132d6:	68db      	ldr	r3, [r3, #12]
 80132d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	685b      	ldr	r3, [r3, #4]
 80132de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80132e0:	693a      	ldr	r2, [r7, #16]
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	429a      	cmp	r2, r3
 80132e6:	d203      	bcs.n	80132f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80132e8:	4a2e      	ldr	r2, [pc, #184]	; (80133a4 <xTaskIncrementTick+0x15c>)
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80132ee:	e02f      	b.n	8013350 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80132f0:	68bb      	ldr	r3, [r7, #8]
 80132f2:	3304      	adds	r3, #4
 80132f4:	4618      	mov	r0, r3
 80132f6:	f7fe fe07 	bl	8011f08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d004      	beq.n	801330c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013302:	68bb      	ldr	r3, [r7, #8]
 8013304:	3318      	adds	r3, #24
 8013306:	4618      	mov	r0, r3
 8013308:	f7fe fdfe 	bl	8011f08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801330c:	68bb      	ldr	r3, [r7, #8]
 801330e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013310:	4b25      	ldr	r3, [pc, #148]	; (80133a8 <xTaskIncrementTick+0x160>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	429a      	cmp	r2, r3
 8013316:	d903      	bls.n	8013320 <xTaskIncrementTick+0xd8>
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801331c:	4a22      	ldr	r2, [pc, #136]	; (80133a8 <xTaskIncrementTick+0x160>)
 801331e:	6013      	str	r3, [r2, #0]
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013324:	4613      	mov	r3, r2
 8013326:	009b      	lsls	r3, r3, #2
 8013328:	4413      	add	r3, r2
 801332a:	009b      	lsls	r3, r3, #2
 801332c:	4a1f      	ldr	r2, [pc, #124]	; (80133ac <xTaskIncrementTick+0x164>)
 801332e:	441a      	add	r2, r3
 8013330:	68bb      	ldr	r3, [r7, #8]
 8013332:	3304      	adds	r3, #4
 8013334:	4619      	mov	r1, r3
 8013336:	4610      	mov	r0, r2
 8013338:	f7fe fd89 	bl	8011e4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013340:	4b1b      	ldr	r3, [pc, #108]	; (80133b0 <xTaskIncrementTick+0x168>)
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013346:	429a      	cmp	r2, r3
 8013348:	d3b8      	bcc.n	80132bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801334a:	2301      	movs	r3, #1
 801334c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801334e:	e7b5      	b.n	80132bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013350:	4b17      	ldr	r3, [pc, #92]	; (80133b0 <xTaskIncrementTick+0x168>)
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013356:	4915      	ldr	r1, [pc, #84]	; (80133ac <xTaskIncrementTick+0x164>)
 8013358:	4613      	mov	r3, r2
 801335a:	009b      	lsls	r3, r3, #2
 801335c:	4413      	add	r3, r2
 801335e:	009b      	lsls	r3, r3, #2
 8013360:	440b      	add	r3, r1
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	2b01      	cmp	r3, #1
 8013366:	d901      	bls.n	801336c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013368:	2301      	movs	r3, #1
 801336a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801336c:	4b11      	ldr	r3, [pc, #68]	; (80133b4 <xTaskIncrementTick+0x16c>)
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d007      	beq.n	8013384 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013374:	2301      	movs	r3, #1
 8013376:	617b      	str	r3, [r7, #20]
 8013378:	e004      	b.n	8013384 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801337a:	4b0f      	ldr	r3, [pc, #60]	; (80133b8 <xTaskIncrementTick+0x170>)
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	3301      	adds	r3, #1
 8013380:	4a0d      	ldr	r2, [pc, #52]	; (80133b8 <xTaskIncrementTick+0x170>)
 8013382:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013384:	697b      	ldr	r3, [r7, #20]
}
 8013386:	4618      	mov	r0, r3
 8013388:	3718      	adds	r7, #24
 801338a:	46bd      	mov	sp, r7
 801338c:	bd80      	pop	{r7, pc}
 801338e:	bf00      	nop
 8013390:	20008bd0 	.word	0x20008bd0
 8013394:	20008bac 	.word	0x20008bac
 8013398:	20008b60 	.word	0x20008b60
 801339c:	20008b64 	.word	0x20008b64
 80133a0:	20008bc0 	.word	0x20008bc0
 80133a4:	20008bc8 	.word	0x20008bc8
 80133a8:	20008bb0 	.word	0x20008bb0
 80133ac:	200086d8 	.word	0x200086d8
 80133b0:	200086d4 	.word	0x200086d4
 80133b4:	20008bbc 	.word	0x20008bbc
 80133b8:	20008bb8 	.word	0x20008bb8

080133bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80133bc:	b480      	push	{r7}
 80133be:	b085      	sub	sp, #20
 80133c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80133c2:	4b2a      	ldr	r3, [pc, #168]	; (801346c <vTaskSwitchContext+0xb0>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d003      	beq.n	80133d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80133ca:	4b29      	ldr	r3, [pc, #164]	; (8013470 <vTaskSwitchContext+0xb4>)
 80133cc:	2201      	movs	r2, #1
 80133ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80133d0:	e046      	b.n	8013460 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80133d2:	4b27      	ldr	r3, [pc, #156]	; (8013470 <vTaskSwitchContext+0xb4>)
 80133d4:	2200      	movs	r2, #0
 80133d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133d8:	4b26      	ldr	r3, [pc, #152]	; (8013474 <vTaskSwitchContext+0xb8>)
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	60fb      	str	r3, [r7, #12]
 80133de:	e010      	b.n	8013402 <vTaskSwitchContext+0x46>
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d10a      	bne.n	80133fc <vTaskSwitchContext+0x40>
	__asm volatile
 80133e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133ea:	f383 8811 	msr	BASEPRI, r3
 80133ee:	f3bf 8f6f 	isb	sy
 80133f2:	f3bf 8f4f 	dsb	sy
 80133f6:	607b      	str	r3, [r7, #4]
}
 80133f8:	bf00      	nop
 80133fa:	e7fe      	b.n	80133fa <vTaskSwitchContext+0x3e>
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	3b01      	subs	r3, #1
 8013400:	60fb      	str	r3, [r7, #12]
 8013402:	491d      	ldr	r1, [pc, #116]	; (8013478 <vTaskSwitchContext+0xbc>)
 8013404:	68fa      	ldr	r2, [r7, #12]
 8013406:	4613      	mov	r3, r2
 8013408:	009b      	lsls	r3, r3, #2
 801340a:	4413      	add	r3, r2
 801340c:	009b      	lsls	r3, r3, #2
 801340e:	440b      	add	r3, r1
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d0e4      	beq.n	80133e0 <vTaskSwitchContext+0x24>
 8013416:	68fa      	ldr	r2, [r7, #12]
 8013418:	4613      	mov	r3, r2
 801341a:	009b      	lsls	r3, r3, #2
 801341c:	4413      	add	r3, r2
 801341e:	009b      	lsls	r3, r3, #2
 8013420:	4a15      	ldr	r2, [pc, #84]	; (8013478 <vTaskSwitchContext+0xbc>)
 8013422:	4413      	add	r3, r2
 8013424:	60bb      	str	r3, [r7, #8]
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	685b      	ldr	r3, [r3, #4]
 801342a:	685a      	ldr	r2, [r3, #4]
 801342c:	68bb      	ldr	r3, [r7, #8]
 801342e:	605a      	str	r2, [r3, #4]
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	685a      	ldr	r2, [r3, #4]
 8013434:	68bb      	ldr	r3, [r7, #8]
 8013436:	3308      	adds	r3, #8
 8013438:	429a      	cmp	r2, r3
 801343a:	d104      	bne.n	8013446 <vTaskSwitchContext+0x8a>
 801343c:	68bb      	ldr	r3, [r7, #8]
 801343e:	685b      	ldr	r3, [r3, #4]
 8013440:	685a      	ldr	r2, [r3, #4]
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	605a      	str	r2, [r3, #4]
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	685b      	ldr	r3, [r3, #4]
 801344a:	68db      	ldr	r3, [r3, #12]
 801344c:	4a0b      	ldr	r2, [pc, #44]	; (801347c <vTaskSwitchContext+0xc0>)
 801344e:	6013      	str	r3, [r2, #0]
 8013450:	4a08      	ldr	r2, [pc, #32]	; (8013474 <vTaskSwitchContext+0xb8>)
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013456:	4b09      	ldr	r3, [pc, #36]	; (801347c <vTaskSwitchContext+0xc0>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	3354      	adds	r3, #84	; 0x54
 801345c:	4a08      	ldr	r2, [pc, #32]	; (8013480 <vTaskSwitchContext+0xc4>)
 801345e:	6013      	str	r3, [r2, #0]
}
 8013460:	bf00      	nop
 8013462:	3714      	adds	r7, #20
 8013464:	46bd      	mov	sp, r7
 8013466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346a:	4770      	bx	lr
 801346c:	20008bd0 	.word	0x20008bd0
 8013470:	20008bbc 	.word	0x20008bbc
 8013474:	20008bb0 	.word	0x20008bb0
 8013478:	200086d8 	.word	0x200086d8
 801347c:	200086d4 	.word	0x200086d4
 8013480:	200000cc 	.word	0x200000cc

08013484 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b084      	sub	sp, #16
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
 801348c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d10a      	bne.n	80134aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013498:	f383 8811 	msr	BASEPRI, r3
 801349c:	f3bf 8f6f 	isb	sy
 80134a0:	f3bf 8f4f 	dsb	sy
 80134a4:	60fb      	str	r3, [r7, #12]
}
 80134a6:	bf00      	nop
 80134a8:	e7fe      	b.n	80134a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80134aa:	4b07      	ldr	r3, [pc, #28]	; (80134c8 <vTaskPlaceOnEventList+0x44>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	3318      	adds	r3, #24
 80134b0:	4619      	mov	r1, r3
 80134b2:	6878      	ldr	r0, [r7, #4]
 80134b4:	f7fe fcef 	bl	8011e96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80134b8:	2101      	movs	r1, #1
 80134ba:	6838      	ldr	r0, [r7, #0]
 80134bc:	f000 fa80 	bl	80139c0 <prvAddCurrentTaskToDelayedList>
}
 80134c0:	bf00      	nop
 80134c2:	3710      	adds	r7, #16
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}
 80134c8:	200086d4 	.word	0x200086d4

080134cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b086      	sub	sp, #24
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	60f8      	str	r0, [r7, #12]
 80134d4:	60b9      	str	r1, [r7, #8]
 80134d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d10a      	bne.n	80134f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80134de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134e2:	f383 8811 	msr	BASEPRI, r3
 80134e6:	f3bf 8f6f 	isb	sy
 80134ea:	f3bf 8f4f 	dsb	sy
 80134ee:	617b      	str	r3, [r7, #20]
}
 80134f0:	bf00      	nop
 80134f2:	e7fe      	b.n	80134f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80134f4:	4b0a      	ldr	r3, [pc, #40]	; (8013520 <vTaskPlaceOnEventListRestricted+0x54>)
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	3318      	adds	r3, #24
 80134fa:	4619      	mov	r1, r3
 80134fc:	68f8      	ldr	r0, [r7, #12]
 80134fe:	f7fe fca6 	bl	8011e4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d002      	beq.n	801350e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801350c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801350e:	6879      	ldr	r1, [r7, #4]
 8013510:	68b8      	ldr	r0, [r7, #8]
 8013512:	f000 fa55 	bl	80139c0 <prvAddCurrentTaskToDelayedList>
	}
 8013516:	bf00      	nop
 8013518:	3718      	adds	r7, #24
 801351a:	46bd      	mov	sp, r7
 801351c:	bd80      	pop	{r7, pc}
 801351e:	bf00      	nop
 8013520:	200086d4 	.word	0x200086d4

08013524 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b086      	sub	sp, #24
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	68db      	ldr	r3, [r3, #12]
 8013530:	68db      	ldr	r3, [r3, #12]
 8013532:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013534:	693b      	ldr	r3, [r7, #16]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d10a      	bne.n	8013550 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801353e:	f383 8811 	msr	BASEPRI, r3
 8013542:	f3bf 8f6f 	isb	sy
 8013546:	f3bf 8f4f 	dsb	sy
 801354a:	60fb      	str	r3, [r7, #12]
}
 801354c:	bf00      	nop
 801354e:	e7fe      	b.n	801354e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013550:	693b      	ldr	r3, [r7, #16]
 8013552:	3318      	adds	r3, #24
 8013554:	4618      	mov	r0, r3
 8013556:	f7fe fcd7 	bl	8011f08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801355a:	4b1e      	ldr	r3, [pc, #120]	; (80135d4 <xTaskRemoveFromEventList+0xb0>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d11d      	bne.n	801359e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013562:	693b      	ldr	r3, [r7, #16]
 8013564:	3304      	adds	r3, #4
 8013566:	4618      	mov	r0, r3
 8013568:	f7fe fcce 	bl	8011f08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801356c:	693b      	ldr	r3, [r7, #16]
 801356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013570:	4b19      	ldr	r3, [pc, #100]	; (80135d8 <xTaskRemoveFromEventList+0xb4>)
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	429a      	cmp	r2, r3
 8013576:	d903      	bls.n	8013580 <xTaskRemoveFromEventList+0x5c>
 8013578:	693b      	ldr	r3, [r7, #16]
 801357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801357c:	4a16      	ldr	r2, [pc, #88]	; (80135d8 <xTaskRemoveFromEventList+0xb4>)
 801357e:	6013      	str	r3, [r2, #0]
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013584:	4613      	mov	r3, r2
 8013586:	009b      	lsls	r3, r3, #2
 8013588:	4413      	add	r3, r2
 801358a:	009b      	lsls	r3, r3, #2
 801358c:	4a13      	ldr	r2, [pc, #76]	; (80135dc <xTaskRemoveFromEventList+0xb8>)
 801358e:	441a      	add	r2, r3
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	3304      	adds	r3, #4
 8013594:	4619      	mov	r1, r3
 8013596:	4610      	mov	r0, r2
 8013598:	f7fe fc59 	bl	8011e4e <vListInsertEnd>
 801359c:	e005      	b.n	80135aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801359e:	693b      	ldr	r3, [r7, #16]
 80135a0:	3318      	adds	r3, #24
 80135a2:	4619      	mov	r1, r3
 80135a4:	480e      	ldr	r0, [pc, #56]	; (80135e0 <xTaskRemoveFromEventList+0xbc>)
 80135a6:	f7fe fc52 	bl	8011e4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135ae:	4b0d      	ldr	r3, [pc, #52]	; (80135e4 <xTaskRemoveFromEventList+0xc0>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135b4:	429a      	cmp	r2, r3
 80135b6:	d905      	bls.n	80135c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80135b8:	2301      	movs	r3, #1
 80135ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80135bc:	4b0a      	ldr	r3, [pc, #40]	; (80135e8 <xTaskRemoveFromEventList+0xc4>)
 80135be:	2201      	movs	r2, #1
 80135c0:	601a      	str	r2, [r3, #0]
 80135c2:	e001      	b.n	80135c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80135c4:	2300      	movs	r3, #0
 80135c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80135c8:	697b      	ldr	r3, [r7, #20]
}
 80135ca:	4618      	mov	r0, r3
 80135cc:	3718      	adds	r7, #24
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}
 80135d2:	bf00      	nop
 80135d4:	20008bd0 	.word	0x20008bd0
 80135d8:	20008bb0 	.word	0x20008bb0
 80135dc:	200086d8 	.word	0x200086d8
 80135e0:	20008b68 	.word	0x20008b68
 80135e4:	200086d4 	.word	0x200086d4
 80135e8:	20008bbc 	.word	0x20008bbc

080135ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80135ec:	b480      	push	{r7}
 80135ee:	b083      	sub	sp, #12
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80135f4:	4b06      	ldr	r3, [pc, #24]	; (8013610 <vTaskInternalSetTimeOutState+0x24>)
 80135f6:	681a      	ldr	r2, [r3, #0]
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80135fc:	4b05      	ldr	r3, [pc, #20]	; (8013614 <vTaskInternalSetTimeOutState+0x28>)
 80135fe:	681a      	ldr	r2, [r3, #0]
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	605a      	str	r2, [r3, #4]
}
 8013604:	bf00      	nop
 8013606:	370c      	adds	r7, #12
 8013608:	46bd      	mov	sp, r7
 801360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360e:	4770      	bx	lr
 8013610:	20008bc0 	.word	0x20008bc0
 8013614:	20008bac 	.word	0x20008bac

08013618 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b088      	sub	sp, #32
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d10a      	bne.n	801363e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801362c:	f383 8811 	msr	BASEPRI, r3
 8013630:	f3bf 8f6f 	isb	sy
 8013634:	f3bf 8f4f 	dsb	sy
 8013638:	613b      	str	r3, [r7, #16]
}
 801363a:	bf00      	nop
 801363c:	e7fe      	b.n	801363c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d10a      	bne.n	801365a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013648:	f383 8811 	msr	BASEPRI, r3
 801364c:	f3bf 8f6f 	isb	sy
 8013650:	f3bf 8f4f 	dsb	sy
 8013654:	60fb      	str	r3, [r7, #12]
}
 8013656:	bf00      	nop
 8013658:	e7fe      	b.n	8013658 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801365a:	f000 fe83 	bl	8014364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801365e:	4b1d      	ldr	r3, [pc, #116]	; (80136d4 <xTaskCheckForTimeOut+0xbc>)
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	685b      	ldr	r3, [r3, #4]
 8013668:	69ba      	ldr	r2, [r7, #24]
 801366a:	1ad3      	subs	r3, r2, r3
 801366c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013676:	d102      	bne.n	801367e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013678:	2300      	movs	r3, #0
 801367a:	61fb      	str	r3, [r7, #28]
 801367c:	e023      	b.n	80136c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	681a      	ldr	r2, [r3, #0]
 8013682:	4b15      	ldr	r3, [pc, #84]	; (80136d8 <xTaskCheckForTimeOut+0xc0>)
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	429a      	cmp	r2, r3
 8013688:	d007      	beq.n	801369a <xTaskCheckForTimeOut+0x82>
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	685b      	ldr	r3, [r3, #4]
 801368e:	69ba      	ldr	r2, [r7, #24]
 8013690:	429a      	cmp	r2, r3
 8013692:	d302      	bcc.n	801369a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013694:	2301      	movs	r3, #1
 8013696:	61fb      	str	r3, [r7, #28]
 8013698:	e015      	b.n	80136c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	697a      	ldr	r2, [r7, #20]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d20b      	bcs.n	80136bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80136a4:	683b      	ldr	r3, [r7, #0]
 80136a6:	681a      	ldr	r2, [r3, #0]
 80136a8:	697b      	ldr	r3, [r7, #20]
 80136aa:	1ad2      	subs	r2, r2, r3
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f7ff ff9b 	bl	80135ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80136b6:	2300      	movs	r3, #0
 80136b8:	61fb      	str	r3, [r7, #28]
 80136ba:	e004      	b.n	80136c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80136bc:	683b      	ldr	r3, [r7, #0]
 80136be:	2200      	movs	r2, #0
 80136c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80136c2:	2301      	movs	r3, #1
 80136c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80136c6:	f000 fe7d 	bl	80143c4 <vPortExitCritical>

	return xReturn;
 80136ca:	69fb      	ldr	r3, [r7, #28]
}
 80136cc:	4618      	mov	r0, r3
 80136ce:	3720      	adds	r7, #32
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}
 80136d4:	20008bac 	.word	0x20008bac
 80136d8:	20008bc0 	.word	0x20008bc0

080136dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80136dc:	b480      	push	{r7}
 80136de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80136e0:	4b03      	ldr	r3, [pc, #12]	; (80136f0 <vTaskMissedYield+0x14>)
 80136e2:	2201      	movs	r2, #1
 80136e4:	601a      	str	r2, [r3, #0]
}
 80136e6:	bf00      	nop
 80136e8:	46bd      	mov	sp, r7
 80136ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ee:	4770      	bx	lr
 80136f0:	20008bbc 	.word	0x20008bbc

080136f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b082      	sub	sp, #8
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80136fc:	f000 f852 	bl	80137a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013700:	4b06      	ldr	r3, [pc, #24]	; (801371c <prvIdleTask+0x28>)
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	2b01      	cmp	r3, #1
 8013706:	d9f9      	bls.n	80136fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8013708:	4b05      	ldr	r3, [pc, #20]	; (8013720 <prvIdleTask+0x2c>)
 801370a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801370e:	601a      	str	r2, [r3, #0]
 8013710:	f3bf 8f4f 	dsb	sy
 8013714:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013718:	e7f0      	b.n	80136fc <prvIdleTask+0x8>
 801371a:	bf00      	nop
 801371c:	200086d8 	.word	0x200086d8
 8013720:	e000ed04 	.word	0xe000ed04

08013724 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b082      	sub	sp, #8
 8013728:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801372a:	2300      	movs	r3, #0
 801372c:	607b      	str	r3, [r7, #4]
 801372e:	e00c      	b.n	801374a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	4613      	mov	r3, r2
 8013734:	009b      	lsls	r3, r3, #2
 8013736:	4413      	add	r3, r2
 8013738:	009b      	lsls	r3, r3, #2
 801373a:	4a12      	ldr	r2, [pc, #72]	; (8013784 <prvInitialiseTaskLists+0x60>)
 801373c:	4413      	add	r3, r2
 801373e:	4618      	mov	r0, r3
 8013740:	f7fe fb58 	bl	8011df4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	3301      	adds	r3, #1
 8013748:	607b      	str	r3, [r7, #4]
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	2b37      	cmp	r3, #55	; 0x37
 801374e:	d9ef      	bls.n	8013730 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013750:	480d      	ldr	r0, [pc, #52]	; (8013788 <prvInitialiseTaskLists+0x64>)
 8013752:	f7fe fb4f 	bl	8011df4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013756:	480d      	ldr	r0, [pc, #52]	; (801378c <prvInitialiseTaskLists+0x68>)
 8013758:	f7fe fb4c 	bl	8011df4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801375c:	480c      	ldr	r0, [pc, #48]	; (8013790 <prvInitialiseTaskLists+0x6c>)
 801375e:	f7fe fb49 	bl	8011df4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013762:	480c      	ldr	r0, [pc, #48]	; (8013794 <prvInitialiseTaskLists+0x70>)
 8013764:	f7fe fb46 	bl	8011df4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013768:	480b      	ldr	r0, [pc, #44]	; (8013798 <prvInitialiseTaskLists+0x74>)
 801376a:	f7fe fb43 	bl	8011df4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801376e:	4b0b      	ldr	r3, [pc, #44]	; (801379c <prvInitialiseTaskLists+0x78>)
 8013770:	4a05      	ldr	r2, [pc, #20]	; (8013788 <prvInitialiseTaskLists+0x64>)
 8013772:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013774:	4b0a      	ldr	r3, [pc, #40]	; (80137a0 <prvInitialiseTaskLists+0x7c>)
 8013776:	4a05      	ldr	r2, [pc, #20]	; (801378c <prvInitialiseTaskLists+0x68>)
 8013778:	601a      	str	r2, [r3, #0]
}
 801377a:	bf00      	nop
 801377c:	3708      	adds	r7, #8
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
 8013782:	bf00      	nop
 8013784:	200086d8 	.word	0x200086d8
 8013788:	20008b38 	.word	0x20008b38
 801378c:	20008b4c 	.word	0x20008b4c
 8013790:	20008b68 	.word	0x20008b68
 8013794:	20008b7c 	.word	0x20008b7c
 8013798:	20008b94 	.word	0x20008b94
 801379c:	20008b60 	.word	0x20008b60
 80137a0:	20008b64 	.word	0x20008b64

080137a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b082      	sub	sp, #8
 80137a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80137aa:	e019      	b.n	80137e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80137ac:	f000 fdda 	bl	8014364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80137b0:	4b10      	ldr	r3, [pc, #64]	; (80137f4 <prvCheckTasksWaitingTermination+0x50>)
 80137b2:	68db      	ldr	r3, [r3, #12]
 80137b4:	68db      	ldr	r3, [r3, #12]
 80137b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	3304      	adds	r3, #4
 80137bc:	4618      	mov	r0, r3
 80137be:	f7fe fba3 	bl	8011f08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80137c2:	4b0d      	ldr	r3, [pc, #52]	; (80137f8 <prvCheckTasksWaitingTermination+0x54>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	3b01      	subs	r3, #1
 80137c8:	4a0b      	ldr	r2, [pc, #44]	; (80137f8 <prvCheckTasksWaitingTermination+0x54>)
 80137ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80137cc:	4b0b      	ldr	r3, [pc, #44]	; (80137fc <prvCheckTasksWaitingTermination+0x58>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	3b01      	subs	r3, #1
 80137d2:	4a0a      	ldr	r2, [pc, #40]	; (80137fc <prvCheckTasksWaitingTermination+0x58>)
 80137d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80137d6:	f000 fdf5 	bl	80143c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80137da:	6878      	ldr	r0, [r7, #4]
 80137dc:	f000 f810 	bl	8013800 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80137e0:	4b06      	ldr	r3, [pc, #24]	; (80137fc <prvCheckTasksWaitingTermination+0x58>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d1e1      	bne.n	80137ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80137e8:	bf00      	nop
 80137ea:	bf00      	nop
 80137ec:	3708      	adds	r7, #8
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}
 80137f2:	bf00      	nop
 80137f4:	20008b7c 	.word	0x20008b7c
 80137f8:	20008ba8 	.word	0x20008ba8
 80137fc:	20008b90 	.word	0x20008b90

08013800 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013800:	b580      	push	{r7, lr}
 8013802:	b084      	sub	sp, #16
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	3354      	adds	r3, #84	; 0x54
 801380c:	4618      	mov	r0, r3
 801380e:	f001 ff1f 	bl	8015650 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013818:	2b00      	cmp	r3, #0
 801381a:	d108      	bne.n	801382e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013820:	4618      	mov	r0, r3
 8013822:	f000 ff65 	bl	80146f0 <vPortFree>
				vPortFree( pxTCB );
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f000 ff62 	bl	80146f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801382c:	e018      	b.n	8013860 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013834:	2b01      	cmp	r3, #1
 8013836:	d103      	bne.n	8013840 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f000 ff59 	bl	80146f0 <vPortFree>
	}
 801383e:	e00f      	b.n	8013860 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013846:	2b02      	cmp	r3, #2
 8013848:	d00a      	beq.n	8013860 <prvDeleteTCB+0x60>
	__asm volatile
 801384a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801384e:	f383 8811 	msr	BASEPRI, r3
 8013852:	f3bf 8f6f 	isb	sy
 8013856:	f3bf 8f4f 	dsb	sy
 801385a:	60fb      	str	r3, [r7, #12]
}
 801385c:	bf00      	nop
 801385e:	e7fe      	b.n	801385e <prvDeleteTCB+0x5e>
	}
 8013860:	bf00      	nop
 8013862:	3710      	adds	r7, #16
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013868:	b480      	push	{r7}
 801386a:	b083      	sub	sp, #12
 801386c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801386e:	4b0c      	ldr	r3, [pc, #48]	; (80138a0 <prvResetNextTaskUnblockTime+0x38>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d104      	bne.n	8013882 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013878:	4b0a      	ldr	r3, [pc, #40]	; (80138a4 <prvResetNextTaskUnblockTime+0x3c>)
 801387a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801387e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013880:	e008      	b.n	8013894 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013882:	4b07      	ldr	r3, [pc, #28]	; (80138a0 <prvResetNextTaskUnblockTime+0x38>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	68db      	ldr	r3, [r3, #12]
 8013888:	68db      	ldr	r3, [r3, #12]
 801388a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	685b      	ldr	r3, [r3, #4]
 8013890:	4a04      	ldr	r2, [pc, #16]	; (80138a4 <prvResetNextTaskUnblockTime+0x3c>)
 8013892:	6013      	str	r3, [r2, #0]
}
 8013894:	bf00      	nop
 8013896:	370c      	adds	r7, #12
 8013898:	46bd      	mov	sp, r7
 801389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389e:	4770      	bx	lr
 80138a0:	20008b60 	.word	0x20008b60
 80138a4:	20008bc8 	.word	0x20008bc8

080138a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80138a8:	b480      	push	{r7}
 80138aa:	b083      	sub	sp, #12
 80138ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80138ae:	4b0b      	ldr	r3, [pc, #44]	; (80138dc <xTaskGetSchedulerState+0x34>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d102      	bne.n	80138bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80138b6:	2301      	movs	r3, #1
 80138b8:	607b      	str	r3, [r7, #4]
 80138ba:	e008      	b.n	80138ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80138bc:	4b08      	ldr	r3, [pc, #32]	; (80138e0 <xTaskGetSchedulerState+0x38>)
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d102      	bne.n	80138ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80138c4:	2302      	movs	r3, #2
 80138c6:	607b      	str	r3, [r7, #4]
 80138c8:	e001      	b.n	80138ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80138ca:	2300      	movs	r3, #0
 80138cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80138ce:	687b      	ldr	r3, [r7, #4]
	}
 80138d0:	4618      	mov	r0, r3
 80138d2:	370c      	adds	r7, #12
 80138d4:	46bd      	mov	sp, r7
 80138d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138da:	4770      	bx	lr
 80138dc:	20008bb4 	.word	0x20008bb4
 80138e0:	20008bd0 	.word	0x20008bd0

080138e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b086      	sub	sp, #24
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80138f0:	2300      	movs	r3, #0
 80138f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d056      	beq.n	80139a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80138fa:	4b2e      	ldr	r3, [pc, #184]	; (80139b4 <xTaskPriorityDisinherit+0xd0>)
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	693a      	ldr	r2, [r7, #16]
 8013900:	429a      	cmp	r2, r3
 8013902:	d00a      	beq.n	801391a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013908:	f383 8811 	msr	BASEPRI, r3
 801390c:	f3bf 8f6f 	isb	sy
 8013910:	f3bf 8f4f 	dsb	sy
 8013914:	60fb      	str	r3, [r7, #12]
}
 8013916:	bf00      	nop
 8013918:	e7fe      	b.n	8013918 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801391a:	693b      	ldr	r3, [r7, #16]
 801391c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801391e:	2b00      	cmp	r3, #0
 8013920:	d10a      	bne.n	8013938 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013926:	f383 8811 	msr	BASEPRI, r3
 801392a:	f3bf 8f6f 	isb	sy
 801392e:	f3bf 8f4f 	dsb	sy
 8013932:	60bb      	str	r3, [r7, #8]
}
 8013934:	bf00      	nop
 8013936:	e7fe      	b.n	8013936 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013938:	693b      	ldr	r3, [r7, #16]
 801393a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801393c:	1e5a      	subs	r2, r3, #1
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013942:	693b      	ldr	r3, [r7, #16]
 8013944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013946:	693b      	ldr	r3, [r7, #16]
 8013948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801394a:	429a      	cmp	r2, r3
 801394c:	d02c      	beq.n	80139a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013952:	2b00      	cmp	r3, #0
 8013954:	d128      	bne.n	80139a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	3304      	adds	r3, #4
 801395a:	4618      	mov	r0, r3
 801395c:	f7fe fad4 	bl	8011f08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013964:	693b      	ldr	r3, [r7, #16]
 8013966:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801396c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013974:	693b      	ldr	r3, [r7, #16]
 8013976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013978:	4b0f      	ldr	r3, [pc, #60]	; (80139b8 <xTaskPriorityDisinherit+0xd4>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	429a      	cmp	r2, r3
 801397e:	d903      	bls.n	8013988 <xTaskPriorityDisinherit+0xa4>
 8013980:	693b      	ldr	r3, [r7, #16]
 8013982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013984:	4a0c      	ldr	r2, [pc, #48]	; (80139b8 <xTaskPriorityDisinherit+0xd4>)
 8013986:	6013      	str	r3, [r2, #0]
 8013988:	693b      	ldr	r3, [r7, #16]
 801398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801398c:	4613      	mov	r3, r2
 801398e:	009b      	lsls	r3, r3, #2
 8013990:	4413      	add	r3, r2
 8013992:	009b      	lsls	r3, r3, #2
 8013994:	4a09      	ldr	r2, [pc, #36]	; (80139bc <xTaskPriorityDisinherit+0xd8>)
 8013996:	441a      	add	r2, r3
 8013998:	693b      	ldr	r3, [r7, #16]
 801399a:	3304      	adds	r3, #4
 801399c:	4619      	mov	r1, r3
 801399e:	4610      	mov	r0, r2
 80139a0:	f7fe fa55 	bl	8011e4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80139a4:	2301      	movs	r3, #1
 80139a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80139a8:	697b      	ldr	r3, [r7, #20]
	}
 80139aa:	4618      	mov	r0, r3
 80139ac:	3718      	adds	r7, #24
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}
 80139b2:	bf00      	nop
 80139b4:	200086d4 	.word	0x200086d4
 80139b8:	20008bb0 	.word	0x20008bb0
 80139bc:	200086d8 	.word	0x200086d8

080139c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b084      	sub	sp, #16
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80139ca:	4b21      	ldr	r3, [pc, #132]	; (8013a50 <prvAddCurrentTaskToDelayedList+0x90>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80139d0:	4b20      	ldr	r3, [pc, #128]	; (8013a54 <prvAddCurrentTaskToDelayedList+0x94>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	3304      	adds	r3, #4
 80139d6:	4618      	mov	r0, r3
 80139d8:	f7fe fa96 	bl	8011f08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80139e2:	d10a      	bne.n	80139fa <prvAddCurrentTaskToDelayedList+0x3a>
 80139e4:	683b      	ldr	r3, [r7, #0]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d007      	beq.n	80139fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80139ea:	4b1a      	ldr	r3, [pc, #104]	; (8013a54 <prvAddCurrentTaskToDelayedList+0x94>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	3304      	adds	r3, #4
 80139f0:	4619      	mov	r1, r3
 80139f2:	4819      	ldr	r0, [pc, #100]	; (8013a58 <prvAddCurrentTaskToDelayedList+0x98>)
 80139f4:	f7fe fa2b 	bl	8011e4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80139f8:	e026      	b.n	8013a48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80139fa:	68fa      	ldr	r2, [r7, #12]
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	4413      	add	r3, r2
 8013a00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013a02:	4b14      	ldr	r3, [pc, #80]	; (8013a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	68ba      	ldr	r2, [r7, #8]
 8013a08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013a0a:	68ba      	ldr	r2, [r7, #8]
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d209      	bcs.n	8013a26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013a12:	4b12      	ldr	r3, [pc, #72]	; (8013a5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8013a14:	681a      	ldr	r2, [r3, #0]
 8013a16:	4b0f      	ldr	r3, [pc, #60]	; (8013a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	3304      	adds	r3, #4
 8013a1c:	4619      	mov	r1, r3
 8013a1e:	4610      	mov	r0, r2
 8013a20:	f7fe fa39 	bl	8011e96 <vListInsert>
}
 8013a24:	e010      	b.n	8013a48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013a26:	4b0e      	ldr	r3, [pc, #56]	; (8013a60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013a28:	681a      	ldr	r2, [r3, #0]
 8013a2a:	4b0a      	ldr	r3, [pc, #40]	; (8013a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	3304      	adds	r3, #4
 8013a30:	4619      	mov	r1, r3
 8013a32:	4610      	mov	r0, r2
 8013a34:	f7fe fa2f 	bl	8011e96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013a38:	4b0a      	ldr	r3, [pc, #40]	; (8013a64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	68ba      	ldr	r2, [r7, #8]
 8013a3e:	429a      	cmp	r2, r3
 8013a40:	d202      	bcs.n	8013a48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013a42:	4a08      	ldr	r2, [pc, #32]	; (8013a64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	6013      	str	r3, [r2, #0]
}
 8013a48:	bf00      	nop
 8013a4a:	3710      	adds	r7, #16
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd80      	pop	{r7, pc}
 8013a50:	20008bac 	.word	0x20008bac
 8013a54:	200086d4 	.word	0x200086d4
 8013a58:	20008b94 	.word	0x20008b94
 8013a5c:	20008b64 	.word	0x20008b64
 8013a60:	20008b60 	.word	0x20008b60
 8013a64:	20008bc8 	.word	0x20008bc8

08013a68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b08a      	sub	sp, #40	; 0x28
 8013a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013a72:	f000 fb07 	bl	8014084 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013a76:	4b1c      	ldr	r3, [pc, #112]	; (8013ae8 <xTimerCreateTimerTask+0x80>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d021      	beq.n	8013ac2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013a82:	2300      	movs	r3, #0
 8013a84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013a86:	1d3a      	adds	r2, r7, #4
 8013a88:	f107 0108 	add.w	r1, r7, #8
 8013a8c:	f107 030c 	add.w	r3, r7, #12
 8013a90:	4618      	mov	r0, r3
 8013a92:	f7fe f995 	bl	8011dc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013a96:	6879      	ldr	r1, [r7, #4]
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	68fa      	ldr	r2, [r7, #12]
 8013a9c:	9202      	str	r2, [sp, #8]
 8013a9e:	9301      	str	r3, [sp, #4]
 8013aa0:	2302      	movs	r3, #2
 8013aa2:	9300      	str	r3, [sp, #0]
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	460a      	mov	r2, r1
 8013aa8:	4910      	ldr	r1, [pc, #64]	; (8013aec <xTimerCreateTimerTask+0x84>)
 8013aaa:	4811      	ldr	r0, [pc, #68]	; (8013af0 <xTimerCreateTimerTask+0x88>)
 8013aac:	f7ff f8b4 	bl	8012c18 <xTaskCreateStatic>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	4a10      	ldr	r2, [pc, #64]	; (8013af4 <xTimerCreateTimerTask+0x8c>)
 8013ab4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013ab6:	4b0f      	ldr	r3, [pc, #60]	; (8013af4 <xTimerCreateTimerTask+0x8c>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d001      	beq.n	8013ac2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013abe:	2301      	movs	r3, #1
 8013ac0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d10a      	bne.n	8013ade <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013acc:	f383 8811 	msr	BASEPRI, r3
 8013ad0:	f3bf 8f6f 	isb	sy
 8013ad4:	f3bf 8f4f 	dsb	sy
 8013ad8:	613b      	str	r3, [r7, #16]
}
 8013ada:	bf00      	nop
 8013adc:	e7fe      	b.n	8013adc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013ade:	697b      	ldr	r3, [r7, #20]
}
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	3718      	adds	r7, #24
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	bd80      	pop	{r7, pc}
 8013ae8:	20008c04 	.word	0x20008c04
 8013aec:	08017d00 	.word	0x08017d00
 8013af0:	08013c2d 	.word	0x08013c2d
 8013af4:	20008c08 	.word	0x20008c08

08013af8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b08a      	sub	sp, #40	; 0x28
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	60f8      	str	r0, [r7, #12]
 8013b00:	60b9      	str	r1, [r7, #8]
 8013b02:	607a      	str	r2, [r7, #4]
 8013b04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013b06:	2300      	movs	r3, #0
 8013b08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d10a      	bne.n	8013b26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8013b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b14:	f383 8811 	msr	BASEPRI, r3
 8013b18:	f3bf 8f6f 	isb	sy
 8013b1c:	f3bf 8f4f 	dsb	sy
 8013b20:	623b      	str	r3, [r7, #32]
}
 8013b22:	bf00      	nop
 8013b24:	e7fe      	b.n	8013b24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013b26:	4b1a      	ldr	r3, [pc, #104]	; (8013b90 <xTimerGenericCommand+0x98>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d02a      	beq.n	8013b84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	2b05      	cmp	r3, #5
 8013b3e:	dc18      	bgt.n	8013b72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013b40:	f7ff feb2 	bl	80138a8 <xTaskGetSchedulerState>
 8013b44:	4603      	mov	r3, r0
 8013b46:	2b02      	cmp	r3, #2
 8013b48:	d109      	bne.n	8013b5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013b4a:	4b11      	ldr	r3, [pc, #68]	; (8013b90 <xTimerGenericCommand+0x98>)
 8013b4c:	6818      	ldr	r0, [r3, #0]
 8013b4e:	f107 0110 	add.w	r1, r7, #16
 8013b52:	2300      	movs	r3, #0
 8013b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b56:	f7fe fba9 	bl	80122ac <xQueueGenericSend>
 8013b5a:	6278      	str	r0, [r7, #36]	; 0x24
 8013b5c:	e012      	b.n	8013b84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013b5e:	4b0c      	ldr	r3, [pc, #48]	; (8013b90 <xTimerGenericCommand+0x98>)
 8013b60:	6818      	ldr	r0, [r3, #0]
 8013b62:	f107 0110 	add.w	r1, r7, #16
 8013b66:	2300      	movs	r3, #0
 8013b68:	2200      	movs	r2, #0
 8013b6a:	f7fe fb9f 	bl	80122ac <xQueueGenericSend>
 8013b6e:	6278      	str	r0, [r7, #36]	; 0x24
 8013b70:	e008      	b.n	8013b84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013b72:	4b07      	ldr	r3, [pc, #28]	; (8013b90 <xTimerGenericCommand+0x98>)
 8013b74:	6818      	ldr	r0, [r3, #0]
 8013b76:	f107 0110 	add.w	r1, r7, #16
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	683a      	ldr	r2, [r7, #0]
 8013b7e:	f7fe fc93 	bl	80124a8 <xQueueGenericSendFromISR>
 8013b82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013b86:	4618      	mov	r0, r3
 8013b88:	3728      	adds	r7, #40	; 0x28
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}
 8013b8e:	bf00      	nop
 8013b90:	20008c04 	.word	0x20008c04

08013b94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b088      	sub	sp, #32
 8013b98:	af02      	add	r7, sp, #8
 8013b9a:	6078      	str	r0, [r7, #4]
 8013b9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b9e:	4b22      	ldr	r3, [pc, #136]	; (8013c28 <prvProcessExpiredTimer+0x94>)
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	68db      	ldr	r3, [r3, #12]
 8013ba4:	68db      	ldr	r3, [r3, #12]
 8013ba6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013ba8:	697b      	ldr	r3, [r7, #20]
 8013baa:	3304      	adds	r3, #4
 8013bac:	4618      	mov	r0, r3
 8013bae:	f7fe f9ab 	bl	8011f08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013bb2:	697b      	ldr	r3, [r7, #20]
 8013bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013bb8:	f003 0304 	and.w	r3, r3, #4
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d022      	beq.n	8013c06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013bc0:	697b      	ldr	r3, [r7, #20]
 8013bc2:	699a      	ldr	r2, [r3, #24]
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	18d1      	adds	r1, r2, r3
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	683a      	ldr	r2, [r7, #0]
 8013bcc:	6978      	ldr	r0, [r7, #20]
 8013bce:	f000 f8d1 	bl	8013d74 <prvInsertTimerInActiveList>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d01f      	beq.n	8013c18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013bd8:	2300      	movs	r3, #0
 8013bda:	9300      	str	r3, [sp, #0]
 8013bdc:	2300      	movs	r3, #0
 8013bde:	687a      	ldr	r2, [r7, #4]
 8013be0:	2100      	movs	r1, #0
 8013be2:	6978      	ldr	r0, [r7, #20]
 8013be4:	f7ff ff88 	bl	8013af8 <xTimerGenericCommand>
 8013be8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013bea:	693b      	ldr	r3, [r7, #16]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d113      	bne.n	8013c18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bf4:	f383 8811 	msr	BASEPRI, r3
 8013bf8:	f3bf 8f6f 	isb	sy
 8013bfc:	f3bf 8f4f 	dsb	sy
 8013c00:	60fb      	str	r3, [r7, #12]
}
 8013c02:	bf00      	nop
 8013c04:	e7fe      	b.n	8013c04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013c06:	697b      	ldr	r3, [r7, #20]
 8013c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c0c:	f023 0301 	bic.w	r3, r3, #1
 8013c10:	b2da      	uxtb	r2, r3
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	6a1b      	ldr	r3, [r3, #32]
 8013c1c:	6978      	ldr	r0, [r7, #20]
 8013c1e:	4798      	blx	r3
}
 8013c20:	bf00      	nop
 8013c22:	3718      	adds	r7, #24
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}
 8013c28:	20008bfc 	.word	0x20008bfc

08013c2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b084      	sub	sp, #16
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013c34:	f107 0308 	add.w	r3, r7, #8
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f000 f857 	bl	8013cec <prvGetNextExpireTime>
 8013c3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	4619      	mov	r1, r3
 8013c44:	68f8      	ldr	r0, [r7, #12]
 8013c46:	f000 f803 	bl	8013c50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013c4a:	f000 f8d5 	bl	8013df8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013c4e:	e7f1      	b.n	8013c34 <prvTimerTask+0x8>

08013c50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b084      	sub	sp, #16
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
 8013c58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013c5a:	f7ff fa39 	bl	80130d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013c5e:	f107 0308 	add.w	r3, r7, #8
 8013c62:	4618      	mov	r0, r3
 8013c64:	f000 f866 	bl	8013d34 <prvSampleTimeNow>
 8013c68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d130      	bne.n	8013cd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013c70:	683b      	ldr	r3, [r7, #0]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d10a      	bne.n	8013c8c <prvProcessTimerOrBlockTask+0x3c>
 8013c76:	687a      	ldr	r2, [r7, #4]
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	429a      	cmp	r2, r3
 8013c7c:	d806      	bhi.n	8013c8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013c7e:	f7ff fa35 	bl	80130ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013c82:	68f9      	ldr	r1, [r7, #12]
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	f7ff ff85 	bl	8013b94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013c8a:	e024      	b.n	8013cd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013c8c:	683b      	ldr	r3, [r7, #0]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d008      	beq.n	8013ca4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013c92:	4b13      	ldr	r3, [pc, #76]	; (8013ce0 <prvProcessTimerOrBlockTask+0x90>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d101      	bne.n	8013ca0 <prvProcessTimerOrBlockTask+0x50>
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	e000      	b.n	8013ca2 <prvProcessTimerOrBlockTask+0x52>
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013ca4:	4b0f      	ldr	r3, [pc, #60]	; (8013ce4 <prvProcessTimerOrBlockTask+0x94>)
 8013ca6:	6818      	ldr	r0, [r3, #0]
 8013ca8:	687a      	ldr	r2, [r7, #4]
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	1ad3      	subs	r3, r2, r3
 8013cae:	683a      	ldr	r2, [r7, #0]
 8013cb0:	4619      	mov	r1, r3
 8013cb2:	f7fe ff7d 	bl	8012bb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013cb6:	f7ff fa19 	bl	80130ec <xTaskResumeAll>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d10a      	bne.n	8013cd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013cc0:	4b09      	ldr	r3, [pc, #36]	; (8013ce8 <prvProcessTimerOrBlockTask+0x98>)
 8013cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cc6:	601a      	str	r2, [r3, #0]
 8013cc8:	f3bf 8f4f 	dsb	sy
 8013ccc:	f3bf 8f6f 	isb	sy
}
 8013cd0:	e001      	b.n	8013cd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013cd2:	f7ff fa0b 	bl	80130ec <xTaskResumeAll>
}
 8013cd6:	bf00      	nop
 8013cd8:	3710      	adds	r7, #16
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	20008c00 	.word	0x20008c00
 8013ce4:	20008c04 	.word	0x20008c04
 8013ce8:	e000ed04 	.word	0xe000ed04

08013cec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013cec:	b480      	push	{r7}
 8013cee:	b085      	sub	sp, #20
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013cf4:	4b0e      	ldr	r3, [pc, #56]	; (8013d30 <prvGetNextExpireTime+0x44>)
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d101      	bne.n	8013d02 <prvGetNextExpireTime+0x16>
 8013cfe:	2201      	movs	r2, #1
 8013d00:	e000      	b.n	8013d04 <prvGetNextExpireTime+0x18>
 8013d02:	2200      	movs	r2, #0
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d105      	bne.n	8013d1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013d10:	4b07      	ldr	r3, [pc, #28]	; (8013d30 <prvGetNextExpireTime+0x44>)
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	68db      	ldr	r3, [r3, #12]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	60fb      	str	r3, [r7, #12]
 8013d1a:	e001      	b.n	8013d20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013d20:	68fb      	ldr	r3, [r7, #12]
}
 8013d22:	4618      	mov	r0, r3
 8013d24:	3714      	adds	r7, #20
 8013d26:	46bd      	mov	sp, r7
 8013d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2c:	4770      	bx	lr
 8013d2e:	bf00      	nop
 8013d30:	20008bfc 	.word	0x20008bfc

08013d34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b084      	sub	sp, #16
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013d3c:	f7ff fa74 	bl	8013228 <xTaskGetTickCount>
 8013d40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013d42:	4b0b      	ldr	r3, [pc, #44]	; (8013d70 <prvSampleTimeNow+0x3c>)
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	68fa      	ldr	r2, [r7, #12]
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d205      	bcs.n	8013d58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013d4c:	f000 f936 	bl	8013fbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2201      	movs	r2, #1
 8013d54:	601a      	str	r2, [r3, #0]
 8013d56:	e002      	b.n	8013d5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013d5e:	4a04      	ldr	r2, [pc, #16]	; (8013d70 <prvSampleTimeNow+0x3c>)
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013d64:	68fb      	ldr	r3, [r7, #12]
}
 8013d66:	4618      	mov	r0, r3
 8013d68:	3710      	adds	r7, #16
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	bd80      	pop	{r7, pc}
 8013d6e:	bf00      	nop
 8013d70:	20008c0c 	.word	0x20008c0c

08013d74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b086      	sub	sp, #24
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	60f8      	str	r0, [r7, #12]
 8013d7c:	60b9      	str	r1, [r7, #8]
 8013d7e:	607a      	str	r2, [r7, #4]
 8013d80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013d82:	2300      	movs	r3, #0
 8013d84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	68ba      	ldr	r2, [r7, #8]
 8013d8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	68fa      	ldr	r2, [r7, #12]
 8013d90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013d92:	68ba      	ldr	r2, [r7, #8]
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	429a      	cmp	r2, r3
 8013d98:	d812      	bhi.n	8013dc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d9a:	687a      	ldr	r2, [r7, #4]
 8013d9c:	683b      	ldr	r3, [r7, #0]
 8013d9e:	1ad2      	subs	r2, r2, r3
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	699b      	ldr	r3, [r3, #24]
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d302      	bcc.n	8013dae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013da8:	2301      	movs	r3, #1
 8013daa:	617b      	str	r3, [r7, #20]
 8013dac:	e01b      	b.n	8013de6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013dae:	4b10      	ldr	r3, [pc, #64]	; (8013df0 <prvInsertTimerInActiveList+0x7c>)
 8013db0:	681a      	ldr	r2, [r3, #0]
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	3304      	adds	r3, #4
 8013db6:	4619      	mov	r1, r3
 8013db8:	4610      	mov	r0, r2
 8013dba:	f7fe f86c 	bl	8011e96 <vListInsert>
 8013dbe:	e012      	b.n	8013de6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013dc0:	687a      	ldr	r2, [r7, #4]
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d206      	bcs.n	8013dd6 <prvInsertTimerInActiveList+0x62>
 8013dc8:	68ba      	ldr	r2, [r7, #8]
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	d302      	bcc.n	8013dd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	617b      	str	r3, [r7, #20]
 8013dd4:	e007      	b.n	8013de6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013dd6:	4b07      	ldr	r3, [pc, #28]	; (8013df4 <prvInsertTimerInActiveList+0x80>)
 8013dd8:	681a      	ldr	r2, [r3, #0]
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	3304      	adds	r3, #4
 8013dde:	4619      	mov	r1, r3
 8013de0:	4610      	mov	r0, r2
 8013de2:	f7fe f858 	bl	8011e96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013de6:	697b      	ldr	r3, [r7, #20]
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	3718      	adds	r7, #24
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bd80      	pop	{r7, pc}
 8013df0:	20008c00 	.word	0x20008c00
 8013df4:	20008bfc 	.word	0x20008bfc

08013df8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b08e      	sub	sp, #56	; 0x38
 8013dfc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013dfe:	e0ca      	b.n	8013f96 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	da18      	bge.n	8013e38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013e06:	1d3b      	adds	r3, r7, #4
 8013e08:	3304      	adds	r3, #4
 8013e0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d10a      	bne.n	8013e28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e16:	f383 8811 	msr	BASEPRI, r3
 8013e1a:	f3bf 8f6f 	isb	sy
 8013e1e:	f3bf 8f4f 	dsb	sy
 8013e22:	61fb      	str	r3, [r7, #28]
}
 8013e24:	bf00      	nop
 8013e26:	e7fe      	b.n	8013e26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e2e:	6850      	ldr	r0, [r2, #4]
 8013e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e32:	6892      	ldr	r2, [r2, #8]
 8013e34:	4611      	mov	r1, r2
 8013e36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	f2c0 80aa 	blt.w	8013f94 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e46:	695b      	ldr	r3, [r3, #20]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d004      	beq.n	8013e56 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e4e:	3304      	adds	r3, #4
 8013e50:	4618      	mov	r0, r3
 8013e52:	f7fe f859 	bl	8011f08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013e56:	463b      	mov	r3, r7
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7ff ff6b 	bl	8013d34 <prvSampleTimeNow>
 8013e5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	2b09      	cmp	r3, #9
 8013e64:	f200 8097 	bhi.w	8013f96 <prvProcessReceivedCommands+0x19e>
 8013e68:	a201      	add	r2, pc, #4	; (adr r2, 8013e70 <prvProcessReceivedCommands+0x78>)
 8013e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e6e:	bf00      	nop
 8013e70:	08013e99 	.word	0x08013e99
 8013e74:	08013e99 	.word	0x08013e99
 8013e78:	08013e99 	.word	0x08013e99
 8013e7c:	08013f0d 	.word	0x08013f0d
 8013e80:	08013f21 	.word	0x08013f21
 8013e84:	08013f6b 	.word	0x08013f6b
 8013e88:	08013e99 	.word	0x08013e99
 8013e8c:	08013e99 	.word	0x08013e99
 8013e90:	08013f0d 	.word	0x08013f0d
 8013e94:	08013f21 	.word	0x08013f21
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013e9e:	f043 0301 	orr.w	r3, r3, #1
 8013ea2:	b2da      	uxtb	r2, r3
 8013ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013eaa:	68ba      	ldr	r2, [r7, #8]
 8013eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eae:	699b      	ldr	r3, [r3, #24]
 8013eb0:	18d1      	adds	r1, r2, r3
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013eb8:	f7ff ff5c 	bl	8013d74 <prvInsertTimerInActiveList>
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d069      	beq.n	8013f96 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ec4:	6a1b      	ldr	r3, [r3, #32]
 8013ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ec8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ed0:	f003 0304 	and.w	r3, r3, #4
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d05e      	beq.n	8013f96 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013ed8:	68ba      	ldr	r2, [r7, #8]
 8013eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013edc:	699b      	ldr	r3, [r3, #24]
 8013ede:	441a      	add	r2, r3
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	9300      	str	r3, [sp, #0]
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	2100      	movs	r1, #0
 8013ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013eea:	f7ff fe05 	bl	8013af8 <xTimerGenericCommand>
 8013eee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013ef0:	6a3b      	ldr	r3, [r7, #32]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d14f      	bne.n	8013f96 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013efa:	f383 8811 	msr	BASEPRI, r3
 8013efe:	f3bf 8f6f 	isb	sy
 8013f02:	f3bf 8f4f 	dsb	sy
 8013f06:	61bb      	str	r3, [r7, #24]
}
 8013f08:	bf00      	nop
 8013f0a:	e7fe      	b.n	8013f0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f12:	f023 0301 	bic.w	r3, r3, #1
 8013f16:	b2da      	uxtb	r2, r3
 8013f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013f1e:	e03a      	b.n	8013f96 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f26:	f043 0301 	orr.w	r3, r3, #1
 8013f2a:	b2da      	uxtb	r2, r3
 8013f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013f32:	68ba      	ldr	r2, [r7, #8]
 8013f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f36:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f3a:	699b      	ldr	r3, [r3, #24]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d10a      	bne.n	8013f56 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f44:	f383 8811 	msr	BASEPRI, r3
 8013f48:	f3bf 8f6f 	isb	sy
 8013f4c:	f3bf 8f4f 	dsb	sy
 8013f50:	617b      	str	r3, [r7, #20]
}
 8013f52:	bf00      	nop
 8013f54:	e7fe      	b.n	8013f54 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f58:	699a      	ldr	r2, [r3, #24]
 8013f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f5c:	18d1      	adds	r1, r2, r3
 8013f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f64:	f7ff ff06 	bl	8013d74 <prvInsertTimerInActiveList>
					break;
 8013f68:	e015      	b.n	8013f96 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f70:	f003 0302 	and.w	r3, r3, #2
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d103      	bne.n	8013f80 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f7a:	f000 fbb9 	bl	80146f0 <vPortFree>
 8013f7e:	e00a      	b.n	8013f96 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f86:	f023 0301 	bic.w	r3, r3, #1
 8013f8a:	b2da      	uxtb	r2, r3
 8013f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013f92:	e000      	b.n	8013f96 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013f94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013f96:	4b08      	ldr	r3, [pc, #32]	; (8013fb8 <prvProcessReceivedCommands+0x1c0>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	1d39      	adds	r1, r7, #4
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f7fe fb1e 	bl	80125e0 <xQueueReceive>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	f47f af2a 	bne.w	8013e00 <prvProcessReceivedCommands+0x8>
	}
}
 8013fac:	bf00      	nop
 8013fae:	bf00      	nop
 8013fb0:	3730      	adds	r7, #48	; 0x30
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
 8013fb6:	bf00      	nop
 8013fb8:	20008c04 	.word	0x20008c04

08013fbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b088      	sub	sp, #32
 8013fc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013fc2:	e048      	b.n	8014056 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013fc4:	4b2d      	ldr	r3, [pc, #180]	; (801407c <prvSwitchTimerLists+0xc0>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	68db      	ldr	r3, [r3, #12]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013fce:	4b2b      	ldr	r3, [pc, #172]	; (801407c <prvSwitchTimerLists+0xc0>)
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	68db      	ldr	r3, [r3, #12]
 8013fd4:	68db      	ldr	r3, [r3, #12]
 8013fd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	3304      	adds	r3, #4
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f7fd ff93 	bl	8011f08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	6a1b      	ldr	r3, [r3, #32]
 8013fe6:	68f8      	ldr	r0, [r7, #12]
 8013fe8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ff0:	f003 0304 	and.w	r3, r3, #4
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d02e      	beq.n	8014056 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	699b      	ldr	r3, [r3, #24]
 8013ffc:	693a      	ldr	r2, [r7, #16]
 8013ffe:	4413      	add	r3, r2
 8014000:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014002:	68ba      	ldr	r2, [r7, #8]
 8014004:	693b      	ldr	r3, [r7, #16]
 8014006:	429a      	cmp	r2, r3
 8014008:	d90e      	bls.n	8014028 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	68ba      	ldr	r2, [r7, #8]
 801400e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	68fa      	ldr	r2, [r7, #12]
 8014014:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014016:	4b19      	ldr	r3, [pc, #100]	; (801407c <prvSwitchTimerLists+0xc0>)
 8014018:	681a      	ldr	r2, [r3, #0]
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	3304      	adds	r3, #4
 801401e:	4619      	mov	r1, r3
 8014020:	4610      	mov	r0, r2
 8014022:	f7fd ff38 	bl	8011e96 <vListInsert>
 8014026:	e016      	b.n	8014056 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014028:	2300      	movs	r3, #0
 801402a:	9300      	str	r3, [sp, #0]
 801402c:	2300      	movs	r3, #0
 801402e:	693a      	ldr	r2, [r7, #16]
 8014030:	2100      	movs	r1, #0
 8014032:	68f8      	ldr	r0, [r7, #12]
 8014034:	f7ff fd60 	bl	8013af8 <xTimerGenericCommand>
 8014038:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d10a      	bne.n	8014056 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8014040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014044:	f383 8811 	msr	BASEPRI, r3
 8014048:	f3bf 8f6f 	isb	sy
 801404c:	f3bf 8f4f 	dsb	sy
 8014050:	603b      	str	r3, [r7, #0]
}
 8014052:	bf00      	nop
 8014054:	e7fe      	b.n	8014054 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014056:	4b09      	ldr	r3, [pc, #36]	; (801407c <prvSwitchTimerLists+0xc0>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d1b1      	bne.n	8013fc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014060:	4b06      	ldr	r3, [pc, #24]	; (801407c <prvSwitchTimerLists+0xc0>)
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014066:	4b06      	ldr	r3, [pc, #24]	; (8014080 <prvSwitchTimerLists+0xc4>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	4a04      	ldr	r2, [pc, #16]	; (801407c <prvSwitchTimerLists+0xc0>)
 801406c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801406e:	4a04      	ldr	r2, [pc, #16]	; (8014080 <prvSwitchTimerLists+0xc4>)
 8014070:	697b      	ldr	r3, [r7, #20]
 8014072:	6013      	str	r3, [r2, #0]
}
 8014074:	bf00      	nop
 8014076:	3718      	adds	r7, #24
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}
 801407c:	20008bfc 	.word	0x20008bfc
 8014080:	20008c00 	.word	0x20008c00

08014084 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b082      	sub	sp, #8
 8014088:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801408a:	f000 f96b 	bl	8014364 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801408e:	4b15      	ldr	r3, [pc, #84]	; (80140e4 <prvCheckForValidListAndQueue+0x60>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d120      	bne.n	80140d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014096:	4814      	ldr	r0, [pc, #80]	; (80140e8 <prvCheckForValidListAndQueue+0x64>)
 8014098:	f7fd feac 	bl	8011df4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801409c:	4813      	ldr	r0, [pc, #76]	; (80140ec <prvCheckForValidListAndQueue+0x68>)
 801409e:	f7fd fea9 	bl	8011df4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80140a2:	4b13      	ldr	r3, [pc, #76]	; (80140f0 <prvCheckForValidListAndQueue+0x6c>)
 80140a4:	4a10      	ldr	r2, [pc, #64]	; (80140e8 <prvCheckForValidListAndQueue+0x64>)
 80140a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80140a8:	4b12      	ldr	r3, [pc, #72]	; (80140f4 <prvCheckForValidListAndQueue+0x70>)
 80140aa:	4a10      	ldr	r2, [pc, #64]	; (80140ec <prvCheckForValidListAndQueue+0x68>)
 80140ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80140ae:	2300      	movs	r3, #0
 80140b0:	9300      	str	r3, [sp, #0]
 80140b2:	4b11      	ldr	r3, [pc, #68]	; (80140f8 <prvCheckForValidListAndQueue+0x74>)
 80140b4:	4a11      	ldr	r2, [pc, #68]	; (80140fc <prvCheckForValidListAndQueue+0x78>)
 80140b6:	2110      	movs	r1, #16
 80140b8:	200a      	movs	r0, #10
 80140ba:	f7fd ffb7 	bl	801202c <xQueueGenericCreateStatic>
 80140be:	4603      	mov	r3, r0
 80140c0:	4a08      	ldr	r2, [pc, #32]	; (80140e4 <prvCheckForValidListAndQueue+0x60>)
 80140c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80140c4:	4b07      	ldr	r3, [pc, #28]	; (80140e4 <prvCheckForValidListAndQueue+0x60>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d005      	beq.n	80140d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80140cc:	4b05      	ldr	r3, [pc, #20]	; (80140e4 <prvCheckForValidListAndQueue+0x60>)
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	490b      	ldr	r1, [pc, #44]	; (8014100 <prvCheckForValidListAndQueue+0x7c>)
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7fe fd18 	bl	8012b08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80140d8:	f000 f974 	bl	80143c4 <vPortExitCritical>
}
 80140dc:	bf00      	nop
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}
 80140e2:	bf00      	nop
 80140e4:	20008c04 	.word	0x20008c04
 80140e8:	20008bd4 	.word	0x20008bd4
 80140ec:	20008be8 	.word	0x20008be8
 80140f0:	20008bfc 	.word	0x20008bfc
 80140f4:	20008c00 	.word	0x20008c00
 80140f8:	20008cb0 	.word	0x20008cb0
 80140fc:	20008c10 	.word	0x20008c10
 8014100:	08017d08 	.word	0x08017d08

08014104 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014104:	b480      	push	{r7}
 8014106:	b085      	sub	sp, #20
 8014108:	af00      	add	r7, sp, #0
 801410a:	60f8      	str	r0, [r7, #12]
 801410c:	60b9      	str	r1, [r7, #8]
 801410e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	3b04      	subs	r3, #4
 8014114:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801411c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	3b04      	subs	r3, #4
 8014122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	f023 0201 	bic.w	r2, r3, #1
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	3b04      	subs	r3, #4
 8014132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014134:	4a0c      	ldr	r2, [pc, #48]	; (8014168 <pxPortInitialiseStack+0x64>)
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	3b14      	subs	r3, #20
 801413e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014140:	687a      	ldr	r2, [r7, #4]
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	3b04      	subs	r3, #4
 801414a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	f06f 0202 	mvn.w	r2, #2
 8014152:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	3b20      	subs	r3, #32
 8014158:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801415a:	68fb      	ldr	r3, [r7, #12]
}
 801415c:	4618      	mov	r0, r3
 801415e:	3714      	adds	r7, #20
 8014160:	46bd      	mov	sp, r7
 8014162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014166:	4770      	bx	lr
 8014168:	0801416d 	.word	0x0801416d

0801416c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801416c:	b480      	push	{r7}
 801416e:	b085      	sub	sp, #20
 8014170:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014172:	2300      	movs	r3, #0
 8014174:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014176:	4b12      	ldr	r3, [pc, #72]	; (80141c0 <prvTaskExitError+0x54>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801417e:	d00a      	beq.n	8014196 <prvTaskExitError+0x2a>
	__asm volatile
 8014180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014184:	f383 8811 	msr	BASEPRI, r3
 8014188:	f3bf 8f6f 	isb	sy
 801418c:	f3bf 8f4f 	dsb	sy
 8014190:	60fb      	str	r3, [r7, #12]
}
 8014192:	bf00      	nop
 8014194:	e7fe      	b.n	8014194 <prvTaskExitError+0x28>
	__asm volatile
 8014196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801419a:	f383 8811 	msr	BASEPRI, r3
 801419e:	f3bf 8f6f 	isb	sy
 80141a2:	f3bf 8f4f 	dsb	sy
 80141a6:	60bb      	str	r3, [r7, #8]
}
 80141a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80141aa:	bf00      	nop
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d0fc      	beq.n	80141ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80141b2:	bf00      	nop
 80141b4:	bf00      	nop
 80141b6:	3714      	adds	r7, #20
 80141b8:	46bd      	mov	sp, r7
 80141ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141be:	4770      	bx	lr
 80141c0:	200000c8 	.word	0x200000c8
	...

080141d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80141d0:	4b07      	ldr	r3, [pc, #28]	; (80141f0 <pxCurrentTCBConst2>)
 80141d2:	6819      	ldr	r1, [r3, #0]
 80141d4:	6808      	ldr	r0, [r1, #0]
 80141d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141da:	f380 8809 	msr	PSP, r0
 80141de:	f3bf 8f6f 	isb	sy
 80141e2:	f04f 0000 	mov.w	r0, #0
 80141e6:	f380 8811 	msr	BASEPRI, r0
 80141ea:	4770      	bx	lr
 80141ec:	f3af 8000 	nop.w

080141f0 <pxCurrentTCBConst2>:
 80141f0:	200086d4 	.word	0x200086d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80141f4:	bf00      	nop
 80141f6:	bf00      	nop

080141f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80141f8:	4808      	ldr	r0, [pc, #32]	; (801421c <prvPortStartFirstTask+0x24>)
 80141fa:	6800      	ldr	r0, [r0, #0]
 80141fc:	6800      	ldr	r0, [r0, #0]
 80141fe:	f380 8808 	msr	MSP, r0
 8014202:	f04f 0000 	mov.w	r0, #0
 8014206:	f380 8814 	msr	CONTROL, r0
 801420a:	b662      	cpsie	i
 801420c:	b661      	cpsie	f
 801420e:	f3bf 8f4f 	dsb	sy
 8014212:	f3bf 8f6f 	isb	sy
 8014216:	df00      	svc	0
 8014218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801421a:	bf00      	nop
 801421c:	e000ed08 	.word	0xe000ed08

08014220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014220:	b580      	push	{r7, lr}
 8014222:	b086      	sub	sp, #24
 8014224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014226:	4b46      	ldr	r3, [pc, #280]	; (8014340 <xPortStartScheduler+0x120>)
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	4a46      	ldr	r2, [pc, #280]	; (8014344 <xPortStartScheduler+0x124>)
 801422c:	4293      	cmp	r3, r2
 801422e:	d10a      	bne.n	8014246 <xPortStartScheduler+0x26>
	__asm volatile
 8014230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014234:	f383 8811 	msr	BASEPRI, r3
 8014238:	f3bf 8f6f 	isb	sy
 801423c:	f3bf 8f4f 	dsb	sy
 8014240:	613b      	str	r3, [r7, #16]
}
 8014242:	bf00      	nop
 8014244:	e7fe      	b.n	8014244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014246:	4b3e      	ldr	r3, [pc, #248]	; (8014340 <xPortStartScheduler+0x120>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	4a3f      	ldr	r2, [pc, #252]	; (8014348 <xPortStartScheduler+0x128>)
 801424c:	4293      	cmp	r3, r2
 801424e:	d10a      	bne.n	8014266 <xPortStartScheduler+0x46>
	__asm volatile
 8014250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014254:	f383 8811 	msr	BASEPRI, r3
 8014258:	f3bf 8f6f 	isb	sy
 801425c:	f3bf 8f4f 	dsb	sy
 8014260:	60fb      	str	r3, [r7, #12]
}
 8014262:	bf00      	nop
 8014264:	e7fe      	b.n	8014264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014266:	4b39      	ldr	r3, [pc, #228]	; (801434c <xPortStartScheduler+0x12c>)
 8014268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801426a:	697b      	ldr	r3, [r7, #20]
 801426c:	781b      	ldrb	r3, [r3, #0]
 801426e:	b2db      	uxtb	r3, r3
 8014270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	22ff      	movs	r2, #255	; 0xff
 8014276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014278:	697b      	ldr	r3, [r7, #20]
 801427a:	781b      	ldrb	r3, [r3, #0]
 801427c:	b2db      	uxtb	r3, r3
 801427e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014280:	78fb      	ldrb	r3, [r7, #3]
 8014282:	b2db      	uxtb	r3, r3
 8014284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014288:	b2da      	uxtb	r2, r3
 801428a:	4b31      	ldr	r3, [pc, #196]	; (8014350 <xPortStartScheduler+0x130>)
 801428c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801428e:	4b31      	ldr	r3, [pc, #196]	; (8014354 <xPortStartScheduler+0x134>)
 8014290:	2207      	movs	r2, #7
 8014292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014294:	e009      	b.n	80142aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014296:	4b2f      	ldr	r3, [pc, #188]	; (8014354 <xPortStartScheduler+0x134>)
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	3b01      	subs	r3, #1
 801429c:	4a2d      	ldr	r2, [pc, #180]	; (8014354 <xPortStartScheduler+0x134>)
 801429e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80142a0:	78fb      	ldrb	r3, [r7, #3]
 80142a2:	b2db      	uxtb	r3, r3
 80142a4:	005b      	lsls	r3, r3, #1
 80142a6:	b2db      	uxtb	r3, r3
 80142a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80142aa:	78fb      	ldrb	r3, [r7, #3]
 80142ac:	b2db      	uxtb	r3, r3
 80142ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80142b2:	2b80      	cmp	r3, #128	; 0x80
 80142b4:	d0ef      	beq.n	8014296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80142b6:	4b27      	ldr	r3, [pc, #156]	; (8014354 <xPortStartScheduler+0x134>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	f1c3 0307 	rsb	r3, r3, #7
 80142be:	2b04      	cmp	r3, #4
 80142c0:	d00a      	beq.n	80142d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80142c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142c6:	f383 8811 	msr	BASEPRI, r3
 80142ca:	f3bf 8f6f 	isb	sy
 80142ce:	f3bf 8f4f 	dsb	sy
 80142d2:	60bb      	str	r3, [r7, #8]
}
 80142d4:	bf00      	nop
 80142d6:	e7fe      	b.n	80142d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80142d8:	4b1e      	ldr	r3, [pc, #120]	; (8014354 <xPortStartScheduler+0x134>)
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	021b      	lsls	r3, r3, #8
 80142de:	4a1d      	ldr	r2, [pc, #116]	; (8014354 <xPortStartScheduler+0x134>)
 80142e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80142e2:	4b1c      	ldr	r3, [pc, #112]	; (8014354 <xPortStartScheduler+0x134>)
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80142ea:	4a1a      	ldr	r2, [pc, #104]	; (8014354 <xPortStartScheduler+0x134>)
 80142ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	b2da      	uxtb	r2, r3
 80142f2:	697b      	ldr	r3, [r7, #20]
 80142f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80142f6:	4b18      	ldr	r3, [pc, #96]	; (8014358 <xPortStartScheduler+0x138>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	4a17      	ldr	r2, [pc, #92]	; (8014358 <xPortStartScheduler+0x138>)
 80142fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014302:	4b15      	ldr	r3, [pc, #84]	; (8014358 <xPortStartScheduler+0x138>)
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	4a14      	ldr	r2, [pc, #80]	; (8014358 <xPortStartScheduler+0x138>)
 8014308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801430c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801430e:	f000 f8dd 	bl	80144cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014312:	4b12      	ldr	r3, [pc, #72]	; (801435c <xPortStartScheduler+0x13c>)
 8014314:	2200      	movs	r2, #0
 8014316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014318:	f000 f8fc 	bl	8014514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801431c:	4b10      	ldr	r3, [pc, #64]	; (8014360 <xPortStartScheduler+0x140>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	4a0f      	ldr	r2, [pc, #60]	; (8014360 <xPortStartScheduler+0x140>)
 8014322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014328:	f7ff ff66 	bl	80141f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801432c:	f7ff f846 	bl	80133bc <vTaskSwitchContext>
	prvTaskExitError();
 8014330:	f7ff ff1c 	bl	801416c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014334:	2300      	movs	r3, #0
}
 8014336:	4618      	mov	r0, r3
 8014338:	3718      	adds	r7, #24
 801433a:	46bd      	mov	sp, r7
 801433c:	bd80      	pop	{r7, pc}
 801433e:	bf00      	nop
 8014340:	e000ed00 	.word	0xe000ed00
 8014344:	410fc271 	.word	0x410fc271
 8014348:	410fc270 	.word	0x410fc270
 801434c:	e000e400 	.word	0xe000e400
 8014350:	20008d00 	.word	0x20008d00
 8014354:	20008d04 	.word	0x20008d04
 8014358:	e000ed20 	.word	0xe000ed20
 801435c:	200000c8 	.word	0x200000c8
 8014360:	e000ef34 	.word	0xe000ef34

08014364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014364:	b480      	push	{r7}
 8014366:	b083      	sub	sp, #12
 8014368:	af00      	add	r7, sp, #0
	__asm volatile
 801436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801436e:	f383 8811 	msr	BASEPRI, r3
 8014372:	f3bf 8f6f 	isb	sy
 8014376:	f3bf 8f4f 	dsb	sy
 801437a:	607b      	str	r3, [r7, #4]
}
 801437c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801437e:	4b0f      	ldr	r3, [pc, #60]	; (80143bc <vPortEnterCritical+0x58>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	3301      	adds	r3, #1
 8014384:	4a0d      	ldr	r2, [pc, #52]	; (80143bc <vPortEnterCritical+0x58>)
 8014386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014388:	4b0c      	ldr	r3, [pc, #48]	; (80143bc <vPortEnterCritical+0x58>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	2b01      	cmp	r3, #1
 801438e:	d10f      	bne.n	80143b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014390:	4b0b      	ldr	r3, [pc, #44]	; (80143c0 <vPortEnterCritical+0x5c>)
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	b2db      	uxtb	r3, r3
 8014396:	2b00      	cmp	r3, #0
 8014398:	d00a      	beq.n	80143b0 <vPortEnterCritical+0x4c>
	__asm volatile
 801439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801439e:	f383 8811 	msr	BASEPRI, r3
 80143a2:	f3bf 8f6f 	isb	sy
 80143a6:	f3bf 8f4f 	dsb	sy
 80143aa:	603b      	str	r3, [r7, #0]
}
 80143ac:	bf00      	nop
 80143ae:	e7fe      	b.n	80143ae <vPortEnterCritical+0x4a>
	}
}
 80143b0:	bf00      	nop
 80143b2:	370c      	adds	r7, #12
 80143b4:	46bd      	mov	sp, r7
 80143b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ba:	4770      	bx	lr
 80143bc:	200000c8 	.word	0x200000c8
 80143c0:	e000ed04 	.word	0xe000ed04

080143c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80143c4:	b480      	push	{r7}
 80143c6:	b083      	sub	sp, #12
 80143c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80143ca:	4b12      	ldr	r3, [pc, #72]	; (8014414 <vPortExitCritical+0x50>)
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d10a      	bne.n	80143e8 <vPortExitCritical+0x24>
	__asm volatile
 80143d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143d6:	f383 8811 	msr	BASEPRI, r3
 80143da:	f3bf 8f6f 	isb	sy
 80143de:	f3bf 8f4f 	dsb	sy
 80143e2:	607b      	str	r3, [r7, #4]
}
 80143e4:	bf00      	nop
 80143e6:	e7fe      	b.n	80143e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80143e8:	4b0a      	ldr	r3, [pc, #40]	; (8014414 <vPortExitCritical+0x50>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	3b01      	subs	r3, #1
 80143ee:	4a09      	ldr	r2, [pc, #36]	; (8014414 <vPortExitCritical+0x50>)
 80143f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80143f2:	4b08      	ldr	r3, [pc, #32]	; (8014414 <vPortExitCritical+0x50>)
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d105      	bne.n	8014406 <vPortExitCritical+0x42>
 80143fa:	2300      	movs	r3, #0
 80143fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80143fe:	683b      	ldr	r3, [r7, #0]
 8014400:	f383 8811 	msr	BASEPRI, r3
}
 8014404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014406:	bf00      	nop
 8014408:	370c      	adds	r7, #12
 801440a:	46bd      	mov	sp, r7
 801440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014410:	4770      	bx	lr
 8014412:	bf00      	nop
 8014414:	200000c8 	.word	0x200000c8
	...

08014420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014420:	f3ef 8009 	mrs	r0, PSP
 8014424:	f3bf 8f6f 	isb	sy
 8014428:	4b15      	ldr	r3, [pc, #84]	; (8014480 <pxCurrentTCBConst>)
 801442a:	681a      	ldr	r2, [r3, #0]
 801442c:	f01e 0f10 	tst.w	lr, #16
 8014430:	bf08      	it	eq
 8014432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801443a:	6010      	str	r0, [r2, #0]
 801443c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014440:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014444:	f380 8811 	msr	BASEPRI, r0
 8014448:	f3bf 8f4f 	dsb	sy
 801444c:	f3bf 8f6f 	isb	sy
 8014450:	f7fe ffb4 	bl	80133bc <vTaskSwitchContext>
 8014454:	f04f 0000 	mov.w	r0, #0
 8014458:	f380 8811 	msr	BASEPRI, r0
 801445c:	bc09      	pop	{r0, r3}
 801445e:	6819      	ldr	r1, [r3, #0]
 8014460:	6808      	ldr	r0, [r1, #0]
 8014462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014466:	f01e 0f10 	tst.w	lr, #16
 801446a:	bf08      	it	eq
 801446c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014470:	f380 8809 	msr	PSP, r0
 8014474:	f3bf 8f6f 	isb	sy
 8014478:	4770      	bx	lr
 801447a:	bf00      	nop
 801447c:	f3af 8000 	nop.w

08014480 <pxCurrentTCBConst>:
 8014480:	200086d4 	.word	0x200086d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014484:	bf00      	nop
 8014486:	bf00      	nop

08014488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b082      	sub	sp, #8
 801448c:	af00      	add	r7, sp, #0
	__asm volatile
 801448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014492:	f383 8811 	msr	BASEPRI, r3
 8014496:	f3bf 8f6f 	isb	sy
 801449a:	f3bf 8f4f 	dsb	sy
 801449e:	607b      	str	r3, [r7, #4]
}
 80144a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80144a2:	f7fe fed1 	bl	8013248 <xTaskIncrementTick>
 80144a6:	4603      	mov	r3, r0
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d003      	beq.n	80144b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80144ac:	4b06      	ldr	r3, [pc, #24]	; (80144c8 <xPortSysTickHandler+0x40>)
 80144ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144b2:	601a      	str	r2, [r3, #0]
 80144b4:	2300      	movs	r3, #0
 80144b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	f383 8811 	msr	BASEPRI, r3
}
 80144be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80144c0:	bf00      	nop
 80144c2:	3708      	adds	r7, #8
 80144c4:	46bd      	mov	sp, r7
 80144c6:	bd80      	pop	{r7, pc}
 80144c8:	e000ed04 	.word	0xe000ed04

080144cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80144cc:	b480      	push	{r7}
 80144ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80144d0:	4b0b      	ldr	r3, [pc, #44]	; (8014500 <vPortSetupTimerInterrupt+0x34>)
 80144d2:	2200      	movs	r2, #0
 80144d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80144d6:	4b0b      	ldr	r3, [pc, #44]	; (8014504 <vPortSetupTimerInterrupt+0x38>)
 80144d8:	2200      	movs	r2, #0
 80144da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80144dc:	4b0a      	ldr	r3, [pc, #40]	; (8014508 <vPortSetupTimerInterrupt+0x3c>)
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	4a0a      	ldr	r2, [pc, #40]	; (801450c <vPortSetupTimerInterrupt+0x40>)
 80144e2:	fba2 2303 	umull	r2, r3, r2, r3
 80144e6:	099b      	lsrs	r3, r3, #6
 80144e8:	4a09      	ldr	r2, [pc, #36]	; (8014510 <vPortSetupTimerInterrupt+0x44>)
 80144ea:	3b01      	subs	r3, #1
 80144ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80144ee:	4b04      	ldr	r3, [pc, #16]	; (8014500 <vPortSetupTimerInterrupt+0x34>)
 80144f0:	2207      	movs	r2, #7
 80144f2:	601a      	str	r2, [r3, #0]
}
 80144f4:	bf00      	nop
 80144f6:	46bd      	mov	sp, r7
 80144f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fc:	4770      	bx	lr
 80144fe:	bf00      	nop
 8014500:	e000e010 	.word	0xe000e010
 8014504:	e000e018 	.word	0xe000e018
 8014508:	200000ac 	.word	0x200000ac
 801450c:	10624dd3 	.word	0x10624dd3
 8014510:	e000e014 	.word	0xe000e014

08014514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014524 <vPortEnableVFP+0x10>
 8014518:	6801      	ldr	r1, [r0, #0]
 801451a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801451e:	6001      	str	r1, [r0, #0]
 8014520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014522:	bf00      	nop
 8014524:	e000ed88 	.word	0xe000ed88

08014528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014528:	b480      	push	{r7}
 801452a:	b085      	sub	sp, #20
 801452c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801452e:	f3ef 8305 	mrs	r3, IPSR
 8014532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	2b0f      	cmp	r3, #15
 8014538:	d914      	bls.n	8014564 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801453a:	4a17      	ldr	r2, [pc, #92]	; (8014598 <vPortValidateInterruptPriority+0x70>)
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	4413      	add	r3, r2
 8014540:	781b      	ldrb	r3, [r3, #0]
 8014542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014544:	4b15      	ldr	r3, [pc, #84]	; (801459c <vPortValidateInterruptPriority+0x74>)
 8014546:	781b      	ldrb	r3, [r3, #0]
 8014548:	7afa      	ldrb	r2, [r7, #11]
 801454a:	429a      	cmp	r2, r3
 801454c:	d20a      	bcs.n	8014564 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014552:	f383 8811 	msr	BASEPRI, r3
 8014556:	f3bf 8f6f 	isb	sy
 801455a:	f3bf 8f4f 	dsb	sy
 801455e:	607b      	str	r3, [r7, #4]
}
 8014560:	bf00      	nop
 8014562:	e7fe      	b.n	8014562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014564:	4b0e      	ldr	r3, [pc, #56]	; (80145a0 <vPortValidateInterruptPriority+0x78>)
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801456c:	4b0d      	ldr	r3, [pc, #52]	; (80145a4 <vPortValidateInterruptPriority+0x7c>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	429a      	cmp	r2, r3
 8014572:	d90a      	bls.n	801458a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014578:	f383 8811 	msr	BASEPRI, r3
 801457c:	f3bf 8f6f 	isb	sy
 8014580:	f3bf 8f4f 	dsb	sy
 8014584:	603b      	str	r3, [r7, #0]
}
 8014586:	bf00      	nop
 8014588:	e7fe      	b.n	8014588 <vPortValidateInterruptPriority+0x60>
	}
 801458a:	bf00      	nop
 801458c:	3714      	adds	r7, #20
 801458e:	46bd      	mov	sp, r7
 8014590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014594:	4770      	bx	lr
 8014596:	bf00      	nop
 8014598:	e000e3f0 	.word	0xe000e3f0
 801459c:	20008d00 	.word	0x20008d00
 80145a0:	e000ed0c 	.word	0xe000ed0c
 80145a4:	20008d04 	.word	0x20008d04

080145a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b088      	sub	sp, #32
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80145b0:	2300      	movs	r3, #0
 80145b2:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 80145b4:	4b48      	ldr	r3, [pc, #288]	; (80146d8 <pvPortMalloc+0x130>)
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d10a      	bne.n	80145d2 <pvPortMalloc+0x2a>
	__asm volatile
 80145bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145c0:	f383 8811 	msr	BASEPRI, r3
 80145c4:	f3bf 8f6f 	isb	sy
 80145c8:	f3bf 8f4f 	dsb	sy
 80145cc:	60fb      	str	r3, [r7, #12]
}
 80145ce:	bf00      	nop
 80145d0:	e7fe      	b.n	80145d0 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 80145d2:	f7fe fd7d 	bl	80130d0 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80145d6:	4b41      	ldr	r3, [pc, #260]	; (80146dc <pvPortMalloc+0x134>)
 80145d8:	681a      	ldr	r2, [r3, #0]
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	4013      	ands	r3, r2
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d172      	bne.n	80146c8 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d00d      	beq.n	8014604 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 80145e8:	2208      	movs	r2, #8
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	4413      	add	r3, r2
 80145ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	f003 0307 	and.w	r3, r3, #7
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d004      	beq.n	8014604 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	f023 0307 	bic.w	r3, r3, #7
 8014600:	3308      	adds	r3, #8
 8014602:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d05e      	beq.n	80146c8 <pvPortMalloc+0x120>
 801460a:	4b35      	ldr	r3, [pc, #212]	; (80146e0 <pvPortMalloc+0x138>)
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	687a      	ldr	r2, [r7, #4]
 8014610:	429a      	cmp	r2, r3
 8014612:	d859      	bhi.n	80146c8 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014614:	4b33      	ldr	r3, [pc, #204]	; (80146e4 <pvPortMalloc+0x13c>)
 8014616:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 8014618:	4b32      	ldr	r3, [pc, #200]	; (80146e4 <pvPortMalloc+0x13c>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801461e:	e004      	b.n	801462a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8014620:	69fb      	ldr	r3, [r7, #28]
 8014622:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014624:	69fb      	ldr	r3, [r7, #28]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801462a:	69fb      	ldr	r3, [r7, #28]
 801462c:	685b      	ldr	r3, [r3, #4]
 801462e:	687a      	ldr	r2, [r7, #4]
 8014630:	429a      	cmp	r2, r3
 8014632:	d903      	bls.n	801463c <pvPortMalloc+0x94>
 8014634:	69fb      	ldr	r3, [r7, #28]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d1f1      	bne.n	8014620 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801463c:	4b26      	ldr	r3, [pc, #152]	; (80146d8 <pvPortMalloc+0x130>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	69fa      	ldr	r2, [r7, #28]
 8014642:	429a      	cmp	r2, r3
 8014644:	d040      	beq.n	80146c8 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014646:	69bb      	ldr	r3, [r7, #24]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	2208      	movs	r2, #8
 801464c:	4413      	add	r3, r2
 801464e:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014650:	69fb      	ldr	r3, [r7, #28]
 8014652:	681a      	ldr	r2, [r3, #0]
 8014654:	69bb      	ldr	r3, [r7, #24]
 8014656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014658:	69fb      	ldr	r3, [r7, #28]
 801465a:	685a      	ldr	r2, [r3, #4]
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	1ad2      	subs	r2, r2, r3
 8014660:	2308      	movs	r3, #8
 8014662:	005b      	lsls	r3, r3, #1
 8014664:	429a      	cmp	r2, r3
 8014666:	d90f      	bls.n	8014688 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014668:	69fa      	ldr	r2, [r7, #28]
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	4413      	add	r3, r2
 801466e:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014670:	69fb      	ldr	r3, [r7, #28]
 8014672:	685a      	ldr	r2, [r3, #4]
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	1ad2      	subs	r2, r2, r3
 8014678:	693b      	ldr	r3, [r7, #16]
 801467a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801467c:	69fb      	ldr	r3, [r7, #28]
 801467e:	687a      	ldr	r2, [r7, #4]
 8014680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8014682:	6938      	ldr	r0, [r7, #16]
 8014684:	f000 f8a2 	bl	80147cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014688:	4b15      	ldr	r3, [pc, #84]	; (80146e0 <pvPortMalloc+0x138>)
 801468a:	681a      	ldr	r2, [r3, #0]
 801468c:	69fb      	ldr	r3, [r7, #28]
 801468e:	685b      	ldr	r3, [r3, #4]
 8014690:	1ad3      	subs	r3, r2, r3
 8014692:	4a13      	ldr	r2, [pc, #76]	; (80146e0 <pvPortMalloc+0x138>)
 8014694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014696:	4b12      	ldr	r3, [pc, #72]	; (80146e0 <pvPortMalloc+0x138>)
 8014698:	681a      	ldr	r2, [r3, #0]
 801469a:	4b13      	ldr	r3, [pc, #76]	; (80146e8 <pvPortMalloc+0x140>)
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	429a      	cmp	r2, r3
 80146a0:	d203      	bcs.n	80146aa <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80146a2:	4b0f      	ldr	r3, [pc, #60]	; (80146e0 <pvPortMalloc+0x138>)
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	4a10      	ldr	r2, [pc, #64]	; (80146e8 <pvPortMalloc+0x140>)
 80146a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80146aa:	69fb      	ldr	r3, [r7, #28]
 80146ac:	685a      	ldr	r2, [r3, #4]
 80146ae:	4b0b      	ldr	r3, [pc, #44]	; (80146dc <pvPortMalloc+0x134>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	431a      	orrs	r2, r3
 80146b4:	69fb      	ldr	r3, [r7, #28]
 80146b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80146b8:	69fb      	ldr	r3, [r7, #28]
 80146ba:	2200      	movs	r2, #0
 80146bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80146be:	4b0b      	ldr	r3, [pc, #44]	; (80146ec <pvPortMalloc+0x144>)
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	3301      	adds	r3, #1
 80146c4:	4a09      	ldr	r2, [pc, #36]	; (80146ec <pvPortMalloc+0x144>)
 80146c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80146c8:	f7fe fd10 	bl	80130ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 80146cc:	697b      	ldr	r3, [r7, #20]
}
 80146ce:	4618      	mov	r0, r3
 80146d0:	3720      	adds	r7, #32
 80146d2:	46bd      	mov	sp, r7
 80146d4:	bd80      	pop	{r7, pc}
 80146d6:	bf00      	nop
 80146d8:	20008d10 	.word	0x20008d10
 80146dc:	20008d24 	.word	0x20008d24
 80146e0:	20008d14 	.word	0x20008d14
 80146e4:	20008d08 	.word	0x20008d08
 80146e8:	20008d18 	.word	0x20008d18
 80146ec:	20008d1c 	.word	0x20008d1c

080146f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b086      	sub	sp, #24
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d04d      	beq.n	801479e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014702:	2308      	movs	r3, #8
 8014704:	425b      	negs	r3, r3
 8014706:	697a      	ldr	r2, [r7, #20]
 8014708:	4413      	add	r3, r2
 801470a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801470c:	697b      	ldr	r3, [r7, #20]
 801470e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014710:	693b      	ldr	r3, [r7, #16]
 8014712:	685a      	ldr	r2, [r3, #4]
 8014714:	4b24      	ldr	r3, [pc, #144]	; (80147a8 <vPortFree+0xb8>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	4013      	ands	r3, r2
 801471a:	2b00      	cmp	r3, #0
 801471c:	d10a      	bne.n	8014734 <vPortFree+0x44>
	__asm volatile
 801471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014722:	f383 8811 	msr	BASEPRI, r3
 8014726:	f3bf 8f6f 	isb	sy
 801472a:	f3bf 8f4f 	dsb	sy
 801472e:	60fb      	str	r3, [r7, #12]
}
 8014730:	bf00      	nop
 8014732:	e7fe      	b.n	8014732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014734:	693b      	ldr	r3, [r7, #16]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d00a      	beq.n	8014752 <vPortFree+0x62>
	__asm volatile
 801473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014740:	f383 8811 	msr	BASEPRI, r3
 8014744:	f3bf 8f6f 	isb	sy
 8014748:	f3bf 8f4f 	dsb	sy
 801474c:	60bb      	str	r3, [r7, #8]
}
 801474e:	bf00      	nop
 8014750:	e7fe      	b.n	8014750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014752:	693b      	ldr	r3, [r7, #16]
 8014754:	685a      	ldr	r2, [r3, #4]
 8014756:	4b14      	ldr	r3, [pc, #80]	; (80147a8 <vPortFree+0xb8>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	4013      	ands	r3, r2
 801475c:	2b00      	cmp	r3, #0
 801475e:	d01e      	beq.n	801479e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014760:	693b      	ldr	r3, [r7, #16]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d11a      	bne.n	801479e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014768:	693b      	ldr	r3, [r7, #16]
 801476a:	685a      	ldr	r2, [r3, #4]
 801476c:	4b0e      	ldr	r3, [pc, #56]	; (80147a8 <vPortFree+0xb8>)
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	43db      	mvns	r3, r3
 8014772:	401a      	ands	r2, r3
 8014774:	693b      	ldr	r3, [r7, #16]
 8014776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014778:	f7fe fcaa 	bl	80130d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801477c:	693b      	ldr	r3, [r7, #16]
 801477e:	685a      	ldr	r2, [r3, #4]
 8014780:	4b0a      	ldr	r3, [pc, #40]	; (80147ac <vPortFree+0xbc>)
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	4413      	add	r3, r2
 8014786:	4a09      	ldr	r2, [pc, #36]	; (80147ac <vPortFree+0xbc>)
 8014788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801478a:	6938      	ldr	r0, [r7, #16]
 801478c:	f000 f81e 	bl	80147cc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014790:	4b07      	ldr	r3, [pc, #28]	; (80147b0 <vPortFree+0xc0>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	3301      	adds	r3, #1
 8014796:	4a06      	ldr	r2, [pc, #24]	; (80147b0 <vPortFree+0xc0>)
 8014798:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801479a:	f7fe fca7 	bl	80130ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801479e:	bf00      	nop
 80147a0:	3718      	adds	r7, #24
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}
 80147a6:	bf00      	nop
 80147a8:	20008d24 	.word	0x20008d24
 80147ac:	20008d14 	.word	0x20008d14
 80147b0:	20008d20 	.word	0x20008d20

080147b4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80147b4:	b480      	push	{r7}
 80147b6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80147b8:	4b03      	ldr	r3, [pc, #12]	; (80147c8 <xPortGetFreeHeapSize+0x14>)
 80147ba:	681b      	ldr	r3, [r3, #0]
}
 80147bc:	4618      	mov	r0, r3
 80147be:	46bd      	mov	sp, r7
 80147c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c4:	4770      	bx	lr
 80147c6:	bf00      	nop
 80147c8:	20008d14 	.word	0x20008d14

080147cc <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80147cc:	b480      	push	{r7}
 80147ce:	b085      	sub	sp, #20
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80147d4:	4b28      	ldr	r3, [pc, #160]	; (8014878 <prvInsertBlockIntoFreeList+0xac>)
 80147d6:	60fb      	str	r3, [r7, #12]
 80147d8:	e002      	b.n	80147e0 <prvInsertBlockIntoFreeList+0x14>
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	60fb      	str	r3, [r7, #12]
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	687a      	ldr	r2, [r7, #4]
 80147e6:	429a      	cmp	r2, r3
 80147e8:	d8f7      	bhi.n	80147da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	685b      	ldr	r3, [r3, #4]
 80147f2:	68ba      	ldr	r2, [r7, #8]
 80147f4:	4413      	add	r3, r2
 80147f6:	687a      	ldr	r2, [r7, #4]
 80147f8:	429a      	cmp	r2, r3
 80147fa:	d108      	bne.n	801480e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	685a      	ldr	r2, [r3, #4]
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	685b      	ldr	r3, [r3, #4]
 8014804:	441a      	add	r2, r3
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	685b      	ldr	r3, [r3, #4]
 8014816:	68ba      	ldr	r2, [r7, #8]
 8014818:	441a      	add	r2, r3
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	429a      	cmp	r2, r3
 8014820:	d118      	bne.n	8014854 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	681a      	ldr	r2, [r3, #0]
 8014826:	4b15      	ldr	r3, [pc, #84]	; (801487c <prvInsertBlockIntoFreeList+0xb0>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	429a      	cmp	r2, r3
 801482c:	d00d      	beq.n	801484a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	685a      	ldr	r2, [r3, #4]
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	685b      	ldr	r3, [r3, #4]
 8014838:	441a      	add	r2, r3
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	681a      	ldr	r2, [r3, #0]
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	601a      	str	r2, [r3, #0]
 8014848:	e008      	b.n	801485c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801484a:	4b0c      	ldr	r3, [pc, #48]	; (801487c <prvInsertBlockIntoFreeList+0xb0>)
 801484c:	681a      	ldr	r2, [r3, #0]
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	601a      	str	r2, [r3, #0]
 8014852:	e003      	b.n	801485c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	681a      	ldr	r2, [r3, #0]
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801485c:	68fa      	ldr	r2, [r7, #12]
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	429a      	cmp	r2, r3
 8014862:	d002      	beq.n	801486a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	687a      	ldr	r2, [r7, #4]
 8014868:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801486a:	bf00      	nop
 801486c:	3714      	adds	r7, #20
 801486e:	46bd      	mov	sp, r7
 8014870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014874:	4770      	bx	lr
 8014876:	bf00      	nop
 8014878:	20008d08 	.word	0x20008d08
 801487c:	20008d10 	.word	0x20008d10

08014880 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 8014880:	b480      	push	{r7}
 8014882:	b08f      	sub	sp, #60	; 0x3c
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 8014888:	2300      	movs	r3, #0
 801488a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 801488c:	2300      	movs	r3, #0
 801488e:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 8014890:	2300      	movs	r3, #0
 8014892:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 8014894:	4b5a      	ldr	r3, [pc, #360]	; (8014a00 <vPortDefineHeapRegions+0x180>)
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d00a      	beq.n	80148b2 <vPortDefineHeapRegions+0x32>
	__asm volatile
 801489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148a0:	f383 8811 	msr	BASEPRI, r3
 80148a4:	f3bf 8f6f 	isb	sy
 80148a8:	f3bf 8f4f 	dsb	sy
 80148ac:	617b      	str	r3, [r7, #20]
}
 80148ae:	bf00      	nop
 80148b0:	e7fe      	b.n	80148b0 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 80148b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148b4:	00db      	lsls	r3, r3, #3
 80148b6:	687a      	ldr	r2, [r7, #4]
 80148b8:	4413      	add	r3, r2
 80148ba:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 80148bc:	e07d      	b.n	80149ba <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 80148be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c0:	685b      	ldr	r3, [r3, #4]
 80148c2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 80148c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80148ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148cc:	f003 0307 	and.w	r3, r3, #7
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d00e      	beq.n	80148f2 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 80148d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d6:	3307      	adds	r3, #7
 80148d8:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 80148da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148dc:	f023 0307 	bic.w	r3, r3, #7
 80148e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 80148e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	461a      	mov	r2, r3
 80148e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ea:	1ad3      	subs	r3, r2, r3
 80148ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80148ee:	4413      	add	r3, r2
 80148f0:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 80148f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148f4:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 80148f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d106      	bne.n	801490a <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 80148fc:	69fb      	ldr	r3, [r7, #28]
 80148fe:	4a41      	ldr	r2, [pc, #260]	; (8014a04 <vPortDefineHeapRegions+0x184>)
 8014900:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 8014902:	4b40      	ldr	r3, [pc, #256]	; (8014a04 <vPortDefineHeapRegions+0x184>)
 8014904:	2200      	movs	r2, #0
 8014906:	605a      	str	r2, [r3, #4]
 8014908:	e01f      	b.n	801494a <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 801490a:	4b3d      	ldr	r3, [pc, #244]	; (8014a00 <vPortDefineHeapRegions+0x180>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d10a      	bne.n	8014928 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 8014912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014916:	f383 8811 	msr	BASEPRI, r3
 801491a:	f3bf 8f6f 	isb	sy
 801491e:	f3bf 8f4f 	dsb	sy
 8014922:	613b      	str	r3, [r7, #16]
}
 8014924:	bf00      	nop
 8014926:	e7fe      	b.n	8014926 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 8014928:	4b35      	ldr	r3, [pc, #212]	; (8014a00 <vPortDefineHeapRegions+0x180>)
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	461a      	mov	r2, r3
 801492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014930:	4293      	cmp	r3, r2
 8014932:	d80a      	bhi.n	801494a <vPortDefineHeapRegions+0xca>
	__asm volatile
 8014934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014938:	f383 8811 	msr	BASEPRI, r3
 801493c:	f3bf 8f6f 	isb	sy
 8014940:	f3bf 8f4f 	dsb	sy
 8014944:	60fb      	str	r3, [r7, #12]
}
 8014946:	bf00      	nop
 8014948:	e7fe      	b.n	8014948 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 801494a:	4b2d      	ldr	r3, [pc, #180]	; (8014a00 <vPortDefineHeapRegions+0x180>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 8014950:	69fa      	ldr	r2, [r7, #28]
 8014952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014954:	4413      	add	r3, r2
 8014956:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 8014958:	2208      	movs	r2, #8
 801495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801495c:	1a9b      	subs	r3, r3, r2
 801495e:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8014960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014962:	f023 0307 	bic.w	r3, r3, #7
 8014966:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 8014968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801496a:	4a25      	ldr	r2, [pc, #148]	; (8014a00 <vPortDefineHeapRegions+0x180>)
 801496c:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 801496e:	4b24      	ldr	r3, [pc, #144]	; (8014a00 <vPortDefineHeapRegions+0x180>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	2200      	movs	r2, #0
 8014974:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 8014976:	4b22      	ldr	r3, [pc, #136]	; (8014a00 <vPortDefineHeapRegions+0x180>)
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	2200      	movs	r2, #0
 801497c:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 801497e:	69fb      	ldr	r3, [r7, #28]
 8014980:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 8014982:	6a3b      	ldr	r3, [r7, #32]
 8014984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014986:	1ad2      	subs	r2, r2, r3
 8014988:	6a3b      	ldr	r3, [r7, #32]
 801498a:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 801498c:	4b1c      	ldr	r3, [pc, #112]	; (8014a00 <vPortDefineHeapRegions+0x180>)
 801498e:	681a      	ldr	r2, [r3, #0]
 8014990:	6a3b      	ldr	r3, [r7, #32]
 8014992:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 8014994:	69bb      	ldr	r3, [r7, #24]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d002      	beq.n	80149a0 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 801499a:	69bb      	ldr	r3, [r7, #24]
 801499c:	6a3a      	ldr	r2, [r7, #32]
 801499e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 80149a0:	6a3b      	ldr	r3, [r7, #32]
 80149a2:	685b      	ldr	r3, [r3, #4]
 80149a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149a6:	4413      	add	r3, r2
 80149a8:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 80149aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149ac:	3301      	adds	r3, #1
 80149ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 80149b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149b2:	00db      	lsls	r3, r3, #3
 80149b4:	687a      	ldr	r2, [r7, #4]
 80149b6:	4413      	add	r3, r2
 80149b8:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 80149ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149bc:	685b      	ldr	r3, [r3, #4]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	f47f af7d 	bne.w	80148be <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 80149c4:	4a10      	ldr	r2, [pc, #64]	; (8014a08 <vPortDefineHeapRegions+0x188>)
 80149c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c8:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 80149ca:	4a10      	ldr	r2, [pc, #64]	; (8014a0c <vPortDefineHeapRegions+0x18c>)
 80149cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ce:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 80149d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d10a      	bne.n	80149ec <vPortDefineHeapRegions+0x16c>
	__asm volatile
 80149d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149da:	f383 8811 	msr	BASEPRI, r3
 80149de:	f3bf 8f6f 	isb	sy
 80149e2:	f3bf 8f4f 	dsb	sy
 80149e6:	60bb      	str	r3, [r7, #8]
}
 80149e8:	bf00      	nop
 80149ea:	e7fe      	b.n	80149ea <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80149ec:	4b08      	ldr	r3, [pc, #32]	; (8014a10 <vPortDefineHeapRegions+0x190>)
 80149ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80149f2:	601a      	str	r2, [r3, #0]
}
 80149f4:	bf00      	nop
 80149f6:	373c      	adds	r7, #60	; 0x3c
 80149f8:	46bd      	mov	sp, r7
 80149fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149fe:	4770      	bx	lr
 8014a00:	20008d10 	.word	0x20008d10
 8014a04:	20008d08 	.word	0x20008d08
 8014a08:	20008d18 	.word	0x20008d18
 8014a0c:	20008d14 	.word	0x20008d14
 8014a10:	20008d24 	.word	0x20008d24

08014a14 <__assert_func>:
 8014a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014a16:	4614      	mov	r4, r2
 8014a18:	461a      	mov	r2, r3
 8014a1a:	4b09      	ldr	r3, [pc, #36]	; (8014a40 <__assert_func+0x2c>)
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	4605      	mov	r5, r0
 8014a20:	68d8      	ldr	r0, [r3, #12]
 8014a22:	b14c      	cbz	r4, 8014a38 <__assert_func+0x24>
 8014a24:	4b07      	ldr	r3, [pc, #28]	; (8014a44 <__assert_func+0x30>)
 8014a26:	9100      	str	r1, [sp, #0]
 8014a28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014a2c:	4906      	ldr	r1, [pc, #24]	; (8014a48 <__assert_func+0x34>)
 8014a2e:	462b      	mov	r3, r5
 8014a30:	f000 f8ee 	bl	8014c10 <fiprintf>
 8014a34:	f001 f8c0 	bl	8015bb8 <abort>
 8014a38:	4b04      	ldr	r3, [pc, #16]	; (8014a4c <__assert_func+0x38>)
 8014a3a:	461c      	mov	r4, r3
 8014a3c:	e7f3      	b.n	8014a26 <__assert_func+0x12>
 8014a3e:	bf00      	nop
 8014a40:	200000cc 	.word	0x200000cc
 8014a44:	08019fbc 	.word	0x08019fbc
 8014a48:	08019fc9 	.word	0x08019fc9
 8014a4c:	08019ff7 	.word	0x08019ff7

08014a50 <atol>:
 8014a50:	220a      	movs	r2, #10
 8014a52:	2100      	movs	r1, #0
 8014a54:	f000 bf9a 	b.w	801598c <strtol>

08014a58 <__errno>:
 8014a58:	4b01      	ldr	r3, [pc, #4]	; (8014a60 <__errno+0x8>)
 8014a5a:	6818      	ldr	r0, [r3, #0]
 8014a5c:	4770      	bx	lr
 8014a5e:	bf00      	nop
 8014a60:	200000cc 	.word	0x200000cc

08014a64 <std>:
 8014a64:	2300      	movs	r3, #0
 8014a66:	b510      	push	{r4, lr}
 8014a68:	4604      	mov	r4, r0
 8014a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8014a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014a72:	6083      	str	r3, [r0, #8]
 8014a74:	8181      	strh	r1, [r0, #12]
 8014a76:	6643      	str	r3, [r0, #100]	; 0x64
 8014a78:	81c2      	strh	r2, [r0, #14]
 8014a7a:	6183      	str	r3, [r0, #24]
 8014a7c:	4619      	mov	r1, r3
 8014a7e:	2208      	movs	r2, #8
 8014a80:	305c      	adds	r0, #92	; 0x5c
 8014a82:	f000 f9e9 	bl	8014e58 <memset>
 8014a86:	4b05      	ldr	r3, [pc, #20]	; (8014a9c <std+0x38>)
 8014a88:	6263      	str	r3, [r4, #36]	; 0x24
 8014a8a:	4b05      	ldr	r3, [pc, #20]	; (8014aa0 <std+0x3c>)
 8014a8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8014a8e:	4b05      	ldr	r3, [pc, #20]	; (8014aa4 <std+0x40>)
 8014a90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014a92:	4b05      	ldr	r3, [pc, #20]	; (8014aa8 <std+0x44>)
 8014a94:	6224      	str	r4, [r4, #32]
 8014a96:	6323      	str	r3, [r4, #48]	; 0x30
 8014a98:	bd10      	pop	{r4, pc}
 8014a9a:	bf00      	nop
 8014a9c:	08015769 	.word	0x08015769
 8014aa0:	0801578b 	.word	0x0801578b
 8014aa4:	080157c3 	.word	0x080157c3
 8014aa8:	080157e7 	.word	0x080157e7

08014aac <_cleanup_r>:
 8014aac:	4901      	ldr	r1, [pc, #4]	; (8014ab4 <_cleanup_r+0x8>)
 8014aae:	f000 b8c1 	b.w	8014c34 <_fwalk_reent>
 8014ab2:	bf00      	nop
 8014ab4:	08015cf5 	.word	0x08015cf5

08014ab8 <__sfmoreglue>:
 8014ab8:	b570      	push	{r4, r5, r6, lr}
 8014aba:	2268      	movs	r2, #104	; 0x68
 8014abc:	1e4d      	subs	r5, r1, #1
 8014abe:	4355      	muls	r5, r2
 8014ac0:	460e      	mov	r6, r1
 8014ac2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014ac6:	f000 fa3b 	bl	8014f40 <_malloc_r>
 8014aca:	4604      	mov	r4, r0
 8014acc:	b140      	cbz	r0, 8014ae0 <__sfmoreglue+0x28>
 8014ace:	2100      	movs	r1, #0
 8014ad0:	e9c0 1600 	strd	r1, r6, [r0]
 8014ad4:	300c      	adds	r0, #12
 8014ad6:	60a0      	str	r0, [r4, #8]
 8014ad8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014adc:	f000 f9bc 	bl	8014e58 <memset>
 8014ae0:	4620      	mov	r0, r4
 8014ae2:	bd70      	pop	{r4, r5, r6, pc}

08014ae4 <__sfp_lock_acquire>:
 8014ae4:	4801      	ldr	r0, [pc, #4]	; (8014aec <__sfp_lock_acquire+0x8>)
 8014ae6:	f000 b996 	b.w	8014e16 <__retarget_lock_acquire_recursive>
 8014aea:	bf00      	nop
 8014aec:	20008d29 	.word	0x20008d29

08014af0 <__sfp_lock_release>:
 8014af0:	4801      	ldr	r0, [pc, #4]	; (8014af8 <__sfp_lock_release+0x8>)
 8014af2:	f000 b991 	b.w	8014e18 <__retarget_lock_release_recursive>
 8014af6:	bf00      	nop
 8014af8:	20008d29 	.word	0x20008d29

08014afc <__sinit_lock_acquire>:
 8014afc:	4801      	ldr	r0, [pc, #4]	; (8014b04 <__sinit_lock_acquire+0x8>)
 8014afe:	f000 b98a 	b.w	8014e16 <__retarget_lock_acquire_recursive>
 8014b02:	bf00      	nop
 8014b04:	20008d2a 	.word	0x20008d2a

08014b08 <__sinit_lock_release>:
 8014b08:	4801      	ldr	r0, [pc, #4]	; (8014b10 <__sinit_lock_release+0x8>)
 8014b0a:	f000 b985 	b.w	8014e18 <__retarget_lock_release_recursive>
 8014b0e:	bf00      	nop
 8014b10:	20008d2a 	.word	0x20008d2a

08014b14 <__sinit>:
 8014b14:	b510      	push	{r4, lr}
 8014b16:	4604      	mov	r4, r0
 8014b18:	f7ff fff0 	bl	8014afc <__sinit_lock_acquire>
 8014b1c:	69a3      	ldr	r3, [r4, #24]
 8014b1e:	b11b      	cbz	r3, 8014b28 <__sinit+0x14>
 8014b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b24:	f7ff bff0 	b.w	8014b08 <__sinit_lock_release>
 8014b28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014b2c:	6523      	str	r3, [r4, #80]	; 0x50
 8014b2e:	4b13      	ldr	r3, [pc, #76]	; (8014b7c <__sinit+0x68>)
 8014b30:	4a13      	ldr	r2, [pc, #76]	; (8014b80 <__sinit+0x6c>)
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	62a2      	str	r2, [r4, #40]	; 0x28
 8014b36:	42a3      	cmp	r3, r4
 8014b38:	bf04      	itt	eq
 8014b3a:	2301      	moveq	r3, #1
 8014b3c:	61a3      	streq	r3, [r4, #24]
 8014b3e:	4620      	mov	r0, r4
 8014b40:	f000 f820 	bl	8014b84 <__sfp>
 8014b44:	6060      	str	r0, [r4, #4]
 8014b46:	4620      	mov	r0, r4
 8014b48:	f000 f81c 	bl	8014b84 <__sfp>
 8014b4c:	60a0      	str	r0, [r4, #8]
 8014b4e:	4620      	mov	r0, r4
 8014b50:	f000 f818 	bl	8014b84 <__sfp>
 8014b54:	2200      	movs	r2, #0
 8014b56:	60e0      	str	r0, [r4, #12]
 8014b58:	2104      	movs	r1, #4
 8014b5a:	6860      	ldr	r0, [r4, #4]
 8014b5c:	f7ff ff82 	bl	8014a64 <std>
 8014b60:	68a0      	ldr	r0, [r4, #8]
 8014b62:	2201      	movs	r2, #1
 8014b64:	2109      	movs	r1, #9
 8014b66:	f7ff ff7d 	bl	8014a64 <std>
 8014b6a:	68e0      	ldr	r0, [r4, #12]
 8014b6c:	2202      	movs	r2, #2
 8014b6e:	2112      	movs	r1, #18
 8014b70:	f7ff ff78 	bl	8014a64 <std>
 8014b74:	2301      	movs	r3, #1
 8014b76:	61a3      	str	r3, [r4, #24]
 8014b78:	e7d2      	b.n	8014b20 <__sinit+0xc>
 8014b7a:	bf00      	nop
 8014b7c:	0801a058 	.word	0x0801a058
 8014b80:	08014aad 	.word	0x08014aad

08014b84 <__sfp>:
 8014b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b86:	4607      	mov	r7, r0
 8014b88:	f7ff ffac 	bl	8014ae4 <__sfp_lock_acquire>
 8014b8c:	4b1e      	ldr	r3, [pc, #120]	; (8014c08 <__sfp+0x84>)
 8014b8e:	681e      	ldr	r6, [r3, #0]
 8014b90:	69b3      	ldr	r3, [r6, #24]
 8014b92:	b913      	cbnz	r3, 8014b9a <__sfp+0x16>
 8014b94:	4630      	mov	r0, r6
 8014b96:	f7ff ffbd 	bl	8014b14 <__sinit>
 8014b9a:	3648      	adds	r6, #72	; 0x48
 8014b9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014ba0:	3b01      	subs	r3, #1
 8014ba2:	d503      	bpl.n	8014bac <__sfp+0x28>
 8014ba4:	6833      	ldr	r3, [r6, #0]
 8014ba6:	b30b      	cbz	r3, 8014bec <__sfp+0x68>
 8014ba8:	6836      	ldr	r6, [r6, #0]
 8014baa:	e7f7      	b.n	8014b9c <__sfp+0x18>
 8014bac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014bb0:	b9d5      	cbnz	r5, 8014be8 <__sfp+0x64>
 8014bb2:	4b16      	ldr	r3, [pc, #88]	; (8014c0c <__sfp+0x88>)
 8014bb4:	60e3      	str	r3, [r4, #12]
 8014bb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014bba:	6665      	str	r5, [r4, #100]	; 0x64
 8014bbc:	f000 f92a 	bl	8014e14 <__retarget_lock_init_recursive>
 8014bc0:	f7ff ff96 	bl	8014af0 <__sfp_lock_release>
 8014bc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014bc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014bcc:	6025      	str	r5, [r4, #0]
 8014bce:	61a5      	str	r5, [r4, #24]
 8014bd0:	2208      	movs	r2, #8
 8014bd2:	4629      	mov	r1, r5
 8014bd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014bd8:	f000 f93e 	bl	8014e58 <memset>
 8014bdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014be0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014be4:	4620      	mov	r0, r4
 8014be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014be8:	3468      	adds	r4, #104	; 0x68
 8014bea:	e7d9      	b.n	8014ba0 <__sfp+0x1c>
 8014bec:	2104      	movs	r1, #4
 8014bee:	4638      	mov	r0, r7
 8014bf0:	f7ff ff62 	bl	8014ab8 <__sfmoreglue>
 8014bf4:	4604      	mov	r4, r0
 8014bf6:	6030      	str	r0, [r6, #0]
 8014bf8:	2800      	cmp	r0, #0
 8014bfa:	d1d5      	bne.n	8014ba8 <__sfp+0x24>
 8014bfc:	f7ff ff78 	bl	8014af0 <__sfp_lock_release>
 8014c00:	230c      	movs	r3, #12
 8014c02:	603b      	str	r3, [r7, #0]
 8014c04:	e7ee      	b.n	8014be4 <__sfp+0x60>
 8014c06:	bf00      	nop
 8014c08:	0801a058 	.word	0x0801a058
 8014c0c:	ffff0001 	.word	0xffff0001

08014c10 <fiprintf>:
 8014c10:	b40e      	push	{r1, r2, r3}
 8014c12:	b503      	push	{r0, r1, lr}
 8014c14:	4601      	mov	r1, r0
 8014c16:	ab03      	add	r3, sp, #12
 8014c18:	4805      	ldr	r0, [pc, #20]	; (8014c30 <fiprintf+0x20>)
 8014c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c1e:	6800      	ldr	r0, [r0, #0]
 8014c20:	9301      	str	r3, [sp, #4]
 8014c22:	f000 fa2b 	bl	801507c <_vfiprintf_r>
 8014c26:	b002      	add	sp, #8
 8014c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c2c:	b003      	add	sp, #12
 8014c2e:	4770      	bx	lr
 8014c30:	200000cc 	.word	0x200000cc

08014c34 <_fwalk_reent>:
 8014c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c38:	4606      	mov	r6, r0
 8014c3a:	4688      	mov	r8, r1
 8014c3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014c40:	2700      	movs	r7, #0
 8014c42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014c46:	f1b9 0901 	subs.w	r9, r9, #1
 8014c4a:	d505      	bpl.n	8014c58 <_fwalk_reent+0x24>
 8014c4c:	6824      	ldr	r4, [r4, #0]
 8014c4e:	2c00      	cmp	r4, #0
 8014c50:	d1f7      	bne.n	8014c42 <_fwalk_reent+0xe>
 8014c52:	4638      	mov	r0, r7
 8014c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c58:	89ab      	ldrh	r3, [r5, #12]
 8014c5a:	2b01      	cmp	r3, #1
 8014c5c:	d907      	bls.n	8014c6e <_fwalk_reent+0x3a>
 8014c5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014c62:	3301      	adds	r3, #1
 8014c64:	d003      	beq.n	8014c6e <_fwalk_reent+0x3a>
 8014c66:	4629      	mov	r1, r5
 8014c68:	4630      	mov	r0, r6
 8014c6a:	47c0      	blx	r8
 8014c6c:	4307      	orrs	r7, r0
 8014c6e:	3568      	adds	r5, #104	; 0x68
 8014c70:	e7e9      	b.n	8014c46 <_fwalk_reent+0x12>
	...

08014c74 <gmtime_r>:
 8014c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c78:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014c7c:	460c      	mov	r4, r1
 8014c7e:	4a4f      	ldr	r2, [pc, #316]	; (8014dbc <gmtime_r+0x148>)
 8014c80:	2300      	movs	r3, #0
 8014c82:	4630      	mov	r0, r6
 8014c84:	4639      	mov	r1, r7
 8014c86:	f7eb fe01 	bl	800088c <__aeabi_ldivmod>
 8014c8a:	4639      	mov	r1, r7
 8014c8c:	4605      	mov	r5, r0
 8014c8e:	4a4b      	ldr	r2, [pc, #300]	; (8014dbc <gmtime_r+0x148>)
 8014c90:	4630      	mov	r0, r6
 8014c92:	2300      	movs	r3, #0
 8014c94:	f7eb fdfa 	bl	800088c <__aeabi_ldivmod>
 8014c98:	2a00      	cmp	r2, #0
 8014c9a:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8014c9e:	bfb7      	itett	lt
 8014ca0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8014ca4:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8014ca8:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8014cac:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8014cb0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8014cb4:	fbb2 f1f0 	udiv	r1, r2, r0
 8014cb8:	fb00 2211 	mls	r2, r0, r1, r2
 8014cbc:	203c      	movs	r0, #60	; 0x3c
 8014cbe:	60a1      	str	r1, [r4, #8]
 8014cc0:	fbb2 f1f0 	udiv	r1, r2, r0
 8014cc4:	fb00 2211 	mls	r2, r0, r1, r2
 8014cc8:	6061      	str	r1, [r4, #4]
 8014cca:	6022      	str	r2, [r4, #0]
 8014ccc:	2107      	movs	r1, #7
 8014cce:	1cda      	adds	r2, r3, #3
 8014cd0:	fb92 f1f1 	sdiv	r1, r2, r1
 8014cd4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8014cd8:	1a52      	subs	r2, r2, r1
 8014cda:	bf48      	it	mi
 8014cdc:	3207      	addmi	r2, #7
 8014cde:	4d38      	ldr	r5, [pc, #224]	; (8014dc0 <gmtime_r+0x14c>)
 8014ce0:	4838      	ldr	r0, [pc, #224]	; (8014dc4 <gmtime_r+0x150>)
 8014ce2:	61a2      	str	r2, [r4, #24]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	bfb7      	itett	lt
 8014ce8:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8014cec:	fb93 f5f5 	sdivge	r5, r3, r5
 8014cf0:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8014cf4:	fb92 f5f5 	sdivlt	r5, r2, r5
 8014cf8:	fb00 3005 	mla	r0, r0, r5, r3
 8014cfc:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8014d00:	fbb0 f2f2 	udiv	r2, r0, r2
 8014d04:	4402      	add	r2, r0
 8014d06:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8014d0a:	fbb0 f1f3 	udiv	r1, r0, r3
 8014d0e:	1a52      	subs	r2, r2, r1
 8014d10:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014d14:	492c      	ldr	r1, [pc, #176]	; (8014dc8 <gmtime_r+0x154>)
 8014d16:	fbb0 f1f1 	udiv	r1, r0, r1
 8014d1a:	2764      	movs	r7, #100	; 0x64
 8014d1c:	1a52      	subs	r2, r2, r1
 8014d1e:	fbb2 f1fc 	udiv	r1, r2, ip
 8014d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d26:	fbb1 f6f7 	udiv	r6, r1, r7
 8014d2a:	1af3      	subs	r3, r6, r3
 8014d2c:	4403      	add	r3, r0
 8014d2e:	fb0c 3311 	mls	r3, ip, r1, r3
 8014d32:	2299      	movs	r2, #153	; 0x99
 8014d34:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8014d38:	f10e 0e02 	add.w	lr, lr, #2
 8014d3c:	f103 0c01 	add.w	ip, r3, #1
 8014d40:	fbbe f0f2 	udiv	r0, lr, r2
 8014d44:	4342      	muls	r2, r0
 8014d46:	3202      	adds	r2, #2
 8014d48:	f04f 0805 	mov.w	r8, #5
 8014d4c:	fbb2 f2f8 	udiv	r2, r2, r8
 8014d50:	ebac 0c02 	sub.w	ip, ip, r2
 8014d54:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8014d58:	4596      	cmp	lr, r2
 8014d5a:	bf94      	ite	ls
 8014d5c:	2202      	movls	r2, #2
 8014d5e:	f06f 0209 	mvnhi.w	r2, #9
 8014d62:	4410      	add	r0, r2
 8014d64:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014d68:	fb02 1505 	mla	r5, r2, r5, r1
 8014d6c:	2801      	cmp	r0, #1
 8014d6e:	bf98      	it	ls
 8014d70:	3501      	addls	r5, #1
 8014d72:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8014d76:	d30d      	bcc.n	8014d94 <gmtime_r+0x120>
 8014d78:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8014d7c:	61e3      	str	r3, [r4, #28]
 8014d7e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8014d82:	2300      	movs	r3, #0
 8014d84:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8014d88:	f8c4 c00c 	str.w	ip, [r4, #12]
 8014d8c:	6223      	str	r3, [r4, #32]
 8014d8e:	4620      	mov	r0, r4
 8014d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d94:	078a      	lsls	r2, r1, #30
 8014d96:	d102      	bne.n	8014d9e <gmtime_r+0x12a>
 8014d98:	fb07 1616 	mls	r6, r7, r6, r1
 8014d9c:	b95e      	cbnz	r6, 8014db6 <gmtime_r+0x142>
 8014d9e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014da2:	fbb1 f6f2 	udiv	r6, r1, r2
 8014da6:	fb02 1216 	mls	r2, r2, r6, r1
 8014daa:	fab2 f282 	clz	r2, r2
 8014dae:	0952      	lsrs	r2, r2, #5
 8014db0:	333b      	adds	r3, #59	; 0x3b
 8014db2:	4413      	add	r3, r2
 8014db4:	e7e2      	b.n	8014d7c <gmtime_r+0x108>
 8014db6:	2201      	movs	r2, #1
 8014db8:	e7fa      	b.n	8014db0 <gmtime_r+0x13c>
 8014dba:	bf00      	nop
 8014dbc:	00015180 	.word	0x00015180
 8014dc0:	00023ab1 	.word	0x00023ab1
 8014dc4:	fffdc54f 	.word	0xfffdc54f
 8014dc8:	00023ab0 	.word	0x00023ab0

08014dcc <__libc_init_array>:
 8014dcc:	b570      	push	{r4, r5, r6, lr}
 8014dce:	4d0d      	ldr	r5, [pc, #52]	; (8014e04 <__libc_init_array+0x38>)
 8014dd0:	4c0d      	ldr	r4, [pc, #52]	; (8014e08 <__libc_init_array+0x3c>)
 8014dd2:	1b64      	subs	r4, r4, r5
 8014dd4:	10a4      	asrs	r4, r4, #2
 8014dd6:	2600      	movs	r6, #0
 8014dd8:	42a6      	cmp	r6, r4
 8014dda:	d109      	bne.n	8014df0 <__libc_init_array+0x24>
 8014ddc:	4d0b      	ldr	r5, [pc, #44]	; (8014e0c <__libc_init_array+0x40>)
 8014dde:	4c0c      	ldr	r4, [pc, #48]	; (8014e10 <__libc_init_array+0x44>)
 8014de0:	f001 fa6c 	bl	80162bc <_init>
 8014de4:	1b64      	subs	r4, r4, r5
 8014de6:	10a4      	asrs	r4, r4, #2
 8014de8:	2600      	movs	r6, #0
 8014dea:	42a6      	cmp	r6, r4
 8014dec:	d105      	bne.n	8014dfa <__libc_init_array+0x2e>
 8014dee:	bd70      	pop	{r4, r5, r6, pc}
 8014df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014df4:	4798      	blx	r3
 8014df6:	3601      	adds	r6, #1
 8014df8:	e7ee      	b.n	8014dd8 <__libc_init_array+0xc>
 8014dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8014dfe:	4798      	blx	r3
 8014e00:	3601      	adds	r6, #1
 8014e02:	e7f2      	b.n	8014dea <__libc_init_array+0x1e>
 8014e04:	0801a198 	.word	0x0801a198
 8014e08:	0801a198 	.word	0x0801a198
 8014e0c:	0801a198 	.word	0x0801a198
 8014e10:	0801a19c 	.word	0x0801a19c

08014e14 <__retarget_lock_init_recursive>:
 8014e14:	4770      	bx	lr

08014e16 <__retarget_lock_acquire_recursive>:
 8014e16:	4770      	bx	lr

08014e18 <__retarget_lock_release_recursive>:
 8014e18:	4770      	bx	lr
	...

08014e1c <malloc>:
 8014e1c:	4b02      	ldr	r3, [pc, #8]	; (8014e28 <malloc+0xc>)
 8014e1e:	4601      	mov	r1, r0
 8014e20:	6818      	ldr	r0, [r3, #0]
 8014e22:	f000 b88d 	b.w	8014f40 <_malloc_r>
 8014e26:	bf00      	nop
 8014e28:	200000cc 	.word	0x200000cc

08014e2c <free>:
 8014e2c:	4b02      	ldr	r3, [pc, #8]	; (8014e38 <free+0xc>)
 8014e2e:	4601      	mov	r1, r0
 8014e30:	6818      	ldr	r0, [r3, #0]
 8014e32:	f000 b819 	b.w	8014e68 <_free_r>
 8014e36:	bf00      	nop
 8014e38:	200000cc 	.word	0x200000cc

08014e3c <memcpy>:
 8014e3c:	440a      	add	r2, r1
 8014e3e:	4291      	cmp	r1, r2
 8014e40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014e44:	d100      	bne.n	8014e48 <memcpy+0xc>
 8014e46:	4770      	bx	lr
 8014e48:	b510      	push	{r4, lr}
 8014e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014e52:	4291      	cmp	r1, r2
 8014e54:	d1f9      	bne.n	8014e4a <memcpy+0xe>
 8014e56:	bd10      	pop	{r4, pc}

08014e58 <memset>:
 8014e58:	4402      	add	r2, r0
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	4293      	cmp	r3, r2
 8014e5e:	d100      	bne.n	8014e62 <memset+0xa>
 8014e60:	4770      	bx	lr
 8014e62:	f803 1b01 	strb.w	r1, [r3], #1
 8014e66:	e7f9      	b.n	8014e5c <memset+0x4>

08014e68 <_free_r>:
 8014e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e6a:	2900      	cmp	r1, #0
 8014e6c:	d044      	beq.n	8014ef8 <_free_r+0x90>
 8014e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e72:	9001      	str	r0, [sp, #4]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	f1a1 0404 	sub.w	r4, r1, #4
 8014e7a:	bfb8      	it	lt
 8014e7c:	18e4      	addlt	r4, r4, r3
 8014e7e:	f001 f807 	bl	8015e90 <__malloc_lock>
 8014e82:	4a1e      	ldr	r2, [pc, #120]	; (8014efc <_free_r+0x94>)
 8014e84:	9801      	ldr	r0, [sp, #4]
 8014e86:	6813      	ldr	r3, [r2, #0]
 8014e88:	b933      	cbnz	r3, 8014e98 <_free_r+0x30>
 8014e8a:	6063      	str	r3, [r4, #4]
 8014e8c:	6014      	str	r4, [r2, #0]
 8014e8e:	b003      	add	sp, #12
 8014e90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e94:	f001 b802 	b.w	8015e9c <__malloc_unlock>
 8014e98:	42a3      	cmp	r3, r4
 8014e9a:	d908      	bls.n	8014eae <_free_r+0x46>
 8014e9c:	6825      	ldr	r5, [r4, #0]
 8014e9e:	1961      	adds	r1, r4, r5
 8014ea0:	428b      	cmp	r3, r1
 8014ea2:	bf01      	itttt	eq
 8014ea4:	6819      	ldreq	r1, [r3, #0]
 8014ea6:	685b      	ldreq	r3, [r3, #4]
 8014ea8:	1949      	addeq	r1, r1, r5
 8014eaa:	6021      	streq	r1, [r4, #0]
 8014eac:	e7ed      	b.n	8014e8a <_free_r+0x22>
 8014eae:	461a      	mov	r2, r3
 8014eb0:	685b      	ldr	r3, [r3, #4]
 8014eb2:	b10b      	cbz	r3, 8014eb8 <_free_r+0x50>
 8014eb4:	42a3      	cmp	r3, r4
 8014eb6:	d9fa      	bls.n	8014eae <_free_r+0x46>
 8014eb8:	6811      	ldr	r1, [r2, #0]
 8014eba:	1855      	adds	r5, r2, r1
 8014ebc:	42a5      	cmp	r5, r4
 8014ebe:	d10b      	bne.n	8014ed8 <_free_r+0x70>
 8014ec0:	6824      	ldr	r4, [r4, #0]
 8014ec2:	4421      	add	r1, r4
 8014ec4:	1854      	adds	r4, r2, r1
 8014ec6:	42a3      	cmp	r3, r4
 8014ec8:	6011      	str	r1, [r2, #0]
 8014eca:	d1e0      	bne.n	8014e8e <_free_r+0x26>
 8014ecc:	681c      	ldr	r4, [r3, #0]
 8014ece:	685b      	ldr	r3, [r3, #4]
 8014ed0:	6053      	str	r3, [r2, #4]
 8014ed2:	4421      	add	r1, r4
 8014ed4:	6011      	str	r1, [r2, #0]
 8014ed6:	e7da      	b.n	8014e8e <_free_r+0x26>
 8014ed8:	d902      	bls.n	8014ee0 <_free_r+0x78>
 8014eda:	230c      	movs	r3, #12
 8014edc:	6003      	str	r3, [r0, #0]
 8014ede:	e7d6      	b.n	8014e8e <_free_r+0x26>
 8014ee0:	6825      	ldr	r5, [r4, #0]
 8014ee2:	1961      	adds	r1, r4, r5
 8014ee4:	428b      	cmp	r3, r1
 8014ee6:	bf04      	itt	eq
 8014ee8:	6819      	ldreq	r1, [r3, #0]
 8014eea:	685b      	ldreq	r3, [r3, #4]
 8014eec:	6063      	str	r3, [r4, #4]
 8014eee:	bf04      	itt	eq
 8014ef0:	1949      	addeq	r1, r1, r5
 8014ef2:	6021      	streq	r1, [r4, #0]
 8014ef4:	6054      	str	r4, [r2, #4]
 8014ef6:	e7ca      	b.n	8014e8e <_free_r+0x26>
 8014ef8:	b003      	add	sp, #12
 8014efa:	bd30      	pop	{r4, r5, pc}
 8014efc:	20008d2c 	.word	0x20008d2c

08014f00 <sbrk_aligned>:
 8014f00:	b570      	push	{r4, r5, r6, lr}
 8014f02:	4e0e      	ldr	r6, [pc, #56]	; (8014f3c <sbrk_aligned+0x3c>)
 8014f04:	460c      	mov	r4, r1
 8014f06:	6831      	ldr	r1, [r6, #0]
 8014f08:	4605      	mov	r5, r0
 8014f0a:	b911      	cbnz	r1, 8014f12 <sbrk_aligned+0x12>
 8014f0c:	f000 fbfc 	bl	8015708 <_sbrk_r>
 8014f10:	6030      	str	r0, [r6, #0]
 8014f12:	4621      	mov	r1, r4
 8014f14:	4628      	mov	r0, r5
 8014f16:	f000 fbf7 	bl	8015708 <_sbrk_r>
 8014f1a:	1c43      	adds	r3, r0, #1
 8014f1c:	d00a      	beq.n	8014f34 <sbrk_aligned+0x34>
 8014f1e:	1cc4      	adds	r4, r0, #3
 8014f20:	f024 0403 	bic.w	r4, r4, #3
 8014f24:	42a0      	cmp	r0, r4
 8014f26:	d007      	beq.n	8014f38 <sbrk_aligned+0x38>
 8014f28:	1a21      	subs	r1, r4, r0
 8014f2a:	4628      	mov	r0, r5
 8014f2c:	f000 fbec 	bl	8015708 <_sbrk_r>
 8014f30:	3001      	adds	r0, #1
 8014f32:	d101      	bne.n	8014f38 <sbrk_aligned+0x38>
 8014f34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014f38:	4620      	mov	r0, r4
 8014f3a:	bd70      	pop	{r4, r5, r6, pc}
 8014f3c:	20008d30 	.word	0x20008d30

08014f40 <_malloc_r>:
 8014f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f44:	1ccd      	adds	r5, r1, #3
 8014f46:	f025 0503 	bic.w	r5, r5, #3
 8014f4a:	3508      	adds	r5, #8
 8014f4c:	2d0c      	cmp	r5, #12
 8014f4e:	bf38      	it	cc
 8014f50:	250c      	movcc	r5, #12
 8014f52:	2d00      	cmp	r5, #0
 8014f54:	4607      	mov	r7, r0
 8014f56:	db01      	blt.n	8014f5c <_malloc_r+0x1c>
 8014f58:	42a9      	cmp	r1, r5
 8014f5a:	d905      	bls.n	8014f68 <_malloc_r+0x28>
 8014f5c:	230c      	movs	r3, #12
 8014f5e:	603b      	str	r3, [r7, #0]
 8014f60:	2600      	movs	r6, #0
 8014f62:	4630      	mov	r0, r6
 8014f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f68:	4e2e      	ldr	r6, [pc, #184]	; (8015024 <_malloc_r+0xe4>)
 8014f6a:	f000 ff91 	bl	8015e90 <__malloc_lock>
 8014f6e:	6833      	ldr	r3, [r6, #0]
 8014f70:	461c      	mov	r4, r3
 8014f72:	bb34      	cbnz	r4, 8014fc2 <_malloc_r+0x82>
 8014f74:	4629      	mov	r1, r5
 8014f76:	4638      	mov	r0, r7
 8014f78:	f7ff ffc2 	bl	8014f00 <sbrk_aligned>
 8014f7c:	1c43      	adds	r3, r0, #1
 8014f7e:	4604      	mov	r4, r0
 8014f80:	d14d      	bne.n	801501e <_malloc_r+0xde>
 8014f82:	6834      	ldr	r4, [r6, #0]
 8014f84:	4626      	mov	r6, r4
 8014f86:	2e00      	cmp	r6, #0
 8014f88:	d140      	bne.n	801500c <_malloc_r+0xcc>
 8014f8a:	6823      	ldr	r3, [r4, #0]
 8014f8c:	4631      	mov	r1, r6
 8014f8e:	4638      	mov	r0, r7
 8014f90:	eb04 0803 	add.w	r8, r4, r3
 8014f94:	f000 fbb8 	bl	8015708 <_sbrk_r>
 8014f98:	4580      	cmp	r8, r0
 8014f9a:	d13a      	bne.n	8015012 <_malloc_r+0xd2>
 8014f9c:	6821      	ldr	r1, [r4, #0]
 8014f9e:	3503      	adds	r5, #3
 8014fa0:	1a6d      	subs	r5, r5, r1
 8014fa2:	f025 0503 	bic.w	r5, r5, #3
 8014fa6:	3508      	adds	r5, #8
 8014fa8:	2d0c      	cmp	r5, #12
 8014faa:	bf38      	it	cc
 8014fac:	250c      	movcc	r5, #12
 8014fae:	4629      	mov	r1, r5
 8014fb0:	4638      	mov	r0, r7
 8014fb2:	f7ff ffa5 	bl	8014f00 <sbrk_aligned>
 8014fb6:	3001      	adds	r0, #1
 8014fb8:	d02b      	beq.n	8015012 <_malloc_r+0xd2>
 8014fba:	6823      	ldr	r3, [r4, #0]
 8014fbc:	442b      	add	r3, r5
 8014fbe:	6023      	str	r3, [r4, #0]
 8014fc0:	e00e      	b.n	8014fe0 <_malloc_r+0xa0>
 8014fc2:	6822      	ldr	r2, [r4, #0]
 8014fc4:	1b52      	subs	r2, r2, r5
 8014fc6:	d41e      	bmi.n	8015006 <_malloc_r+0xc6>
 8014fc8:	2a0b      	cmp	r2, #11
 8014fca:	d916      	bls.n	8014ffa <_malloc_r+0xba>
 8014fcc:	1961      	adds	r1, r4, r5
 8014fce:	42a3      	cmp	r3, r4
 8014fd0:	6025      	str	r5, [r4, #0]
 8014fd2:	bf18      	it	ne
 8014fd4:	6059      	strne	r1, [r3, #4]
 8014fd6:	6863      	ldr	r3, [r4, #4]
 8014fd8:	bf08      	it	eq
 8014fda:	6031      	streq	r1, [r6, #0]
 8014fdc:	5162      	str	r2, [r4, r5]
 8014fde:	604b      	str	r3, [r1, #4]
 8014fe0:	4638      	mov	r0, r7
 8014fe2:	f104 060b 	add.w	r6, r4, #11
 8014fe6:	f000 ff59 	bl	8015e9c <__malloc_unlock>
 8014fea:	f026 0607 	bic.w	r6, r6, #7
 8014fee:	1d23      	adds	r3, r4, #4
 8014ff0:	1af2      	subs	r2, r6, r3
 8014ff2:	d0b6      	beq.n	8014f62 <_malloc_r+0x22>
 8014ff4:	1b9b      	subs	r3, r3, r6
 8014ff6:	50a3      	str	r3, [r4, r2]
 8014ff8:	e7b3      	b.n	8014f62 <_malloc_r+0x22>
 8014ffa:	6862      	ldr	r2, [r4, #4]
 8014ffc:	42a3      	cmp	r3, r4
 8014ffe:	bf0c      	ite	eq
 8015000:	6032      	streq	r2, [r6, #0]
 8015002:	605a      	strne	r2, [r3, #4]
 8015004:	e7ec      	b.n	8014fe0 <_malloc_r+0xa0>
 8015006:	4623      	mov	r3, r4
 8015008:	6864      	ldr	r4, [r4, #4]
 801500a:	e7b2      	b.n	8014f72 <_malloc_r+0x32>
 801500c:	4634      	mov	r4, r6
 801500e:	6876      	ldr	r6, [r6, #4]
 8015010:	e7b9      	b.n	8014f86 <_malloc_r+0x46>
 8015012:	230c      	movs	r3, #12
 8015014:	603b      	str	r3, [r7, #0]
 8015016:	4638      	mov	r0, r7
 8015018:	f000 ff40 	bl	8015e9c <__malloc_unlock>
 801501c:	e7a1      	b.n	8014f62 <_malloc_r+0x22>
 801501e:	6025      	str	r5, [r4, #0]
 8015020:	e7de      	b.n	8014fe0 <_malloc_r+0xa0>
 8015022:	bf00      	nop
 8015024:	20008d2c 	.word	0x20008d2c

08015028 <__sfputc_r>:
 8015028:	6893      	ldr	r3, [r2, #8]
 801502a:	3b01      	subs	r3, #1
 801502c:	2b00      	cmp	r3, #0
 801502e:	b410      	push	{r4}
 8015030:	6093      	str	r3, [r2, #8]
 8015032:	da08      	bge.n	8015046 <__sfputc_r+0x1e>
 8015034:	6994      	ldr	r4, [r2, #24]
 8015036:	42a3      	cmp	r3, r4
 8015038:	db01      	blt.n	801503e <__sfputc_r+0x16>
 801503a:	290a      	cmp	r1, #10
 801503c:	d103      	bne.n	8015046 <__sfputc_r+0x1e>
 801503e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015042:	f000 bce7 	b.w	8015a14 <__swbuf_r>
 8015046:	6813      	ldr	r3, [r2, #0]
 8015048:	1c58      	adds	r0, r3, #1
 801504a:	6010      	str	r0, [r2, #0]
 801504c:	7019      	strb	r1, [r3, #0]
 801504e:	4608      	mov	r0, r1
 8015050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015054:	4770      	bx	lr

08015056 <__sfputs_r>:
 8015056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015058:	4606      	mov	r6, r0
 801505a:	460f      	mov	r7, r1
 801505c:	4614      	mov	r4, r2
 801505e:	18d5      	adds	r5, r2, r3
 8015060:	42ac      	cmp	r4, r5
 8015062:	d101      	bne.n	8015068 <__sfputs_r+0x12>
 8015064:	2000      	movs	r0, #0
 8015066:	e007      	b.n	8015078 <__sfputs_r+0x22>
 8015068:	f814 1b01 	ldrb.w	r1, [r4], #1
 801506c:	463a      	mov	r2, r7
 801506e:	4630      	mov	r0, r6
 8015070:	f7ff ffda 	bl	8015028 <__sfputc_r>
 8015074:	1c43      	adds	r3, r0, #1
 8015076:	d1f3      	bne.n	8015060 <__sfputs_r+0xa>
 8015078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801507c <_vfiprintf_r>:
 801507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015080:	460d      	mov	r5, r1
 8015082:	b09d      	sub	sp, #116	; 0x74
 8015084:	4614      	mov	r4, r2
 8015086:	4698      	mov	r8, r3
 8015088:	4606      	mov	r6, r0
 801508a:	b118      	cbz	r0, 8015094 <_vfiprintf_r+0x18>
 801508c:	6983      	ldr	r3, [r0, #24]
 801508e:	b90b      	cbnz	r3, 8015094 <_vfiprintf_r+0x18>
 8015090:	f7ff fd40 	bl	8014b14 <__sinit>
 8015094:	4b89      	ldr	r3, [pc, #548]	; (80152bc <_vfiprintf_r+0x240>)
 8015096:	429d      	cmp	r5, r3
 8015098:	d11b      	bne.n	80150d2 <_vfiprintf_r+0x56>
 801509a:	6875      	ldr	r5, [r6, #4]
 801509c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801509e:	07d9      	lsls	r1, r3, #31
 80150a0:	d405      	bmi.n	80150ae <_vfiprintf_r+0x32>
 80150a2:	89ab      	ldrh	r3, [r5, #12]
 80150a4:	059a      	lsls	r2, r3, #22
 80150a6:	d402      	bmi.n	80150ae <_vfiprintf_r+0x32>
 80150a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150aa:	f7ff feb4 	bl	8014e16 <__retarget_lock_acquire_recursive>
 80150ae:	89ab      	ldrh	r3, [r5, #12]
 80150b0:	071b      	lsls	r3, r3, #28
 80150b2:	d501      	bpl.n	80150b8 <_vfiprintf_r+0x3c>
 80150b4:	692b      	ldr	r3, [r5, #16]
 80150b6:	b9eb      	cbnz	r3, 80150f4 <_vfiprintf_r+0x78>
 80150b8:	4629      	mov	r1, r5
 80150ba:	4630      	mov	r0, r6
 80150bc:	f000 fd0e 	bl	8015adc <__swsetup_r>
 80150c0:	b1c0      	cbz	r0, 80150f4 <_vfiprintf_r+0x78>
 80150c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150c4:	07dc      	lsls	r4, r3, #31
 80150c6:	d50e      	bpl.n	80150e6 <_vfiprintf_r+0x6a>
 80150c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150cc:	b01d      	add	sp, #116	; 0x74
 80150ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d2:	4b7b      	ldr	r3, [pc, #492]	; (80152c0 <_vfiprintf_r+0x244>)
 80150d4:	429d      	cmp	r5, r3
 80150d6:	d101      	bne.n	80150dc <_vfiprintf_r+0x60>
 80150d8:	68b5      	ldr	r5, [r6, #8]
 80150da:	e7df      	b.n	801509c <_vfiprintf_r+0x20>
 80150dc:	4b79      	ldr	r3, [pc, #484]	; (80152c4 <_vfiprintf_r+0x248>)
 80150de:	429d      	cmp	r5, r3
 80150e0:	bf08      	it	eq
 80150e2:	68f5      	ldreq	r5, [r6, #12]
 80150e4:	e7da      	b.n	801509c <_vfiprintf_r+0x20>
 80150e6:	89ab      	ldrh	r3, [r5, #12]
 80150e8:	0598      	lsls	r0, r3, #22
 80150ea:	d4ed      	bmi.n	80150c8 <_vfiprintf_r+0x4c>
 80150ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150ee:	f7ff fe93 	bl	8014e18 <__retarget_lock_release_recursive>
 80150f2:	e7e9      	b.n	80150c8 <_vfiprintf_r+0x4c>
 80150f4:	2300      	movs	r3, #0
 80150f6:	9309      	str	r3, [sp, #36]	; 0x24
 80150f8:	2320      	movs	r3, #32
 80150fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80150fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8015102:	2330      	movs	r3, #48	; 0x30
 8015104:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80152c8 <_vfiprintf_r+0x24c>
 8015108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801510c:	f04f 0901 	mov.w	r9, #1
 8015110:	4623      	mov	r3, r4
 8015112:	469a      	mov	sl, r3
 8015114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015118:	b10a      	cbz	r2, 801511e <_vfiprintf_r+0xa2>
 801511a:	2a25      	cmp	r2, #37	; 0x25
 801511c:	d1f9      	bne.n	8015112 <_vfiprintf_r+0x96>
 801511e:	ebba 0b04 	subs.w	fp, sl, r4
 8015122:	d00b      	beq.n	801513c <_vfiprintf_r+0xc0>
 8015124:	465b      	mov	r3, fp
 8015126:	4622      	mov	r2, r4
 8015128:	4629      	mov	r1, r5
 801512a:	4630      	mov	r0, r6
 801512c:	f7ff ff93 	bl	8015056 <__sfputs_r>
 8015130:	3001      	adds	r0, #1
 8015132:	f000 80aa 	beq.w	801528a <_vfiprintf_r+0x20e>
 8015136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015138:	445a      	add	r2, fp
 801513a:	9209      	str	r2, [sp, #36]	; 0x24
 801513c:	f89a 3000 	ldrb.w	r3, [sl]
 8015140:	2b00      	cmp	r3, #0
 8015142:	f000 80a2 	beq.w	801528a <_vfiprintf_r+0x20e>
 8015146:	2300      	movs	r3, #0
 8015148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801514c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015150:	f10a 0a01 	add.w	sl, sl, #1
 8015154:	9304      	str	r3, [sp, #16]
 8015156:	9307      	str	r3, [sp, #28]
 8015158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801515c:	931a      	str	r3, [sp, #104]	; 0x68
 801515e:	4654      	mov	r4, sl
 8015160:	2205      	movs	r2, #5
 8015162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015166:	4858      	ldr	r0, [pc, #352]	; (80152c8 <_vfiprintf_r+0x24c>)
 8015168:	f7eb f83a 	bl	80001e0 <memchr>
 801516c:	9a04      	ldr	r2, [sp, #16]
 801516e:	b9d8      	cbnz	r0, 80151a8 <_vfiprintf_r+0x12c>
 8015170:	06d1      	lsls	r1, r2, #27
 8015172:	bf44      	itt	mi
 8015174:	2320      	movmi	r3, #32
 8015176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801517a:	0713      	lsls	r3, r2, #28
 801517c:	bf44      	itt	mi
 801517e:	232b      	movmi	r3, #43	; 0x2b
 8015180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015184:	f89a 3000 	ldrb.w	r3, [sl]
 8015188:	2b2a      	cmp	r3, #42	; 0x2a
 801518a:	d015      	beq.n	80151b8 <_vfiprintf_r+0x13c>
 801518c:	9a07      	ldr	r2, [sp, #28]
 801518e:	4654      	mov	r4, sl
 8015190:	2000      	movs	r0, #0
 8015192:	f04f 0c0a 	mov.w	ip, #10
 8015196:	4621      	mov	r1, r4
 8015198:	f811 3b01 	ldrb.w	r3, [r1], #1
 801519c:	3b30      	subs	r3, #48	; 0x30
 801519e:	2b09      	cmp	r3, #9
 80151a0:	d94e      	bls.n	8015240 <_vfiprintf_r+0x1c4>
 80151a2:	b1b0      	cbz	r0, 80151d2 <_vfiprintf_r+0x156>
 80151a4:	9207      	str	r2, [sp, #28]
 80151a6:	e014      	b.n	80151d2 <_vfiprintf_r+0x156>
 80151a8:	eba0 0308 	sub.w	r3, r0, r8
 80151ac:	fa09 f303 	lsl.w	r3, r9, r3
 80151b0:	4313      	orrs	r3, r2
 80151b2:	9304      	str	r3, [sp, #16]
 80151b4:	46a2      	mov	sl, r4
 80151b6:	e7d2      	b.n	801515e <_vfiprintf_r+0xe2>
 80151b8:	9b03      	ldr	r3, [sp, #12]
 80151ba:	1d19      	adds	r1, r3, #4
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	9103      	str	r1, [sp, #12]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	bfbb      	ittet	lt
 80151c4:	425b      	neglt	r3, r3
 80151c6:	f042 0202 	orrlt.w	r2, r2, #2
 80151ca:	9307      	strge	r3, [sp, #28]
 80151cc:	9307      	strlt	r3, [sp, #28]
 80151ce:	bfb8      	it	lt
 80151d0:	9204      	strlt	r2, [sp, #16]
 80151d2:	7823      	ldrb	r3, [r4, #0]
 80151d4:	2b2e      	cmp	r3, #46	; 0x2e
 80151d6:	d10c      	bne.n	80151f2 <_vfiprintf_r+0x176>
 80151d8:	7863      	ldrb	r3, [r4, #1]
 80151da:	2b2a      	cmp	r3, #42	; 0x2a
 80151dc:	d135      	bne.n	801524a <_vfiprintf_r+0x1ce>
 80151de:	9b03      	ldr	r3, [sp, #12]
 80151e0:	1d1a      	adds	r2, r3, #4
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	9203      	str	r2, [sp, #12]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	bfb8      	it	lt
 80151ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80151ee:	3402      	adds	r4, #2
 80151f0:	9305      	str	r3, [sp, #20]
 80151f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80152d8 <_vfiprintf_r+0x25c>
 80151f6:	7821      	ldrb	r1, [r4, #0]
 80151f8:	2203      	movs	r2, #3
 80151fa:	4650      	mov	r0, sl
 80151fc:	f7ea fff0 	bl	80001e0 <memchr>
 8015200:	b140      	cbz	r0, 8015214 <_vfiprintf_r+0x198>
 8015202:	2340      	movs	r3, #64	; 0x40
 8015204:	eba0 000a 	sub.w	r0, r0, sl
 8015208:	fa03 f000 	lsl.w	r0, r3, r0
 801520c:	9b04      	ldr	r3, [sp, #16]
 801520e:	4303      	orrs	r3, r0
 8015210:	3401      	adds	r4, #1
 8015212:	9304      	str	r3, [sp, #16]
 8015214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015218:	482c      	ldr	r0, [pc, #176]	; (80152cc <_vfiprintf_r+0x250>)
 801521a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801521e:	2206      	movs	r2, #6
 8015220:	f7ea ffde 	bl	80001e0 <memchr>
 8015224:	2800      	cmp	r0, #0
 8015226:	d03f      	beq.n	80152a8 <_vfiprintf_r+0x22c>
 8015228:	4b29      	ldr	r3, [pc, #164]	; (80152d0 <_vfiprintf_r+0x254>)
 801522a:	bb1b      	cbnz	r3, 8015274 <_vfiprintf_r+0x1f8>
 801522c:	9b03      	ldr	r3, [sp, #12]
 801522e:	3307      	adds	r3, #7
 8015230:	f023 0307 	bic.w	r3, r3, #7
 8015234:	3308      	adds	r3, #8
 8015236:	9303      	str	r3, [sp, #12]
 8015238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801523a:	443b      	add	r3, r7
 801523c:	9309      	str	r3, [sp, #36]	; 0x24
 801523e:	e767      	b.n	8015110 <_vfiprintf_r+0x94>
 8015240:	fb0c 3202 	mla	r2, ip, r2, r3
 8015244:	460c      	mov	r4, r1
 8015246:	2001      	movs	r0, #1
 8015248:	e7a5      	b.n	8015196 <_vfiprintf_r+0x11a>
 801524a:	2300      	movs	r3, #0
 801524c:	3401      	adds	r4, #1
 801524e:	9305      	str	r3, [sp, #20]
 8015250:	4619      	mov	r1, r3
 8015252:	f04f 0c0a 	mov.w	ip, #10
 8015256:	4620      	mov	r0, r4
 8015258:	f810 2b01 	ldrb.w	r2, [r0], #1
 801525c:	3a30      	subs	r2, #48	; 0x30
 801525e:	2a09      	cmp	r2, #9
 8015260:	d903      	bls.n	801526a <_vfiprintf_r+0x1ee>
 8015262:	2b00      	cmp	r3, #0
 8015264:	d0c5      	beq.n	80151f2 <_vfiprintf_r+0x176>
 8015266:	9105      	str	r1, [sp, #20]
 8015268:	e7c3      	b.n	80151f2 <_vfiprintf_r+0x176>
 801526a:	fb0c 2101 	mla	r1, ip, r1, r2
 801526e:	4604      	mov	r4, r0
 8015270:	2301      	movs	r3, #1
 8015272:	e7f0      	b.n	8015256 <_vfiprintf_r+0x1da>
 8015274:	ab03      	add	r3, sp, #12
 8015276:	9300      	str	r3, [sp, #0]
 8015278:	462a      	mov	r2, r5
 801527a:	4b16      	ldr	r3, [pc, #88]	; (80152d4 <_vfiprintf_r+0x258>)
 801527c:	a904      	add	r1, sp, #16
 801527e:	4630      	mov	r0, r6
 8015280:	f3af 8000 	nop.w
 8015284:	4607      	mov	r7, r0
 8015286:	1c78      	adds	r0, r7, #1
 8015288:	d1d6      	bne.n	8015238 <_vfiprintf_r+0x1bc>
 801528a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801528c:	07d9      	lsls	r1, r3, #31
 801528e:	d405      	bmi.n	801529c <_vfiprintf_r+0x220>
 8015290:	89ab      	ldrh	r3, [r5, #12]
 8015292:	059a      	lsls	r2, r3, #22
 8015294:	d402      	bmi.n	801529c <_vfiprintf_r+0x220>
 8015296:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015298:	f7ff fdbe 	bl	8014e18 <__retarget_lock_release_recursive>
 801529c:	89ab      	ldrh	r3, [r5, #12]
 801529e:	065b      	lsls	r3, r3, #25
 80152a0:	f53f af12 	bmi.w	80150c8 <_vfiprintf_r+0x4c>
 80152a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152a6:	e711      	b.n	80150cc <_vfiprintf_r+0x50>
 80152a8:	ab03      	add	r3, sp, #12
 80152aa:	9300      	str	r3, [sp, #0]
 80152ac:	462a      	mov	r2, r5
 80152ae:	4b09      	ldr	r3, [pc, #36]	; (80152d4 <_vfiprintf_r+0x258>)
 80152b0:	a904      	add	r1, sp, #16
 80152b2:	4630      	mov	r0, r6
 80152b4:	f000 f880 	bl	80153b8 <_printf_i>
 80152b8:	e7e4      	b.n	8015284 <_vfiprintf_r+0x208>
 80152ba:	bf00      	nop
 80152bc:	0801a018 	.word	0x0801a018
 80152c0:	0801a038 	.word	0x0801a038
 80152c4:	08019ff8 	.word	0x08019ff8
 80152c8:	0801a05c 	.word	0x0801a05c
 80152cc:	0801a066 	.word	0x0801a066
 80152d0:	00000000 	.word	0x00000000
 80152d4:	08015057 	.word	0x08015057
 80152d8:	0801a062 	.word	0x0801a062

080152dc <_printf_common>:
 80152dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152e0:	4616      	mov	r6, r2
 80152e2:	4699      	mov	r9, r3
 80152e4:	688a      	ldr	r2, [r1, #8]
 80152e6:	690b      	ldr	r3, [r1, #16]
 80152e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80152ec:	4293      	cmp	r3, r2
 80152ee:	bfb8      	it	lt
 80152f0:	4613      	movlt	r3, r2
 80152f2:	6033      	str	r3, [r6, #0]
 80152f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80152f8:	4607      	mov	r7, r0
 80152fa:	460c      	mov	r4, r1
 80152fc:	b10a      	cbz	r2, 8015302 <_printf_common+0x26>
 80152fe:	3301      	adds	r3, #1
 8015300:	6033      	str	r3, [r6, #0]
 8015302:	6823      	ldr	r3, [r4, #0]
 8015304:	0699      	lsls	r1, r3, #26
 8015306:	bf42      	ittt	mi
 8015308:	6833      	ldrmi	r3, [r6, #0]
 801530a:	3302      	addmi	r3, #2
 801530c:	6033      	strmi	r3, [r6, #0]
 801530e:	6825      	ldr	r5, [r4, #0]
 8015310:	f015 0506 	ands.w	r5, r5, #6
 8015314:	d106      	bne.n	8015324 <_printf_common+0x48>
 8015316:	f104 0a19 	add.w	sl, r4, #25
 801531a:	68e3      	ldr	r3, [r4, #12]
 801531c:	6832      	ldr	r2, [r6, #0]
 801531e:	1a9b      	subs	r3, r3, r2
 8015320:	42ab      	cmp	r3, r5
 8015322:	dc26      	bgt.n	8015372 <_printf_common+0x96>
 8015324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015328:	1e13      	subs	r3, r2, #0
 801532a:	6822      	ldr	r2, [r4, #0]
 801532c:	bf18      	it	ne
 801532e:	2301      	movne	r3, #1
 8015330:	0692      	lsls	r2, r2, #26
 8015332:	d42b      	bmi.n	801538c <_printf_common+0xb0>
 8015334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015338:	4649      	mov	r1, r9
 801533a:	4638      	mov	r0, r7
 801533c:	47c0      	blx	r8
 801533e:	3001      	adds	r0, #1
 8015340:	d01e      	beq.n	8015380 <_printf_common+0xa4>
 8015342:	6823      	ldr	r3, [r4, #0]
 8015344:	68e5      	ldr	r5, [r4, #12]
 8015346:	6832      	ldr	r2, [r6, #0]
 8015348:	f003 0306 	and.w	r3, r3, #6
 801534c:	2b04      	cmp	r3, #4
 801534e:	bf08      	it	eq
 8015350:	1aad      	subeq	r5, r5, r2
 8015352:	68a3      	ldr	r3, [r4, #8]
 8015354:	6922      	ldr	r2, [r4, #16]
 8015356:	bf0c      	ite	eq
 8015358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801535c:	2500      	movne	r5, #0
 801535e:	4293      	cmp	r3, r2
 8015360:	bfc4      	itt	gt
 8015362:	1a9b      	subgt	r3, r3, r2
 8015364:	18ed      	addgt	r5, r5, r3
 8015366:	2600      	movs	r6, #0
 8015368:	341a      	adds	r4, #26
 801536a:	42b5      	cmp	r5, r6
 801536c:	d11a      	bne.n	80153a4 <_printf_common+0xc8>
 801536e:	2000      	movs	r0, #0
 8015370:	e008      	b.n	8015384 <_printf_common+0xa8>
 8015372:	2301      	movs	r3, #1
 8015374:	4652      	mov	r2, sl
 8015376:	4649      	mov	r1, r9
 8015378:	4638      	mov	r0, r7
 801537a:	47c0      	blx	r8
 801537c:	3001      	adds	r0, #1
 801537e:	d103      	bne.n	8015388 <_printf_common+0xac>
 8015380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015388:	3501      	adds	r5, #1
 801538a:	e7c6      	b.n	801531a <_printf_common+0x3e>
 801538c:	18e1      	adds	r1, r4, r3
 801538e:	1c5a      	adds	r2, r3, #1
 8015390:	2030      	movs	r0, #48	; 0x30
 8015392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015396:	4422      	add	r2, r4
 8015398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801539c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80153a0:	3302      	adds	r3, #2
 80153a2:	e7c7      	b.n	8015334 <_printf_common+0x58>
 80153a4:	2301      	movs	r3, #1
 80153a6:	4622      	mov	r2, r4
 80153a8:	4649      	mov	r1, r9
 80153aa:	4638      	mov	r0, r7
 80153ac:	47c0      	blx	r8
 80153ae:	3001      	adds	r0, #1
 80153b0:	d0e6      	beq.n	8015380 <_printf_common+0xa4>
 80153b2:	3601      	adds	r6, #1
 80153b4:	e7d9      	b.n	801536a <_printf_common+0x8e>
	...

080153b8 <_printf_i>:
 80153b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80153bc:	7e0f      	ldrb	r7, [r1, #24]
 80153be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80153c0:	2f78      	cmp	r7, #120	; 0x78
 80153c2:	4691      	mov	r9, r2
 80153c4:	4680      	mov	r8, r0
 80153c6:	460c      	mov	r4, r1
 80153c8:	469a      	mov	sl, r3
 80153ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80153ce:	d807      	bhi.n	80153e0 <_printf_i+0x28>
 80153d0:	2f62      	cmp	r7, #98	; 0x62
 80153d2:	d80a      	bhi.n	80153ea <_printf_i+0x32>
 80153d4:	2f00      	cmp	r7, #0
 80153d6:	f000 80d8 	beq.w	801558a <_printf_i+0x1d2>
 80153da:	2f58      	cmp	r7, #88	; 0x58
 80153dc:	f000 80a3 	beq.w	8015526 <_printf_i+0x16e>
 80153e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80153e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80153e8:	e03a      	b.n	8015460 <_printf_i+0xa8>
 80153ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80153ee:	2b15      	cmp	r3, #21
 80153f0:	d8f6      	bhi.n	80153e0 <_printf_i+0x28>
 80153f2:	a101      	add	r1, pc, #4	; (adr r1, 80153f8 <_printf_i+0x40>)
 80153f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80153f8:	08015451 	.word	0x08015451
 80153fc:	08015465 	.word	0x08015465
 8015400:	080153e1 	.word	0x080153e1
 8015404:	080153e1 	.word	0x080153e1
 8015408:	080153e1 	.word	0x080153e1
 801540c:	080153e1 	.word	0x080153e1
 8015410:	08015465 	.word	0x08015465
 8015414:	080153e1 	.word	0x080153e1
 8015418:	080153e1 	.word	0x080153e1
 801541c:	080153e1 	.word	0x080153e1
 8015420:	080153e1 	.word	0x080153e1
 8015424:	08015571 	.word	0x08015571
 8015428:	08015495 	.word	0x08015495
 801542c:	08015553 	.word	0x08015553
 8015430:	080153e1 	.word	0x080153e1
 8015434:	080153e1 	.word	0x080153e1
 8015438:	08015593 	.word	0x08015593
 801543c:	080153e1 	.word	0x080153e1
 8015440:	08015495 	.word	0x08015495
 8015444:	080153e1 	.word	0x080153e1
 8015448:	080153e1 	.word	0x080153e1
 801544c:	0801555b 	.word	0x0801555b
 8015450:	682b      	ldr	r3, [r5, #0]
 8015452:	1d1a      	adds	r2, r3, #4
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	602a      	str	r2, [r5, #0]
 8015458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801545c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015460:	2301      	movs	r3, #1
 8015462:	e0a3      	b.n	80155ac <_printf_i+0x1f4>
 8015464:	6820      	ldr	r0, [r4, #0]
 8015466:	6829      	ldr	r1, [r5, #0]
 8015468:	0606      	lsls	r6, r0, #24
 801546a:	f101 0304 	add.w	r3, r1, #4
 801546e:	d50a      	bpl.n	8015486 <_printf_i+0xce>
 8015470:	680e      	ldr	r6, [r1, #0]
 8015472:	602b      	str	r3, [r5, #0]
 8015474:	2e00      	cmp	r6, #0
 8015476:	da03      	bge.n	8015480 <_printf_i+0xc8>
 8015478:	232d      	movs	r3, #45	; 0x2d
 801547a:	4276      	negs	r6, r6
 801547c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015480:	485e      	ldr	r0, [pc, #376]	; (80155fc <_printf_i+0x244>)
 8015482:	230a      	movs	r3, #10
 8015484:	e019      	b.n	80154ba <_printf_i+0x102>
 8015486:	680e      	ldr	r6, [r1, #0]
 8015488:	602b      	str	r3, [r5, #0]
 801548a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801548e:	bf18      	it	ne
 8015490:	b236      	sxthne	r6, r6
 8015492:	e7ef      	b.n	8015474 <_printf_i+0xbc>
 8015494:	682b      	ldr	r3, [r5, #0]
 8015496:	6820      	ldr	r0, [r4, #0]
 8015498:	1d19      	adds	r1, r3, #4
 801549a:	6029      	str	r1, [r5, #0]
 801549c:	0601      	lsls	r1, r0, #24
 801549e:	d501      	bpl.n	80154a4 <_printf_i+0xec>
 80154a0:	681e      	ldr	r6, [r3, #0]
 80154a2:	e002      	b.n	80154aa <_printf_i+0xf2>
 80154a4:	0646      	lsls	r6, r0, #25
 80154a6:	d5fb      	bpl.n	80154a0 <_printf_i+0xe8>
 80154a8:	881e      	ldrh	r6, [r3, #0]
 80154aa:	4854      	ldr	r0, [pc, #336]	; (80155fc <_printf_i+0x244>)
 80154ac:	2f6f      	cmp	r7, #111	; 0x6f
 80154ae:	bf0c      	ite	eq
 80154b0:	2308      	moveq	r3, #8
 80154b2:	230a      	movne	r3, #10
 80154b4:	2100      	movs	r1, #0
 80154b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80154ba:	6865      	ldr	r5, [r4, #4]
 80154bc:	60a5      	str	r5, [r4, #8]
 80154be:	2d00      	cmp	r5, #0
 80154c0:	bfa2      	ittt	ge
 80154c2:	6821      	ldrge	r1, [r4, #0]
 80154c4:	f021 0104 	bicge.w	r1, r1, #4
 80154c8:	6021      	strge	r1, [r4, #0]
 80154ca:	b90e      	cbnz	r6, 80154d0 <_printf_i+0x118>
 80154cc:	2d00      	cmp	r5, #0
 80154ce:	d04d      	beq.n	801556c <_printf_i+0x1b4>
 80154d0:	4615      	mov	r5, r2
 80154d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80154d6:	fb03 6711 	mls	r7, r3, r1, r6
 80154da:	5dc7      	ldrb	r7, [r0, r7]
 80154dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80154e0:	4637      	mov	r7, r6
 80154e2:	42bb      	cmp	r3, r7
 80154e4:	460e      	mov	r6, r1
 80154e6:	d9f4      	bls.n	80154d2 <_printf_i+0x11a>
 80154e8:	2b08      	cmp	r3, #8
 80154ea:	d10b      	bne.n	8015504 <_printf_i+0x14c>
 80154ec:	6823      	ldr	r3, [r4, #0]
 80154ee:	07de      	lsls	r6, r3, #31
 80154f0:	d508      	bpl.n	8015504 <_printf_i+0x14c>
 80154f2:	6923      	ldr	r3, [r4, #16]
 80154f4:	6861      	ldr	r1, [r4, #4]
 80154f6:	4299      	cmp	r1, r3
 80154f8:	bfde      	ittt	le
 80154fa:	2330      	movle	r3, #48	; 0x30
 80154fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015500:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015504:	1b52      	subs	r2, r2, r5
 8015506:	6122      	str	r2, [r4, #16]
 8015508:	f8cd a000 	str.w	sl, [sp]
 801550c:	464b      	mov	r3, r9
 801550e:	aa03      	add	r2, sp, #12
 8015510:	4621      	mov	r1, r4
 8015512:	4640      	mov	r0, r8
 8015514:	f7ff fee2 	bl	80152dc <_printf_common>
 8015518:	3001      	adds	r0, #1
 801551a:	d14c      	bne.n	80155b6 <_printf_i+0x1fe>
 801551c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015520:	b004      	add	sp, #16
 8015522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015526:	4835      	ldr	r0, [pc, #212]	; (80155fc <_printf_i+0x244>)
 8015528:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801552c:	6829      	ldr	r1, [r5, #0]
 801552e:	6823      	ldr	r3, [r4, #0]
 8015530:	f851 6b04 	ldr.w	r6, [r1], #4
 8015534:	6029      	str	r1, [r5, #0]
 8015536:	061d      	lsls	r5, r3, #24
 8015538:	d514      	bpl.n	8015564 <_printf_i+0x1ac>
 801553a:	07df      	lsls	r7, r3, #31
 801553c:	bf44      	itt	mi
 801553e:	f043 0320 	orrmi.w	r3, r3, #32
 8015542:	6023      	strmi	r3, [r4, #0]
 8015544:	b91e      	cbnz	r6, 801554e <_printf_i+0x196>
 8015546:	6823      	ldr	r3, [r4, #0]
 8015548:	f023 0320 	bic.w	r3, r3, #32
 801554c:	6023      	str	r3, [r4, #0]
 801554e:	2310      	movs	r3, #16
 8015550:	e7b0      	b.n	80154b4 <_printf_i+0xfc>
 8015552:	6823      	ldr	r3, [r4, #0]
 8015554:	f043 0320 	orr.w	r3, r3, #32
 8015558:	6023      	str	r3, [r4, #0]
 801555a:	2378      	movs	r3, #120	; 0x78
 801555c:	4828      	ldr	r0, [pc, #160]	; (8015600 <_printf_i+0x248>)
 801555e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015562:	e7e3      	b.n	801552c <_printf_i+0x174>
 8015564:	0659      	lsls	r1, r3, #25
 8015566:	bf48      	it	mi
 8015568:	b2b6      	uxthmi	r6, r6
 801556a:	e7e6      	b.n	801553a <_printf_i+0x182>
 801556c:	4615      	mov	r5, r2
 801556e:	e7bb      	b.n	80154e8 <_printf_i+0x130>
 8015570:	682b      	ldr	r3, [r5, #0]
 8015572:	6826      	ldr	r6, [r4, #0]
 8015574:	6961      	ldr	r1, [r4, #20]
 8015576:	1d18      	adds	r0, r3, #4
 8015578:	6028      	str	r0, [r5, #0]
 801557a:	0635      	lsls	r5, r6, #24
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	d501      	bpl.n	8015584 <_printf_i+0x1cc>
 8015580:	6019      	str	r1, [r3, #0]
 8015582:	e002      	b.n	801558a <_printf_i+0x1d2>
 8015584:	0670      	lsls	r0, r6, #25
 8015586:	d5fb      	bpl.n	8015580 <_printf_i+0x1c8>
 8015588:	8019      	strh	r1, [r3, #0]
 801558a:	2300      	movs	r3, #0
 801558c:	6123      	str	r3, [r4, #16]
 801558e:	4615      	mov	r5, r2
 8015590:	e7ba      	b.n	8015508 <_printf_i+0x150>
 8015592:	682b      	ldr	r3, [r5, #0]
 8015594:	1d1a      	adds	r2, r3, #4
 8015596:	602a      	str	r2, [r5, #0]
 8015598:	681d      	ldr	r5, [r3, #0]
 801559a:	6862      	ldr	r2, [r4, #4]
 801559c:	2100      	movs	r1, #0
 801559e:	4628      	mov	r0, r5
 80155a0:	f7ea fe1e 	bl	80001e0 <memchr>
 80155a4:	b108      	cbz	r0, 80155aa <_printf_i+0x1f2>
 80155a6:	1b40      	subs	r0, r0, r5
 80155a8:	6060      	str	r0, [r4, #4]
 80155aa:	6863      	ldr	r3, [r4, #4]
 80155ac:	6123      	str	r3, [r4, #16]
 80155ae:	2300      	movs	r3, #0
 80155b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80155b4:	e7a8      	b.n	8015508 <_printf_i+0x150>
 80155b6:	6923      	ldr	r3, [r4, #16]
 80155b8:	462a      	mov	r2, r5
 80155ba:	4649      	mov	r1, r9
 80155bc:	4640      	mov	r0, r8
 80155be:	47d0      	blx	sl
 80155c0:	3001      	adds	r0, #1
 80155c2:	d0ab      	beq.n	801551c <_printf_i+0x164>
 80155c4:	6823      	ldr	r3, [r4, #0]
 80155c6:	079b      	lsls	r3, r3, #30
 80155c8:	d413      	bmi.n	80155f2 <_printf_i+0x23a>
 80155ca:	68e0      	ldr	r0, [r4, #12]
 80155cc:	9b03      	ldr	r3, [sp, #12]
 80155ce:	4298      	cmp	r0, r3
 80155d0:	bfb8      	it	lt
 80155d2:	4618      	movlt	r0, r3
 80155d4:	e7a4      	b.n	8015520 <_printf_i+0x168>
 80155d6:	2301      	movs	r3, #1
 80155d8:	4632      	mov	r2, r6
 80155da:	4649      	mov	r1, r9
 80155dc:	4640      	mov	r0, r8
 80155de:	47d0      	blx	sl
 80155e0:	3001      	adds	r0, #1
 80155e2:	d09b      	beq.n	801551c <_printf_i+0x164>
 80155e4:	3501      	adds	r5, #1
 80155e6:	68e3      	ldr	r3, [r4, #12]
 80155e8:	9903      	ldr	r1, [sp, #12]
 80155ea:	1a5b      	subs	r3, r3, r1
 80155ec:	42ab      	cmp	r3, r5
 80155ee:	dcf2      	bgt.n	80155d6 <_printf_i+0x21e>
 80155f0:	e7eb      	b.n	80155ca <_printf_i+0x212>
 80155f2:	2500      	movs	r5, #0
 80155f4:	f104 0619 	add.w	r6, r4, #25
 80155f8:	e7f5      	b.n	80155e6 <_printf_i+0x22e>
 80155fa:	bf00      	nop
 80155fc:	0801a06d 	.word	0x0801a06d
 8015600:	0801a07e 	.word	0x0801a07e

08015604 <iprintf>:
 8015604:	b40f      	push	{r0, r1, r2, r3}
 8015606:	4b0a      	ldr	r3, [pc, #40]	; (8015630 <iprintf+0x2c>)
 8015608:	b513      	push	{r0, r1, r4, lr}
 801560a:	681c      	ldr	r4, [r3, #0]
 801560c:	b124      	cbz	r4, 8015618 <iprintf+0x14>
 801560e:	69a3      	ldr	r3, [r4, #24]
 8015610:	b913      	cbnz	r3, 8015618 <iprintf+0x14>
 8015612:	4620      	mov	r0, r4
 8015614:	f7ff fa7e 	bl	8014b14 <__sinit>
 8015618:	ab05      	add	r3, sp, #20
 801561a:	9a04      	ldr	r2, [sp, #16]
 801561c:	68a1      	ldr	r1, [r4, #8]
 801561e:	9301      	str	r3, [sp, #4]
 8015620:	4620      	mov	r0, r4
 8015622:	f7ff fd2b 	bl	801507c <_vfiprintf_r>
 8015626:	b002      	add	sp, #8
 8015628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801562c:	b004      	add	sp, #16
 801562e:	4770      	bx	lr
 8015630:	200000cc 	.word	0x200000cc

08015634 <cleanup_glue>:
 8015634:	b538      	push	{r3, r4, r5, lr}
 8015636:	460c      	mov	r4, r1
 8015638:	6809      	ldr	r1, [r1, #0]
 801563a:	4605      	mov	r5, r0
 801563c:	b109      	cbz	r1, 8015642 <cleanup_glue+0xe>
 801563e:	f7ff fff9 	bl	8015634 <cleanup_glue>
 8015642:	4621      	mov	r1, r4
 8015644:	4628      	mov	r0, r5
 8015646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801564a:	f7ff bc0d 	b.w	8014e68 <_free_r>
	...

08015650 <_reclaim_reent>:
 8015650:	4b2c      	ldr	r3, [pc, #176]	; (8015704 <_reclaim_reent+0xb4>)
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	4283      	cmp	r3, r0
 8015656:	b570      	push	{r4, r5, r6, lr}
 8015658:	4604      	mov	r4, r0
 801565a:	d051      	beq.n	8015700 <_reclaim_reent+0xb0>
 801565c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801565e:	b143      	cbz	r3, 8015672 <_reclaim_reent+0x22>
 8015660:	68db      	ldr	r3, [r3, #12]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d14a      	bne.n	80156fc <_reclaim_reent+0xac>
 8015666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015668:	6819      	ldr	r1, [r3, #0]
 801566a:	b111      	cbz	r1, 8015672 <_reclaim_reent+0x22>
 801566c:	4620      	mov	r0, r4
 801566e:	f7ff fbfb 	bl	8014e68 <_free_r>
 8015672:	6961      	ldr	r1, [r4, #20]
 8015674:	b111      	cbz	r1, 801567c <_reclaim_reent+0x2c>
 8015676:	4620      	mov	r0, r4
 8015678:	f7ff fbf6 	bl	8014e68 <_free_r>
 801567c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801567e:	b111      	cbz	r1, 8015686 <_reclaim_reent+0x36>
 8015680:	4620      	mov	r0, r4
 8015682:	f7ff fbf1 	bl	8014e68 <_free_r>
 8015686:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015688:	b111      	cbz	r1, 8015690 <_reclaim_reent+0x40>
 801568a:	4620      	mov	r0, r4
 801568c:	f7ff fbec 	bl	8014e68 <_free_r>
 8015690:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015692:	b111      	cbz	r1, 801569a <_reclaim_reent+0x4a>
 8015694:	4620      	mov	r0, r4
 8015696:	f7ff fbe7 	bl	8014e68 <_free_r>
 801569a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801569c:	b111      	cbz	r1, 80156a4 <_reclaim_reent+0x54>
 801569e:	4620      	mov	r0, r4
 80156a0:	f7ff fbe2 	bl	8014e68 <_free_r>
 80156a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80156a6:	b111      	cbz	r1, 80156ae <_reclaim_reent+0x5e>
 80156a8:	4620      	mov	r0, r4
 80156aa:	f7ff fbdd 	bl	8014e68 <_free_r>
 80156ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80156b0:	b111      	cbz	r1, 80156b8 <_reclaim_reent+0x68>
 80156b2:	4620      	mov	r0, r4
 80156b4:	f7ff fbd8 	bl	8014e68 <_free_r>
 80156b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80156ba:	b111      	cbz	r1, 80156c2 <_reclaim_reent+0x72>
 80156bc:	4620      	mov	r0, r4
 80156be:	f7ff fbd3 	bl	8014e68 <_free_r>
 80156c2:	69a3      	ldr	r3, [r4, #24]
 80156c4:	b1e3      	cbz	r3, 8015700 <_reclaim_reent+0xb0>
 80156c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80156c8:	4620      	mov	r0, r4
 80156ca:	4798      	blx	r3
 80156cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80156ce:	b1b9      	cbz	r1, 8015700 <_reclaim_reent+0xb0>
 80156d0:	4620      	mov	r0, r4
 80156d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80156d6:	f7ff bfad 	b.w	8015634 <cleanup_glue>
 80156da:	5949      	ldr	r1, [r1, r5]
 80156dc:	b941      	cbnz	r1, 80156f0 <_reclaim_reent+0xa0>
 80156de:	3504      	adds	r5, #4
 80156e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80156e2:	2d80      	cmp	r5, #128	; 0x80
 80156e4:	68d9      	ldr	r1, [r3, #12]
 80156e6:	d1f8      	bne.n	80156da <_reclaim_reent+0x8a>
 80156e8:	4620      	mov	r0, r4
 80156ea:	f7ff fbbd 	bl	8014e68 <_free_r>
 80156ee:	e7ba      	b.n	8015666 <_reclaim_reent+0x16>
 80156f0:	680e      	ldr	r6, [r1, #0]
 80156f2:	4620      	mov	r0, r4
 80156f4:	f7ff fbb8 	bl	8014e68 <_free_r>
 80156f8:	4631      	mov	r1, r6
 80156fa:	e7ef      	b.n	80156dc <_reclaim_reent+0x8c>
 80156fc:	2500      	movs	r5, #0
 80156fe:	e7ef      	b.n	80156e0 <_reclaim_reent+0x90>
 8015700:	bd70      	pop	{r4, r5, r6, pc}
 8015702:	bf00      	nop
 8015704:	200000cc 	.word	0x200000cc

08015708 <_sbrk_r>:
 8015708:	b538      	push	{r3, r4, r5, lr}
 801570a:	4d06      	ldr	r5, [pc, #24]	; (8015724 <_sbrk_r+0x1c>)
 801570c:	2300      	movs	r3, #0
 801570e:	4604      	mov	r4, r0
 8015710:	4608      	mov	r0, r1
 8015712:	602b      	str	r3, [r5, #0]
 8015714:	f7ef fddc 	bl	80052d0 <_sbrk>
 8015718:	1c43      	adds	r3, r0, #1
 801571a:	d102      	bne.n	8015722 <_sbrk_r+0x1a>
 801571c:	682b      	ldr	r3, [r5, #0]
 801571e:	b103      	cbz	r3, 8015722 <_sbrk_r+0x1a>
 8015720:	6023      	str	r3, [r4, #0]
 8015722:	bd38      	pop	{r3, r4, r5, pc}
 8015724:	20008d34 	.word	0x20008d34

08015728 <siprintf>:
 8015728:	b40e      	push	{r1, r2, r3}
 801572a:	b500      	push	{lr}
 801572c:	b09c      	sub	sp, #112	; 0x70
 801572e:	ab1d      	add	r3, sp, #116	; 0x74
 8015730:	9002      	str	r0, [sp, #8]
 8015732:	9006      	str	r0, [sp, #24]
 8015734:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015738:	4809      	ldr	r0, [pc, #36]	; (8015760 <siprintf+0x38>)
 801573a:	9107      	str	r1, [sp, #28]
 801573c:	9104      	str	r1, [sp, #16]
 801573e:	4909      	ldr	r1, [pc, #36]	; (8015764 <siprintf+0x3c>)
 8015740:	f853 2b04 	ldr.w	r2, [r3], #4
 8015744:	9105      	str	r1, [sp, #20]
 8015746:	6800      	ldr	r0, [r0, #0]
 8015748:	9301      	str	r3, [sp, #4]
 801574a:	a902      	add	r1, sp, #8
 801574c:	f000 fc36 	bl	8015fbc <_svfiprintf_r>
 8015750:	9b02      	ldr	r3, [sp, #8]
 8015752:	2200      	movs	r2, #0
 8015754:	701a      	strb	r2, [r3, #0]
 8015756:	b01c      	add	sp, #112	; 0x70
 8015758:	f85d eb04 	ldr.w	lr, [sp], #4
 801575c:	b003      	add	sp, #12
 801575e:	4770      	bx	lr
 8015760:	200000cc 	.word	0x200000cc
 8015764:	ffff0208 	.word	0xffff0208

08015768 <__sread>:
 8015768:	b510      	push	{r4, lr}
 801576a:	460c      	mov	r4, r1
 801576c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015770:	f000 fd24 	bl	80161bc <_read_r>
 8015774:	2800      	cmp	r0, #0
 8015776:	bfab      	itete	ge
 8015778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801577a:	89a3      	ldrhlt	r3, [r4, #12]
 801577c:	181b      	addge	r3, r3, r0
 801577e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015782:	bfac      	ite	ge
 8015784:	6563      	strge	r3, [r4, #84]	; 0x54
 8015786:	81a3      	strhlt	r3, [r4, #12]
 8015788:	bd10      	pop	{r4, pc}

0801578a <__swrite>:
 801578a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801578e:	461f      	mov	r7, r3
 8015790:	898b      	ldrh	r3, [r1, #12]
 8015792:	05db      	lsls	r3, r3, #23
 8015794:	4605      	mov	r5, r0
 8015796:	460c      	mov	r4, r1
 8015798:	4616      	mov	r6, r2
 801579a:	d505      	bpl.n	80157a8 <__swrite+0x1e>
 801579c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157a0:	2302      	movs	r3, #2
 80157a2:	2200      	movs	r2, #0
 80157a4:	f000 fae2 	bl	8015d6c <_lseek_r>
 80157a8:	89a3      	ldrh	r3, [r4, #12]
 80157aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80157ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80157b2:	81a3      	strh	r3, [r4, #12]
 80157b4:	4632      	mov	r2, r6
 80157b6:	463b      	mov	r3, r7
 80157b8:	4628      	mov	r0, r5
 80157ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157be:	f000 b97b 	b.w	8015ab8 <_write_r>

080157c2 <__sseek>:
 80157c2:	b510      	push	{r4, lr}
 80157c4:	460c      	mov	r4, r1
 80157c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157ca:	f000 facf 	bl	8015d6c <_lseek_r>
 80157ce:	1c43      	adds	r3, r0, #1
 80157d0:	89a3      	ldrh	r3, [r4, #12]
 80157d2:	bf15      	itete	ne
 80157d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80157d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80157da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80157de:	81a3      	strheq	r3, [r4, #12]
 80157e0:	bf18      	it	ne
 80157e2:	81a3      	strhne	r3, [r4, #12]
 80157e4:	bd10      	pop	{r4, pc}

080157e6 <__sclose>:
 80157e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157ea:	f000 b9ed 	b.w	8015bc8 <_close_r>

080157ee <strcat>:
 80157ee:	b510      	push	{r4, lr}
 80157f0:	4602      	mov	r2, r0
 80157f2:	7814      	ldrb	r4, [r2, #0]
 80157f4:	4613      	mov	r3, r2
 80157f6:	3201      	adds	r2, #1
 80157f8:	2c00      	cmp	r4, #0
 80157fa:	d1fa      	bne.n	80157f2 <strcat+0x4>
 80157fc:	3b01      	subs	r3, #1
 80157fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015806:	2a00      	cmp	r2, #0
 8015808:	d1f9      	bne.n	80157fe <strcat+0x10>
 801580a:	bd10      	pop	{r4, pc}

0801580c <strchr>:
 801580c:	b2c9      	uxtb	r1, r1
 801580e:	4603      	mov	r3, r0
 8015810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015814:	b11a      	cbz	r2, 801581e <strchr+0x12>
 8015816:	428a      	cmp	r2, r1
 8015818:	d1f9      	bne.n	801580e <strchr+0x2>
 801581a:	4618      	mov	r0, r3
 801581c:	4770      	bx	lr
 801581e:	2900      	cmp	r1, #0
 8015820:	bf18      	it	ne
 8015822:	2300      	movne	r3, #0
 8015824:	e7f9      	b.n	801581a <strchr+0xe>

08015826 <strcpy>:
 8015826:	4603      	mov	r3, r0
 8015828:	f811 2b01 	ldrb.w	r2, [r1], #1
 801582c:	f803 2b01 	strb.w	r2, [r3], #1
 8015830:	2a00      	cmp	r2, #0
 8015832:	d1f9      	bne.n	8015828 <strcpy+0x2>
 8015834:	4770      	bx	lr

08015836 <strncpy>:
 8015836:	b510      	push	{r4, lr}
 8015838:	3901      	subs	r1, #1
 801583a:	4603      	mov	r3, r0
 801583c:	b132      	cbz	r2, 801584c <strncpy+0x16>
 801583e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015842:	f803 4b01 	strb.w	r4, [r3], #1
 8015846:	3a01      	subs	r2, #1
 8015848:	2c00      	cmp	r4, #0
 801584a:	d1f7      	bne.n	801583c <strncpy+0x6>
 801584c:	441a      	add	r2, r3
 801584e:	2100      	movs	r1, #0
 8015850:	4293      	cmp	r3, r2
 8015852:	d100      	bne.n	8015856 <strncpy+0x20>
 8015854:	bd10      	pop	{r4, pc}
 8015856:	f803 1b01 	strb.w	r1, [r3], #1
 801585a:	e7f9      	b.n	8015850 <strncpy+0x1a>

0801585c <strstr>:
 801585c:	780a      	ldrb	r2, [r1, #0]
 801585e:	b570      	push	{r4, r5, r6, lr}
 8015860:	b96a      	cbnz	r2, 801587e <strstr+0x22>
 8015862:	bd70      	pop	{r4, r5, r6, pc}
 8015864:	429a      	cmp	r2, r3
 8015866:	d109      	bne.n	801587c <strstr+0x20>
 8015868:	460c      	mov	r4, r1
 801586a:	4605      	mov	r5, r0
 801586c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015870:	2b00      	cmp	r3, #0
 8015872:	d0f6      	beq.n	8015862 <strstr+0x6>
 8015874:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015878:	429e      	cmp	r6, r3
 801587a:	d0f7      	beq.n	801586c <strstr+0x10>
 801587c:	3001      	adds	r0, #1
 801587e:	7803      	ldrb	r3, [r0, #0]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d1ef      	bne.n	8015864 <strstr+0x8>
 8015884:	4618      	mov	r0, r3
 8015886:	e7ec      	b.n	8015862 <strstr+0x6>

08015888 <_strtol_l.constprop.0>:
 8015888:	2b01      	cmp	r3, #1
 801588a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801588e:	d001      	beq.n	8015894 <_strtol_l.constprop.0+0xc>
 8015890:	2b24      	cmp	r3, #36	; 0x24
 8015892:	d906      	bls.n	80158a2 <_strtol_l.constprop.0+0x1a>
 8015894:	f7ff f8e0 	bl	8014a58 <__errno>
 8015898:	2316      	movs	r3, #22
 801589a:	6003      	str	r3, [r0, #0]
 801589c:	2000      	movs	r0, #0
 801589e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015988 <_strtol_l.constprop.0+0x100>
 80158a6:	460d      	mov	r5, r1
 80158a8:	462e      	mov	r6, r5
 80158aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80158ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80158b2:	f017 0708 	ands.w	r7, r7, #8
 80158b6:	d1f7      	bne.n	80158a8 <_strtol_l.constprop.0+0x20>
 80158b8:	2c2d      	cmp	r4, #45	; 0x2d
 80158ba:	d132      	bne.n	8015922 <_strtol_l.constprop.0+0x9a>
 80158bc:	782c      	ldrb	r4, [r5, #0]
 80158be:	2701      	movs	r7, #1
 80158c0:	1cb5      	adds	r5, r6, #2
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d05b      	beq.n	801597e <_strtol_l.constprop.0+0xf6>
 80158c6:	2b10      	cmp	r3, #16
 80158c8:	d109      	bne.n	80158de <_strtol_l.constprop.0+0x56>
 80158ca:	2c30      	cmp	r4, #48	; 0x30
 80158cc:	d107      	bne.n	80158de <_strtol_l.constprop.0+0x56>
 80158ce:	782c      	ldrb	r4, [r5, #0]
 80158d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80158d4:	2c58      	cmp	r4, #88	; 0x58
 80158d6:	d14d      	bne.n	8015974 <_strtol_l.constprop.0+0xec>
 80158d8:	786c      	ldrb	r4, [r5, #1]
 80158da:	2310      	movs	r3, #16
 80158dc:	3502      	adds	r5, #2
 80158de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80158e2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80158e6:	f04f 0c00 	mov.w	ip, #0
 80158ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80158ee:	4666      	mov	r6, ip
 80158f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80158f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80158f8:	f1be 0f09 	cmp.w	lr, #9
 80158fc:	d816      	bhi.n	801592c <_strtol_l.constprop.0+0xa4>
 80158fe:	4674      	mov	r4, lr
 8015900:	42a3      	cmp	r3, r4
 8015902:	dd24      	ble.n	801594e <_strtol_l.constprop.0+0xc6>
 8015904:	f1bc 0f00 	cmp.w	ip, #0
 8015908:	db1e      	blt.n	8015948 <_strtol_l.constprop.0+0xc0>
 801590a:	45b1      	cmp	r9, r6
 801590c:	d31c      	bcc.n	8015948 <_strtol_l.constprop.0+0xc0>
 801590e:	d101      	bne.n	8015914 <_strtol_l.constprop.0+0x8c>
 8015910:	45a2      	cmp	sl, r4
 8015912:	db19      	blt.n	8015948 <_strtol_l.constprop.0+0xc0>
 8015914:	fb06 4603 	mla	r6, r6, r3, r4
 8015918:	f04f 0c01 	mov.w	ip, #1
 801591c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015920:	e7e8      	b.n	80158f4 <_strtol_l.constprop.0+0x6c>
 8015922:	2c2b      	cmp	r4, #43	; 0x2b
 8015924:	bf04      	itt	eq
 8015926:	782c      	ldrbeq	r4, [r5, #0]
 8015928:	1cb5      	addeq	r5, r6, #2
 801592a:	e7ca      	b.n	80158c2 <_strtol_l.constprop.0+0x3a>
 801592c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8015930:	f1be 0f19 	cmp.w	lr, #25
 8015934:	d801      	bhi.n	801593a <_strtol_l.constprop.0+0xb2>
 8015936:	3c37      	subs	r4, #55	; 0x37
 8015938:	e7e2      	b.n	8015900 <_strtol_l.constprop.0+0x78>
 801593a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801593e:	f1be 0f19 	cmp.w	lr, #25
 8015942:	d804      	bhi.n	801594e <_strtol_l.constprop.0+0xc6>
 8015944:	3c57      	subs	r4, #87	; 0x57
 8015946:	e7db      	b.n	8015900 <_strtol_l.constprop.0+0x78>
 8015948:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801594c:	e7e6      	b.n	801591c <_strtol_l.constprop.0+0x94>
 801594e:	f1bc 0f00 	cmp.w	ip, #0
 8015952:	da05      	bge.n	8015960 <_strtol_l.constprop.0+0xd8>
 8015954:	2322      	movs	r3, #34	; 0x22
 8015956:	6003      	str	r3, [r0, #0]
 8015958:	4646      	mov	r6, r8
 801595a:	b942      	cbnz	r2, 801596e <_strtol_l.constprop.0+0xe6>
 801595c:	4630      	mov	r0, r6
 801595e:	e79e      	b.n	801589e <_strtol_l.constprop.0+0x16>
 8015960:	b107      	cbz	r7, 8015964 <_strtol_l.constprop.0+0xdc>
 8015962:	4276      	negs	r6, r6
 8015964:	2a00      	cmp	r2, #0
 8015966:	d0f9      	beq.n	801595c <_strtol_l.constprop.0+0xd4>
 8015968:	f1bc 0f00 	cmp.w	ip, #0
 801596c:	d000      	beq.n	8015970 <_strtol_l.constprop.0+0xe8>
 801596e:	1e69      	subs	r1, r5, #1
 8015970:	6011      	str	r1, [r2, #0]
 8015972:	e7f3      	b.n	801595c <_strtol_l.constprop.0+0xd4>
 8015974:	2430      	movs	r4, #48	; 0x30
 8015976:	2b00      	cmp	r3, #0
 8015978:	d1b1      	bne.n	80158de <_strtol_l.constprop.0+0x56>
 801597a:	2308      	movs	r3, #8
 801597c:	e7af      	b.n	80158de <_strtol_l.constprop.0+0x56>
 801597e:	2c30      	cmp	r4, #48	; 0x30
 8015980:	d0a5      	beq.n	80158ce <_strtol_l.constprop.0+0x46>
 8015982:	230a      	movs	r3, #10
 8015984:	e7ab      	b.n	80158de <_strtol_l.constprop.0+0x56>
 8015986:	bf00      	nop
 8015988:	0801a090 	.word	0x0801a090

0801598c <strtol>:
 801598c:	4613      	mov	r3, r2
 801598e:	460a      	mov	r2, r1
 8015990:	4601      	mov	r1, r0
 8015992:	4802      	ldr	r0, [pc, #8]	; (801599c <strtol+0x10>)
 8015994:	6800      	ldr	r0, [r0, #0]
 8015996:	f7ff bf77 	b.w	8015888 <_strtol_l.constprop.0>
 801599a:	bf00      	nop
 801599c:	200000cc 	.word	0x200000cc

080159a0 <_vsniprintf_r>:
 80159a0:	b530      	push	{r4, r5, lr}
 80159a2:	4614      	mov	r4, r2
 80159a4:	2c00      	cmp	r4, #0
 80159a6:	b09b      	sub	sp, #108	; 0x6c
 80159a8:	4605      	mov	r5, r0
 80159aa:	461a      	mov	r2, r3
 80159ac:	da05      	bge.n	80159ba <_vsniprintf_r+0x1a>
 80159ae:	238b      	movs	r3, #139	; 0x8b
 80159b0:	6003      	str	r3, [r0, #0]
 80159b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80159b6:	b01b      	add	sp, #108	; 0x6c
 80159b8:	bd30      	pop	{r4, r5, pc}
 80159ba:	f44f 7302 	mov.w	r3, #520	; 0x208
 80159be:	f8ad 300c 	strh.w	r3, [sp, #12]
 80159c2:	bf14      	ite	ne
 80159c4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80159c8:	4623      	moveq	r3, r4
 80159ca:	9302      	str	r3, [sp, #8]
 80159cc:	9305      	str	r3, [sp, #20]
 80159ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80159d2:	9100      	str	r1, [sp, #0]
 80159d4:	9104      	str	r1, [sp, #16]
 80159d6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80159da:	4669      	mov	r1, sp
 80159dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80159de:	f000 faed 	bl	8015fbc <_svfiprintf_r>
 80159e2:	1c43      	adds	r3, r0, #1
 80159e4:	bfbc      	itt	lt
 80159e6:	238b      	movlt	r3, #139	; 0x8b
 80159e8:	602b      	strlt	r3, [r5, #0]
 80159ea:	2c00      	cmp	r4, #0
 80159ec:	d0e3      	beq.n	80159b6 <_vsniprintf_r+0x16>
 80159ee:	9b00      	ldr	r3, [sp, #0]
 80159f0:	2200      	movs	r2, #0
 80159f2:	701a      	strb	r2, [r3, #0]
 80159f4:	e7df      	b.n	80159b6 <_vsniprintf_r+0x16>
	...

080159f8 <vsniprintf>:
 80159f8:	b507      	push	{r0, r1, r2, lr}
 80159fa:	9300      	str	r3, [sp, #0]
 80159fc:	4613      	mov	r3, r2
 80159fe:	460a      	mov	r2, r1
 8015a00:	4601      	mov	r1, r0
 8015a02:	4803      	ldr	r0, [pc, #12]	; (8015a10 <vsniprintf+0x18>)
 8015a04:	6800      	ldr	r0, [r0, #0]
 8015a06:	f7ff ffcb 	bl	80159a0 <_vsniprintf_r>
 8015a0a:	b003      	add	sp, #12
 8015a0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a10:	200000cc 	.word	0x200000cc

08015a14 <__swbuf_r>:
 8015a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a16:	460e      	mov	r6, r1
 8015a18:	4614      	mov	r4, r2
 8015a1a:	4605      	mov	r5, r0
 8015a1c:	b118      	cbz	r0, 8015a26 <__swbuf_r+0x12>
 8015a1e:	6983      	ldr	r3, [r0, #24]
 8015a20:	b90b      	cbnz	r3, 8015a26 <__swbuf_r+0x12>
 8015a22:	f7ff f877 	bl	8014b14 <__sinit>
 8015a26:	4b21      	ldr	r3, [pc, #132]	; (8015aac <__swbuf_r+0x98>)
 8015a28:	429c      	cmp	r4, r3
 8015a2a:	d12b      	bne.n	8015a84 <__swbuf_r+0x70>
 8015a2c:	686c      	ldr	r4, [r5, #4]
 8015a2e:	69a3      	ldr	r3, [r4, #24]
 8015a30:	60a3      	str	r3, [r4, #8]
 8015a32:	89a3      	ldrh	r3, [r4, #12]
 8015a34:	071a      	lsls	r2, r3, #28
 8015a36:	d52f      	bpl.n	8015a98 <__swbuf_r+0x84>
 8015a38:	6923      	ldr	r3, [r4, #16]
 8015a3a:	b36b      	cbz	r3, 8015a98 <__swbuf_r+0x84>
 8015a3c:	6923      	ldr	r3, [r4, #16]
 8015a3e:	6820      	ldr	r0, [r4, #0]
 8015a40:	1ac0      	subs	r0, r0, r3
 8015a42:	6963      	ldr	r3, [r4, #20]
 8015a44:	b2f6      	uxtb	r6, r6
 8015a46:	4283      	cmp	r3, r0
 8015a48:	4637      	mov	r7, r6
 8015a4a:	dc04      	bgt.n	8015a56 <__swbuf_r+0x42>
 8015a4c:	4621      	mov	r1, r4
 8015a4e:	4628      	mov	r0, r5
 8015a50:	f000 f950 	bl	8015cf4 <_fflush_r>
 8015a54:	bb30      	cbnz	r0, 8015aa4 <__swbuf_r+0x90>
 8015a56:	68a3      	ldr	r3, [r4, #8]
 8015a58:	3b01      	subs	r3, #1
 8015a5a:	60a3      	str	r3, [r4, #8]
 8015a5c:	6823      	ldr	r3, [r4, #0]
 8015a5e:	1c5a      	adds	r2, r3, #1
 8015a60:	6022      	str	r2, [r4, #0]
 8015a62:	701e      	strb	r6, [r3, #0]
 8015a64:	6963      	ldr	r3, [r4, #20]
 8015a66:	3001      	adds	r0, #1
 8015a68:	4283      	cmp	r3, r0
 8015a6a:	d004      	beq.n	8015a76 <__swbuf_r+0x62>
 8015a6c:	89a3      	ldrh	r3, [r4, #12]
 8015a6e:	07db      	lsls	r3, r3, #31
 8015a70:	d506      	bpl.n	8015a80 <__swbuf_r+0x6c>
 8015a72:	2e0a      	cmp	r6, #10
 8015a74:	d104      	bne.n	8015a80 <__swbuf_r+0x6c>
 8015a76:	4621      	mov	r1, r4
 8015a78:	4628      	mov	r0, r5
 8015a7a:	f000 f93b 	bl	8015cf4 <_fflush_r>
 8015a7e:	b988      	cbnz	r0, 8015aa4 <__swbuf_r+0x90>
 8015a80:	4638      	mov	r0, r7
 8015a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a84:	4b0a      	ldr	r3, [pc, #40]	; (8015ab0 <__swbuf_r+0x9c>)
 8015a86:	429c      	cmp	r4, r3
 8015a88:	d101      	bne.n	8015a8e <__swbuf_r+0x7a>
 8015a8a:	68ac      	ldr	r4, [r5, #8]
 8015a8c:	e7cf      	b.n	8015a2e <__swbuf_r+0x1a>
 8015a8e:	4b09      	ldr	r3, [pc, #36]	; (8015ab4 <__swbuf_r+0xa0>)
 8015a90:	429c      	cmp	r4, r3
 8015a92:	bf08      	it	eq
 8015a94:	68ec      	ldreq	r4, [r5, #12]
 8015a96:	e7ca      	b.n	8015a2e <__swbuf_r+0x1a>
 8015a98:	4621      	mov	r1, r4
 8015a9a:	4628      	mov	r0, r5
 8015a9c:	f000 f81e 	bl	8015adc <__swsetup_r>
 8015aa0:	2800      	cmp	r0, #0
 8015aa2:	d0cb      	beq.n	8015a3c <__swbuf_r+0x28>
 8015aa4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015aa8:	e7ea      	b.n	8015a80 <__swbuf_r+0x6c>
 8015aaa:	bf00      	nop
 8015aac:	0801a018 	.word	0x0801a018
 8015ab0:	0801a038 	.word	0x0801a038
 8015ab4:	08019ff8 	.word	0x08019ff8

08015ab8 <_write_r>:
 8015ab8:	b538      	push	{r3, r4, r5, lr}
 8015aba:	4d07      	ldr	r5, [pc, #28]	; (8015ad8 <_write_r+0x20>)
 8015abc:	4604      	mov	r4, r0
 8015abe:	4608      	mov	r0, r1
 8015ac0:	4611      	mov	r1, r2
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	602a      	str	r2, [r5, #0]
 8015ac6:	461a      	mov	r2, r3
 8015ac8:	f7ec fb78 	bl	80021bc <_write>
 8015acc:	1c43      	adds	r3, r0, #1
 8015ace:	d102      	bne.n	8015ad6 <_write_r+0x1e>
 8015ad0:	682b      	ldr	r3, [r5, #0]
 8015ad2:	b103      	cbz	r3, 8015ad6 <_write_r+0x1e>
 8015ad4:	6023      	str	r3, [r4, #0]
 8015ad6:	bd38      	pop	{r3, r4, r5, pc}
 8015ad8:	20008d34 	.word	0x20008d34

08015adc <__swsetup_r>:
 8015adc:	4b32      	ldr	r3, [pc, #200]	; (8015ba8 <__swsetup_r+0xcc>)
 8015ade:	b570      	push	{r4, r5, r6, lr}
 8015ae0:	681d      	ldr	r5, [r3, #0]
 8015ae2:	4606      	mov	r6, r0
 8015ae4:	460c      	mov	r4, r1
 8015ae6:	b125      	cbz	r5, 8015af2 <__swsetup_r+0x16>
 8015ae8:	69ab      	ldr	r3, [r5, #24]
 8015aea:	b913      	cbnz	r3, 8015af2 <__swsetup_r+0x16>
 8015aec:	4628      	mov	r0, r5
 8015aee:	f7ff f811 	bl	8014b14 <__sinit>
 8015af2:	4b2e      	ldr	r3, [pc, #184]	; (8015bac <__swsetup_r+0xd0>)
 8015af4:	429c      	cmp	r4, r3
 8015af6:	d10f      	bne.n	8015b18 <__swsetup_r+0x3c>
 8015af8:	686c      	ldr	r4, [r5, #4]
 8015afa:	89a3      	ldrh	r3, [r4, #12]
 8015afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015b00:	0719      	lsls	r1, r3, #28
 8015b02:	d42c      	bmi.n	8015b5e <__swsetup_r+0x82>
 8015b04:	06dd      	lsls	r5, r3, #27
 8015b06:	d411      	bmi.n	8015b2c <__swsetup_r+0x50>
 8015b08:	2309      	movs	r3, #9
 8015b0a:	6033      	str	r3, [r6, #0]
 8015b0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015b10:	81a3      	strh	r3, [r4, #12]
 8015b12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b16:	e03e      	b.n	8015b96 <__swsetup_r+0xba>
 8015b18:	4b25      	ldr	r3, [pc, #148]	; (8015bb0 <__swsetup_r+0xd4>)
 8015b1a:	429c      	cmp	r4, r3
 8015b1c:	d101      	bne.n	8015b22 <__swsetup_r+0x46>
 8015b1e:	68ac      	ldr	r4, [r5, #8]
 8015b20:	e7eb      	b.n	8015afa <__swsetup_r+0x1e>
 8015b22:	4b24      	ldr	r3, [pc, #144]	; (8015bb4 <__swsetup_r+0xd8>)
 8015b24:	429c      	cmp	r4, r3
 8015b26:	bf08      	it	eq
 8015b28:	68ec      	ldreq	r4, [r5, #12]
 8015b2a:	e7e6      	b.n	8015afa <__swsetup_r+0x1e>
 8015b2c:	0758      	lsls	r0, r3, #29
 8015b2e:	d512      	bpl.n	8015b56 <__swsetup_r+0x7a>
 8015b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b32:	b141      	cbz	r1, 8015b46 <__swsetup_r+0x6a>
 8015b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b38:	4299      	cmp	r1, r3
 8015b3a:	d002      	beq.n	8015b42 <__swsetup_r+0x66>
 8015b3c:	4630      	mov	r0, r6
 8015b3e:	f7ff f993 	bl	8014e68 <_free_r>
 8015b42:	2300      	movs	r3, #0
 8015b44:	6363      	str	r3, [r4, #52]	; 0x34
 8015b46:	89a3      	ldrh	r3, [r4, #12]
 8015b48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015b4c:	81a3      	strh	r3, [r4, #12]
 8015b4e:	2300      	movs	r3, #0
 8015b50:	6063      	str	r3, [r4, #4]
 8015b52:	6923      	ldr	r3, [r4, #16]
 8015b54:	6023      	str	r3, [r4, #0]
 8015b56:	89a3      	ldrh	r3, [r4, #12]
 8015b58:	f043 0308 	orr.w	r3, r3, #8
 8015b5c:	81a3      	strh	r3, [r4, #12]
 8015b5e:	6923      	ldr	r3, [r4, #16]
 8015b60:	b94b      	cbnz	r3, 8015b76 <__swsetup_r+0x9a>
 8015b62:	89a3      	ldrh	r3, [r4, #12]
 8015b64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015b6c:	d003      	beq.n	8015b76 <__swsetup_r+0x9a>
 8015b6e:	4621      	mov	r1, r4
 8015b70:	4630      	mov	r0, r6
 8015b72:	f000 f933 	bl	8015ddc <__smakebuf_r>
 8015b76:	89a0      	ldrh	r0, [r4, #12]
 8015b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015b7c:	f010 0301 	ands.w	r3, r0, #1
 8015b80:	d00a      	beq.n	8015b98 <__swsetup_r+0xbc>
 8015b82:	2300      	movs	r3, #0
 8015b84:	60a3      	str	r3, [r4, #8]
 8015b86:	6963      	ldr	r3, [r4, #20]
 8015b88:	425b      	negs	r3, r3
 8015b8a:	61a3      	str	r3, [r4, #24]
 8015b8c:	6923      	ldr	r3, [r4, #16]
 8015b8e:	b943      	cbnz	r3, 8015ba2 <__swsetup_r+0xc6>
 8015b90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015b94:	d1ba      	bne.n	8015b0c <__swsetup_r+0x30>
 8015b96:	bd70      	pop	{r4, r5, r6, pc}
 8015b98:	0781      	lsls	r1, r0, #30
 8015b9a:	bf58      	it	pl
 8015b9c:	6963      	ldrpl	r3, [r4, #20]
 8015b9e:	60a3      	str	r3, [r4, #8]
 8015ba0:	e7f4      	b.n	8015b8c <__swsetup_r+0xb0>
 8015ba2:	2000      	movs	r0, #0
 8015ba4:	e7f7      	b.n	8015b96 <__swsetup_r+0xba>
 8015ba6:	bf00      	nop
 8015ba8:	200000cc 	.word	0x200000cc
 8015bac:	0801a018 	.word	0x0801a018
 8015bb0:	0801a038 	.word	0x0801a038
 8015bb4:	08019ff8 	.word	0x08019ff8

08015bb8 <abort>:
 8015bb8:	b508      	push	{r3, lr}
 8015bba:	2006      	movs	r0, #6
 8015bbc:	f000 fb38 	bl	8016230 <raise>
 8015bc0:	2001      	movs	r0, #1
 8015bc2:	f7ef fb29 	bl	8005218 <_exit>
	...

08015bc8 <_close_r>:
 8015bc8:	b538      	push	{r3, r4, r5, lr}
 8015bca:	4d06      	ldr	r5, [pc, #24]	; (8015be4 <_close_r+0x1c>)
 8015bcc:	2300      	movs	r3, #0
 8015bce:	4604      	mov	r4, r0
 8015bd0:	4608      	mov	r0, r1
 8015bd2:	602b      	str	r3, [r5, #0]
 8015bd4:	f7ef fb47 	bl	8005266 <_close>
 8015bd8:	1c43      	adds	r3, r0, #1
 8015bda:	d102      	bne.n	8015be2 <_close_r+0x1a>
 8015bdc:	682b      	ldr	r3, [r5, #0]
 8015bde:	b103      	cbz	r3, 8015be2 <_close_r+0x1a>
 8015be0:	6023      	str	r3, [r4, #0]
 8015be2:	bd38      	pop	{r3, r4, r5, pc}
 8015be4:	20008d34 	.word	0x20008d34

08015be8 <__sflush_r>:
 8015be8:	898a      	ldrh	r2, [r1, #12]
 8015bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bee:	4605      	mov	r5, r0
 8015bf0:	0710      	lsls	r0, r2, #28
 8015bf2:	460c      	mov	r4, r1
 8015bf4:	d458      	bmi.n	8015ca8 <__sflush_r+0xc0>
 8015bf6:	684b      	ldr	r3, [r1, #4]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	dc05      	bgt.n	8015c08 <__sflush_r+0x20>
 8015bfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	dc02      	bgt.n	8015c08 <__sflush_r+0x20>
 8015c02:	2000      	movs	r0, #0
 8015c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015c0a:	2e00      	cmp	r6, #0
 8015c0c:	d0f9      	beq.n	8015c02 <__sflush_r+0x1a>
 8015c0e:	2300      	movs	r3, #0
 8015c10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015c14:	682f      	ldr	r7, [r5, #0]
 8015c16:	602b      	str	r3, [r5, #0]
 8015c18:	d032      	beq.n	8015c80 <__sflush_r+0x98>
 8015c1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015c1c:	89a3      	ldrh	r3, [r4, #12]
 8015c1e:	075a      	lsls	r2, r3, #29
 8015c20:	d505      	bpl.n	8015c2e <__sflush_r+0x46>
 8015c22:	6863      	ldr	r3, [r4, #4]
 8015c24:	1ac0      	subs	r0, r0, r3
 8015c26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015c28:	b10b      	cbz	r3, 8015c2e <__sflush_r+0x46>
 8015c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015c2c:	1ac0      	subs	r0, r0, r3
 8015c2e:	2300      	movs	r3, #0
 8015c30:	4602      	mov	r2, r0
 8015c32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015c34:	6a21      	ldr	r1, [r4, #32]
 8015c36:	4628      	mov	r0, r5
 8015c38:	47b0      	blx	r6
 8015c3a:	1c43      	adds	r3, r0, #1
 8015c3c:	89a3      	ldrh	r3, [r4, #12]
 8015c3e:	d106      	bne.n	8015c4e <__sflush_r+0x66>
 8015c40:	6829      	ldr	r1, [r5, #0]
 8015c42:	291d      	cmp	r1, #29
 8015c44:	d82c      	bhi.n	8015ca0 <__sflush_r+0xb8>
 8015c46:	4a2a      	ldr	r2, [pc, #168]	; (8015cf0 <__sflush_r+0x108>)
 8015c48:	40ca      	lsrs	r2, r1
 8015c4a:	07d6      	lsls	r6, r2, #31
 8015c4c:	d528      	bpl.n	8015ca0 <__sflush_r+0xb8>
 8015c4e:	2200      	movs	r2, #0
 8015c50:	6062      	str	r2, [r4, #4]
 8015c52:	04d9      	lsls	r1, r3, #19
 8015c54:	6922      	ldr	r2, [r4, #16]
 8015c56:	6022      	str	r2, [r4, #0]
 8015c58:	d504      	bpl.n	8015c64 <__sflush_r+0x7c>
 8015c5a:	1c42      	adds	r2, r0, #1
 8015c5c:	d101      	bne.n	8015c62 <__sflush_r+0x7a>
 8015c5e:	682b      	ldr	r3, [r5, #0]
 8015c60:	b903      	cbnz	r3, 8015c64 <__sflush_r+0x7c>
 8015c62:	6560      	str	r0, [r4, #84]	; 0x54
 8015c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015c66:	602f      	str	r7, [r5, #0]
 8015c68:	2900      	cmp	r1, #0
 8015c6a:	d0ca      	beq.n	8015c02 <__sflush_r+0x1a>
 8015c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c70:	4299      	cmp	r1, r3
 8015c72:	d002      	beq.n	8015c7a <__sflush_r+0x92>
 8015c74:	4628      	mov	r0, r5
 8015c76:	f7ff f8f7 	bl	8014e68 <_free_r>
 8015c7a:	2000      	movs	r0, #0
 8015c7c:	6360      	str	r0, [r4, #52]	; 0x34
 8015c7e:	e7c1      	b.n	8015c04 <__sflush_r+0x1c>
 8015c80:	6a21      	ldr	r1, [r4, #32]
 8015c82:	2301      	movs	r3, #1
 8015c84:	4628      	mov	r0, r5
 8015c86:	47b0      	blx	r6
 8015c88:	1c41      	adds	r1, r0, #1
 8015c8a:	d1c7      	bne.n	8015c1c <__sflush_r+0x34>
 8015c8c:	682b      	ldr	r3, [r5, #0]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d0c4      	beq.n	8015c1c <__sflush_r+0x34>
 8015c92:	2b1d      	cmp	r3, #29
 8015c94:	d001      	beq.n	8015c9a <__sflush_r+0xb2>
 8015c96:	2b16      	cmp	r3, #22
 8015c98:	d101      	bne.n	8015c9e <__sflush_r+0xb6>
 8015c9a:	602f      	str	r7, [r5, #0]
 8015c9c:	e7b1      	b.n	8015c02 <__sflush_r+0x1a>
 8015c9e:	89a3      	ldrh	r3, [r4, #12]
 8015ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ca4:	81a3      	strh	r3, [r4, #12]
 8015ca6:	e7ad      	b.n	8015c04 <__sflush_r+0x1c>
 8015ca8:	690f      	ldr	r7, [r1, #16]
 8015caa:	2f00      	cmp	r7, #0
 8015cac:	d0a9      	beq.n	8015c02 <__sflush_r+0x1a>
 8015cae:	0793      	lsls	r3, r2, #30
 8015cb0:	680e      	ldr	r6, [r1, #0]
 8015cb2:	bf08      	it	eq
 8015cb4:	694b      	ldreq	r3, [r1, #20]
 8015cb6:	600f      	str	r7, [r1, #0]
 8015cb8:	bf18      	it	ne
 8015cba:	2300      	movne	r3, #0
 8015cbc:	eba6 0807 	sub.w	r8, r6, r7
 8015cc0:	608b      	str	r3, [r1, #8]
 8015cc2:	f1b8 0f00 	cmp.w	r8, #0
 8015cc6:	dd9c      	ble.n	8015c02 <__sflush_r+0x1a>
 8015cc8:	6a21      	ldr	r1, [r4, #32]
 8015cca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015ccc:	4643      	mov	r3, r8
 8015cce:	463a      	mov	r2, r7
 8015cd0:	4628      	mov	r0, r5
 8015cd2:	47b0      	blx	r6
 8015cd4:	2800      	cmp	r0, #0
 8015cd6:	dc06      	bgt.n	8015ce6 <__sflush_r+0xfe>
 8015cd8:	89a3      	ldrh	r3, [r4, #12]
 8015cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015cde:	81a3      	strh	r3, [r4, #12]
 8015ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ce4:	e78e      	b.n	8015c04 <__sflush_r+0x1c>
 8015ce6:	4407      	add	r7, r0
 8015ce8:	eba8 0800 	sub.w	r8, r8, r0
 8015cec:	e7e9      	b.n	8015cc2 <__sflush_r+0xda>
 8015cee:	bf00      	nop
 8015cf0:	20400001 	.word	0x20400001

08015cf4 <_fflush_r>:
 8015cf4:	b538      	push	{r3, r4, r5, lr}
 8015cf6:	690b      	ldr	r3, [r1, #16]
 8015cf8:	4605      	mov	r5, r0
 8015cfa:	460c      	mov	r4, r1
 8015cfc:	b913      	cbnz	r3, 8015d04 <_fflush_r+0x10>
 8015cfe:	2500      	movs	r5, #0
 8015d00:	4628      	mov	r0, r5
 8015d02:	bd38      	pop	{r3, r4, r5, pc}
 8015d04:	b118      	cbz	r0, 8015d0e <_fflush_r+0x1a>
 8015d06:	6983      	ldr	r3, [r0, #24]
 8015d08:	b90b      	cbnz	r3, 8015d0e <_fflush_r+0x1a>
 8015d0a:	f7fe ff03 	bl	8014b14 <__sinit>
 8015d0e:	4b14      	ldr	r3, [pc, #80]	; (8015d60 <_fflush_r+0x6c>)
 8015d10:	429c      	cmp	r4, r3
 8015d12:	d11b      	bne.n	8015d4c <_fflush_r+0x58>
 8015d14:	686c      	ldr	r4, [r5, #4]
 8015d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d0ef      	beq.n	8015cfe <_fflush_r+0xa>
 8015d1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015d20:	07d0      	lsls	r0, r2, #31
 8015d22:	d404      	bmi.n	8015d2e <_fflush_r+0x3a>
 8015d24:	0599      	lsls	r1, r3, #22
 8015d26:	d402      	bmi.n	8015d2e <_fflush_r+0x3a>
 8015d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015d2a:	f7ff f874 	bl	8014e16 <__retarget_lock_acquire_recursive>
 8015d2e:	4628      	mov	r0, r5
 8015d30:	4621      	mov	r1, r4
 8015d32:	f7ff ff59 	bl	8015be8 <__sflush_r>
 8015d36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015d38:	07da      	lsls	r2, r3, #31
 8015d3a:	4605      	mov	r5, r0
 8015d3c:	d4e0      	bmi.n	8015d00 <_fflush_r+0xc>
 8015d3e:	89a3      	ldrh	r3, [r4, #12]
 8015d40:	059b      	lsls	r3, r3, #22
 8015d42:	d4dd      	bmi.n	8015d00 <_fflush_r+0xc>
 8015d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015d46:	f7ff f867 	bl	8014e18 <__retarget_lock_release_recursive>
 8015d4a:	e7d9      	b.n	8015d00 <_fflush_r+0xc>
 8015d4c:	4b05      	ldr	r3, [pc, #20]	; (8015d64 <_fflush_r+0x70>)
 8015d4e:	429c      	cmp	r4, r3
 8015d50:	d101      	bne.n	8015d56 <_fflush_r+0x62>
 8015d52:	68ac      	ldr	r4, [r5, #8]
 8015d54:	e7df      	b.n	8015d16 <_fflush_r+0x22>
 8015d56:	4b04      	ldr	r3, [pc, #16]	; (8015d68 <_fflush_r+0x74>)
 8015d58:	429c      	cmp	r4, r3
 8015d5a:	bf08      	it	eq
 8015d5c:	68ec      	ldreq	r4, [r5, #12]
 8015d5e:	e7da      	b.n	8015d16 <_fflush_r+0x22>
 8015d60:	0801a018 	.word	0x0801a018
 8015d64:	0801a038 	.word	0x0801a038
 8015d68:	08019ff8 	.word	0x08019ff8

08015d6c <_lseek_r>:
 8015d6c:	b538      	push	{r3, r4, r5, lr}
 8015d6e:	4d07      	ldr	r5, [pc, #28]	; (8015d8c <_lseek_r+0x20>)
 8015d70:	4604      	mov	r4, r0
 8015d72:	4608      	mov	r0, r1
 8015d74:	4611      	mov	r1, r2
 8015d76:	2200      	movs	r2, #0
 8015d78:	602a      	str	r2, [r5, #0]
 8015d7a:	461a      	mov	r2, r3
 8015d7c:	f7ef fa9a 	bl	80052b4 <_lseek>
 8015d80:	1c43      	adds	r3, r0, #1
 8015d82:	d102      	bne.n	8015d8a <_lseek_r+0x1e>
 8015d84:	682b      	ldr	r3, [r5, #0]
 8015d86:	b103      	cbz	r3, 8015d8a <_lseek_r+0x1e>
 8015d88:	6023      	str	r3, [r4, #0]
 8015d8a:	bd38      	pop	{r3, r4, r5, pc}
 8015d8c:	20008d34 	.word	0x20008d34

08015d90 <__swhatbuf_r>:
 8015d90:	b570      	push	{r4, r5, r6, lr}
 8015d92:	460e      	mov	r6, r1
 8015d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d98:	2900      	cmp	r1, #0
 8015d9a:	b096      	sub	sp, #88	; 0x58
 8015d9c:	4614      	mov	r4, r2
 8015d9e:	461d      	mov	r5, r3
 8015da0:	da08      	bge.n	8015db4 <__swhatbuf_r+0x24>
 8015da2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015da6:	2200      	movs	r2, #0
 8015da8:	602a      	str	r2, [r5, #0]
 8015daa:	061a      	lsls	r2, r3, #24
 8015dac:	d410      	bmi.n	8015dd0 <__swhatbuf_r+0x40>
 8015dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015db2:	e00e      	b.n	8015dd2 <__swhatbuf_r+0x42>
 8015db4:	466a      	mov	r2, sp
 8015db6:	f000 fa57 	bl	8016268 <_fstat_r>
 8015dba:	2800      	cmp	r0, #0
 8015dbc:	dbf1      	blt.n	8015da2 <__swhatbuf_r+0x12>
 8015dbe:	9a01      	ldr	r2, [sp, #4]
 8015dc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015dc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015dc8:	425a      	negs	r2, r3
 8015dca:	415a      	adcs	r2, r3
 8015dcc:	602a      	str	r2, [r5, #0]
 8015dce:	e7ee      	b.n	8015dae <__swhatbuf_r+0x1e>
 8015dd0:	2340      	movs	r3, #64	; 0x40
 8015dd2:	2000      	movs	r0, #0
 8015dd4:	6023      	str	r3, [r4, #0]
 8015dd6:	b016      	add	sp, #88	; 0x58
 8015dd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08015ddc <__smakebuf_r>:
 8015ddc:	898b      	ldrh	r3, [r1, #12]
 8015dde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015de0:	079d      	lsls	r5, r3, #30
 8015de2:	4606      	mov	r6, r0
 8015de4:	460c      	mov	r4, r1
 8015de6:	d507      	bpl.n	8015df8 <__smakebuf_r+0x1c>
 8015de8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015dec:	6023      	str	r3, [r4, #0]
 8015dee:	6123      	str	r3, [r4, #16]
 8015df0:	2301      	movs	r3, #1
 8015df2:	6163      	str	r3, [r4, #20]
 8015df4:	b002      	add	sp, #8
 8015df6:	bd70      	pop	{r4, r5, r6, pc}
 8015df8:	ab01      	add	r3, sp, #4
 8015dfa:	466a      	mov	r2, sp
 8015dfc:	f7ff ffc8 	bl	8015d90 <__swhatbuf_r>
 8015e00:	9900      	ldr	r1, [sp, #0]
 8015e02:	4605      	mov	r5, r0
 8015e04:	4630      	mov	r0, r6
 8015e06:	f7ff f89b 	bl	8014f40 <_malloc_r>
 8015e0a:	b948      	cbnz	r0, 8015e20 <__smakebuf_r+0x44>
 8015e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e10:	059a      	lsls	r2, r3, #22
 8015e12:	d4ef      	bmi.n	8015df4 <__smakebuf_r+0x18>
 8015e14:	f023 0303 	bic.w	r3, r3, #3
 8015e18:	f043 0302 	orr.w	r3, r3, #2
 8015e1c:	81a3      	strh	r3, [r4, #12]
 8015e1e:	e7e3      	b.n	8015de8 <__smakebuf_r+0xc>
 8015e20:	4b0d      	ldr	r3, [pc, #52]	; (8015e58 <__smakebuf_r+0x7c>)
 8015e22:	62b3      	str	r3, [r6, #40]	; 0x28
 8015e24:	89a3      	ldrh	r3, [r4, #12]
 8015e26:	6020      	str	r0, [r4, #0]
 8015e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e2c:	81a3      	strh	r3, [r4, #12]
 8015e2e:	9b00      	ldr	r3, [sp, #0]
 8015e30:	6163      	str	r3, [r4, #20]
 8015e32:	9b01      	ldr	r3, [sp, #4]
 8015e34:	6120      	str	r0, [r4, #16]
 8015e36:	b15b      	cbz	r3, 8015e50 <__smakebuf_r+0x74>
 8015e38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e3c:	4630      	mov	r0, r6
 8015e3e:	f000 fa25 	bl	801628c <_isatty_r>
 8015e42:	b128      	cbz	r0, 8015e50 <__smakebuf_r+0x74>
 8015e44:	89a3      	ldrh	r3, [r4, #12]
 8015e46:	f023 0303 	bic.w	r3, r3, #3
 8015e4a:	f043 0301 	orr.w	r3, r3, #1
 8015e4e:	81a3      	strh	r3, [r4, #12]
 8015e50:	89a0      	ldrh	r0, [r4, #12]
 8015e52:	4305      	orrs	r5, r0
 8015e54:	81a5      	strh	r5, [r4, #12]
 8015e56:	e7cd      	b.n	8015df4 <__smakebuf_r+0x18>
 8015e58:	08014aad 	.word	0x08014aad

08015e5c <memmove>:
 8015e5c:	4288      	cmp	r0, r1
 8015e5e:	b510      	push	{r4, lr}
 8015e60:	eb01 0402 	add.w	r4, r1, r2
 8015e64:	d902      	bls.n	8015e6c <memmove+0x10>
 8015e66:	4284      	cmp	r4, r0
 8015e68:	4623      	mov	r3, r4
 8015e6a:	d807      	bhi.n	8015e7c <memmove+0x20>
 8015e6c:	1e43      	subs	r3, r0, #1
 8015e6e:	42a1      	cmp	r1, r4
 8015e70:	d008      	beq.n	8015e84 <memmove+0x28>
 8015e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015e76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015e7a:	e7f8      	b.n	8015e6e <memmove+0x12>
 8015e7c:	4402      	add	r2, r0
 8015e7e:	4601      	mov	r1, r0
 8015e80:	428a      	cmp	r2, r1
 8015e82:	d100      	bne.n	8015e86 <memmove+0x2a>
 8015e84:	bd10      	pop	{r4, pc}
 8015e86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015e8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015e8e:	e7f7      	b.n	8015e80 <memmove+0x24>

08015e90 <__malloc_lock>:
 8015e90:	4801      	ldr	r0, [pc, #4]	; (8015e98 <__malloc_lock+0x8>)
 8015e92:	f7fe bfc0 	b.w	8014e16 <__retarget_lock_acquire_recursive>
 8015e96:	bf00      	nop
 8015e98:	20008d28 	.word	0x20008d28

08015e9c <__malloc_unlock>:
 8015e9c:	4801      	ldr	r0, [pc, #4]	; (8015ea4 <__malloc_unlock+0x8>)
 8015e9e:	f7fe bfbb 	b.w	8014e18 <__retarget_lock_release_recursive>
 8015ea2:	bf00      	nop
 8015ea4:	20008d28 	.word	0x20008d28

08015ea8 <_realloc_r>:
 8015ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015eac:	4680      	mov	r8, r0
 8015eae:	4614      	mov	r4, r2
 8015eb0:	460e      	mov	r6, r1
 8015eb2:	b921      	cbnz	r1, 8015ebe <_realloc_r+0x16>
 8015eb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015eb8:	4611      	mov	r1, r2
 8015eba:	f7ff b841 	b.w	8014f40 <_malloc_r>
 8015ebe:	b92a      	cbnz	r2, 8015ecc <_realloc_r+0x24>
 8015ec0:	f7fe ffd2 	bl	8014e68 <_free_r>
 8015ec4:	4625      	mov	r5, r4
 8015ec6:	4628      	mov	r0, r5
 8015ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ecc:	f000 f9ee 	bl	80162ac <_malloc_usable_size_r>
 8015ed0:	4284      	cmp	r4, r0
 8015ed2:	4607      	mov	r7, r0
 8015ed4:	d802      	bhi.n	8015edc <_realloc_r+0x34>
 8015ed6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015eda:	d812      	bhi.n	8015f02 <_realloc_r+0x5a>
 8015edc:	4621      	mov	r1, r4
 8015ede:	4640      	mov	r0, r8
 8015ee0:	f7ff f82e 	bl	8014f40 <_malloc_r>
 8015ee4:	4605      	mov	r5, r0
 8015ee6:	2800      	cmp	r0, #0
 8015ee8:	d0ed      	beq.n	8015ec6 <_realloc_r+0x1e>
 8015eea:	42bc      	cmp	r4, r7
 8015eec:	4622      	mov	r2, r4
 8015eee:	4631      	mov	r1, r6
 8015ef0:	bf28      	it	cs
 8015ef2:	463a      	movcs	r2, r7
 8015ef4:	f7fe ffa2 	bl	8014e3c <memcpy>
 8015ef8:	4631      	mov	r1, r6
 8015efa:	4640      	mov	r0, r8
 8015efc:	f7fe ffb4 	bl	8014e68 <_free_r>
 8015f00:	e7e1      	b.n	8015ec6 <_realloc_r+0x1e>
 8015f02:	4635      	mov	r5, r6
 8015f04:	e7df      	b.n	8015ec6 <_realloc_r+0x1e>

08015f06 <__ssputs_r>:
 8015f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f0a:	688e      	ldr	r6, [r1, #8]
 8015f0c:	429e      	cmp	r6, r3
 8015f0e:	4682      	mov	sl, r0
 8015f10:	460c      	mov	r4, r1
 8015f12:	4690      	mov	r8, r2
 8015f14:	461f      	mov	r7, r3
 8015f16:	d838      	bhi.n	8015f8a <__ssputs_r+0x84>
 8015f18:	898a      	ldrh	r2, [r1, #12]
 8015f1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015f1e:	d032      	beq.n	8015f86 <__ssputs_r+0x80>
 8015f20:	6825      	ldr	r5, [r4, #0]
 8015f22:	6909      	ldr	r1, [r1, #16]
 8015f24:	eba5 0901 	sub.w	r9, r5, r1
 8015f28:	6965      	ldr	r5, [r4, #20]
 8015f2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015f2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015f32:	3301      	adds	r3, #1
 8015f34:	444b      	add	r3, r9
 8015f36:	106d      	asrs	r5, r5, #1
 8015f38:	429d      	cmp	r5, r3
 8015f3a:	bf38      	it	cc
 8015f3c:	461d      	movcc	r5, r3
 8015f3e:	0553      	lsls	r3, r2, #21
 8015f40:	d531      	bpl.n	8015fa6 <__ssputs_r+0xa0>
 8015f42:	4629      	mov	r1, r5
 8015f44:	f7fe fffc 	bl	8014f40 <_malloc_r>
 8015f48:	4606      	mov	r6, r0
 8015f4a:	b950      	cbnz	r0, 8015f62 <__ssputs_r+0x5c>
 8015f4c:	230c      	movs	r3, #12
 8015f4e:	f8ca 3000 	str.w	r3, [sl]
 8015f52:	89a3      	ldrh	r3, [r4, #12]
 8015f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f58:	81a3      	strh	r3, [r4, #12]
 8015f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f62:	6921      	ldr	r1, [r4, #16]
 8015f64:	464a      	mov	r2, r9
 8015f66:	f7fe ff69 	bl	8014e3c <memcpy>
 8015f6a:	89a3      	ldrh	r3, [r4, #12]
 8015f6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f74:	81a3      	strh	r3, [r4, #12]
 8015f76:	6126      	str	r6, [r4, #16]
 8015f78:	6165      	str	r5, [r4, #20]
 8015f7a:	444e      	add	r6, r9
 8015f7c:	eba5 0509 	sub.w	r5, r5, r9
 8015f80:	6026      	str	r6, [r4, #0]
 8015f82:	60a5      	str	r5, [r4, #8]
 8015f84:	463e      	mov	r6, r7
 8015f86:	42be      	cmp	r6, r7
 8015f88:	d900      	bls.n	8015f8c <__ssputs_r+0x86>
 8015f8a:	463e      	mov	r6, r7
 8015f8c:	6820      	ldr	r0, [r4, #0]
 8015f8e:	4632      	mov	r2, r6
 8015f90:	4641      	mov	r1, r8
 8015f92:	f7ff ff63 	bl	8015e5c <memmove>
 8015f96:	68a3      	ldr	r3, [r4, #8]
 8015f98:	1b9b      	subs	r3, r3, r6
 8015f9a:	60a3      	str	r3, [r4, #8]
 8015f9c:	6823      	ldr	r3, [r4, #0]
 8015f9e:	4433      	add	r3, r6
 8015fa0:	6023      	str	r3, [r4, #0]
 8015fa2:	2000      	movs	r0, #0
 8015fa4:	e7db      	b.n	8015f5e <__ssputs_r+0x58>
 8015fa6:	462a      	mov	r2, r5
 8015fa8:	f7ff ff7e 	bl	8015ea8 <_realloc_r>
 8015fac:	4606      	mov	r6, r0
 8015fae:	2800      	cmp	r0, #0
 8015fb0:	d1e1      	bne.n	8015f76 <__ssputs_r+0x70>
 8015fb2:	6921      	ldr	r1, [r4, #16]
 8015fb4:	4650      	mov	r0, sl
 8015fb6:	f7fe ff57 	bl	8014e68 <_free_r>
 8015fba:	e7c7      	b.n	8015f4c <__ssputs_r+0x46>

08015fbc <_svfiprintf_r>:
 8015fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fc0:	4698      	mov	r8, r3
 8015fc2:	898b      	ldrh	r3, [r1, #12]
 8015fc4:	061b      	lsls	r3, r3, #24
 8015fc6:	b09d      	sub	sp, #116	; 0x74
 8015fc8:	4607      	mov	r7, r0
 8015fca:	460d      	mov	r5, r1
 8015fcc:	4614      	mov	r4, r2
 8015fce:	d50e      	bpl.n	8015fee <_svfiprintf_r+0x32>
 8015fd0:	690b      	ldr	r3, [r1, #16]
 8015fd2:	b963      	cbnz	r3, 8015fee <_svfiprintf_r+0x32>
 8015fd4:	2140      	movs	r1, #64	; 0x40
 8015fd6:	f7fe ffb3 	bl	8014f40 <_malloc_r>
 8015fda:	6028      	str	r0, [r5, #0]
 8015fdc:	6128      	str	r0, [r5, #16]
 8015fde:	b920      	cbnz	r0, 8015fea <_svfiprintf_r+0x2e>
 8015fe0:	230c      	movs	r3, #12
 8015fe2:	603b      	str	r3, [r7, #0]
 8015fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015fe8:	e0d1      	b.n	801618e <_svfiprintf_r+0x1d2>
 8015fea:	2340      	movs	r3, #64	; 0x40
 8015fec:	616b      	str	r3, [r5, #20]
 8015fee:	2300      	movs	r3, #0
 8015ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8015ff2:	2320      	movs	r3, #32
 8015ff4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ffc:	2330      	movs	r3, #48	; 0x30
 8015ffe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80161a8 <_svfiprintf_r+0x1ec>
 8016002:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016006:	f04f 0901 	mov.w	r9, #1
 801600a:	4623      	mov	r3, r4
 801600c:	469a      	mov	sl, r3
 801600e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016012:	b10a      	cbz	r2, 8016018 <_svfiprintf_r+0x5c>
 8016014:	2a25      	cmp	r2, #37	; 0x25
 8016016:	d1f9      	bne.n	801600c <_svfiprintf_r+0x50>
 8016018:	ebba 0b04 	subs.w	fp, sl, r4
 801601c:	d00b      	beq.n	8016036 <_svfiprintf_r+0x7a>
 801601e:	465b      	mov	r3, fp
 8016020:	4622      	mov	r2, r4
 8016022:	4629      	mov	r1, r5
 8016024:	4638      	mov	r0, r7
 8016026:	f7ff ff6e 	bl	8015f06 <__ssputs_r>
 801602a:	3001      	adds	r0, #1
 801602c:	f000 80aa 	beq.w	8016184 <_svfiprintf_r+0x1c8>
 8016030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016032:	445a      	add	r2, fp
 8016034:	9209      	str	r2, [sp, #36]	; 0x24
 8016036:	f89a 3000 	ldrb.w	r3, [sl]
 801603a:	2b00      	cmp	r3, #0
 801603c:	f000 80a2 	beq.w	8016184 <_svfiprintf_r+0x1c8>
 8016040:	2300      	movs	r3, #0
 8016042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801604a:	f10a 0a01 	add.w	sl, sl, #1
 801604e:	9304      	str	r3, [sp, #16]
 8016050:	9307      	str	r3, [sp, #28]
 8016052:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016056:	931a      	str	r3, [sp, #104]	; 0x68
 8016058:	4654      	mov	r4, sl
 801605a:	2205      	movs	r2, #5
 801605c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016060:	4851      	ldr	r0, [pc, #324]	; (80161a8 <_svfiprintf_r+0x1ec>)
 8016062:	f7ea f8bd 	bl	80001e0 <memchr>
 8016066:	9a04      	ldr	r2, [sp, #16]
 8016068:	b9d8      	cbnz	r0, 80160a2 <_svfiprintf_r+0xe6>
 801606a:	06d0      	lsls	r0, r2, #27
 801606c:	bf44      	itt	mi
 801606e:	2320      	movmi	r3, #32
 8016070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016074:	0711      	lsls	r1, r2, #28
 8016076:	bf44      	itt	mi
 8016078:	232b      	movmi	r3, #43	; 0x2b
 801607a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801607e:	f89a 3000 	ldrb.w	r3, [sl]
 8016082:	2b2a      	cmp	r3, #42	; 0x2a
 8016084:	d015      	beq.n	80160b2 <_svfiprintf_r+0xf6>
 8016086:	9a07      	ldr	r2, [sp, #28]
 8016088:	4654      	mov	r4, sl
 801608a:	2000      	movs	r0, #0
 801608c:	f04f 0c0a 	mov.w	ip, #10
 8016090:	4621      	mov	r1, r4
 8016092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016096:	3b30      	subs	r3, #48	; 0x30
 8016098:	2b09      	cmp	r3, #9
 801609a:	d94e      	bls.n	801613a <_svfiprintf_r+0x17e>
 801609c:	b1b0      	cbz	r0, 80160cc <_svfiprintf_r+0x110>
 801609e:	9207      	str	r2, [sp, #28]
 80160a0:	e014      	b.n	80160cc <_svfiprintf_r+0x110>
 80160a2:	eba0 0308 	sub.w	r3, r0, r8
 80160a6:	fa09 f303 	lsl.w	r3, r9, r3
 80160aa:	4313      	orrs	r3, r2
 80160ac:	9304      	str	r3, [sp, #16]
 80160ae:	46a2      	mov	sl, r4
 80160b0:	e7d2      	b.n	8016058 <_svfiprintf_r+0x9c>
 80160b2:	9b03      	ldr	r3, [sp, #12]
 80160b4:	1d19      	adds	r1, r3, #4
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	9103      	str	r1, [sp, #12]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	bfbb      	ittet	lt
 80160be:	425b      	neglt	r3, r3
 80160c0:	f042 0202 	orrlt.w	r2, r2, #2
 80160c4:	9307      	strge	r3, [sp, #28]
 80160c6:	9307      	strlt	r3, [sp, #28]
 80160c8:	bfb8      	it	lt
 80160ca:	9204      	strlt	r2, [sp, #16]
 80160cc:	7823      	ldrb	r3, [r4, #0]
 80160ce:	2b2e      	cmp	r3, #46	; 0x2e
 80160d0:	d10c      	bne.n	80160ec <_svfiprintf_r+0x130>
 80160d2:	7863      	ldrb	r3, [r4, #1]
 80160d4:	2b2a      	cmp	r3, #42	; 0x2a
 80160d6:	d135      	bne.n	8016144 <_svfiprintf_r+0x188>
 80160d8:	9b03      	ldr	r3, [sp, #12]
 80160da:	1d1a      	adds	r2, r3, #4
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	9203      	str	r2, [sp, #12]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	bfb8      	it	lt
 80160e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80160e8:	3402      	adds	r4, #2
 80160ea:	9305      	str	r3, [sp, #20]
 80160ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80161b8 <_svfiprintf_r+0x1fc>
 80160f0:	7821      	ldrb	r1, [r4, #0]
 80160f2:	2203      	movs	r2, #3
 80160f4:	4650      	mov	r0, sl
 80160f6:	f7ea f873 	bl	80001e0 <memchr>
 80160fa:	b140      	cbz	r0, 801610e <_svfiprintf_r+0x152>
 80160fc:	2340      	movs	r3, #64	; 0x40
 80160fe:	eba0 000a 	sub.w	r0, r0, sl
 8016102:	fa03 f000 	lsl.w	r0, r3, r0
 8016106:	9b04      	ldr	r3, [sp, #16]
 8016108:	4303      	orrs	r3, r0
 801610a:	3401      	adds	r4, #1
 801610c:	9304      	str	r3, [sp, #16]
 801610e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016112:	4826      	ldr	r0, [pc, #152]	; (80161ac <_svfiprintf_r+0x1f0>)
 8016114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016118:	2206      	movs	r2, #6
 801611a:	f7ea f861 	bl	80001e0 <memchr>
 801611e:	2800      	cmp	r0, #0
 8016120:	d038      	beq.n	8016194 <_svfiprintf_r+0x1d8>
 8016122:	4b23      	ldr	r3, [pc, #140]	; (80161b0 <_svfiprintf_r+0x1f4>)
 8016124:	bb1b      	cbnz	r3, 801616e <_svfiprintf_r+0x1b2>
 8016126:	9b03      	ldr	r3, [sp, #12]
 8016128:	3307      	adds	r3, #7
 801612a:	f023 0307 	bic.w	r3, r3, #7
 801612e:	3308      	adds	r3, #8
 8016130:	9303      	str	r3, [sp, #12]
 8016132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016134:	4433      	add	r3, r6
 8016136:	9309      	str	r3, [sp, #36]	; 0x24
 8016138:	e767      	b.n	801600a <_svfiprintf_r+0x4e>
 801613a:	fb0c 3202 	mla	r2, ip, r2, r3
 801613e:	460c      	mov	r4, r1
 8016140:	2001      	movs	r0, #1
 8016142:	e7a5      	b.n	8016090 <_svfiprintf_r+0xd4>
 8016144:	2300      	movs	r3, #0
 8016146:	3401      	adds	r4, #1
 8016148:	9305      	str	r3, [sp, #20]
 801614a:	4619      	mov	r1, r3
 801614c:	f04f 0c0a 	mov.w	ip, #10
 8016150:	4620      	mov	r0, r4
 8016152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016156:	3a30      	subs	r2, #48	; 0x30
 8016158:	2a09      	cmp	r2, #9
 801615a:	d903      	bls.n	8016164 <_svfiprintf_r+0x1a8>
 801615c:	2b00      	cmp	r3, #0
 801615e:	d0c5      	beq.n	80160ec <_svfiprintf_r+0x130>
 8016160:	9105      	str	r1, [sp, #20]
 8016162:	e7c3      	b.n	80160ec <_svfiprintf_r+0x130>
 8016164:	fb0c 2101 	mla	r1, ip, r1, r2
 8016168:	4604      	mov	r4, r0
 801616a:	2301      	movs	r3, #1
 801616c:	e7f0      	b.n	8016150 <_svfiprintf_r+0x194>
 801616e:	ab03      	add	r3, sp, #12
 8016170:	9300      	str	r3, [sp, #0]
 8016172:	462a      	mov	r2, r5
 8016174:	4b0f      	ldr	r3, [pc, #60]	; (80161b4 <_svfiprintf_r+0x1f8>)
 8016176:	a904      	add	r1, sp, #16
 8016178:	4638      	mov	r0, r7
 801617a:	f3af 8000 	nop.w
 801617e:	1c42      	adds	r2, r0, #1
 8016180:	4606      	mov	r6, r0
 8016182:	d1d6      	bne.n	8016132 <_svfiprintf_r+0x176>
 8016184:	89ab      	ldrh	r3, [r5, #12]
 8016186:	065b      	lsls	r3, r3, #25
 8016188:	f53f af2c 	bmi.w	8015fe4 <_svfiprintf_r+0x28>
 801618c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801618e:	b01d      	add	sp, #116	; 0x74
 8016190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016194:	ab03      	add	r3, sp, #12
 8016196:	9300      	str	r3, [sp, #0]
 8016198:	462a      	mov	r2, r5
 801619a:	4b06      	ldr	r3, [pc, #24]	; (80161b4 <_svfiprintf_r+0x1f8>)
 801619c:	a904      	add	r1, sp, #16
 801619e:	4638      	mov	r0, r7
 80161a0:	f7ff f90a 	bl	80153b8 <_printf_i>
 80161a4:	e7eb      	b.n	801617e <_svfiprintf_r+0x1c2>
 80161a6:	bf00      	nop
 80161a8:	0801a05c 	.word	0x0801a05c
 80161ac:	0801a066 	.word	0x0801a066
 80161b0:	00000000 	.word	0x00000000
 80161b4:	08015f07 	.word	0x08015f07
 80161b8:	0801a062 	.word	0x0801a062

080161bc <_read_r>:
 80161bc:	b538      	push	{r3, r4, r5, lr}
 80161be:	4d07      	ldr	r5, [pc, #28]	; (80161dc <_read_r+0x20>)
 80161c0:	4604      	mov	r4, r0
 80161c2:	4608      	mov	r0, r1
 80161c4:	4611      	mov	r1, r2
 80161c6:	2200      	movs	r2, #0
 80161c8:	602a      	str	r2, [r5, #0]
 80161ca:	461a      	mov	r2, r3
 80161cc:	f7ef f82e 	bl	800522c <_read>
 80161d0:	1c43      	adds	r3, r0, #1
 80161d2:	d102      	bne.n	80161da <_read_r+0x1e>
 80161d4:	682b      	ldr	r3, [r5, #0]
 80161d6:	b103      	cbz	r3, 80161da <_read_r+0x1e>
 80161d8:	6023      	str	r3, [r4, #0]
 80161da:	bd38      	pop	{r3, r4, r5, pc}
 80161dc:	20008d34 	.word	0x20008d34

080161e0 <_raise_r>:
 80161e0:	291f      	cmp	r1, #31
 80161e2:	b538      	push	{r3, r4, r5, lr}
 80161e4:	4604      	mov	r4, r0
 80161e6:	460d      	mov	r5, r1
 80161e8:	d904      	bls.n	80161f4 <_raise_r+0x14>
 80161ea:	2316      	movs	r3, #22
 80161ec:	6003      	str	r3, [r0, #0]
 80161ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80161f2:	bd38      	pop	{r3, r4, r5, pc}
 80161f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80161f6:	b112      	cbz	r2, 80161fe <_raise_r+0x1e>
 80161f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80161fc:	b94b      	cbnz	r3, 8016212 <_raise_r+0x32>
 80161fe:	4620      	mov	r0, r4
 8016200:	f000 f830 	bl	8016264 <_getpid_r>
 8016204:	462a      	mov	r2, r5
 8016206:	4601      	mov	r1, r0
 8016208:	4620      	mov	r0, r4
 801620a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801620e:	f000 b817 	b.w	8016240 <_kill_r>
 8016212:	2b01      	cmp	r3, #1
 8016214:	d00a      	beq.n	801622c <_raise_r+0x4c>
 8016216:	1c59      	adds	r1, r3, #1
 8016218:	d103      	bne.n	8016222 <_raise_r+0x42>
 801621a:	2316      	movs	r3, #22
 801621c:	6003      	str	r3, [r0, #0]
 801621e:	2001      	movs	r0, #1
 8016220:	e7e7      	b.n	80161f2 <_raise_r+0x12>
 8016222:	2400      	movs	r4, #0
 8016224:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016228:	4628      	mov	r0, r5
 801622a:	4798      	blx	r3
 801622c:	2000      	movs	r0, #0
 801622e:	e7e0      	b.n	80161f2 <_raise_r+0x12>

08016230 <raise>:
 8016230:	4b02      	ldr	r3, [pc, #8]	; (801623c <raise+0xc>)
 8016232:	4601      	mov	r1, r0
 8016234:	6818      	ldr	r0, [r3, #0]
 8016236:	f7ff bfd3 	b.w	80161e0 <_raise_r>
 801623a:	bf00      	nop
 801623c:	200000cc 	.word	0x200000cc

08016240 <_kill_r>:
 8016240:	b538      	push	{r3, r4, r5, lr}
 8016242:	4d07      	ldr	r5, [pc, #28]	; (8016260 <_kill_r+0x20>)
 8016244:	2300      	movs	r3, #0
 8016246:	4604      	mov	r4, r0
 8016248:	4608      	mov	r0, r1
 801624a:	4611      	mov	r1, r2
 801624c:	602b      	str	r3, [r5, #0]
 801624e:	f7ee ffd3 	bl	80051f8 <_kill>
 8016252:	1c43      	adds	r3, r0, #1
 8016254:	d102      	bne.n	801625c <_kill_r+0x1c>
 8016256:	682b      	ldr	r3, [r5, #0]
 8016258:	b103      	cbz	r3, 801625c <_kill_r+0x1c>
 801625a:	6023      	str	r3, [r4, #0]
 801625c:	bd38      	pop	{r3, r4, r5, pc}
 801625e:	bf00      	nop
 8016260:	20008d34 	.word	0x20008d34

08016264 <_getpid_r>:
 8016264:	f7ee bfc0 	b.w	80051e8 <_getpid>

08016268 <_fstat_r>:
 8016268:	b538      	push	{r3, r4, r5, lr}
 801626a:	4d07      	ldr	r5, [pc, #28]	; (8016288 <_fstat_r+0x20>)
 801626c:	2300      	movs	r3, #0
 801626e:	4604      	mov	r4, r0
 8016270:	4608      	mov	r0, r1
 8016272:	4611      	mov	r1, r2
 8016274:	602b      	str	r3, [r5, #0]
 8016276:	f7ef f802 	bl	800527e <_fstat>
 801627a:	1c43      	adds	r3, r0, #1
 801627c:	d102      	bne.n	8016284 <_fstat_r+0x1c>
 801627e:	682b      	ldr	r3, [r5, #0]
 8016280:	b103      	cbz	r3, 8016284 <_fstat_r+0x1c>
 8016282:	6023      	str	r3, [r4, #0]
 8016284:	bd38      	pop	{r3, r4, r5, pc}
 8016286:	bf00      	nop
 8016288:	20008d34 	.word	0x20008d34

0801628c <_isatty_r>:
 801628c:	b538      	push	{r3, r4, r5, lr}
 801628e:	4d06      	ldr	r5, [pc, #24]	; (80162a8 <_isatty_r+0x1c>)
 8016290:	2300      	movs	r3, #0
 8016292:	4604      	mov	r4, r0
 8016294:	4608      	mov	r0, r1
 8016296:	602b      	str	r3, [r5, #0]
 8016298:	f7ef f801 	bl	800529e <_isatty>
 801629c:	1c43      	adds	r3, r0, #1
 801629e:	d102      	bne.n	80162a6 <_isatty_r+0x1a>
 80162a0:	682b      	ldr	r3, [r5, #0]
 80162a2:	b103      	cbz	r3, 80162a6 <_isatty_r+0x1a>
 80162a4:	6023      	str	r3, [r4, #0]
 80162a6:	bd38      	pop	{r3, r4, r5, pc}
 80162a8:	20008d34 	.word	0x20008d34

080162ac <_malloc_usable_size_r>:
 80162ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162b0:	1f18      	subs	r0, r3, #4
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	bfbc      	itt	lt
 80162b6:	580b      	ldrlt	r3, [r1, r0]
 80162b8:	18c0      	addlt	r0, r0, r3
 80162ba:	4770      	bx	lr

080162bc <_init>:
 80162bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162be:	bf00      	nop
 80162c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162c2:	bc08      	pop	{r3}
 80162c4:	469e      	mov	lr, r3
 80162c6:	4770      	bx	lr

080162c8 <_fini>:
 80162c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162ca:	bf00      	nop
 80162cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162ce:	bc08      	pop	{r3}
 80162d0:	469e      	mov	lr, r3
 80162d2:	4770      	bx	lr
