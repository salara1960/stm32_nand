
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009378  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08009508  08009508  00019508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097fc  080097fc  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  080097fc  080097fc  000197fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009804  08009804  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009804  08009804  00019804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009808  08009808  00019808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800980c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          000050c4  200000a8  200000a8  000200a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  2000516c  2000516c  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024983  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041fa  00000000  00000000  00044a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d0  00000000  00000000  00048c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001858  00000000  00000000  0004a628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000047ff  00000000  00000000  0004be80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d66d  00000000  00000000  0005067f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e223b  00000000  00000000  0006dcec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014ff27  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000074ac  00000000  00000000  0014ff7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094f0 	.word	0x080094f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	080094f0 	.word	0x080094f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800029e:	f000 b9b9 	b.w	8000614 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800061c:	f3bf 8f4f 	dsb	sy
}
 8000620:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <__NVIC_SystemReset+0x24>)
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800062a:	4904      	ldr	r1, [pc, #16]	; (800063c <__NVIC_SystemReset+0x24>)
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <__NVIC_SystemReset+0x28>)
 800062e:	4313      	orrs	r3, r2
 8000630:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000632:	f3bf 8f4f 	dsb	sy
}
 8000636:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <__NVIC_SystemReset+0x20>
 800063c:	e000ed00 	.word	0xe000ed00
 8000640:	05fa0004 	.word	0x05fa0004

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f001 f964 	bl	8001914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f868 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 fa0c 	bl	8000a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000654:	f000 f9d4 	bl	8000a00 <MX_DMA_Init>
  MX_TIM2_Init();
 8000658:	f000 f95c 	bl	8000914 <MX_TIM2_Init>
  MX_RTC_Init();
 800065c:	f000 f8ca 	bl	80007f4 <MX_RTC_Init>
  MX_FSMC_Init();
 8000660:	f000 faaa 	bl	8000bb8 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000664:	f000 f9a2 	bl	80009ac <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000668:	f000 f91e 	bl	80008a8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_Delay(1000);

  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2180      	movs	r1, #128	; 0x80
 8000670:	4820      	ldr	r0, [pc, #128]	; (80006f4 <main+0xb0>)
 8000672:	f002 f835 	bl	80026e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000676:	2201      	movs	r2, #1
 8000678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067c:	481e      	ldr	r0, [pc, #120]	; (80006f8 <main+0xb4>)
 800067e:	f002 f82f 	bl	80026e0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000682:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000686:	f001 f987 	bl	8001998 <HAL_Delay>
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	4819      	ldr	r0, [pc, #100]	; (80006f4 <main+0xb0>)
 8000690:	f002 f826 	bl	80026e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069a:	4817      	ldr	r0, [pc, #92]	; (80006f8 <main+0xb4>)
 800069c:	f002 f820 	bl	80026e0 <HAL_GPIO_WritePin>

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <main+0xb8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 fc2d 	bl	8003f04 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <main+0xbc>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2201      	movs	r2, #1
 80006b0:	4914      	ldr	r1, [pc, #80]	; (8000704 <main+0xc0>)
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 f8a5 	bl	8004802 <HAL_UART_Receive_IT>
  //HAL_Delay(1500);
  //Report(1, "[%s] Старт - Start all interrupts (%s)%s", __func__, version, eol);

  //HAL_GPIO_TogglePin(IPS_BLK_GPIO_Port, IPS_BLK_Pin);

  set_Date(epoch);
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <main+0xc4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fb33 	bl	8000d28 <set_Date>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006c2:	f005 f957 	bl	8005974 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 80006c6:	4a11      	ldr	r2, [pc, #68]	; (800070c <main+0xc8>)
 80006c8:	2101      	movs	r1, #1
 80006ca:	2001      	movs	r0, #1
 80006cc:	f005 fa4b 	bl	8005b66 <osSemaphoreNew>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a0f      	ldr	r2, [pc, #60]	; (8000710 <main+0xcc>)
 80006d4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <main+0xd0>)
 80006d8:	2100      	movs	r1, #0
 80006da:	480f      	ldr	r0, [pc, #60]	; (8000718 <main+0xd4>)
 80006dc:	f005 f996 	bl	8005a0c <osThreadNew>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a0e      	ldr	r2, [pc, #56]	; (800071c <main+0xd8>)
 80006e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006e6:	f005 f96b 	bl	80059c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LOOP_FOREVER();
 80006ea:	2001      	movs	r0, #1
 80006ec:	f001 f954 	bl	8001998 <HAL_Delay>
 80006f0:	e7fb      	b.n	80006ea <main+0xa6>
 80006f2:	bf00      	nop
 80006f4:	40020800 	.word	0x40020800
 80006f8:	40020c00 	.word	0x40020c00
 80006fc:	20000018 	.word	0x20000018
 8000700:	2000001c 	.word	0x2000001c
 8000704:	200004d8 	.word	0x200004d8
 8000708:	20000014 	.word	0x20000014
 800070c:	0800962c 	.word	0x0800962c
 8000710:	20004f68 	.word	0x20004f68
 8000714:	08009608 	.word	0x08009608
 8000718:	08001131 	.word	0x08001131
 800071c:	2000506c 	.word	0x2000506c

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	; 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2230      	movs	r2, #48	; 0x30
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f008 f95e 	bl	80089f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a27      	ldr	r2, [pc, #156]	; (80007ec <SystemClock_Config+0xcc>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b25      	ldr	r3, [pc, #148]	; (80007ec <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <SystemClock_Config+0xd0>)
 800076a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077c:	2301      	movs	r3, #1
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000790:	2308      	movs	r3, #8
 8000792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000794:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079a:	2302      	movs	r3, #2
 800079c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800079e:	2307      	movs	r3, #7
 80007a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 f8fa 	bl	80029a0 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007b2:	f000 fd95 	bl	80012e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2302      	movs	r3, #2
 80007bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80007c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	2105      	movs	r1, #5
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fb5b 	bl	8002e90 <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007e0:	f000 fd7e 	bl	80012e0 <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3750      	adds	r7, #80	; 0x50
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800080c:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <MX_RTC_Init+0xac>)
 800080e:	4a25      	ldr	r2, [pc, #148]	; (80008a4 <MX_RTC_Init+0xb0>)
 8000810:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000812:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_RTC_Init+0xac>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000818:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <MX_RTC_Init+0xac>)
 800081a:	227f      	movs	r2, #127	; 0x7f
 800081c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_RTC_Init+0xac>)
 8000820:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000824:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <MX_RTC_Init+0xac>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_RTC_Init+0xac>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000832:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_RTC_Init+0xac>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000838:	4819      	ldr	r0, [pc, #100]	; (80008a0 <MX_RTC_Init+0xac>)
 800083a:	f002 fe39 	bl	80034b0 <HAL_RTC_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000844:	f000 fd4c 	bl	80012e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	480f      	ldr	r0, [pc, #60]	; (80008a0 <MX_RTC_Init+0xac>)
 8000864:	f002 feb5 	bl	80035d2 <HAL_RTC_SetTime>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 800086e:	f000 fd37 	bl	80012e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000872:	2301      	movs	r3, #1
 8000874:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000876:	2301      	movs	r3, #1
 8000878:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800087a:	2301      	movs	r3, #1
 800087c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_RTC_Init+0xac>)
 800088a:	f002 ffbd 	bl	8003808 <HAL_RTC_SetDate>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000894:	f000 fd24 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20004fac 	.word	0x20004fac
 80008a4:	40002800 	.word	0x40002800

080008a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_SPI1_Init+0x64>)
 80008ae:	4a18      	ldr	r2, [pc, #96]	; (8000910 <MX_SPI1_Init+0x68>)
 80008b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_SPI1_Init+0x64>)
 80008b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_SPI1_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_SPI1_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_SPI1_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_SPI1_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_SPI1_Init+0x64>)
 80008d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_SPI1_Init+0x64>)
 80008dc:	2218      	movs	r2, #24
 80008de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <MX_SPI1_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_SPI1_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <MX_SPI1_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_SPI1_Init+0x64>)
 80008f4:	220a      	movs	r2, #10
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_SPI1_Init+0x64>)
 80008fa:	f003 f90b 	bl	8003b14 <HAL_SPI_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000904:	f000 fcec 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20004fcc 	.word	0x20004fcc
 8000910:	40013000 	.word	0x40013000

08000914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	463b      	mov	r3, r7
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000932:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000936:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_TIM2_Init+0x94>)
 800093a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800093e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000948:	22f9      	movs	r2, #249	; 0xf9
 800094a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_TIM2_Init+0x94>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000954:	2280      	movs	r2, #128	; 0x80
 8000956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000958:	4813      	ldr	r0, [pc, #76]	; (80009a8 <MX_TIM2_Init+0x94>)
 800095a:	f003 fa83 	bl	8003e64 <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000964:	f000 fcbc 	bl	80012e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	4619      	mov	r1, r3
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000976:	f003 fc3d 	bl	80041f4 <HAL_TIM_ConfigClockSource>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000980:	f000 fcae 	bl	80012e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000984:	2320      	movs	r3, #32
 8000986:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_TIM2_Init+0x94>)
 8000992:	f003 fe59 	bl	8004648 <HAL_TIMEx_MasterConfigSynchronization>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800099c:	f000 fca0 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20005024 	.word	0x20005024

080009ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <MX_USART3_UART_Init+0x50>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART3_UART_Init+0x4c>)
 80009e4:	f003 fec0 	bl	8004768 <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009ee:	f000 fc77 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20004ec0 	.word	0x20004ec0
 80009fc:	40004800 	.word	0x40004800

08000a00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_DMA_Init+0x68>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <MX_DMA_Init+0x68>)
 8000a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_DMA_Init+0x68>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_DMA_Init+0x68>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <MX_DMA_Init+0x68>)
 8000a2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <MX_DMA_Init+0x68>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2105      	movs	r1, #5
 8000a42:	200e      	movs	r0, #14
 8000a44:	f001 f884 	bl	8001b50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a48:	200e      	movs	r0, #14
 8000a4a:	f001 f89d 	bl	8001b88 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2105      	movs	r1, #5
 8000a52:	203b      	movs	r0, #59	; 0x3b
 8000a54:	f001 f87c 	bl	8001b50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a58:	203b      	movs	r0, #59	; 0x3b
 8000a5a:	f001 f895 	bl	8001b88 <HAL_NVIC_EnableIRQ>

}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	; 0x30
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	4b48      	ldr	r3, [pc, #288]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a47      	ldr	r2, [pc, #284]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b45      	ldr	r3, [pc, #276]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9a:	61bb      	str	r3, [r7, #24]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	4b41      	ldr	r3, [pc, #260]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a40      	ldr	r2, [pc, #256]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b3e      	ldr	r3, [pc, #248]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b3a      	ldr	r3, [pc, #232]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a39      	ldr	r2, [pc, #228]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000ac4:	f043 0310 	orr.w	r3, r3, #16
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0310 	and.w	r3, r3, #16
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b33      	ldr	r3, [pc, #204]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a32      	ldr	r2, [pc, #200]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a2b      	ldr	r2, [pc, #172]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a24      	ldr	r2, [pc, #144]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <MX_GPIO_Init+0x13c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	210e      	movs	r1, #14
 8000b2e:	481f      	ldr	r0, [pc, #124]	; (8000bac <MX_GPIO_Init+0x140>)
 8000b30:	f001 fdd6 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3a:	481d      	ldr	r0, [pc, #116]	; (8000bb0 <MX_GPIO_Init+0x144>)
 8000b3c:	f001 fdd0 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2180      	movs	r1, #128	; 0x80
 8000b44:	481b      	ldr	r0, [pc, #108]	; (8000bb4 <MX_GPIO_Init+0x148>)
 8000b46:	f001 fdcb 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 8000b4a:	230e      	movs	r3, #14
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b56:	2301      	movs	r3, #1
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4812      	ldr	r0, [pc, #72]	; (8000bac <MX_GPIO_Init+0x140>)
 8000b62:	f001 fc21 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 8000b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b74:	2302      	movs	r3, #2
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MX_GPIO_Init+0x144>)
 8000b80:	f001 fc12 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b90:	2301      	movs	r3, #1
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <MX_GPIO_Init+0x148>)
 8000b9c:	f001 fc04 	bl	80023a8 <HAL_GPIO_Init>

}
 8000ba0:	bf00      	nop
 8000ba2:	3730      	adds	r7, #48	; 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	40020c00 	.word	0x40020c00
 8000bb4:	40020800 	.word	0x40020800

08000bb8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 8000bd8:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <MX_FSMC_Init+0xbc>)
 8000bda:	4a27      	ldr	r2, [pc, #156]	; (8000c78 <MX_FSMC_Init+0xc0>)
 8000bdc:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8000bde:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <MX_FSMC_Init+0xbc>)
 8000be0:	2210      	movs	r2, #16
 8000be2:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8000be4:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <MX_FSMC_Init+0xbc>)
 8000be6:	2202      	movs	r2, #2
 8000be8:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8000bea:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <MX_FSMC_Init+0xbc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8000bf0:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <MX_FSMC_Init+0xbc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_FSMC_Init+0xbc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_FSMC_Init+0xbc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_FSMC_Init+0xbc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 0;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_FSMC_Init+0xbc>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 0;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_FSMC_Init+0xbc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 0;
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_FSMC_Init+0xbc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 0;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_FSMC_Init+0xbc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 0;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_FSMC_Init+0xbc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 0;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_FSMC_Init+0xbc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_FSMC_Init+0xbc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8000c34:	23fc      	movs	r3, #252	; 0xfc
 8000c36:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 8000c38:	23fc      	movs	r3, #252	; 0xfc
 8000c3a:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 8000c3c:	23fc      	movs	r3, #252	; 0xfc
 8000c3e:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 8000c40:	23fc      	movs	r3, #252	; 0xfc
 8000c42:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8000c44:	23fc      	movs	r3, #252	; 0xfc
 8000c46:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 8000c48:	23fc      	movs	r3, #252	; 0xfc
 8000c4a:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 8000c4c:	23fc      	movs	r3, #252	; 0xfc
 8000c4e:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 8000c50:	23fc      	movs	r3, #252	; 0xfc
 8000c52:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8000c54:	463a      	mov	r2, r7
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_FSMC_Init+0xbc>)
 8000c5e:	f001 fd72 	bl	8002746 <HAL_NAND_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8000c68:	f000 fb3a 	bl	80012e0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20004f6c 	.word	0x20004f6c
 8000c78:	a0000060 	.word	0xa0000060

08000c7c <errLedOn>:

/* USER CODE BEGIN 4 */
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	if (on)
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c92:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <errLedOn+0x34>)
 8000c94:	f001 fd24 	bl	80026e0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 8000c98:	e005      	b.n	8000ca6 <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <errLedOn+0x34>)
 8000ca2:	f001 fd1d 	bl	80026e0 <HAL_GPIO_WritePin>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40020c00 	.word	0x40020c00

08000cb4 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
	return secCounter;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <get_secCounter+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200000c8 	.word	0x200000c8

08000ccc <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	secCounter++;
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <inc_secCounter+0x18>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	4a03      	ldr	r2, [pc, #12]	; (8000ce4 <inc_secCounter+0x18>)
 8000cd8:	6013      	str	r3, [r2, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	200000c8 	.word	0x200000c8

08000ce8 <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
	return msCounter;
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <get_msCounter+0x18>)
 8000cee:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000cf2:	4610      	mov	r0, r2
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	200000d0 	.word	0x200000d0

08000d04 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
	msCounter++;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <inc_msCounter+0x20>)
 8000d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0e:	1c50      	adds	r0, r2, #1
 8000d10:	f143 0100 	adc.w	r1, r3, #0
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <inc_msCounter+0x20>)
 8000d16:	e9c3 0100 	strd	r0, r1, [r3]
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	200000d0 	.word	0x200000d0

08000d28 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b094      	sub	sp, #80	; 0x50
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = usec;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	461a      	mov	r2, r3
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if (!gmtime_r(&ep, &ts)) {
 8000d3c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000d40:	f107 0320 	add.w	r3, r7, #32
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f007 fd66 	bl	8008818 <gmtime_r>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d103      	bne.n	8000d5a <set_Date+0x32>
		errLedOn(NULL);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff ff92 	bl	8000c7c <errLedOn>
 8000d58:	e03b      	b.n	8000dd2 <set_Date+0xaa>
		return;
	}

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8000d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8000d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	3301      	adds	r3, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8000d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8000d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour;
 8000d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8000d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 8000d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	73bb      	strb	r3, [r7, #14]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <set_Date+0xb0>)
 8000d92:	f002 fc1e 	bl	80035d2 <HAL_RTC_SetTime>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d006      	beq.n	8000daa <set_Date+0x82>
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <set_Date+0xb4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <set_Date+0xb4>)
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e013      	b.n	8000dd2 <set_Date+0xaa>
	else {
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	2200      	movs	r2, #0
 8000db0:	4619      	mov	r1, r3
 8000db2:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <set_Date+0xb0>)
 8000db4:	f002 fd28 	bl	8003808 <HAL_RTC_SetDate>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d006      	beq.n	8000dcc <set_Date+0xa4>
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <set_Date+0xb4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <set_Date+0xb4>)
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e002      	b.n	8000dd2 <set_Date+0xaa>
		else setDate = true;
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <set_Date+0xb8>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
	}
}
 8000dd2:	3750      	adds	r7, #80	; 0x50
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20004fac 	.word	0x20004fac
 8000ddc:	20004f04 	.word	0x20004f04
 8000de0:	200004dc 	.word	0x200004dc

08000de4 <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b093      	sub	sp, #76	; 0x4c
 8000de8:	af04      	add	r7, sp, #16
 8000dea:	6078      	str	r0, [r7, #4]
int ret = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8000df0:	4b3f      	ldr	r3, [pc, #252]	; (8000ef0 <sec2str+0x10c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	f083 0301 	eor.w	r3, r3, #1
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d040      	beq.n	8000e80 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8000dfe:	f7ff ff59 	bl	8000cb4 <get_secCounter>
 8000e02:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8000e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e06:	4a3b      	ldr	r2, [pc, #236]	; (8000ef4 <sec2str+0x110>)
 8000e08:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0c:	0c1b      	lsrs	r3, r3, #16
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	4a38      	ldr	r2, [pc, #224]	; (8000ef4 <sec2str+0x110>)
 8000e14:	fba2 1203 	umull	r1, r2, r2, r3
 8000e18:	0c12      	lsrs	r2, r2, #16
 8000e1a:	4937      	ldr	r1, [pc, #220]	; (8000ef8 <sec2str+0x114>)
 8000e1c:	fb01 f202 	mul.w	r2, r1, r2
 8000e20:	1a9b      	subs	r3, r3, r2
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8000e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e26:	4a35      	ldr	r2, [pc, #212]	; (8000efc <sec2str+0x118>)
 8000e28:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2c:	0adb      	lsrs	r3, r3, #11
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8000e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e32:	4a32      	ldr	r2, [pc, #200]	; (8000efc <sec2str+0x118>)
 8000e34:	fba2 1203 	umull	r1, r2, r2, r3
 8000e38:	0ad2      	lsrs	r2, r2, #11
 8000e3a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000e3e:	fb01 f202 	mul.w	r2, r1, r2
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 8000e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e48:	4a2d      	ldr	r2, [pc, #180]	; (8000f00 <sec2str+0x11c>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 8000e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e54:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <sec2str+0x11c>)
 8000e56:	fba3 1302 	umull	r1, r3, r3, r2
 8000e5a:	0959      	lsrs	r1, r3, #5
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	1a5b      	subs	r3, r3, r1
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu ", day, hour, min, sec);
 8000e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e74:	4923      	ldr	r1, [pc, #140]	; (8000f04 <sec2str+0x120>)
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f007 fef6 	bl	8008c68 <siprintf>
 8000e7c:	6378      	str	r0, [r7, #52]	; 0x34
 8000e7e:	e032      	b.n	8000ee6 <sec2str+0x102>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	2200      	movs	r2, #0
 8000e86:	4619      	mov	r1, r3
 8000e88:	481f      	ldr	r0, [pc, #124]	; (8000f08 <sec2str+0x124>)
 8000e8a:	f002 fd64 	bl	8003956 <HAL_RTC_GetDate>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d006      	beq.n	8000ea2 <sec2str+0xbe>
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <sec2str+0x128>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <sec2str+0x128>)
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	e021      	b.n	8000ee6 <sec2str+0x102>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4817      	ldr	r0, [pc, #92]	; (8000f08 <sec2str+0x124>)
 8000eac:	f002 fc4e 	bl	800374c <HAL_RTC_GetTime>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d006      	beq.n	8000ec4 <sec2str+0xe0>
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <sec2str+0x128>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <sec2str+0x128>)
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e010      	b.n	8000ee6 <sec2str+0x102>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
								sDate.Date, sDate.Month,
 8000ec4:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 8000ec6:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8000ec8:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 8000eca:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000ecc:	7c3b      	ldrb	r3, [r7, #16]
 8000ece:	7c7a      	ldrb	r2, [r7, #17]
 8000ed0:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 8000ed2:	9102      	str	r1, [sp, #8]
 8000ed4:	9201      	str	r2, [sp, #4]
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4623      	mov	r3, r4
 8000eda:	4602      	mov	r2, r0
 8000edc:	490c      	ldr	r1, [pc, #48]	; (8000f10 <sec2str+0x12c>)
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f007 fec2 	bl	8008c68 <siprintf>
 8000ee4:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 8000ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	373c      	adds	r7, #60	; 0x3c
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd90      	pop	{r4, r7, pc}
 8000ef0:	200004dc 	.word	0x200004dc
 8000ef4:	c22e4507 	.word	0xc22e4507
 8000ef8:	00015180 	.word	0x00015180
 8000efc:	91a2b3c5 	.word	0x91a2b3c5
 8000f00:	88888889 	.word	0x88888889
 8000f04:	08009544 	.word	0x08009544
 8000f08:	20004fac 	.word	0x20004fac
 8000f0c:	20004f04 	.word	0x20004f04
 8000f10:	0800955c 	.word	0x0800955c

08000f14 <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(uint8_t addTime, const char *fmt, ...)
{
 8000f14:	b40e      	push	{r1, r2, r3}
 8000f16:	b590      	push	{r4, r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 8000f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f24:	613b      	str	r3, [r7, #16]
int dl = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
char *buf = (char *)calloc(1, len);//&txBuf[0];
 8000f2a:	6939      	ldr	r1, [r7, #16]
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f007 fc65 	bl	80087fc <calloc>
 8000f32:	4603      	mov	r3, r0
 8000f34:	60fb      	str	r3, [r7, #12]

	if (buf) {
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d048      	beq.n	8000fce <Report+0xba>
	    //*buf = '\0';
		if (addTime) {
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d012      	beq.n	8000f68 <Report+0x54>
			dl = sec2str(buf);
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f7ff ff4e 	bl	8000de4 <sec2str>
 8000f48:	6178      	str	r0, [r7, #20]
			strcat(buf, "| ");
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f7ff f940 	bl	80001d0 <strlen>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a21      	ldr	r2, [pc, #132]	; (8000fe0 <Report+0xcc>)
 8000f5a:	8811      	ldrh	r1, [r2, #0]
 8000f5c:	7892      	ldrb	r2, [r2, #2]
 8000f5e:	8019      	strh	r1, [r3, #0]
 8000f60:	709a      	strb	r2, [r3, #2]
			dl += 2;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3302      	adds	r3, #2
 8000f66:	617b      	str	r3, [r7, #20]
		}

		va_start(args, fmt);
 8000f68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f6c:	60bb      	str	r3, [r7, #8]
		vsnprintf(buf + dl, len - dl, fmt, args);
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	18d0      	adds	r0, r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	1ad1      	subs	r1, r2, r3
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f7e:	f007 ff65 	bl	8008e4c <vsniprintf>

		uartRdy = false;
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <Report+0xd0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <Report+0xd4>)
 8000f8a:	681c      	ldr	r4, [r3, #0]
 8000f8c:	68f8      	ldr	r0, [r7, #12]
 8000f8e:	f7ff f91f 	bl	80001d0 <strlen>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	68f9      	ldr	r1, [r7, #12]
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f003 fc62 	bl	8004864 <HAL_UART_Transmit_DMA>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d009      	beq.n	8000fba <Report+0xa6>
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <Report+0xd8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <Report+0xd8>)
 8000fb0:	6013      	str	r3, [r2, #0]
		while (!uartRdy) HAL_Delay(1);
 8000fb2:	e002      	b.n	8000fba <Report+0xa6>
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f000 fcef 	bl	8001998 <HAL_Delay>
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <Report+0xd0>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	f083 0301 	eor.w	r3, r3, #1
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1f5      	bne.n	8000fb4 <Report+0xa0>
			if (HAL_UART_GetState(logPort) == HAL_UART_STATE_BUSY_RX) break;
			HAL_Delay(1);
		}*/
		va_end(args);

		free(buf);
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f007 fcfb 	bl	80089c4 <free>
	}

	return 0;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000fda:	b003      	add	sp, #12
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	08009578 	.word	0x08009578
 8000fe4:	20000010 	.word	0x20000010
 8000fe8:	2000001c 	.word	0x2000001c
 8000fec:	20004f04 	.word	0x20004f04

08000ff0 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a38      	ldr	r2, [pc, #224]	; (80010e0 <HAL_UART_RxCpltCallback+0xf0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d169      	bne.n	80010d6 <HAL_UART_RxCpltCallback+0xe6>
		rxBuf[ruk++] = (char)rxByte;
 8001002:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <HAL_UART_RxCpltCallback+0xf4>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	b291      	uxth	r1, r2
 800100a:	4a36      	ldr	r2, [pc, #216]	; (80010e4 <HAL_UART_RxCpltCallback+0xf4>)
 800100c:	8011      	strh	r1, [r2, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <HAL_UART_RxCpltCallback+0xf8>)
 8001012:	7819      	ldrb	r1, [r3, #0]
 8001014:	4b35      	ldr	r3, [pc, #212]	; (80010ec <HAL_UART_RxCpltCallback+0xfc>)
 8001016:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <HAL_UART_RxCpltCallback+0xf8>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b0a      	cmp	r3, #10
 800101e:	d155      	bne.n	80010cc <HAL_UART_RxCpltCallback+0xdc>
			char *uk = NULL;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
			if (strstr(rxBuf, s_restart)) {
 8001024:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <HAL_UART_RxCpltCallback+0x100>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	4830      	ldr	r0, [pc, #192]	; (80010ec <HAL_UART_RxCpltCallback+0xfc>)
 800102c:	f007 fe3c 	bl	8008ca8 <strstr>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d005      	beq.n	8001042 <HAL_UART_RxCpltCallback+0x52>
				//NVIC_SystemReset();
				flags.restart = 1;
 8001036:	4a2f      	ldr	r2, [pc, #188]	; (80010f4 <HAL_UART_RxCpltCallback+0x104>)
 8001038:	7813      	ldrb	r3, [r2, #0]
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	7013      	strb	r3, [r2, #0]
 8001040:	e03b      	b.n	80010ba <HAL_UART_RxCpltCallback+0xca>
			} else if ((uk = strstr(rxBuf, s_epoch))) {
 8001042:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_UART_RxCpltCallback+0x108>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	4828      	ldr	r0, [pc, #160]	; (80010ec <HAL_UART_RxCpltCallback+0xfc>)
 800104a:	f007 fe2d 	bl	8008ca8 <strstr>
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d031      	beq.n	80010ba <HAL_UART_RxCpltCallback+0xca>
				uk += strlen(s_epoch);
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <HAL_UART_RxCpltCallback+0x108>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff f8b8 	bl	80001d0 <strlen>
 8001060:	4602      	mov	r2, r0
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4413      	add	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
				if (*uk != '?') {
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b3f      	cmp	r3, #63	; 0x3f
 800106e:	d01c      	beq.n	80010aa <HAL_UART_RxCpltCallback+0xba>
					if (strlen(uk) < 10) setDate = false;
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f7ff f8ad 	bl	80001d0 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	2b09      	cmp	r3, #9
 800107a:	d803      	bhi.n	8001084 <HAL_UART_RxCpltCallback+0x94>
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <HAL_UART_RxCpltCallback+0x10c>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
 8001082:	e01a      	b.n	80010ba <HAL_UART_RxCpltCallback+0xca>
					else {
						uint32_t ep = (uint32_t)atol(uk);
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f007 fbb5 	bl	80087f4 <atol>
 800108a:	4603      	mov	r3, r0
 800108c:	60bb      	str	r3, [r7, #8]
						if (ep > epoch) {
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <HAL_UART_RxCpltCallback+0x110>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	429a      	cmp	r2, r3
 8001096:	d910      	bls.n	80010ba <HAL_UART_RxCpltCallback+0xca>
							epoch = ep;
 8001098:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_UART_RxCpltCallback+0x110>)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	6013      	str	r3, [r2, #0]
							flags.time_set = 1;
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <HAL_UART_RxCpltCallback+0x104>)
 80010a0:	7813      	ldrb	r3, [r2, #0]
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	7013      	strb	r3, [r2, #0]
 80010a8:	e007      	b.n	80010ba <HAL_UART_RxCpltCallback+0xca>
						}
					}
				} else {
					setDate = true;
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_UART_RxCpltCallback+0x10c>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
					flags.time_show = 1;
 80010b0:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <HAL_UART_RxCpltCallback+0x104>)
 80010b2:	7813      	ldrb	r3, [r2, #0]
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	7013      	strb	r3, [r2, #0]
				}
			}
			ruk = 0;
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_UART_RxCpltCallback+0xf4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	801a      	strh	r2, [r3, #0]
			memset(rxBuf, 0, MAX_UART_BUF);
 80010c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c4:	2100      	movs	r1, #0
 80010c6:	4809      	ldr	r0, [pc, #36]	; (80010ec <HAL_UART_RxCpltCallback+0xfc>)
 80010c8:	f007 fc92 	bl	80089f0 <memset>
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 80010cc:	2201      	movs	r2, #1
 80010ce:	4906      	ldr	r1, [pc, #24]	; (80010e8 <HAL_UART_RxCpltCallback+0xf8>)
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f003 fb96 	bl	8004802 <HAL_UART_Receive_IT>
	}
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40004800 	.word	0x40004800
 80010e4:	200004da 	.word	0x200004da
 80010e8:	200004d8 	.word	0x200004d8
 80010ec:	200000d8 	.word	0x200000d8
 80010f0:	20000008 	.word	0x20000008
 80010f4:	200000c4 	.word	0x200000c4
 80010f8:	2000000c 	.word	0x2000000c
 80010fc:	200004dc 	.word	0x200004dc
 8001100:	20000014 	.word	0x20000014

08001104 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a05      	ldr	r2, [pc, #20]	; (8001128 <HAL_UART_TxCpltCallback+0x24>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d102      	bne.n	800111c <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_UART_TxCpltCallback+0x28>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
	}
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	40004800 	.word	0x40004800
 800112c:	20000010 	.word	0x20000010

08001130 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af04      	add	r7, sp, #16
 8001136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	char *stx = (char *)calloc(1, 128);
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	2001      	movs	r0, #1
 800113c:	f007 fb5e 	bl	80087fc <calloc>
 8001140:	4603      	mov	r3, r0
 8001142:	60bb      	str	r3, [r7, #8]
	if (!stx) devError |= devMEM;
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d105      	bne.n	8001156 <defThread+0x26>
 800114a:	4b43      	ldr	r3, [pc, #268]	; (8001258 <defThread+0x128>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f043 0302 	orr.w	r3, r3, #2
 8001152:	4a41      	ldr	r2, [pc, #260]	; (8001258 <defThread+0x128>)
 8001154:	6013      	str	r3, [r2, #0]

	bool led = false;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]

	HAL_Delay(1500);
 800115a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800115e:	f000 fc1b 	bl	8001998 <HAL_Delay>
	Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8001162:	4b3e      	ldr	r3, [pc, #248]	; (800125c <defThread+0x12c>)
 8001164:	681c      	ldr	r4, [r3, #0]
 8001166:	f007 fa15 	bl	8008594 <xPortGetFreeHeapSize>
 800116a:	4602      	mov	r2, r0
 800116c:	4b3c      	ldr	r3, [pc, #240]	; (8001260 <defThread+0x130>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	9302      	str	r3, [sp, #8]
 8001172:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	9200      	str	r2, [sp, #0]
 800117a:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <defThread+0x134>)
 800117c:	4622      	mov	r2, r4
 800117e:	493a      	ldr	r1, [pc, #232]	; (8001268 <defThread+0x138>)
 8001180:	2001      	movs	r0, #1
 8001182:	f7ff fec7 	bl	8000f14 <Report>


  /* Infinite loop */

  while (1) {
	  if (devError) led = true; else led = false;
 8001186:	4b34      	ldr	r3, [pc, #208]	; (8001258 <defThread+0x128>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <defThread+0x64>
 800118e:	2301      	movs	r3, #1
 8001190:	73fb      	strb	r3, [r7, #15]
 8001192:	e001      	b.n	8001198 <defThread+0x68>
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]
	  errLedOn(led);
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fd6e 	bl	8000c7c <errLedOn>

	  if (flags.restart) {
 80011a0:	4b32      	ldr	r3, [pc, #200]	; (800126c <defThread+0x13c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <defThread+0x92>
		  flags.restart = 0;
 80011ae:	4a2f      	ldr	r2, [pc, #188]	; (800126c <defThread+0x13c>)
 80011b0:	7813      	ldrb	r3, [r2, #0]
 80011b2:	f36f 0300 	bfc	r3, #0, #1
 80011b6:	7013      	strb	r3, [r2, #0]
		  break;
 80011b8:	bf00      	nop
	  }

	  osDelay(500);
  }

  if (stx) free(stx);
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d033      	beq.n	8001228 <defThread+0xf8>
 80011c0:	e02f      	b.n	8001222 <defThread+0xf2>
	  } else if (flags.time_set) {
 80011c2:	4b2a      	ldr	r3, [pc, #168]	; (800126c <defThread+0x13c>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00a      	beq.n	80011e6 <defThread+0xb6>
		  flags.time_set = 0;
 80011d0:	4a26      	ldr	r2, [pc, #152]	; (800126c <defThread+0x13c>)
 80011d2:	7813      	ldrb	r3, [r2, #0]
 80011d4:	f36f 0341 	bfc	r3, #1, #1
 80011d8:	7013      	strb	r3, [r2, #0]
		  set_Date(epoch);
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <defThread+0x140>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fda2 	bl	8000d28 <set_Date>
 80011e4:	e018      	b.n	8001218 <defThread+0xe8>
	  } else if (flags.time_show) {
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <defThread+0x13c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d011      	beq.n	8001218 <defThread+0xe8>
		  flags.time_show = 0;
 80011f4:	4a1d      	ldr	r2, [pc, #116]	; (800126c <defThread+0x13c>)
 80011f6:	7813      	ldrb	r3, [r2, #0]
 80011f8:	f36f 0382 	bfc	r3, #2, #1
 80011fc:	7013      	strb	r3, [r2, #0]
		  if (stx) {
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d009      	beq.n	8001218 <defThread+0xe8>
			  sec2str(stx);
 8001204:	68b8      	ldr	r0, [r7, #8]
 8001206:	f7ff fded 	bl	8000de4 <sec2str>
			  Report(0, "Current date&time -> %s%s", stx, eol);
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <defThread+0x130>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	4918      	ldr	r1, [pc, #96]	; (8001274 <defThread+0x144>)
 8001212:	2000      	movs	r0, #0
 8001214:	f7ff fe7e 	bl	8000f14 <Report>
	  osDelay(500);
 8001218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800121c:	f004 fc88 	bl	8005b30 <osDelay>
	  if (devError) led = true; else led = false;
 8001220:	e7b1      	b.n	8001186 <defThread+0x56>
  if (stx) free(stx);
 8001222:	68b8      	ldr	r0, [r7, #8]
 8001224:	f007 fbce 	bl	80089c4 <free>

  Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <defThread+0x12c>)
 800122a:	681c      	ldr	r4, [r3, #0]
 800122c:	f007 f9b2 	bl	8008594 <xPortGetFreeHeapSize>
 8001230:	4602      	mov	r2, r0
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <defThread+0x130>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	9200      	str	r2, [sp, #0]
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <defThread+0x134>)
 8001242:	4622      	mov	r2, r4
 8001244:	490c      	ldr	r1, [pc, #48]	; (8001278 <defThread+0x148>)
 8001246:	2001      	movs	r0, #1
 8001248:	f7ff fe64 	bl	8000f14 <Report>
  osDelay(1000);
 800124c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001250:	f004 fc6e 	bl	8005b30 <osDelay>

  NVIC_SystemReset();
 8001254:	f7ff f9e0 	bl	8000618 <__NVIC_SystemReset>
 8001258:	20004f04 	.word	0x20004f04
 800125c:	20000000 	.word	0x20000000
 8001260:	20000004 	.word	0x20000004
 8001264:	0800963c 	.word	0x0800963c
 8001268:	0800957c 	.word	0x0800957c
 800126c:	200000c4 	.word	0x200000c4
 8001270:	20000014 	.word	0x20000014
 8001274:	080095a8 	.word	0x080095a8
 8001278:	080095c4 	.word	0x080095c4

0800127c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800127c:	b5b0      	push	{r4, r5, r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d102      	bne.n	8001294 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800128e:	f000 fb63 	bl	8001958 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8001292:	e01c      	b.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x52>
  else if (htim->Instance == TIM2) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800129c:	d117      	bne.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x52>
	  if ((get_msCounter() & 3) == 3) {//seconda
 800129e:	f7ff fd23 	bl	8000ce8 <get_msCounter>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	f04f 0003 	mov.w	r0, #3
 80012aa:	f04f 0100 	mov.w	r1, #0
 80012ae:	ea02 0400 	and.w	r4, r2, r0
 80012b2:	ea03 0501 	and.w	r5, r3, r1
 80012b6:	2d00      	cmp	r5, #0
 80012b8:	bf08      	it	eq
 80012ba:	2c03      	cmpeq	r4, #3
 80012bc:	d105      	bne.n	80012ca <HAL_TIM_PeriodElapsedCallback+0x4e>
		  inc_secCounter();
 80012be:	f7ff fd05 	bl	8000ccc <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 80012c2:	2180      	movs	r1, #128	; 0x80
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x60>)
 80012c6:	f001 fa24 	bl	8002712 <HAL_GPIO_TogglePin>
	  inc_msCounter();
 80012ca:	f7ff fd1b 	bl	8000d04 <inc_msCounter>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bdb0      	pop	{r4, r5, r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40010000 	.word	0x40010000
 80012dc:	40020800 	.word	0x40020800

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_MspInit+0x54>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a11      	ldr	r2, [pc, #68]	; (8001344 <HAL_MspInit+0x54>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <HAL_MspInit+0x54>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_MspInit+0x54>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <HAL_MspInit+0x54>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_MspInit+0x54>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	210f      	movs	r1, #15
 8001332:	f06f 0001 	mvn.w	r0, #1
 8001336:	f000 fc0b 	bl	8001b50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <HAL_RTC_MspInit+0x4c>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d110      	bne.n	800138a <HAL_RTC_MspInit+0x42>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001368:	2302      	movs	r3, #2
 800136a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_RTC_MspInit+0x50>)
 800136e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	4618      	mov	r0, r3
 8001376:	f001 ffb9 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8001380:	f7ff ffae 	bl	80012e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_RTC_MspInit+0x54>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40002800 	.word	0x40002800
 8001398:	00190300 	.word	0x00190300
 800139c:	42470e3c 	.word	0x42470e3c

080013a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a34      	ldr	r2, [pc, #208]	; (8001490 <HAL_SPI_MspInit+0xf0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d162      	bne.n	8001488 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b33      	ldr	r3, [pc, #204]	; (8001494 <HAL_SPI_MspInit+0xf4>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	4a32      	ldr	r2, [pc, #200]	; (8001494 <HAL_SPI_MspInit+0xf4>)
 80013cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d0:	6453      	str	r3, [r2, #68]	; 0x44
 80013d2:	4b30      	ldr	r3, [pc, #192]	; (8001494 <HAL_SPI_MspInit+0xf4>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <HAL_SPI_MspInit+0xf4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a2b      	ldr	r2, [pc, #172]	; (8001494 <HAL_SPI_MspInit+0xf4>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b29      	ldr	r3, [pc, #164]	; (8001494 <HAL_SPI_MspInit+0xf4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 80013fa:	23a0      	movs	r3, #160	; 0xa0
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800140a:	2305      	movs	r3, #5
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4820      	ldr	r0, [pc, #128]	; (8001498 <HAL_SPI_MspInit+0xf8>)
 8001416:	f000 ffc7 	bl	80023a8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_SPI_MspInit+0xfc>)
 800141c:	4a20      	ldr	r2, [pc, #128]	; (80014a0 <HAL_SPI_MspInit+0x100>)
 800141e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001420:	4b1e      	ldr	r3, [pc, #120]	; (800149c <HAL_SPI_MspInit+0xfc>)
 8001422:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001426:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <HAL_SPI_MspInit+0xfc>)
 800142a:	2240      	movs	r2, #64	; 0x40
 800142c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_SPI_MspInit+0xfc>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_SPI_MspInit+0xfc>)
 8001436:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800143a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_SPI_MspInit+0xfc>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001442:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_SPI_MspInit+0xfc>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_SPI_MspInit+0xfc>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <HAL_SPI_MspInit+0xfc>)
 8001450:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001454:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_SPI_MspInit+0xfc>)
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800145c:	480f      	ldr	r0, [pc, #60]	; (800149c <HAL_SPI_MspInit+0xfc>)
 800145e:	f000 fba1 	bl	8001ba4 <HAL_DMA_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001468:	f7ff ff3a 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a0b      	ldr	r2, [pc, #44]	; (800149c <HAL_SPI_MspInit+0xfc>)
 8001470:	649a      	str	r2, [r3, #72]	; 0x48
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_SPI_MspInit+0xfc>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2105      	movs	r1, #5
 800147c:	2023      	movs	r0, #35	; 0x23
 800147e:	f000 fb67 	bl	8001b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001482:	2023      	movs	r0, #35	; 0x23
 8001484:	f000 fb80 	bl	8001b88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40013000 	.word	0x40013000
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000
 800149c:	20005070 	.word	0x20005070
 80014a0:	40026458 	.word	0x40026458

080014a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b4:	d115      	bne.n	80014e2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_TIM_Base_MspInit+0x48>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <HAL_TIM_Base_MspInit+0x48>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_TIM_Base_MspInit+0x48>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2101      	movs	r1, #1
 80014d6:	201c      	movs	r0, #28
 80014d8:	f000 fb3a 	bl	8001b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014dc:	201c      	movs	r0, #28
 80014de:	f000 fb53 	bl	8001b88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a35      	ldr	r2, [pc, #212]	; (80015e4 <HAL_UART_MspInit+0xf4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d163      	bne.n	80015da <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <HAL_UART_MspInit+0xf8>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a33      	ldr	r2, [pc, #204]	; (80015e8 <HAL_UART_MspInit+0xf8>)
 800151c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <HAL_UART_MspInit+0xf8>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_UART_MspInit+0xf8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a2c      	ldr	r2, [pc, #176]	; (80015e8 <HAL_UART_MspInit+0xf8>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <HAL_UART_MspInit+0xf8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 800154a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800154e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800155c:	2307      	movs	r3, #7
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	4821      	ldr	r0, [pc, #132]	; (80015ec <HAL_UART_MspInit+0xfc>)
 8001568:	f000 ff1e 	bl	80023a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800156c:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_UART_MspInit+0x100>)
 800156e:	4a21      	ldr	r2, [pc, #132]	; (80015f4 <HAL_UART_MspInit+0x104>)
 8001570:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001572:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <HAL_UART_MspInit+0x100>)
 8001574:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001578:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_UART_MspInit+0x100>)
 800157c:	2240      	movs	r2, #64	; 0x40
 800157e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_UART_MspInit+0x100>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <HAL_UART_MspInit+0x100>)
 8001588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800158c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_UART_MspInit+0x100>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <HAL_UART_MspInit+0x100>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_UART_MspInit+0x100>)
 800159c:	2200      	movs	r2, #0
 800159e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <HAL_UART_MspInit+0x100>)
 80015a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015a6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_UART_MspInit+0x100>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80015ae:	4810      	ldr	r0, [pc, #64]	; (80015f0 <HAL_UART_MspInit+0x100>)
 80015b0:	f000 faf8 	bl	8001ba4 <HAL_DMA_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80015ba:	f7ff fe91 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <HAL_UART_MspInit+0x100>)
 80015c2:	635a      	str	r2, [r3, #52]	; 0x34
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <HAL_UART_MspInit+0x100>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2105      	movs	r1, #5
 80015ce:	2027      	movs	r0, #39	; 0x27
 80015d0:	f000 fabe 	bl	8001b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015d4:	2027      	movs	r0, #39	; 0x27
 80015d6:	f000 fad7 	bl	8001b88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	; 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40004800 	.word	0x40004800
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020400 	.word	0x40020400
 80015f0:	20004f08 	.word	0x20004f08
 80015f4:	40026058 	.word	0x40026058

080015f8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800160c:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_FSMC_MspInit+0x98>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d139      	bne.n	8001688 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <HAL_FSMC_MspInit+0x98>)
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_FSMC_MspInit+0x9c>)
 8001620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001622:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <HAL_FSMC_MspInit+0x9c>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6393      	str	r3, [r2, #56]	; 0x38
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <HAL_FSMC_MspInit+0x9c>)
 800162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001636:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800163a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001648:	230c      	movs	r3, #12
 800164a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	4619      	mov	r1, r3
 8001650:	4811      	ldr	r0, [pc, #68]	; (8001698 <HAL_FSMC_MspInit+0xa0>)
 8001652:	f000 fea9 	bl	80023a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8001656:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 800165a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001668:	230c      	movs	r3, #12
 800166a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	4619      	mov	r1, r3
 8001670:	480a      	ldr	r0, [pc, #40]	; (800169c <HAL_FSMC_MspInit+0xa4>)
 8001672:	f000 fe99 	bl	80023a8 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2105      	movs	r1, #5
 800167a:	2030      	movs	r0, #48	; 0x30
 800167c:	f000 fa68 	bl	8001b50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8001680:	2030      	movs	r0, #48	; 0x30
 8001682:	f000 fa81 	bl	8001b88 <HAL_NVIC_EnableIRQ>
 8001686:	e000      	b.n	800168a <HAL_FSMC_MspInit+0x92>
    return;
 8001688:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	200004e0 	.word	0x200004e0
 8001694:	40023800 	.word	0x40023800
 8001698:	40021000 	.word	0x40021000
 800169c:	40020c00 	.word	0x40020c00

080016a0 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 80016a8:	f7ff ffa6 	bl	80015f8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	; 0x30
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	2019      	movs	r0, #25
 80016ca:	f000 fa41 	bl	8001b50 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016ce:	2019      	movs	r0, #25
 80016d0:	f000 fa5a 	bl	8001b88 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <HAL_InitTick+0xa4>)
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <HAL_InitTick+0xa4>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6453      	str	r3, [r2, #68]	; 0x44
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <HAL_InitTick+0xa4>)
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016f0:	f107 0210 	add.w	r2, r7, #16
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 fdc4 	bl	8003288 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001700:	f001 fdae 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 8001704:	4603      	mov	r3, r0
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170c:	4a13      	ldr	r2, [pc, #76]	; (800175c <HAL_InitTick+0xa8>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	0c9b      	lsrs	r3, r3, #18
 8001714:	3b01      	subs	r3, #1
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_InitTick+0xac>)
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <HAL_InitTick+0xb0>)
 800171c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <HAL_InitTick+0xac>)
 8001720:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001724:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001726:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <HAL_InitTick+0xac>)
 8001728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_InitTick+0xac>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_InitTick+0xac>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001738:	4809      	ldr	r0, [pc, #36]	; (8001760 <HAL_InitTick+0xac>)
 800173a:	f002 fb93 	bl	8003e64 <HAL_TIM_Base_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d104      	bne.n	800174e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001744:	4806      	ldr	r0, [pc, #24]	; (8001760 <HAL_InitTick+0xac>)
 8001746:	f002 fbdd 	bl	8003f04 <HAL_TIM_Base_Start_IT>
 800174a:	4603      	mov	r3, r0
 800174c:	e000      	b.n	8001750 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3730      	adds	r7, #48	; 0x30
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	431bde83 	.word	0x431bde83
 8001760:	200050d0 	.word	0x200050d0
 8001764:	40010000 	.word	0x40010000

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <DMA1_Stream3_IRQHandler+0x10>)
 80017a2:	f000 fb97 	bl	8001ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20004f08 	.word	0x20004f08

080017b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017b6:	f002 fc15 	bl	8003fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200050d0 	.word	0x200050d0

080017c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <TIM2_IRQHandler+0x10>)
 80017ca:	f002 fc0b 	bl	8003fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20005024 	.word	0x20005024

080017d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <SPI1_IRQHandler+0x10>)
 80017de:	f002 fa23 	bl	8003c28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20004fcc 	.word	0x20004fcc

080017ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <USART3_IRQHandler+0x10>)
 80017f2:	f003 f8b5 	bl	8004960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20004ec0 	.word	0x20004ec0

08001800 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <FSMC_IRQHandler+0x10>)
 8001806:	f000 ffec 	bl	80027e2 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20004f6c 	.word	0x20004f6c

08001814 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <DMA2_Stream3_IRQHandler+0x10>)
 800181a:	f000 fb5b 	bl	8001ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20005070 	.word	0x20005070

08001828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <_sbrk+0x5c>)
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <_sbrk+0x60>)
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <_sbrk+0x64>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <_sbrk+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	429a      	cmp	r2, r3
 8001856:	d207      	bcs.n	8001868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001858:	f006 ffd8 	bl	800880c <__errno>
 800185c:	4603      	mov	r3, r0
 800185e:	220c      	movs	r2, #12
 8001860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001866:	e009      	b.n	800187c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	4a05      	ldr	r2, [pc, #20]	; (800188c <_sbrk+0x64>)
 8001878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20020000 	.word	0x20020000
 8001888:	00000800 	.word	0x00000800
 800188c:	200004e4 	.word	0x200004e4
 8001890:	20005170 	.word	0x20005170

08001894 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <SystemInit+0x28>)
 800189a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189e:	4a07      	ldr	r2, [pc, #28]	; (80018bc <SystemInit+0x28>)
 80018a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <SystemInit+0x28>)
 80018aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ae:	609a      	str	r2, [r3, #8]
#endif
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018c6:	e003      	b.n	80018d0 <LoopCopyDataInit>

080018c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018ce:	3104      	adds	r1, #4

080018d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018d0:	480b      	ldr	r0, [pc, #44]	; (8001900 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018d8:	d3f6      	bcc.n	80018c8 <CopyDataInit>
  ldr  r2, =_sbss
 80018da:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018dc:	e002      	b.n	80018e4 <LoopFillZerobss>

080018de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018e0:	f842 3b04 	str.w	r3, [r2], #4

080018e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018e8:	d3f9      	bcc.n	80018de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ea:	f7ff ffd3 	bl	8001894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ee:	f007 f843 	bl	8008978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018f2:	f7fe fea7 	bl	8000644 <main>
  bx  lr    
 80018f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018fc:	0800980c 	.word	0x0800980c
  ldr  r0, =_sdata
 8001900:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001904:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8001908:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 800190c:	2000516c 	.word	0x2000516c

08001910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001910:	e7fe      	b.n	8001910 <ADC_IRQHandler>
	...

08001914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_Init+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <HAL_Init+0x40>)
 800191e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_Init+0x40>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <HAL_Init+0x40>)
 800192a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800192e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a07      	ldr	r2, [pc, #28]	; (8001954 <HAL_Init+0x40>)
 8001936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193c:	2003      	movs	r0, #3
 800193e:	f000 f8fc 	bl	8001b3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001942:	200f      	movs	r0, #15
 8001944:	f7ff feb6 	bl	80016b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001948:	f7ff fcd2 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023c00 	.word	0x40023c00

08001958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x20>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x24>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_IncTick+0x24>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000028 	.word	0x20000028
 800197c:	20005118 	.word	0x20005118

08001980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTick;
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_GetTick+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20005118 	.word	0x20005118

08001998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff ffee 	bl	8001980 <HAL_GetTick>
 80019a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019b0:	d005      	beq.n	80019be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_Delay+0x44>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019be:	bf00      	nop
 80019c0:	f7ff ffde 	bl	8001980 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d8f7      	bhi.n	80019c0 <HAL_Delay+0x28>
  {
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000028 	.word	0x20000028

080019e0 <__NVIC_SetPriorityGrouping>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <__NVIC_EnableIRQ+0x38>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ff4c 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b62:	f7ff ff61 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001b66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	68b9      	ldr	r1, [r7, #8]
 8001b6c:	6978      	ldr	r0, [r7, #20]
 8001b6e:	f7ff ffb1 	bl	8001ad4 <NVIC_EncodePriority>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff80 	bl	8001a80 <__NVIC_SetPriority>
}
 8001b80:	bf00      	nop
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff54 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff fee6 	bl	8001980 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e099      	b.n	8001cf4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be0:	e00f      	b.n	8001c02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be2:	f7ff fecd 	bl	8001980 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d908      	bls.n	8001c02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e078      	b.n	8001cf4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1e8      	bne.n	8001be2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	4b38      	ldr	r3, [pc, #224]	; (8001cfc <HAL_DMA_Init+0x158>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d107      	bne.n	8001c6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	4313      	orrs	r3, r2
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f023 0307 	bic.w	r3, r3, #7
 8001c82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d117      	bne.n	8001cc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00e      	beq.n	8001cc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 fb01 	bl	80022b0 <DMA_CheckFifoParam>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2240      	movs	r2, #64	; 0x40
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e016      	b.n	8001cf4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 fab8 	bl	8002244 <DMA_CalcBaseAndBitshift>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	223f      	movs	r2, #63	; 0x3f
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	f010803f 	.word	0xf010803f

08001d00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_DMA_Start_IT+0x26>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e040      	b.n	8001da8 <HAL_DMA_Start_IT+0xa8>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d12f      	bne.n	8001d9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 fa4a 	bl	80021e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	223f      	movs	r2, #63	; 0x3f
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0216 	orr.w	r2, r2, #22
 8001d6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0208 	orr.w	r2, r2, #8
 8001d86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	e005      	b.n	8001da6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001da2:	2302      	movs	r3, #2
 8001da4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dbe:	f7ff fddf 	bl	8001980 <HAL_GetTick>
 8001dc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d008      	beq.n	8001de2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2280      	movs	r2, #128	; 0x80
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e052      	b.n	8001e88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0216 	bic.w	r2, r2, #22
 8001df0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d103      	bne.n	8001e12 <HAL_DMA_Abort+0x62>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d007      	beq.n	8001e22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0208 	bic.w	r2, r2, #8
 8001e20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0201 	bic.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e32:	e013      	b.n	8001e5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e34:	f7ff fda4 	bl	8001980 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d90c      	bls.n	8001e5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2220      	movs	r2, #32
 8001e46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e015      	b.n	8001e88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1e4      	bne.n	8001e34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6e:	223f      	movs	r2, #63	; 0x3f
 8001e70:	409a      	lsls	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d004      	beq.n	8001eae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2280      	movs	r2, #128	; 0x80
 8001ea8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00c      	b.n	8001ec8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2205      	movs	r2, #5
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0201 	bic.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ee0:	4b92      	ldr	r3, [pc, #584]	; (800212c <HAL_DMA_IRQHandler+0x258>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a92      	ldr	r2, [pc, #584]	; (8002130 <HAL_DMA_IRQHandler+0x25c>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	0a9b      	lsrs	r3, r3, #10
 8001eec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efe:	2208      	movs	r2, #8
 8001f00:	409a      	lsls	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d01a      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d013      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0204 	bic.w	r2, r2, #4
 8001f26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f38:	f043 0201 	orr.w	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	2201      	movs	r2, #1
 8001f46:	409a      	lsls	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d012      	beq.n	8001f76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	2201      	movs	r2, #1
 8001f64:	409a      	lsls	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6e:	f043 0202 	orr.w	r2, r3, #2
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d012      	beq.n	8001fac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00b      	beq.n	8001fac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	2204      	movs	r2, #4
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa4:	f043 0204 	orr.w	r2, r3, #4
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d043      	beq.n	8002044 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d03c      	beq.n	8002044 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	2210      	movs	r2, #16
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d018      	beq.n	8002016 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d108      	bne.n	8002004 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d024      	beq.n	8002044 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
 8002002:	e01f      	b.n	8002044 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002008:	2b00      	cmp	r3, #0
 800200a:	d01b      	beq.n	8002044 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4798      	blx	r3
 8002014:	e016      	b.n	8002044 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d107      	bne.n	8002034 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0208 	bic.w	r2, r2, #8
 8002032:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	2220      	movs	r2, #32
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 808e 	beq.w	8002172 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 8086 	beq.w	8002172 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206a:	2220      	movs	r2, #32
 800206c:	409a      	lsls	r2, r3
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b05      	cmp	r3, #5
 800207c:	d136      	bne.n	80020ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0216 	bic.w	r2, r2, #22
 800208c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800209c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d103      	bne.n	80020ae <HAL_DMA_IRQHandler+0x1da>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0208 	bic.w	r2, r2, #8
 80020bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c2:	223f      	movs	r2, #63	; 0x3f
 80020c4:	409a      	lsls	r2, r3
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d07d      	beq.n	80021de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	4798      	blx	r3
        }
        return;
 80020ea:	e078      	b.n	80021de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d01c      	beq.n	8002134 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d108      	bne.n	800211a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210c:	2b00      	cmp	r3, #0
 800210e:	d030      	beq.n	8002172 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	4798      	blx	r3
 8002118:	e02b      	b.n	8002172 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211e:	2b00      	cmp	r3, #0
 8002120:	d027      	beq.n	8002172 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
 800212a:	e022      	b.n	8002172 <HAL_DMA_IRQHandler+0x29e>
 800212c:	20000020 	.word	0x20000020
 8002130:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10f      	bne.n	8002162 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0210 	bic.w	r2, r2, #16
 8002150:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	2b00      	cmp	r3, #0
 8002178:	d032      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d022      	beq.n	80021cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2205      	movs	r2, #5
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	3301      	adds	r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d307      	bcc.n	80021ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f2      	bne.n	800219e <HAL_DMA_IRQHandler+0x2ca>
 80021b8:	e000      	b.n	80021bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021ba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
 80021dc:	e000      	b.n	80021e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80021de:	bf00      	nop
    }
  }
}
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop

080021e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002204:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b40      	cmp	r3, #64	; 0x40
 8002214:	d108      	bne.n	8002228 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002226:	e007      	b.n	8002238 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	60da      	str	r2, [r3, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	3b10      	subs	r3, #16
 8002254:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800225e:	4a13      	ldr	r2, [pc, #76]	; (80022ac <DMA_CalcBaseAndBitshift+0x68>)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d909      	bls.n	8002286 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	1d1a      	adds	r2, r3, #4
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	659a      	str	r2, [r3, #88]	; 0x58
 8002284:	e007      	b.n	8002296 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800228e:	f023 0303 	bic.w	r3, r3, #3
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	aaaaaaab 	.word	0xaaaaaaab
 80022ac:	08009660 	.word	0x08009660

080022b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d11f      	bne.n	800230a <DMA_CheckFifoParam+0x5a>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d856      	bhi.n	800237e <DMA_CheckFifoParam+0xce>
 80022d0:	a201      	add	r2, pc, #4	; (adr r2, 80022d8 <DMA_CheckFifoParam+0x28>)
 80022d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d6:	bf00      	nop
 80022d8:	080022e9 	.word	0x080022e9
 80022dc:	080022fb 	.word	0x080022fb
 80022e0:	080022e9 	.word	0x080022e9
 80022e4:	0800237f 	.word	0x0800237f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d046      	beq.n	8002382 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f8:	e043      	b.n	8002382 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002302:	d140      	bne.n	8002386 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002308:	e03d      	b.n	8002386 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002312:	d121      	bne.n	8002358 <DMA_CheckFifoParam+0xa8>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d837      	bhi.n	800238a <DMA_CheckFifoParam+0xda>
 800231a:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <DMA_CheckFifoParam+0x70>)
 800231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002320:	08002331 	.word	0x08002331
 8002324:	08002337 	.word	0x08002337
 8002328:	08002331 	.word	0x08002331
 800232c:	08002349 	.word	0x08002349
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
      break;
 8002334:	e030      	b.n	8002398 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d025      	beq.n	800238e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002346:	e022      	b.n	800238e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002350:	d11f      	bne.n	8002392 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002356:	e01c      	b.n	8002392 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d903      	bls.n	8002366 <DMA_CheckFifoParam+0xb6>
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d003      	beq.n	800236c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002364:	e018      	b.n	8002398 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
      break;
 800236a:	e015      	b.n	8002398 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00e      	beq.n	8002396 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
      break;
 800237c:	e00b      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;
 800237e:	bf00      	nop
 8002380:	e00a      	b.n	8002398 <DMA_CheckFifoParam+0xe8>
      break;
 8002382:	bf00      	nop
 8002384:	e008      	b.n	8002398 <DMA_CheckFifoParam+0xe8>
      break;
 8002386:	bf00      	nop
 8002388:	e006      	b.n	8002398 <DMA_CheckFifoParam+0xe8>
      break;
 800238a:	bf00      	nop
 800238c:	e004      	b.n	8002398 <DMA_CheckFifoParam+0xe8>
      break;
 800238e:	bf00      	nop
 8002390:	e002      	b.n	8002398 <DMA_CheckFifoParam+0xe8>
      break;   
 8002392:	bf00      	nop
 8002394:	e000      	b.n	8002398 <DMA_CheckFifoParam+0xe8>
      break;
 8002396:	bf00      	nop
    }
  } 
  
  return status; 
 8002398:	7bfb      	ldrb	r3, [r7, #15]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	e16b      	b.n	800269c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c4:	2201      	movs	r2, #1
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	429a      	cmp	r2, r3
 80023de:	f040 815a 	bne.w	8002696 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d005      	beq.n	80023fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d130      	bne.n	800245c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	2203      	movs	r2, #3
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002430:	2201      	movs	r2, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 0201 	and.w	r2, r3, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	2b03      	cmp	r3, #3
 8002466:	d017      	beq.n	8002498 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d123      	bne.n	80024ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	08da      	lsrs	r2, r3, #3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3208      	adds	r2, #8
 80024ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	220f      	movs	r2, #15
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	08da      	lsrs	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3208      	adds	r2, #8
 80024e6:	69b9      	ldr	r1, [r7, #24]
 80024e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0203 	and.w	r2, r3, #3
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80b4 	beq.w	8002696 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	4b60      	ldr	r3, [pc, #384]	; (80026b4 <HAL_GPIO_Init+0x30c>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	4a5f      	ldr	r2, [pc, #380]	; (80026b4 <HAL_GPIO_Init+0x30c>)
 8002538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800253c:	6453      	str	r3, [r2, #68]	; 0x44
 800253e:	4b5d      	ldr	r3, [pc, #372]	; (80026b4 <HAL_GPIO_Init+0x30c>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800254a:	4a5b      	ldr	r2, [pc, #364]	; (80026b8 <HAL_GPIO_Init+0x310>)
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	089b      	lsrs	r3, r3, #2
 8002550:	3302      	adds	r3, #2
 8002552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	220f      	movs	r2, #15
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a52      	ldr	r2, [pc, #328]	; (80026bc <HAL_GPIO_Init+0x314>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d02b      	beq.n	80025ce <HAL_GPIO_Init+0x226>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a51      	ldr	r2, [pc, #324]	; (80026c0 <HAL_GPIO_Init+0x318>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d025      	beq.n	80025ca <HAL_GPIO_Init+0x222>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a50      	ldr	r2, [pc, #320]	; (80026c4 <HAL_GPIO_Init+0x31c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d01f      	beq.n	80025c6 <HAL_GPIO_Init+0x21e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a4f      	ldr	r2, [pc, #316]	; (80026c8 <HAL_GPIO_Init+0x320>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d019      	beq.n	80025c2 <HAL_GPIO_Init+0x21a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a4e      	ldr	r2, [pc, #312]	; (80026cc <HAL_GPIO_Init+0x324>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d013      	beq.n	80025be <HAL_GPIO_Init+0x216>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a4d      	ldr	r2, [pc, #308]	; (80026d0 <HAL_GPIO_Init+0x328>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00d      	beq.n	80025ba <HAL_GPIO_Init+0x212>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a4c      	ldr	r2, [pc, #304]	; (80026d4 <HAL_GPIO_Init+0x32c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d007      	beq.n	80025b6 <HAL_GPIO_Init+0x20e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4b      	ldr	r2, [pc, #300]	; (80026d8 <HAL_GPIO_Init+0x330>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d101      	bne.n	80025b2 <HAL_GPIO_Init+0x20a>
 80025ae:	2307      	movs	r3, #7
 80025b0:	e00e      	b.n	80025d0 <HAL_GPIO_Init+0x228>
 80025b2:	2308      	movs	r3, #8
 80025b4:	e00c      	b.n	80025d0 <HAL_GPIO_Init+0x228>
 80025b6:	2306      	movs	r3, #6
 80025b8:	e00a      	b.n	80025d0 <HAL_GPIO_Init+0x228>
 80025ba:	2305      	movs	r3, #5
 80025bc:	e008      	b.n	80025d0 <HAL_GPIO_Init+0x228>
 80025be:	2304      	movs	r3, #4
 80025c0:	e006      	b.n	80025d0 <HAL_GPIO_Init+0x228>
 80025c2:	2303      	movs	r3, #3
 80025c4:	e004      	b.n	80025d0 <HAL_GPIO_Init+0x228>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e002      	b.n	80025d0 <HAL_GPIO_Init+0x228>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <HAL_GPIO_Init+0x228>
 80025ce:	2300      	movs	r3, #0
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	f002 0203 	and.w	r2, r2, #3
 80025d6:	0092      	lsls	r2, r2, #2
 80025d8:	4093      	lsls	r3, r2
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e0:	4935      	ldr	r1, [pc, #212]	; (80026b8 <HAL_GPIO_Init+0x310>)
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	089b      	lsrs	r3, r3, #2
 80025e6:	3302      	adds	r3, #2
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ee:	4b3b      	ldr	r3, [pc, #236]	; (80026dc <HAL_GPIO_Init+0x334>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002612:	4a32      	ldr	r2, [pc, #200]	; (80026dc <HAL_GPIO_Init+0x334>)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002618:	4b30      	ldr	r3, [pc, #192]	; (80026dc <HAL_GPIO_Init+0x334>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800263c:	4a27      	ldr	r2, [pc, #156]	; (80026dc <HAL_GPIO_Init+0x334>)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002642:	4b26      	ldr	r3, [pc, #152]	; (80026dc <HAL_GPIO_Init+0x334>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002666:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <HAL_GPIO_Init+0x334>)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_GPIO_Init+0x334>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002690:	4a12      	ldr	r2, [pc, #72]	; (80026dc <HAL_GPIO_Init+0x334>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3301      	adds	r3, #1
 800269a:	61fb      	str	r3, [r7, #28]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b0f      	cmp	r3, #15
 80026a0:	f67f ae90 	bls.w	80023c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop
 80026a8:	3724      	adds	r7, #36	; 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40013800 	.word	0x40013800
 80026bc:	40020000 	.word	0x40020000
 80026c0:	40020400 	.word	0x40020400
 80026c4:	40020800 	.word	0x40020800
 80026c8:	40020c00 	.word	0x40020c00
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40021400 	.word	0x40021400
 80026d4:	40021800 	.word	0x40021800
 80026d8:	40021c00 	.word	0x40021c00
 80026dc:	40013c00 	.word	0x40013c00

080026e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
 80026ec:	4613      	mov	r3, r2
 80026ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f0:	787b      	ldrb	r3, [r7, #1]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026fc:	e003      	b.n	8002706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026fe:	887b      	ldrh	r3, [r7, #2]
 8002700:	041a      	lsls	r2, r3, #16
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	619a      	str	r2, [r3, #24]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002724:	887a      	ldrh	r2, [r7, #2]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4013      	ands	r3, r2
 800272a:	041a      	lsls	r2, r3, #16
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	43d9      	mvns	r1, r3
 8002730:	887b      	ldrh	r3, [r7, #2]
 8002732:	400b      	ands	r3, r1
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	619a      	str	r2, [r3, #24]
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_NAND_Init>:
  * @param  ComSpace_Timing pointer to Common space timing structure
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing, FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if(hnand == NULL)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_NAND_Init+0x16>
  {
     return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e03e      	b.n	80027da <HAL_NAND_Init+0x94>
  }

  if(hnand->State == HAL_NAND_STATE_RESET)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d106      	bne.n	8002776 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7fe ff95 	bl	80016a0 <HAL_NAND_MspInit>
#endif
  }

  /* Initialize NAND control Interface */
  FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3304      	adds	r3, #4
 800277e:	4619      	mov	r1, r3
 8002780:	4610      	mov	r0, r2
 8002782:	f003 f805 	bl	8005790 <FSMC_NAND_Init>
  
  /* Initialize NAND common space timing Interface */  
  FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	461a      	mov	r2, r3
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	f003 f83f 	bl	8005814 <FSMC_NAND_CommonSpace_Timing_Init>
  
  /* Initialize NAND attribute space timing Interface */  
  FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	461a      	mov	r2, r3
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	f003 f86d 	bl	8005880 <FSMC_NAND_AttributeSpace_Timing_Init>
  
  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b10      	cmp	r3, #16
 80027ac:	d108      	bne.n	80027c0 <HAL_NAND_Init+0x7a>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0204 	orr.w	r2, r2, #4
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e007      	b.n	80027d0 <HAL_NAND_Init+0x8a>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6a1a      	ldr	r2, [r3, #32]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0204 	orr.w	r2, r2, #4
 80027ce:	621a      	str	r2, [r3, #32]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
*/
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b10      	cmp	r3, #16
 80027f0:	d10a      	bne.n	8002808 <HAL_NAND_IRQHandler+0x26>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	e009      	b.n	800281c <HAL_NAND_IRQHandler+0x3a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	bf0c      	ite	eq
 8002816:	2301      	moveq	r3, #1
 8002818:	2300      	movne	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d017      	beq.n	8002850 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f8b2 	bl	800298a <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Rising edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b10      	cmp	r3, #16
 800282c:	d108      	bne.n	8002840 <HAL_NAND_IRQHandler+0x5e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0201 	bic.w	r2, r2, #1
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	e007      	b.n	8002850 <HAL_NAND_IRQHandler+0x6e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt Level flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b10      	cmp	r3, #16
 8002856:	d10a      	bne.n	800286e <HAL_NAND_IRQHandler+0x8c>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b02      	cmp	r3, #2
 8002864:	bf0c      	ite	eq
 8002866:	2301      	moveq	r3, #1
 8002868:	2300      	movne	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	e009      	b.n	8002882 <HAL_NAND_IRQHandler+0xa0>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b02      	cmp	r3, #2
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d017      	beq.n	80028b6 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f87f 	bl	800298a <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Level pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b10      	cmp	r3, #16
 8002892:	d108      	bne.n	80028a6 <HAL_NAND_IRQHandler+0xc4>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0202 	bic.w	r2, r2, #2
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	e007      	b.n	80028b6 <HAL_NAND_IRQHandler+0xd4>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0202 	bic.w	r2, r2, #2
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Check NAND interrupt Falling edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b10      	cmp	r3, #16
 80028bc:	d10a      	bne.n	80028d4 <HAL_NAND_IRQHandler+0xf2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	bf0c      	ite	eq
 80028cc:	2301      	moveq	r3, #1
 80028ce:	2300      	movne	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e009      	b.n	80028e8 <HAL_NAND_IRQHandler+0x106>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b04      	cmp	r3, #4
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d017      	beq.n	800291c <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f84c 	bl	800298a <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Falling edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b10      	cmp	r3, #16
 80028f8:	d108      	bne.n	800290c <HAL_NAND_IRQHandler+0x12a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0204 	bic.w	r2, r2, #4
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	e007      	b.n	800291c <HAL_NAND_IRQHandler+0x13a>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0204 	bic.w	r2, r2, #4
 800291a:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt FIFO empty flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b10      	cmp	r3, #16
 8002922:	d10a      	bne.n	800293a <HAL_NAND_IRQHandler+0x158>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	e009      	b.n	800294e <HAL_NAND_IRQHandler+0x16c>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b40      	cmp	r3, #64	; 0x40
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d017      	beq.n	8002982 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f819 	bl	800298a <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt FIFO empty pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b10      	cmp	r3, #16
 800295e:	d108      	bne.n	8002972 <HAL_NAND_IRQHandler+0x190>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800296e:	605a      	str	r2, [r3, #4]
  }
}
 8002970:	e007      	b.n	8002982 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002980:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hnand);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e264      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d075      	beq.n	8002aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029be:	4ba3      	ldr	r3, [pc, #652]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d00c      	beq.n	80029e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ca:	4ba0      	ldr	r3, [pc, #640]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d112      	bne.n	80029fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d6:	4b9d      	ldr	r3, [pc, #628]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e2:	d10b      	bne.n	80029fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	4b99      	ldr	r3, [pc, #612]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d05b      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x108>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d157      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e23f      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a04:	d106      	bne.n	8002a14 <HAL_RCC_OscConfig+0x74>
 8002a06:	4b91      	ldr	r3, [pc, #580]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a90      	ldr	r2, [pc, #576]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e01d      	b.n	8002a50 <HAL_RCC_OscConfig+0xb0>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x98>
 8002a1e:	4b8b      	ldr	r3, [pc, #556]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a8a      	ldr	r2, [pc, #552]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b88      	ldr	r3, [pc, #544]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a87      	ldr	r2, [pc, #540]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0xb0>
 8002a38:	4b84      	ldr	r3, [pc, #528]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a83      	ldr	r2, [pc, #524]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b81      	ldr	r3, [pc, #516]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a80      	ldr	r2, [pc, #512]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d013      	beq.n	8002a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fe ff92 	bl	8001980 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a60:	f7fe ff8e 	bl	8001980 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e204      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	4b76      	ldr	r3, [pc, #472]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0xc0>
 8002a7e:	e014      	b.n	8002aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7fe ff7e 	bl	8001980 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a88:	f7fe ff7a 	bl	8001980 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e1f0      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9a:	4b6c      	ldr	r3, [pc, #432]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0xe8>
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d063      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ab6:	4b65      	ldr	r3, [pc, #404]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac2:	4b62      	ldr	r3, [pc, #392]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d11c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ace:	4b5f      	ldr	r3, [pc, #380]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d116      	bne.n	8002b08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	4b5c      	ldr	r3, [pc, #368]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <HAL_RCC_OscConfig+0x152>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d001      	beq.n	8002af2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e1c4      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af2:	4b56      	ldr	r3, [pc, #344]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4952      	ldr	r1, [pc, #328]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b06:	e03a      	b.n	8002b7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d020      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b10:	4b4f      	ldr	r3, [pc, #316]	; (8002c50 <HAL_RCC_OscConfig+0x2b0>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe ff33 	bl	8001980 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b1e:	f7fe ff2f 	bl	8001980 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e1a5      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b30:	4b46      	ldr	r3, [pc, #280]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3c:	4b43      	ldr	r3, [pc, #268]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4940      	ldr	r1, [pc, #256]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]
 8002b50:	e015      	b.n	8002b7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b52:	4b3f      	ldr	r3, [pc, #252]	; (8002c50 <HAL_RCC_OscConfig+0x2b0>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe ff12 	bl	8001980 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b60:	f7fe ff0e 	bl	8001980 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e184      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b72:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d030      	beq.n	8002bec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d016      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b92:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <HAL_RCC_OscConfig+0x2b4>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7fe fef2 	bl	8001980 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7fe feee 	bl	8001980 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e164      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb2:	4b26      	ldr	r3, [pc, #152]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x200>
 8002bbe:	e015      	b.n	8002bec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc0:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <HAL_RCC_OscConfig+0x2b4>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc6:	f7fe fedb 	bl	8001980 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bce:	f7fe fed7 	bl	8001980 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e14d      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be0:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f0      	bne.n	8002bce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80a0 	beq.w	8002d3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfe:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10f      	bne.n	8002c2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a0e      	ldr	r2, [pc, #56]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c26:	2301      	movs	r3, #1
 8002c28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_OscConfig+0x2b8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d121      	bne.n	8002c7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <HAL_RCC_OscConfig+0x2b8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a07      	ldr	r2, [pc, #28]	; (8002c58 <HAL_RCC_OscConfig+0x2b8>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c42:	f7fe fe9d 	bl	8001980 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c48:	e011      	b.n	8002c6e <HAL_RCC_OscConfig+0x2ce>
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	42470000 	.word	0x42470000
 8002c54:	42470e80 	.word	0x42470e80
 8002c58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5c:	f7fe fe90 	bl	8001980 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e106      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6e:	4b85      	ldr	r3, [pc, #532]	; (8002e84 <HAL_RCC_OscConfig+0x4e4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d106      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2f0>
 8002c82:	4b81      	ldr	r3, [pc, #516]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	4a80      	ldr	r2, [pc, #512]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8e:	e01c      	b.n	8002cca <HAL_RCC_OscConfig+0x32a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b05      	cmp	r3, #5
 8002c96:	d10c      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x312>
 8002c98:	4b7b      	ldr	r3, [pc, #492]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	4a7a      	ldr	r2, [pc, #488]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002c9e:	f043 0304 	orr.w	r3, r3, #4
 8002ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca4:	4b78      	ldr	r3, [pc, #480]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca8:	4a77      	ldr	r2, [pc, #476]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb0:	e00b      	b.n	8002cca <HAL_RCC_OscConfig+0x32a>
 8002cb2:	4b75      	ldr	r3, [pc, #468]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	4a74      	ldr	r2, [pc, #464]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cbe:	4b72      	ldr	r3, [pc, #456]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	4a71      	ldr	r2, [pc, #452]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d015      	beq.n	8002cfe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd2:	f7fe fe55 	bl	8001980 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7fe fe51 	bl	8001980 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e0c5      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf0:	4b65      	ldr	r3, [pc, #404]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0ee      	beq.n	8002cda <HAL_RCC_OscConfig+0x33a>
 8002cfc:	e014      	b.n	8002d28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fe3f 	bl	8001980 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7fe fe3b 	bl	8001980 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e0af      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1c:	4b5a      	ldr	r3, [pc, #360]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1ee      	bne.n	8002d06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d28:	7dfb      	ldrb	r3, [r7, #23]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d105      	bne.n	8002d3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2e:	4b56      	ldr	r3, [pc, #344]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a55      	ldr	r2, [pc, #340]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 809b 	beq.w	8002e7a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d44:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d05c      	beq.n	8002e0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d141      	bne.n	8002ddc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d58:	4b4c      	ldr	r3, [pc, #304]	; (8002e8c <HAL_RCC_OscConfig+0x4ec>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fe0f 	bl	8001980 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d66:	f7fe fe0b 	bl	8001980 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e081      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d78:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f0      	bne.n	8002d66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	019b      	lsls	r3, r3, #6
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	085b      	lsrs	r3, r3, #1
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	041b      	lsls	r3, r3, #16
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	061b      	lsls	r3, r3, #24
 8002da8:	4937      	ldr	r1, [pc, #220]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dae:	4b37      	ldr	r3, [pc, #220]	; (8002e8c <HAL_RCC_OscConfig+0x4ec>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe fde4 	bl	8001980 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fe fde0 	bl	8001980 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e056      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dce:	4b2e      	ldr	r3, [pc, #184]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x41c>
 8002dda:	e04e      	b.n	8002e7a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ddc:	4b2b      	ldr	r3, [pc, #172]	; (8002e8c <HAL_RCC_OscConfig+0x4ec>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7fe fdcd 	bl	8001980 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dea:	f7fe fdc9 	bl	8001980 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e03f      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfc:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f0      	bne.n	8002dea <HAL_RCC_OscConfig+0x44a>
 8002e08:	e037      	b.n	8002e7a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e032      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e16:	4b1c      	ldr	r3, [pc, #112]	; (8002e88 <HAL_RCC_OscConfig+0x4e8>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d028      	beq.n	8002e76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d121      	bne.n	8002e76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d11a      	bne.n	8002e76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e46:	4013      	ands	r3, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e4c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d111      	bne.n	8002e76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d001      	beq.n	8002e7a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40007000 	.word	0x40007000
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	42470060 	.word	0x42470060

08002e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0cc      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b68      	ldr	r3, [pc, #416]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d90c      	bls.n	8002ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b65      	ldr	r3, [pc, #404]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b63      	ldr	r3, [pc, #396]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0b8      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d020      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee4:	4b59      	ldr	r3, [pc, #356]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4a58      	ldr	r2, [pc, #352]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002efc:	4b53      	ldr	r3, [pc, #332]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4a52      	ldr	r2, [pc, #328]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f08:	4b50      	ldr	r3, [pc, #320]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	494d      	ldr	r1, [pc, #308]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d044      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	4b47      	ldr	r3, [pc, #284]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d119      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e07f      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d003      	beq.n	8002f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4e:	4b3f      	ldr	r3, [pc, #252]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e06f      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5e:	4b3b      	ldr	r3, [pc, #236]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e067      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f6e:	4b37      	ldr	r3, [pc, #220]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f023 0203 	bic.w	r2, r3, #3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4934      	ldr	r1, [pc, #208]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f80:	f7fe fcfe 	bl	8001980 <HAL_GetTick>
 8002f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f88:	f7fe fcfa 	bl	8001980 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e04f      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	4b2b      	ldr	r3, [pc, #172]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 020c 	and.w	r2, r3, #12
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d1eb      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b25      	ldr	r3, [pc, #148]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d20c      	bcs.n	8002fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b22      	ldr	r3, [pc, #136]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e032      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4916      	ldr	r1, [pc, #88]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	490e      	ldr	r1, [pc, #56]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003016:	f000 f821 	bl	800305c <HAL_RCC_GetSysClockFreq>
 800301a:	4602      	mov	r2, r0
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	490a      	ldr	r1, [pc, #40]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8003028:	5ccb      	ldrb	r3, [r1, r3]
 800302a:	fa22 f303 	lsr.w	r3, r2, r3
 800302e:	4a09      	ldr	r2, [pc, #36]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fb3c 	bl	80016b4 <HAL_InitTick>

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023c00 	.word	0x40023c00
 800304c:	40023800 	.word	0x40023800
 8003050:	08009648 	.word	0x08009648
 8003054:	20000020 	.word	0x20000020
 8003058:	20000024 	.word	0x20000024

0800305c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800305c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	2300      	movs	r3, #0
 800306e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003074:	4b67      	ldr	r3, [pc, #412]	; (8003214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b08      	cmp	r3, #8
 800307e:	d00d      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x40>
 8003080:	2b08      	cmp	r3, #8
 8003082:	f200 80bd 	bhi.w	8003200 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x34>
 800308a:	2b04      	cmp	r3, #4
 800308c:	d003      	beq.n	8003096 <HAL_RCC_GetSysClockFreq+0x3a>
 800308e:	e0b7      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003090:	4b61      	ldr	r3, [pc, #388]	; (8003218 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003092:	60bb      	str	r3, [r7, #8]
       break;
 8003094:	e0b7      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003096:	4b61      	ldr	r3, [pc, #388]	; (800321c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003098:	60bb      	str	r3, [r7, #8]
      break;
 800309a:	e0b4      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800309c:	4b5d      	ldr	r3, [pc, #372]	; (8003214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030a6:	4b5b      	ldr	r3, [pc, #364]	; (8003214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d04d      	beq.n	800314e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b2:	4b58      	ldr	r3, [pc, #352]	; (8003214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	099b      	lsrs	r3, r3, #6
 80030b8:	461a      	mov	r2, r3
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030c2:	f04f 0100 	mov.w	r1, #0
 80030c6:	ea02 0800 	and.w	r8, r2, r0
 80030ca:	ea03 0901 	and.w	r9, r3, r1
 80030ce:	4640      	mov	r0, r8
 80030d0:	4649      	mov	r1, r9
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	014b      	lsls	r3, r1, #5
 80030dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030e0:	0142      	lsls	r2, r0, #5
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	ebb0 0008 	subs.w	r0, r0, r8
 80030ea:	eb61 0109 	sbc.w	r1, r1, r9
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	018b      	lsls	r3, r1, #6
 80030f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030fc:	0182      	lsls	r2, r0, #6
 80030fe:	1a12      	subs	r2, r2, r0
 8003100:	eb63 0301 	sbc.w	r3, r3, r1
 8003104:	f04f 0000 	mov.w	r0, #0
 8003108:	f04f 0100 	mov.w	r1, #0
 800310c:	00d9      	lsls	r1, r3, #3
 800310e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003112:	00d0      	lsls	r0, r2, #3
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	eb12 0208 	adds.w	r2, r2, r8
 800311c:	eb43 0309 	adc.w	r3, r3, r9
 8003120:	f04f 0000 	mov.w	r0, #0
 8003124:	f04f 0100 	mov.w	r1, #0
 8003128:	0259      	lsls	r1, r3, #9
 800312a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800312e:	0250      	lsls	r0, r2, #9
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	461a      	mov	r2, r3
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	f7fd f8ee 	bl	8000320 <__aeabi_uldivmod>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4613      	mov	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	e04a      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800314e:	4b31      	ldr	r3, [pc, #196]	; (8003214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	099b      	lsrs	r3, r3, #6
 8003154:	461a      	mov	r2, r3
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800315e:	f04f 0100 	mov.w	r1, #0
 8003162:	ea02 0400 	and.w	r4, r2, r0
 8003166:	ea03 0501 	and.w	r5, r3, r1
 800316a:	4620      	mov	r0, r4
 800316c:	4629      	mov	r1, r5
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	014b      	lsls	r3, r1, #5
 8003178:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800317c:	0142      	lsls	r2, r0, #5
 800317e:	4610      	mov	r0, r2
 8003180:	4619      	mov	r1, r3
 8003182:	1b00      	subs	r0, r0, r4
 8003184:	eb61 0105 	sbc.w	r1, r1, r5
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	018b      	lsls	r3, r1, #6
 8003192:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003196:	0182      	lsls	r2, r0, #6
 8003198:	1a12      	subs	r2, r2, r0
 800319a:	eb63 0301 	sbc.w	r3, r3, r1
 800319e:	f04f 0000 	mov.w	r0, #0
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	00d9      	lsls	r1, r3, #3
 80031a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031ac:	00d0      	lsls	r0, r2, #3
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	1912      	adds	r2, r2, r4
 80031b4:	eb45 0303 	adc.w	r3, r5, r3
 80031b8:	f04f 0000 	mov.w	r0, #0
 80031bc:	f04f 0100 	mov.w	r1, #0
 80031c0:	0299      	lsls	r1, r3, #10
 80031c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031c6:	0290      	lsls	r0, r2, #10
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	f7fd f8a2 	bl	8000320 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4613      	mov	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	0c1b      	lsrs	r3, r3, #16
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	3301      	adds	r3, #1
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	60bb      	str	r3, [r7, #8]
      break;
 80031fe:	e002      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003202:	60bb      	str	r3, [r7, #8]
      break;
 8003204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003206:	68bb      	ldr	r3, [r7, #8]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	00f42400 	.word	0x00f42400
 800321c:	007a1200 	.word	0x007a1200

08003220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <HAL_RCC_GetHCLKFreq+0x14>)
 8003226:	681b      	ldr	r3, [r3, #0]
}
 8003228:	4618      	mov	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000020 	.word	0x20000020

08003238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800323c:	f7ff fff0 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	0a9b      	lsrs	r3, r3, #10
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	4903      	ldr	r1, [pc, #12]	; (800325c <HAL_RCC_GetPCLK1Freq+0x24>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003254:	4618      	mov	r0, r3
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40023800 	.word	0x40023800
 800325c:	08009658 	.word	0x08009658

08003260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003264:	f7ff ffdc 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 8003268:	4602      	mov	r2, r0
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	0b5b      	lsrs	r3, r3, #13
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	4903      	ldr	r1, [pc, #12]	; (8003284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003276:	5ccb      	ldrb	r3, [r1, r3]
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40023800 	.word	0x40023800
 8003284:	08009658 	.word	0x08009658

08003288 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	220f      	movs	r2, #15
 8003296:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_RCC_GetClockConfig+0x5c>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0203 	and.w	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_RCC_GetClockConfig+0x5c>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <HAL_RCC_GetClockConfig+0x5c>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_RCC_GetClockConfig+0x5c>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	08db      	lsrs	r3, r3, #3
 80032c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <HAL_RCC_GetClockConfig+0x60>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0207 	and.w	r2, r3, #7
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	601a      	str	r2, [r3, #0]
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40023c00 	.word	0x40023c00

080032ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003310:	2b00      	cmp	r3, #0
 8003312:	d035      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003314:	4b62      	ldr	r3, [pc, #392]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800331a:	f7fe fb31 	bl	8001980 <HAL_GetTick>
 800331e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003320:	e008      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003322:	f7fe fb2d 	bl	8001980 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e0b0      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003334:	4b5b      	ldr	r3, [pc, #364]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1f0      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	019a      	lsls	r2, r3, #6
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	071b      	lsls	r3, r3, #28
 800334c:	4955      	ldr	r1, [pc, #340]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003354:	4b52      	ldr	r3, [pc, #328]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003356:	2201      	movs	r2, #1
 8003358:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800335a:	f7fe fb11 	bl	8001980 <HAL_GetTick>
 800335e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003360:	e008      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003362:	f7fe fb0d 	bl	8001980 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e090      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003374:	4b4b      	ldr	r3, [pc, #300]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8083 	beq.w	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	4b44      	ldr	r3, [pc, #272]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	4a43      	ldr	r2, [pc, #268]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339c:	6413      	str	r3, [r2, #64]	; 0x40
 800339e:	4b41      	ldr	r3, [pc, #260]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80033aa:	4b3f      	ldr	r3, [pc, #252]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a3e      	ldr	r2, [pc, #248]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033b6:	f7fe fae3 	bl	8001980 <HAL_GetTick>
 80033ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80033be:	f7fe fadf 	bl	8001980 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e062      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033d0:	4b35      	ldr	r3, [pc, #212]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033dc:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d02f      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d028      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033fa:	4b2a      	ldr	r3, [pc, #168]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003402:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003404:	4b29      	ldr	r3, [pc, #164]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800340a:	4b28      	ldr	r3, [pc, #160]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003410:	4a24      	ldr	r2, [pc, #144]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003416:	4b23      	ldr	r3, [pc, #140]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b01      	cmp	r3, #1
 8003420:	d114      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003422:	f7fe faad 	bl	8001980 <HAL_GetTick>
 8003426:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003428:	e00a      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fe faa9 	bl	8001980 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e02a      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003440:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ee      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003458:	d10d      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800345a:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800346a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346e:	490d      	ldr	r1, [pc, #52]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003470:	4313      	orrs	r3, r2
 8003472:	608b      	str	r3, [r1, #8]
 8003474:	e005      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003476:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800347c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003480:	6093      	str	r3, [r2, #8]
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003484:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348e:	4905      	ldr	r1, [pc, #20]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003490:	4313      	orrs	r3, r2
 8003492:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	42470068 	.word	0x42470068
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40007000 	.word	0x40007000
 80034ac:	42470e40 	.word	0x42470e40

080034b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e083      	b.n	80035ca <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	7f5b      	ldrb	r3, [r3, #29]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d105      	bne.n	80034d8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fd ff38 	bl	8001348 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	22ca      	movs	r2, #202	; 0xca
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2253      	movs	r2, #83	; 0x53
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 faa8 	bl	8003a44 <RTC_EnterInitMode>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	22ff      	movs	r2, #255	; 0xff
 8003500:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2204      	movs	r2, #4
 8003506:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e05e      	b.n	80035ca <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800351a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800351e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6899      	ldr	r1, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68d2      	ldr	r2, [r2, #12]
 8003546:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6919      	ldr	r1, [r3, #16]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	041a      	lsls	r2, r3, #16
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800356a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10e      	bne.n	8003598 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa3a 	bl	80039f4 <HAL_RTC_WaitForSynchro>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d008      	beq.n	8003598 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	22ff      	movs	r2, #255	; 0xff
 800358c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2204      	movs	r2, #4
 8003592:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e018      	b.n	80035ca <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	22ff      	movs	r2, #255	; 0xff
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80035c8:	2300      	movs	r3, #0
  }
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035d2:	b590      	push	{r4, r7, lr}
 80035d4:	b087      	sub	sp, #28
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	7f1b      	ldrb	r3, [r3, #28]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_RTC_SetTime+0x1c>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e0aa      	b.n	8003744 <HAL_RTC_SetTime+0x172>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2202      	movs	r2, #2
 80035f8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d126      	bne.n	800364e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2200      	movs	r2, #0
 8003612:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fa3f 	bl	8003a9c <RTC_ByteToBcd2>
 800361e:	4603      	mov	r3, r0
 8003620:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	785b      	ldrb	r3, [r3, #1]
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fa38 	bl	8003a9c <RTC_ByteToBcd2>
 800362c:	4603      	mov	r3, r0
 800362e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003630:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	789b      	ldrb	r3, [r3, #2]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fa30 	bl	8003a9c <RTC_ByteToBcd2>
 800363c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800363e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	78db      	ldrb	r3, [r3, #3]
 8003646:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e018      	b.n	8003680 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003658:	2b00      	cmp	r3, #0
 800365a:	d102      	bne.n	8003662 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2200      	movs	r2, #0
 8003660:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	785b      	ldrb	r3, [r3, #1]
 800366c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800366e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003674:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	78db      	ldrb	r3, [r3, #3]
 800367a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	22ca      	movs	r2, #202	; 0xca
 8003686:	625a      	str	r2, [r3, #36]	; 0x24
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2253      	movs	r2, #83	; 0x53
 800368e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f9d7 	bl	8003a44 <RTC_EnterInitMode>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	22ff      	movs	r2, #255	; 0xff
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2204      	movs	r2, #4
 80036a8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e047      	b.n	8003744 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80036be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80036c2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036d2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6899      	ldr	r1, [r3, #8]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036fa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d111      	bne.n	800372e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f972 	bl	80039f4 <HAL_RTC_WaitForSynchro>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00b      	beq.n	800372e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	22ff      	movs	r2, #255	; 0xff
 800371c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2204      	movs	r2, #4
 8003722:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e00a      	b.n	8003744 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	22ff      	movs	r2, #255	; 0xff
 8003734:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003742:	2300      	movs	r3, #0
  }
}
 8003744:	4618      	mov	r0, r3
 8003746:	371c      	adds	r7, #28
 8003748:	46bd      	mov	sp, r7
 800374a:	bd90      	pop	{r4, r7, pc}

0800374c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800377e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003782:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	0c1b      	lsrs	r3, r3, #16
 8003788:	b2db      	uxtb	r3, r3
 800378a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800378e:	b2da      	uxtb	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d11a      	bne.n	80037fe <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 f983 	bl	8003ad8 <RTC_Bcd2ToByte>
 80037d2:	4603      	mov	r3, r0
 80037d4:	461a      	mov	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	785b      	ldrb	r3, [r3, #1]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f97a 	bl	8003ad8 <RTC_Bcd2ToByte>
 80037e4:	4603      	mov	r3, r0
 80037e6:	461a      	mov	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	789b      	ldrb	r3, [r3, #2]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 f971 	bl	8003ad8 <RTC_Bcd2ToByte>
 80037f6:	4603      	mov	r3, r0
 80037f8:	461a      	mov	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	7f1b      	ldrb	r3, [r3, #28]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_RTC_SetDate+0x1c>
 8003820:	2302      	movs	r3, #2
 8003822:	e094      	b.n	800394e <HAL_RTC_SetDate+0x146>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2202      	movs	r2, #2
 800382e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10e      	bne.n	8003854 <HAL_RTC_SetDate+0x4c>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	785b      	ldrb	r3, [r3, #1]
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	785b      	ldrb	r3, [r3, #1]
 8003846:	f023 0310 	bic.w	r3, r3, #16
 800384a:	b2db      	uxtb	r3, r3
 800384c:	330a      	adds	r3, #10
 800384e:	b2da      	uxtb	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11c      	bne.n	8003894 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	78db      	ldrb	r3, [r3, #3]
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f91c 	bl	8003a9c <RTC_ByteToBcd2>
 8003864:	4603      	mov	r3, r0
 8003866:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	785b      	ldrb	r3, [r3, #1]
 800386c:	4618      	mov	r0, r3
 800386e:	f000 f915 	bl	8003a9c <RTC_ByteToBcd2>
 8003872:	4603      	mov	r3, r0
 8003874:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003876:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	789b      	ldrb	r3, [r3, #2]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f90d 	bl	8003a9c <RTC_ByteToBcd2>
 8003882:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003884:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	e00e      	b.n	80038b2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	78db      	ldrb	r3, [r3, #3]
 8003898:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	785b      	ldrb	r3, [r3, #1]
 800389e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80038a0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80038a6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	22ca      	movs	r2, #202	; 0xca
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2253      	movs	r2, #83	; 0x53
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f8be 	bl	8003a44 <RTC_EnterInitMode>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	22ff      	movs	r2, #255	; 0xff
 80038d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2204      	movs	r2, #4
 80038da:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e033      	b.n	800394e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80038f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038f4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003904:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d111      	bne.n	8003938 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f86d 	bl	80039f4 <HAL_RTC_WaitForSynchro>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00b      	beq.n	8003938 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	22ff      	movs	r2, #255	; 0xff
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2204      	movs	r2, #4
 800392c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e00a      	b.n	800394e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	22ff      	movs	r2, #255	; 0xff
 800393e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800394c:	2300      	movs	r3, #0
  }
}
 800394e:	4618      	mov	r0, r3
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	bd90      	pop	{r4, r7, pc}

08003956 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003970:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003974:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	b2da      	uxtb	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	b2db      	uxtb	r3, r3
 8003986:	f003 031f 	and.w	r3, r3, #31
 800398a:	b2da      	uxtb	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003998:	b2da      	uxtb	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	0b5b      	lsrs	r3, r3, #13
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d11a      	bne.n	80039ea <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	78db      	ldrb	r3, [r3, #3]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 f88d 	bl	8003ad8 <RTC_Bcd2ToByte>
 80039be:	4603      	mov	r3, r0
 80039c0:	461a      	mov	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	785b      	ldrb	r3, [r3, #1]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 f884 	bl	8003ad8 <RTC_Bcd2ToByte>
 80039d0:	4603      	mov	r3, r0
 80039d2:	461a      	mov	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	789b      	ldrb	r3, [r3, #2]
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 f87b 	bl	8003ad8 <RTC_Bcd2ToByte>
 80039e2:	4603      	mov	r3, r0
 80039e4:	461a      	mov	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a0e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a10:	f7fd ffb6 	bl	8001980 <HAL_GetTick>
 8003a14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003a16:	e009      	b.n	8003a2c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003a18:	f7fd ffb2 	bl	8001980 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a26:	d901      	bls.n	8003a2c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e007      	b.n	8003a3c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0ee      	beq.n	8003a18 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d119      	bne.n	8003a92 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a66:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a68:	f7fd ff8a 	bl	8001980 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a6e:	e009      	b.n	8003a84 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003a70:	f7fd ff86 	bl	8001980 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a7e:	d901      	bls.n	8003a84 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e007      	b.n	8003a94 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0ee      	beq.n	8003a70 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003aaa:	e005      	b.n	8003ab8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	3b0a      	subs	r3, #10
 8003ab6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	2b09      	cmp	r3, #9
 8003abc:	d8f6      	bhi.n	8003aac <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	b2db      	uxtb	r3, r3
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	4413      	add	r3, r2
 8003b06:	b2db      	uxtb	r3, r3
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e07b      	b.n	8003c1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d108      	bne.n	8003b40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b36:	d009      	beq.n	8003b4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	61da      	str	r2, [r3, #28]
 8003b3e:	e005      	b.n	8003b4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd fc1a 	bl	80013a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd0:	ea42 0103 	orr.w	r1, r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	f003 0104 	and.w	r1, r3, #4
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	f003 0210 	and.w	r2, r3, #16
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	099b      	lsrs	r3, r3, #6
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10f      	bne.n	8003c6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	099b      	lsrs	r3, r3, #6
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d004      	beq.n	8003c6c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	4798      	blx	r3
    return;
 8003c6a:	e0d7      	b.n	8003e1c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <HAL_SPI_IRQHandler+0x66>
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	09db      	lsrs	r3, r3, #7
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	4798      	blx	r3
    return;
 8003c8c:	e0c6      	b.n	8003e1c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	095b      	lsrs	r3, r3, #5
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10c      	bne.n	8003cb4 <HAL_SPI_IRQHandler+0x8c>
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	099b      	lsrs	r3, r3, #6
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	0a1b      	lsrs	r3, r3, #8
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80b4 	beq.w	8003e1c <HAL_SPI_IRQHandler+0x1f4>
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80ad 	beq.w	8003e1c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	099b      	lsrs	r3, r3, #6
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d023      	beq.n	8003d16 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d011      	beq.n	8003cfe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cde:	f043 0204 	orr.w	r2, r3, #4
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	e00b      	b.n	8003d16 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	693b      	ldr	r3, [r7, #16]
        return;
 8003d14:	e082      	b.n	8003e1c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d014      	beq.n	8003d4c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	f043 0201 	orr.w	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	0a1b      	lsrs	r3, r3, #8
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00c      	beq.n	8003d72 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	f043 0208 	orr.w	r2, r3, #8
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d64:	2300      	movs	r3, #0
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d04f      	beq.n	8003e1a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d88:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d104      	bne.n	8003da6 <HAL_SPI_IRQHandler+0x17e>
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d034      	beq.n	8003e10 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0203 	bic.w	r2, r2, #3
 8003db4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d011      	beq.n	8003de2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc2:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <HAL_SPI_IRQHandler+0x1fc>)
 8003dc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe f860 	bl	8001e90 <HAL_DMA_Abort_IT>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d016      	beq.n	8003e18 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dee:	4a0d      	ldr	r2, [pc, #52]	; (8003e24 <HAL_SPI_IRQHandler+0x1fc>)
 8003df0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe f84a 	bl	8001e90 <HAL_DMA_Abort_IT>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003e0e:	e003      	b.n	8003e18 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f809 	bl	8003e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e16:	e000      	b.n	8003e1a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003e18:	bf00      	nop
    return;
 8003e1a:	bf00      	nop
  }
}
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	08003e3d 	.word	0x08003e3d

08003e28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f7ff ffe6 	bl	8003e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e5c:	bf00      	nop
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e041      	b.n	8003efa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fd fb0a 	bl	80014a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fa96 	bl	80043d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d001      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e04e      	b.n	8003fba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a23      	ldr	r2, [pc, #140]	; (8003fc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d022      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x80>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f46:	d01d      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x80>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1f      	ldr	r2, [pc, #124]	; (8003fcc <HAL_TIM_Base_Start_IT+0xc8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d018      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x80>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1e      	ldr	r2, [pc, #120]	; (8003fd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x80>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1c      	ldr	r2, [pc, #112]	; (8003fd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00e      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x80>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1b      	ldr	r2, [pc, #108]	; (8003fd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d009      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x80>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <HAL_TIM_Base_Start_IT+0xd8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d004      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x80>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d111      	bne.n	8003fa8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b06      	cmp	r3, #6
 8003f94:	d010      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa6:	e007      	b.n	8003fb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40000800 	.word	0x40000800
 8003fd4:	40000c00 	.word	0x40000c00
 8003fd8:	40010400 	.word	0x40010400
 8003fdc:	40014000 	.word	0x40014000
 8003fe0:	40001800 	.word	0x40001800

08003fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d122      	bne.n	8004040 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b02      	cmp	r3, #2
 8004006:	d11b      	bne.n	8004040 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0202 	mvn.w	r2, #2
 8004010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f9b5 	bl	8004396 <HAL_TIM_IC_CaptureCallback>
 800402c:	e005      	b.n	800403a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f9a7 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f9b8 	bl	80043aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b04      	cmp	r3, #4
 800404c:	d122      	bne.n	8004094 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b04      	cmp	r3, #4
 800405a:	d11b      	bne.n	8004094 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0204 	mvn.w	r2, #4
 8004064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2202      	movs	r2, #2
 800406a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f98b 	bl	8004396 <HAL_TIM_IC_CaptureCallback>
 8004080:	e005      	b.n	800408e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f97d 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f98e 	bl	80043aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d122      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d11b      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0208 	mvn.w	r2, #8
 80040b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2204      	movs	r2, #4
 80040be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f961 	bl	8004396 <HAL_TIM_IC_CaptureCallback>
 80040d4:	e005      	b.n	80040e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f953 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f964 	bl	80043aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d122      	bne.n	800413c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b10      	cmp	r3, #16
 8004102:	d11b      	bne.n	800413c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0210 	mvn.w	r2, #16
 800410c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2208      	movs	r2, #8
 8004112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f937 	bl	8004396 <HAL_TIM_IC_CaptureCallback>
 8004128:	e005      	b.n	8004136 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f929 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f93a 	bl	80043aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b01      	cmp	r3, #1
 8004148:	d10e      	bne.n	8004168 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b01      	cmp	r3, #1
 8004156:	d107      	bne.n	8004168 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0201 	mvn.w	r2, #1
 8004160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd f88a 	bl	800127c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004172:	2b80      	cmp	r3, #128	; 0x80
 8004174:	d10e      	bne.n	8004194 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004180:	2b80      	cmp	r3, #128	; 0x80
 8004182:	d107      	bne.n	8004194 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800418c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fae0 	bl	8004754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419e:	2b40      	cmp	r3, #64	; 0x40
 80041a0:	d10e      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ac:	2b40      	cmp	r3, #64	; 0x40
 80041ae:	d107      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f8ff 	bl	80043be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d10e      	bne.n	80041ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d107      	bne.n	80041ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0220 	mvn.w	r2, #32
 80041e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 faaa 	bl	8004740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_TIM_ConfigClockSource+0x1c>
 800420c:	2302      	movs	r3, #2
 800420e:	e0b4      	b.n	800437a <HAL_TIM_ConfigClockSource+0x186>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800422e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004248:	d03e      	beq.n	80042c8 <HAL_TIM_ConfigClockSource+0xd4>
 800424a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800424e:	f200 8087 	bhi.w	8004360 <HAL_TIM_ConfigClockSource+0x16c>
 8004252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004256:	f000 8086 	beq.w	8004366 <HAL_TIM_ConfigClockSource+0x172>
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425e:	d87f      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x16c>
 8004260:	2b70      	cmp	r3, #112	; 0x70
 8004262:	d01a      	beq.n	800429a <HAL_TIM_ConfigClockSource+0xa6>
 8004264:	2b70      	cmp	r3, #112	; 0x70
 8004266:	d87b      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x16c>
 8004268:	2b60      	cmp	r3, #96	; 0x60
 800426a:	d050      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x11a>
 800426c:	2b60      	cmp	r3, #96	; 0x60
 800426e:	d877      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x16c>
 8004270:	2b50      	cmp	r3, #80	; 0x50
 8004272:	d03c      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0xfa>
 8004274:	2b50      	cmp	r3, #80	; 0x50
 8004276:	d873      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x16c>
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d058      	beq.n	800432e <HAL_TIM_ConfigClockSource+0x13a>
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d86f      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x16c>
 8004280:	2b30      	cmp	r3, #48	; 0x30
 8004282:	d064      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15a>
 8004284:	2b30      	cmp	r3, #48	; 0x30
 8004286:	d86b      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x16c>
 8004288:	2b20      	cmp	r3, #32
 800428a:	d060      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15a>
 800428c:	2b20      	cmp	r3, #32
 800428e:	d867      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x16c>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d05c      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15a>
 8004294:	2b10      	cmp	r3, #16
 8004296:	d05a      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15a>
 8004298:	e062      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6899      	ldr	r1, [r3, #8]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f000 f9ad 	bl	8004608 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	609a      	str	r2, [r3, #8]
      break;
 80042c6:	e04f      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	6899      	ldr	r1, [r3, #8]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f000 f996 	bl	8004608 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ea:	609a      	str	r2, [r3, #8]
      break;
 80042ec:	e03c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6859      	ldr	r1, [r3, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f000 f90a 	bl	8004514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2150      	movs	r1, #80	; 0x50
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f963 	bl	80045d2 <TIM_ITRx_SetConfig>
      break;
 800430c:	e02c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6859      	ldr	r1, [r3, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	461a      	mov	r2, r3
 800431c:	f000 f929 	bl	8004572 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2160      	movs	r1, #96	; 0x60
 8004326:	4618      	mov	r0, r3
 8004328:	f000 f953 	bl	80045d2 <TIM_ITRx_SetConfig>
      break;
 800432c:	e01c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6859      	ldr	r1, [r3, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	461a      	mov	r2, r3
 800433c:	f000 f8ea 	bl	8004514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2140      	movs	r1, #64	; 0x40
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f943 	bl	80045d2 <TIM_ITRx_SetConfig>
      break;
 800434c:	e00c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4619      	mov	r1, r3
 8004358:	4610      	mov	r0, r2
 800435a:	f000 f93a 	bl	80045d2 <TIM_ITRx_SetConfig>
      break;
 800435e:	e003      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
      break;
 8004364:	e000      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004378:	7bfb      	ldrb	r3, [r7, #15]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
	...

080043d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a40      	ldr	r2, [pc, #256]	; (80044e8 <TIM_Base_SetConfig+0x114>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d013      	beq.n	8004414 <TIM_Base_SetConfig+0x40>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f2:	d00f      	beq.n	8004414 <TIM_Base_SetConfig+0x40>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a3d      	ldr	r2, [pc, #244]	; (80044ec <TIM_Base_SetConfig+0x118>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00b      	beq.n	8004414 <TIM_Base_SetConfig+0x40>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a3c      	ldr	r2, [pc, #240]	; (80044f0 <TIM_Base_SetConfig+0x11c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d007      	beq.n	8004414 <TIM_Base_SetConfig+0x40>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a3b      	ldr	r2, [pc, #236]	; (80044f4 <TIM_Base_SetConfig+0x120>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d003      	beq.n	8004414 <TIM_Base_SetConfig+0x40>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a3a      	ldr	r2, [pc, #232]	; (80044f8 <TIM_Base_SetConfig+0x124>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d108      	bne.n	8004426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a2f      	ldr	r2, [pc, #188]	; (80044e8 <TIM_Base_SetConfig+0x114>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d02b      	beq.n	8004486 <TIM_Base_SetConfig+0xb2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004434:	d027      	beq.n	8004486 <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a2c      	ldr	r2, [pc, #176]	; (80044ec <TIM_Base_SetConfig+0x118>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d023      	beq.n	8004486 <TIM_Base_SetConfig+0xb2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a2b      	ldr	r2, [pc, #172]	; (80044f0 <TIM_Base_SetConfig+0x11c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01f      	beq.n	8004486 <TIM_Base_SetConfig+0xb2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a2a      	ldr	r2, [pc, #168]	; (80044f4 <TIM_Base_SetConfig+0x120>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d01b      	beq.n	8004486 <TIM_Base_SetConfig+0xb2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a29      	ldr	r2, [pc, #164]	; (80044f8 <TIM_Base_SetConfig+0x124>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d017      	beq.n	8004486 <TIM_Base_SetConfig+0xb2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a28      	ldr	r2, [pc, #160]	; (80044fc <TIM_Base_SetConfig+0x128>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <TIM_Base_SetConfig+0xb2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a27      	ldr	r2, [pc, #156]	; (8004500 <TIM_Base_SetConfig+0x12c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00f      	beq.n	8004486 <TIM_Base_SetConfig+0xb2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a26      	ldr	r2, [pc, #152]	; (8004504 <TIM_Base_SetConfig+0x130>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00b      	beq.n	8004486 <TIM_Base_SetConfig+0xb2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a25      	ldr	r2, [pc, #148]	; (8004508 <TIM_Base_SetConfig+0x134>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d007      	beq.n	8004486 <TIM_Base_SetConfig+0xb2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a24      	ldr	r2, [pc, #144]	; (800450c <TIM_Base_SetConfig+0x138>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d003      	beq.n	8004486 <TIM_Base_SetConfig+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a23      	ldr	r2, [pc, #140]	; (8004510 <TIM_Base_SetConfig+0x13c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d108      	bne.n	8004498 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <TIM_Base_SetConfig+0x114>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d003      	beq.n	80044cc <TIM_Base_SetConfig+0xf8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a0c      	ldr	r2, [pc, #48]	; (80044f8 <TIM_Base_SetConfig+0x124>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d103      	bne.n	80044d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	615a      	str	r2, [r3, #20]
}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40010000 	.word	0x40010000
 80044ec:	40000400 	.word	0x40000400
 80044f0:	40000800 	.word	0x40000800
 80044f4:	40000c00 	.word	0x40000c00
 80044f8:	40010400 	.word	0x40010400
 80044fc:	40014000 	.word	0x40014000
 8004500:	40014400 	.word	0x40014400
 8004504:	40014800 	.word	0x40014800
 8004508:	40001800 	.word	0x40001800
 800450c:	40001c00 	.word	0x40001c00
 8004510:	40002000 	.word	0x40002000

08004514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f023 0201 	bic.w	r2, r3, #1
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800453e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f023 030a 	bic.w	r3, r3, #10
 8004550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004572:	b480      	push	{r7}
 8004574:	b087      	sub	sp, #28
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f023 0210 	bic.w	r2, r3, #16
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800459c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	031b      	lsls	r3, r3, #12
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	621a      	str	r2, [r3, #32]
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f043 0307 	orr.w	r3, r3, #7
 80045f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	021a      	lsls	r2, r3, #8
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	431a      	orrs	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4313      	orrs	r3, r2
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	609a      	str	r2, [r3, #8]
}
 800463c:	bf00      	nop
 800463e:	371c      	adds	r7, #28
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800465c:	2302      	movs	r3, #2
 800465e:	e05a      	b.n	8004716 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004686:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a21      	ldr	r2, [pc, #132]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d022      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ac:	d01d      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d018      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a1b      	ldr	r2, [pc, #108]	; (800472c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1a      	ldr	r2, [pc, #104]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00e      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a18      	ldr	r2, [pc, #96]	; (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d009      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a17      	ldr	r2, [pc, #92]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a15      	ldr	r2, [pc, #84]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d10c      	bne.n	8004704 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40010000 	.word	0x40010000
 8004728:	40000400 	.word	0x40000400
 800472c:	40000800 	.word	0x40000800
 8004730:	40000c00 	.word	0x40000c00
 8004734:	40010400 	.word	0x40010400
 8004738:	40014000 	.word	0x40014000
 800473c:	40001800 	.word	0x40001800

08004740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e03f      	b.n	80047fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fc feae 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2224      	movs	r2, #36	; 0x24
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fe27 	bl	8005400 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695a      	ldr	r2, [r3, #20]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	4613      	mov	r3, r2
 800480e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b20      	cmp	r3, #32
 800481a:	d11d      	bne.n	8004858 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <HAL_UART_Receive_IT+0x26>
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e016      	b.n	800485a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_UART_Receive_IT+0x38>
 8004836:	2302      	movs	r3, #2
 8004838:	e00f      	b.n	800485a <HAL_UART_Receive_IT+0x58>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	461a      	mov	r2, r3
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fbd9 	bl	8005006 <UART_Start_Receive_IT>
 8004854:	4603      	mov	r3, r0
 8004856:	e000      	b.n	800485a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004858:	2302      	movs	r3, #2
  }
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08c      	sub	sp, #48	; 0x30
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b20      	cmp	r3, #32
 800487c:	d165      	bne.n	800494a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <HAL_UART_Transmit_DMA+0x26>
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e05e      	b.n	800494c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_UART_Transmit_DMA+0x38>
 8004898:	2302      	movs	r3, #2
 800489a:	e057      	b.n	800494c <HAL_UART_Transmit_DMA+0xe8>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	88fa      	ldrh	r2, [r7, #6]
 80048ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	88fa      	ldrh	r2, [r7, #6]
 80048b4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2221      	movs	r2, #33	; 0x21
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c8:	4a22      	ldr	r2, [pc, #136]	; (8004954 <HAL_UART_Transmit_DMA+0xf0>)
 80048ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d0:	4a21      	ldr	r2, [pc, #132]	; (8004958 <HAL_UART_Transmit_DMA+0xf4>)
 80048d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d8:	4a20      	ldr	r2, [pc, #128]	; (800495c <HAL_UART_Transmit_DMA+0xf8>)
 80048da:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e0:	2200      	movs	r2, #0
 80048e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80048e4:	f107 0308 	add.w	r3, r7, #8
 80048e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80048ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f0:	6819      	ldr	r1, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3304      	adds	r3, #4
 80048f8:	461a      	mov	r2, r3
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	f7fd fa00 	bl	8001d00 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004908:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3314      	adds	r3, #20
 8004918:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	617b      	str	r3, [r7, #20]
   return(result);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004928:	62bb      	str	r3, [r7, #40]	; 0x28
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3314      	adds	r3, #20
 8004930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004932:	627a      	str	r2, [r7, #36]	; 0x24
 8004934:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6a39      	ldr	r1, [r7, #32]
 8004938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e5      	bne.n	8004912 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	e000      	b.n	800494c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800494a:	2302      	movs	r3, #2
  }
}
 800494c:	4618      	mov	r0, r3
 800494e:	3730      	adds	r7, #48	; 0x30
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	08004ebd 	.word	0x08004ebd
 8004958:	08004f57 	.word	0x08004f57
 800495c:	08004f73 	.word	0x08004f73

08004960 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b0ba      	sub	sp, #232	; 0xe8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004986:	2300      	movs	r3, #0
 8004988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800498c:	2300      	movs	r3, #0
 800498e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800499e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10f      	bne.n	80049c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <HAL_UART_IRQHandler+0x66>
 80049b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fc62 	bl	8005288 <UART_Receive_IT>
      return;
 80049c4:	e256      	b.n	8004e74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80de 	beq.w	8004b8c <HAL_UART_IRQHandler+0x22c>
 80049d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80d1 	beq.w	8004b8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <HAL_UART_IRQHandler+0xae>
 80049f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f043 0201 	orr.w	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00b      	beq.n	8004a32 <HAL_UART_IRQHandler+0xd2>
 8004a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	f043 0202 	orr.w	r2, r3, #2
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00b      	beq.n	8004a56 <HAL_UART_IRQHandler+0xf6>
 8004a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f043 0204 	orr.w	r2, r3, #4
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d011      	beq.n	8004a86 <HAL_UART_IRQHandler+0x126>
 8004a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d105      	bne.n	8004a7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f043 0208 	orr.w	r2, r3, #8
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 81ed 	beq.w	8004e6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d008      	beq.n	8004aae <HAL_UART_IRQHandler+0x14e>
 8004a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fbed 	bl	8005288 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab8:	2b40      	cmp	r3, #64	; 0x40
 8004aba:	bf0c      	ite	eq
 8004abc:	2301      	moveq	r3, #1
 8004abe:	2300      	movne	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <HAL_UART_IRQHandler+0x17a>
 8004ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d04f      	beq.n	8004b7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 faf5 	bl	80050ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	d141      	bne.n	8004b72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3314      	adds	r3, #20
 8004af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3314      	adds	r3, #20
 8004b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1d9      	bne.n	8004aee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d013      	beq.n	8004b6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	4a7d      	ldr	r2, [pc, #500]	; (8004d3c <HAL_UART_IRQHandler+0x3dc>)
 8004b48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fd f99e 	bl	8001e90 <HAL_DMA_Abort_IT>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d016      	beq.n	8004b88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b64:	4610      	mov	r0, r2
 8004b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b68:	e00e      	b.n	8004b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f990 	bl	8004e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	e00a      	b.n	8004b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f98c 	bl	8004e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	e006      	b.n	8004b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f988 	bl	8004e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b86:	e170      	b.n	8004e6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b88:	bf00      	nop
    return;
 8004b8a:	e16e      	b.n	8004e6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	f040 814a 	bne.w	8004e2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 8143 	beq.w	8004e2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 813c 	beq.w	8004e2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60bb      	str	r3, [r7, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd2:	2b40      	cmp	r3, #64	; 0x40
 8004bd4:	f040 80b4 	bne.w	8004d40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004be4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8140 	beq.w	8004e6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	f080 8139 	bcs.w	8004e6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0e:	f000 8088 	beq.w	8004d22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	330c      	adds	r3, #12
 8004c18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1d9      	bne.n	8004c12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3314      	adds	r3, #20
 8004c64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3314      	adds	r3, #20
 8004c7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e1      	bne.n	8004c5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3314      	adds	r3, #20
 8004ca0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3314      	adds	r3, #20
 8004cba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e3      	bne.n	8004c9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf2:	f023 0310 	bic.w	r3, r3, #16
 8004cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d04:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e3      	bne.n	8004ce0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fd f847 	bl	8001db0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	4619      	mov	r1, r3
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f8b6 	bl	8004ea4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d38:	e099      	b.n	8004e6e <HAL_UART_IRQHandler+0x50e>
 8004d3a:	bf00      	nop
 8004d3c:	08005191 	.word	0x08005191
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 808b 	beq.w	8004e72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8086 	beq.w	8004e72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d8a:	647a      	str	r2, [r7, #68]	; 0x44
 8004d8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e3      	bne.n	8004d66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3314      	adds	r3, #20
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	623b      	str	r3, [r7, #32]
   return(result);
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3314      	adds	r3, #20
 8004dbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dc2:	633a      	str	r2, [r7, #48]	; 0x30
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e3      	bne.n	8004d9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0310 	bic.w	r3, r3, #16
 8004dfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e08:	61fa      	str	r2, [r7, #28]
 8004e0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	69b9      	ldr	r1, [r7, #24]
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	617b      	str	r3, [r7, #20]
   return(result);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e3      	bne.n	8004de4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e20:	4619      	mov	r1, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f83e 	bl	8004ea4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e28:	e023      	b.n	8004e72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d009      	beq.n	8004e4a <HAL_UART_IRQHandler+0x4ea>
 8004e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f9b8 	bl	80051b8 <UART_Transmit_IT>
    return;
 8004e48:	e014      	b.n	8004e74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00e      	beq.n	8004e74 <HAL_UART_IRQHandler+0x514>
 8004e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f9f8 	bl	8005258 <UART_EndTransmit_IT>
    return;
 8004e68:	e004      	b.n	8004e74 <HAL_UART_IRQHandler+0x514>
    return;
 8004e6a:	bf00      	nop
 8004e6c:	e002      	b.n	8004e74 <HAL_UART_IRQHandler+0x514>
      return;
 8004e6e:	bf00      	nop
 8004e70:	e000      	b.n	8004e74 <HAL_UART_IRQHandler+0x514>
      return;
 8004e72:	bf00      	nop
  }
}
 8004e74:	37e8      	adds	r7, #232	; 0xe8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop

08004e7c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b090      	sub	sp, #64	; 0x40
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d137      	bne.n	8004f48 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eda:	2200      	movs	r2, #0
 8004edc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3314      	adds	r3, #20
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	623b      	str	r3, [r7, #32]
   return(result);
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3314      	adds	r3, #20
 8004efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004efe:	633a      	str	r2, [r7, #48]	; 0x30
 8004f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f06:	e841 2300 	strex	r3, r2, [r1]
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1e5      	bne.n	8004ede <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	330c      	adds	r3, #12
 8004f18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	e853 3f00 	ldrex	r3, [r3]
 8004f20:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f28:	637b      	str	r3, [r7, #52]	; 0x34
 8004f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f32:	61fa      	str	r2, [r7, #28]
 8004f34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	69b9      	ldr	r1, [r7, #24]
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	617b      	str	r3, [r7, #20]
   return(result);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1e5      	bne.n	8004f12 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f46:	e002      	b.n	8004f4e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004f48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004f4a:	f7fc f8db 	bl	8001104 <HAL_UART_TxCpltCallback>
}
 8004f4e:	bf00      	nop
 8004f50:	3740      	adds	r7, #64	; 0x40
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f7ff ff89 	bl	8004e7c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b084      	sub	sp, #16
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8e:	2b80      	cmp	r3, #128	; 0x80
 8004f90:	bf0c      	ite	eq
 8004f92:	2301      	moveq	r3, #1
 8004f94:	2300      	movne	r3, #0
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b21      	cmp	r3, #33	; 0x21
 8004fa4:	d108      	bne.n	8004fb8 <UART_DMAError+0x46>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004fb2:	68b8      	ldr	r0, [r7, #8]
 8004fb4:	f000 f861 	bl	800507a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	bf0c      	ite	eq
 8004fc6:	2301      	moveq	r3, #1
 8004fc8:	2300      	movne	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b22      	cmp	r3, #34	; 0x22
 8004fd8:	d108      	bne.n	8004fec <UART_DMAError+0x7a>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004fe6:	68b8      	ldr	r0, [r7, #8]
 8004fe8:	f000 f86f 	bl	80050ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	f043 0210 	orr.w	r2, r3, #16
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ff8:	68b8      	ldr	r0, [r7, #8]
 8004ffa:	f7ff ff49 	bl	8004e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ffe:	bf00      	nop
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005006:	b480      	push	{r7}
 8005008:	b085      	sub	sp, #20
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	4613      	mov	r3, r2
 8005012:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	88fa      	ldrh	r2, [r7, #6]
 800501e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2222      	movs	r2, #34	; 0x22
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800504a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695a      	ldr	r2, [r3, #20]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0220 	orr.w	r2, r2, #32
 800506a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800507a:	b480      	push	{r7}
 800507c:	b089      	sub	sp, #36	; 0x24
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	330c      	adds	r3, #12
 8005088:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	60bb      	str	r3, [r7, #8]
   return(result);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005098:	61fb      	str	r3, [r7, #28]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	330c      	adds	r3, #12
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	61ba      	str	r2, [r7, #24]
 80050a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6979      	ldr	r1, [r7, #20]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	613b      	str	r3, [r7, #16]
   return(result);
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e5      	bne.n	8005082 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80050be:	bf00      	nop
 80050c0:	3724      	adds	r7, #36	; 0x24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b095      	sub	sp, #84	; 0x54
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	330c      	adds	r3, #12
 80050d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	330c      	adds	r3, #12
 80050f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050f2:	643a      	str	r2, [r7, #64]	; 0x40
 80050f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e5      	bne.n	80050d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3314      	adds	r3, #20
 800510c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	61fb      	str	r3, [r7, #28]
   return(result);
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f023 0301 	bic.w	r3, r3, #1
 800511c:	64bb      	str	r3, [r7, #72]	; 0x48
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3314      	adds	r3, #20
 8005124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005126:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005128:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800512c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e5      	bne.n	8005106 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513e:	2b01      	cmp	r3, #1
 8005140:	d119      	bne.n	8005176 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	60bb      	str	r3, [r7, #8]
   return(result);
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f023 0310 	bic.w	r3, r3, #16
 8005158:	647b      	str	r3, [r7, #68]	; 0x44
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	330c      	adds	r3, #12
 8005160:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005162:	61ba      	str	r2, [r7, #24]
 8005164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6979      	ldr	r1, [r7, #20]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	613b      	str	r3, [r7, #16]
   return(result);
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e5      	bne.n	8005142 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2220      	movs	r2, #32
 800517a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005184:	bf00      	nop
 8005186:	3754      	adds	r7, #84	; 0x54
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f7ff fe70 	bl	8004e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b21      	cmp	r3, #33	; 0x21
 80051ca:	d13e      	bne.n	800524a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d4:	d114      	bne.n	8005200 <UART_Transmit_IT+0x48>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d110      	bne.n	8005200 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	1c9a      	adds	r2, r3, #2
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	621a      	str	r2, [r3, #32]
 80051fe:	e008      	b.n	8005212 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	1c59      	adds	r1, r3, #1
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6211      	str	r1, [r2, #32]
 800520a:	781a      	ldrb	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29b      	uxth	r3, r3
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	4619      	mov	r1, r3
 8005220:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10f      	bne.n	8005246 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005234:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005244:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	e000      	b.n	800524c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800524a:	2302      	movs	r3, #2
  }
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800526e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7fb ff43 	bl	8001104 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08c      	sub	sp, #48	; 0x30
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b22      	cmp	r3, #34	; 0x22
 800529a:	f040 80ab 	bne.w	80053f4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a6:	d117      	bne.n	80052d8 <UART_Receive_IT+0x50>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d113      	bne.n	80052d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d0:	1c9a      	adds	r2, r3, #2
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	629a      	str	r2, [r3, #40]	; 0x28
 80052d6:	e026      	b.n	8005326 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ea:	d007      	beq.n	80052fc <UART_Receive_IT+0x74>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <UART_Receive_IT+0x82>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d106      	bne.n	800530a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	b2da      	uxtb	r2, r3
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	e008      	b.n	800531c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005316:	b2da      	uxtb	r2, r3
 8005318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29b      	uxth	r3, r3
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	4619      	mov	r1, r3
 8005334:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005336:	2b00      	cmp	r3, #0
 8005338:	d15a      	bne.n	80053f0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0220 	bic.w	r2, r2, #32
 8005348:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005358:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695a      	ldr	r2, [r3, #20]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	2b01      	cmp	r3, #1
 8005378:	d135      	bne.n	80053e6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	330c      	adds	r3, #12
 8005386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	613b      	str	r3, [r7, #16]
   return(result);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f023 0310 	bic.w	r3, r3, #16
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	330c      	adds	r3, #12
 800539e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a0:	623a      	str	r2, [r7, #32]
 80053a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a4:	69f9      	ldr	r1, [r7, #28]
 80053a6:	6a3a      	ldr	r2, [r7, #32]
 80053a8:	e841 2300 	strex	r3, r2, [r1]
 80053ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e5      	bne.n	8005380 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	2b10      	cmp	r3, #16
 80053c0:	d10a      	bne.n	80053d8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053dc:	4619      	mov	r1, r3
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff fd60 	bl	8004ea4 <HAL_UARTEx_RxEventCallback>
 80053e4:	e002      	b.n	80053ec <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fb fe02 	bl	8000ff0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	e002      	b.n	80053f6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	e000      	b.n	80053f6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80053f4:	2302      	movs	r3, #2
  }
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3730      	adds	r7, #48	; 0x30
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	b09f      	sub	sp, #124	; 0x7c
 8005406:	af00      	add	r7, sp, #0
 8005408:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800540a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005416:	68d9      	ldr	r1, [r3, #12]
 8005418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	ea40 0301 	orr.w	r3, r0, r1
 8005420:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	431a      	orrs	r2, r3
 800542c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	431a      	orrs	r2, r3
 8005432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	4313      	orrs	r3, r2
 8005438:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800543a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005444:	f021 010c 	bic.w	r1, r1, #12
 8005448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800544e:	430b      	orrs	r3, r1
 8005450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800545c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800545e:	6999      	ldr	r1, [r3, #24]
 8005460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	ea40 0301 	orr.w	r3, r0, r1
 8005468:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800546a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4bc5      	ldr	r3, [pc, #788]	; (8005784 <UART_SetConfig+0x384>)
 8005470:	429a      	cmp	r2, r3
 8005472:	d004      	beq.n	800547e <UART_SetConfig+0x7e>
 8005474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	4bc3      	ldr	r3, [pc, #780]	; (8005788 <UART_SetConfig+0x388>)
 800547a:	429a      	cmp	r2, r3
 800547c:	d103      	bne.n	8005486 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800547e:	f7fd feef 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 8005482:	6778      	str	r0, [r7, #116]	; 0x74
 8005484:	e002      	b.n	800548c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005486:	f7fd fed7 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 800548a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800548c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005494:	f040 80b6 	bne.w	8005604 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800549a:	461c      	mov	r4, r3
 800549c:	f04f 0500 	mov.w	r5, #0
 80054a0:	4622      	mov	r2, r4
 80054a2:	462b      	mov	r3, r5
 80054a4:	1891      	adds	r1, r2, r2
 80054a6:	6439      	str	r1, [r7, #64]	; 0x40
 80054a8:	415b      	adcs	r3, r3
 80054aa:	647b      	str	r3, [r7, #68]	; 0x44
 80054ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054b0:	1912      	adds	r2, r2, r4
 80054b2:	eb45 0303 	adc.w	r3, r5, r3
 80054b6:	f04f 0000 	mov.w	r0, #0
 80054ba:	f04f 0100 	mov.w	r1, #0
 80054be:	00d9      	lsls	r1, r3, #3
 80054c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054c4:	00d0      	lsls	r0, r2, #3
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	1911      	adds	r1, r2, r4
 80054cc:	6639      	str	r1, [r7, #96]	; 0x60
 80054ce:	416b      	adcs	r3, r5
 80054d0:	667b      	str	r3, [r7, #100]	; 0x64
 80054d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	1891      	adds	r1, r2, r2
 80054de:	63b9      	str	r1, [r7, #56]	; 0x38
 80054e0:	415b      	adcs	r3, r3
 80054e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80054ec:	f7fa ff18 	bl	8000320 <__aeabi_uldivmod>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4ba5      	ldr	r3, [pc, #660]	; (800578c <UART_SetConfig+0x38c>)
 80054f6:	fba3 2302 	umull	r2, r3, r3, r2
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	011e      	lsls	r6, r3, #4
 80054fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005500:	461c      	mov	r4, r3
 8005502:	f04f 0500 	mov.w	r5, #0
 8005506:	4622      	mov	r2, r4
 8005508:	462b      	mov	r3, r5
 800550a:	1891      	adds	r1, r2, r2
 800550c:	6339      	str	r1, [r7, #48]	; 0x30
 800550e:	415b      	adcs	r3, r3
 8005510:	637b      	str	r3, [r7, #52]	; 0x34
 8005512:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005516:	1912      	adds	r2, r2, r4
 8005518:	eb45 0303 	adc.w	r3, r5, r3
 800551c:	f04f 0000 	mov.w	r0, #0
 8005520:	f04f 0100 	mov.w	r1, #0
 8005524:	00d9      	lsls	r1, r3, #3
 8005526:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800552a:	00d0      	lsls	r0, r2, #3
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	1911      	adds	r1, r2, r4
 8005532:	65b9      	str	r1, [r7, #88]	; 0x58
 8005534:	416b      	adcs	r3, r5
 8005536:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	461a      	mov	r2, r3
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	1891      	adds	r1, r2, r2
 8005544:	62b9      	str	r1, [r7, #40]	; 0x28
 8005546:	415b      	adcs	r3, r3
 8005548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800554a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800554e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005552:	f7fa fee5 	bl	8000320 <__aeabi_uldivmod>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	4b8c      	ldr	r3, [pc, #560]	; (800578c <UART_SetConfig+0x38c>)
 800555c:	fba3 1302 	umull	r1, r3, r3, r2
 8005560:	095b      	lsrs	r3, r3, #5
 8005562:	2164      	movs	r1, #100	; 0x64
 8005564:	fb01 f303 	mul.w	r3, r1, r3
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	3332      	adds	r3, #50	; 0x32
 800556e:	4a87      	ldr	r2, [pc, #540]	; (800578c <UART_SetConfig+0x38c>)
 8005570:	fba2 2303 	umull	r2, r3, r2, r3
 8005574:	095b      	lsrs	r3, r3, #5
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800557c:	441e      	add	r6, r3
 800557e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005580:	4618      	mov	r0, r3
 8005582:	f04f 0100 	mov.w	r1, #0
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	1894      	adds	r4, r2, r2
 800558c:	623c      	str	r4, [r7, #32]
 800558e:	415b      	adcs	r3, r3
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
 8005592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005596:	1812      	adds	r2, r2, r0
 8005598:	eb41 0303 	adc.w	r3, r1, r3
 800559c:	f04f 0400 	mov.w	r4, #0
 80055a0:	f04f 0500 	mov.w	r5, #0
 80055a4:	00dd      	lsls	r5, r3, #3
 80055a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055aa:	00d4      	lsls	r4, r2, #3
 80055ac:	4622      	mov	r2, r4
 80055ae:	462b      	mov	r3, r5
 80055b0:	1814      	adds	r4, r2, r0
 80055b2:	653c      	str	r4, [r7, #80]	; 0x50
 80055b4:	414b      	adcs	r3, r1
 80055b6:	657b      	str	r3, [r7, #84]	; 0x54
 80055b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	461a      	mov	r2, r3
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	1891      	adds	r1, r2, r2
 80055c4:	61b9      	str	r1, [r7, #24]
 80055c6:	415b      	adcs	r3, r3
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80055d2:	f7fa fea5 	bl	8000320 <__aeabi_uldivmod>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4b6c      	ldr	r3, [pc, #432]	; (800578c <UART_SetConfig+0x38c>)
 80055dc:	fba3 1302 	umull	r1, r3, r3, r2
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	2164      	movs	r1, #100	; 0x64
 80055e4:	fb01 f303 	mul.w	r3, r1, r3
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	3332      	adds	r3, #50	; 0x32
 80055ee:	4a67      	ldr	r2, [pc, #412]	; (800578c <UART_SetConfig+0x38c>)
 80055f0:	fba2 2303 	umull	r2, r3, r2, r3
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	f003 0207 	and.w	r2, r3, #7
 80055fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4432      	add	r2, r6
 8005600:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005602:	e0b9      	b.n	8005778 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005606:	461c      	mov	r4, r3
 8005608:	f04f 0500 	mov.w	r5, #0
 800560c:	4622      	mov	r2, r4
 800560e:	462b      	mov	r3, r5
 8005610:	1891      	adds	r1, r2, r2
 8005612:	6139      	str	r1, [r7, #16]
 8005614:	415b      	adcs	r3, r3
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800561c:	1912      	adds	r2, r2, r4
 800561e:	eb45 0303 	adc.w	r3, r5, r3
 8005622:	f04f 0000 	mov.w	r0, #0
 8005626:	f04f 0100 	mov.w	r1, #0
 800562a:	00d9      	lsls	r1, r3, #3
 800562c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005630:	00d0      	lsls	r0, r2, #3
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	eb12 0804 	adds.w	r8, r2, r4
 800563a:	eb43 0905 	adc.w	r9, r3, r5
 800563e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4618      	mov	r0, r3
 8005644:	f04f 0100 	mov.w	r1, #0
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	008b      	lsls	r3, r1, #2
 8005652:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005656:	0082      	lsls	r2, r0, #2
 8005658:	4640      	mov	r0, r8
 800565a:	4649      	mov	r1, r9
 800565c:	f7fa fe60 	bl	8000320 <__aeabi_uldivmod>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4b49      	ldr	r3, [pc, #292]	; (800578c <UART_SetConfig+0x38c>)
 8005666:	fba3 2302 	umull	r2, r3, r3, r2
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	011e      	lsls	r6, r3, #4
 800566e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005670:	4618      	mov	r0, r3
 8005672:	f04f 0100 	mov.w	r1, #0
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	1894      	adds	r4, r2, r2
 800567c:	60bc      	str	r4, [r7, #8]
 800567e:	415b      	adcs	r3, r3
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005686:	1812      	adds	r2, r2, r0
 8005688:	eb41 0303 	adc.w	r3, r1, r3
 800568c:	f04f 0400 	mov.w	r4, #0
 8005690:	f04f 0500 	mov.w	r5, #0
 8005694:	00dd      	lsls	r5, r3, #3
 8005696:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800569a:	00d4      	lsls	r4, r2, #3
 800569c:	4622      	mov	r2, r4
 800569e:	462b      	mov	r3, r5
 80056a0:	1814      	adds	r4, r2, r0
 80056a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80056a4:	414b      	adcs	r3, r1
 80056a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f04f 0100 	mov.w	r1, #0
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	008b      	lsls	r3, r1, #2
 80056bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056c0:	0082      	lsls	r2, r0, #2
 80056c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80056c6:	f7fa fe2b 	bl	8000320 <__aeabi_uldivmod>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4b2f      	ldr	r3, [pc, #188]	; (800578c <UART_SetConfig+0x38c>)
 80056d0:	fba3 1302 	umull	r1, r3, r3, r2
 80056d4:	095b      	lsrs	r3, r3, #5
 80056d6:	2164      	movs	r1, #100	; 0x64
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	3332      	adds	r3, #50	; 0x32
 80056e2:	4a2a      	ldr	r2, [pc, #168]	; (800578c <UART_SetConfig+0x38c>)
 80056e4:	fba2 2303 	umull	r2, r3, r2, r3
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056ee:	441e      	add	r6, r3
 80056f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056f2:	4618      	mov	r0, r3
 80056f4:	f04f 0100 	mov.w	r1, #0
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	1894      	adds	r4, r2, r2
 80056fe:	603c      	str	r4, [r7, #0]
 8005700:	415b      	adcs	r3, r3
 8005702:	607b      	str	r3, [r7, #4]
 8005704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005708:	1812      	adds	r2, r2, r0
 800570a:	eb41 0303 	adc.w	r3, r1, r3
 800570e:	f04f 0400 	mov.w	r4, #0
 8005712:	f04f 0500 	mov.w	r5, #0
 8005716:	00dd      	lsls	r5, r3, #3
 8005718:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800571c:	00d4      	lsls	r4, r2, #3
 800571e:	4622      	mov	r2, r4
 8005720:	462b      	mov	r3, r5
 8005722:	eb12 0a00 	adds.w	sl, r2, r0
 8005726:	eb43 0b01 	adc.w	fp, r3, r1
 800572a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	4618      	mov	r0, r3
 8005730:	f04f 0100 	mov.w	r1, #0
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	008b      	lsls	r3, r1, #2
 800573e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005742:	0082      	lsls	r2, r0, #2
 8005744:	4650      	mov	r0, sl
 8005746:	4659      	mov	r1, fp
 8005748:	f7fa fdea 	bl	8000320 <__aeabi_uldivmod>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4b0e      	ldr	r3, [pc, #56]	; (800578c <UART_SetConfig+0x38c>)
 8005752:	fba3 1302 	umull	r1, r3, r3, r2
 8005756:	095b      	lsrs	r3, r3, #5
 8005758:	2164      	movs	r1, #100	; 0x64
 800575a:	fb01 f303 	mul.w	r3, r1, r3
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	3332      	adds	r3, #50	; 0x32
 8005764:	4a09      	ldr	r2, [pc, #36]	; (800578c <UART_SetConfig+0x38c>)
 8005766:	fba2 2303 	umull	r2, r3, r2, r3
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	f003 020f 	and.w	r2, r3, #15
 8005770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4432      	add	r2, r6
 8005776:	609a      	str	r2, [r3, #8]
}
 8005778:	bf00      	nop
 800577a:	377c      	adds	r7, #124	; 0x7c
 800577c:	46bd      	mov	sp, r7
 800577e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005782:	bf00      	nop
 8005784:	40011000 	.word	0x40011000
 8005788:	40011400 	.word	0x40011400
 800578c:	51eb851f 	.word	0x51eb851f

08005790 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b10      	cmp	r3, #16
 80057a4:	d103      	bne.n	80057ae <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e002      	b.n	80057b4 <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4b16      	ldr	r3, [pc, #88]	; (8005810 <FSMC_NAND_Init+0x80>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 80057c4:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 80057ca:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 80057d0:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 80057d8:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 80057e0:	431a      	orrs	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f043 0308 	orr.w	r3, r3, #8
 80057ea:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d103      	bne.n	80057fc <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	e002      	b.n	8005802 <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	fff00181 	.word	0xfff00181

08005814 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b10      	cmp	r3, #16
 8005828:	d103      	bne.n	8005832 <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	e002      	b.n	8005838 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005836:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8005846:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 800584e:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8005856:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b10      	cmp	r3, #16
 8005862:	d103      	bne.n	800586c <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	609a      	str	r2, [r3, #8]
 800586a:	e002      	b.n	8005872 <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b10      	cmp	r3, #16
 8005894:	d103      	bne.n	800589e <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	e002      	b.n	80058a4 <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 80058a4:	2300      	movs	r3, #0
 80058a6:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80058b2:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 80058ba:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 80058c2:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d103      	bne.n	80058d8 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	60da      	str	r2, [r3, #12]
 80058d6:	e002      	b.n	80058de <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <__NVIC_SetPriority>:
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	6039      	str	r1, [r7, #0]
 80058f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	db0a      	blt.n	8005916 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	b2da      	uxtb	r2, r3
 8005904:	490c      	ldr	r1, [pc, #48]	; (8005938 <__NVIC_SetPriority+0x4c>)
 8005906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800590a:	0112      	lsls	r2, r2, #4
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	440b      	add	r3, r1
 8005910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005914:	e00a      	b.n	800592c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	b2da      	uxtb	r2, r3
 800591a:	4908      	ldr	r1, [pc, #32]	; (800593c <__NVIC_SetPriority+0x50>)
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	3b04      	subs	r3, #4
 8005924:	0112      	lsls	r2, r2, #4
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	440b      	add	r3, r1
 800592a:	761a      	strb	r2, [r3, #24]
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	e000e100 	.word	0xe000e100
 800593c:	e000ed00 	.word	0xe000ed00

08005940 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005944:	4b05      	ldr	r3, [pc, #20]	; (800595c <SysTick_Handler+0x1c>)
 8005946:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005948:	f001 fea4 	bl	8007694 <xTaskGetSchedulerState>
 800594c:	4603      	mov	r3, r0
 800594e:	2b01      	cmp	r3, #1
 8005950:	d001      	beq.n	8005956 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005952:	f002 fc89 	bl	8008268 <xPortSysTickHandler>
  }
}
 8005956:	bf00      	nop
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	e000e010 	.word	0xe000e010

08005960 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005964:	2100      	movs	r1, #0
 8005966:	f06f 0004 	mvn.w	r0, #4
 800596a:	f7ff ffbf 	bl	80058ec <__NVIC_SetPriority>
#endif
}
 800596e:	bf00      	nop
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800597a:	f3ef 8305 	mrs	r3, IPSR
 800597e:	603b      	str	r3, [r7, #0]
  return(result);
 8005980:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005986:	f06f 0305 	mvn.w	r3, #5
 800598a:	607b      	str	r3, [r7, #4]
 800598c:	e00f      	b.n	80059ae <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800598e:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <osKernelInitialize+0x44>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d108      	bne.n	80059a8 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 8005996:	4809      	ldr	r0, [pc, #36]	; (80059bc <osKernelInitialize+0x48>)
 8005998:	f002 fe62 	bl	8008660 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 800599c:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <osKernelInitialize+0x44>)
 800599e:	2201      	movs	r2, #1
 80059a0:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	e002      	b.n	80059ae <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 80059a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059ac:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80059ae:	687b      	ldr	r3, [r7, #4]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	200004e8 	.word	0x200004e8
 80059bc:	2000002c 	.word	0x2000002c

080059c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059c6:	f3ef 8305 	mrs	r3, IPSR
 80059ca:	603b      	str	r3, [r7, #0]
  return(result);
 80059cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <osKernelStart+0x1a>
    stat = osErrorISR;
 80059d2:	f06f 0305 	mvn.w	r3, #5
 80059d6:	607b      	str	r3, [r7, #4]
 80059d8:	e010      	b.n	80059fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <osKernelStart+0x48>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d109      	bne.n	80059f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80059e2:	f7ff ffbd 	bl	8005960 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80059e6:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <osKernelStart+0x48>)
 80059e8:	2202      	movs	r2, #2
 80059ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80059ec:	f001 f9f6 	bl	8006ddc <vTaskStartScheduler>
      stat = osOK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	607b      	str	r3, [r7, #4]
 80059f4:	e002      	b.n	80059fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80059f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80059fc:	687b      	ldr	r3, [r7, #4]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	200004e8 	.word	0x200004e8

08005a0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08e      	sub	sp, #56	; 0x38
 8005a10:	af04      	add	r7, sp, #16
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a1c:	f3ef 8305 	mrs	r3, IPSR
 8005a20:	617b      	str	r3, [r7, #20]
  return(result);
 8005a22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d17e      	bne.n	8005b26 <osThreadNew+0x11a>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d07b      	beq.n	8005b26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005a2e:	2380      	movs	r3, #128	; 0x80
 8005a30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005a32:	2318      	movs	r3, #24
 8005a34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d045      	beq.n	8005ad2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <osThreadNew+0x48>
        name = attr->name;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d008      	beq.n	8005a7a <osThreadNew+0x6e>
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	2b38      	cmp	r3, #56	; 0x38
 8005a6c:	d805      	bhi.n	8005a7a <osThreadNew+0x6e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <osThreadNew+0x72>
        return (NULL);
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e054      	b.n	8005b28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	089b      	lsrs	r3, r3, #2
 8005a8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00e      	beq.n	8005ab4 <osThreadNew+0xa8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	2bbb      	cmp	r3, #187	; 0xbb
 8005a9c:	d90a      	bls.n	8005ab4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d006      	beq.n	8005ab4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <osThreadNew+0xa8>
        mem = 1;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	e010      	b.n	8005ad6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10c      	bne.n	8005ad6 <osThreadNew+0xca>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d108      	bne.n	8005ad6 <osThreadNew+0xca>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <osThreadNew+0xca>
          mem = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	e001      	b.n	8005ad6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d110      	bne.n	8005afe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ae4:	9202      	str	r2, [sp, #8]
 8005ae6:	9301      	str	r3, [sp, #4]
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	6a3a      	ldr	r2, [r7, #32]
 8005af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 ff86 	bl	8006a04 <xTaskCreateStatic>
 8005af8:	4603      	mov	r3, r0
 8005afa:	613b      	str	r3, [r7, #16]
 8005afc:	e013      	b.n	8005b26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d110      	bne.n	8005b26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	f107 0310 	add.w	r3, r7, #16
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 ffd1 	bl	8006abe <xTaskCreate>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d001      	beq.n	8005b26 <osThreadNew+0x11a>
            hTask = NULL;
 8005b22:	2300      	movs	r3, #0
 8005b24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b26:	693b      	ldr	r3, [r7, #16]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3728      	adds	r7, #40	; 0x28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b38:	f3ef 8305 	mrs	r3, IPSR
 8005b3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <osDelay+0x1c>
    stat = osErrorISR;
 8005b44:	f06f 0305 	mvn.w	r3, #5
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	e007      	b.n	8005b5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f001 f90c 	bl	8006d74 <vTaskDelay>
    }
  }

  return (stat);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b08a      	sub	sp, #40	; 0x28
 8005b6a:	af02      	add	r7, sp, #8
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b76:	f3ef 8305 	mrs	r3, IPSR
 8005b7a:	613b      	str	r3, [r7, #16]
  return(result);
 8005b7c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d175      	bne.n	8005c6e <osSemaphoreNew+0x108>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d072      	beq.n	8005c6e <osSemaphoreNew+0x108>
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d86e      	bhi.n	8005c6e <osSemaphoreNew+0x108>
    mem = -1;
 8005b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b94:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d015      	beq.n	8005bc8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d006      	beq.n	8005bb2 <osSemaphoreNew+0x4c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	2b4f      	cmp	r3, #79	; 0x4f
 8005baa:	d902      	bls.n	8005bb2 <osSemaphoreNew+0x4c>
        mem = 1;
 8005bac:	2301      	movs	r3, #1
 8005bae:	61bb      	str	r3, [r7, #24]
 8005bb0:	e00c      	b.n	8005bcc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d108      	bne.n	8005bcc <osSemaphoreNew+0x66>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d104      	bne.n	8005bcc <osSemaphoreNew+0x66>
          mem = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	e001      	b.n	8005bcc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bd2:	d04c      	beq.n	8005c6e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d128      	bne.n	8005c2c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d10a      	bne.n	8005bf6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	2203      	movs	r2, #3
 8005be6:	9200      	str	r2, [sp, #0]
 8005be8:	2200      	movs	r2, #0
 8005bea:	2100      	movs	r1, #0
 8005bec:	2001      	movs	r0, #1
 8005bee:	f000 f993 	bl	8005f18 <xQueueGenericCreateStatic>
 8005bf2:	61f8      	str	r0, [r7, #28]
 8005bf4:	e005      	b.n	8005c02 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005bf6:	2203      	movs	r2, #3
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	2001      	movs	r0, #1
 8005bfc:	f000 fa04 	bl	8006008 <xQueueGenericCreate>
 8005c00:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d022      	beq.n	8005c4e <osSemaphoreNew+0xe8>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d01f      	beq.n	8005c4e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005c0e:	2300      	movs	r3, #0
 8005c10:	2200      	movs	r2, #0
 8005c12:	2100      	movs	r1, #0
 8005c14:	69f8      	ldr	r0, [r7, #28]
 8005c16:	f000 fabf 	bl	8006198 <xQueueGenericSend>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d016      	beq.n	8005c4e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005c20:	69f8      	ldr	r0, [r7, #28]
 8005c22:	f000 fd33 	bl	800668c <vQueueDelete>
            hSemaphore = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	e010      	b.n	8005c4e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d108      	bne.n	8005c44 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	461a      	mov	r2, r3
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 fa41 	bl	80060c2 <xQueueCreateCountingSemaphoreStatic>
 8005c40:	61f8      	str	r0, [r7, #28]
 8005c42:	e004      	b.n	8005c4e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 fa72 	bl	8006130 <xQueueCreateCountingSemaphore>
 8005c4c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00c      	beq.n	8005c6e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	e001      	b.n	8005c66 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005c66:	6979      	ldr	r1, [r7, #20]
 8005c68:	69f8      	ldr	r0, [r7, #28]
 8005c6a:	f000 fe43 	bl	80068f4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005c6e:	69fb      	ldr	r3, [r7, #28]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4a07      	ldr	r2, [pc, #28]	; (8005ca4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	4a06      	ldr	r2, [pc, #24]	; (8005ca8 <vApplicationGetIdleTaskMemory+0x30>)
 8005c8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2280      	movs	r2, #128	; 0x80
 8005c94:	601a      	str	r2, [r3, #0]
}
 8005c96:	bf00      	nop
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	200040ec 	.word	0x200040ec
 8005ca8:	200041a8 	.word	0x200041a8

08005cac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4a07      	ldr	r2, [pc, #28]	; (8005cd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005cbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	4a06      	ldr	r2, [pc, #24]	; (8005cdc <vApplicationGetTimerTaskMemory+0x30>)
 8005cc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cca:	601a      	str	r2, [r3, #0]
}
 8005ccc:	bf00      	nop
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	200043a8 	.word	0x200043a8
 8005cdc:	20004464 	.word	0x20004464

08005ce0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f103 0208 	add.w	r2, r3, #8
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f103 0208 	add.w	r2, r3, #8
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f103 0208 	add.w	r2, r3, #8
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	601a      	str	r2, [r3, #0]
}
 8005d76:	bf00      	nop
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d98:	d103      	bne.n	8005da2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	e00c      	b.n	8005dbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3308      	adds	r3, #8
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	e002      	b.n	8005db0 <vListInsert+0x2e>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d2f6      	bcs.n	8005daa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	601a      	str	r2, [r3, #0]
}
 8005de8:	bf00      	nop
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6892      	ldr	r2, [r2, #8]
 8005e0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6852      	ldr	r2, [r2, #4]
 8005e14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d103      	bne.n	8005e28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	1e5a      	subs	r2, r3, #1
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10a      	bne.n	8005e72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e6e:	bf00      	nop
 8005e70:	e7fe      	b.n	8005e70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e72:	f002 f967 	bl	8008144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7e:	68f9      	ldr	r1, [r7, #12]
 8005e80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e82:	fb01 f303 	mul.w	r3, r1, r3
 8005e86:	441a      	add	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	68f9      	ldr	r1, [r7, #12]
 8005ea6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ea8:	fb01 f303 	mul.w	r3, r1, r3
 8005eac:	441a      	add	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	22ff      	movs	r2, #255	; 0xff
 8005eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	22ff      	movs	r2, #255	; 0xff
 8005ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d114      	bne.n	8005ef2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01a      	beq.n	8005f06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3310      	adds	r3, #16
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f001 fa1b 	bl	8007310 <xTaskRemoveFromEventList>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d012      	beq.n	8005f06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ee0:	4b0c      	ldr	r3, [pc, #48]	; (8005f14 <xQueueGenericReset+0xcc>)
 8005ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	e009      	b.n	8005f06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3310      	adds	r3, #16
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff fef2 	bl	8005ce0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3324      	adds	r3, #36	; 0x24
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff feed 	bl	8005ce0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f06:	f002 f94d 	bl	80081a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f0a:	2301      	movs	r3, #1
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	e000ed04 	.word	0xe000ed04

08005f18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08e      	sub	sp, #56	; 0x38
 8005f1c:	af02      	add	r7, sp, #8
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f3e:	bf00      	nop
 8005f40:	e7fe      	b.n	8005f40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f5a:	bf00      	nop
 8005f5c:	e7fe      	b.n	8005f5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <xQueueGenericCreateStatic+0x52>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <xQueueGenericCreateStatic+0x56>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <xQueueGenericCreateStatic+0x58>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	623b      	str	r3, [r7, #32]
}
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <xQueueGenericCreateStatic+0x7e>
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <xQueueGenericCreateStatic+0x82>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <xQueueGenericCreateStatic+0x84>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	61fb      	str	r3, [r7, #28]
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fb6:	2350      	movs	r3, #80	; 0x50
 8005fb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b50      	cmp	r3, #80	; 0x50
 8005fbe:	d00a      	beq.n	8005fd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	61bb      	str	r3, [r7, #24]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fd6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00d      	beq.n	8005ffe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	68b9      	ldr	r1, [r7, #8]
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 f83f 	bl	800607c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006000:	4618      	mov	r0, r3
 8006002:	3730      	adds	r7, #48	; 0x30
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	; 0x28
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	4613      	mov	r3, r2
 8006014:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <xQueueGenericCreate+0x2a>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	613b      	str	r3, [r7, #16]
}
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	fb02 f303 	mul.w	r3, r2, r3
 800603a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	3350      	adds	r3, #80	; 0x50
 8006040:	4618      	mov	r0, r3
 8006042:	f002 f9a1 	bl	8008388 <pvPortMalloc>
 8006046:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d011      	beq.n	8006072 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	3350      	adds	r3, #80	; 0x50
 8006056:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006060:	79fa      	ldrb	r2, [r7, #7]
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	4613      	mov	r3, r2
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	68b9      	ldr	r1, [r7, #8]
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 f805 	bl	800607c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006072:	69bb      	ldr	r3, [r7, #24]
	}
 8006074:	4618      	mov	r0, r3
 8006076:	3720      	adds	r7, #32
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d103      	bne.n	8006098 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	e002      	b.n	800609e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060aa:	2101      	movs	r1, #1
 80060ac:	69b8      	ldr	r0, [r7, #24]
 80060ae:	f7ff fecb 	bl	8005e48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	78fa      	ldrb	r2, [r7, #3]
 80060b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060ba:	bf00      	nop
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b08a      	sub	sp, #40	; 0x28
 80060c6:	af02      	add	r7, sp, #8
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	61bb      	str	r3, [r7, #24]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d90a      	bls.n	8006108 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	617b      	str	r3, [r7, #20]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006108:	2302      	movs	r3, #2
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	2100      	movs	r1, #0
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f7ff ff00 	bl	8005f18 <xQueueGenericCreateStatic>
 8006118:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006126:	69fb      	ldr	r3, [r7, #28]
	}
 8006128:	4618      	mov	r0, r3
 800612a:	3720      	adds	r7, #32
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10a      	bne.n	8006156 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	613b      	str	r3, [r7, #16]
}
 8006152:	bf00      	nop
 8006154:	e7fe      	b.n	8006154 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	429a      	cmp	r2, r3
 800615c:	d90a      	bls.n	8006174 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	60fb      	str	r3, [r7, #12]
}
 8006170:	bf00      	nop
 8006172:	e7fe      	b.n	8006172 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006174:	2202      	movs	r2, #2
 8006176:	2100      	movs	r1, #0
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff ff45 	bl	8006008 <xQueueGenericCreate>
 800617e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800618c:	697b      	ldr	r3, [r7, #20]
	}
 800618e:	4618      	mov	r0, r3
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08e      	sub	sp, #56	; 0x38
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061a6:	2300      	movs	r3, #0
 80061a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <xQueueGenericSend+0x32>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d103      	bne.n	80061d8 <xQueueGenericSend+0x40>
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <xQueueGenericSend+0x44>
 80061d8:	2301      	movs	r3, #1
 80061da:	e000      	b.n	80061de <xQueueGenericSend+0x46>
 80061dc:	2300      	movs	r3, #0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <xQueueGenericSend+0x60>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d103      	bne.n	8006206 <xQueueGenericSend+0x6e>
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <xQueueGenericSend+0x72>
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <xQueueGenericSend+0x74>
 800620a:	2300      	movs	r3, #0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <xQueueGenericSend+0x8e>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	623b      	str	r3, [r7, #32]
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006226:	f001 fa35 	bl	8007694 <xTaskGetSchedulerState>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <xQueueGenericSend+0x9e>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <xQueueGenericSend+0xa2>
 8006236:	2301      	movs	r3, #1
 8006238:	e000      	b.n	800623c <xQueueGenericSend+0xa4>
 800623a:	2300      	movs	r3, #0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <xQueueGenericSend+0xbe>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	61fb      	str	r3, [r7, #28]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006256:	f001 ff75 	bl	8008144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006262:	429a      	cmp	r2, r3
 8006264:	d302      	bcc.n	800626c <xQueueGenericSend+0xd4>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d129      	bne.n	80062c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	68b9      	ldr	r1, [r7, #8]
 8006270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006272:	f000 fa2e 	bl	80066d2 <prvCopyDataToQueue>
 8006276:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	d010      	beq.n	80062a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	3324      	adds	r3, #36	; 0x24
 8006284:	4618      	mov	r0, r3
 8006286:	f001 f843 	bl	8007310 <xTaskRemoveFromEventList>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d013      	beq.n	80062b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006290:	4b3f      	ldr	r3, [pc, #252]	; (8006390 <xQueueGenericSend+0x1f8>)
 8006292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	e00a      	b.n	80062b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062a8:	4b39      	ldr	r3, [pc, #228]	; (8006390 <xQueueGenericSend+0x1f8>)
 80062aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062b8:	f001 ff74 	bl	80081a4 <vPortExitCritical>
				return pdPASS;
 80062bc:	2301      	movs	r3, #1
 80062be:	e063      	b.n	8006388 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d103      	bne.n	80062ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062c6:	f001 ff6d 	bl	80081a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	e05c      	b.n	8006388 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d106      	bne.n	80062e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062d4:	f107 0314 	add.w	r3, r7, #20
 80062d8:	4618      	mov	r0, r3
 80062da:	f001 f87d 	bl	80073d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062de:	2301      	movs	r3, #1
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062e2:	f001 ff5f 	bl	80081a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062e6:	f000 fde9 	bl	8006ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062ea:	f001 ff2b 	bl	8008144 <vPortEnterCritical>
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062f4:	b25b      	sxtb	r3, r3
 80062f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062fa:	d103      	bne.n	8006304 <xQueueGenericSend+0x16c>
 80062fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800630a:	b25b      	sxtb	r3, r3
 800630c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006310:	d103      	bne.n	800631a <xQueueGenericSend+0x182>
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800631a:	f001 ff43 	bl	80081a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800631e:	1d3a      	adds	r2, r7, #4
 8006320:	f107 0314 	add.w	r3, r7, #20
 8006324:	4611      	mov	r1, r2
 8006326:	4618      	mov	r0, r3
 8006328:	f001 f86c 	bl	8007404 <xTaskCheckForTimeOut>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d124      	bne.n	800637c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006332:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006334:	f000 fac5 	bl	80068c2 <prvIsQueueFull>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d018      	beq.n	8006370 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	3310      	adds	r3, #16
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f000 ff92 	bl	8007270 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800634c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800634e:	f000 fa50 	bl	80067f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006352:	f000 fdc1 	bl	8006ed8 <xTaskResumeAll>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	f47f af7c 	bne.w	8006256 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800635e:	4b0c      	ldr	r3, [pc, #48]	; (8006390 <xQueueGenericSend+0x1f8>)
 8006360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	e772      	b.n	8006256 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006372:	f000 fa3e 	bl	80067f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006376:	f000 fdaf 	bl	8006ed8 <xTaskResumeAll>
 800637a:	e76c      	b.n	8006256 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800637c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800637e:	f000 fa38 	bl	80067f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006382:	f000 fda9 	bl	8006ed8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006386:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006388:	4618      	mov	r0, r3
 800638a:	3738      	adds	r7, #56	; 0x38
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	e000ed04 	.word	0xe000ed04

08006394 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b090      	sub	sp, #64	; 0x40
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063be:	bf00      	nop
 80063c0:	e7fe      	b.n	80063c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d103      	bne.n	80063d0 <xQueueGenericSendFromISR+0x3c>
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <xQueueGenericSendFromISR+0x40>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <xQueueGenericSendFromISR+0x42>
 80063d4:	2300      	movs	r3, #0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063ec:	bf00      	nop
 80063ee:	e7fe      	b.n	80063ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d103      	bne.n	80063fe <xQueueGenericSendFromISR+0x6a>
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <xQueueGenericSendFromISR+0x6e>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <xQueueGenericSendFromISR+0x70>
 8006402:	2300      	movs	r3, #0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	623b      	str	r3, [r7, #32]
}
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800641e:	f001 ff73 	bl	8008308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006422:	f3ef 8211 	mrs	r2, BASEPRI
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	61fa      	str	r2, [r7, #28]
 8006438:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800643a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800643c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006446:	429a      	cmp	r2, r3
 8006448:	d302      	bcc.n	8006450 <xQueueGenericSendFromISR+0xbc>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d12f      	bne.n	80064b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006452:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006466:	f000 f934 	bl	80066d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800646a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800646e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006472:	d112      	bne.n	800649a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	2b00      	cmp	r3, #0
 800647a:	d016      	beq.n	80064aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800647c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647e:	3324      	adds	r3, #36	; 0x24
 8006480:	4618      	mov	r0, r3
 8006482:	f000 ff45 	bl	8007310 <xTaskRemoveFromEventList>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00e      	beq.n	80064aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00b      	beq.n	80064aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	e007      	b.n	80064aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800649a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800649e:	3301      	adds	r3, #1
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	b25a      	sxtb	r2, r3
 80064a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80064aa:	2301      	movs	r3, #1
 80064ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80064ae:	e001      	b.n	80064b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3740      	adds	r7, #64	; 0x40
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
	...

080064cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08c      	sub	sp, #48	; 0x30
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064d8:	2300      	movs	r3, #0
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10a      	bne.n	80064fc <xQueueReceive+0x30>
	__asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	623b      	str	r3, [r7, #32]
}
 80064f8:	bf00      	nop
 80064fa:	e7fe      	b.n	80064fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d103      	bne.n	800650a <xQueueReceive+0x3e>
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <xQueueReceive+0x42>
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <xQueueReceive+0x44>
 800650e:	2300      	movs	r3, #0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10a      	bne.n	800652a <xQueueReceive+0x5e>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	61fb      	str	r3, [r7, #28]
}
 8006526:	bf00      	nop
 8006528:	e7fe      	b.n	8006528 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800652a:	f001 f8b3 	bl	8007694 <xTaskGetSchedulerState>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <xQueueReceive+0x6e>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <xQueueReceive+0x72>
 800653a:	2301      	movs	r3, #1
 800653c:	e000      	b.n	8006540 <xQueueReceive+0x74>
 800653e:	2300      	movs	r3, #0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <xQueueReceive+0x8e>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	61bb      	str	r3, [r7, #24]
}
 8006556:	bf00      	nop
 8006558:	e7fe      	b.n	8006558 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800655a:	f001 fdf3 	bl	8008144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	2b00      	cmp	r3, #0
 8006568:	d01f      	beq.n	80065aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800656e:	f000 f91a 	bl	80067a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	1e5a      	subs	r2, r3, #1
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006578:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00f      	beq.n	80065a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	3310      	adds	r3, #16
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fec2 	bl	8007310 <xTaskRemoveFromEventList>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d007      	beq.n	80065a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006592:	4b3d      	ldr	r3, [pc, #244]	; (8006688 <xQueueReceive+0x1bc>)
 8006594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065a2:	f001 fdff 	bl	80081a4 <vPortExitCritical>
				return pdPASS;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e069      	b.n	800667e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d103      	bne.n	80065b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065b0:	f001 fdf8 	bl	80081a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065b4:	2300      	movs	r3, #0
 80065b6:	e062      	b.n	800667e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d106      	bne.n	80065cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065be:	f107 0310 	add.w	r3, r7, #16
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 ff08 	bl	80073d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065cc:	f001 fdea 	bl	80081a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065d0:	f000 fc74 	bl	8006ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065d4:	f001 fdb6 	bl	8008144 <vPortEnterCritical>
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065de:	b25b      	sxtb	r3, r3
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065e4:	d103      	bne.n	80065ee <xQueueReceive+0x122>
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065f4:	b25b      	sxtb	r3, r3
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065fa:	d103      	bne.n	8006604 <xQueueReceive+0x138>
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006604:	f001 fdce 	bl	80081a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006608:	1d3a      	adds	r2, r7, #4
 800660a:	f107 0310 	add.w	r3, r7, #16
 800660e:	4611      	mov	r1, r2
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fef7 	bl	8007404 <xTaskCheckForTimeOut>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d123      	bne.n	8006664 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800661c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661e:	f000 f93a 	bl	8006896 <prvIsQueueEmpty>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d017      	beq.n	8006658 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	3324      	adds	r3, #36	; 0x24
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	4611      	mov	r1, r2
 8006630:	4618      	mov	r0, r3
 8006632:	f000 fe1d 	bl	8007270 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006638:	f000 f8db 	bl	80067f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800663c:	f000 fc4c 	bl	8006ed8 <xTaskResumeAll>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d189      	bne.n	800655a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006646:	4b10      	ldr	r3, [pc, #64]	; (8006688 <xQueueReceive+0x1bc>)
 8006648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	e780      	b.n	800655a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800665a:	f000 f8ca 	bl	80067f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800665e:	f000 fc3b 	bl	8006ed8 <xTaskResumeAll>
 8006662:	e77a      	b.n	800655a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006666:	f000 f8c4 	bl	80067f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800666a:	f000 fc35 	bl	8006ed8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800666e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006670:	f000 f911 	bl	8006896 <prvIsQueueEmpty>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	f43f af6f 	beq.w	800655a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800667c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800667e:	4618      	mov	r0, r3
 8006680:	3730      	adds	r7, #48	; 0x30
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	e000ed04 	.word	0xe000ed04

0800668c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <vQueueDelete+0x28>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	60bb      	str	r3, [r7, #8]
}
 80066b0:	bf00      	nop
 80066b2:	e7fe      	b.n	80066b2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 f947 	bl	8006948 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f001 ff03 	bl	80084d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b086      	sub	sp, #24
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10d      	bne.n	800670c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d14d      	bne.n	8006794 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 ffe7 	bl	80076d0 <xTaskPriorityDisinherit>
 8006702:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	609a      	str	r2, [r3, #8]
 800670a:	e043      	b.n	8006794 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d119      	bne.n	8006746 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6858      	ldr	r0, [r3, #4]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	461a      	mov	r2, r3
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	f002 f959 	bl	80089d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	441a      	add	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	429a      	cmp	r2, r3
 800673a:	d32b      	bcc.n	8006794 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	605a      	str	r2, [r3, #4]
 8006744:	e026      	b.n	8006794 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	68d8      	ldr	r0, [r3, #12]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674e:	461a      	mov	r2, r3
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	f002 f93f 	bl	80089d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	425b      	negs	r3, r3
 8006760:	441a      	add	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d207      	bcs.n	8006782 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689a      	ldr	r2, [r3, #8]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	425b      	negs	r3, r3
 800677c:	441a      	add	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d105      	bne.n	8006794 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	3b01      	subs	r3, #1
 8006792:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800679c:	697b      	ldr	r3, [r7, #20]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d018      	beq.n	80067ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	441a      	add	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d303      	bcc.n	80067da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68d9      	ldr	r1, [r3, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	461a      	mov	r2, r3
 80067e4:	6838      	ldr	r0, [r7, #0]
 80067e6:	f002 f8f5 	bl	80089d4 <memcpy>
	}
}
 80067ea:	bf00      	nop
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067fa:	f001 fca3 	bl	8008144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006804:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006806:	e011      	b.n	800682c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	d012      	beq.n	8006836 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3324      	adds	r3, #36	; 0x24
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fd7b 	bl	8007310 <xTaskRemoveFromEventList>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006820:	f000 fe52 	bl	80074c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	3b01      	subs	r3, #1
 8006828:	b2db      	uxtb	r3, r3
 800682a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800682c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006830:	2b00      	cmp	r3, #0
 8006832:	dce9      	bgt.n	8006808 <prvUnlockQueue+0x16>
 8006834:	e000      	b.n	8006838 <prvUnlockQueue+0x46>
					break;
 8006836:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	22ff      	movs	r2, #255	; 0xff
 800683c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006840:	f001 fcb0 	bl	80081a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006844:	f001 fc7e 	bl	8008144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800684e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006850:	e011      	b.n	8006876 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d012      	beq.n	8006880 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3310      	adds	r3, #16
 800685e:	4618      	mov	r0, r3
 8006860:	f000 fd56 	bl	8007310 <xTaskRemoveFromEventList>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800686a:	f000 fe2d 	bl	80074c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800686e:	7bbb      	ldrb	r3, [r7, #14]
 8006870:	3b01      	subs	r3, #1
 8006872:	b2db      	uxtb	r3, r3
 8006874:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006876:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800687a:	2b00      	cmp	r3, #0
 800687c:	dce9      	bgt.n	8006852 <prvUnlockQueue+0x60>
 800687e:	e000      	b.n	8006882 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006880:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	22ff      	movs	r2, #255	; 0xff
 8006886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800688a:	f001 fc8b 	bl	80081a4 <vPortExitCritical>
}
 800688e:	bf00      	nop
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800689e:	f001 fc51 	bl	8008144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d102      	bne.n	80068b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068aa:	2301      	movs	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	e001      	b.n	80068b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068b4:	f001 fc76 	bl	80081a4 <vPortExitCritical>

	return xReturn;
 80068b8:	68fb      	ldr	r3, [r7, #12]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068ca:	f001 fc3b 	bl	8008144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d102      	bne.n	80068e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068da:	2301      	movs	r3, #1
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	e001      	b.n	80068e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068e0:	2300      	movs	r3, #0
 80068e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068e4:	f001 fc5e 	bl	80081a4 <vPortExitCritical>

	return xReturn;
 80068e8:	68fb      	ldr	r3, [r7, #12]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	e014      	b.n	800692e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006904:	4a0f      	ldr	r2, [pc, #60]	; (8006944 <vQueueAddToRegistry+0x50>)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10b      	bne.n	8006928 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006910:	490c      	ldr	r1, [pc, #48]	; (8006944 <vQueueAddToRegistry+0x50>)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800691a:	4a0a      	ldr	r2, [pc, #40]	; (8006944 <vQueueAddToRegistry+0x50>)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	4413      	add	r3, r2
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006926:	e006      	b.n	8006936 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3301      	adds	r3, #1
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b07      	cmp	r3, #7
 8006932:	d9e7      	bls.n	8006904 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006934:	bf00      	nop
 8006936:	bf00      	nop
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	2000511c 	.word	0x2000511c

08006948 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	e016      	b.n	8006984 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006956:	4a10      	ldr	r2, [pc, #64]	; (8006998 <vQueueUnregisterQueue+0x50>)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	4413      	add	r3, r2
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	429a      	cmp	r2, r3
 8006964:	d10b      	bne.n	800697e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006966:	4a0c      	ldr	r2, [pc, #48]	; (8006998 <vQueueUnregisterQueue+0x50>)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2100      	movs	r1, #0
 800696c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006970:	4a09      	ldr	r2, [pc, #36]	; (8006998 <vQueueUnregisterQueue+0x50>)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	00db      	lsls	r3, r3, #3
 8006976:	4413      	add	r3, r2
 8006978:	2200      	movs	r2, #0
 800697a:	605a      	str	r2, [r3, #4]
				break;
 800697c:	e006      	b.n	800698c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3301      	adds	r3, #1
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b07      	cmp	r3, #7
 8006988:	d9e5      	bls.n	8006956 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800698a:	bf00      	nop
 800698c:	bf00      	nop
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	2000511c 	.word	0x2000511c

0800699c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069ac:	f001 fbca 	bl	8008144 <vPortEnterCritical>
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069b6:	b25b      	sxtb	r3, r3
 80069b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069bc:	d103      	bne.n	80069c6 <vQueueWaitForMessageRestricted+0x2a>
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069cc:	b25b      	sxtb	r3, r3
 80069ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069d2:	d103      	bne.n	80069dc <vQueueWaitForMessageRestricted+0x40>
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069dc:	f001 fbe2 	bl	80081a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d106      	bne.n	80069f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	3324      	adds	r3, #36	; 0x24
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	68b9      	ldr	r1, [r7, #8]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fc61 	bl	80072b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80069f6:	6978      	ldr	r0, [r7, #20]
 80069f8:	f7ff fefb 	bl	80067f2 <prvUnlockQueue>
	}
 80069fc:	bf00      	nop
 80069fe:	3718      	adds	r7, #24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08e      	sub	sp, #56	; 0x38
 8006a08:	af04      	add	r7, sp, #16
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	623b      	str	r3, [r7, #32]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10a      	bne.n	8006a4a <xTaskCreateStatic+0x46>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	61fb      	str	r3, [r7, #28]
}
 8006a46:	bf00      	nop
 8006a48:	e7fe      	b.n	8006a48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a4a:	23bc      	movs	r3, #188	; 0xbc
 8006a4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	2bbc      	cmp	r3, #188	; 0xbc
 8006a52:	d00a      	beq.n	8006a6a <xTaskCreateStatic+0x66>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	61bb      	str	r3, [r7, #24]
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d01e      	beq.n	8006ab0 <xTaskCreateStatic+0xac>
 8006a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01b      	beq.n	8006ab0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	2202      	movs	r2, #2
 8006a86:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	9303      	str	r3, [sp, #12]
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	9302      	str	r3, [sp, #8]
 8006a92:	f107 0314 	add.w	r3, r7, #20
 8006a96:	9301      	str	r3, [sp, #4]
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	68b9      	ldr	r1, [r7, #8]
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 f850 	bl	8006b48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aaa:	f000 f8f3 	bl	8006c94 <prvAddNewTaskToReadyList>
 8006aae:	e001      	b.n	8006ab4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ab4:	697b      	ldr	r3, [r7, #20]
	}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3728      	adds	r7, #40	; 0x28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b08c      	sub	sp, #48	; 0x30
 8006ac2:	af04      	add	r7, sp, #16
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	603b      	str	r3, [r7, #0]
 8006aca:	4613      	mov	r3, r2
 8006acc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ace:	88fb      	ldrh	r3, [r7, #6]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f001 fc58 	bl	8008388 <pvPortMalloc>
 8006ad8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00e      	beq.n	8006afe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ae0:	20bc      	movs	r0, #188	; 0xbc
 8006ae2:	f001 fc51 	bl	8008388 <pvPortMalloc>
 8006ae6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	631a      	str	r2, [r3, #48]	; 0x30
 8006af4:	e005      	b.n	8006b02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006af6:	6978      	ldr	r0, [r7, #20]
 8006af8:	f001 fcea 	bl	80084d0 <vPortFree>
 8006afc:	e001      	b.n	8006b02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d017      	beq.n	8006b38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b10:	88fa      	ldrh	r2, [r7, #6]
 8006b12:	2300      	movs	r3, #0
 8006b14:	9303      	str	r3, [sp, #12]
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	9302      	str	r3, [sp, #8]
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 f80e 	bl	8006b48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b2c:	69f8      	ldr	r0, [r7, #28]
 8006b2e:	f000 f8b1 	bl	8006c94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b32:	2301      	movs	r3, #1
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	e002      	b.n	8006b3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
	}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3720      	adds	r7, #32
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	461a      	mov	r2, r3
 8006b60:	21a5      	movs	r1, #165	; 0xa5
 8006b62:	f001 ff45 	bl	80089f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b70:	3b01      	subs	r3, #1
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	f023 0307 	bic.w	r3, r3, #7
 8006b7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	617b      	str	r3, [r7, #20]
}
 8006b9c:	bf00      	nop
 8006b9e:	e7fe      	b.n	8006b9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01f      	beq.n	8006be6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	61fb      	str	r3, [r7, #28]
 8006baa:	e012      	b.n	8006bd2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	7819      	ldrb	r1, [r3, #0]
 8006bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	3334      	adds	r3, #52	; 0x34
 8006bbc:	460a      	mov	r2, r1
 8006bbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d006      	beq.n	8006bda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	61fb      	str	r3, [r7, #28]
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	2b0f      	cmp	r3, #15
 8006bd6:	d9e9      	bls.n	8006bac <prvInitialiseNewTask+0x64>
 8006bd8:	e000      	b.n	8006bdc <prvInitialiseNewTask+0x94>
			{
				break;
 8006bda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006be4:	e003      	b.n	8006bee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	2b37      	cmp	r3, #55	; 0x37
 8006bf2:	d901      	bls.n	8006bf8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bf4:	2337      	movs	r3, #55	; 0x37
 8006bf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	2200      	movs	r2, #0
 8006c08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff f886 	bl	8005d20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	3318      	adds	r3, #24
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff f881 	bl	8005d20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c36:	2200      	movs	r2, #0
 8006c38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	3354      	adds	r3, #84	; 0x54
 8006c48:	2260      	movs	r2, #96	; 0x60
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f001 fecf 	bl	80089f0 <memset>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	4a0c      	ldr	r2, [pc, #48]	; (8006c88 <prvInitialiseNewTask+0x140>)
 8006c56:	659a      	str	r2, [r3, #88]	; 0x58
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	4a0c      	ldr	r2, [pc, #48]	; (8006c8c <prvInitialiseNewTask+0x144>)
 8006c5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	4a0b      	ldr	r2, [pc, #44]	; (8006c90 <prvInitialiseNewTask+0x148>)
 8006c62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	68f9      	ldr	r1, [r7, #12]
 8006c68:	69b8      	ldr	r0, [r7, #24]
 8006c6a:	f001 f941 	bl	8007ef0 <pxPortInitialiseStack>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c80:	bf00      	nop
 8006c82:	3720      	adds	r7, #32
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	08009688 	.word	0x08009688
 8006c8c:	080096a8 	.word	0x080096a8
 8006c90:	08009668 	.word	0x08009668

08006c94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c9c:	f001 fa52 	bl	8008144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ca0:	4b2d      	ldr	r3, [pc, #180]	; (8006d58 <prvAddNewTaskToReadyList+0xc4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	4a2c      	ldr	r2, [pc, #176]	; (8006d58 <prvAddNewTaskToReadyList+0xc4>)
 8006ca8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006caa:	4b2c      	ldr	r3, [pc, #176]	; (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cb2:	4a2a      	ldr	r2, [pc, #168]	; (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cb8:	4b27      	ldr	r3, [pc, #156]	; (8006d58 <prvAddNewTaskToReadyList+0xc4>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d110      	bne.n	8006ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cc0:	f000 fc26 	bl	8007510 <prvInitialiseTaskLists>
 8006cc4:	e00d      	b.n	8006ce2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cc6:	4b26      	ldr	r3, [pc, #152]	; (8006d60 <prvAddNewTaskToReadyList+0xcc>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cce:	4b23      	ldr	r3, [pc, #140]	; (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d802      	bhi.n	8006ce2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cdc:	4a1f      	ldr	r2, [pc, #124]	; (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ce2:	4b20      	ldr	r3, [pc, #128]	; (8006d64 <prvAddNewTaskToReadyList+0xd0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	4a1e      	ldr	r2, [pc, #120]	; (8006d64 <prvAddNewTaskToReadyList+0xd0>)
 8006cea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006cec:	4b1d      	ldr	r3, [pc, #116]	; (8006d64 <prvAddNewTaskToReadyList+0xd0>)
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf8:	4b1b      	ldr	r3, [pc, #108]	; (8006d68 <prvAddNewTaskToReadyList+0xd4>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d903      	bls.n	8006d08 <prvAddNewTaskToReadyList+0x74>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d04:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <prvAddNewTaskToReadyList+0xd4>)
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4a15      	ldr	r2, [pc, #84]	; (8006d6c <prvAddNewTaskToReadyList+0xd8>)
 8006d16:	441a      	add	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4610      	mov	r0, r2
 8006d20:	f7ff f80b 	bl	8005d3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d24:	f001 fa3e 	bl	80081a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d28:	4b0d      	ldr	r3, [pc, #52]	; (8006d60 <prvAddNewTaskToReadyList+0xcc>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00e      	beq.n	8006d4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d30:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d207      	bcs.n	8006d4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d3e:	4b0c      	ldr	r3, [pc, #48]	; (8006d70 <prvAddNewTaskToReadyList+0xdc>)
 8006d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d4e:	bf00      	nop
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20004d38 	.word	0x20004d38
 8006d5c:	20004864 	.word	0x20004864
 8006d60:	20004d44 	.word	0x20004d44
 8006d64:	20004d54 	.word	0x20004d54
 8006d68:	20004d40 	.word	0x20004d40
 8006d6c:	20004868 	.word	0x20004868
 8006d70:	e000ed04 	.word	0xe000ed04

08006d74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d017      	beq.n	8006db6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d86:	4b13      	ldr	r3, [pc, #76]	; (8006dd4 <vTaskDelay+0x60>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <vTaskDelay+0x30>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	60bb      	str	r3, [r7, #8]
}
 8006da0:	bf00      	nop
 8006da2:	e7fe      	b.n	8006da2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006da4:	f000 f88a 	bl	8006ebc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006da8:	2100      	movs	r1, #0
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fcfe 	bl	80077ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006db0:	f000 f892 	bl	8006ed8 <xTaskResumeAll>
 8006db4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d107      	bne.n	8006dcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006dbc:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <vTaskDelay+0x64>)
 8006dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dcc:	bf00      	nop
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	20004d60 	.word	0x20004d60
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08a      	sub	sp, #40	; 0x28
 8006de0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dea:	463a      	mov	r2, r7
 8006dec:	1d39      	adds	r1, r7, #4
 8006dee:	f107 0308 	add.w	r3, r7, #8
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fe ff40 	bl	8005c78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	9202      	str	r2, [sp, #8]
 8006e00:	9301      	str	r3, [sp, #4]
 8006e02:	2300      	movs	r3, #0
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	2300      	movs	r3, #0
 8006e08:	460a      	mov	r2, r1
 8006e0a:	4924      	ldr	r1, [pc, #144]	; (8006e9c <vTaskStartScheduler+0xc0>)
 8006e0c:	4824      	ldr	r0, [pc, #144]	; (8006ea0 <vTaskStartScheduler+0xc4>)
 8006e0e:	f7ff fdf9 	bl	8006a04 <xTaskCreateStatic>
 8006e12:	4603      	mov	r3, r0
 8006e14:	4a23      	ldr	r2, [pc, #140]	; (8006ea4 <vTaskStartScheduler+0xc8>)
 8006e16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e18:	4b22      	ldr	r3, [pc, #136]	; (8006ea4 <vTaskStartScheduler+0xc8>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e20:	2301      	movs	r3, #1
 8006e22:	617b      	str	r3, [r7, #20]
 8006e24:	e001      	b.n	8006e2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e26:	2300      	movs	r3, #0
 8006e28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d102      	bne.n	8006e36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e30:	f000 fd10 	bl	8007854 <xTimerCreateTimerTask>
 8006e34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d11b      	bne.n	8006e74 <vTaskStartScheduler+0x98>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	613b      	str	r3, [r7, #16]
}
 8006e4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e50:	4b15      	ldr	r3, [pc, #84]	; (8006ea8 <vTaskStartScheduler+0xcc>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3354      	adds	r3, #84	; 0x54
 8006e56:	4a15      	ldr	r2, [pc, #84]	; (8006eac <vTaskStartScheduler+0xd0>)
 8006e58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e5a:	4b15      	ldr	r3, [pc, #84]	; (8006eb0 <vTaskStartScheduler+0xd4>)
 8006e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e62:	4b14      	ldr	r3, [pc, #80]	; (8006eb4 <vTaskStartScheduler+0xd8>)
 8006e64:	2201      	movs	r2, #1
 8006e66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e68:	4b13      	ldr	r3, [pc, #76]	; (8006eb8 <vTaskStartScheduler+0xdc>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e6e:	f001 f8c7 	bl	8008000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e72:	e00e      	b.n	8006e92 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e7a:	d10a      	bne.n	8006e92 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	60fb      	str	r3, [r7, #12]
}
 8006e8e:	bf00      	nop
 8006e90:	e7fe      	b.n	8006e90 <vTaskStartScheduler+0xb4>
}
 8006e92:	bf00      	nop
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	080095f0 	.word	0x080095f0
 8006ea0:	080074e1 	.word	0x080074e1
 8006ea4:	20004d5c 	.word	0x20004d5c
 8006ea8:	20004864 	.word	0x20004864
 8006eac:	20000040 	.word	0x20000040
 8006eb0:	20004d58 	.word	0x20004d58
 8006eb4:	20004d44 	.word	0x20004d44
 8006eb8:	20004d3c 	.word	0x20004d3c

08006ebc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ec0:	4b04      	ldr	r3, [pc, #16]	; (8006ed4 <vTaskSuspendAll+0x18>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	4a03      	ldr	r2, [pc, #12]	; (8006ed4 <vTaskSuspendAll+0x18>)
 8006ec8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006eca:	bf00      	nop
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	20004d60 	.word	0x20004d60

08006ed8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ee6:	4b42      	ldr	r3, [pc, #264]	; (8006ff0 <xTaskResumeAll+0x118>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <xTaskResumeAll+0x2c>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	603b      	str	r3, [r7, #0]
}
 8006f00:	bf00      	nop
 8006f02:	e7fe      	b.n	8006f02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f04:	f001 f91e 	bl	8008144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f08:	4b39      	ldr	r3, [pc, #228]	; (8006ff0 <xTaskResumeAll+0x118>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	4a38      	ldr	r2, [pc, #224]	; (8006ff0 <xTaskResumeAll+0x118>)
 8006f10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f12:	4b37      	ldr	r3, [pc, #220]	; (8006ff0 <xTaskResumeAll+0x118>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d162      	bne.n	8006fe0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f1a:	4b36      	ldr	r3, [pc, #216]	; (8006ff4 <xTaskResumeAll+0x11c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d05e      	beq.n	8006fe0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f22:	e02f      	b.n	8006f84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f24:	4b34      	ldr	r3, [pc, #208]	; (8006ff8 <xTaskResumeAll+0x120>)
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3318      	adds	r3, #24
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe ff5f 	bl	8005df4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe ff5a 	bl	8005df4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f44:	4b2d      	ldr	r3, [pc, #180]	; (8006ffc <xTaskResumeAll+0x124>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d903      	bls.n	8006f54 <xTaskResumeAll+0x7c>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	4a2a      	ldr	r2, [pc, #168]	; (8006ffc <xTaskResumeAll+0x124>)
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f58:	4613      	mov	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4a27      	ldr	r2, [pc, #156]	; (8007000 <xTaskResumeAll+0x128>)
 8006f62:	441a      	add	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3304      	adds	r3, #4
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	f7fe fee5 	bl	8005d3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f74:	4b23      	ldr	r3, [pc, #140]	; (8007004 <xTaskResumeAll+0x12c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d302      	bcc.n	8006f84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f7e:	4b22      	ldr	r3, [pc, #136]	; (8007008 <xTaskResumeAll+0x130>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f84:	4b1c      	ldr	r3, [pc, #112]	; (8006ff8 <xTaskResumeAll+0x120>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1cb      	bne.n	8006f24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f92:	f000 fb5f 	bl	8007654 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f96:	4b1d      	ldr	r3, [pc, #116]	; (800700c <xTaskResumeAll+0x134>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d010      	beq.n	8006fc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fa2:	f000 f847 	bl	8007034 <xTaskIncrementTick>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006fac:	4b16      	ldr	r3, [pc, #88]	; (8007008 <xTaskResumeAll+0x130>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1f1      	bne.n	8006fa2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006fbe:	4b13      	ldr	r3, [pc, #76]	; (800700c <xTaskResumeAll+0x134>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fc4:	4b10      	ldr	r3, [pc, #64]	; (8007008 <xTaskResumeAll+0x130>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d009      	beq.n	8006fe0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fd0:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <xTaskResumeAll+0x138>)
 8006fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fe0:	f001 f8e0 	bl	80081a4 <vPortExitCritical>

	return xAlreadyYielded;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	20004d60 	.word	0x20004d60
 8006ff4:	20004d38 	.word	0x20004d38
 8006ff8:	20004cf8 	.word	0x20004cf8
 8006ffc:	20004d40 	.word	0x20004d40
 8007000:	20004868 	.word	0x20004868
 8007004:	20004864 	.word	0x20004864
 8007008:	20004d4c 	.word	0x20004d4c
 800700c:	20004d48 	.word	0x20004d48
 8007010:	e000ed04 	.word	0xe000ed04

08007014 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800701a:	4b05      	ldr	r3, [pc, #20]	; (8007030 <xTaskGetTickCount+0x1c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007020:	687b      	ldr	r3, [r7, #4]
}
 8007022:	4618      	mov	r0, r3
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	20004d3c 	.word	0x20004d3c

08007034 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800703a:	2300      	movs	r3, #0
 800703c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800703e:	4b4f      	ldr	r3, [pc, #316]	; (800717c <xTaskIncrementTick+0x148>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	f040 808f 	bne.w	8007166 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007048:	4b4d      	ldr	r3, [pc, #308]	; (8007180 <xTaskIncrementTick+0x14c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3301      	adds	r3, #1
 800704e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007050:	4a4b      	ldr	r2, [pc, #300]	; (8007180 <xTaskIncrementTick+0x14c>)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d120      	bne.n	800709e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800705c:	4b49      	ldr	r3, [pc, #292]	; (8007184 <xTaskIncrementTick+0x150>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <xTaskIncrementTick+0x48>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	603b      	str	r3, [r7, #0]
}
 8007078:	bf00      	nop
 800707a:	e7fe      	b.n	800707a <xTaskIncrementTick+0x46>
 800707c:	4b41      	ldr	r3, [pc, #260]	; (8007184 <xTaskIncrementTick+0x150>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	4b41      	ldr	r3, [pc, #260]	; (8007188 <xTaskIncrementTick+0x154>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a3f      	ldr	r2, [pc, #252]	; (8007184 <xTaskIncrementTick+0x150>)
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	4a3f      	ldr	r2, [pc, #252]	; (8007188 <xTaskIncrementTick+0x154>)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	4b3e      	ldr	r3, [pc, #248]	; (800718c <xTaskIncrementTick+0x158>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3301      	adds	r3, #1
 8007096:	4a3d      	ldr	r2, [pc, #244]	; (800718c <xTaskIncrementTick+0x158>)
 8007098:	6013      	str	r3, [r2, #0]
 800709a:	f000 fadb 	bl	8007654 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800709e:	4b3c      	ldr	r3, [pc, #240]	; (8007190 <xTaskIncrementTick+0x15c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d349      	bcc.n	800713c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070a8:	4b36      	ldr	r3, [pc, #216]	; (8007184 <xTaskIncrementTick+0x150>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d104      	bne.n	80070bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070b2:	4b37      	ldr	r3, [pc, #220]	; (8007190 <xTaskIncrementTick+0x15c>)
 80070b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070b8:	601a      	str	r2, [r3, #0]
					break;
 80070ba:	e03f      	b.n	800713c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070bc:	4b31      	ldr	r3, [pc, #196]	; (8007184 <xTaskIncrementTick+0x150>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d203      	bcs.n	80070dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070d4:	4a2e      	ldr	r2, [pc, #184]	; (8007190 <xTaskIncrementTick+0x15c>)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070da:	e02f      	b.n	800713c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	3304      	adds	r3, #4
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fe fe87 	bl	8005df4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d004      	beq.n	80070f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	3318      	adds	r3, #24
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fe fe7e 	bl	8005df4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fc:	4b25      	ldr	r3, [pc, #148]	; (8007194 <xTaskIncrementTick+0x160>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	429a      	cmp	r2, r3
 8007102:	d903      	bls.n	800710c <xTaskIncrementTick+0xd8>
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007108:	4a22      	ldr	r2, [pc, #136]	; (8007194 <xTaskIncrementTick+0x160>)
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4a1f      	ldr	r2, [pc, #124]	; (8007198 <xTaskIncrementTick+0x164>)
 800711a:	441a      	add	r2, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	3304      	adds	r3, #4
 8007120:	4619      	mov	r1, r3
 8007122:	4610      	mov	r0, r2
 8007124:	f7fe fe09 	bl	8005d3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712c:	4b1b      	ldr	r3, [pc, #108]	; (800719c <xTaskIncrementTick+0x168>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007132:	429a      	cmp	r2, r3
 8007134:	d3b8      	bcc.n	80070a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007136:	2301      	movs	r3, #1
 8007138:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800713a:	e7b5      	b.n	80070a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800713c:	4b17      	ldr	r3, [pc, #92]	; (800719c <xTaskIncrementTick+0x168>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007142:	4915      	ldr	r1, [pc, #84]	; (8007198 <xTaskIncrementTick+0x164>)
 8007144:	4613      	mov	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	440b      	add	r3, r1
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d901      	bls.n	8007158 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007154:	2301      	movs	r3, #1
 8007156:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007158:	4b11      	ldr	r3, [pc, #68]	; (80071a0 <xTaskIncrementTick+0x16c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d007      	beq.n	8007170 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007160:	2301      	movs	r3, #1
 8007162:	617b      	str	r3, [r7, #20]
 8007164:	e004      	b.n	8007170 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007166:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <xTaskIncrementTick+0x170>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3301      	adds	r3, #1
 800716c:	4a0d      	ldr	r2, [pc, #52]	; (80071a4 <xTaskIncrementTick+0x170>)
 800716e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007170:	697b      	ldr	r3, [r7, #20]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3718      	adds	r7, #24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20004d60 	.word	0x20004d60
 8007180:	20004d3c 	.word	0x20004d3c
 8007184:	20004cf0 	.word	0x20004cf0
 8007188:	20004cf4 	.word	0x20004cf4
 800718c:	20004d50 	.word	0x20004d50
 8007190:	20004d58 	.word	0x20004d58
 8007194:	20004d40 	.word	0x20004d40
 8007198:	20004868 	.word	0x20004868
 800719c:	20004864 	.word	0x20004864
 80071a0:	20004d4c 	.word	0x20004d4c
 80071a4:	20004d48 	.word	0x20004d48

080071a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071ae:	4b2a      	ldr	r3, [pc, #168]	; (8007258 <vTaskSwitchContext+0xb0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071b6:	4b29      	ldr	r3, [pc, #164]	; (800725c <vTaskSwitchContext+0xb4>)
 80071b8:	2201      	movs	r2, #1
 80071ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071bc:	e046      	b.n	800724c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80071be:	4b27      	ldr	r3, [pc, #156]	; (800725c <vTaskSwitchContext+0xb4>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c4:	4b26      	ldr	r3, [pc, #152]	; (8007260 <vTaskSwitchContext+0xb8>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	e010      	b.n	80071ee <vTaskSwitchContext+0x46>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10a      	bne.n	80071e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	607b      	str	r3, [r7, #4]
}
 80071e4:	bf00      	nop
 80071e6:	e7fe      	b.n	80071e6 <vTaskSwitchContext+0x3e>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	491d      	ldr	r1, [pc, #116]	; (8007264 <vTaskSwitchContext+0xbc>)
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4613      	mov	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	440b      	add	r3, r1
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d0e4      	beq.n	80071cc <vTaskSwitchContext+0x24>
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	4613      	mov	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4a15      	ldr	r2, [pc, #84]	; (8007264 <vTaskSwitchContext+0xbc>)
 800720e:	4413      	add	r3, r2
 8007210:	60bb      	str	r3, [r7, #8]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	605a      	str	r2, [r3, #4]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	3308      	adds	r3, #8
 8007224:	429a      	cmp	r2, r3
 8007226:	d104      	bne.n	8007232 <vTaskSwitchContext+0x8a>
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	605a      	str	r2, [r3, #4]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	4a0b      	ldr	r2, [pc, #44]	; (8007268 <vTaskSwitchContext+0xc0>)
 800723a:	6013      	str	r3, [r2, #0]
 800723c:	4a08      	ldr	r2, [pc, #32]	; (8007260 <vTaskSwitchContext+0xb8>)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007242:	4b09      	ldr	r3, [pc, #36]	; (8007268 <vTaskSwitchContext+0xc0>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3354      	adds	r3, #84	; 0x54
 8007248:	4a08      	ldr	r2, [pc, #32]	; (800726c <vTaskSwitchContext+0xc4>)
 800724a:	6013      	str	r3, [r2, #0]
}
 800724c:	bf00      	nop
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	20004d60 	.word	0x20004d60
 800725c:	20004d4c 	.word	0x20004d4c
 8007260:	20004d40 	.word	0x20004d40
 8007264:	20004868 	.word	0x20004868
 8007268:	20004864 	.word	0x20004864
 800726c:	20000040 	.word	0x20000040

08007270 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10a      	bne.n	8007296 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	60fb      	str	r3, [r7, #12]
}
 8007292:	bf00      	nop
 8007294:	e7fe      	b.n	8007294 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007296:	4b07      	ldr	r3, [pc, #28]	; (80072b4 <vTaskPlaceOnEventList+0x44>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3318      	adds	r3, #24
 800729c:	4619      	mov	r1, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7fe fd6f 	bl	8005d82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072a4:	2101      	movs	r1, #1
 80072a6:	6838      	ldr	r0, [r7, #0]
 80072a8:	f000 fa80 	bl	80077ac <prvAddCurrentTaskToDelayedList>
}
 80072ac:	bf00      	nop
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20004864 	.word	0x20004864

080072b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10a      	bne.n	80072e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	617b      	str	r3, [r7, #20]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <vTaskPlaceOnEventListRestricted+0x54>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3318      	adds	r3, #24
 80072e6:	4619      	mov	r1, r3
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f7fe fd26 	bl	8005d3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	68b8      	ldr	r0, [r7, #8]
 80072fe:	f000 fa55 	bl	80077ac <prvAddCurrentTaskToDelayedList>
	}
 8007302:	bf00      	nop
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20004864 	.word	0x20004864

08007310 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	60fb      	str	r3, [r7, #12]
}
 8007338:	bf00      	nop
 800733a:	e7fe      	b.n	800733a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	3318      	adds	r3, #24
 8007340:	4618      	mov	r0, r3
 8007342:	f7fe fd57 	bl	8005df4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007346:	4b1e      	ldr	r3, [pc, #120]	; (80073c0 <xTaskRemoveFromEventList+0xb0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d11d      	bne.n	800738a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	3304      	adds	r3, #4
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe fd4e 	bl	8005df4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735c:	4b19      	ldr	r3, [pc, #100]	; (80073c4 <xTaskRemoveFromEventList+0xb4>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d903      	bls.n	800736c <xTaskRemoveFromEventList+0x5c>
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	4a16      	ldr	r2, [pc, #88]	; (80073c4 <xTaskRemoveFromEventList+0xb4>)
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007370:	4613      	mov	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4a13      	ldr	r2, [pc, #76]	; (80073c8 <xTaskRemoveFromEventList+0xb8>)
 800737a:	441a      	add	r2, r3
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	3304      	adds	r3, #4
 8007380:	4619      	mov	r1, r3
 8007382:	4610      	mov	r0, r2
 8007384:	f7fe fcd9 	bl	8005d3a <vListInsertEnd>
 8007388:	e005      	b.n	8007396 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	3318      	adds	r3, #24
 800738e:	4619      	mov	r1, r3
 8007390:	480e      	ldr	r0, [pc, #56]	; (80073cc <xTaskRemoveFromEventList+0xbc>)
 8007392:	f7fe fcd2 	bl	8005d3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739a:	4b0d      	ldr	r3, [pc, #52]	; (80073d0 <xTaskRemoveFromEventList+0xc0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d905      	bls.n	80073b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073a8:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <xTaskRemoveFromEventList+0xc4>)
 80073aa:	2201      	movs	r2, #1
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	e001      	b.n	80073b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073b4:	697b      	ldr	r3, [r7, #20]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20004d60 	.word	0x20004d60
 80073c4:	20004d40 	.word	0x20004d40
 80073c8:	20004868 	.word	0x20004868
 80073cc:	20004cf8 	.word	0x20004cf8
 80073d0:	20004864 	.word	0x20004864
 80073d4:	20004d4c 	.word	0x20004d4c

080073d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073e0:	4b06      	ldr	r3, [pc, #24]	; (80073fc <vTaskInternalSetTimeOutState+0x24>)
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073e8:	4b05      	ldr	r3, [pc, #20]	; (8007400 <vTaskInternalSetTimeOutState+0x28>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	605a      	str	r2, [r3, #4]
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	20004d50 	.word	0x20004d50
 8007400:	20004d3c 	.word	0x20004d3c

08007404 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b088      	sub	sp, #32
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	613b      	str	r3, [r7, #16]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60fb      	str	r3, [r7, #12]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007446:	f000 fe7d 	bl	8008144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800744a:	4b1d      	ldr	r3, [pc, #116]	; (80074c0 <xTaskCheckForTimeOut+0xbc>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007462:	d102      	bne.n	800746a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007464:	2300      	movs	r3, #0
 8007466:	61fb      	str	r3, [r7, #28]
 8007468:	e023      	b.n	80074b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	4b15      	ldr	r3, [pc, #84]	; (80074c4 <xTaskCheckForTimeOut+0xc0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	429a      	cmp	r2, r3
 8007474:	d007      	beq.n	8007486 <xTaskCheckForTimeOut+0x82>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	429a      	cmp	r2, r3
 800747e:	d302      	bcc.n	8007486 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007480:	2301      	movs	r3, #1
 8007482:	61fb      	str	r3, [r7, #28]
 8007484:	e015      	b.n	80074b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	429a      	cmp	r2, r3
 800748e:	d20b      	bcs.n	80074a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	1ad2      	subs	r2, r2, r3
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff ff9b 	bl	80073d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074a2:	2300      	movs	r3, #0
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	e004      	b.n	80074b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074ae:	2301      	movs	r3, #1
 80074b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074b2:	f000 fe77 	bl	80081a4 <vPortExitCritical>

	return xReturn;
 80074b6:	69fb      	ldr	r3, [r7, #28]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3720      	adds	r7, #32
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20004d3c 	.word	0x20004d3c
 80074c4:	20004d50 	.word	0x20004d50

080074c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074c8:	b480      	push	{r7}
 80074ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074cc:	4b03      	ldr	r3, [pc, #12]	; (80074dc <vTaskMissedYield+0x14>)
 80074ce:	2201      	movs	r2, #1
 80074d0:	601a      	str	r2, [r3, #0]
}
 80074d2:	bf00      	nop
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	20004d4c 	.word	0x20004d4c

080074e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074e8:	f000 f852 	bl	8007590 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074ec:	4b06      	ldr	r3, [pc, #24]	; (8007508 <prvIdleTask+0x28>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d9f9      	bls.n	80074e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074f4:	4b05      	ldr	r3, [pc, #20]	; (800750c <prvIdleTask+0x2c>)
 80074f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007504:	e7f0      	b.n	80074e8 <prvIdleTask+0x8>
 8007506:	bf00      	nop
 8007508:	20004868 	.word	0x20004868
 800750c:	e000ed04 	.word	0xe000ed04

08007510 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007516:	2300      	movs	r3, #0
 8007518:	607b      	str	r3, [r7, #4]
 800751a:	e00c      	b.n	8007536 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	4613      	mov	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4a12      	ldr	r2, [pc, #72]	; (8007570 <prvInitialiseTaskLists+0x60>)
 8007528:	4413      	add	r3, r2
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe fbd8 	bl	8005ce0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3301      	adds	r3, #1
 8007534:	607b      	str	r3, [r7, #4]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b37      	cmp	r3, #55	; 0x37
 800753a:	d9ef      	bls.n	800751c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800753c:	480d      	ldr	r0, [pc, #52]	; (8007574 <prvInitialiseTaskLists+0x64>)
 800753e:	f7fe fbcf 	bl	8005ce0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007542:	480d      	ldr	r0, [pc, #52]	; (8007578 <prvInitialiseTaskLists+0x68>)
 8007544:	f7fe fbcc 	bl	8005ce0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007548:	480c      	ldr	r0, [pc, #48]	; (800757c <prvInitialiseTaskLists+0x6c>)
 800754a:	f7fe fbc9 	bl	8005ce0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800754e:	480c      	ldr	r0, [pc, #48]	; (8007580 <prvInitialiseTaskLists+0x70>)
 8007550:	f7fe fbc6 	bl	8005ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007554:	480b      	ldr	r0, [pc, #44]	; (8007584 <prvInitialiseTaskLists+0x74>)
 8007556:	f7fe fbc3 	bl	8005ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800755a:	4b0b      	ldr	r3, [pc, #44]	; (8007588 <prvInitialiseTaskLists+0x78>)
 800755c:	4a05      	ldr	r2, [pc, #20]	; (8007574 <prvInitialiseTaskLists+0x64>)
 800755e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007560:	4b0a      	ldr	r3, [pc, #40]	; (800758c <prvInitialiseTaskLists+0x7c>)
 8007562:	4a05      	ldr	r2, [pc, #20]	; (8007578 <prvInitialiseTaskLists+0x68>)
 8007564:	601a      	str	r2, [r3, #0]
}
 8007566:	bf00      	nop
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20004868 	.word	0x20004868
 8007574:	20004cc8 	.word	0x20004cc8
 8007578:	20004cdc 	.word	0x20004cdc
 800757c:	20004cf8 	.word	0x20004cf8
 8007580:	20004d0c 	.word	0x20004d0c
 8007584:	20004d24 	.word	0x20004d24
 8007588:	20004cf0 	.word	0x20004cf0
 800758c:	20004cf4 	.word	0x20004cf4

08007590 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007596:	e019      	b.n	80075cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007598:	f000 fdd4 	bl	8008144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800759c:	4b10      	ldr	r3, [pc, #64]	; (80075e0 <prvCheckTasksWaitingTermination+0x50>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3304      	adds	r3, #4
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe fc23 	bl	8005df4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075ae:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <prvCheckTasksWaitingTermination+0x54>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	4a0b      	ldr	r2, [pc, #44]	; (80075e4 <prvCheckTasksWaitingTermination+0x54>)
 80075b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <prvCheckTasksWaitingTermination+0x58>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3b01      	subs	r3, #1
 80075be:	4a0a      	ldr	r2, [pc, #40]	; (80075e8 <prvCheckTasksWaitingTermination+0x58>)
 80075c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075c2:	f000 fdef 	bl	80081a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f810 	bl	80075ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075cc:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <prvCheckTasksWaitingTermination+0x58>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e1      	bne.n	8007598 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20004d0c 	.word	0x20004d0c
 80075e4:	20004d38 	.word	0x20004d38
 80075e8:	20004d20 	.word	0x20004d20

080075ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3354      	adds	r3, #84	; 0x54
 80075f8:	4618      	mov	r0, r3
 80075fa:	f001 fac9 	bl	8008b90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007604:	2b00      	cmp	r3, #0
 8007606:	d108      	bne.n	800761a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760c:	4618      	mov	r0, r3
 800760e:	f000 ff5f 	bl	80084d0 <vPortFree>
				vPortFree( pxTCB );
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 ff5c 	bl	80084d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007618:	e018      	b.n	800764c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007620:	2b01      	cmp	r3, #1
 8007622:	d103      	bne.n	800762c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 ff53 	bl	80084d0 <vPortFree>
	}
 800762a:	e00f      	b.n	800764c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007632:	2b02      	cmp	r3, #2
 8007634:	d00a      	beq.n	800764c <prvDeleteTCB+0x60>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	60fb      	str	r3, [r7, #12]
}
 8007648:	bf00      	nop
 800764a:	e7fe      	b.n	800764a <prvDeleteTCB+0x5e>
	}
 800764c:	bf00      	nop
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800765a:	4b0c      	ldr	r3, [pc, #48]	; (800768c <prvResetNextTaskUnblockTime+0x38>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d104      	bne.n	800766e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007664:	4b0a      	ldr	r3, [pc, #40]	; (8007690 <prvResetNextTaskUnblockTime+0x3c>)
 8007666:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800766a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800766c:	e008      	b.n	8007680 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766e:	4b07      	ldr	r3, [pc, #28]	; (800768c <prvResetNextTaskUnblockTime+0x38>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	4a04      	ldr	r2, [pc, #16]	; (8007690 <prvResetNextTaskUnblockTime+0x3c>)
 800767e:	6013      	str	r3, [r2, #0]
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	20004cf0 	.word	0x20004cf0
 8007690:	20004d58 	.word	0x20004d58

08007694 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800769a:	4b0b      	ldr	r3, [pc, #44]	; (80076c8 <xTaskGetSchedulerState+0x34>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d102      	bne.n	80076a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076a2:	2301      	movs	r3, #1
 80076a4:	607b      	str	r3, [r7, #4]
 80076a6:	e008      	b.n	80076ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076a8:	4b08      	ldr	r3, [pc, #32]	; (80076cc <xTaskGetSchedulerState+0x38>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d102      	bne.n	80076b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076b0:	2302      	movs	r3, #2
 80076b2:	607b      	str	r3, [r7, #4]
 80076b4:	e001      	b.n	80076ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076b6:	2300      	movs	r3, #0
 80076b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076ba:	687b      	ldr	r3, [r7, #4]
	}
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	20004d44 	.word	0x20004d44
 80076cc:	20004d60 	.word	0x20004d60

080076d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076dc:	2300      	movs	r3, #0
 80076de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d056      	beq.n	8007794 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076e6:	4b2e      	ldr	r3, [pc, #184]	; (80077a0 <xTaskPriorityDisinherit+0xd0>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d00a      	beq.n	8007706 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60fb      	str	r3, [r7, #12]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	60bb      	str	r3, [r7, #8]
}
 8007720:	bf00      	nop
 8007722:	e7fe      	b.n	8007722 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007728:	1e5a      	subs	r2, r3, #1
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007736:	429a      	cmp	r2, r3
 8007738:	d02c      	beq.n	8007794 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773e:	2b00      	cmp	r3, #0
 8007740:	d128      	bne.n	8007794 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	3304      	adds	r3, #4
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe fb54 	bl	8005df4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007764:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <xTaskPriorityDisinherit+0xd4>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d903      	bls.n	8007774 <xTaskPriorityDisinherit+0xa4>
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	4a0c      	ldr	r2, [pc, #48]	; (80077a4 <xTaskPriorityDisinherit+0xd4>)
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4a09      	ldr	r2, [pc, #36]	; (80077a8 <xTaskPriorityDisinherit+0xd8>)
 8007782:	441a      	add	r2, r3
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	3304      	adds	r3, #4
 8007788:	4619      	mov	r1, r3
 800778a:	4610      	mov	r0, r2
 800778c:	f7fe fad5 	bl	8005d3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007790:	2301      	movs	r3, #1
 8007792:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007794:	697b      	ldr	r3, [r7, #20]
	}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20004864 	.word	0x20004864
 80077a4:	20004d40 	.word	0x20004d40
 80077a8:	20004868 	.word	0x20004868

080077ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077b6:	4b21      	ldr	r3, [pc, #132]	; (800783c <prvAddCurrentTaskToDelayedList+0x90>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077bc:	4b20      	ldr	r3, [pc, #128]	; (8007840 <prvAddCurrentTaskToDelayedList+0x94>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3304      	adds	r3, #4
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe fb16 	bl	8005df4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ce:	d10a      	bne.n	80077e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d007      	beq.n	80077e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077d6:	4b1a      	ldr	r3, [pc, #104]	; (8007840 <prvAddCurrentTaskToDelayedList+0x94>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3304      	adds	r3, #4
 80077dc:	4619      	mov	r1, r3
 80077de:	4819      	ldr	r0, [pc, #100]	; (8007844 <prvAddCurrentTaskToDelayedList+0x98>)
 80077e0:	f7fe faab 	bl	8005d3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077e4:	e026      	b.n	8007834 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4413      	add	r3, r2
 80077ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077ee:	4b14      	ldr	r3, [pc, #80]	; (8007840 <prvAddCurrentTaskToDelayedList+0x94>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d209      	bcs.n	8007812 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077fe:	4b12      	ldr	r3, [pc, #72]	; (8007848 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <prvAddCurrentTaskToDelayedList+0x94>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3304      	adds	r3, #4
 8007808:	4619      	mov	r1, r3
 800780a:	4610      	mov	r0, r2
 800780c:	f7fe fab9 	bl	8005d82 <vListInsert>
}
 8007810:	e010      	b.n	8007834 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007812:	4b0e      	ldr	r3, [pc, #56]	; (800784c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	4b0a      	ldr	r3, [pc, #40]	; (8007840 <prvAddCurrentTaskToDelayedList+0x94>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3304      	adds	r3, #4
 800781c:	4619      	mov	r1, r3
 800781e:	4610      	mov	r0, r2
 8007820:	f7fe faaf 	bl	8005d82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007824:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	429a      	cmp	r2, r3
 800782c:	d202      	bcs.n	8007834 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800782e:	4a08      	ldr	r2, [pc, #32]	; (8007850 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	6013      	str	r3, [r2, #0]
}
 8007834:	bf00      	nop
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	20004d3c 	.word	0x20004d3c
 8007840:	20004864 	.word	0x20004864
 8007844:	20004d24 	.word	0x20004d24
 8007848:	20004cf4 	.word	0x20004cf4
 800784c:	20004cf0 	.word	0x20004cf0
 8007850:	20004d58 	.word	0x20004d58

08007854 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08a      	sub	sp, #40	; 0x28
 8007858:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800785a:	2300      	movs	r3, #0
 800785c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800785e:	f000 fb07 	bl	8007e70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007862:	4b1c      	ldr	r3, [pc, #112]	; (80078d4 <xTimerCreateTimerTask+0x80>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d021      	beq.n	80078ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800786e:	2300      	movs	r3, #0
 8007870:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007872:	1d3a      	adds	r2, r7, #4
 8007874:	f107 0108 	add.w	r1, r7, #8
 8007878:	f107 030c 	add.w	r3, r7, #12
 800787c:	4618      	mov	r0, r3
 800787e:	f7fe fa15 	bl	8005cac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	9202      	str	r2, [sp, #8]
 800788a:	9301      	str	r3, [sp, #4]
 800788c:	2302      	movs	r3, #2
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	2300      	movs	r3, #0
 8007892:	460a      	mov	r2, r1
 8007894:	4910      	ldr	r1, [pc, #64]	; (80078d8 <xTimerCreateTimerTask+0x84>)
 8007896:	4811      	ldr	r0, [pc, #68]	; (80078dc <xTimerCreateTimerTask+0x88>)
 8007898:	f7ff f8b4 	bl	8006a04 <xTaskCreateStatic>
 800789c:	4603      	mov	r3, r0
 800789e:	4a10      	ldr	r2, [pc, #64]	; (80078e0 <xTimerCreateTimerTask+0x8c>)
 80078a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078a2:	4b0f      	ldr	r3, [pc, #60]	; (80078e0 <xTimerCreateTimerTask+0x8c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078aa:	2301      	movs	r3, #1
 80078ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10a      	bne.n	80078ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80078b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	613b      	str	r3, [r7, #16]
}
 80078c6:	bf00      	nop
 80078c8:	e7fe      	b.n	80078c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80078ca:	697b      	ldr	r3, [r7, #20]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20004d94 	.word	0x20004d94
 80078d8:	080095f8 	.word	0x080095f8
 80078dc:	08007a19 	.word	0x08007a19
 80078e0:	20004d98 	.word	0x20004d98

080078e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08a      	sub	sp, #40	; 0x28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
 80078f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10a      	bne.n	8007912 <xTimerGenericCommand+0x2e>
	__asm volatile
 80078fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	623b      	str	r3, [r7, #32]
}
 800790e:	bf00      	nop
 8007910:	e7fe      	b.n	8007910 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007912:	4b1a      	ldr	r3, [pc, #104]	; (800797c <xTimerGenericCommand+0x98>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d02a      	beq.n	8007970 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b05      	cmp	r3, #5
 800792a:	dc18      	bgt.n	800795e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800792c:	f7ff feb2 	bl	8007694 <xTaskGetSchedulerState>
 8007930:	4603      	mov	r3, r0
 8007932:	2b02      	cmp	r3, #2
 8007934:	d109      	bne.n	800794a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007936:	4b11      	ldr	r3, [pc, #68]	; (800797c <xTimerGenericCommand+0x98>)
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	f107 0110 	add.w	r1, r7, #16
 800793e:	2300      	movs	r3, #0
 8007940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007942:	f7fe fc29 	bl	8006198 <xQueueGenericSend>
 8007946:	6278      	str	r0, [r7, #36]	; 0x24
 8007948:	e012      	b.n	8007970 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800794a:	4b0c      	ldr	r3, [pc, #48]	; (800797c <xTimerGenericCommand+0x98>)
 800794c:	6818      	ldr	r0, [r3, #0]
 800794e:	f107 0110 	add.w	r1, r7, #16
 8007952:	2300      	movs	r3, #0
 8007954:	2200      	movs	r2, #0
 8007956:	f7fe fc1f 	bl	8006198 <xQueueGenericSend>
 800795a:	6278      	str	r0, [r7, #36]	; 0x24
 800795c:	e008      	b.n	8007970 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800795e:	4b07      	ldr	r3, [pc, #28]	; (800797c <xTimerGenericCommand+0x98>)
 8007960:	6818      	ldr	r0, [r3, #0]
 8007962:	f107 0110 	add.w	r1, r7, #16
 8007966:	2300      	movs	r3, #0
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	f7fe fd13 	bl	8006394 <xQueueGenericSendFromISR>
 800796e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007972:	4618      	mov	r0, r3
 8007974:	3728      	adds	r7, #40	; 0x28
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20004d94 	.word	0x20004d94

08007980 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af02      	add	r7, sp, #8
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800798a:	4b22      	ldr	r3, [pc, #136]	; (8007a14 <prvProcessExpiredTimer+0x94>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	3304      	adds	r3, #4
 8007998:	4618      	mov	r0, r3
 800799a:	f7fe fa2b 	bl	8005df4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079a4:	f003 0304 	and.w	r3, r3, #4
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d022      	beq.n	80079f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	699a      	ldr	r2, [r3, #24]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	18d1      	adds	r1, r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	6978      	ldr	r0, [r7, #20]
 80079ba:	f000 f8d1 	bl	8007b60 <prvInsertTimerInActiveList>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d01f      	beq.n	8007a04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079c4:	2300      	movs	r3, #0
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	2300      	movs	r3, #0
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	2100      	movs	r1, #0
 80079ce:	6978      	ldr	r0, [r7, #20]
 80079d0:	f7ff ff88 	bl	80078e4 <xTimerGenericCommand>
 80079d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d113      	bne.n	8007a04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	60fb      	str	r3, [r7, #12]
}
 80079ee:	bf00      	nop
 80079f0:	e7fe      	b.n	80079f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079f8:	f023 0301 	bic.w	r3, r3, #1
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	6978      	ldr	r0, [r7, #20]
 8007a0a:	4798      	blx	r3
}
 8007a0c:	bf00      	nop
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20004d8c 	.word	0x20004d8c

08007a18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a20:	f107 0308 	add.w	r3, r7, #8
 8007a24:	4618      	mov	r0, r3
 8007a26:	f000 f857 	bl	8007ad8 <prvGetNextExpireTime>
 8007a2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 f803 	bl	8007a3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a36:	f000 f8d5 	bl	8007be4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a3a:	e7f1      	b.n	8007a20 <prvTimerTask+0x8>

08007a3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a46:	f7ff fa39 	bl	8006ebc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a4a:	f107 0308 	add.w	r3, r7, #8
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 f866 	bl	8007b20 <prvSampleTimeNow>
 8007a54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d130      	bne.n	8007abe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10a      	bne.n	8007a78 <prvProcessTimerOrBlockTask+0x3c>
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d806      	bhi.n	8007a78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a6a:	f7ff fa35 	bl	8006ed8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a6e:	68f9      	ldr	r1, [r7, #12]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7ff ff85 	bl	8007980 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a76:	e024      	b.n	8007ac2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d008      	beq.n	8007a90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a7e:	4b13      	ldr	r3, [pc, #76]	; (8007acc <prvProcessTimerOrBlockTask+0x90>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <prvProcessTimerOrBlockTask+0x50>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e000      	b.n	8007a8e <prvProcessTimerOrBlockTask+0x52>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a90:	4b0f      	ldr	r3, [pc, #60]	; (8007ad0 <prvProcessTimerOrBlockTask+0x94>)
 8007a92:	6818      	ldr	r0, [r3, #0]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	f7fe ff7d 	bl	800699c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007aa2:	f7ff fa19 	bl	8006ed8 <xTaskResumeAll>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007aac:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <prvProcessTimerOrBlockTask+0x98>)
 8007aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	f3bf 8f6f 	isb	sy
}
 8007abc:	e001      	b.n	8007ac2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007abe:	f7ff fa0b 	bl	8006ed8 <xTaskResumeAll>
}
 8007ac2:	bf00      	nop
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20004d90 	.word	0x20004d90
 8007ad0:	20004d94 	.word	0x20004d94
 8007ad4:	e000ed04 	.word	0xe000ed04

08007ad8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ae0:	4b0e      	ldr	r3, [pc, #56]	; (8007b1c <prvGetNextExpireTime+0x44>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <prvGetNextExpireTime+0x16>
 8007aea:	2201      	movs	r2, #1
 8007aec:	e000      	b.n	8007af0 <prvGetNextExpireTime+0x18>
 8007aee:	2200      	movs	r2, #0
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d105      	bne.n	8007b08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007afc:	4b07      	ldr	r3, [pc, #28]	; (8007b1c <prvGetNextExpireTime+0x44>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60fb      	str	r3, [r7, #12]
 8007b06:	e001      	b.n	8007b0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	20004d8c 	.word	0x20004d8c

08007b20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b28:	f7ff fa74 	bl	8007014 <xTaskGetTickCount>
 8007b2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b2e:	4b0b      	ldr	r3, [pc, #44]	; (8007b5c <prvSampleTimeNow+0x3c>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d205      	bcs.n	8007b44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b38:	f000 f936 	bl	8007da8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	e002      	b.n	8007b4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b4a:	4a04      	ldr	r2, [pc, #16]	; (8007b5c <prvSampleTimeNow+0x3c>)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b50:	68fb      	ldr	r3, [r7, #12]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20004d9c 	.word	0x20004d9c

08007b60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d812      	bhi.n	8007bac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	1ad2      	subs	r2, r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d302      	bcc.n	8007b9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b94:	2301      	movs	r3, #1
 8007b96:	617b      	str	r3, [r7, #20]
 8007b98:	e01b      	b.n	8007bd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b9a:	4b10      	ldr	r3, [pc, #64]	; (8007bdc <prvInsertTimerInActiveList+0x7c>)
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	f7fe f8ec 	bl	8005d82 <vListInsert>
 8007baa:	e012      	b.n	8007bd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d206      	bcs.n	8007bc2 <prvInsertTimerInActiveList+0x62>
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d302      	bcc.n	8007bc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	e007      	b.n	8007bd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bc2:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <prvInsertTimerInActiveList+0x80>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3304      	adds	r3, #4
 8007bca:	4619      	mov	r1, r3
 8007bcc:	4610      	mov	r0, r2
 8007bce:	f7fe f8d8 	bl	8005d82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bd2:	697b      	ldr	r3, [r7, #20]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3718      	adds	r7, #24
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	20004d90 	.word	0x20004d90
 8007be0:	20004d8c 	.word	0x20004d8c

08007be4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b08e      	sub	sp, #56	; 0x38
 8007be8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bea:	e0ca      	b.n	8007d82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	da18      	bge.n	8007c24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007bf2:	1d3b      	adds	r3, r7, #4
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10a      	bne.n	8007c14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	61fb      	str	r3, [r7, #28]
}
 8007c10:	bf00      	nop
 8007c12:	e7fe      	b.n	8007c12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c1a:	6850      	ldr	r0, [r2, #4]
 8007c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c1e:	6892      	ldr	r2, [r2, #8]
 8007c20:	4611      	mov	r1, r2
 8007c22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f2c0 80aa 	blt.w	8007d80 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d004      	beq.n	8007c42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe f8d9 	bl	8005df4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c42:	463b      	mov	r3, r7
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7ff ff6b 	bl	8007b20 <prvSampleTimeNow>
 8007c4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b09      	cmp	r3, #9
 8007c50:	f200 8097 	bhi.w	8007d82 <prvProcessReceivedCommands+0x19e>
 8007c54:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <prvProcessReceivedCommands+0x78>)
 8007c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5a:	bf00      	nop
 8007c5c:	08007c85 	.word	0x08007c85
 8007c60:	08007c85 	.word	0x08007c85
 8007c64:	08007c85 	.word	0x08007c85
 8007c68:	08007cf9 	.word	0x08007cf9
 8007c6c:	08007d0d 	.word	0x08007d0d
 8007c70:	08007d57 	.word	0x08007d57
 8007c74:	08007c85 	.word	0x08007c85
 8007c78:	08007c85 	.word	0x08007c85
 8007c7c:	08007cf9 	.word	0x08007cf9
 8007c80:	08007d0d 	.word	0x08007d0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c8a:	f043 0301 	orr.w	r3, r3, #1
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	18d1      	adds	r1, r2, r3
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca4:	f7ff ff5c 	bl	8007b60 <prvInsertTimerInActiveList>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d069      	beq.n	8007d82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d05e      	beq.n	8007d82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	441a      	add	r2, r3
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cd6:	f7ff fe05 	bl	80078e4 <xTimerGenericCommand>
 8007cda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d14f      	bne.n	8007d82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	61bb      	str	r3, [r7, #24]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cfe:	f023 0301 	bic.w	r3, r3, #1
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007d0a:	e03a      	b.n	8007d82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d12:	f043 0301 	orr.w	r3, r3, #1
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10a      	bne.n	8007d42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	617b      	str	r3, [r7, #20]
}
 8007d3e:	bf00      	nop
 8007d40:	e7fe      	b.n	8007d40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	699a      	ldr	r2, [r3, #24]
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	18d1      	adds	r1, r2, r3
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d50:	f7ff ff06 	bl	8007b60 <prvInsertTimerInActiveList>
					break;
 8007d54:	e015      	b.n	8007d82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d103      	bne.n	8007d6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d66:	f000 fbb3 	bl	80084d0 <vPortFree>
 8007d6a:	e00a      	b.n	8007d82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d72:	f023 0301 	bic.w	r3, r3, #1
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d7e:	e000      	b.n	8007d82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d82:	4b08      	ldr	r3, [pc, #32]	; (8007da4 <prvProcessReceivedCommands+0x1c0>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	1d39      	adds	r1, r7, #4
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe fb9e 	bl	80064cc <xQueueReceive>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f47f af2a 	bne.w	8007bec <prvProcessReceivedCommands+0x8>
	}
}
 8007d98:	bf00      	nop
 8007d9a:	bf00      	nop
 8007d9c:	3730      	adds	r7, #48	; 0x30
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	20004d94 	.word	0x20004d94

08007da8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dae:	e048      	b.n	8007e42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007db0:	4b2d      	ldr	r3, [pc, #180]	; (8007e68 <prvSwitchTimerLists+0xc0>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dba:	4b2b      	ldr	r3, [pc, #172]	; (8007e68 <prvSwitchTimerLists+0xc0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe f813 	bl	8005df4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ddc:	f003 0304 	and.w	r3, r3, #4
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d02e      	beq.n	8007e42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	4413      	add	r3, r2
 8007dec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d90e      	bls.n	8007e14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e02:	4b19      	ldr	r3, [pc, #100]	; (8007e68 <prvSwitchTimerLists+0xc0>)
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	f7fd ffb8 	bl	8005d82 <vListInsert>
 8007e12:	e016      	b.n	8007e42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e14:	2300      	movs	r3, #0
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	2300      	movs	r3, #0
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7ff fd60 	bl	80078e4 <xTimerGenericCommand>
 8007e24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	603b      	str	r3, [r7, #0]
}
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e42:	4b09      	ldr	r3, [pc, #36]	; (8007e68 <prvSwitchTimerLists+0xc0>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1b1      	bne.n	8007db0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e4c:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <prvSwitchTimerLists+0xc0>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e52:	4b06      	ldr	r3, [pc, #24]	; (8007e6c <prvSwitchTimerLists+0xc4>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a04      	ldr	r2, [pc, #16]	; (8007e68 <prvSwitchTimerLists+0xc0>)
 8007e58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e5a:	4a04      	ldr	r2, [pc, #16]	; (8007e6c <prvSwitchTimerLists+0xc4>)
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	6013      	str	r3, [r2, #0]
}
 8007e60:	bf00      	nop
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	20004d8c 	.word	0x20004d8c
 8007e6c:	20004d90 	.word	0x20004d90

08007e70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e76:	f000 f965 	bl	8008144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e7a:	4b15      	ldr	r3, [pc, #84]	; (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d120      	bne.n	8007ec4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e82:	4814      	ldr	r0, [pc, #80]	; (8007ed4 <prvCheckForValidListAndQueue+0x64>)
 8007e84:	f7fd ff2c 	bl	8005ce0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e88:	4813      	ldr	r0, [pc, #76]	; (8007ed8 <prvCheckForValidListAndQueue+0x68>)
 8007e8a:	f7fd ff29 	bl	8005ce0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e8e:	4b13      	ldr	r3, [pc, #76]	; (8007edc <prvCheckForValidListAndQueue+0x6c>)
 8007e90:	4a10      	ldr	r2, [pc, #64]	; (8007ed4 <prvCheckForValidListAndQueue+0x64>)
 8007e92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e94:	4b12      	ldr	r3, [pc, #72]	; (8007ee0 <prvCheckForValidListAndQueue+0x70>)
 8007e96:	4a10      	ldr	r2, [pc, #64]	; (8007ed8 <prvCheckForValidListAndQueue+0x68>)
 8007e98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	4b11      	ldr	r3, [pc, #68]	; (8007ee4 <prvCheckForValidListAndQueue+0x74>)
 8007ea0:	4a11      	ldr	r2, [pc, #68]	; (8007ee8 <prvCheckForValidListAndQueue+0x78>)
 8007ea2:	2110      	movs	r1, #16
 8007ea4:	200a      	movs	r0, #10
 8007ea6:	f7fe f837 	bl	8005f18 <xQueueGenericCreateStatic>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	4a08      	ldr	r2, [pc, #32]	; (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007eae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007eb0:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	490b      	ldr	r1, [pc, #44]	; (8007eec <prvCheckForValidListAndQueue+0x7c>)
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe fd18 	bl	80068f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ec4:	f000 f96e 	bl	80081a4 <vPortExitCritical>
}
 8007ec8:	bf00      	nop
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20004d94 	.word	0x20004d94
 8007ed4:	20004d64 	.word	0x20004d64
 8007ed8:	20004d78 	.word	0x20004d78
 8007edc:	20004d8c 	.word	0x20004d8c
 8007ee0:	20004d90 	.word	0x20004d90
 8007ee4:	20004e40 	.word	0x20004e40
 8007ee8:	20004da0 	.word	0x20004da0
 8007eec:	08009600 	.word	0x08009600

08007ef0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3b04      	subs	r3, #4
 8007f00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3b04      	subs	r3, #4
 8007f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f023 0201 	bic.w	r2, r3, #1
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3b04      	subs	r3, #4
 8007f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f20:	4a0c      	ldr	r2, [pc, #48]	; (8007f54 <pxPortInitialiseStack+0x64>)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3b14      	subs	r3, #20
 8007f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3b04      	subs	r3, #4
 8007f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f06f 0202 	mvn.w	r2, #2
 8007f3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	3b20      	subs	r3, #32
 8007f44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f46:	68fb      	ldr	r3, [r7, #12]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	08007f59 	.word	0x08007f59

08007f58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f62:	4b12      	ldr	r3, [pc, #72]	; (8007fac <prvTaskExitError+0x54>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f6a:	d00a      	beq.n	8007f82 <prvTaskExitError+0x2a>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	60fb      	str	r3, [r7, #12]
}
 8007f7e:	bf00      	nop
 8007f80:	e7fe      	b.n	8007f80 <prvTaskExitError+0x28>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	60bb      	str	r3, [r7, #8]
}
 8007f94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f96:	bf00      	nop
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0fc      	beq.n	8007f98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f9e:	bf00      	nop
 8007fa0:	bf00      	nop
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	2000003c 	.word	0x2000003c

08007fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fb0:	4b07      	ldr	r3, [pc, #28]	; (8007fd0 <pxCurrentTCBConst2>)
 8007fb2:	6819      	ldr	r1, [r3, #0]
 8007fb4:	6808      	ldr	r0, [r1, #0]
 8007fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fba:	f380 8809 	msr	PSP, r0
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f04f 0000 	mov.w	r0, #0
 8007fc6:	f380 8811 	msr	BASEPRI, r0
 8007fca:	4770      	bx	lr
 8007fcc:	f3af 8000 	nop.w

08007fd0 <pxCurrentTCBConst2>:
 8007fd0:	20004864 	.word	0x20004864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop

08007fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fd8:	4808      	ldr	r0, [pc, #32]	; (8007ffc <prvPortStartFirstTask+0x24>)
 8007fda:	6800      	ldr	r0, [r0, #0]
 8007fdc:	6800      	ldr	r0, [r0, #0]
 8007fde:	f380 8808 	msr	MSP, r0
 8007fe2:	f04f 0000 	mov.w	r0, #0
 8007fe6:	f380 8814 	msr	CONTROL, r0
 8007fea:	b662      	cpsie	i
 8007fec:	b661      	cpsie	f
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	df00      	svc	0
 8007ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007ffa:	bf00      	nop
 8007ffc:	e000ed08 	.word	0xe000ed08

08008000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008006:	4b46      	ldr	r3, [pc, #280]	; (8008120 <xPortStartScheduler+0x120>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a46      	ldr	r2, [pc, #280]	; (8008124 <xPortStartScheduler+0x124>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d10a      	bne.n	8008026 <xPortStartScheduler+0x26>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	613b      	str	r3, [r7, #16]
}
 8008022:	bf00      	nop
 8008024:	e7fe      	b.n	8008024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008026:	4b3e      	ldr	r3, [pc, #248]	; (8008120 <xPortStartScheduler+0x120>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a3f      	ldr	r2, [pc, #252]	; (8008128 <xPortStartScheduler+0x128>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d10a      	bne.n	8008046 <xPortStartScheduler+0x46>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	60fb      	str	r3, [r7, #12]
}
 8008042:	bf00      	nop
 8008044:	e7fe      	b.n	8008044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008046:	4b39      	ldr	r3, [pc, #228]	; (800812c <xPortStartScheduler+0x12c>)
 8008048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	b2db      	uxtb	r3, r3
 8008050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	22ff      	movs	r2, #255	; 0xff
 8008056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	b2db      	uxtb	r3, r3
 800805e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008060:	78fb      	ldrb	r3, [r7, #3]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008068:	b2da      	uxtb	r2, r3
 800806a:	4b31      	ldr	r3, [pc, #196]	; (8008130 <xPortStartScheduler+0x130>)
 800806c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800806e:	4b31      	ldr	r3, [pc, #196]	; (8008134 <xPortStartScheduler+0x134>)
 8008070:	2207      	movs	r2, #7
 8008072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008074:	e009      	b.n	800808a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008076:	4b2f      	ldr	r3, [pc, #188]	; (8008134 <xPortStartScheduler+0x134>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3b01      	subs	r3, #1
 800807c:	4a2d      	ldr	r2, [pc, #180]	; (8008134 <xPortStartScheduler+0x134>)
 800807e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	b2db      	uxtb	r3, r3
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	b2db      	uxtb	r3, r3
 8008088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800808a:	78fb      	ldrb	r3, [r7, #3]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008092:	2b80      	cmp	r3, #128	; 0x80
 8008094:	d0ef      	beq.n	8008076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008096:	4b27      	ldr	r3, [pc, #156]	; (8008134 <xPortStartScheduler+0x134>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f1c3 0307 	rsb	r3, r3, #7
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d00a      	beq.n	80080b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	60bb      	str	r3, [r7, #8]
}
 80080b4:	bf00      	nop
 80080b6:	e7fe      	b.n	80080b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080b8:	4b1e      	ldr	r3, [pc, #120]	; (8008134 <xPortStartScheduler+0x134>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	021b      	lsls	r3, r3, #8
 80080be:	4a1d      	ldr	r2, [pc, #116]	; (8008134 <xPortStartScheduler+0x134>)
 80080c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080c2:	4b1c      	ldr	r3, [pc, #112]	; (8008134 <xPortStartScheduler+0x134>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080ca:	4a1a      	ldr	r2, [pc, #104]	; (8008134 <xPortStartScheduler+0x134>)
 80080cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080d6:	4b18      	ldr	r3, [pc, #96]	; (8008138 <xPortStartScheduler+0x138>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a17      	ldr	r2, [pc, #92]	; (8008138 <xPortStartScheduler+0x138>)
 80080dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080e2:	4b15      	ldr	r3, [pc, #84]	; (8008138 <xPortStartScheduler+0x138>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a14      	ldr	r2, [pc, #80]	; (8008138 <xPortStartScheduler+0x138>)
 80080e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80080ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080ee:	f000 f8dd 	bl	80082ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080f2:	4b12      	ldr	r3, [pc, #72]	; (800813c <xPortStartScheduler+0x13c>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080f8:	f000 f8fc 	bl	80082f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080fc:	4b10      	ldr	r3, [pc, #64]	; (8008140 <xPortStartScheduler+0x140>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a0f      	ldr	r2, [pc, #60]	; (8008140 <xPortStartScheduler+0x140>)
 8008102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008108:	f7ff ff66 	bl	8007fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800810c:	f7ff f84c 	bl	80071a8 <vTaskSwitchContext>
	prvTaskExitError();
 8008110:	f7ff ff22 	bl	8007f58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	e000ed00 	.word	0xe000ed00
 8008124:	410fc271 	.word	0x410fc271
 8008128:	410fc270 	.word	0x410fc270
 800812c:	e000e400 	.word	0xe000e400
 8008130:	20004e90 	.word	0x20004e90
 8008134:	20004e94 	.word	0x20004e94
 8008138:	e000ed20 	.word	0xe000ed20
 800813c:	2000003c 	.word	0x2000003c
 8008140:	e000ef34 	.word	0xe000ef34

08008144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	607b      	str	r3, [r7, #4]
}
 800815c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800815e:	4b0f      	ldr	r3, [pc, #60]	; (800819c <vPortEnterCritical+0x58>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3301      	adds	r3, #1
 8008164:	4a0d      	ldr	r2, [pc, #52]	; (800819c <vPortEnterCritical+0x58>)
 8008166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008168:	4b0c      	ldr	r3, [pc, #48]	; (800819c <vPortEnterCritical+0x58>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d10f      	bne.n	8008190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008170:	4b0b      	ldr	r3, [pc, #44]	; (80081a0 <vPortEnterCritical+0x5c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <vPortEnterCritical+0x4c>
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	603b      	str	r3, [r7, #0]
}
 800818c:	bf00      	nop
 800818e:	e7fe      	b.n	800818e <vPortEnterCritical+0x4a>
	}
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	2000003c 	.word	0x2000003c
 80081a0:	e000ed04 	.word	0xe000ed04

080081a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081aa:	4b12      	ldr	r3, [pc, #72]	; (80081f4 <vPortExitCritical+0x50>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10a      	bne.n	80081c8 <vPortExitCritical+0x24>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	607b      	str	r3, [r7, #4]
}
 80081c4:	bf00      	nop
 80081c6:	e7fe      	b.n	80081c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80081c8:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <vPortExitCritical+0x50>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	4a09      	ldr	r2, [pc, #36]	; (80081f4 <vPortExitCritical+0x50>)
 80081d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081d2:	4b08      	ldr	r3, [pc, #32]	; (80081f4 <vPortExitCritical+0x50>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d105      	bne.n	80081e6 <vPortExitCritical+0x42>
 80081da:	2300      	movs	r3, #0
 80081dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	f383 8811 	msr	BASEPRI, r3
}
 80081e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	2000003c 	.word	0x2000003c
	...

08008200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008200:	f3ef 8009 	mrs	r0, PSP
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	4b15      	ldr	r3, [pc, #84]	; (8008260 <pxCurrentTCBConst>)
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	f01e 0f10 	tst.w	lr, #16
 8008210:	bf08      	it	eq
 8008212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821a:	6010      	str	r0, [r2, #0]
 800821c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008224:	f380 8811 	msr	BASEPRI, r0
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f7fe ffba 	bl	80071a8 <vTaskSwitchContext>
 8008234:	f04f 0000 	mov.w	r0, #0
 8008238:	f380 8811 	msr	BASEPRI, r0
 800823c:	bc09      	pop	{r0, r3}
 800823e:	6819      	ldr	r1, [r3, #0]
 8008240:	6808      	ldr	r0, [r1, #0]
 8008242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008246:	f01e 0f10 	tst.w	lr, #16
 800824a:	bf08      	it	eq
 800824c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008250:	f380 8809 	msr	PSP, r0
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	f3af 8000 	nop.w

08008260 <pxCurrentTCBConst>:
 8008260:	20004864 	.word	0x20004864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008264:	bf00      	nop
 8008266:	bf00      	nop

08008268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	607b      	str	r3, [r7, #4]
}
 8008280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008282:	f7fe fed7 	bl	8007034 <xTaskIncrementTick>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800828c:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <xPortSysTickHandler+0x40>)
 800828e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	2300      	movs	r3, #0
 8008296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	f383 8811 	msr	BASEPRI, r3
}
 800829e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082a0:	bf00      	nop
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	e000ed04 	.word	0xe000ed04

080082ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082b0:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <vPortSetupTimerInterrupt+0x34>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082b6:	4b0b      	ldr	r3, [pc, #44]	; (80082e4 <vPortSetupTimerInterrupt+0x38>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082bc:	4b0a      	ldr	r3, [pc, #40]	; (80082e8 <vPortSetupTimerInterrupt+0x3c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a0a      	ldr	r2, [pc, #40]	; (80082ec <vPortSetupTimerInterrupt+0x40>)
 80082c2:	fba2 2303 	umull	r2, r3, r2, r3
 80082c6:	099b      	lsrs	r3, r3, #6
 80082c8:	4a09      	ldr	r2, [pc, #36]	; (80082f0 <vPortSetupTimerInterrupt+0x44>)
 80082ca:	3b01      	subs	r3, #1
 80082cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082ce:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <vPortSetupTimerInterrupt+0x34>)
 80082d0:	2207      	movs	r2, #7
 80082d2:	601a      	str	r2, [r3, #0]
}
 80082d4:	bf00      	nop
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	e000e010 	.word	0xe000e010
 80082e4:	e000e018 	.word	0xe000e018
 80082e8:	20000020 	.word	0x20000020
 80082ec:	10624dd3 	.word	0x10624dd3
 80082f0:	e000e014 	.word	0xe000e014

080082f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008304 <vPortEnableVFP+0x10>
 80082f8:	6801      	ldr	r1, [r0, #0]
 80082fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082fe:	6001      	str	r1, [r0, #0]
 8008300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008302:	bf00      	nop
 8008304:	e000ed88 	.word	0xe000ed88

08008308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800830e:	f3ef 8305 	mrs	r3, IPSR
 8008312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2b0f      	cmp	r3, #15
 8008318:	d914      	bls.n	8008344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800831a:	4a17      	ldr	r2, [pc, #92]	; (8008378 <vPortValidateInterruptPriority+0x70>)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4413      	add	r3, r2
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008324:	4b15      	ldr	r3, [pc, #84]	; (800837c <vPortValidateInterruptPriority+0x74>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	7afa      	ldrb	r2, [r7, #11]
 800832a:	429a      	cmp	r2, r3
 800832c:	d20a      	bcs.n	8008344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	607b      	str	r3, [r7, #4]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008344:	4b0e      	ldr	r3, [pc, #56]	; (8008380 <vPortValidateInterruptPriority+0x78>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800834c:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <vPortValidateInterruptPriority+0x7c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	429a      	cmp	r2, r3
 8008352:	d90a      	bls.n	800836a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	603b      	str	r3, [r7, #0]
}
 8008366:	bf00      	nop
 8008368:	e7fe      	b.n	8008368 <vPortValidateInterruptPriority+0x60>
	}
 800836a:	bf00      	nop
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	e000e3f0 	.word	0xe000e3f0
 800837c:	20004e90 	.word	0x20004e90
 8008380:	e000ed0c 	.word	0xe000ed0c
 8008384:	20004e94 	.word	0x20004e94

08008388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b088      	sub	sp, #32
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008390:	2300      	movs	r3, #0
 8008392:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 8008394:	4b48      	ldr	r3, [pc, #288]	; (80084b8 <pvPortMalloc+0x130>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10a      	bne.n	80083b2 <pvPortMalloc+0x2a>
	__asm volatile
 800839c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	60fb      	str	r3, [r7, #12]
}
 80083ae:	bf00      	nop
 80083b0:	e7fe      	b.n	80083b0 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 80083b2:	f7fe fd83 	bl	8006ebc <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083b6:	4b41      	ldr	r3, [pc, #260]	; (80084bc <pvPortMalloc+0x134>)
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4013      	ands	r3, r2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d172      	bne.n	80084a8 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00d      	beq.n	80083e4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 80083c8:	2208      	movs	r2, #8
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4413      	add	r3, r2
 80083ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d004      	beq.n	80083e4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f023 0307 	bic.w	r3, r3, #7
 80083e0:	3308      	adds	r3, #8
 80083e2:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d05e      	beq.n	80084a8 <pvPortMalloc+0x120>
 80083ea:	4b35      	ldr	r3, [pc, #212]	; (80084c0 <pvPortMalloc+0x138>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d859      	bhi.n	80084a8 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083f4:	4b33      	ldr	r3, [pc, #204]	; (80084c4 <pvPortMalloc+0x13c>)
 80083f6:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 80083f8:	4b32      	ldr	r3, [pc, #200]	; (80084c4 <pvPortMalloc+0x13c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083fe:	e004      	b.n	800840a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	429a      	cmp	r2, r3
 8008412:	d903      	bls.n	800841c <pvPortMalloc+0x94>
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1f1      	bne.n	8008400 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800841c:	4b26      	ldr	r3, [pc, #152]	; (80084b8 <pvPortMalloc+0x130>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	69fa      	ldr	r2, [r7, #28]
 8008422:	429a      	cmp	r2, r3
 8008424:	d040      	beq.n	80084a8 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2208      	movs	r2, #8
 800842c:	4413      	add	r3, r2
 800842e:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	1ad2      	subs	r2, r2, r3
 8008440:	2308      	movs	r3, #8
 8008442:	005b      	lsls	r3, r3, #1
 8008444:	429a      	cmp	r2, r3
 8008446:	d90f      	bls.n	8008468 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008448:	69fa      	ldr	r2, [r7, #28]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4413      	add	r3, r2
 800844e:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	1ad2      	subs	r2, r2, r3
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8008462:	6938      	ldr	r0, [r7, #16]
 8008464:	f000 f8a2 	bl	80085ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008468:	4b15      	ldr	r3, [pc, #84]	; (80084c0 <pvPortMalloc+0x138>)
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	4a13      	ldr	r2, [pc, #76]	; (80084c0 <pvPortMalloc+0x138>)
 8008474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008476:	4b12      	ldr	r3, [pc, #72]	; (80084c0 <pvPortMalloc+0x138>)
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	4b13      	ldr	r3, [pc, #76]	; (80084c8 <pvPortMalloc+0x140>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d203      	bcs.n	800848a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008482:	4b0f      	ldr	r3, [pc, #60]	; (80084c0 <pvPortMalloc+0x138>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a10      	ldr	r2, [pc, #64]	; (80084c8 <pvPortMalloc+0x140>)
 8008488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	4b0b      	ldr	r3, [pc, #44]	; (80084bc <pvPortMalloc+0x134>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	431a      	orrs	r2, r3
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	2200      	movs	r2, #0
 800849c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800849e:	4b0b      	ldr	r3, [pc, #44]	; (80084cc <pvPortMalloc+0x144>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3301      	adds	r3, #1
 80084a4:	4a09      	ldr	r2, [pc, #36]	; (80084cc <pvPortMalloc+0x144>)
 80084a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084a8:	f7fe fd16 	bl	8006ed8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 80084ac:	697b      	ldr	r3, [r7, #20]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3720      	adds	r7, #32
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	20004ea0 	.word	0x20004ea0
 80084bc:	20004eb4 	.word	0x20004eb4
 80084c0:	20004ea4 	.word	0x20004ea4
 80084c4:	20004e98 	.word	0x20004e98
 80084c8:	20004ea8 	.word	0x20004ea8
 80084cc:	20004eac 	.word	0x20004eac

080084d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d04d      	beq.n	800857e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084e2:	2308      	movs	r3, #8
 80084e4:	425b      	negs	r3, r3
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	4413      	add	r3, r2
 80084ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	4b24      	ldr	r3, [pc, #144]	; (8008588 <vPortFree+0xb8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4013      	ands	r3, r2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <vPortFree+0x44>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	60fb      	str	r3, [r7, #12]
}
 8008510:	bf00      	nop
 8008512:	e7fe      	b.n	8008512 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00a      	beq.n	8008532 <vPortFree+0x62>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	60bb      	str	r3, [r7, #8]
}
 800852e:	bf00      	nop
 8008530:	e7fe      	b.n	8008530 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	4b14      	ldr	r3, [pc, #80]	; (8008588 <vPortFree+0xb8>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4013      	ands	r3, r2
 800853c:	2b00      	cmp	r3, #0
 800853e:	d01e      	beq.n	800857e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d11a      	bne.n	800857e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	4b0e      	ldr	r3, [pc, #56]	; (8008588 <vPortFree+0xb8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	43db      	mvns	r3, r3
 8008552:	401a      	ands	r2, r3
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008558:	f7fe fcb0 	bl	8006ebc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	4b0a      	ldr	r3, [pc, #40]	; (800858c <vPortFree+0xbc>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4413      	add	r3, r2
 8008566:	4a09      	ldr	r2, [pc, #36]	; (800858c <vPortFree+0xbc>)
 8008568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800856a:	6938      	ldr	r0, [r7, #16]
 800856c:	f000 f81e 	bl	80085ac <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <vPortFree+0xc0>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	3301      	adds	r3, #1
 8008576:	4a06      	ldr	r2, [pc, #24]	; (8008590 <vPortFree+0xc0>)
 8008578:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800857a:	f7fe fcad 	bl	8006ed8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800857e:	bf00      	nop
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20004eb4 	.word	0x20004eb4
 800858c:	20004ea4 	.word	0x20004ea4
 8008590:	20004eb0 	.word	0x20004eb0

08008594 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8008594:	b480      	push	{r7}
 8008596:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8008598:	4b03      	ldr	r3, [pc, #12]	; (80085a8 <xPortGetFreeHeapSize+0x14>)
 800859a:	681b      	ldr	r3, [r3, #0]
}
 800859c:	4618      	mov	r0, r3
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	20004ea4 	.word	0x20004ea4

080085ac <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085b4:	4b28      	ldr	r3, [pc, #160]	; (8008658 <prvInsertBlockIntoFreeList+0xac>)
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	e002      	b.n	80085c0 <prvInsertBlockIntoFreeList+0x14>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d8f7      	bhi.n	80085ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	4413      	add	r3, r2
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d108      	bne.n	80085ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	441a      	add	r2, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	441a      	add	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d118      	bne.n	8008634 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	4b15      	ldr	r3, [pc, #84]	; (800865c <prvInsertBlockIntoFreeList+0xb0>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d00d      	beq.n	800862a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685a      	ldr	r2, [r3, #4]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	441a      	add	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	e008      	b.n	800863c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800862a:	4b0c      	ldr	r3, [pc, #48]	; (800865c <prvInsertBlockIntoFreeList+0xb0>)
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	601a      	str	r2, [r3, #0]
 8008632:	e003      	b.n	800863c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	429a      	cmp	r2, r3
 8008642:	d002      	beq.n	800864a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800864a:	bf00      	nop
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	20004e98 	.word	0x20004e98
 800865c:	20004ea0 	.word	0x20004ea0

08008660 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 8008660:	b480      	push	{r7}
 8008662:	b08f      	sub	sp, #60	; 0x3c
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 8008668:	2300      	movs	r3, #0
 800866a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800866c:	2300      	movs	r3, #0
 800866e:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 8008674:	4b5a      	ldr	r3, [pc, #360]	; (80087e0 <vPortDefineHeapRegions+0x180>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00a      	beq.n	8008692 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	617b      	str	r3, [r7, #20]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	00db      	lsls	r3, r3, #3
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	4413      	add	r3, r2
 800869a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800869c:	e07d      	b.n	800879a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ac:	f003 0307 	and.w	r3, r3, #7
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00e      	beq.n	80086d2 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	3307      	adds	r3, #7
 80086b8:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 80086ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086bc:	f023 0307 	bic.w	r3, r3, #7
 80086c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086ce:	4413      	add	r3, r2
 80086d0:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 80086d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d106      	bne.n	80086ea <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	4a41      	ldr	r2, [pc, #260]	; (80087e4 <vPortDefineHeapRegions+0x184>)
 80086e0:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 80086e2:	4b40      	ldr	r3, [pc, #256]	; (80087e4 <vPortDefineHeapRegions+0x184>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	605a      	str	r2, [r3, #4]
 80086e8:	e01f      	b.n	800872a <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 80086ea:	4b3d      	ldr	r3, [pc, #244]	; (80087e0 <vPortDefineHeapRegions+0x180>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	613b      	str	r3, [r7, #16]
}
 8008704:	bf00      	nop
 8008706:	e7fe      	b.n	8008706 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 8008708:	4b35      	ldr	r3, [pc, #212]	; (80087e0 <vPortDefineHeapRegions+0x180>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	461a      	mov	r2, r3
 800870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008710:	4293      	cmp	r3, r2
 8008712:	d80a      	bhi.n	800872a <vPortDefineHeapRegions+0xca>
	__asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	60fb      	str	r3, [r7, #12]
}
 8008726:	bf00      	nop
 8008728:	e7fe      	b.n	8008728 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800872a:	4b2d      	ldr	r3, [pc, #180]	; (80087e0 <vPortDefineHeapRegions+0x180>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 8008730:	69fa      	ldr	r2, [r7, #28]
 8008732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008734:	4413      	add	r3, r2
 8008736:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 8008738:	2208      	movs	r2, #8
 800873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873c:	1a9b      	subs	r3, r3, r2
 800873e:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	f023 0307 	bic.w	r3, r3, #7
 8008746:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 8008748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874a:	4a25      	ldr	r2, [pc, #148]	; (80087e0 <vPortDefineHeapRegions+0x180>)
 800874c:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800874e:	4b24      	ldr	r3, [pc, #144]	; (80087e0 <vPortDefineHeapRegions+0x180>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2200      	movs	r2, #0
 8008754:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 8008756:	4b22      	ldr	r3, [pc, #136]	; (80087e0 <vPortDefineHeapRegions+0x180>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2200      	movs	r2, #0
 800875c:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 8008762:	6a3b      	ldr	r3, [r7, #32]
 8008764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008766:	1ad2      	subs	r2, r2, r3
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800876c:	4b1c      	ldr	r3, [pc, #112]	; (80087e0 <vPortDefineHeapRegions+0x180>)
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d002      	beq.n	8008780 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	6a3a      	ldr	r2, [r7, #32]
 800877e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008786:	4413      	add	r3, r2
 8008788:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800878a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878c:	3301      	adds	r3, #1
 800878e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8008790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008792:	00db      	lsls	r3, r3, #3
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	4413      	add	r3, r2
 8008798:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f47f af7d 	bne.w	800869e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 80087a4:	4a10      	ldr	r2, [pc, #64]	; (80087e8 <vPortDefineHeapRegions+0x188>)
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 80087aa:	4a10      	ldr	r2, [pc, #64]	; (80087ec <vPortDefineHeapRegions+0x18c>)
 80087ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ae:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 80087b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10a      	bne.n	80087cc <vPortDefineHeapRegions+0x16c>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	60bb      	str	r3, [r7, #8]
}
 80087c8:	bf00      	nop
 80087ca:	e7fe      	b.n	80087ca <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087cc:	4b08      	ldr	r3, [pc, #32]	; (80087f0 <vPortDefineHeapRegions+0x190>)
 80087ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087d2:	601a      	str	r2, [r3, #0]
}
 80087d4:	bf00      	nop
 80087d6:	373c      	adds	r7, #60	; 0x3c
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	20004ea0 	.word	0x20004ea0
 80087e4:	20004e98 	.word	0x20004e98
 80087e8:	20004ea8 	.word	0x20004ea8
 80087ec:	20004ea4 	.word	0x20004ea4
 80087f0:	20004eb4 	.word	0x20004eb4

080087f4 <atol>:
 80087f4:	220a      	movs	r2, #10
 80087f6:	2100      	movs	r1, #0
 80087f8:	f000 baf2 	b.w	8008de0 <strtol>

080087fc <calloc>:
 80087fc:	4b02      	ldr	r3, [pc, #8]	; (8008808 <calloc+0xc>)
 80087fe:	460a      	mov	r2, r1
 8008800:	4601      	mov	r1, r0
 8008802:	6818      	ldr	r0, [r3, #0]
 8008804:	f000 b8fc 	b.w	8008a00 <_calloc_r>
 8008808:	20000040 	.word	0x20000040

0800880c <__errno>:
 800880c:	4b01      	ldr	r3, [pc, #4]	; (8008814 <__errno+0x8>)
 800880e:	6818      	ldr	r0, [r3, #0]
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20000040 	.word	0x20000040

08008818 <gmtime_r>:
 8008818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800881c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8008820:	460c      	mov	r4, r1
 8008822:	4a51      	ldr	r2, [pc, #324]	; (8008968 <gmtime_r+0x150>)
 8008824:	2300      	movs	r3, #0
 8008826:	4630      	mov	r0, r6
 8008828:	4639      	mov	r1, r7
 800882a:	f7f7 fd29 	bl	8000280 <__aeabi_ldivmod>
 800882e:	4639      	mov	r1, r7
 8008830:	4605      	mov	r5, r0
 8008832:	4a4d      	ldr	r2, [pc, #308]	; (8008968 <gmtime_r+0x150>)
 8008834:	4630      	mov	r0, r6
 8008836:	2300      	movs	r3, #0
 8008838:	f7f7 fd22 	bl	8000280 <__aeabi_ldivmod>
 800883c:	2a00      	cmp	r2, #0
 800883e:	bfbc      	itt	lt
 8008840:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8008844:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8008848:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800884c:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8008850:	fbb2 f3f1 	udiv	r3, r2, r1
 8008854:	fb01 2213 	mls	r2, r1, r3, r2
 8008858:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800885c:	bfac      	ite	ge
 800885e:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8008862:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8008866:	60a3      	str	r3, [r4, #8]
 8008868:	fbb2 f3f1 	udiv	r3, r2, r1
 800886c:	fb01 2213 	mls	r2, r1, r3, r2
 8008870:	6063      	str	r3, [r4, #4]
 8008872:	6022      	str	r2, [r4, #0]
 8008874:	1cc3      	adds	r3, r0, #3
 8008876:	2207      	movs	r2, #7
 8008878:	fb93 f2f2 	sdiv	r2, r3, r2
 800887c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8008880:	1a9b      	subs	r3, r3, r2
 8008882:	bf48      	it	mi
 8008884:	3307      	addmi	r3, #7
 8008886:	2800      	cmp	r0, #0
 8008888:	61a3      	str	r3, [r4, #24]
 800888a:	bfb8      	it	lt
 800888c:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8008890:	4936      	ldr	r1, [pc, #216]	; (800896c <gmtime_r+0x154>)
 8008892:	bfae      	itee	ge
 8008894:	fb90 f1f1 	sdivge	r1, r0, r1
 8008898:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 800889c:	fb93 f1f1 	sdivlt	r1, r3, r1
 80088a0:	4b33      	ldr	r3, [pc, #204]	; (8008970 <gmtime_r+0x158>)
 80088a2:	fb03 0001 	mla	r0, r3, r1, r0
 80088a6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80088aa:	fbb0 f2f2 	udiv	r2, r0, r2
 80088ae:	4402      	add	r2, r0
 80088b0:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80088b4:	fbb0 f3fc 	udiv	r3, r0, ip
 80088b8:	1ad2      	subs	r2, r2, r3
 80088ba:	f240 176d 	movw	r7, #365	; 0x16d
 80088be:	4b2d      	ldr	r3, [pc, #180]	; (8008974 <gmtime_r+0x15c>)
 80088c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80088c4:	2664      	movs	r6, #100	; 0x64
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	fbb3 f5f7 	udiv	r5, r3, r7
 80088cc:	fbb3 f3fc 	udiv	r3, r3, ip
 80088d0:	fbb5 f2f6 	udiv	r2, r5, r6
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	4403      	add	r3, r0
 80088d8:	fb07 3315 	mls	r3, r7, r5, r3
 80088dc:	2099      	movs	r0, #153	; 0x99
 80088de:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80088e2:	f10c 0c02 	add.w	ip, ip, #2
 80088e6:	f103 0e01 	add.w	lr, r3, #1
 80088ea:	fbbc f7f0 	udiv	r7, ip, r0
 80088ee:	4378      	muls	r0, r7
 80088f0:	3002      	adds	r0, #2
 80088f2:	f04f 0805 	mov.w	r8, #5
 80088f6:	fbb0 f0f8 	udiv	r0, r0, r8
 80088fa:	ebae 0000 	sub.w	r0, lr, r0
 80088fe:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8008902:	45f4      	cmp	ip, lr
 8008904:	bf94      	ite	ls
 8008906:	f04f 0c02 	movls.w	ip, #2
 800890a:	f06f 0c09 	mvnhi.w	ip, #9
 800890e:	4467      	add	r7, ip
 8008910:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8008914:	fb0c 5101 	mla	r1, ip, r1, r5
 8008918:	2f01      	cmp	r7, #1
 800891a:	bf98      	it	ls
 800891c:	3101      	addls	r1, #1
 800891e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8008922:	d30c      	bcc.n	800893e <gmtime_r+0x126>
 8008924:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008928:	61e3      	str	r3, [r4, #28]
 800892a:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 800892e:	2300      	movs	r3, #0
 8008930:	60e0      	str	r0, [r4, #12]
 8008932:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8008936:	6223      	str	r3, [r4, #32]
 8008938:	4620      	mov	r0, r4
 800893a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800893e:	f015 0f03 	tst.w	r5, #3
 8008942:	d102      	bne.n	800894a <gmtime_r+0x132>
 8008944:	fb06 5212 	mls	r2, r6, r2, r5
 8008948:	b95a      	cbnz	r2, 8008962 <gmtime_r+0x14a>
 800894a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800894e:	fbb5 f2f6 	udiv	r2, r5, r6
 8008952:	fb06 5212 	mls	r2, r6, r2, r5
 8008956:	fab2 f282 	clz	r2, r2
 800895a:	0952      	lsrs	r2, r2, #5
 800895c:	333b      	adds	r3, #59	; 0x3b
 800895e:	4413      	add	r3, r2
 8008960:	e7e2      	b.n	8008928 <gmtime_r+0x110>
 8008962:	2201      	movs	r2, #1
 8008964:	e7fa      	b.n	800895c <gmtime_r+0x144>
 8008966:	bf00      	nop
 8008968:	00015180 	.word	0x00015180
 800896c:	00023ab1 	.word	0x00023ab1
 8008970:	fffdc54f 	.word	0xfffdc54f
 8008974:	00023ab0 	.word	0x00023ab0

08008978 <__libc_init_array>:
 8008978:	b570      	push	{r4, r5, r6, lr}
 800897a:	4d0d      	ldr	r5, [pc, #52]	; (80089b0 <__libc_init_array+0x38>)
 800897c:	4c0d      	ldr	r4, [pc, #52]	; (80089b4 <__libc_init_array+0x3c>)
 800897e:	1b64      	subs	r4, r4, r5
 8008980:	10a4      	asrs	r4, r4, #2
 8008982:	2600      	movs	r6, #0
 8008984:	42a6      	cmp	r6, r4
 8008986:	d109      	bne.n	800899c <__libc_init_array+0x24>
 8008988:	4d0b      	ldr	r5, [pc, #44]	; (80089b8 <__libc_init_array+0x40>)
 800898a:	4c0c      	ldr	r4, [pc, #48]	; (80089bc <__libc_init_array+0x44>)
 800898c:	f000 fdb0 	bl	80094f0 <_init>
 8008990:	1b64      	subs	r4, r4, r5
 8008992:	10a4      	asrs	r4, r4, #2
 8008994:	2600      	movs	r6, #0
 8008996:	42a6      	cmp	r6, r4
 8008998:	d105      	bne.n	80089a6 <__libc_init_array+0x2e>
 800899a:	bd70      	pop	{r4, r5, r6, pc}
 800899c:	f855 3b04 	ldr.w	r3, [r5], #4
 80089a0:	4798      	blx	r3
 80089a2:	3601      	adds	r6, #1
 80089a4:	e7ee      	b.n	8008984 <__libc_init_array+0xc>
 80089a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089aa:	4798      	blx	r3
 80089ac:	3601      	adds	r6, #1
 80089ae:	e7f2      	b.n	8008996 <__libc_init_array+0x1e>
 80089b0:	08009804 	.word	0x08009804
 80089b4:	08009804 	.word	0x08009804
 80089b8:	08009804 	.word	0x08009804
 80089bc:	08009808 	.word	0x08009808

080089c0 <__retarget_lock_acquire_recursive>:
 80089c0:	4770      	bx	lr

080089c2 <__retarget_lock_release_recursive>:
 80089c2:	4770      	bx	lr

080089c4 <free>:
 80089c4:	4b02      	ldr	r3, [pc, #8]	; (80089d0 <free+0xc>)
 80089c6:	4601      	mov	r1, r0
 80089c8:	6818      	ldr	r0, [r3, #0]
 80089ca:	f000 b829 	b.w	8008a20 <_free_r>
 80089ce:	bf00      	nop
 80089d0:	20000040 	.word	0x20000040

080089d4 <memcpy>:
 80089d4:	440a      	add	r2, r1
 80089d6:	4291      	cmp	r1, r2
 80089d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80089dc:	d100      	bne.n	80089e0 <memcpy+0xc>
 80089de:	4770      	bx	lr
 80089e0:	b510      	push	{r4, lr}
 80089e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089ea:	4291      	cmp	r1, r2
 80089ec:	d1f9      	bne.n	80089e2 <memcpy+0xe>
 80089ee:	bd10      	pop	{r4, pc}

080089f0 <memset>:
 80089f0:	4402      	add	r2, r0
 80089f2:	4603      	mov	r3, r0
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d100      	bne.n	80089fa <memset+0xa>
 80089f8:	4770      	bx	lr
 80089fa:	f803 1b01 	strb.w	r1, [r3], #1
 80089fe:	e7f9      	b.n	80089f4 <memset+0x4>

08008a00 <_calloc_r>:
 8008a00:	b513      	push	{r0, r1, r4, lr}
 8008a02:	434a      	muls	r2, r1
 8008a04:	4611      	mov	r1, r2
 8008a06:	9201      	str	r2, [sp, #4]
 8008a08:	f000 f85a 	bl	8008ac0 <_malloc_r>
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	b118      	cbz	r0, 8008a18 <_calloc_r+0x18>
 8008a10:	9a01      	ldr	r2, [sp, #4]
 8008a12:	2100      	movs	r1, #0
 8008a14:	f7ff ffec 	bl	80089f0 <memset>
 8008a18:	4620      	mov	r0, r4
 8008a1a:	b002      	add	sp, #8
 8008a1c:	bd10      	pop	{r4, pc}
	...

08008a20 <_free_r>:
 8008a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a22:	2900      	cmp	r1, #0
 8008a24:	d048      	beq.n	8008ab8 <_free_r+0x98>
 8008a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a2a:	9001      	str	r0, [sp, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a32:	bfb8      	it	lt
 8008a34:	18e4      	addlt	r4, r4, r3
 8008a36:	f000 fa17 	bl	8008e68 <__malloc_lock>
 8008a3a:	4a20      	ldr	r2, [pc, #128]	; (8008abc <_free_r+0x9c>)
 8008a3c:	9801      	ldr	r0, [sp, #4]
 8008a3e:	6813      	ldr	r3, [r2, #0]
 8008a40:	4615      	mov	r5, r2
 8008a42:	b933      	cbnz	r3, 8008a52 <_free_r+0x32>
 8008a44:	6063      	str	r3, [r4, #4]
 8008a46:	6014      	str	r4, [r2, #0]
 8008a48:	b003      	add	sp, #12
 8008a4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a4e:	f000 ba11 	b.w	8008e74 <__malloc_unlock>
 8008a52:	42a3      	cmp	r3, r4
 8008a54:	d90b      	bls.n	8008a6e <_free_r+0x4e>
 8008a56:	6821      	ldr	r1, [r4, #0]
 8008a58:	1862      	adds	r2, r4, r1
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	bf04      	itt	eq
 8008a5e:	681a      	ldreq	r2, [r3, #0]
 8008a60:	685b      	ldreq	r3, [r3, #4]
 8008a62:	6063      	str	r3, [r4, #4]
 8008a64:	bf04      	itt	eq
 8008a66:	1852      	addeq	r2, r2, r1
 8008a68:	6022      	streq	r2, [r4, #0]
 8008a6a:	602c      	str	r4, [r5, #0]
 8008a6c:	e7ec      	b.n	8008a48 <_free_r+0x28>
 8008a6e:	461a      	mov	r2, r3
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	b10b      	cbz	r3, 8008a78 <_free_r+0x58>
 8008a74:	42a3      	cmp	r3, r4
 8008a76:	d9fa      	bls.n	8008a6e <_free_r+0x4e>
 8008a78:	6811      	ldr	r1, [r2, #0]
 8008a7a:	1855      	adds	r5, r2, r1
 8008a7c:	42a5      	cmp	r5, r4
 8008a7e:	d10b      	bne.n	8008a98 <_free_r+0x78>
 8008a80:	6824      	ldr	r4, [r4, #0]
 8008a82:	4421      	add	r1, r4
 8008a84:	1854      	adds	r4, r2, r1
 8008a86:	42a3      	cmp	r3, r4
 8008a88:	6011      	str	r1, [r2, #0]
 8008a8a:	d1dd      	bne.n	8008a48 <_free_r+0x28>
 8008a8c:	681c      	ldr	r4, [r3, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	6053      	str	r3, [r2, #4]
 8008a92:	4421      	add	r1, r4
 8008a94:	6011      	str	r1, [r2, #0]
 8008a96:	e7d7      	b.n	8008a48 <_free_r+0x28>
 8008a98:	d902      	bls.n	8008aa0 <_free_r+0x80>
 8008a9a:	230c      	movs	r3, #12
 8008a9c:	6003      	str	r3, [r0, #0]
 8008a9e:	e7d3      	b.n	8008a48 <_free_r+0x28>
 8008aa0:	6825      	ldr	r5, [r4, #0]
 8008aa2:	1961      	adds	r1, r4, r5
 8008aa4:	428b      	cmp	r3, r1
 8008aa6:	bf04      	itt	eq
 8008aa8:	6819      	ldreq	r1, [r3, #0]
 8008aaa:	685b      	ldreq	r3, [r3, #4]
 8008aac:	6063      	str	r3, [r4, #4]
 8008aae:	bf04      	itt	eq
 8008ab0:	1949      	addeq	r1, r1, r5
 8008ab2:	6021      	streq	r1, [r4, #0]
 8008ab4:	6054      	str	r4, [r2, #4]
 8008ab6:	e7c7      	b.n	8008a48 <_free_r+0x28>
 8008ab8:	b003      	add	sp, #12
 8008aba:	bd30      	pop	{r4, r5, pc}
 8008abc:	20004eb8 	.word	0x20004eb8

08008ac0 <_malloc_r>:
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac2:	1ccd      	adds	r5, r1, #3
 8008ac4:	f025 0503 	bic.w	r5, r5, #3
 8008ac8:	3508      	adds	r5, #8
 8008aca:	2d0c      	cmp	r5, #12
 8008acc:	bf38      	it	cc
 8008ace:	250c      	movcc	r5, #12
 8008ad0:	2d00      	cmp	r5, #0
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	db01      	blt.n	8008ada <_malloc_r+0x1a>
 8008ad6:	42a9      	cmp	r1, r5
 8008ad8:	d903      	bls.n	8008ae2 <_malloc_r+0x22>
 8008ada:	230c      	movs	r3, #12
 8008adc:	6033      	str	r3, [r6, #0]
 8008ade:	2000      	movs	r0, #0
 8008ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ae2:	f000 f9c1 	bl	8008e68 <__malloc_lock>
 8008ae6:	4921      	ldr	r1, [pc, #132]	; (8008b6c <_malloc_r+0xac>)
 8008ae8:	680a      	ldr	r2, [r1, #0]
 8008aea:	4614      	mov	r4, r2
 8008aec:	b99c      	cbnz	r4, 8008b16 <_malloc_r+0x56>
 8008aee:	4f20      	ldr	r7, [pc, #128]	; (8008b70 <_malloc_r+0xb0>)
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	b923      	cbnz	r3, 8008afe <_malloc_r+0x3e>
 8008af4:	4621      	mov	r1, r4
 8008af6:	4630      	mov	r0, r6
 8008af8:	f000 f8a6 	bl	8008c48 <_sbrk_r>
 8008afc:	6038      	str	r0, [r7, #0]
 8008afe:	4629      	mov	r1, r5
 8008b00:	4630      	mov	r0, r6
 8008b02:	f000 f8a1 	bl	8008c48 <_sbrk_r>
 8008b06:	1c43      	adds	r3, r0, #1
 8008b08:	d123      	bne.n	8008b52 <_malloc_r+0x92>
 8008b0a:	230c      	movs	r3, #12
 8008b0c:	6033      	str	r3, [r6, #0]
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f000 f9b0 	bl	8008e74 <__malloc_unlock>
 8008b14:	e7e3      	b.n	8008ade <_malloc_r+0x1e>
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	1b5b      	subs	r3, r3, r5
 8008b1a:	d417      	bmi.n	8008b4c <_malloc_r+0x8c>
 8008b1c:	2b0b      	cmp	r3, #11
 8008b1e:	d903      	bls.n	8008b28 <_malloc_r+0x68>
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	441c      	add	r4, r3
 8008b24:	6025      	str	r5, [r4, #0]
 8008b26:	e004      	b.n	8008b32 <_malloc_r+0x72>
 8008b28:	6863      	ldr	r3, [r4, #4]
 8008b2a:	42a2      	cmp	r2, r4
 8008b2c:	bf0c      	ite	eq
 8008b2e:	600b      	streq	r3, [r1, #0]
 8008b30:	6053      	strne	r3, [r2, #4]
 8008b32:	4630      	mov	r0, r6
 8008b34:	f000 f99e 	bl	8008e74 <__malloc_unlock>
 8008b38:	f104 000b 	add.w	r0, r4, #11
 8008b3c:	1d23      	adds	r3, r4, #4
 8008b3e:	f020 0007 	bic.w	r0, r0, #7
 8008b42:	1ac2      	subs	r2, r0, r3
 8008b44:	d0cc      	beq.n	8008ae0 <_malloc_r+0x20>
 8008b46:	1a1b      	subs	r3, r3, r0
 8008b48:	50a3      	str	r3, [r4, r2]
 8008b4a:	e7c9      	b.n	8008ae0 <_malloc_r+0x20>
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	6864      	ldr	r4, [r4, #4]
 8008b50:	e7cc      	b.n	8008aec <_malloc_r+0x2c>
 8008b52:	1cc4      	adds	r4, r0, #3
 8008b54:	f024 0403 	bic.w	r4, r4, #3
 8008b58:	42a0      	cmp	r0, r4
 8008b5a:	d0e3      	beq.n	8008b24 <_malloc_r+0x64>
 8008b5c:	1a21      	subs	r1, r4, r0
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f000 f872 	bl	8008c48 <_sbrk_r>
 8008b64:	3001      	adds	r0, #1
 8008b66:	d1dd      	bne.n	8008b24 <_malloc_r+0x64>
 8008b68:	e7cf      	b.n	8008b0a <_malloc_r+0x4a>
 8008b6a:	bf00      	nop
 8008b6c:	20004eb8 	.word	0x20004eb8
 8008b70:	20004ebc 	.word	0x20004ebc

08008b74 <cleanup_glue>:
 8008b74:	b538      	push	{r3, r4, r5, lr}
 8008b76:	460c      	mov	r4, r1
 8008b78:	6809      	ldr	r1, [r1, #0]
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	b109      	cbz	r1, 8008b82 <cleanup_glue+0xe>
 8008b7e:	f7ff fff9 	bl	8008b74 <cleanup_glue>
 8008b82:	4621      	mov	r1, r4
 8008b84:	4628      	mov	r0, r5
 8008b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b8a:	f7ff bf49 	b.w	8008a20 <_free_r>
	...

08008b90 <_reclaim_reent>:
 8008b90:	4b2c      	ldr	r3, [pc, #176]	; (8008c44 <_reclaim_reent+0xb4>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4283      	cmp	r3, r0
 8008b96:	b570      	push	{r4, r5, r6, lr}
 8008b98:	4604      	mov	r4, r0
 8008b9a:	d051      	beq.n	8008c40 <_reclaim_reent+0xb0>
 8008b9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b9e:	b143      	cbz	r3, 8008bb2 <_reclaim_reent+0x22>
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d14a      	bne.n	8008c3c <_reclaim_reent+0xac>
 8008ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ba8:	6819      	ldr	r1, [r3, #0]
 8008baa:	b111      	cbz	r1, 8008bb2 <_reclaim_reent+0x22>
 8008bac:	4620      	mov	r0, r4
 8008bae:	f7ff ff37 	bl	8008a20 <_free_r>
 8008bb2:	6961      	ldr	r1, [r4, #20]
 8008bb4:	b111      	cbz	r1, 8008bbc <_reclaim_reent+0x2c>
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f7ff ff32 	bl	8008a20 <_free_r>
 8008bbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008bbe:	b111      	cbz	r1, 8008bc6 <_reclaim_reent+0x36>
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f7ff ff2d 	bl	8008a20 <_free_r>
 8008bc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008bc8:	b111      	cbz	r1, 8008bd0 <_reclaim_reent+0x40>
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f7ff ff28 	bl	8008a20 <_free_r>
 8008bd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008bd2:	b111      	cbz	r1, 8008bda <_reclaim_reent+0x4a>
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f7ff ff23 	bl	8008a20 <_free_r>
 8008bda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008bdc:	b111      	cbz	r1, 8008be4 <_reclaim_reent+0x54>
 8008bde:	4620      	mov	r0, r4
 8008be0:	f7ff ff1e 	bl	8008a20 <_free_r>
 8008be4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008be6:	b111      	cbz	r1, 8008bee <_reclaim_reent+0x5e>
 8008be8:	4620      	mov	r0, r4
 8008bea:	f7ff ff19 	bl	8008a20 <_free_r>
 8008bee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008bf0:	b111      	cbz	r1, 8008bf8 <_reclaim_reent+0x68>
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f7ff ff14 	bl	8008a20 <_free_r>
 8008bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bfa:	b111      	cbz	r1, 8008c02 <_reclaim_reent+0x72>
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f7ff ff0f 	bl	8008a20 <_free_r>
 8008c02:	69a3      	ldr	r3, [r4, #24]
 8008c04:	b1e3      	cbz	r3, 8008c40 <_reclaim_reent+0xb0>
 8008c06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c08:	4620      	mov	r0, r4
 8008c0a:	4798      	blx	r3
 8008c0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008c0e:	b1b9      	cbz	r1, 8008c40 <_reclaim_reent+0xb0>
 8008c10:	4620      	mov	r0, r4
 8008c12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c16:	f7ff bfad 	b.w	8008b74 <cleanup_glue>
 8008c1a:	5949      	ldr	r1, [r1, r5]
 8008c1c:	b941      	cbnz	r1, 8008c30 <_reclaim_reent+0xa0>
 8008c1e:	3504      	adds	r5, #4
 8008c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c22:	2d80      	cmp	r5, #128	; 0x80
 8008c24:	68d9      	ldr	r1, [r3, #12]
 8008c26:	d1f8      	bne.n	8008c1a <_reclaim_reent+0x8a>
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f7ff fef9 	bl	8008a20 <_free_r>
 8008c2e:	e7ba      	b.n	8008ba6 <_reclaim_reent+0x16>
 8008c30:	680e      	ldr	r6, [r1, #0]
 8008c32:	4620      	mov	r0, r4
 8008c34:	f7ff fef4 	bl	8008a20 <_free_r>
 8008c38:	4631      	mov	r1, r6
 8008c3a:	e7ef      	b.n	8008c1c <_reclaim_reent+0x8c>
 8008c3c:	2500      	movs	r5, #0
 8008c3e:	e7ef      	b.n	8008c20 <_reclaim_reent+0x90>
 8008c40:	bd70      	pop	{r4, r5, r6, pc}
 8008c42:	bf00      	nop
 8008c44:	20000040 	.word	0x20000040

08008c48 <_sbrk_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4d06      	ldr	r5, [pc, #24]	; (8008c64 <_sbrk_r+0x1c>)
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4608      	mov	r0, r1
 8008c52:	602b      	str	r3, [r5, #0]
 8008c54:	f7f8 fde8 	bl	8001828 <_sbrk>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_sbrk_r+0x1a>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_sbrk_r+0x1a>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	20005168 	.word	0x20005168

08008c68 <siprintf>:
 8008c68:	b40e      	push	{r1, r2, r3}
 8008c6a:	b500      	push	{lr}
 8008c6c:	b09c      	sub	sp, #112	; 0x70
 8008c6e:	ab1d      	add	r3, sp, #116	; 0x74
 8008c70:	9002      	str	r0, [sp, #8]
 8008c72:	9006      	str	r0, [sp, #24]
 8008c74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c78:	4809      	ldr	r0, [pc, #36]	; (8008ca0 <siprintf+0x38>)
 8008c7a:	9107      	str	r1, [sp, #28]
 8008c7c:	9104      	str	r1, [sp, #16]
 8008c7e:	4909      	ldr	r1, [pc, #36]	; (8008ca4 <siprintf+0x3c>)
 8008c80:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c84:	9105      	str	r1, [sp, #20]
 8008c86:	6800      	ldr	r0, [r0, #0]
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	a902      	add	r1, sp, #8
 8008c8c:	f000 f954 	bl	8008f38 <_svfiprintf_r>
 8008c90:	9b02      	ldr	r3, [sp, #8]
 8008c92:	2200      	movs	r2, #0
 8008c94:	701a      	strb	r2, [r3, #0]
 8008c96:	b01c      	add	sp, #112	; 0x70
 8008c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c9c:	b003      	add	sp, #12
 8008c9e:	4770      	bx	lr
 8008ca0:	20000040 	.word	0x20000040
 8008ca4:	ffff0208 	.word	0xffff0208

08008ca8 <strstr>:
 8008ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008caa:	780c      	ldrb	r4, [r1, #0]
 8008cac:	b164      	cbz	r4, 8008cc8 <strstr+0x20>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	781a      	ldrb	r2, [r3, #0]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	1c5e      	adds	r6, r3, #1
 8008cb6:	b90a      	cbnz	r2, 8008cbc <strstr+0x14>
 8008cb8:	4610      	mov	r0, r2
 8008cba:	e005      	b.n	8008cc8 <strstr+0x20>
 8008cbc:	4294      	cmp	r4, r2
 8008cbe:	d108      	bne.n	8008cd2 <strstr+0x2a>
 8008cc0:	460d      	mov	r5, r1
 8008cc2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8008cc6:	b902      	cbnz	r2, 8008cca <strstr+0x22>
 8008cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cca:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008cce:	4297      	cmp	r7, r2
 8008cd0:	d0f7      	beq.n	8008cc2 <strstr+0x1a>
 8008cd2:	4633      	mov	r3, r6
 8008cd4:	e7ec      	b.n	8008cb0 <strstr+0x8>
	...

08008cd8 <_strtol_l.isra.0>:
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cde:	d001      	beq.n	8008ce4 <_strtol_l.isra.0+0xc>
 8008ce0:	2b24      	cmp	r3, #36	; 0x24
 8008ce2:	d906      	bls.n	8008cf2 <_strtol_l.isra.0+0x1a>
 8008ce4:	f7ff fd92 	bl	800880c <__errno>
 8008ce8:	2316      	movs	r3, #22
 8008cea:	6003      	str	r3, [r0, #0]
 8008cec:	2000      	movs	r0, #0
 8008cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf2:	4f3a      	ldr	r7, [pc, #232]	; (8008ddc <_strtol_l.isra.0+0x104>)
 8008cf4:	468e      	mov	lr, r1
 8008cf6:	4676      	mov	r6, lr
 8008cf8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008cfc:	5de5      	ldrb	r5, [r4, r7]
 8008cfe:	f015 0508 	ands.w	r5, r5, #8
 8008d02:	d1f8      	bne.n	8008cf6 <_strtol_l.isra.0+0x1e>
 8008d04:	2c2d      	cmp	r4, #45	; 0x2d
 8008d06:	d134      	bne.n	8008d72 <_strtol_l.isra.0+0x9a>
 8008d08:	f89e 4000 	ldrb.w	r4, [lr]
 8008d0c:	f04f 0801 	mov.w	r8, #1
 8008d10:	f106 0e02 	add.w	lr, r6, #2
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d05c      	beq.n	8008dd2 <_strtol_l.isra.0+0xfa>
 8008d18:	2b10      	cmp	r3, #16
 8008d1a:	d10c      	bne.n	8008d36 <_strtol_l.isra.0+0x5e>
 8008d1c:	2c30      	cmp	r4, #48	; 0x30
 8008d1e:	d10a      	bne.n	8008d36 <_strtol_l.isra.0+0x5e>
 8008d20:	f89e 4000 	ldrb.w	r4, [lr]
 8008d24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008d28:	2c58      	cmp	r4, #88	; 0x58
 8008d2a:	d14d      	bne.n	8008dc8 <_strtol_l.isra.0+0xf0>
 8008d2c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008d30:	2310      	movs	r3, #16
 8008d32:	f10e 0e02 	add.w	lr, lr, #2
 8008d36:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008d3a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008d3e:	2600      	movs	r6, #0
 8008d40:	fbbc f9f3 	udiv	r9, ip, r3
 8008d44:	4635      	mov	r5, r6
 8008d46:	fb03 ca19 	mls	sl, r3, r9, ip
 8008d4a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008d4e:	2f09      	cmp	r7, #9
 8008d50:	d818      	bhi.n	8008d84 <_strtol_l.isra.0+0xac>
 8008d52:	463c      	mov	r4, r7
 8008d54:	42a3      	cmp	r3, r4
 8008d56:	dd24      	ble.n	8008da2 <_strtol_l.isra.0+0xca>
 8008d58:	2e00      	cmp	r6, #0
 8008d5a:	db1f      	blt.n	8008d9c <_strtol_l.isra.0+0xc4>
 8008d5c:	45a9      	cmp	r9, r5
 8008d5e:	d31d      	bcc.n	8008d9c <_strtol_l.isra.0+0xc4>
 8008d60:	d101      	bne.n	8008d66 <_strtol_l.isra.0+0x8e>
 8008d62:	45a2      	cmp	sl, r4
 8008d64:	db1a      	blt.n	8008d9c <_strtol_l.isra.0+0xc4>
 8008d66:	fb05 4503 	mla	r5, r5, r3, r4
 8008d6a:	2601      	movs	r6, #1
 8008d6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008d70:	e7eb      	b.n	8008d4a <_strtol_l.isra.0+0x72>
 8008d72:	2c2b      	cmp	r4, #43	; 0x2b
 8008d74:	bf08      	it	eq
 8008d76:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008d7a:	46a8      	mov	r8, r5
 8008d7c:	bf08      	it	eq
 8008d7e:	f106 0e02 	addeq.w	lr, r6, #2
 8008d82:	e7c7      	b.n	8008d14 <_strtol_l.isra.0+0x3c>
 8008d84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008d88:	2f19      	cmp	r7, #25
 8008d8a:	d801      	bhi.n	8008d90 <_strtol_l.isra.0+0xb8>
 8008d8c:	3c37      	subs	r4, #55	; 0x37
 8008d8e:	e7e1      	b.n	8008d54 <_strtol_l.isra.0+0x7c>
 8008d90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008d94:	2f19      	cmp	r7, #25
 8008d96:	d804      	bhi.n	8008da2 <_strtol_l.isra.0+0xca>
 8008d98:	3c57      	subs	r4, #87	; 0x57
 8008d9a:	e7db      	b.n	8008d54 <_strtol_l.isra.0+0x7c>
 8008d9c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008da0:	e7e4      	b.n	8008d6c <_strtol_l.isra.0+0x94>
 8008da2:	2e00      	cmp	r6, #0
 8008da4:	da05      	bge.n	8008db2 <_strtol_l.isra.0+0xda>
 8008da6:	2322      	movs	r3, #34	; 0x22
 8008da8:	6003      	str	r3, [r0, #0]
 8008daa:	4665      	mov	r5, ip
 8008dac:	b942      	cbnz	r2, 8008dc0 <_strtol_l.isra.0+0xe8>
 8008dae:	4628      	mov	r0, r5
 8008db0:	e79d      	b.n	8008cee <_strtol_l.isra.0+0x16>
 8008db2:	f1b8 0f00 	cmp.w	r8, #0
 8008db6:	d000      	beq.n	8008dba <_strtol_l.isra.0+0xe2>
 8008db8:	426d      	negs	r5, r5
 8008dba:	2a00      	cmp	r2, #0
 8008dbc:	d0f7      	beq.n	8008dae <_strtol_l.isra.0+0xd6>
 8008dbe:	b10e      	cbz	r6, 8008dc4 <_strtol_l.isra.0+0xec>
 8008dc0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008dc4:	6011      	str	r1, [r2, #0]
 8008dc6:	e7f2      	b.n	8008dae <_strtol_l.isra.0+0xd6>
 8008dc8:	2430      	movs	r4, #48	; 0x30
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1b3      	bne.n	8008d36 <_strtol_l.isra.0+0x5e>
 8008dce:	2308      	movs	r3, #8
 8008dd0:	e7b1      	b.n	8008d36 <_strtol_l.isra.0+0x5e>
 8008dd2:	2c30      	cmp	r4, #48	; 0x30
 8008dd4:	d0a4      	beq.n	8008d20 <_strtol_l.isra.0+0x48>
 8008dd6:	230a      	movs	r3, #10
 8008dd8:	e7ad      	b.n	8008d36 <_strtol_l.isra.0+0x5e>
 8008dda:	bf00      	nop
 8008ddc:	080096c9 	.word	0x080096c9

08008de0 <strtol>:
 8008de0:	4613      	mov	r3, r2
 8008de2:	460a      	mov	r2, r1
 8008de4:	4601      	mov	r1, r0
 8008de6:	4802      	ldr	r0, [pc, #8]	; (8008df0 <strtol+0x10>)
 8008de8:	6800      	ldr	r0, [r0, #0]
 8008dea:	f7ff bf75 	b.w	8008cd8 <_strtol_l.isra.0>
 8008dee:	bf00      	nop
 8008df0:	20000040 	.word	0x20000040

08008df4 <_vsniprintf_r>:
 8008df4:	b530      	push	{r4, r5, lr}
 8008df6:	1e14      	subs	r4, r2, #0
 8008df8:	4605      	mov	r5, r0
 8008dfa:	b09b      	sub	sp, #108	; 0x6c
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	da05      	bge.n	8008e0c <_vsniprintf_r+0x18>
 8008e00:	238b      	movs	r3, #139	; 0x8b
 8008e02:	602b      	str	r3, [r5, #0]
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e08:	b01b      	add	sp, #108	; 0x6c
 8008e0a:	bd30      	pop	{r4, r5, pc}
 8008e0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008e10:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008e14:	bf14      	ite	ne
 8008e16:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008e1a:	4623      	moveq	r3, r4
 8008e1c:	9302      	str	r3, [sp, #8]
 8008e1e:	9305      	str	r3, [sp, #20]
 8008e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e24:	9100      	str	r1, [sp, #0]
 8008e26:	9104      	str	r1, [sp, #16]
 8008e28:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008e30:	4669      	mov	r1, sp
 8008e32:	4628      	mov	r0, r5
 8008e34:	f000 f880 	bl	8008f38 <_svfiprintf_r>
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	bfbc      	itt	lt
 8008e3c:	238b      	movlt	r3, #139	; 0x8b
 8008e3e:	602b      	strlt	r3, [r5, #0]
 8008e40:	2c00      	cmp	r4, #0
 8008e42:	d0e1      	beq.n	8008e08 <_vsniprintf_r+0x14>
 8008e44:	9b00      	ldr	r3, [sp, #0]
 8008e46:	2200      	movs	r2, #0
 8008e48:	701a      	strb	r2, [r3, #0]
 8008e4a:	e7dd      	b.n	8008e08 <_vsniprintf_r+0x14>

08008e4c <vsniprintf>:
 8008e4c:	b507      	push	{r0, r1, r2, lr}
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	4613      	mov	r3, r2
 8008e52:	460a      	mov	r2, r1
 8008e54:	4601      	mov	r1, r0
 8008e56:	4803      	ldr	r0, [pc, #12]	; (8008e64 <vsniprintf+0x18>)
 8008e58:	6800      	ldr	r0, [r0, #0]
 8008e5a:	f7ff ffcb 	bl	8008df4 <_vsniprintf_r>
 8008e5e:	b003      	add	sp, #12
 8008e60:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e64:	20000040 	.word	0x20000040

08008e68 <__malloc_lock>:
 8008e68:	4801      	ldr	r0, [pc, #4]	; (8008e70 <__malloc_lock+0x8>)
 8008e6a:	f7ff bda9 	b.w	80089c0 <__retarget_lock_acquire_recursive>
 8008e6e:	bf00      	nop
 8008e70:	20005160 	.word	0x20005160

08008e74 <__malloc_unlock>:
 8008e74:	4801      	ldr	r0, [pc, #4]	; (8008e7c <__malloc_unlock+0x8>)
 8008e76:	f7ff bda4 	b.w	80089c2 <__retarget_lock_release_recursive>
 8008e7a:	bf00      	nop
 8008e7c:	20005160 	.word	0x20005160

08008e80 <__ssputs_r>:
 8008e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e84:	688e      	ldr	r6, [r1, #8]
 8008e86:	429e      	cmp	r6, r3
 8008e88:	4682      	mov	sl, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	4690      	mov	r8, r2
 8008e8e:	461f      	mov	r7, r3
 8008e90:	d838      	bhi.n	8008f04 <__ssputs_r+0x84>
 8008e92:	898a      	ldrh	r2, [r1, #12]
 8008e94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e98:	d032      	beq.n	8008f00 <__ssputs_r+0x80>
 8008e9a:	6825      	ldr	r5, [r4, #0]
 8008e9c:	6909      	ldr	r1, [r1, #16]
 8008e9e:	eba5 0901 	sub.w	r9, r5, r1
 8008ea2:	6965      	ldr	r5, [r4, #20]
 8008ea4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ea8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008eac:	3301      	adds	r3, #1
 8008eae:	444b      	add	r3, r9
 8008eb0:	106d      	asrs	r5, r5, #1
 8008eb2:	429d      	cmp	r5, r3
 8008eb4:	bf38      	it	cc
 8008eb6:	461d      	movcc	r5, r3
 8008eb8:	0553      	lsls	r3, r2, #21
 8008eba:	d531      	bpl.n	8008f20 <__ssputs_r+0xa0>
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	f7ff fdff 	bl	8008ac0 <_malloc_r>
 8008ec2:	4606      	mov	r6, r0
 8008ec4:	b950      	cbnz	r0, 8008edc <__ssputs_r+0x5c>
 8008ec6:	230c      	movs	r3, #12
 8008ec8:	f8ca 3000 	str.w	r3, [sl]
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008edc:	6921      	ldr	r1, [r4, #16]
 8008ede:	464a      	mov	r2, r9
 8008ee0:	f7ff fd78 	bl	80089d4 <memcpy>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eee:	81a3      	strh	r3, [r4, #12]
 8008ef0:	6126      	str	r6, [r4, #16]
 8008ef2:	6165      	str	r5, [r4, #20]
 8008ef4:	444e      	add	r6, r9
 8008ef6:	eba5 0509 	sub.w	r5, r5, r9
 8008efa:	6026      	str	r6, [r4, #0]
 8008efc:	60a5      	str	r5, [r4, #8]
 8008efe:	463e      	mov	r6, r7
 8008f00:	42be      	cmp	r6, r7
 8008f02:	d900      	bls.n	8008f06 <__ssputs_r+0x86>
 8008f04:	463e      	mov	r6, r7
 8008f06:	4632      	mov	r2, r6
 8008f08:	6820      	ldr	r0, [r4, #0]
 8008f0a:	4641      	mov	r1, r8
 8008f0c:	f000 faa8 	bl	8009460 <memmove>
 8008f10:	68a3      	ldr	r3, [r4, #8]
 8008f12:	6822      	ldr	r2, [r4, #0]
 8008f14:	1b9b      	subs	r3, r3, r6
 8008f16:	4432      	add	r2, r6
 8008f18:	60a3      	str	r3, [r4, #8]
 8008f1a:	6022      	str	r2, [r4, #0]
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	e7db      	b.n	8008ed8 <__ssputs_r+0x58>
 8008f20:	462a      	mov	r2, r5
 8008f22:	f000 fab7 	bl	8009494 <_realloc_r>
 8008f26:	4606      	mov	r6, r0
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d1e1      	bne.n	8008ef0 <__ssputs_r+0x70>
 8008f2c:	6921      	ldr	r1, [r4, #16]
 8008f2e:	4650      	mov	r0, sl
 8008f30:	f7ff fd76 	bl	8008a20 <_free_r>
 8008f34:	e7c7      	b.n	8008ec6 <__ssputs_r+0x46>
	...

08008f38 <_svfiprintf_r>:
 8008f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3c:	4698      	mov	r8, r3
 8008f3e:	898b      	ldrh	r3, [r1, #12]
 8008f40:	061b      	lsls	r3, r3, #24
 8008f42:	b09d      	sub	sp, #116	; 0x74
 8008f44:	4607      	mov	r7, r0
 8008f46:	460d      	mov	r5, r1
 8008f48:	4614      	mov	r4, r2
 8008f4a:	d50e      	bpl.n	8008f6a <_svfiprintf_r+0x32>
 8008f4c:	690b      	ldr	r3, [r1, #16]
 8008f4e:	b963      	cbnz	r3, 8008f6a <_svfiprintf_r+0x32>
 8008f50:	2140      	movs	r1, #64	; 0x40
 8008f52:	f7ff fdb5 	bl	8008ac0 <_malloc_r>
 8008f56:	6028      	str	r0, [r5, #0]
 8008f58:	6128      	str	r0, [r5, #16]
 8008f5a:	b920      	cbnz	r0, 8008f66 <_svfiprintf_r+0x2e>
 8008f5c:	230c      	movs	r3, #12
 8008f5e:	603b      	str	r3, [r7, #0]
 8008f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f64:	e0d1      	b.n	800910a <_svfiprintf_r+0x1d2>
 8008f66:	2340      	movs	r3, #64	; 0x40
 8008f68:	616b      	str	r3, [r5, #20]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f6e:	2320      	movs	r3, #32
 8008f70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f74:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f78:	2330      	movs	r3, #48	; 0x30
 8008f7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009124 <_svfiprintf_r+0x1ec>
 8008f7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f82:	f04f 0901 	mov.w	r9, #1
 8008f86:	4623      	mov	r3, r4
 8008f88:	469a      	mov	sl, r3
 8008f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f8e:	b10a      	cbz	r2, 8008f94 <_svfiprintf_r+0x5c>
 8008f90:	2a25      	cmp	r2, #37	; 0x25
 8008f92:	d1f9      	bne.n	8008f88 <_svfiprintf_r+0x50>
 8008f94:	ebba 0b04 	subs.w	fp, sl, r4
 8008f98:	d00b      	beq.n	8008fb2 <_svfiprintf_r+0x7a>
 8008f9a:	465b      	mov	r3, fp
 8008f9c:	4622      	mov	r2, r4
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	f7ff ff6d 	bl	8008e80 <__ssputs_r>
 8008fa6:	3001      	adds	r0, #1
 8008fa8:	f000 80aa 	beq.w	8009100 <_svfiprintf_r+0x1c8>
 8008fac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fae:	445a      	add	r2, fp
 8008fb0:	9209      	str	r2, [sp, #36]	; 0x24
 8008fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f000 80a2 	beq.w	8009100 <_svfiprintf_r+0x1c8>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fc6:	f10a 0a01 	add.w	sl, sl, #1
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	9307      	str	r3, [sp, #28]
 8008fce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fd2:	931a      	str	r3, [sp, #104]	; 0x68
 8008fd4:	4654      	mov	r4, sl
 8008fd6:	2205      	movs	r2, #5
 8008fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fdc:	4851      	ldr	r0, [pc, #324]	; (8009124 <_svfiprintf_r+0x1ec>)
 8008fde:	f7f7 f8ff 	bl	80001e0 <memchr>
 8008fe2:	9a04      	ldr	r2, [sp, #16]
 8008fe4:	b9d8      	cbnz	r0, 800901e <_svfiprintf_r+0xe6>
 8008fe6:	06d0      	lsls	r0, r2, #27
 8008fe8:	bf44      	itt	mi
 8008fea:	2320      	movmi	r3, #32
 8008fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ff0:	0711      	lsls	r1, r2, #28
 8008ff2:	bf44      	itt	mi
 8008ff4:	232b      	movmi	r3, #43	; 0x2b
 8008ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8008ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8009000:	d015      	beq.n	800902e <_svfiprintf_r+0xf6>
 8009002:	9a07      	ldr	r2, [sp, #28]
 8009004:	4654      	mov	r4, sl
 8009006:	2000      	movs	r0, #0
 8009008:	f04f 0c0a 	mov.w	ip, #10
 800900c:	4621      	mov	r1, r4
 800900e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009012:	3b30      	subs	r3, #48	; 0x30
 8009014:	2b09      	cmp	r3, #9
 8009016:	d94e      	bls.n	80090b6 <_svfiprintf_r+0x17e>
 8009018:	b1b0      	cbz	r0, 8009048 <_svfiprintf_r+0x110>
 800901a:	9207      	str	r2, [sp, #28]
 800901c:	e014      	b.n	8009048 <_svfiprintf_r+0x110>
 800901e:	eba0 0308 	sub.w	r3, r0, r8
 8009022:	fa09 f303 	lsl.w	r3, r9, r3
 8009026:	4313      	orrs	r3, r2
 8009028:	9304      	str	r3, [sp, #16]
 800902a:	46a2      	mov	sl, r4
 800902c:	e7d2      	b.n	8008fd4 <_svfiprintf_r+0x9c>
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	1d19      	adds	r1, r3, #4
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	9103      	str	r1, [sp, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	bfbb      	ittet	lt
 800903a:	425b      	neglt	r3, r3
 800903c:	f042 0202 	orrlt.w	r2, r2, #2
 8009040:	9307      	strge	r3, [sp, #28]
 8009042:	9307      	strlt	r3, [sp, #28]
 8009044:	bfb8      	it	lt
 8009046:	9204      	strlt	r2, [sp, #16]
 8009048:	7823      	ldrb	r3, [r4, #0]
 800904a:	2b2e      	cmp	r3, #46	; 0x2e
 800904c:	d10c      	bne.n	8009068 <_svfiprintf_r+0x130>
 800904e:	7863      	ldrb	r3, [r4, #1]
 8009050:	2b2a      	cmp	r3, #42	; 0x2a
 8009052:	d135      	bne.n	80090c0 <_svfiprintf_r+0x188>
 8009054:	9b03      	ldr	r3, [sp, #12]
 8009056:	1d1a      	adds	r2, r3, #4
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	9203      	str	r2, [sp, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	bfb8      	it	lt
 8009060:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009064:	3402      	adds	r4, #2
 8009066:	9305      	str	r3, [sp, #20]
 8009068:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009134 <_svfiprintf_r+0x1fc>
 800906c:	7821      	ldrb	r1, [r4, #0]
 800906e:	2203      	movs	r2, #3
 8009070:	4650      	mov	r0, sl
 8009072:	f7f7 f8b5 	bl	80001e0 <memchr>
 8009076:	b140      	cbz	r0, 800908a <_svfiprintf_r+0x152>
 8009078:	2340      	movs	r3, #64	; 0x40
 800907a:	eba0 000a 	sub.w	r0, r0, sl
 800907e:	fa03 f000 	lsl.w	r0, r3, r0
 8009082:	9b04      	ldr	r3, [sp, #16]
 8009084:	4303      	orrs	r3, r0
 8009086:	3401      	adds	r4, #1
 8009088:	9304      	str	r3, [sp, #16]
 800908a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800908e:	4826      	ldr	r0, [pc, #152]	; (8009128 <_svfiprintf_r+0x1f0>)
 8009090:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009094:	2206      	movs	r2, #6
 8009096:	f7f7 f8a3 	bl	80001e0 <memchr>
 800909a:	2800      	cmp	r0, #0
 800909c:	d038      	beq.n	8009110 <_svfiprintf_r+0x1d8>
 800909e:	4b23      	ldr	r3, [pc, #140]	; (800912c <_svfiprintf_r+0x1f4>)
 80090a0:	bb1b      	cbnz	r3, 80090ea <_svfiprintf_r+0x1b2>
 80090a2:	9b03      	ldr	r3, [sp, #12]
 80090a4:	3307      	adds	r3, #7
 80090a6:	f023 0307 	bic.w	r3, r3, #7
 80090aa:	3308      	adds	r3, #8
 80090ac:	9303      	str	r3, [sp, #12]
 80090ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b0:	4433      	add	r3, r6
 80090b2:	9309      	str	r3, [sp, #36]	; 0x24
 80090b4:	e767      	b.n	8008f86 <_svfiprintf_r+0x4e>
 80090b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80090ba:	460c      	mov	r4, r1
 80090bc:	2001      	movs	r0, #1
 80090be:	e7a5      	b.n	800900c <_svfiprintf_r+0xd4>
 80090c0:	2300      	movs	r3, #0
 80090c2:	3401      	adds	r4, #1
 80090c4:	9305      	str	r3, [sp, #20]
 80090c6:	4619      	mov	r1, r3
 80090c8:	f04f 0c0a 	mov.w	ip, #10
 80090cc:	4620      	mov	r0, r4
 80090ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090d2:	3a30      	subs	r2, #48	; 0x30
 80090d4:	2a09      	cmp	r2, #9
 80090d6:	d903      	bls.n	80090e0 <_svfiprintf_r+0x1a8>
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d0c5      	beq.n	8009068 <_svfiprintf_r+0x130>
 80090dc:	9105      	str	r1, [sp, #20]
 80090de:	e7c3      	b.n	8009068 <_svfiprintf_r+0x130>
 80090e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80090e4:	4604      	mov	r4, r0
 80090e6:	2301      	movs	r3, #1
 80090e8:	e7f0      	b.n	80090cc <_svfiprintf_r+0x194>
 80090ea:	ab03      	add	r3, sp, #12
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	462a      	mov	r2, r5
 80090f0:	4b0f      	ldr	r3, [pc, #60]	; (8009130 <_svfiprintf_r+0x1f8>)
 80090f2:	a904      	add	r1, sp, #16
 80090f4:	4638      	mov	r0, r7
 80090f6:	f3af 8000 	nop.w
 80090fa:	1c42      	adds	r2, r0, #1
 80090fc:	4606      	mov	r6, r0
 80090fe:	d1d6      	bne.n	80090ae <_svfiprintf_r+0x176>
 8009100:	89ab      	ldrh	r3, [r5, #12]
 8009102:	065b      	lsls	r3, r3, #25
 8009104:	f53f af2c 	bmi.w	8008f60 <_svfiprintf_r+0x28>
 8009108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800910a:	b01d      	add	sp, #116	; 0x74
 800910c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009110:	ab03      	add	r3, sp, #12
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	462a      	mov	r2, r5
 8009116:	4b06      	ldr	r3, [pc, #24]	; (8009130 <_svfiprintf_r+0x1f8>)
 8009118:	a904      	add	r1, sp, #16
 800911a:	4638      	mov	r0, r7
 800911c:	f000 f87a 	bl	8009214 <_printf_i>
 8009120:	e7eb      	b.n	80090fa <_svfiprintf_r+0x1c2>
 8009122:	bf00      	nop
 8009124:	080097c9 	.word	0x080097c9
 8009128:	080097d3 	.word	0x080097d3
 800912c:	00000000 	.word	0x00000000
 8009130:	08008e81 	.word	0x08008e81
 8009134:	080097cf 	.word	0x080097cf

08009138 <_printf_common>:
 8009138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800913c:	4616      	mov	r6, r2
 800913e:	4699      	mov	r9, r3
 8009140:	688a      	ldr	r2, [r1, #8]
 8009142:	690b      	ldr	r3, [r1, #16]
 8009144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009148:	4293      	cmp	r3, r2
 800914a:	bfb8      	it	lt
 800914c:	4613      	movlt	r3, r2
 800914e:	6033      	str	r3, [r6, #0]
 8009150:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009154:	4607      	mov	r7, r0
 8009156:	460c      	mov	r4, r1
 8009158:	b10a      	cbz	r2, 800915e <_printf_common+0x26>
 800915a:	3301      	adds	r3, #1
 800915c:	6033      	str	r3, [r6, #0]
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	0699      	lsls	r1, r3, #26
 8009162:	bf42      	ittt	mi
 8009164:	6833      	ldrmi	r3, [r6, #0]
 8009166:	3302      	addmi	r3, #2
 8009168:	6033      	strmi	r3, [r6, #0]
 800916a:	6825      	ldr	r5, [r4, #0]
 800916c:	f015 0506 	ands.w	r5, r5, #6
 8009170:	d106      	bne.n	8009180 <_printf_common+0x48>
 8009172:	f104 0a19 	add.w	sl, r4, #25
 8009176:	68e3      	ldr	r3, [r4, #12]
 8009178:	6832      	ldr	r2, [r6, #0]
 800917a:	1a9b      	subs	r3, r3, r2
 800917c:	42ab      	cmp	r3, r5
 800917e:	dc26      	bgt.n	80091ce <_printf_common+0x96>
 8009180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009184:	1e13      	subs	r3, r2, #0
 8009186:	6822      	ldr	r2, [r4, #0]
 8009188:	bf18      	it	ne
 800918a:	2301      	movne	r3, #1
 800918c:	0692      	lsls	r2, r2, #26
 800918e:	d42b      	bmi.n	80091e8 <_printf_common+0xb0>
 8009190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009194:	4649      	mov	r1, r9
 8009196:	4638      	mov	r0, r7
 8009198:	47c0      	blx	r8
 800919a:	3001      	adds	r0, #1
 800919c:	d01e      	beq.n	80091dc <_printf_common+0xa4>
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	68e5      	ldr	r5, [r4, #12]
 80091a2:	6832      	ldr	r2, [r6, #0]
 80091a4:	f003 0306 	and.w	r3, r3, #6
 80091a8:	2b04      	cmp	r3, #4
 80091aa:	bf08      	it	eq
 80091ac:	1aad      	subeq	r5, r5, r2
 80091ae:	68a3      	ldr	r3, [r4, #8]
 80091b0:	6922      	ldr	r2, [r4, #16]
 80091b2:	bf0c      	ite	eq
 80091b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091b8:	2500      	movne	r5, #0
 80091ba:	4293      	cmp	r3, r2
 80091bc:	bfc4      	itt	gt
 80091be:	1a9b      	subgt	r3, r3, r2
 80091c0:	18ed      	addgt	r5, r5, r3
 80091c2:	2600      	movs	r6, #0
 80091c4:	341a      	adds	r4, #26
 80091c6:	42b5      	cmp	r5, r6
 80091c8:	d11a      	bne.n	8009200 <_printf_common+0xc8>
 80091ca:	2000      	movs	r0, #0
 80091cc:	e008      	b.n	80091e0 <_printf_common+0xa8>
 80091ce:	2301      	movs	r3, #1
 80091d0:	4652      	mov	r2, sl
 80091d2:	4649      	mov	r1, r9
 80091d4:	4638      	mov	r0, r7
 80091d6:	47c0      	blx	r8
 80091d8:	3001      	adds	r0, #1
 80091da:	d103      	bne.n	80091e4 <_printf_common+0xac>
 80091dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e4:	3501      	adds	r5, #1
 80091e6:	e7c6      	b.n	8009176 <_printf_common+0x3e>
 80091e8:	18e1      	adds	r1, r4, r3
 80091ea:	1c5a      	adds	r2, r3, #1
 80091ec:	2030      	movs	r0, #48	; 0x30
 80091ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091f2:	4422      	add	r2, r4
 80091f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091fc:	3302      	adds	r3, #2
 80091fe:	e7c7      	b.n	8009190 <_printf_common+0x58>
 8009200:	2301      	movs	r3, #1
 8009202:	4622      	mov	r2, r4
 8009204:	4649      	mov	r1, r9
 8009206:	4638      	mov	r0, r7
 8009208:	47c0      	blx	r8
 800920a:	3001      	adds	r0, #1
 800920c:	d0e6      	beq.n	80091dc <_printf_common+0xa4>
 800920e:	3601      	adds	r6, #1
 8009210:	e7d9      	b.n	80091c6 <_printf_common+0x8e>
	...

08009214 <_printf_i>:
 8009214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009218:	460c      	mov	r4, r1
 800921a:	4691      	mov	r9, r2
 800921c:	7e27      	ldrb	r7, [r4, #24]
 800921e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009220:	2f78      	cmp	r7, #120	; 0x78
 8009222:	4680      	mov	r8, r0
 8009224:	469a      	mov	sl, r3
 8009226:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800922a:	d807      	bhi.n	800923c <_printf_i+0x28>
 800922c:	2f62      	cmp	r7, #98	; 0x62
 800922e:	d80a      	bhi.n	8009246 <_printf_i+0x32>
 8009230:	2f00      	cmp	r7, #0
 8009232:	f000 80d8 	beq.w	80093e6 <_printf_i+0x1d2>
 8009236:	2f58      	cmp	r7, #88	; 0x58
 8009238:	f000 80a3 	beq.w	8009382 <_printf_i+0x16e>
 800923c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009244:	e03a      	b.n	80092bc <_printf_i+0xa8>
 8009246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800924a:	2b15      	cmp	r3, #21
 800924c:	d8f6      	bhi.n	800923c <_printf_i+0x28>
 800924e:	a001      	add	r0, pc, #4	; (adr r0, 8009254 <_printf_i+0x40>)
 8009250:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009254:	080092ad 	.word	0x080092ad
 8009258:	080092c1 	.word	0x080092c1
 800925c:	0800923d 	.word	0x0800923d
 8009260:	0800923d 	.word	0x0800923d
 8009264:	0800923d 	.word	0x0800923d
 8009268:	0800923d 	.word	0x0800923d
 800926c:	080092c1 	.word	0x080092c1
 8009270:	0800923d 	.word	0x0800923d
 8009274:	0800923d 	.word	0x0800923d
 8009278:	0800923d 	.word	0x0800923d
 800927c:	0800923d 	.word	0x0800923d
 8009280:	080093cd 	.word	0x080093cd
 8009284:	080092f1 	.word	0x080092f1
 8009288:	080093af 	.word	0x080093af
 800928c:	0800923d 	.word	0x0800923d
 8009290:	0800923d 	.word	0x0800923d
 8009294:	080093ef 	.word	0x080093ef
 8009298:	0800923d 	.word	0x0800923d
 800929c:	080092f1 	.word	0x080092f1
 80092a0:	0800923d 	.word	0x0800923d
 80092a4:	0800923d 	.word	0x0800923d
 80092a8:	080093b7 	.word	0x080093b7
 80092ac:	680b      	ldr	r3, [r1, #0]
 80092ae:	1d1a      	adds	r2, r3, #4
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	600a      	str	r2, [r1, #0]
 80092b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092bc:	2301      	movs	r3, #1
 80092be:	e0a3      	b.n	8009408 <_printf_i+0x1f4>
 80092c0:	6825      	ldr	r5, [r4, #0]
 80092c2:	6808      	ldr	r0, [r1, #0]
 80092c4:	062e      	lsls	r6, r5, #24
 80092c6:	f100 0304 	add.w	r3, r0, #4
 80092ca:	d50a      	bpl.n	80092e2 <_printf_i+0xce>
 80092cc:	6805      	ldr	r5, [r0, #0]
 80092ce:	600b      	str	r3, [r1, #0]
 80092d0:	2d00      	cmp	r5, #0
 80092d2:	da03      	bge.n	80092dc <_printf_i+0xc8>
 80092d4:	232d      	movs	r3, #45	; 0x2d
 80092d6:	426d      	negs	r5, r5
 80092d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092dc:	485e      	ldr	r0, [pc, #376]	; (8009458 <_printf_i+0x244>)
 80092de:	230a      	movs	r3, #10
 80092e0:	e019      	b.n	8009316 <_printf_i+0x102>
 80092e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80092e6:	6805      	ldr	r5, [r0, #0]
 80092e8:	600b      	str	r3, [r1, #0]
 80092ea:	bf18      	it	ne
 80092ec:	b22d      	sxthne	r5, r5
 80092ee:	e7ef      	b.n	80092d0 <_printf_i+0xbc>
 80092f0:	680b      	ldr	r3, [r1, #0]
 80092f2:	6825      	ldr	r5, [r4, #0]
 80092f4:	1d18      	adds	r0, r3, #4
 80092f6:	6008      	str	r0, [r1, #0]
 80092f8:	0628      	lsls	r0, r5, #24
 80092fa:	d501      	bpl.n	8009300 <_printf_i+0xec>
 80092fc:	681d      	ldr	r5, [r3, #0]
 80092fe:	e002      	b.n	8009306 <_printf_i+0xf2>
 8009300:	0669      	lsls	r1, r5, #25
 8009302:	d5fb      	bpl.n	80092fc <_printf_i+0xe8>
 8009304:	881d      	ldrh	r5, [r3, #0]
 8009306:	4854      	ldr	r0, [pc, #336]	; (8009458 <_printf_i+0x244>)
 8009308:	2f6f      	cmp	r7, #111	; 0x6f
 800930a:	bf0c      	ite	eq
 800930c:	2308      	moveq	r3, #8
 800930e:	230a      	movne	r3, #10
 8009310:	2100      	movs	r1, #0
 8009312:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009316:	6866      	ldr	r6, [r4, #4]
 8009318:	60a6      	str	r6, [r4, #8]
 800931a:	2e00      	cmp	r6, #0
 800931c:	bfa2      	ittt	ge
 800931e:	6821      	ldrge	r1, [r4, #0]
 8009320:	f021 0104 	bicge.w	r1, r1, #4
 8009324:	6021      	strge	r1, [r4, #0]
 8009326:	b90d      	cbnz	r5, 800932c <_printf_i+0x118>
 8009328:	2e00      	cmp	r6, #0
 800932a:	d04d      	beq.n	80093c8 <_printf_i+0x1b4>
 800932c:	4616      	mov	r6, r2
 800932e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009332:	fb03 5711 	mls	r7, r3, r1, r5
 8009336:	5dc7      	ldrb	r7, [r0, r7]
 8009338:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800933c:	462f      	mov	r7, r5
 800933e:	42bb      	cmp	r3, r7
 8009340:	460d      	mov	r5, r1
 8009342:	d9f4      	bls.n	800932e <_printf_i+0x11a>
 8009344:	2b08      	cmp	r3, #8
 8009346:	d10b      	bne.n	8009360 <_printf_i+0x14c>
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	07df      	lsls	r7, r3, #31
 800934c:	d508      	bpl.n	8009360 <_printf_i+0x14c>
 800934e:	6923      	ldr	r3, [r4, #16]
 8009350:	6861      	ldr	r1, [r4, #4]
 8009352:	4299      	cmp	r1, r3
 8009354:	bfde      	ittt	le
 8009356:	2330      	movle	r3, #48	; 0x30
 8009358:	f806 3c01 	strble.w	r3, [r6, #-1]
 800935c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009360:	1b92      	subs	r2, r2, r6
 8009362:	6122      	str	r2, [r4, #16]
 8009364:	f8cd a000 	str.w	sl, [sp]
 8009368:	464b      	mov	r3, r9
 800936a:	aa03      	add	r2, sp, #12
 800936c:	4621      	mov	r1, r4
 800936e:	4640      	mov	r0, r8
 8009370:	f7ff fee2 	bl	8009138 <_printf_common>
 8009374:	3001      	adds	r0, #1
 8009376:	d14c      	bne.n	8009412 <_printf_i+0x1fe>
 8009378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800937c:	b004      	add	sp, #16
 800937e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009382:	4835      	ldr	r0, [pc, #212]	; (8009458 <_printf_i+0x244>)
 8009384:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	680e      	ldr	r6, [r1, #0]
 800938c:	061f      	lsls	r7, r3, #24
 800938e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009392:	600e      	str	r6, [r1, #0]
 8009394:	d514      	bpl.n	80093c0 <_printf_i+0x1ac>
 8009396:	07d9      	lsls	r1, r3, #31
 8009398:	bf44      	itt	mi
 800939a:	f043 0320 	orrmi.w	r3, r3, #32
 800939e:	6023      	strmi	r3, [r4, #0]
 80093a0:	b91d      	cbnz	r5, 80093aa <_printf_i+0x196>
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	f023 0320 	bic.w	r3, r3, #32
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	2310      	movs	r3, #16
 80093ac:	e7b0      	b.n	8009310 <_printf_i+0xfc>
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	f043 0320 	orr.w	r3, r3, #32
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	2378      	movs	r3, #120	; 0x78
 80093b8:	4828      	ldr	r0, [pc, #160]	; (800945c <_printf_i+0x248>)
 80093ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093be:	e7e3      	b.n	8009388 <_printf_i+0x174>
 80093c0:	065e      	lsls	r6, r3, #25
 80093c2:	bf48      	it	mi
 80093c4:	b2ad      	uxthmi	r5, r5
 80093c6:	e7e6      	b.n	8009396 <_printf_i+0x182>
 80093c8:	4616      	mov	r6, r2
 80093ca:	e7bb      	b.n	8009344 <_printf_i+0x130>
 80093cc:	680b      	ldr	r3, [r1, #0]
 80093ce:	6826      	ldr	r6, [r4, #0]
 80093d0:	6960      	ldr	r0, [r4, #20]
 80093d2:	1d1d      	adds	r5, r3, #4
 80093d4:	600d      	str	r5, [r1, #0]
 80093d6:	0635      	lsls	r5, r6, #24
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	d501      	bpl.n	80093e0 <_printf_i+0x1cc>
 80093dc:	6018      	str	r0, [r3, #0]
 80093de:	e002      	b.n	80093e6 <_printf_i+0x1d2>
 80093e0:	0671      	lsls	r1, r6, #25
 80093e2:	d5fb      	bpl.n	80093dc <_printf_i+0x1c8>
 80093e4:	8018      	strh	r0, [r3, #0]
 80093e6:	2300      	movs	r3, #0
 80093e8:	6123      	str	r3, [r4, #16]
 80093ea:	4616      	mov	r6, r2
 80093ec:	e7ba      	b.n	8009364 <_printf_i+0x150>
 80093ee:	680b      	ldr	r3, [r1, #0]
 80093f0:	1d1a      	adds	r2, r3, #4
 80093f2:	600a      	str	r2, [r1, #0]
 80093f4:	681e      	ldr	r6, [r3, #0]
 80093f6:	6862      	ldr	r2, [r4, #4]
 80093f8:	2100      	movs	r1, #0
 80093fa:	4630      	mov	r0, r6
 80093fc:	f7f6 fef0 	bl	80001e0 <memchr>
 8009400:	b108      	cbz	r0, 8009406 <_printf_i+0x1f2>
 8009402:	1b80      	subs	r0, r0, r6
 8009404:	6060      	str	r0, [r4, #4]
 8009406:	6863      	ldr	r3, [r4, #4]
 8009408:	6123      	str	r3, [r4, #16]
 800940a:	2300      	movs	r3, #0
 800940c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009410:	e7a8      	b.n	8009364 <_printf_i+0x150>
 8009412:	6923      	ldr	r3, [r4, #16]
 8009414:	4632      	mov	r2, r6
 8009416:	4649      	mov	r1, r9
 8009418:	4640      	mov	r0, r8
 800941a:	47d0      	blx	sl
 800941c:	3001      	adds	r0, #1
 800941e:	d0ab      	beq.n	8009378 <_printf_i+0x164>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	079b      	lsls	r3, r3, #30
 8009424:	d413      	bmi.n	800944e <_printf_i+0x23a>
 8009426:	68e0      	ldr	r0, [r4, #12]
 8009428:	9b03      	ldr	r3, [sp, #12]
 800942a:	4298      	cmp	r0, r3
 800942c:	bfb8      	it	lt
 800942e:	4618      	movlt	r0, r3
 8009430:	e7a4      	b.n	800937c <_printf_i+0x168>
 8009432:	2301      	movs	r3, #1
 8009434:	4632      	mov	r2, r6
 8009436:	4649      	mov	r1, r9
 8009438:	4640      	mov	r0, r8
 800943a:	47d0      	blx	sl
 800943c:	3001      	adds	r0, #1
 800943e:	d09b      	beq.n	8009378 <_printf_i+0x164>
 8009440:	3501      	adds	r5, #1
 8009442:	68e3      	ldr	r3, [r4, #12]
 8009444:	9903      	ldr	r1, [sp, #12]
 8009446:	1a5b      	subs	r3, r3, r1
 8009448:	42ab      	cmp	r3, r5
 800944a:	dcf2      	bgt.n	8009432 <_printf_i+0x21e>
 800944c:	e7eb      	b.n	8009426 <_printf_i+0x212>
 800944e:	2500      	movs	r5, #0
 8009450:	f104 0619 	add.w	r6, r4, #25
 8009454:	e7f5      	b.n	8009442 <_printf_i+0x22e>
 8009456:	bf00      	nop
 8009458:	080097da 	.word	0x080097da
 800945c:	080097eb 	.word	0x080097eb

08009460 <memmove>:
 8009460:	4288      	cmp	r0, r1
 8009462:	b510      	push	{r4, lr}
 8009464:	eb01 0402 	add.w	r4, r1, r2
 8009468:	d902      	bls.n	8009470 <memmove+0x10>
 800946a:	4284      	cmp	r4, r0
 800946c:	4623      	mov	r3, r4
 800946e:	d807      	bhi.n	8009480 <memmove+0x20>
 8009470:	1e43      	subs	r3, r0, #1
 8009472:	42a1      	cmp	r1, r4
 8009474:	d008      	beq.n	8009488 <memmove+0x28>
 8009476:	f811 2b01 	ldrb.w	r2, [r1], #1
 800947a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800947e:	e7f8      	b.n	8009472 <memmove+0x12>
 8009480:	4402      	add	r2, r0
 8009482:	4601      	mov	r1, r0
 8009484:	428a      	cmp	r2, r1
 8009486:	d100      	bne.n	800948a <memmove+0x2a>
 8009488:	bd10      	pop	{r4, pc}
 800948a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800948e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009492:	e7f7      	b.n	8009484 <memmove+0x24>

08009494 <_realloc_r>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	4607      	mov	r7, r0
 8009498:	4614      	mov	r4, r2
 800949a:	460e      	mov	r6, r1
 800949c:	b921      	cbnz	r1, 80094a8 <_realloc_r+0x14>
 800949e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80094a2:	4611      	mov	r1, r2
 80094a4:	f7ff bb0c 	b.w	8008ac0 <_malloc_r>
 80094a8:	b922      	cbnz	r2, 80094b4 <_realloc_r+0x20>
 80094aa:	f7ff fab9 	bl	8008a20 <_free_r>
 80094ae:	4625      	mov	r5, r4
 80094b0:	4628      	mov	r0, r5
 80094b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094b4:	f000 f814 	bl	80094e0 <_malloc_usable_size_r>
 80094b8:	42a0      	cmp	r0, r4
 80094ba:	d20f      	bcs.n	80094dc <_realloc_r+0x48>
 80094bc:	4621      	mov	r1, r4
 80094be:	4638      	mov	r0, r7
 80094c0:	f7ff fafe 	bl	8008ac0 <_malloc_r>
 80094c4:	4605      	mov	r5, r0
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d0f2      	beq.n	80094b0 <_realloc_r+0x1c>
 80094ca:	4631      	mov	r1, r6
 80094cc:	4622      	mov	r2, r4
 80094ce:	f7ff fa81 	bl	80089d4 <memcpy>
 80094d2:	4631      	mov	r1, r6
 80094d4:	4638      	mov	r0, r7
 80094d6:	f7ff faa3 	bl	8008a20 <_free_r>
 80094da:	e7e9      	b.n	80094b0 <_realloc_r+0x1c>
 80094dc:	4635      	mov	r5, r6
 80094de:	e7e7      	b.n	80094b0 <_realloc_r+0x1c>

080094e0 <_malloc_usable_size_r>:
 80094e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094e4:	1f18      	subs	r0, r3, #4
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	bfbc      	itt	lt
 80094ea:	580b      	ldrlt	r3, [r1, r0]
 80094ec:	18c0      	addlt	r0, r0, r3
 80094ee:	4770      	bx	lr

080094f0 <_init>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	bf00      	nop
 80094f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f6:	bc08      	pop	{r3}
 80094f8:	469e      	mov	lr, r3
 80094fa:	4770      	bx	lr

080094fc <_fini>:
 80094fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fe:	bf00      	nop
 8009500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009502:	bc08      	pop	{r3}
 8009504:	469e      	mov	lr, r3
 8009506:	4770      	bx	lr
