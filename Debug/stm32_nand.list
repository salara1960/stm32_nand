
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000279c  0800c764  0800c764  0001c764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef00  0800ef00  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef00  0800ef00  0001ef00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef08  0800ef08  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef08  0800ef08  0001ef08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef0c  0800ef0c  0001ef0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800ef10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          000060fc  20000100  20000100  00020100  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  200061fc  200061fc  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022a9e  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004226  00000000  00000000  00042bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b18  00000000  00000000  00046df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005d7c  00000000  00000000  00048908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f163  00000000  00000000  0004e684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e314f  00000000  00000000  0006d7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150936  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001990  00000000  00000000  00150988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007bd4  00000000  00000000  00152318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c74c 	.word	0x0800c74c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800c74c 	.word	0x0800c74c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c42:	4904      	ldr	r1, [pc, #16]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_SystemReset+0x28>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
}
 8000c4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <__NVIC_SystemReset+0x20>
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0004 	.word	0x05fa0004

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f002 fe17 	bl	8003894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f887 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 fa2b 	bl	80010c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6e:	f000 f9f3 	bl	8001058 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c72:	f000 f97b 	bl	8000f6c <MX_TIM2_Init>
  MX_RTC_Init();
 8000c76:	f000 f8e9 	bl	8000e4c <MX_RTC_Init>
  MX_FSMC_Init();
 8000c7a:	f000 fac9 	bl	8001210 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000c7e:	f000 f9c1 	bl	8001004 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000c82:	f000 f93d 	bl	8000f00 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e01e      	b.n	8000cca <main+0x6e>
	  HAL_Delay(200);
 8000c8c:	20c8      	movs	r0, #200	; 0xc8
 8000c8e:	f002 fe43 	bl	8003918 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	482a      	ldr	r0, [pc, #168]	; (8000d40 <main+0xe4>)
 8000c98:	f003 fce2 	bl	8004660 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca2:	4828      	ldr	r0, [pc, #160]	; (8000d44 <main+0xe8>)
 8000ca4:	f003 fcdc 	bl	8004660 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000ca8:	20c8      	movs	r0, #200	; 0xc8
 8000caa:	f002 fe35 	bl	8003918 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	4823      	ldr	r0, [pc, #140]	; (8000d40 <main+0xe4>)
 8000cb4:	f003 fcd4 	bl	8004660 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbe:	4821      	ldr	r0, [pc, #132]	; (8000d44 <main+0xe8>)
 8000cc0:	f003 fcce 	bl	8004660 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d9dd      	bls.n	8000c8c <main+0x30>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <main+0xec>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f005 ff69 	bl	8006bac <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <main+0xf0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	491b      	ldr	r1, [pc, #108]	; (8000d50 <main+0xf4>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f006 fbe1 	bl	80074aa <HAL_UART_Receive_IT>

  set_Date(epoch);
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <main+0xf8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fd55 	bl	800179c <set_Date>

  ST7789_Reset();
 8000cf2:	f002 f85b 	bl	8002dac <ST7789_Reset>
  ST7789_Init(back_color);
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <main+0xfc>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 f870 	bl	8002de0 <ST7789_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d00:	f007 fd38 	bl	8008774 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000d04:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <main+0x100>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f007 fe2c 	bl	8008966 <osSemaphoreNew>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a13      	ldr	r2, [pc, #76]	; (8000d60 <main+0x104>)
 8000d12:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(uint8_t), &myQue_attributes);
 8000d14:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <main+0x108>)
 8000d16:	2101      	movs	r1, #1
 8000d18:	2010      	movs	r0, #16
 8000d1a:	f007 fead 	bl	8008a78 <osMessageQueueNew>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <main+0x10c>)
 8000d22:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000d24:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <main+0x110>)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4811      	ldr	r0, [pc, #68]	; (8000d70 <main+0x114>)
 8000d2a:	f007 fd6f 	bl	800880c <osThreadNew>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <main+0x118>)
 8000d32:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d34:	f007 fd44 	bl	80087c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f002 fded 	bl	8003918 <HAL_Delay>
 8000d3e:	e7fb      	b.n	8000d38 <main+0xdc>
 8000d40:	40020800 	.word	0x40020800
 8000d44:	40020c00 	.word	0x40020c00
 8000d48:	2000004c 	.word	0x2000004c
 8000d4c:	20000050 	.word	0x20000050
 8000d50:	20000b40 	.word	0x20000b40
 8000d54:	20000044 	.word	0x20000044
 8000d58:	20000b46 	.word	0x20000b46
 8000d5c:	0800ed30 	.word	0x0800ed30
 8000d60:	20000328 	.word	0x20000328
 8000d64:	0800ed18 	.word	0x0800ed18
 8000d68:	20000324 	.word	0x20000324
 8000d6c:	0800ecf4 	.word	0x0800ecf4
 8000d70:	08002019 	.word	0x08002019
 8000d74:	20000320 	.word	0x20000320

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b094      	sub	sp, #80	; 0x50
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	2230      	movs	r2, #48	; 0x30
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00a fee6 	bl	800bb58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <SystemClock_Config+0xcc>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	4a27      	ldr	r2, [pc, #156]	; (8000e44 <SystemClock_Config+0xcc>)
 8000da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000daa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <SystemClock_Config+0xcc>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db8:	2300      	movs	r3, #0
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <SystemClock_Config+0xd0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <SystemClock_Config+0xd0>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <SystemClock_Config+0xd0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	2302      	movs	r3, #2
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000de8:	2308      	movs	r3, #8
 8000dea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000df0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000df6:	2307      	movs	r3, #7
 8000df8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f004 f8b6 	bl	8004f70 <HAL_RCC_OscConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e0a:	f001 fe37 	bl	8002a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0e:	230f      	movs	r3, #15
 8000e10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2302      	movs	r3, #2
 8000e14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	2105      	movs	r1, #5
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f004 fb17 	bl	8005460 <HAL_RCC_ClockConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e38:	f001 fe20 	bl	8002a7c <Error_Handler>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3750      	adds	r7, #80	; 0x50
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40007000 	.word	0x40007000

08000e4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e60:	2300      	movs	r3, #0
 8000e62:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e64:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e66:	4a25      	ldr	r2, [pc, #148]	; (8000efc <MX_RTC_Init+0xb0>)
 8000e68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e70:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e72:	227f      	movs	r2, #127	; 0x7f
 8000e74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000e76:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e78:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e7c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e90:	4819      	ldr	r0, [pc, #100]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e92:	f004 fe19 	bl	8005ac8 <HAL_RTC_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000e9c:	f001 fdee 	bl	8002a7c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480f      	ldr	r0, [pc, #60]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000ebc:	f004 fe95 	bl	8005bea <HAL_RTC_SetTime>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000ec6:	f001 fdd9 	bl	8002a7c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000ee2:	f004 ff9d 	bl	8005e20 <HAL_RTC_SetDate>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000eec:	f001 fdc6 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000011c 	.word	0x2000011c
 8000efc:	40002800 	.word	0x40002800

08000f00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f06:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <MX_SPI1_Init+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f20:	2202      	movs	r2, #2
 8000f22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f4c:	220a      	movs	r2, #10
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f52:	f005 f8eb 	bl	800612c <HAL_SPI_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f5c:	f001 fd8e 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2000013c 	.word	0x2000013c
 8000f68:	40013000 	.word	0x40013000

08000f6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f92:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fa0:	22f9      	movs	r2, #249	; 0xf9
 8000fa2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb0:	4813      	ldr	r0, [pc, #76]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fb2:	f005 fdab 	bl	8006b0c <HAL_TIM_Base_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fbc:	f001 fd5e 	bl	8002a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fce:	f005 ff65 	bl	8006e9c <HAL_TIM_ConfigClockSource>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fd8:	f001 fd50 	bl	8002a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fdc:	2320      	movs	r3, #32
 8000fde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fea:	f006 f981 	bl	80072f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ff4:	f001 fd42 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200001f4 	.word	0x200001f4

08001004 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <MX_USART3_UART_Init+0x50>)
 800100c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001010:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001014:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 800103c:	f006 f9e8 	bl	8007410 <HAL_UART_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001046:	f001 fd19 	bl	8002a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000023c 	.word	0x2000023c
 8001054:	40004800 	.word	0x40004800

08001058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_DMA_Init+0x68>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <MX_DMA_Init+0x68>)
 8001068:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_DMA_Init+0x68>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_DMA_Init+0x68>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <MX_DMA_Init+0x68>)
 8001084:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <MX_DMA_Init+0x68>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2105      	movs	r1, #5
 800109a:	200e      	movs	r0, #14
 800109c:	f002 fd18 	bl	8003ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010a0:	200e      	movs	r0, #14
 80010a2:	f002 fd31 	bl	8003b08 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2103      	movs	r1, #3
 80010aa:	203b      	movs	r0, #59	; 0x3b
 80010ac:	f002 fd10 	bl	8003ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010b0:	203b      	movs	r0, #59	; 0x3b
 80010b2:	f002 fd29 	bl	8003b08 <HAL_NVIC_EnableIRQ>

}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800

080010c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	; 0x30
 80010c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	4b48      	ldr	r3, [pc, #288]	; (8001200 <MX_GPIO_Init+0x13c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a47      	ldr	r2, [pc, #284]	; (8001200 <MX_GPIO_Init+0x13c>)
 80010e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b45      	ldr	r3, [pc, #276]	; (8001200 <MX_GPIO_Init+0x13c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	4b41      	ldr	r3, [pc, #260]	; (8001200 <MX_GPIO_Init+0x13c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a40      	ldr	r2, [pc, #256]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b3e      	ldr	r3, [pc, #248]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a39      	ldr	r2, [pc, #228]	; (8001200 <MX_GPIO_Init+0x13c>)
 800111c:	f043 0310 	orr.w	r3, r3, #16
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b37      	ldr	r3, [pc, #220]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b33      	ldr	r3, [pc, #204]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a32      	ldr	r2, [pc, #200]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b30      	ldr	r3, [pc, #192]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a2b      	ldr	r2, [pc, #172]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <MX_GPIO_Init+0x13c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <MX_GPIO_Init+0x13c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a24      	ldr	r2, [pc, #144]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	210e      	movs	r1, #14
 8001186:	481f      	ldr	r0, [pc, #124]	; (8001204 <MX_GPIO_Init+0x140>)
 8001188:	f003 fa6a 	bl	8004660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001192:	481d      	ldr	r0, [pc, #116]	; (8001208 <MX_GPIO_Init+0x144>)
 8001194:	f003 fa64 	bl	8004660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	481b      	ldr	r0, [pc, #108]	; (800120c <MX_GPIO_Init+0x148>)
 800119e:	f003 fa5f 	bl	8004660 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 80011a2:	230e      	movs	r3, #14
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011ae:	2301      	movs	r3, #1
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4812      	ldr	r0, [pc, #72]	; (8001204 <MX_GPIO_Init+0x140>)
 80011ba:	f003 f8b5 	bl	8004328 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80011be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011cc:	2302      	movs	r3, #2
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	4619      	mov	r1, r3
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <MX_GPIO_Init+0x144>)
 80011d8:	f003 f8a6 	bl	8004328 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e4:	2302      	movs	r3, #2
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	; (800120c <MX_GPIO_Init+0x148>)
 80011f4:	f003 f898 	bl	8004328 <HAL_GPIO_Init>

}
 80011f8:	bf00      	nop
 80011fa:	3730      	adds	r7, #48	; 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40020800 	.word	0x40020800

08001210 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 8001216:	4b58      	ldr	r3, [pc, #352]	; (8001378 <MX_FSMC_Init+0x168>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800122a:	463b      	mov	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 8001236:	4b51      	ldr	r3, [pc, #324]	; (800137c <MX_FSMC_Init+0x16c>)
 8001238:	4a51      	ldr	r2, [pc, #324]	; (8001380 <MX_FSMC_Init+0x170>)
 800123a:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 800123c:	4b4f      	ldr	r3, [pc, #316]	; (800137c <MX_FSMC_Init+0x16c>)
 800123e:	2210      	movs	r2, #16
 8001240:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001242:	4b4e      	ldr	r3, [pc, #312]	; (800137c <MX_FSMC_Init+0x16c>)
 8001244:	2202      	movs	r2, #2
 8001246:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8001248:	4b4c      	ldr	r3, [pc, #304]	; (800137c <MX_FSMC_Init+0x16c>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 800124e:	4b4b      	ldr	r3, [pc, #300]	; (800137c <MX_FSMC_Init+0x16c>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8001254:	4b49      	ldr	r3, [pc, #292]	; (800137c <MX_FSMC_Init+0x16c>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800125a:	4b48      	ldr	r3, [pc, #288]	; (800137c <MX_FSMC_Init+0x16c>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001260:	4b46      	ldr	r3, [pc, #280]	; (800137c <MX_FSMC_Init+0x16c>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 8001266:	4b45      	ldr	r3, [pc, #276]	; (800137c <MX_FSMC_Init+0x16c>)
 8001268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 16;
 800126e:	4b43      	ldr	r3, [pc, #268]	; (800137c <MX_FSMC_Init+0x16c>)
 8001270:	2210      	movs	r2, #16
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 131072;
 8001274:	4b41      	ldr	r3, [pc, #260]	; (800137c <MX_FSMC_Init+0x16c>)
 8001276:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 800127c:	4b3f      	ldr	r3, [pc, #252]	; (800137c <MX_FSMC_Init+0x16c>)
 800127e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 8001284:	4b3d      	ldr	r3, [pc, #244]	; (800137c <MX_FSMC_Init+0x16c>)
 8001286:	2201      	movs	r2, #1
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 134217728;
 800128a:	4b3c      	ldr	r3, [pc, #240]	; (800137c <MX_FSMC_Init+0x16c>)
 800128c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001290:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 8001292:	4b3a      	ldr	r3, [pc, #232]	; (800137c <MX_FSMC_Init+0x16c>)
 8001294:	2201      	movs	r2, #1
 8001296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800129a:	23fc      	movs	r3, #252	; 0xfc
 800129c:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 800129e:	23fc      	movs	r3, #252	; 0xfc
 80012a0:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 80012a2:	23fc      	movs	r3, #252	; 0xfc
 80012a4:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 80012a6:	23fc      	movs	r3, #252	; 0xfc
 80012a8:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 80012aa:	23fc      	movs	r3, #252	; 0xfc
 80012ac:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 80012ae:	23fc      	movs	r3, #252	; 0xfc
 80012b0:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 80012b2:	23fc      	movs	r3, #252	; 0xfc
 80012b4:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 80012b6:	23fc      	movs	r3, #252	; 0xfc
 80012b8:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80012ba:	463a      	mov	r2, r7
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	482e      	ldr	r0, [pc, #184]	; (800137c <MX_FSMC_Init+0x16c>)
 80012c4:	f003 f9ff 	bl	80046c6 <HAL_NAND_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_FSMC_Init+0xc2>
  {
    Error_Handler( );
 80012ce:	f001 fbd5 	bl	8002a7c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  if (my_NAND_Read_ID(&hnand1, &nandID) == HAL_OK) {
 80012d2:	492c      	ldr	r1, [pc, #176]	; (8001384 <MX_FSMC_Init+0x174>)
 80012d4:	4829      	ldr	r0, [pc, #164]	; (800137c <MX_FSMC_Init+0x16c>)
 80012d6:	f000 f861 	bl	800139c <my_NAND_Read_ID>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d147      	bne.n	8001370 <MX_FSMC_Init+0x160>

	  nandState = HAL_NAND_GetState(&hnand1);
 80012e0:	4826      	ldr	r0, [pc, #152]	; (800137c <MX_FSMC_Init+0x16c>)
 80012e2:	f003 fe36 	bl	8004f52 <HAL_NAND_GetState>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <MX_FSMC_Init+0x178>)
 80012ec:	701a      	strb	r2, [r3, #0]

	  memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand1.Config, sizeof(s_chipConf));
 80012ee:	4a27      	ldr	r2, [pc, #156]	; (800138c <MX_FSMC_Init+0x17c>)
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <MX_FSMC_Init+0x16c>)
 80012f2:	4615      	mov	r5, r2
 80012f4:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80012f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001300:	e885 0003 	stmia.w	r5, {r0, r1}

	  if ((chipConf.PageSize > 0) && (chipConf.PageSize <= MAX_NAND_BUF)) {
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <MX_FSMC_Init+0x17c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d028      	beq.n	800135e <MX_FSMC_Init+0x14e>
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <MX_FSMC_Init+0x17c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001314:	d823      	bhi.n	800135e <MX_FSMC_Init+0x14e>
		  rdBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_FSMC_Init+0x17c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4619      	mov	r1, r3
 800131c:	2001      	movs	r0, #1
 800131e:	f00a fb25 	bl	800b96c <calloc>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_FSMC_Init+0x180>)
 8001328:	601a      	str	r2, [r3, #0]
		  wrBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_FSMC_Init+0x17c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4619      	mov	r1, r3
 8001330:	2001      	movs	r0, #1
 8001332:	f00a fb1b 	bl	800b96c <calloc>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <MX_FSMC_Init+0x184>)
 800133c:	601a      	str	r2, [r3, #0]

		  if (!rdBuf || !wrBuf) devError |= devMEM;
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_FSMC_Init+0x180>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <MX_FSMC_Init+0x13e>
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <MX_FSMC_Init+0x184>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10f      	bne.n	800136e <MX_FSMC_Init+0x15e>
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_FSMC_Init+0x188>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_FSMC_Init+0x188>)
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	e007      	b.n	800136e <MX_FSMC_Init+0x15e>
	  } else {
		  devError |= devNAND;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_FSMC_Init+0x188>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	f043 0320 	orr.w	r3, r3, #32
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_FSMC_Init+0x188>)
 800136a:	701a      	strb	r2, [r3, #0]

  }


  /* USER CODE END FSMC_Init 2 */
}
 800136c:	e000      	b.n	8001370 <MX_FSMC_Init+0x160>
		  if (!rdBuf || !wrBuf) devError |= devMEM;
 800136e:	bf00      	nop
}
 8001370:	bf00      	nop
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	20000b58 	.word	0x20000b58
 800137c:	200002e0 	.word	0x200002e0
 8001380:	a0000060 	.word	0xa0000060
 8001384:	20000b5c 	.word	0x20000b5c
 8001388:	20000061 	.word	0x20000061
 800138c:	20000b64 	.word	0x20000b64
 8001390:	20000b7c 	.word	0x20000b7c
 8001394:	20000b80 	.word	0x20000b80
 8001398:	2000032c 	.word	0x2000032c

0800139c <my_NAND_Read_ID>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef my_NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
__IO uint32_t data = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
__IO uint32_t data1 = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
uint32_t deviceaddress = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]

	__HAL_LOCK(hnand);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <my_NAND_Read_ID+0x24>
 80013bc:	2302      	movs	r3, #2
 80013be:	e052      	b.n	8001466 <my_NAND_Read_ID+0xca>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2020 	strb.w	r2, [r3, #32]

	if(hnand->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d101      	bne.n	80013d8 <my_NAND_Read_ID+0x3c>
 80013d4:	2302      	movs	r3, #2
 80013d6:	e046      	b.n	8001466 <my_NAND_Read_ID+0xca>

	if(hnand->Init.NandBank == FMC_NAND_BANK2) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b10      	cmp	r3, #16
 80013de:	d103      	bne.n	80013e8 <my_NAND_Read_ID+0x4c>
		deviceaddress = NAND_DEVICE1;
 80013e0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	e002      	b.n	80013ee <my_NAND_Read_ID+0x52>
	} else {
		deviceaddress = NAND_DEVICE2;
 80013e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013ec:	617b      	str	r3, [r7, #20]
	}
	devAdr = deviceaddress;
 80013ee:	4a21      	ldr	r2, [pc, #132]	; (8001474 <my_NAND_Read_ID+0xd8>)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	6013      	str	r3, [r2, #0]

	hnand->State = HAL_NAND_STATE_BUSY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2202      	movs	r2, #2
 80013f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Send Read ID command sequence */
	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_READID;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001402:	2290      	movs	r2, #144	; 0x90
 8001404:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]

	/* Read the electronic signature from NAND flash */
	if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d121      	bne.n	800145c <my_NAND_Read_ID+0xc0>
		data = *(__IO uint32_t *)deviceaddress;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	613b      	str	r3, [r7, #16]
		data1 = *((__IO uint32_t *)deviceaddress + 4U);
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3310      	adds	r3, #16
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]

		/* Return the data read */
		pNAND_ID->Maker_Id  = ADDR_1ST_CYCLE(data);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	701a      	strb	r2, [r3, #0]
		pNAND_ID->Device_Id = ADDR_2ND_CYCLE(data);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	b2da      	uxtb	r2, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	705a      	strb	r2, [r3, #1]
		pNAND_ID->Third_Id  = ADDR_3RD_CYCLE(data);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	0c1b      	lsrs	r3, r3, #16
 800143c:	b2da      	uxtb	r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	709a      	strb	r2, [r3, #2]
		pNAND_ID->Fourth_Id = ADDR_4TH_CYCLE(data);
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	0e1b      	lsrs	r3, r3, #24
 8001446:	b2da      	uxtb	r2, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	70da      	strb	r2, [r3, #3]
		pNAND_ID->Plane_Id  = ADDR_1ST_CYCLE(data1);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	711a      	strb	r2, [r3, #4]

		hnand->State = HAL_NAND_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	__HAL_UNLOCK(hnand);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2020 	strb.w	r2, [r3, #32]

	return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	371c      	adds	r7, #28
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000b48 	.word	0x20000b48

08001478 <get_qStat>:
//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	dc18      	bgt.n	80014b8 <get_qStat+0x40>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f113 0f06 	cmn.w	r3, #6
 800148c:	db2a      	blt.n	80014e4 <get_qStat+0x6c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3306      	adds	r3, #6
 8001492:	2b06      	cmp	r3, #6
 8001494:	d826      	bhi.n	80014e4 <get_qStat+0x6c>
 8001496:	a201      	add	r2, pc, #4	; (adr r2, 800149c <get_qStat+0x24>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	080014dd 	.word	0x080014dd
 80014a0:	080014d9 	.word	0x080014d9
 80014a4:	080014d5 	.word	0x080014d5
 80014a8:	080014d1 	.word	0x080014d1
 80014ac:	080014cd 	.word	0x080014cd
 80014b0:	080014c9 	.word	0x080014c9
 80014b4:	080014c5 	.word	0x080014c5
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00e      	beq.n	80014e0 <get_qStat+0x68>
 80014c2:	e00f      	b.n	80014e4 <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <get_qStat+0x7c>)
 80014c6:	e00e      	b.n	80014e6 <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <get_qStat+0x80>)
 80014ca:	e00c      	b.n	80014e6 <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <get_qStat+0x84>)
 80014ce:	e00a      	b.n	80014e6 <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <get_qStat+0x88>)
 80014d2:	e008      	b.n	80014e6 <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <get_qStat+0x8c>)
 80014d6:	e006      	b.n	80014e6 <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <get_qStat+0x90>)
 80014da:	e004      	b.n	80014e6 <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <get_qStat+0x94>)
 80014de:	e002      	b.n	80014e6 <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <get_qStat+0x98>)
 80014e2:	e000      	b.n	80014e6 <get_qStat+0x6e>
	}

	return "UnknownError";
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <get_qStat+0x9c>)
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	0800c884 	.word	0x0800c884
 80014f8:	0800c88c 	.word	0x0800c88c
 80014fc:	0800c894 	.word	0x0800c894
 8001500:	0800c8a4 	.word	0x0800c8a4
 8001504:	0800c8b4 	.word	0x0800c8b4
 8001508:	0800c8c8 	.word	0x0800c8c8
 800150c:	0800c8d8 	.word	0x0800c8d8
 8001510:	0800c8e4 	.word	0x0800c8e4
 8001514:	0800c8f8 	.word	0x0800c8f8

08001518 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 8001524:	2330      	movs	r3, #48	; 0x30
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	2300      	movs	r3, #0
 800152e:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <hex2bin+0x28>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <hex2bin+0x2c>
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	e0b2      	b.n	80016aa <hex2bin+0x192>
    if (len > 8) len = 8;
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	2b08      	cmp	r3, #8
 8001548:	d901      	bls.n	800154e <hex2bin+0x36>
 800154a:	2308      	movs	r3, #8
 800154c:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	f1c3 0308 	rsb	r3, r3, #8
 8001554:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 8001558:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800155c:	f107 0210 	add.w	r2, r7, #16
 8001560:	4413      	add	r3, r2
 8001562:	78fa      	ldrb	r2, [r7, #3]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	f00a fae8 	bl	800bb3c <memcpy>

    k = j = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001572:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001576:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 800157a:	e090      	b.n	800169e <hex2bin+0x186>
        jk = j + 2;
 800157c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001580:	3302      	adds	r3, #2
 8001582:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 8001584:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800158c:	e066      	b.n	800165c <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 800158e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001592:	3328      	adds	r3, #40	; 0x28
 8001594:	443b      	add	r3, r7
 8001596:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800159a:	2b2f      	cmp	r3, #47	; 0x2f
 800159c:	d918      	bls.n	80015d0 <hex2bin+0xb8>
 800159e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015a2:	3328      	adds	r3, #40	; 0x28
 80015a4:	443b      	add	r3, r7
 80015a6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80015aa:	2b39      	cmp	r3, #57	; 0x39
 80015ac:	d810      	bhi.n	80015d0 <hex2bin+0xb8>
 80015ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015b2:	3328      	adds	r3, #40	; 0x28
 80015b4:	443b      	add	r3, r7
 80015b6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80015ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	3a30      	subs	r2, #48	; 0x30
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	3328      	adds	r3, #40	; 0x28
 80015c8:	443b      	add	r3, r7
 80015ca:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80015ce:	e040      	b.n	8001652 <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 80015d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d4:	3328      	adds	r3, #40	; 0x28
 80015d6:	443b      	add	r3, r7
 80015d8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80015dc:	2b60      	cmp	r3, #96	; 0x60
 80015de:	d918      	bls.n	8001612 <hex2bin+0xfa>
 80015e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015e4:	3328      	adds	r3, #40	; 0x28
 80015e6:	443b      	add	r3, r7
 80015e8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80015ec:	2b66      	cmp	r3, #102	; 0x66
 80015ee:	d810      	bhi.n	8001612 <hex2bin+0xfa>
 80015f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015f4:	3328      	adds	r3, #40	; 0x28
 80015f6:	443b      	add	r3, r7
 80015f8:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80015fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	3a57      	subs	r2, #87	; 0x57
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	3328      	adds	r3, #40	; 0x28
 800160a:	443b      	add	r3, r7
 800160c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001610:	e01f      	b.n	8001652 <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 8001612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001616:	3328      	adds	r3, #40	; 0x28
 8001618:	443b      	add	r3, r7
 800161a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800161e:	2b40      	cmp	r3, #64	; 0x40
 8001620:	d917      	bls.n	8001652 <hex2bin+0x13a>
 8001622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001626:	3328      	adds	r3, #40	; 0x28
 8001628:	443b      	add	r3, r7
 800162a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800162e:	2b46      	cmp	r3, #70	; 0x46
 8001630:	d80f      	bhi.n	8001652 <hex2bin+0x13a>
 8001632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001636:	3328      	adds	r3, #40	; 0x28
 8001638:	443b      	add	r3, r7
 800163a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800163e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	3a37      	subs	r2, #55	; 0x37
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	3328      	adds	r3, #40	; 0x28
 800164c:	443b      	add	r3, r7
 800164e:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 8001652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001656:	3301      	adds	r3, #1
 8001658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800165c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001660:	7ffb      	ldrb	r3, [r7, #31]
 8001662:	429a      	cmp	r2, r3
 8001664:	d393      	bcc.n	800158e <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 8001666:	7b3b      	ldrb	r3, [r7, #12]
 8001668:	011a      	lsls	r2, r3, #4
 800166a:	7b7b      	ldrb	r3, [r7, #13]
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 8001674:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001678:	f1c3 0303 	rsb	r3, r3, #3
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	6a3a      	ldr	r2, [r7, #32]
 8001686:	4313      	orrs	r3, r2
 8001688:	623b      	str	r3, [r7, #32]
        k++;
 800168a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800168e:	3301      	adds	r3, #1
 8001690:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 8001694:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001698:	3302      	adds	r3, #2
 800169a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 800169e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	f67f af6a 	bls.w	800157c <hex2bin+0x64>
    }

    return ret;
 80016a8:	6a3b      	ldr	r3, [r7, #32]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3728      	adds	r7, #40	; 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
	if (on)
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ca:	4807      	ldr	r0, [pc, #28]	; (80016e8 <errLedOn+0x34>)
 80016cc:	f002 ffc8 	bl	8004660 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 80016d0:	e005      	b.n	80016de <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d8:	4803      	ldr	r0, [pc, #12]	; (80016e8 <errLedOn+0x34>)
 80016da:	f002 ffc1 	bl	8004660 <HAL_GPIO_WritePin>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40020c00 	.word	0x40020c00

080016ec <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
	return secCounter;
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <get_secCounter+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000330 	.word	0x20000330

08001704 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
	secCounter++;
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <inc_secCounter+0x18>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	4a03      	ldr	r2, [pc, #12]	; (800171c <inc_secCounter+0x18>)
 8001710:	6013      	str	r3, [r2, #0]
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	20000330 	.word	0x20000330

08001720 <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
	return msCounter;
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <get_msCounter+0x18>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000338 	.word	0x20000338

0800173c <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
	msCounter++;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <inc_msCounter+0x20>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	1c50      	adds	r0, r2, #1
 8001748:	f143 0100 	adc.w	r1, r3, #0
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <inc_msCounter+0x20>)
 800174e:	e9c3 0100 	strd	r0, r1, [r3]
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	20000338 	.word	0x20000338

08001760 <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8001768:	f7ff ffc0 	bl	80016ec <get_secCounter>
 800176c:	4602      	mov	r2, r0
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 8001782:	f7ff ffb3 	bl	80016ec <get_secCounter>
 8001786:	4602      	mov	r2, r0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4293      	cmp	r3, r2
 800178c:	bf94      	ite	ls
 800178e:	2301      	movls	r3, #1
 8001790:	2300      	movhi	r3, #0
 8001792:	b2db      	uxtb	r3, r3
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b094      	sub	sp, #80	; 0x50
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	struct tm ts;
	time_t ep = (time_t)usec;
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	2000      	movs	r0, #0
 80017a8:	460a      	mov	r2, r1
 80017aa:	4603      	mov	r3, r0
 80017ac:	e9c7 2302 	strd	r2, r3, [r7, #8]

	gmtime_r(&ep, &ts);
 80017b0:	f107 0214 	add.w	r2, r7, #20
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00a f8e4 	bl	800b988 <gmtime_r>

	sDate.WeekDay = ts.tm_wday;
 80017c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	sDate.Month   = ts.tm_mon + 1;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	sDate.Date    = ts.tm_mday;
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	sDate.Year    = ts.tm_year;
 80017dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80017e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017e8:	2200      	movs	r2, #0
 80017ea:	4619      	mov	r1, r3
 80017ec:	481b      	ldr	r0, [pc, #108]	; (800185c <set_Date+0xc0>)
 80017ee:	f004 fb17 	bl	8005e20 <HAL_RTC_SetDate>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d007      	beq.n	8001808 <set_Date+0x6c>
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <set_Date+0xc4>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <set_Date+0xc4>)
 8001804:	701a      	strb	r2, [r3, #0]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8001806:	e024      	b.n	8001852 <set_Date+0xb6>
		sTime.Hours   = ts.tm_hour + tZone;
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <set_Date+0xc8>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4413      	add	r3, r2
 8001812:	b2db      	uxtb	r3, r3
 8001814:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		sTime.Minutes = ts.tm_min;
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		sTime.Seconds = ts.tm_sec;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8001828:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800182c:	2200      	movs	r2, #0
 800182e:	4619      	mov	r1, r3
 8001830:	480a      	ldr	r0, [pc, #40]	; (800185c <set_Date+0xc0>)
 8001832:	f004 f9da 	bl	8005bea <HAL_RTC_SetTime>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <set_Date+0xb0>
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <set_Date+0xc4>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <set_Date+0xc4>)
 8001848:	701a      	strb	r2, [r3, #0]
}
 800184a:	e002      	b.n	8001852 <set_Date+0xb6>
			setDate = true;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <set_Date+0xcc>)
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
}
 8001852:	bf00      	nop
 8001854:	3750      	adds	r7, #80	; 0x50
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000011c 	.word	0x2000011c
 8001860:	2000032c 	.word	0x2000032c
 8001864:	20000b45 	.word	0x20000b45
 8001868:	20000b44 	.word	0x20000b44

0800186c <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b093      	sub	sp, #76	; 0x4c
 8001870:	af04      	add	r7, sp, #16
 8001872:	6078      	str	r0, [r7, #4]
int ret = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8001878:	4b40      	ldr	r3, [pc, #256]	; (800197c <sec2str+0x110>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	f083 0301 	eor.w	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d040      	beq.n	8001908 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8001886:	f7ff ff31 	bl	80016ec <get_secCounter>
 800188a:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 800188c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188e:	4a3c      	ldr	r2, [pc, #240]	; (8001980 <sec2str+0x114>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	0c1b      	lsrs	r3, r3, #16
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8001898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189a:	4a39      	ldr	r2, [pc, #228]	; (8001980 <sec2str+0x114>)
 800189c:	fba2 1203 	umull	r1, r2, r2, r3
 80018a0:	0c12      	lsrs	r2, r2, #16
 80018a2:	4938      	ldr	r1, [pc, #224]	; (8001984 <sec2str+0x118>)
 80018a4:	fb01 f202 	mul.w	r2, r1, r2
 80018a8:	1a9b      	subs	r3, r3, r2
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 80018ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ae:	4a36      	ldr	r2, [pc, #216]	; (8001988 <sec2str+0x11c>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	0adb      	lsrs	r3, r3, #11
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 80018b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ba:	4a33      	ldr	r2, [pc, #204]	; (8001988 <sec2str+0x11c>)
 80018bc:	fba2 1203 	umull	r1, r2, r2, r3
 80018c0:	0ad2      	lsrs	r2, r2, #11
 80018c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80018c6:	fb01 f202 	mul.w	r2, r1, r2
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 80018ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d0:	4a2e      	ldr	r2, [pc, #184]	; (800198c <sec2str+0x120>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 80018da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018dc:	4b2b      	ldr	r3, [pc, #172]	; (800198c <sec2str+0x120>)
 80018de:	fba3 1302 	umull	r1, r3, r3, r2
 80018e2:	0959      	lsrs	r1, r3, #5
 80018e4:	460b      	mov	r3, r1
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	1a5b      	subs	r3, r3, r1
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu ", day, hour, min, sec);
 80018f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fc:	4924      	ldr	r1, [pc, #144]	; (8001990 <sec2str+0x124>)
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f00a faa2 	bl	800be48 <siprintf>
 8001904:	6378      	str	r0, [r7, #52]	; 0x34
 8001906:	e034      	b.n	8001972 <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2200      	movs	r2, #0
 800190e:	4619      	mov	r1, r3
 8001910:	4820      	ldr	r0, [pc, #128]	; (8001994 <sec2str+0x128>)
 8001912:	f004 fb2c 	bl	8005f6e <HAL_RTC_GetDate>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <sec2str+0xc0>
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <sec2str+0x12c>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	f043 0308 	orr.w	r3, r3, #8
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <sec2str+0x12c>)
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	e022      	b.n	8001972 <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	2200      	movs	r2, #0
 8001932:	4619      	mov	r1, r3
 8001934:	4817      	ldr	r0, [pc, #92]	; (8001994 <sec2str+0x128>)
 8001936:	f004 fa15 	bl	8005d64 <HAL_RTC_GetTime>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d007      	beq.n	8001950 <sec2str+0xe4>
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <sec2str+0x12c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	f043 0308 	orr.w	r3, r3, #8
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <sec2str+0x12c>)
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	e010      	b.n	8001972 <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
								sDate.Date, sDate.Month,
 8001950:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 8001952:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8001954:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 8001956:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001958:	7c3b      	ldrb	r3, [r7, #16]
 800195a:	7c7a      	ldrb	r2, [r7, #17]
 800195c:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 800195e:	9102      	str	r1, [sp, #8]
 8001960:	9201      	str	r2, [sp, #4]
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	4623      	mov	r3, r4
 8001966:	4602      	mov	r2, r0
 8001968:	490c      	ldr	r1, [pc, #48]	; (800199c <sec2str+0x130>)
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f00a fa6c 	bl	800be48 <siprintf>
 8001970:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 8001972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001974:	4618      	mov	r0, r3
 8001976:	373c      	adds	r7, #60	; 0x3c
 8001978:	46bd      	mov	sp, r7
 800197a:	bd90      	pop	{r4, r7, pc}
 800197c:	20000b44 	.word	0x20000b44
 8001980:	c22e4507 	.word	0xc22e4507
 8001984:	00015180 	.word	0x00015180
 8001988:	91a2b3c5 	.word	0x91a2b3c5
 800198c:	88888889 	.word	0x88888889
 8001990:	0800c908 	.word	0x0800c908
 8001994:	2000011c 	.word	0x2000011c
 8001998:	2000032c 	.word	0x2000032c
 800199c:	0800c920 	.word	0x0800c920

080019a0 <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(uint8_t addTime, const char *fmt, ...)
{
 80019a0:	b40e      	push	{r1, r2, r3}
 80019a2:	b590      	push	{r4, r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 80019ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b0:	613b      	str	r3, [r7, #16]
int dl = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 80019b6:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <Report+0xb8>)
 80019b8:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d012      	beq.n	80019ec <Report+0x4c>
		dl = sec2str(buf);
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f7ff ff50 	bl	800186c <sec2str>
 80019cc:	6178      	str	r0, [r7, #20]
		strcat(buf, "| ");
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f7fe fbfe 	bl	80001d0 <strlen>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	4a1f      	ldr	r2, [pc, #124]	; (8001a5c <Report+0xbc>)
 80019de:	8811      	ldrh	r1, [r2, #0]
 80019e0:	7892      	ldrb	r2, [r2, #2]
 80019e2:	8019      	strh	r1, [r3, #0]
 80019e4:	709a      	strb	r2, [r3, #2]
		dl += 2;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3302      	adds	r3, #2
 80019ea:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 80019ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f0:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	18d0      	adds	r0, r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	1ad1      	subs	r1, r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a02:	f00a fb47 	bl	800c094 <vsniprintf>

	uartRdy = false;
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <Report+0xc0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <Report+0xc4>)
 8001a0e:	681c      	ldr	r4, [r3, #0]
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f7fe fbdd 	bl	80001d0 <strlen>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68f9      	ldr	r1, [r7, #12]
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f005 fd74 	bl	800750c <HAL_UART_Transmit_DMA>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <Report+0x98>
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <Report+0xc8>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <Report+0xc8>)
 8001a36:	701a      	strb	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 8001a38:	bf00      	nop
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <Report+0xc0>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	f083 0301 	eor.w	r3, r3, #1
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f8      	bne.n	8001a3a <Report+0x9a>

	va_end(args);

	return 0;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a54:	b003      	add	sp, #12
 8001a56:	4770      	bx	lr
 8001a58:	20000340 	.word	0x20000340
 8001a5c:	0800c93c 	.word	0x0800c93c
 8001a60:	20000040 	.word	0x20000040
 8001a64:	20000050 	.word	0x20000050
 8001a68:	2000032c 	.word	0x2000032c

08001a6c <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08e      	sub	sp, #56	; 0x38
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4aa9      	ldr	r2, [pc, #676]	; (8001d20 <HAL_UART_RxCpltCallback+0x2b4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	f040 822c 	bne.w	8001ed8 <HAL_UART_RxCpltCallback+0x46c>
		rxBuf[ruk++] = (char)rxByte;
 8001a80:	4ba8      	ldr	r3, [pc, #672]	; (8001d24 <HAL_UART_RxCpltCallback+0x2b8>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	b291      	uxth	r1, r2
 8001a88:	4aa6      	ldr	r2, [pc, #664]	; (8001d24 <HAL_UART_RxCpltCallback+0x2b8>)
 8001a8a:	8011      	strh	r1, [r2, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4ba6      	ldr	r3, [pc, #664]	; (8001d28 <HAL_UART_RxCpltCallback+0x2bc>)
 8001a90:	7819      	ldrb	r1, [r3, #0]
 8001a92:	4ba6      	ldr	r3, [pc, #664]	; (8001d2c <HAL_UART_RxCpltCallback+0x2c0>)
 8001a94:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 8001a96:	4ba4      	ldr	r3, [pc, #656]	; (8001d28 <HAL_UART_RxCpltCallback+0x2bc>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b0a      	cmp	r3, #10
 8001a9c:	f040 8217 	bne.w	8001ece <HAL_UART_RxCpltCallback+0x462>
			rxBuf[--ruk] = '\0';
 8001aa0:	4ba0      	ldr	r3, [pc, #640]	; (8001d24 <HAL_UART_RxCpltCallback+0x2b8>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4b9e      	ldr	r3, [pc, #632]	; (8001d24 <HAL_UART_RxCpltCallback+0x2b8>)
 8001aaa:	801a      	strh	r2, [r3, #0]
 8001aac:	4b9d      	ldr	r3, [pc, #628]	; (8001d24 <HAL_UART_RxCpltCallback+0x2b8>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b9e      	ldr	r3, [pc, #632]	; (8001d2c <HAL_UART_RxCpltCallback+0x2c0>)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
			bool check = false;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			cmd_flag = 0;
 8001ac2:	4b9b      	ldr	r3, [pc, #620]	; (8001d30 <HAL_UART_RxCpltCallback+0x2c4>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
			if (strlen(rxBuf) >= 4) {
 8001ac8:	4898      	ldr	r0, [pc, #608]	; (8001d2c <HAL_UART_RxCpltCallback+0x2c0>)
 8001aca:	f7fe fb81 	bl	80001d0 <strlen>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	f240 81f3 	bls.w	8001ebc <HAL_UART_RxCpltCallback+0x450>
				int8_t idx = -1;
 8001ad6:	23ff      	movs	r3, #255	; 0xff
 8001ad8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8001adc:	2300      	movs	r3, #0
 8001ade:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001ae2:	e018      	b.n	8001b16 <HAL_UART_RxCpltCallback+0xaa>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds ="restart"
 8001ae4:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8001ae8:	4a92      	ldr	r2, [pc, #584]	; (8001d34 <HAL_UART_RxCpltCallback+0x2c8>)
 8001aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aee:	4619      	mov	r1, r3
 8001af0:	488e      	ldr	r0, [pc, #568]	; (8001d2c <HAL_UART_RxCpltCallback+0x2c0>)
 8001af2:	f00a fa00 	bl	800bef6 <strstr>
 8001af6:	6378      	str	r0, [r7, #52]	; 0x34
 8001af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d004      	beq.n	8001b08 <HAL_UART_RxCpltCallback+0x9c>
														  //"read:0x4549ABBB:256"
						                                  //"next"
														  //"write:0x0:0xf0:256"
														  //"erase:"
														  //"clear"
						idx = i;
 8001afe:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001b02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
						break;
 8001b06:	e00a      	b.n	8001b1e <HAL_UART_RxCpltCallback+0xb2>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8001b08:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001b16:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	dde2      	ble.n	8001ae4 <HAL_UART_RxCpltCallback+0x78>
					}
				}
				if (uk == rxBuf) {
 8001b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b20:	4a82      	ldr	r2, [pc, #520]	; (8001d2c <HAL_UART_RxCpltCallback+0x2c0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	f040 81ca 	bne.w	8001ebc <HAL_UART_RxCpltCallback+0x450>
					nandLen = 256;
 8001b28:	4b83      	ldr	r3, [pc, #524]	; (8001d38 <HAL_UART_RxCpltCallback+0x2cc>)
 8001b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b2e:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 8001b30:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8001b34:	4a7f      	ldr	r2, [pc, #508]	; (8001d34 <HAL_UART_RxCpltCallback+0x2c8>)
 8001b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fb48 	bl	80001d0 <strlen>
 8001b40:	4602      	mov	r2, r0
 8001b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b44:	4413      	add	r3, r2
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
 8001b50:	2300      	movs	r3, #0
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
					switch (idx) {
 8001b54:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8001b58:	2b06      	cmp	r3, #6
 8001b5a:	f200 8176 	bhi.w	8001e4a <HAL_UART_RxCpltCallback+0x3de>
 8001b5e:	a201      	add	r2, pc, #4	; (adr r2, 8001b64 <HAL_UART_RxCpltCallback+0xf8>)
 8001b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b64:	08001b81 	.word	0x08001b81
 8001b68:	08001b8f 	.word	0x08001b8f
 8001b6c:	08001bd7 	.word	0x08001bd7
 8001b70:	08001c59 	.word	0x08001c59
 8001b74:	08001c8b 	.word	0x08001c8b
 8001b78:	08001e03 	.word	0x08001e03
 8001b7c:	08001e2b 	.word	0x08001e2b
						case cmdRestart:
							cmd = cmdRestart;
 8001b80:	4b6e      	ldr	r3, [pc, #440]	; (8001d3c <HAL_UART_RxCpltCallback+0x2d0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
							cmd_flag = 1;
 8001b86:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <HAL_UART_RxCpltCallback+0x2c4>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]
						break;
 8001b8c:	e15d      	b.n	8001e4a <HAL_UART_RxCpltCallback+0x3de>
						case cmdEpoch:
							if (*uk != '?') {
 8001b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b3f      	cmp	r3, #63	; 0x3f
 8001b94:	f000 8154 	beq.w	8001e40 <HAL_UART_RxCpltCallback+0x3d4>
								if (strlen(uk) < 10) setDate = false;
 8001b98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b9a:	f7fe fb19 	bl	80001d0 <strlen>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b09      	cmp	r3, #9
 8001ba2:	d803      	bhi.n	8001bac <HAL_UART_RxCpltCallback+0x140>
 8001ba4:	4b66      	ldr	r3, [pc, #408]	; (8001d40 <HAL_UART_RxCpltCallback+0x2d4>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
										cmd = cmdEpoch;
										cmd_flag = 1;
									}
								}
							}
						break;
 8001baa:	e149      	b.n	8001e40 <HAL_UART_RxCpltCallback+0x3d4>
									uint32_t ep = (uint32_t)atol(uk);
 8001bac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001bae:	f009 fed9 	bl	800b964 <atol>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	61bb      	str	r3, [r7, #24]
									if (ep > epoch) {
 8001bb6:	4b63      	ldr	r3, [pc, #396]	; (8001d44 <HAL_UART_RxCpltCallback+0x2d8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	f240 813f 	bls.w	8001e40 <HAL_UART_RxCpltCallback+0x3d4>
										epoch = ep;
 8001bc2:	4a60      	ldr	r2, [pc, #384]	; (8001d44 <HAL_UART_RxCpltCallback+0x2d8>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6013      	str	r3, [r2, #0]
										cmd = cmdEpoch;
 8001bc8:	4b5c      	ldr	r3, [pc, #368]	; (8001d3c <HAL_UART_RxCpltCallback+0x2d0>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
										cmd_flag = 1;
 8001bce:	4b58      	ldr	r3, [pc, #352]	; (8001d30 <HAL_UART_RxCpltCallback+0x2c4>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
						break;
 8001bd4:	e134      	b.n	8001e40 <HAL_UART_RxCpltCallback+0x3d4>
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 8001bd6:	213a      	movs	r1, #58	; 0x3a
 8001bd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001bda:	f00a f964 	bl	800bea6 <strchr>
 8001bde:	62f8      	str	r0, [r7, #44]	; 0x2c
							if (uki) {
 8001be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00b      	beq.n	8001bfe <HAL_UART_RxCpltCallback+0x192>
								nandLen = atol(uki + 1);
 8001be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be8:	3301      	adds	r3, #1
 8001bea:	4618      	mov	r0, r3
 8001bec:	f009 feba 	bl	800b964 <atol>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <HAL_UART_RxCpltCallback+0x2cc>)
 8001bf6:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 8001bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 8001bfe:	4952      	ldr	r1, [pc, #328]	; (8001d48 <HAL_UART_RxCpltCallback+0x2dc>)
 8001c00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c02:	f00a f978 	bl	800bef6 <strstr>
 8001c06:	62f8      	str	r0, [r7, #44]	; 0x2c
							if (uki) {
 8001c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00f      	beq.n	8001c2e <HAL_UART_RxCpltCallback+0x1c2>
								uki += 2;
 8001c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c10:	3302      	adds	r3, #2
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
								nandAdr = hex2bin(uki, strlen(uki));
 8001c14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c16:	f7fe fadb 	bl	80001d0 <strlen>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4619      	mov	r1, r3
 8001c20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c22:	f7ff fc79 	bl	8001518 <hex2bin>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4a48      	ldr	r2, [pc, #288]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e0>)
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	e006      	b.n	8001c3c <HAL_UART_RxCpltCallback+0x1d0>
							} else {
								nandAdr = atol(uk);
 8001c2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c30:	f009 fe98 	bl	800b964 <atol>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	4b44      	ldr	r3, [pc, #272]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e0>)
 8001c3a:	601a      	str	r2, [r3, #0]
							}
							nandAdr += devAdr;
 8001c3c:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e0>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b43      	ldr	r3, [pc, #268]	; (8001d50 <HAL_UART_RxCpltCallback+0x2e4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4413      	add	r3, r2
 8001c46:	4a41      	ldr	r2, [pc, #260]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e0>)
 8001c48:	6013      	str	r3, [r2, #0]
							check = true;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							cmd = cmdRead;
 8001c50:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <HAL_UART_RxCpltCallback+0x2d0>)
 8001c52:	2202      	movs	r2, #2
 8001c54:	701a      	strb	r2, [r3, #0]
						break;
 8001c56:	e0f8      	b.n	8001e4a <HAL_UART_RxCpltCallback+0x3de>
						case cmdNext://"next";
							if (nandAdr < devAdr) nandAdr = devAdr;
 8001c58:	4b3c      	ldr	r3, [pc, #240]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e0>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <HAL_UART_RxCpltCallback+0x2e4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d203      	bcs.n	8001c6c <HAL_UART_RxCpltCallback+0x200>
 8001c64:	4b3a      	ldr	r3, [pc, #232]	; (8001d50 <HAL_UART_RxCpltCallback+0x2e4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a38      	ldr	r2, [pc, #224]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e0>)
 8001c6a:	6013      	str	r3, [r2, #0]
							nandAdr += nandLen;
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <HAL_UART_RxCpltCallback+0x2cc>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a34      	ldr	r2, [pc, #208]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e0>)
 8001c7a:	6013      	str	r3, [r2, #0]
							check = true;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							cmd = cmdNext;
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_UART_RxCpltCallback+0x2d0>)
 8001c84:	2203      	movs	r2, #3
 8001c86:	701a      	strb	r2, [r3, #0]
						break;
 8001c88:	e0df      	b.n	8001e4a <HAL_UART_RxCpltCallback+0x3de>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							uki = strstr(uk, "0x");
 8001c90:	492d      	ldr	r1, [pc, #180]	; (8001d48 <HAL_UART_RxCpltCallback+0x2dc>)
 8001c92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c94:	f00a f92f 	bl	800bef6 <strstr>
 8001c98:	62f8      	str	r0, [r7, #44]	; 0x2c
							if (uki) {
 8001c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00a      	beq.n	8001cb6 <HAL_UART_RxCpltCallback+0x24a>
								if (uki == uk) {
 8001ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d108      	bne.n	8001cba <HAL_UART_RxCpltCallback+0x24e>
									uki += 2;
 8001ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001caa:	3302      	adds	r3, #2
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
									hex = true;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cb4:	e001      	b.n	8001cba <HAL_UART_RxCpltCallback+0x24e>
								}
							} else uki = uk;
 8001cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
							uke = strchr(uki, ':');//adr:byte
 8001cba:	213a      	movs	r1, #58	; 0x3a
 8001cbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001cbe:	f00a f8f2 	bl	800bea6 <strchr>
 8001cc2:	6238      	str	r0, [r7, #32]
							if (uke) {
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80bc 	beq.w	8001e44 <HAL_UART_RxCpltCallback+0x3d8>
								ukb = uke + 1;
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
								char tmp[16];
								memset(tmp, 0, 16);
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f009 ff3c 	bl	800bb58 <memset>
								memcpy(tmp, uki, uke - uki);
 8001ce0:	6a3a      	ldr	r2, [r7, #32]
 8001ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f009 ff24 	bl	800bb3c <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 8001cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d02b      	beq.n	8001d54 <HAL_UART_RxCpltCallback+0x2e8>
 8001cfc:	f107 0308 	add.w	r3, r7, #8
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fa65 	bl	80001d0 <strlen>
 8001d06:	4603      	mov	r3, r0
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	f107 0308 	add.w	r3, r7, #8
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fc01 	bl	8001518 <hex2bin>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e0>)
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	e023      	b.n	8001d66 <HAL_UART_RxCpltCallback+0x2fa>
 8001d1e:	bf00      	nop
 8001d20:	40004800 	.word	0x40004800
 8001d24:	20000b42 	.word	0x20000b42
 8001d28:	20000b40 	.word	0x20000b40
 8001d2c:	20000740 	.word	0x20000740
 8001d30:	2000032d 	.word	0x2000032d
 8001d34:	20000008 	.word	0x20000008
 8001d38:	20000b50 	.word	0x20000b50
 8001d3c:	2000032e 	.word	0x2000032e
 8001d40:	20000b44 	.word	0x20000b44
 8001d44:	20000044 	.word	0x20000044
 8001d48:	0800c940 	.word	0x0800c940
 8001d4c:	20000b4c 	.word	0x20000b4c
 8001d50:	20000b48 	.word	0x20000b48
								    else nandAdr = atol(tmp);
 8001d54:	f107 0308 	add.w	r3, r7, #8
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f009 fe03 	bl	800b964 <atol>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b5f      	ldr	r3, [pc, #380]	; (8001ee0 <HAL_UART_RxCpltCallback+0x474>)
 8001d64:	601a      	str	r2, [r3, #0]
								uki = ukb;
 8001d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
								uke = strchr(uki, ':');//byte:len
 8001d6a:	213a      	movs	r1, #58	; 0x3a
 8001d6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d6e:	f00a f89a 	bl	800bea6 <strchr>
 8001d72:	6238      	str	r0, [r7, #32]
								if (uke) {
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_UART_RxCpltCallback+0x326>
									nandLen = atol(uke + 1);
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f009 fdf0 	bl	800b964 <atol>
 8001d84:	4603      	mov	r3, r0
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b56      	ldr	r3, [pc, #344]	; (8001ee4 <HAL_UART_RxCpltCallback+0x478>)
 8001d8a:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 8001d92:	4955      	ldr	r1, [pc, #340]	; (8001ee8 <HAL_UART_RxCpltCallback+0x47c>)
 8001d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d96:	f00a f8ae 	bl	800bef6 <strstr>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d006      	beq.n	8001dae <HAL_UART_RxCpltCallback+0x342>
									ukb += 2;
 8001da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da2:	3302      	adds	r3, #2
 8001da4:	62bb      	str	r3, [r7, #40]	; 0x28
									hex = true;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001dac:	e002      	b.n	8001db4 <HAL_UART_RxCpltCallback+0x348>
								} else hex = false;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 8001db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00d      	beq.n	8001dd8 <HAL_UART_RxCpltCallback+0x36c>
 8001dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dbe:	f7fe fa07 	bl	80001d0 <strlen>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dca:	f7ff fba5 	bl	8001518 <hex2bin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4b46      	ldr	r3, [pc, #280]	; (8001eec <HAL_UART_RxCpltCallback+0x480>)
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	e006      	b.n	8001de6 <HAL_UART_RxCpltCallback+0x37a>
								    else nandByte = (uint8_t)atol(ukb);
 8001dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dda:	f009 fdc3 	bl	800b964 <atol>
 8001dde:	4603      	mov	r3, r0
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b42      	ldr	r3, [pc, #264]	; (8001eec <HAL_UART_RxCpltCallback+0x480>)
 8001de4:	701a      	strb	r2, [r3, #0]
								nandAdr += devAdr;
 8001de6:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <HAL_UART_RxCpltCallback+0x474>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b41      	ldr	r3, [pc, #260]	; (8001ef0 <HAL_UART_RxCpltCallback+0x484>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a3b      	ldr	r2, [pc, #236]	; (8001ee0 <HAL_UART_RxCpltCallback+0x474>)
 8001df2:	6013      	str	r3, [r2, #0]
								check = true;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
								cmd = cmdWrite;
 8001dfa:	4b3e      	ldr	r3, [pc, #248]	; (8001ef4 <HAL_UART_RxCpltCallback+0x488>)
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 8001e00:	e020      	b.n	8001e44 <HAL_UART_RxCpltCallback+0x3d8>
						case cmdErase://"erase:0" //erase:block_number from 0..1023
						{
							uint32_t blk = atol(uk);
 8001e02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e04:	f009 fdae 	bl	800b964 <atol>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	61fb      	str	r3, [r7, #28]
							if (blk < chipConf.BlockNbr) {
 8001e0c:	4b3a      	ldr	r3, [pc, #232]	; (8001ef8 <HAL_UART_RxCpltCallback+0x48c>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d218      	bcs.n	8001e48 <HAL_UART_RxCpltCallback+0x3dc>
								nandBlk = blk;
 8001e16:	4a39      	ldr	r2, [pc, #228]	; (8001efc <HAL_UART_RxCpltCallback+0x490>)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	6013      	str	r3, [r2, #0]
								cmd = cmdErase;
 8001e1c:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <HAL_UART_RxCpltCallback+0x488>)
 8001e1e:	2205      	movs	r2, #5
 8001e20:	701a      	strb	r2, [r3, #0]
								cmd_flag = 1;
 8001e22:	4b37      	ldr	r3, [pc, #220]	; (8001f00 <HAL_UART_RxCpltCallback+0x494>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 8001e28:	e00e      	b.n	8001e48 <HAL_UART_RxCpltCallback+0x3dc>
						case cmdClear://"clear" //erase block from 0..1023
							nandBlk = chipConf.BlockNbr;
 8001e2a:	4b33      	ldr	r3, [pc, #204]	; (8001ef8 <HAL_UART_RxCpltCallback+0x48c>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	4a33      	ldr	r2, [pc, #204]	; (8001efc <HAL_UART_RxCpltCallback+0x490>)
 8001e30:	6013      	str	r3, [r2, #0]
							cmd = cmdClear;
 8001e32:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <HAL_UART_RxCpltCallback+0x488>)
 8001e34:	2206      	movs	r2, #6
 8001e36:	701a      	strb	r2, [r3, #0]
							cmd_flag = 1;
 8001e38:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HAL_UART_RxCpltCallback+0x494>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
						break;
 8001e3e:	e004      	b.n	8001e4a <HAL_UART_RxCpltCallback+0x3de>
						break;
 8001e40:	bf00      	nop
 8001e42:	e002      	b.n	8001e4a <HAL_UART_RxCpltCallback+0x3de>
						break;
 8001e44:	bf00      	nop
 8001e46:	e000      	b.n	8001e4a <HAL_UART_RxCpltCallback+0x3de>
						break;
 8001e48:	bf00      	nop
					}
					if (check) {
 8001e4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d01b      	beq.n	8001e8a <HAL_UART_RxCpltCallback+0x41e>
						if ((nandAdr + nandLen) >= (chipConf.PlaneSize + devAdr)) {
 8001e52:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <HAL_UART_RxCpltCallback+0x478>)
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <HAL_UART_RxCpltCallback+0x474>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	441a      	add	r2, r3
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <HAL_UART_RxCpltCallback+0x48c>)
 8001e60:	6959      	ldr	r1, [r3, #20]
 8001e62:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <HAL_UART_RxCpltCallback+0x484>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	440b      	add	r3, r1
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d30b      	bcc.n	8001e84 <HAL_UART_RxCpltCallback+0x418>
							nandLen = chipConf.PlaneSize - nandAdr - 1;
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <HAL_UART_RxCpltCallback+0x48c>)
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_UART_RxCpltCallback+0x474>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <HAL_UART_RxCpltCallback+0x478>)
 8001e82:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 8001e84:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <HAL_UART_RxCpltCallback+0x494>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
					}
					//
					if (cmd_flag) {
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_UART_RxCpltCallback+0x494>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d014      	beq.n	8001ebc <HAL_UART_RxCpltCallback+0x450>
						if ((qStat = osMessageQueuePut(myQueHandle, (void *)&cmd, 5, 0)) != osOK) devError |= devQUE;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <HAL_UART_RxCpltCallback+0x498>)
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	2300      	movs	r3, #0
 8001e98:	2205      	movs	r2, #5
 8001e9a:	4916      	ldr	r1, [pc, #88]	; (8001ef4 <HAL_UART_RxCpltCallback+0x488>)
 8001e9c:	f006 fe60 	bl	8008b60 <osMessageQueuePut>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_UART_RxCpltCallback+0x49c>)
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_UART_RxCpltCallback+0x49c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <HAL_UART_RxCpltCallback+0x450>
 8001eae:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <HAL_UART_RxCpltCallback+0x4a0>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_UART_RxCpltCallback+0x4a0>)
 8001eba:	701a      	strb	r2, [r3, #0]
					}
					//
				}
			}
			ruk = 0;
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_UART_RxCpltCallback+0x4a4>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	801a      	strh	r2, [r3, #0]
			memset(rxBuf, 0, MAX_UART_BUF);
 8001ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4812      	ldr	r0, [pc, #72]	; (8001f14 <HAL_UART_RxCpltCallback+0x4a8>)
 8001eca:	f009 fe45 	bl	800bb58 <memset>
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4911      	ldr	r1, [pc, #68]	; (8001f18 <HAL_UART_RxCpltCallback+0x4ac>)
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f005 fae9 	bl	80074aa <HAL_UART_Receive_IT>
	}
}
 8001ed8:	bf00      	nop
 8001eda:	3738      	adds	r7, #56	; 0x38
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000b4c 	.word	0x20000b4c
 8001ee4:	20000b50 	.word	0x20000b50
 8001ee8:	0800c940 	.word	0x0800c940
 8001eec:	20000060 	.word	0x20000060
 8001ef0:	20000b48 	.word	0x20000b48
 8001ef4:	2000032e 	.word	0x2000032e
 8001ef8:	20000b64 	.word	0x20000b64
 8001efc:	20000b54 	.word	0x20000b54
 8001f00:	2000032d 	.word	0x2000032d
 8001f04:	20000324 	.word	0x20000324
 8001f08:	20000b84 	.word	0x20000b84
 8001f0c:	2000032c 	.word	0x2000032c
 8001f10:	20000b42 	.word	0x20000b42
 8001f14:	20000740 	.word	0x20000740
 8001f18:	20000b40 	.word	0x20000b40

08001f1c <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <HAL_UART_TxCpltCallback+0x24>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d102      	bne.n	8001f34 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_UART_TxCpltCallback+0x28>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
	}
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40004800 	.word	0x40004800
 8001f44:	20000040 	.word	0x20000040

08001f48 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <HAL_SPI_TxCpltCallback+0x24>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d102      	bne.n	8001f60 <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_SPI_TxCpltCallback+0x28>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
	}
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40013000 	.word	0x40013000
 8001f70:	20000041 	.word	0x20000041

08001f74 <HAL_NAND_ITCallback>:
	}
}
*/
//-------------------------------------------------------------------------------------------
void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	if (hnand->Instance == FSMC_NAND_DEVICE) {
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <HAL_NAND_ITCallback+0x28>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d104      	bne.n	8001f90 <HAL_NAND_ITCallback+0x1c>
		cb_nandCounter++;
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_NAND_ITCallback+0x2c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <HAL_NAND_ITCallback+0x2c>)
 8001f8e:	6013      	str	r3, [r2, #0]
	}
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	a0000060 	.word	0xa0000060
 8001fa0:	20000b58 	.word	0x20000b58

08001fa4 <nand_PageToBlock>:
//-------------------------------------------------------------------------------------------
uint32_t nand_PageToBlock(uint32_t page)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
    return (page * chipConf.PageSize) / chipConf.BlockSize;
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <nand_PageToBlock+0x28>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	fb03 f202 	mul.w	r2, r3, r2
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <nand_PageToBlock+0x28>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000b64 	.word	0x20000b64

08001fd0 <nand_BlockToPage>:
uint32_t nand_BlockToPage(uint32_t blk)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	return (blk * chipConf.BlockSize) / chipConf.PageSize;
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <nand_BlockToPage+0x28>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	fb03 f202 	mul.w	r2, r3, r2
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <nand_BlockToPage+0x28>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000b64 	.word	0x20000b64

08001ffc <isPageEmpty>:
bool isPageEmpty(uint32_t page)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	return true;
 8002004:	2301      	movs	r3, #1
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	0000      	movs	r0, r0
 8002014:	0000      	movs	r0, r0
	...

08002018 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	b0ab      	sub	sp, #172	; 0xac
 800201c:	af04      	add	r7, sp, #16
 800201e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */


	char *stx = (char *)calloc(1, MAX_UART_BUF);
 8002020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002024:	2001      	movs	r0, #1
 8002026:	f009 fca1 	bl	800b96c <calloc>
 800202a:	4603      	mov	r3, r0
 800202c:	663b      	str	r3, [r7, #96]	; 0x60
#ifdef SET_SWV
	char stz[MAX_TMP_SIZE];
#endif


	HAL_Delay(500);
 800202e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002032:	f001 fc71 	bl	8003918 <HAL_Delay>
	Report(0, "%s", eol);
 8002036:	4ba6      	ldr	r3, [pc, #664]	; (80022d0 <defThread+0x2b8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	49a5      	ldr	r1, [pc, #660]	; (80022d4 <defThread+0x2bc>)
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff fcae 	bl	80019a0 <Report>
	Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8002044:	4ba4      	ldr	r3, [pc, #656]	; (80022d8 <defThread+0x2c0>)
 8002046:	681c      	ldr	r4, [r3, #0]
 8002048:	f009 fb5c 	bl	800b704 <xPortGetFreeHeapSize>
 800204c:	4602      	mov	r2, r0
 800204e:	4ba0      	ldr	r3, [pc, #640]	; (80022d0 <defThread+0x2b8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	9302      	str	r3, [sp, #8]
 8002054:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	9200      	str	r2, [sp, #0]
 800205c:	4b9f      	ldr	r3, [pc, #636]	; (80022dc <defThread+0x2c4>)
 800205e:	4622      	mov	r2, r4
 8002060:	499f      	ldr	r1, [pc, #636]	; (80022e0 <defThread+0x2c8>)
 8002062:	2001      	movs	r0, #1
 8002064:	f7ff fc9c 	bl	80019a0 <Report>


	uint8_t next_block_erase = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint32_t iBlk, stik;
	NAND_AddressTypeDef clr = {
 800206e:	2300      	movs	r3, #0
 8002070:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002074:	2301      	movs	r3, #1
 8002076:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800207a:	2300      	movs	r3, #0
 800207c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		.Page = 0,
		.Plane = 1,
		.Block = 0
	};
	uint8_t nand_show = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	bool readed = false;
 8002086:	2300      	movs	r3, #0
 8002088:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
	char cid[32];
	if (nandState == HAL_NAND_STATE_READY) {
 800208c:	4b95      	ldr	r3, [pc, #596]	; (80022e4 <defThread+0x2cc>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d15a      	bne.n	800214a <defThread+0x132>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 8002094:	4b94      	ldr	r3, [pc, #592]	; (80022e8 <defThread+0x2d0>)
 8002096:	785b      	ldrb	r3, [r3, #1]
 8002098:	22f1      	movs	r2, #241	; 0xf1
 800209a:	4293      	cmp	r3, r2
 800209c:	d108      	bne.n	80020b0 <defThread+0x98>
 800209e:	4b93      	ldr	r3, [pc, #588]	; (80022ec <defThread+0x2d4>)
 80020a0:	6819      	ldr	r1, [r3, #0]
 80020a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a6:	2220      	movs	r2, #32
 80020a8:	4618      	mov	r0, r3
 80020aa:	f009 ff11 	bl	800bed0 <strncpy>
 80020ae:	e006      	b.n	80020be <defThread+0xa6>
		                               else strcpy(cid, "UNKNOWN");
 80020b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b4:	4a8e      	ldr	r2, [pc, #568]	; (80022f0 <defThread+0x2d8>)
 80020b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020ba:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 80020be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020c0:	4a8c      	ldr	r2, [pc, #560]	; (80022f4 <defThread+0x2dc>)
 80020c2:	6810      	ldr	r0, [r2, #0]
 80020c4:	6018      	str	r0, [r3, #0]
 80020c6:	8892      	ldrh	r2, [r2, #4]
 80020c8:	809a      	strh	r2, [r3, #4]
		uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 80020ca:	4b87      	ldr	r3, [pc, #540]	; (80022e8 <defThread+0x2d0>)
 80020cc:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 80020d4:	e015      	b.n	8002102 <defThread+0xea>
 80020d6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80020d8:	f7fe f87a 	bl	80001d0 <strlen>
 80020dc:	4602      	mov	r2, r0
 80020de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020e0:	1898      	adds	r0, r3, r2
 80020e2:	f997 3089 	ldrsb.w	r3, [r7, #137]	; 0x89
 80020e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80020e8:	4413      	add	r3, r2
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4982      	ldr	r1, [pc, #520]	; (80022f8 <defThread+0x2e0>)
 80020f0:	f009 feaa 	bl	800be48 <siprintf>
 80020f4:	f997 3089 	ldrsb.w	r3, [r7, #137]	; 0x89
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	3301      	adds	r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 8002102:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8002106:	2b04      	cmp	r3, #4
 8002108:	d9e5      	bls.n	80020d6 <defThread+0xbe>
		sprintf(stx+strlen(stx),
 800210a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800210c:	f7fe f860 	bl	80001d0 <strlen>
 8002110:	4602      	mov	r2, r0
 8002112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002114:	1898      	adds	r0, r3, r2
				"\n\tMakerID=%02X\n\tDevice_Id=%02X '%s'\n\tThird_Id=%02X\n\tFourth_Id=%02X\n\tPlane_Id=%02X",
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002116:	4b74      	ldr	r3, [pc, #464]	; (80022e8 <defThread+0x2d0>)
 8002118:	781b      	ldrb	r3, [r3, #0]
		sprintf(stx+strlen(stx),
 800211a:	461c      	mov	r4, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 800211c:	4b72      	ldr	r3, [pc, #456]	; (80022e8 <defThread+0x2d0>)
 800211e:	785b      	ldrb	r3, [r3, #1]
		sprintf(stx+strlen(stx),
 8002120:	461d      	mov	r5, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002122:	4b71      	ldr	r3, [pc, #452]	; (80022e8 <defThread+0x2d0>)
 8002124:	789b      	ldrb	r3, [r3, #2]
		sprintf(stx+strlen(stx),
 8002126:	461a      	mov	r2, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002128:	4b6f      	ldr	r3, [pc, #444]	; (80022e8 <defThread+0x2d0>)
 800212a:	78db      	ldrb	r3, [r3, #3]
		sprintf(stx+strlen(stx),
 800212c:	4619      	mov	r1, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 800212e:	4b6e      	ldr	r3, [pc, #440]	; (80022e8 <defThread+0x2d0>)
 8002130:	791b      	ldrb	r3, [r3, #4]
		sprintf(stx+strlen(stx),
 8002132:	9303      	str	r3, [sp, #12]
 8002134:	9102      	str	r1, [sp, #8]
 8002136:	9201      	str	r2, [sp, #4]
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	462b      	mov	r3, r5
 8002140:	4622      	mov	r2, r4
 8002142:	496e      	ldr	r1, [pc, #440]	; (80022fc <defThread+0x2e4>)
 8002144:	f009 fe80 	bl	800be48 <siprintf>
 8002148:	e00c      	b.n	8002164 <defThread+0x14c>
	} else {
			sprintf(stx,
					"NAND: Error nandStatus='%s'(%d)",
					nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 800214a:	4b66      	ldr	r3, [pc, #408]	; (80022e4 <defThread+0x2cc>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx,
 8002152:	4a6b      	ldr	r2, [pc, #428]	; (8002300 <defThread+0x2e8>)
 8002154:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002158:	4b62      	ldr	r3, [pc, #392]	; (80022e4 <defThread+0x2cc>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4969      	ldr	r1, [pc, #420]	; (8002304 <defThread+0x2ec>)
 800215e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002160:	f009 fe72 	bl	800be48 <siprintf>
	}
	Report(1, "%s%s", stx, eol);
 8002164:	4b5a      	ldr	r3, [pc, #360]	; (80022d0 <defThread+0x2b8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800216a:	4967      	ldr	r1, [pc, #412]	; (8002308 <defThread+0x2f0>)
 800216c:	2001      	movs	r0, #1
 800216e:	f7ff fc17 	bl	80019a0 <Report>


	uint16_t err_color = BLACK;
 8002172:	2300      	movs	r3, #0
 8002174:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 8002178:	4b64      	ldr	r3, [pc, #400]	; (800230c <defThread+0x2f4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	785b      	ldrb	r3, [r3, #1]
 800217e:	b29b      	uxth	r3, r3
 8002180:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002184:	9200      	str	r2, [sp, #0]
 8002186:	22ef      	movs	r2, #239	; 0xef
 8002188:	2100      	movs	r1, #0
 800218a:	2000      	movs	r0, #0
 800218c:	f000 ff0d 	bl	8002faa <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8002190:	4b5e      	ldr	r3, [pc, #376]	; (800230c <defThread+0x2f4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	785b      	ldrb	r3, [r3, #1]
 8002196:	b29b      	uxth	r3, r3
 8002198:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800219c:	b299      	uxth	r1, r3
 800219e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	23ef      	movs	r3, #239	; 0xef
 80021a6:	22ef      	movs	r2, #239	; 0xef
 80021a8:	2000      	movs	r0, #0
 80021aa:	f000 fefe 	bl	8002faa <ST7789_Fill>

	sprintf(stx, "NAND : %s", cid);
 80021ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b2:	461a      	mov	r2, r3
 80021b4:	4956      	ldr	r1, [pc, #344]	; (8002310 <defThread+0x2f8>)
 80021b6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80021b8:	f009 fe46 	bl	800be48 <siprintf>
	mkLineCenter(stx, ST7789_WIDTH / tFont->width);
 80021bc:	4b55      	ldr	r3, [pc, #340]	; (8002314 <defThread+0x2fc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	23f0      	movs	r3, #240	; 0xf0
 80021c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	4619      	mov	r1, r3
 80021ce:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80021d0:	f000 fff8 	bl	80031c4 <mkLineCenter>
	//sprintf(stx+strlen(stx), "Maker:0x%02X\nchipID:0x%02X\n3-rd:0x%02X\n4-th:0x%02X\n5-th:0x%02X",
	//		                 nandID.Maker_Id, nandID.Device_Id, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
	sprintf(stx+strlen(stx),
 80021d4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80021d6:	f7fd fffb 	bl	80001d0 <strlen>
 80021da:	4602      	mov	r2, r0
 80021dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021de:	189c      	adds	r4, r3, r2
 80021e0:	4b4d      	ldr	r3, [pc, #308]	; (8002318 <defThread+0x300>)
 80021e2:	681d      	ldr	r5, [r3, #0]
 80021e4:	4b4c      	ldr	r3, [pc, #304]	; (8002318 <defThread+0x300>)
 80021e6:	685e      	ldr	r6, [r3, #4]
			"PageSize:%lu\nSpareAreaSize:%lu\nBlockSize:%lu KB\nBlockNbr:%lu\nPlaneNbr:%lu\nPlaneSize:%lu MB",
			chipConf.PageSize,
			chipConf.SpareAreaSize,
			chipConf.BlockSize / 1024,
 80021e8:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <defThread+0x300>)
 80021ea:	689b      	ldr	r3, [r3, #8]
	sprintf(stx+strlen(stx),
 80021ec:	0a9b      	lsrs	r3, r3, #10
 80021ee:	4a4a      	ldr	r2, [pc, #296]	; (8002318 <defThread+0x300>)
 80021f0:	68d2      	ldr	r2, [r2, #12]
 80021f2:	4949      	ldr	r1, [pc, #292]	; (8002318 <defThread+0x300>)
 80021f4:	6909      	ldr	r1, [r1, #16]
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			chipConf.PlaneSize / 1024 / 1024);
 80021f6:	4848      	ldr	r0, [pc, #288]	; (8002318 <defThread+0x300>)
 80021f8:	6940      	ldr	r0, [r0, #20]
	sprintf(stx+strlen(stx),
 80021fa:	0d00      	lsrs	r0, r0, #20
 80021fc:	9003      	str	r0, [sp, #12]
 80021fe:	9102      	str	r1, [sp, #8]
 8002200:	9201      	str	r2, [sp, #4]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	4633      	mov	r3, r6
 8002206:	462a      	mov	r2, r5
 8002208:	4944      	ldr	r1, [pc, #272]	; (800231c <defThread+0x304>)
 800220a:	4620      	mov	r0, r4
 800220c:	f009 fe1c 	bl	800be48 <siprintf>
	if (cb_nandCounter) sprintf(stx+strlen(stx), "\nCallBack:%lu", cb_nandCounter);
 8002210:	4b43      	ldr	r3, [pc, #268]	; (8002320 <defThread+0x308>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00b      	beq.n	8002230 <defThread+0x218>
 8002218:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800221a:	f7fd ffd9 	bl	80001d0 <strlen>
 800221e:	4602      	mov	r2, r0
 8002220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002222:	4413      	add	r3, r2
 8002224:	4a3e      	ldr	r2, [pc, #248]	; (8002320 <defThread+0x308>)
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	493e      	ldr	r1, [pc, #248]	; (8002324 <defThread+0x30c>)
 800222a:	4618      	mov	r0, r3
 800222c:	f009 fe0c 	bl	800be48 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 8002230:	4b38      	ldr	r3, [pc, #224]	; (8002314 <defThread+0x2fc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	785b      	ldrb	r3, [r3, #1]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fa9e 	bl	8000778 <__aeabi_i2d>
 800223c:	4604      	mov	r4, r0
 800223e:	460d      	mov	r5, r1
 8002240:	4b34      	ldr	r3, [pc, #208]	; (8002314 <defThread+0x2fc>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	785b      	ldrb	r3, [r3, #1]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fa96 	bl	8000778 <__aeabi_i2d>
 800224c:	a31e      	add	r3, pc, #120	; (adr r3, 80022c8 <defThread+0x2b0>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe f815 	bl	8000280 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4620      	mov	r0, r4
 800225c:	4629      	mov	r1, r5
 800225e:	f7fe f93f 	bl	80004e0 <__adddf3>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	f7fe faef 	bl	800084c <__aeabi_d2uiz>
 800226e:	4603      	mov	r3, r0
 8002270:	b298      	uxth	r0, r3
 8002272:	4b28      	ldr	r3, [pc, #160]	; (8002314 <defThread+0x2fc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a2c      	ldr	r2, [pc, #176]	; (8002328 <defThread+0x310>)
 8002278:	8812      	ldrh	r2, [r2, #0]
 800227a:	43d2      	mvns	r2, r2
 800227c:	b292      	uxth	r2, r2
 800227e:	492a      	ldr	r1, [pc, #168]	; (8002328 <defThread+0x310>)
 8002280:	8809      	ldrh	r1, [r1, #0]
 8002282:	9102      	str	r1, [sp, #8]
 8002284:	9201      	str	r2, [sp, #4]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	9200      	str	r2, [sp, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800228e:	4601      	mov	r1, r0
 8002290:	2000      	movs	r0, #0
 8002292:	f000 ff41 	bl	8003118 <ST7789_WriteString>
					   stx,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 8002296:	2001      	movs	r0, #1
 8002298:	f000 fcf8 	bl	8002c8c <ipsOn>


	bool loop = true;
 800229c:	2301      	movs	r3, #1
 800229e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	bool led = false;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	uint32_t tmr = get_tmr(1);
 80022a8:	2001      	movs	r0, #1
 80022aa:	f7ff fa59 	bl	8001760 <get_tmr>
 80022ae:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

	uint8_t qcmd = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t prio = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	osStatus_t qs = osOK;
 80022be:	2300      	movs	r3, #0
 80022c0:	67fb      	str	r3, [r7, #124]	; 0x7c

  /* Infinite loop */

	while (loop) {
 80022c2:	e35d      	b.n	8002980 <defThread+0x968>
 80022c4:	f3af 8000 	nop.w
 80022c8:	33333333 	.word	0x33333333
 80022cc:	3feb3333 	.word	0x3feb3333
 80022d0:	20000004 	.word	0x20000004
 80022d4:	0800c944 	.word	0x0800c944
 80022d8:	20000000 	.word	0x20000000
 80022dc:	0800ed40 	.word	0x0800ed40
 80022e0:	0800c948 	.word	0x0800c948
 80022e4:	20000061 	.word	0x20000061
 80022e8:	20000b5c 	.word	0x20000b5c
 80022ec:	20000064 	.word	0x20000064
 80022f0:	0800c974 	.word	0x0800c974
 80022f4:	0800c97c 	.word	0x0800c97c
 80022f8:	0800c984 	.word	0x0800c984
 80022fc:	0800c98c 	.word	0x0800c98c
 8002300:	20000068 	.word	0x20000068
 8002304:	0800c9e0 	.word	0x0800c9e0
 8002308:	0800ca00 	.word	0x0800ca00
 800230c:	20000058 	.word	0x20000058
 8002310:	0800ca08 	.word	0x0800ca08
 8002314:	2000005c 	.word	0x2000005c
 8002318:	20000b64 	.word	0x20000b64
 800231c:	0800ca14 	.word	0x0800ca14
 8002320:	20000b58 	.word	0x20000b58
 8002324:	0800ca70 	.word	0x0800ca70
 8002328:	20000b46 	.word	0x20000b46

		if (check_tmr(tmr)) {
 800232c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002330:	f7ff fa23 	bl	800177a <check_tmr>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 8083 	beq.w	8002442 <defThread+0x42a>
			tmr = get_tmr(1);
 800233c:	2001      	movs	r0, #1
 800233e:	f7ff fa0f 	bl	8001760 <get_tmr>
 8002342:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
			//
			sec2str(stx);
 8002346:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002348:	f7ff fa90 	bl	800186c <sec2str>
#ifdef SET_SWV
			strcpy(stz, stx);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(stx, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 800234c:	4b9f      	ldr	r3, [pc, #636]	; (80025cc <defThread+0x5b4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	23f0      	movs	r3, #240	; 0xf0
 8002356:	fb93 f3f2 	sdiv	r3, r3, r2
 800235a:	b29b      	uxth	r3, r3
 800235c:	4619      	mov	r1, r3
 800235e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002360:	f000 ff30 	bl	80031c4 <mkLineCenter>
 8002364:	4601      	mov	r1, r0
 8002366:	4b99      	ldr	r3, [pc, #612]	; (80025cc <defThread+0x5b4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800236e:	9202      	str	r2, [sp, #8]
 8002370:	221f      	movs	r2, #31
 8002372:	9201      	str	r2, [sp, #4]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	9200      	str	r2, [sp, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	460a      	mov	r2, r1
 800237c:	2100      	movs	r1, #0
 800237e:	2008      	movs	r0, #8
 8002380:	f000 feca 	bl	8003118 <ST7789_WriteString>

			sprintf(stx, "Error: 0x%02X", devError);
 8002384:	4b92      	ldr	r3, [pc, #584]	; (80025d0 <defThread+0x5b8>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	4992      	ldr	r1, [pc, #584]	; (80025d4 <defThread+0x5bc>)
 800238c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800238e:	f009 fd5b 	bl	800be48 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 8002392:	4b8f      	ldr	r3, [pc, #572]	; (80025d0 <defThread+0x5b8>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d004      	beq.n	80023a4 <defThread+0x38c>
 800239a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800239e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 80023a2:	e002      	b.n	80023aa <defThread+0x392>
 80023a4:	2300      	movs	r3, #0
 80023a6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(stx, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 80023aa:	4b88      	ldr	r3, [pc, #544]	; (80025cc <defThread+0x5b4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	785b      	ldrb	r3, [r3, #1]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80023b6:	b29c      	uxth	r4, r3
 80023b8:	4b84      	ldr	r3, [pc, #528]	; (80025cc <defThread+0x5b4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	23f0      	movs	r3, #240	; 0xf0
 80023c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	4619      	mov	r1, r3
 80023ca:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80023cc:	f000 fefa 	bl	80031c4 <mkLineCenter>
 80023d0:	4601      	mov	r1, r0
 80023d2:	4b7e      	ldr	r3, [pc, #504]	; (80025cc <defThread+0x5b4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023da:	9202      	str	r2, [sp, #8]
 80023dc:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80023e0:	9201      	str	r2, [sp, #4]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	9200      	str	r2, [sp, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	460a      	mov	r2, r1
 80023ea:	4621      	mov	r1, r4
 80023ec:	2000      	movs	r0, #0
 80023ee:	f000 fe93 	bl	8003118 <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 80023f2:	4b79      	ldr	r3, [pc, #484]	; (80025d8 <defThread+0x5c0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d013      	beq.n	8002422 <defThread+0x40a>
				if (qs != qStat) {
 80023fa:	4b77      	ldr	r3, [pc, #476]	; (80025d8 <defThread+0x5c0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002400:	429a      	cmp	r2, r3
 8002402:	d00e      	beq.n	8002422 <defThread+0x40a>
					Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8002404:	4b74      	ldr	r3, [pc, #464]	; (80025d8 <defThread+0x5c0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff f835 	bl	8001478 <get_qStat>
 800240e:	4602      	mov	r2, r0
 8002410:	4b72      	ldr	r3, [pc, #456]	; (80025dc <defThread+0x5c4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4972      	ldr	r1, [pc, #456]	; (80025e0 <defThread+0x5c8>)
 8002416:	2001      	movs	r0, #1
 8002418:	f7ff fac2 	bl	80019a0 <Report>
					qs = qStat;
 800241c:	4b6e      	ldr	r3, [pc, #440]	; (80025d8 <defThread+0x5c0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	67fb      	str	r3, [r7, #124]	; 0x7c
				}
			}

			if (devError) led = true; else led = false;
 8002422:	4b6b      	ldr	r3, [pc, #428]	; (80025d0 <defThread+0x5b8>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <defThread+0x41a>
 800242a:	2301      	movs	r3, #1
 800242c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8002430:	e002      	b.n	8002438 <defThread+0x420>
 8002432:	2300      	movs	r3, #0
 8002434:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			errLedOn(led);
 8002438:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff f939 	bl	80016b4 <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 5)) != osOK) {
 8002442:	4b68      	ldr	r3, [pc, #416]	; (80025e4 <defThread+0x5cc>)
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800244a:	f107 0123 	add.w	r1, r7, #35	; 0x23
 800244e:	2305      	movs	r3, #5
 8002450:	f006 fbe6 	bl	8008c20 <osMessageQueueGet>
 8002454:	4603      	mov	r3, r0
 8002456:	4a60      	ldr	r2, [pc, #384]	; (80025d8 <defThread+0x5c0>)
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b5f      	ldr	r3, [pc, #380]	; (80025d8 <defThread+0x5c0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d021      	beq.n	80024a6 <defThread+0x48e>
			if (qs != qStat) qs = qStat;
 8002462:	4b5d      	ldr	r3, [pc, #372]	; (80025d8 <defThread+0x5c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002468:	429a      	cmp	r2, r3
 800246a:	d002      	beq.n	8002472 <defThread+0x45a>
 800246c:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <defThread+0x5c0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	67fb      	str	r3, [r7, #124]	; 0x7c
			if (qStat != osErrorTimeout) {
 8002472:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <defThread+0x5c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f113 0f02 	cmn.w	r3, #2
 800247a:	f000 822f 	beq.w	80028dc <defThread+0x8c4>
				devError |= devQUE;
 800247e:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <defThread+0x5b8>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002486:	b2da      	uxtb	r2, r3
 8002488:	4b51      	ldr	r3, [pc, #324]	; (80025d0 <defThread+0x5b8>)
 800248a:	701a      	strb	r2, [r3, #0]
				Report(1, "OS: %s%s", get_qStat(qStat), eol);
 800248c:	4b52      	ldr	r3, [pc, #328]	; (80025d8 <defThread+0x5c0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe fff1 	bl	8001478 <get_qStat>
 8002496:	4602      	mov	r2, r0
 8002498:	4b50      	ldr	r3, [pc, #320]	; (80025dc <defThread+0x5c4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4950      	ldr	r1, [pc, #320]	; (80025e0 <defThread+0x5c8>)
 800249e:	2001      	movs	r0, #1
 80024a0:	f7ff fa7e 	bl	80019a0 <Report>
 80024a4:	e21a      	b.n	80028dc <defThread+0x8c4>
			}
		} else {
			Report(1, "Command(%u): '%s'%s", qcmd, str_cmds[cmd], eol);
 80024a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024aa:	4619      	mov	r1, r3
 80024ac:	4b4e      	ldr	r3, [pc, #312]	; (80025e8 <defThread+0x5d0>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b4e      	ldr	r3, [pc, #312]	; (80025ec <defThread+0x5d4>)
 80024b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024b8:	4b48      	ldr	r3, [pc, #288]	; (80025dc <defThread+0x5c4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	460a      	mov	r2, r1
 80024c2:	494b      	ldr	r1, [pc, #300]	; (80025f0 <defThread+0x5d8>)
 80024c4:	2001      	movs	r0, #1
 80024c6:	f7ff fa6b 	bl	80019a0 <Report>
			nand_show = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			switch (qcmd) {
 80024d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024d4:	2b06      	cmp	r3, #6
 80024d6:	f200 8150 	bhi.w	800277a <defThread+0x762>
 80024da:	a201      	add	r2, pc, #4	; (adr r2, 80024e0 <defThread+0x4c8>)
 80024dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e0:	080024fd 	.word	0x080024fd
 80024e4:	08002505 	.word	0x08002505
 80024e8:	08002511 	.word	0x08002511
 80024ec:	080025a1 	.word	0x080025a1
 80024f0:	080026a1 	.word	0x080026a1
 80024f4:	08002619 	.word	0x08002619
 80024f8:	08002683 	.word	0x08002683
				case cmdRestart:
					loop = false;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		  		break;
 8002502:	e13a      	b.n	800277a <defThread+0x762>
		  		break;
				case cmdEpoch:
					set_Date(epoch);
 8002504:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <defThread+0x5dc>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff f947 	bl	800179c <set_Date>
				break;
 800250e:	e134      	b.n	800277a <defThread+0x762>
				case cmdRead:
				{
					uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 8002510:	4b39      	ldr	r3, [pc, #228]	; (80025f8 <defThread+0x5e0>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b39      	ldr	r3, [pc, #228]	; (80025fc <defThread+0x5e4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	1ad2      	subs	r2, r2, r3
 800251a:	4b39      	ldr	r3, [pc, #228]	; (8002600 <defThread+0x5e8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	653b      	str	r3, [r7, #80]	; 0x50
					NAND_AddressTypeDef addr = {
 8002524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002526:	b29b      	uxth	r3, r3
 8002528:	83bb      	strh	r3, [r7, #28]
 800252a:	2301      	movs	r3, #1
 800252c:	83fb      	strh	r3, [r7, #30]
						.Page = p,
						.Plane = 1,
						.Block = nand_PageToBlock(p)
 800252e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002530:	f7ff fd38 	bl	8001fa4 <nand_PageToBlock>
 8002534:	4603      	mov	r3, r0
					NAND_AddressTypeDef addr = {
 8002536:	b29b      	uxth	r3, r3
 8002538:	843b      	strh	r3, [r7, #32]
					};
					Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 800253a:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <defThread+0x5e0>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4b31      	ldr	r3, [pc, #196]	; (8002604 <defThread+0x5ec>)
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	461c      	mov	r4, r3
							  nandAdr, nandLen, addr.Page, addr.Block, eol);
 8002544:	8bbb      	ldrh	r3, [r7, #28]
					Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8002546:	4619      	mov	r1, r3
							  nandAdr, nandLen, addr.Page, addr.Block, eol);
 8002548:	8c3b      	ldrh	r3, [r7, #32]
					Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 800254a:	4618      	mov	r0, r3
 800254c:	4b23      	ldr	r3, [pc, #140]	; (80025dc <defThread+0x5c4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	9302      	str	r3, [sp, #8]
 8002552:	9001      	str	r0, [sp, #4]
 8002554:	9100      	str	r1, [sp, #0]
 8002556:	4623      	mov	r3, r4
 8002558:	492b      	ldr	r1, [pc, #172]	; (8002608 <defThread+0x5f0>)
 800255a:	2001      	movs	r0, #1
 800255c:	f7ff fa20 	bl	80019a0 <Report>
					if (rdBuf) {
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <defThread+0x5f4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8105 	beq.w	8002774 <defThread+0x75c>
						if (HAL_NAND_Read_Page_8b(nandPort, &addr, rdBuf, 1) == HAL_OK) {
 800256a:	4b29      	ldr	r3, [pc, #164]	; (8002610 <defThread+0x5f8>)
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	4b27      	ldr	r3, [pc, #156]	; (800260c <defThread+0x5f4>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	f107 011c 	add.w	r1, r7, #28
 8002576:	2301      	movs	r3, #1
 8002578:	f002 f9c7 	bl	800490a <HAL_NAND_Read_Page_8b>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <defThread+0x578>
							nand_show = 1;
 8002582:	2301      	movs	r3, #1
 8002584:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
							readed = true;
 8002588:	2301      	movs	r3, #1
 800258a:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
						} else devError |= devNAND;
					}
				}
				break;
 800258e:	e0f1      	b.n	8002774 <defThread+0x75c>
						} else devError |= devNAND;
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <defThread+0x5b8>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	f043 0320 	orr.w	r3, r3, #32
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <defThread+0x5b8>)
 800259c:	701a      	strb	r2, [r3, #0]
				break;
 800259e:	e0e9      	b.n	8002774 <defThread+0x75c>
				case cmdNext:
					Report(1, "Read next nand adr:0x%X len:%lu%s",
 80025a0:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <defThread+0x5e0>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b17      	ldr	r3, [pc, #92]	; (8002604 <defThread+0x5ec>)
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <defThread+0x5c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	460b      	mov	r3, r1
 80025b2:	4918      	ldr	r1, [pc, #96]	; (8002614 <defThread+0x5fc>)
 80025b4:	2001      	movs	r0, #1
 80025b6:	f7ff f9f3 	bl	80019a0 <Report>
							  nandAdr, nandLen, eol);
					if (rdBuf) nand_show = 2;
 80025ba:	4b14      	ldr	r3, [pc, #80]	; (800260c <defThread+0x5f4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80da 	beq.w	8002778 <defThread+0x760>
 80025c4:	2302      	movs	r3, #2
 80025c6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
				break;
 80025ca:	e0d5      	b.n	8002778 <defThread+0x760>
 80025cc:	20000058 	.word	0x20000058
 80025d0:	2000032c 	.word	0x2000032c
 80025d4:	0800ca80 	.word	0x0800ca80
 80025d8:	20000b84 	.word	0x20000b84
 80025dc:	20000004 	.word	0x20000004
 80025e0:	0800ca90 	.word	0x0800ca90
 80025e4:	20000324 	.word	0x20000324
 80025e8:	2000032e 	.word	0x2000032e
 80025ec:	20000024 	.word	0x20000024
 80025f0:	0800ca9c 	.word	0x0800ca9c
 80025f4:	20000044 	.word	0x20000044
 80025f8:	20000b4c 	.word	0x20000b4c
 80025fc:	20000b48 	.word	0x20000b48
 8002600:	20000b64 	.word	0x20000b64
 8002604:	20000b50 	.word	0x20000b50
 8002608:	0800cab0 	.word	0x0800cab0
 800260c:	20000b7c 	.word	0x20000b7c
 8002610:	20000054 	.word	0x20000054
 8002614:	0800cae0 	.word	0x0800cae0
				case cmdErase:
				{
					NAND_AddressTypeDef addr = {
						.Page = nand_BlockToPage(nandBlk),
 8002618:	4b97      	ldr	r3, [pc, #604]	; (8002878 <defThread+0x860>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fcd7 	bl	8001fd0 <nand_BlockToPage>
 8002622:	4603      	mov	r3, r0
					NAND_AddressTypeDef addr = {
 8002624:	b29b      	uxth	r3, r3
 8002626:	82bb      	strh	r3, [r7, #20]
 8002628:	2301      	movs	r3, #1
 800262a:	82fb      	strh	r3, [r7, #22]
 800262c:	4b92      	ldr	r3, [pc, #584]	; (8002878 <defThread+0x860>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	833b      	strh	r3, [r7, #24]
						.Plane = 1,
						.Block = nandBlk
					};
					Report(1, "Erase nand block:%lu... ", addr.Block);
 8002634:	8b3b      	ldrh	r3, [r7, #24]
 8002636:	461a      	mov	r2, r3
 8002638:	4990      	ldr	r1, [pc, #576]	; (800287c <defThread+0x864>)
 800263a:	2001      	movs	r0, #1
 800263c:	f7ff f9b0 	bl	80019a0 <Report>
					uint32_t stik = HAL_GetTick();
 8002640:	f001 f95e 	bl	8003900 <HAL_GetTick>
 8002644:	65b8      	str	r0, [r7, #88]	; 0x58
					if (HAL_NAND_Erase_Block(nandPort, &addr) != HAL_OK) devError |= devNAND;
 8002646:	4b8e      	ldr	r3, [pc, #568]	; (8002880 <defThread+0x868>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f107 0214 	add.w	r2, r7, #20
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f002 fba6 	bl	8004da2 <HAL_NAND_Erase_Block>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <defThread+0x652>
 800265c:	4b89      	ldr	r3, [pc, #548]	; (8002884 <defThread+0x86c>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	f043 0320 	orr.w	r3, r3, #32
 8002664:	b2da      	uxtb	r2, r3
 8002666:	4b87      	ldr	r3, [pc, #540]	; (8002884 <defThread+0x86c>)
 8002668:	701a      	strb	r2, [r3, #0]
					Report(0, "done (%lu ms)%s", HAL_GetTick() - stik, eol);
 800266a:	f001 f949 	bl	8003900 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002672:	1ad2      	subs	r2, r2, r3
 8002674:	4b84      	ldr	r3, [pc, #528]	; (8002888 <defThread+0x870>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4984      	ldr	r1, [pc, #528]	; (800288c <defThread+0x874>)
 800267a:	2000      	movs	r0, #0
 800267c:	f7ff f990 	bl	80019a0 <Report>
				}
				break;
 8002680:	e07b      	b.n	800277a <defThread+0x762>
				case cmdClear:
					iBlk = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					Report(1, "Erase chip ");
 8002688:	4981      	ldr	r1, [pc, #516]	; (8002890 <defThread+0x878>)
 800268a:	2001      	movs	r0, #1
 800268c:	f7ff f988 	bl	80019a0 <Report>
					next_block_erase = 1;
 8002690:	2301      	movs	r3, #1
 8002692:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					stik = HAL_GetTick();
 8002696:	f001 f933 	bl	8003900 <HAL_GetTick>
 800269a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
				break;
 800269e:	e06c      	b.n	800277a <defThread+0x762>
				case cmdWrite:
				{
					uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 80026a0:	4b7c      	ldr	r3, [pc, #496]	; (8002894 <defThread+0x87c>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b7c      	ldr	r3, [pc, #496]	; (8002898 <defThread+0x880>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	1ad2      	subs	r2, r2, r3
 80026aa:	4b7c      	ldr	r3, [pc, #496]	; (800289c <defThread+0x884>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	657b      	str	r3, [r7, #84]	; 0x54
					NAND_AddressTypeDef addr = {
 80026b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	81bb      	strh	r3, [r7, #12]
 80026ba:	2301      	movs	r3, #1
 80026bc:	81fb      	strh	r3, [r7, #14]
						.Page = p,
						.Plane = 1,
						.Block = nand_PageToBlock(p)
 80026be:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80026c0:	f7ff fc70 	bl	8001fa4 <nand_PageToBlock>
 80026c4:	4603      	mov	r3, r0
					NAND_AddressTypeDef addr = {
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	823b      	strh	r3, [r7, #16]
					};
					Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu (page:%lu blk:%lu)... ",
 80026ca:	4b72      	ldr	r3, [pc, #456]	; (8002894 <defThread+0x87c>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4b74      	ldr	r3, [pc, #464]	; (80028a0 <defThread+0x888>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	461d      	mov	r5, r3
 80026d4:	4b73      	ldr	r3, [pc, #460]	; (80028a4 <defThread+0x88c>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
							  nandAdr, nandByte, nandLen, addr.Page, addr.Block, eol);
 80026da:	89bb      	ldrh	r3, [r7, #12]
					Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu (page:%lu blk:%lu)... ",
 80026dc:	4618      	mov	r0, r3
							  nandAdr, nandByte, nandLen, addr.Page, addr.Block, eol);
 80026de:	8a3b      	ldrh	r3, [r7, #16]
					Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu (page:%lu blk:%lu)... ",
 80026e0:	461c      	mov	r4, r3
 80026e2:	4b69      	ldr	r3, [pc, #420]	; (8002888 <defThread+0x870>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	9303      	str	r3, [sp, #12]
 80026e8:	9402      	str	r4, [sp, #8]
 80026ea:	9001      	str	r0, [sp, #4]
 80026ec:	9100      	str	r1, [sp, #0]
 80026ee:	462b      	mov	r3, r5
 80026f0:	496d      	ldr	r1, [pc, #436]	; (80028a8 <defThread+0x890>)
 80026f2:	2001      	movs	r0, #1
 80026f4:	f7ff f954 	bl	80019a0 <Report>
					if (wrBuf) {
 80026f8:	4b6c      	ldr	r3, [pc, #432]	; (80028ac <defThread+0x894>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d031      	beq.n	8002764 <defThread+0x74c>
						if (isPageEmpty(addr.Page)) {
 8002700:	89bb      	ldrh	r3, [r7, #12]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fc7a 	bl	8001ffc <isPageEmpty>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d02a      	beq.n	8002764 <defThread+0x74c>
							memset(wrBuf, nandByte, nandLen);
 800270e:	4b67      	ldr	r3, [pc, #412]	; (80028ac <defThread+0x894>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a63      	ldr	r2, [pc, #396]	; (80028a0 <defThread+0x888>)
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	4611      	mov	r1, r2
 8002718:	4a62      	ldr	r2, [pc, #392]	; (80028a4 <defThread+0x88c>)
 800271a:	8812      	ldrh	r2, [r2, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f009 fa1b 	bl	800bb58 <memset>
							memset(wrBuf + nandLen, 0xff, chipConf.PageSize - nandLen);
 8002722:	4b62      	ldr	r3, [pc, #392]	; (80028ac <defThread+0x894>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a5f      	ldr	r2, [pc, #380]	; (80028a4 <defThread+0x88c>)
 8002728:	8812      	ldrh	r2, [r2, #0]
 800272a:	1898      	adds	r0, r3, r2
 800272c:	4b5b      	ldr	r3, [pc, #364]	; (800289c <defThread+0x884>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a5c      	ldr	r2, [pc, #368]	; (80028a4 <defThread+0x88c>)
 8002732:	8812      	ldrh	r2, [r2, #0]
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	461a      	mov	r2, r3
 8002738:	21ff      	movs	r1, #255	; 0xff
 800273a:	f009 fa0d 	bl	800bb58 <memset>
							if (HAL_NAND_Write_Page_8b(nandPort, &addr, wrBuf, 1) != HAL_OK) devError |= devNAND;
 800273e:	4b50      	ldr	r3, [pc, #320]	; (8002880 <defThread+0x868>)
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	4b5a      	ldr	r3, [pc, #360]	; (80028ac <defThread+0x894>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	f107 010c 	add.w	r1, r7, #12
 800274a:	2301      	movs	r3, #1
 800274c:	f002 fa04 	bl	8004b58 <HAL_NAND_Write_Page_8b>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d006      	beq.n	8002764 <defThread+0x74c>
 8002756:	4b4b      	ldr	r3, [pc, #300]	; (8002884 <defThread+0x86c>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	f043 0320 	orr.w	r3, r3, #32
 800275e:	b2da      	uxtb	r2, r3
 8002760:	4b48      	ldr	r3, [pc, #288]	; (8002884 <defThread+0x86c>)
 8002762:	701a      	strb	r2, [r3, #0]
						}
					}
					Report(0, "done%s", eol);
 8002764:	4b48      	ldr	r3, [pc, #288]	; (8002888 <defThread+0x870>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	4951      	ldr	r1, [pc, #324]	; (80028b0 <defThread+0x898>)
 800276c:	2000      	movs	r0, #0
 800276e:	f7ff f917 	bl	80019a0 <Report>
				}
				break;
 8002772:	e002      	b.n	800277a <defThread+0x762>
				break;
 8002774:	bf00      	nop
 8002776:	e000      	b.n	800277a <defThread+0x762>
				break;
 8002778:	bf00      	nop
			}
			if (nand_show) {
 800277a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80ac 	beq.w	80028dc <defThread+0x8c4>
				uint32_t adr = nandAdr;
 8002784:	4b43      	ldr	r3, [pc, #268]	; (8002894 <defThread+0x87c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	67bb      	str	r3, [r7, #120]	; 0x78
				int step = 32;
 800278a:	2320      	movs	r3, #32
 800278c:	64fb      	str	r3, [r7, #76]	; 0x4c
				uint32_t ind = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	677b      	str	r3, [r7, #116]	; 0x74
				uint32_t max_ind = nandLen;
 8002792:	4b44      	ldr	r3, [pc, #272]	; (80028a4 <defThread+0x88c>)
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	673b      	str	r3, [r7, #112]	; 0x70
				if (nand_show == 2) {
 8002798:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800279c:	2b02      	cmp	r3, #2
 800279e:	d10f      	bne.n	80027c0 <defThread+0x7a8>
					if (readed) {
 80027a0:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d009      	beq.n	80027bc <defThread+0x7a4>
						ind = adr & (chipConf.PageSize - 1);// - devAdr;
 80027a8:	4b3c      	ldr	r3, [pc, #240]	; (800289c <defThread+0x884>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80027b0:	4013      	ands	r3, r2
 80027b2:	677b      	str	r3, [r7, #116]	; 0x74
						max_ind = chipConf.PageSize;
 80027b4:	4b39      	ldr	r3, [pc, #228]	; (800289c <defThread+0x884>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	673b      	str	r3, [r7, #112]	; 0x70
 80027ba:	e001      	b.n	80027c0 <defThread+0x7a8>
					} else ind = max_ind;
 80027bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027be:	677b      	str	r3, [r7, #116]	; 0x74
				}
				if (ind < max_ind) {
 80027c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80027c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d27d      	bcs.n	80028c4 <defThread+0x8ac>
					bool done = false;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					uint32_t sch = nandLen / step;
 80027ce:	4b35      	ldr	r3, [pc, #212]	; (80028a4 <defThread+0x88c>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80027da:	66bb      	str	r3, [r7, #104]	; 0x68
					stx[0] = '\0';
 80027dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
					while (!done) {
 80027e2:	e03c      	b.n	800285e <defThread+0x846>
						sprintf(stx+strlen(stx), "%08X ", (unsigned int)adr);
 80027e4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80027e6:	f7fd fcf3 	bl	80001d0 <strlen>
 80027ea:	4602      	mov	r2, r0
 80027ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027ee:	4413      	add	r3, r2
 80027f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80027f2:	4930      	ldr	r1, [pc, #192]	; (80028b4 <defThread+0x89c>)
 80027f4:	4618      	mov	r0, r3
 80027f6:	f009 fb27 	bl	800be48 <siprintf>
						for (int i = 0; i < step; i++) sprintf(stx+strlen(stx), " %02X", rdBuf[i + ind]);
 80027fa:	2300      	movs	r3, #0
 80027fc:	667b      	str	r3, [r7, #100]	; 0x64
 80027fe:	e013      	b.n	8002828 <defThread+0x810>
 8002800:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002802:	f7fd fce5 	bl	80001d0 <strlen>
 8002806:	4602      	mov	r2, r0
 8002808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800280a:	1898      	adds	r0, r3, r2
 800280c:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <defThread+0x8a0>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002814:	440b      	add	r3, r1
 8002816:	4413      	add	r3, r2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	4927      	ldr	r1, [pc, #156]	; (80028bc <defThread+0x8a4>)
 800281e:	f009 fb13 	bl	800be48 <siprintf>
 8002822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002824:	3301      	adds	r3, #1
 8002826:	667b      	str	r3, [r7, #100]	; 0x64
 8002828:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800282a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800282c:	429a      	cmp	r2, r3
 800282e:	dbe7      	blt.n	8002800 <defThread+0x7e8>
						strcat(stx, eol);
 8002830:	4b15      	ldr	r3, [pc, #84]	; (8002888 <defThread+0x870>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002838:	f009 fb26 	bl	800be88 <strcat>
						adr += step;
 800283c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800283e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002840:	4413      	add	r3, r2
 8002842:	67bb      	str	r3, [r7, #120]	; 0x78
						ind += step;
 8002844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002846:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002848:	4413      	add	r3, r2
 800284a:	677b      	str	r3, [r7, #116]	; 0x74
						sch--;
 800284c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800284e:	3b01      	subs	r3, #1
 8002850:	66bb      	str	r3, [r7, #104]	; 0x68
						if (!sch) done = true;
 8002852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <defThread+0x846>
 8002858:	2301      	movs	r3, #1
 800285a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					while (!done) {
 800285e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002862:	f083 0301 	eor.w	r3, r3, #1
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1bb      	bne.n	80027e4 <defThread+0x7cc>
					}
					Report(0, "%s", stx);
 800286c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800286e:	4914      	ldr	r1, [pc, #80]	; (80028c0 <defThread+0x8a8>)
 8002870:	2000      	movs	r0, #0
 8002872:	f7ff f895 	bl	80019a0 <Report>
 8002876:	e031      	b.n	80028dc <defThread+0x8c4>
 8002878:	20000b54 	.word	0x20000b54
 800287c:	0800cb04 	.word	0x0800cb04
 8002880:	20000054 	.word	0x20000054
 8002884:	2000032c 	.word	0x2000032c
 8002888:	20000004 	.word	0x20000004
 800288c:	0800cb20 	.word	0x0800cb20
 8002890:	0800cb30 	.word	0x0800cb30
 8002894:	20000b4c 	.word	0x20000b4c
 8002898:	20000b48 	.word	0x20000b48
 800289c:	20000b64 	.word	0x20000b64
 80028a0:	20000060 	.word	0x20000060
 80028a4:	20000b50 	.word	0x20000b50
 80028a8:	0800cb3c 	.word	0x0800cb3c
 80028ac:	20000b80 	.word	0x20000b80
 80028b0:	0800cb7c 	.word	0x0800cb7c
 80028b4:	0800cb84 	.word	0x0800cb84
 80028b8:	20000b7c 	.word	0x20000b7c
 80028bc:	0800c984 	.word	0x0800c984
 80028c0:	0800c944 	.word	0x0800c944
				} else {
					Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, readed, eol);
 80028c4:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80028c8:	4a49      	ldr	r2, [pc, #292]	; (80029f0 <defThread+0x9d8>)
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	9201      	str	r2, [sp, #4]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80028d4:	4947      	ldr	r1, [pc, #284]	; (80029f4 <defThread+0x9dc>)
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7ff f862 	bl	80019a0 <Report>
				}
			}
		}

		// Erase all blocks (chipConf.BlockNbr)
		if (next_block_erase) {
 80028dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d04a      	beq.n	800297a <defThread+0x962>
			clr.Block = iBlk;
 80028e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			iBlk++;
 80028ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028f2:	3301      	adds	r3, #1
 80028f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			if (HAL_NAND_Erase_Block(nandPort, &clr) != HAL_OK) {
 80028f8:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <defThread+0x9e0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f002 fa4d 	bl	8004da2 <HAL_NAND_Erase_Block>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <defThread+0x90c>
				devError |= devNAND;
 800290e:	4b3b      	ldr	r3, [pc, #236]	; (80029fc <defThread+0x9e4>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	f043 0320 	orr.w	r3, r3, #32
 8002916:	b2da      	uxtb	r2, r3
 8002918:	4b38      	ldr	r3, [pc, #224]	; (80029fc <defThread+0x9e4>)
 800291a:	701a      	strb	r2, [r3, #0]
				next_block_erase = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002922:	e012      	b.n	800294a <defThread+0x932>
			} else {
				if (!(iBlk % 16)) Report(0, ".");
 8002924:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <defThread+0x920>
 8002930:	4933      	ldr	r1, [pc, #204]	; (8002a00 <defThread+0x9e8>)
 8002932:	2000      	movs	r0, #0
 8002934:	f7ff f834 	bl	80019a0 <Report>
				if (iBlk >= chipConf.BlockNbr) next_block_erase = 0;
 8002938:	4b32      	ldr	r3, [pc, #200]	; (8002a04 <defThread+0x9ec>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002940:	429a      	cmp	r2, r3
 8002942:	d302      	bcc.n	800294a <defThread+0x932>
 8002944:	2300      	movs	r3, #0
 8002946:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
			if (!next_block_erase) Report(0, " %lu blocks (%lu sec)%s", iBlk, (HAL_GetTick() - stik) / 1000, eol);
 800294a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800294e:	2b00      	cmp	r3, #0
 8002950:	d113      	bne.n	800297a <defThread+0x962>
 8002952:	f000 ffd5 	bl	8003900 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	4a2a      	ldr	r2, [pc, #168]	; (8002a08 <defThread+0x9f0>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	099a      	lsrs	r2, r3, #6
 8002966:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <defThread+0x9d8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002972:	4926      	ldr	r1, [pc, #152]	; (8002a0c <defThread+0x9f4>)
 8002974:	2000      	movs	r0, #0
 8002976:	f7ff f813 	bl	80019a0 <Report>
		}
		//
		osDelay(5);
 800297a:	2005      	movs	r0, #5
 800297c:	f005 ffd8 	bl	8008930 <osDelay>
	while (loop) {
 8002980:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8002984:	2b00      	cmp	r3, #0
 8002986:	f47f acd1 	bne.w	800232c <defThread+0x314>
	}

	ipsOn(0);
 800298a:	2000      	movs	r0, #0
 800298c:	f000 f97e 	bl	8002c8c <ipsOn>

	if (wrBuf) free(wrBuf);
 8002990:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <defThread+0x9f8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d004      	beq.n	80029a2 <defThread+0x98a>
 8002998:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <defThread+0x9f8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f009 f8c5 	bl	800bb2c <free>
	if (rdBuf) free(rdBuf);
 80029a2:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <defThread+0x9fc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <defThread+0x99c>
 80029aa:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <defThread+0x9fc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f009 f8bc 	bl	800bb2c <free>
	if (stx) free(stx);
 80029b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <defThread+0x9a8>
 80029ba:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80029bc:	f009 f8b6 	bl	800bb2c <free>


	Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 80029c0:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <defThread+0xa00>)
 80029c2:	681c      	ldr	r4, [r3, #0]
 80029c4:	f008 fe9e 	bl	800b704 <xPortGetFreeHeapSize>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <defThread+0x9d8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	9302      	str	r3, [sp, #8]
 80029d0:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	9200      	str	r2, [sp, #0]
 80029d8:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <defThread+0xa04>)
 80029da:	4622      	mov	r2, r4
 80029dc:	4910      	ldr	r1, [pc, #64]	; (8002a20 <defThread+0xa08>)
 80029de:	2001      	movs	r0, #1
 80029e0:	f7fe ffde 	bl	80019a0 <Report>
	osDelay(250);
 80029e4:	20fa      	movs	r0, #250	; 0xfa
 80029e6:	f005 ffa3 	bl	8008930 <osDelay>

	NVIC_SystemReset();
 80029ea:	f7fe f921 	bl	8000c30 <__NVIC_SystemReset>
 80029ee:	bf00      	nop
 80029f0:	20000004 	.word	0x20000004
 80029f4:	0800cb8c 	.word	0x0800cb8c
 80029f8:	20000054 	.word	0x20000054
 80029fc:	2000032c 	.word	0x2000032c
 8002a00:	0800cbb4 	.word	0x0800cbb4
 8002a04:	20000b64 	.word	0x20000b64
 8002a08:	10624dd3 	.word	0x10624dd3
 8002a0c:	0800cbb8 	.word	0x0800cbb8
 8002a10:	20000b80 	.word	0x20000b80
 8002a14:	20000b7c 	.word	0x20000b7c
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	0800ed40 	.word	0x0800ed40
 8002a20:	0800cbd0 	.word	0x0800cbd0

08002a24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b5b0      	push	{r4, r5, r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d102      	bne.n	8002a3c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8002a36:	f000 ff4f 	bl	80038d8 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8002a3a:	e016      	b.n	8002a6a <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a44:	d111      	bne.n	8002a6a <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 8002a46:	f7fe fe6b 	bl	8001720 <get_msCounter>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	f002 0403 	and.w	r4, r2, #3
 8002a52:	2500      	movs	r5, #0
 8002a54:	1ee3      	subs	r3, r4, #3
 8002a56:	432b      	orrs	r3, r5
 8002a58:	d105      	bne.n	8002a66 <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 8002a5a:	f7fe fe53 	bl	8001704 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	4805      	ldr	r0, [pc, #20]	; (8002a78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002a62:	f001 fe16 	bl	8004692 <HAL_GPIO_TogglePin>
	  inc_msCounter();
 8002a66:	f7fe fe69 	bl	800173c <inc_msCounter>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bdb0      	pop	{r4, r5, r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40010000 	.word	0x40010000
 8002a78:	40020800 	.word	0x40020800

08002a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8002a96:	2200      	movs	r2, #0
 8002a98:	2104      	movs	r1, #4
 8002a9a:	480c      	ldr	r0, [pc, #48]	; (8002acc <ST7789_WriteCommand+0x40>)
 8002a9c:	f001 fde0 	bl	8004660 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <ST7789_WriteCommand+0x44>)
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	2396      	movs	r3, #150	; 0x96
 8002aa6:	1df9      	adds	r1, r7, #7
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f003 fbc8 	bl	800623e <HAL_SPI_Transmit>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d006      	beq.n	8002ac2 <ST7789_WriteCommand+0x36>
 8002ab4:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <ST7789_WriteCommand+0x48>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f043 0310 	orr.w	r3, r3, #16
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <ST7789_WriteCommand+0x48>)
 8002ac0:	701a      	strb	r2, [r3, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	20000048 	.word	0x20000048
 8002ad4:	2000032c 	.word	0x2000032c

08002ad8 <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2104      	movs	r1, #4
 8002ae6:	480e      	ldr	r0, [pc, #56]	; (8002b20 <ST7789_WriteCommands+0x48>)
 8002ae8:	f001 fdba 	bl	8004660 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 8002aec:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <ST7789_WriteCommands+0x4c>)
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	2196      	movs	r1, #150	; 0x96
 8002af6:	460b      	mov	r3, r1
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	f003 fb9d 	bl	800623e <HAL_SPI_Transmit>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d006      	beq.n	8002b18 <ST7789_WriteCommands+0x40>
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <ST7789_WriteCommands+0x50>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	f043 0310 	orr.w	r3, r3, #16
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <ST7789_WriteCommands+0x50>)
 8002b16:	701a      	strb	r2, [r3, #0]
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40020000 	.word	0x40020000
 8002b24:	20000048 	.word	0x20000048
 8002b28:	2000032c 	.word	0x2000032c

08002b2c <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	2104      	movs	r1, #4
 8002b3e:	481f      	ldr	r0, [pc, #124]	; (8002bbc <ST7789_WriteData+0x90>)
 8002b40:	f001 fd8e 	bl	8004660 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8002b44:	e028      	b.n	8002b98 <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	bf28      	it	cs
 8002b50:	4613      	movcs	r3, r2
 8002b52:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8002b54:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <ST7789_WriteData+0x94>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <ST7789_WriteData+0x98>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	89ba      	ldrh	r2, [r7, #12]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 fca8 	bl	80064b8 <HAL_SPI_Transmit_DMA>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8002b72:	e002      	b.n	8002b7a <ST7789_WriteData+0x4e>
 8002b74:	2001      	movs	r0, #1
 8002b76:	f000 fecf 	bl	8003918 <HAL_Delay>
 8002b7a:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <ST7789_WriteData+0x94>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	f083 0301 	eor.w	r3, r3, #1
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f5      	bne.n	8002b74 <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8002b88:	89bb      	ldrh	r3, [r7, #12]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8002b90:	89bb      	ldrh	r3, [r7, #12]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1d3      	bne.n	8002b46 <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d006      	beq.n	8002bb2 <ST7789_WriteData+0x86>
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <ST7789_WriteData+0x9c>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	f043 0310 	orr.w	r3, r3, #16
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <ST7789_WriteData+0x9c>)
 8002bb0:	701a      	strb	r2, [r3, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40020000 	.word	0x40020000
 8002bc0:	20000041 	.word	0x20000041
 8002bc4:	20000048 	.word	0x20000048
 8002bc8:	2000032c 	.word	0x2000032c

08002bcc <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8002bda:	2201      	movs	r2, #1
 8002bdc:	2104      	movs	r1, #4
 8002bde:	4814      	ldr	r0, [pc, #80]	; (8002c30 <ST7789_WriteDataLine+0x64>)
 8002be0:	f001 fd3e 	bl	8004660 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <ST7789_WriteDataLine+0x68>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <ST7789_WriteDataLine+0x6c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	b292      	uxth	r2, r2
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f003 fc5f 	bl	80064b8 <HAL_SPI_Transmit_DMA>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8002bfe:	e002      	b.n	8002c06 <ST7789_WriteDataLine+0x3a>
 8002c00:	2001      	movs	r0, #1
 8002c02:	f000 fe89 	bl	8003918 <HAL_Delay>
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <ST7789_WriteDataLine+0x68>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	f083 0301 	eor.w	r3, r3, #1
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f5      	bne.n	8002c00 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d006      	beq.n	8002c28 <ST7789_WriteDataLine+0x5c>
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <ST7789_WriteDataLine+0x70>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	f043 0310 	orr.w	r3, r3, #16
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <ST7789_WriteDataLine+0x70>)
 8002c26:	701a      	strb	r2, [r3, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40020000 	.word	0x40020000
 8002c34:	20000041 	.word	0x20000041
 8002c38:	20000048 	.word	0x20000048
 8002c3c:	2000032c 	.word	0x2000032c

08002c40 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	2104      	movs	r1, #4
 8002c4e:	480c      	ldr	r0, [pc, #48]	; (8002c80 <ST7789_WriteSmallData+0x40>)
 8002c50:	f001 fd06 	bl	8004660 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <ST7789_WriteSmallData+0x44>)
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	2396      	movs	r3, #150	; 0x96
 8002c5a:	1df9      	adds	r1, r7, #7
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f003 faee 	bl	800623e <HAL_SPI_Transmit>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d006      	beq.n	8002c76 <ST7789_WriteSmallData+0x36>
 8002c68:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <ST7789_WriteSmallData+0x48>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	f043 0310 	orr.w	r3, r3, #16
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <ST7789_WriteSmallData+0x48>)
 8002c74:	701a      	strb	r2, [r3, #0]
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40020000 	.word	0x40020000
 8002c84:	20000048 	.word	0x20000048
 8002c88:	2000032c 	.word	0x2000032c

08002c8c <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <ipsOn+0x18>
 8002c9c:	2029      	movs	r0, #41	; 0x29
 8002c9e:	f7ff fef5 	bl	8002a8c <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 8002ca2:	e002      	b.n	8002caa <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8002ca4:	2028      	movs	r0, #40	; 0x28
 8002ca6:	f7ff fef1 	bl	8002a8c <ST7789_WriteCommand>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8002cbe:	2036      	movs	r0, #54	; 0x36
 8002cc0:	f7ff fee4 	bl	8002a8c <ST7789_WriteCommand>
	switch (m) {
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d81a      	bhi.n	8002d00 <ST7789_SetRotation+0x4c>
 8002cca:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <ST7789_SetRotation+0x1c>)
 8002ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd0:	08002ce1 	.word	0x08002ce1
 8002cd4:	08002ce9 	.word	0x08002ce9
 8002cd8:	08002cf1 	.word	0x08002cf1
 8002cdc:	08002cf9 	.word	0x08002cf9
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8002ce0:	20c0      	movs	r0, #192	; 0xc0
 8002ce2:	f7ff ffad 	bl	8002c40 <ST7789_WriteSmallData>
		break;
 8002ce6:	e00c      	b.n	8002d02 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002ce8:	20a0      	movs	r0, #160	; 0xa0
 8002cea:	f7ff ffa9 	bl	8002c40 <ST7789_WriteSmallData>
		break;
 8002cee:	e008      	b.n	8002d02 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7ff ffa5 	bl	8002c40 <ST7789_WriteSmallData>
		break;
 8002cf6:	e004      	b.n	8002d02 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002cf8:	2060      	movs	r0, #96	; 0x60
 8002cfa:	f7ff ffa1 	bl	8002c40 <ST7789_WriteSmallData>
		break;
 8002cfe:	e000      	b.n	8002d02 <ST7789_SetRotation+0x4e>
	default:
		break;
 8002d00:	bf00      	nop
	}
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop

08002d0c <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4604      	mov	r4, r0
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4623      	mov	r3, r4
 8002d1c:	80fb      	strh	r3, [r7, #6]
 8002d1e:	4603      	mov	r3, r0
 8002d20:	80bb      	strh	r3, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	807b      	strh	r3, [r7, #2]
 8002d26:	4613      	mov	r3, r2
 8002d28:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	82fb      	strh	r3, [r7, #22]
 8002d2e:	887b      	ldrh	r3, [r7, #2]
 8002d30:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8002d32:	88bb      	ldrh	r3, [r7, #4]
 8002d34:	827b      	strh	r3, [r7, #18]
 8002d36:	883b      	ldrh	r3, [r7, #0]
 8002d38:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8002d3a:	202a      	movs	r0, #42	; 0x2a
 8002d3c:	f7ff fea6 	bl	8002a8c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8002d40:	8afb      	ldrh	r3, [r7, #22]
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	733b      	strb	r3, [r7, #12]
 8002d4a:	8afb      	ldrh	r3, [r7, #22]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	737b      	strb	r3, [r7, #13]
 8002d50:	8abb      	ldrh	r3, [r7, #20]
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	73bb      	strb	r3, [r7, #14]
 8002d5a:	8abb      	ldrh	r3, [r7, #20]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8002d60:	f107 030c 	add.w	r3, r7, #12
 8002d64:	2104      	movs	r1, #4
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fee0 	bl	8002b2c <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8002d6c:	202b      	movs	r0, #43	; 0x2b
 8002d6e:	f7ff fe8d 	bl	8002a8c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8002d72:	8a7b      	ldrh	r3, [r7, #18]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	723b      	strb	r3, [r7, #8]
 8002d7c:	8a7b      	ldrh	r3, [r7, #18]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	727b      	strb	r3, [r7, #9]
 8002d82:	8a3b      	ldrh	r3, [r7, #16]
 8002d84:	0a1b      	lsrs	r3, r3, #8
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	72bb      	strb	r3, [r7, #10]
 8002d8c:	8a3b      	ldrh	r3, [r7, #16]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8002d92:	f107 0308 	add.w	r3, r7, #8
 8002d96:	2104      	movs	r1, #4
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fec7 	bl	8002b2c <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8002d9e:	202c      	movs	r0, #44	; 0x2c
 8002da0:	f7ff fe74 	bl	8002a8c <ST7789_WriteCommand>
}
 8002da4:	bf00      	nop
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd90      	pop	{r4, r7, pc}

08002dac <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8002db0:	2014      	movs	r0, #20
 8002db2:	f000 fdb1 	bl	8003918 <HAL_Delay>
    ST7789_RST_Clr();
 8002db6:	2200      	movs	r2, #0
 8002db8:	2102      	movs	r1, #2
 8002dba:	4808      	ldr	r0, [pc, #32]	; (8002ddc <ST7789_Reset+0x30>)
 8002dbc:	f001 fc50 	bl	8004660 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8002dc0:	200a      	movs	r0, #10
 8002dc2:	f000 fda9 	bl	8003918 <HAL_Delay>
    ST7789_RST_Set();
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	2102      	movs	r1, #2
 8002dca:	4804      	ldr	r0, [pc, #16]	; (8002ddc <ST7789_Reset+0x30>)
 8002dcc:	f001 fc48 	bl	8004660 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 8002dd0:	2014      	movs	r0, #20
 8002dd2:	f000 fda1 	bl	8003918 <HAL_Delay>
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40020000 	.word	0x40020000

08002de0 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b08f      	sub	sp, #60	; 0x3c
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8002dea:	203a      	movs	r0, #58	; 0x3a
 8002dec:	f7ff fe4e 	bl	8002a8c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 8002df0:	2055      	movs	r0, #85	; 0x55
 8002df2:	f7ff ff25 	bl	8002c40 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8002df6:	20b2      	movs	r0, #178	; 0xb2
 8002df8:	f7ff fe48 	bl	8002a8c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8002dfc:	4a3a      	ldr	r2, [pc, #232]	; (8002ee8 <ST7789_Init+0x108>)
 8002dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e06:	6018      	str	r0, [r3, #0]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8002e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e10:	2105      	movs	r1, #5
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fe8a 	bl	8002b2c <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8002e18:	2003      	movs	r0, #3
 8002e1a:	f7ff ff4b 	bl	8002cb4 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 8002e1e:	20b7      	movs	r0, #183	; 0xb7
 8002e20:	f7ff fe34 	bl	8002a8c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8002e24:	2035      	movs	r0, #53	; 0x35
 8002e26:	f7ff ff0b 	bl	8002c40 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8002e2a:	20bb      	movs	r0, #187	; 0xbb
 8002e2c:	f7ff fe2e 	bl	8002a8c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8002e30:	2019      	movs	r0, #25
 8002e32:	f7ff ff05 	bl	8002c40 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8002e36:	20c0      	movs	r0, #192	; 0xc0
 8002e38:	f7ff fe28 	bl	8002a8c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 8002e3c:	202c      	movs	r0, #44	; 0x2c
 8002e3e:	f7ff feff 	bl	8002c40 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8002e42:	20c2      	movs	r0, #194	; 0xc2
 8002e44:	f7ff fe22 	bl	8002a8c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8002e48:	2001      	movs	r0, #1
 8002e4a:	f7ff fef9 	bl	8002c40 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 8002e4e:	20ff      	movs	r0, #255	; 0xff
 8002e50:	f7ff fef6 	bl	8002c40 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 8002e54:	20c3      	movs	r0, #195	; 0xc3
 8002e56:	f7ff fe19 	bl	8002a8c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8002e5a:	2012      	movs	r0, #18
 8002e5c:	f7ff fef0 	bl	8002c40 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8002e60:	20c4      	movs	r0, #196	; 0xc4
 8002e62:	f7ff fe13 	bl	8002a8c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 8002e66:	2020      	movs	r0, #32
 8002e68:	f7ff feea 	bl	8002c40 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8002e6c:	20c6      	movs	r0, #198	; 0xc6
 8002e6e:	f7ff fe0d 	bl	8002a8c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 8002e72:	200f      	movs	r0, #15
 8002e74:	f7ff fee4 	bl	8002c40 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8002e78:	20d0      	movs	r0, #208	; 0xd0
 8002e7a:	f7ff fe07 	bl	8002a8c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8002e7e:	20a4      	movs	r0, #164	; 0xa4
 8002e80:	f7ff fede 	bl	8002c40 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 8002e84:	20a1      	movs	r0, #161	; 0xa1
 8002e86:	f7ff fedb 	bl	8002c40 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8002e8a:	20e0      	movs	r0, #224	; 0xe0
 8002e8c:	f7ff fdfe 	bl	8002a8c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8002e90:	4b16      	ldr	r3, [pc, #88]	; (8002eec <ST7789_Init+0x10c>)
 8002e92:	f107 041c 	add.w	r4, r7, #28
 8002e96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e98:	c407      	stmia	r4!, {r0, r1, r2}
 8002e9a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002e9c:	f107 031c 	add.w	r3, r7, #28
 8002ea0:	210e      	movs	r1, #14
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fe42 	bl	8002b2c <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8002ea8:	20e1      	movs	r0, #225	; 0xe1
 8002eaa:	f7ff fdef 	bl	8002a8c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <ST7789_Init+0x110>)
 8002eb0:	f107 040c 	add.w	r4, r7, #12
 8002eb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eb6:	c407      	stmia	r4!, {r0, r1, r2}
 8002eb8:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002eba:	f107 030c 	add.w	r3, r7, #12
 8002ebe:	210e      	movs	r1, #14
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fe33 	bl	8002b2c <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <ST7789_Init+0x114>)
 8002ec8:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 8002eca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ece:	2104      	movs	r1, #4
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fe01 	bl	8002ad8 <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 f80d 	bl	8002ef8 <ST7789_Fill_Color>
}
 8002ede:	bf00      	nop
 8002ee0:	373c      	adds	r7, #60	; 0x3c
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd90      	pop	{r4, r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	0800cbfc 	.word	0x0800cbfc
 8002eec:	0800cc04 	.word	0x0800cc04
 8002ef0:	0800cc14 	.word	0x0800cc14
 8002ef4:	28131121 	.word	0x28131121

08002ef8 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b0fc      	sub	sp, #496	; 0x1f0
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4602      	mov	r2, r0
 8002f00:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002f04:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8002f08:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8002f0a:	23ef      	movs	r3, #239	; 0xef
 8002f0c:	22ef      	movs	r2, #239	; 0xef
 8002f0e:	2100      	movs	r1, #0
 8002f10:	2000      	movs	r0, #0
 8002f12:	f7ff fefb 	bl	8002d0c <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002f22:	e024      	b.n	8002f6e <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 8002f24:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002f28:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	b21a      	sxth	r2, r3
 8002f34:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002f38:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	b21b      	sxth	r3, r3
 8002f42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	b219      	sxth	r1, r3
 8002f4c:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8002f50:	f107 020c 	add.w	r2, r7, #12
 8002f54:	4413      	add	r3, r2
 8002f56:	b28a      	uxth	r2, r1
 8002f58:	801a      	strh	r2, [r3, #0]
		i += 2;
 8002f5a:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8002f5e:	3302      	adds	r3, #2
 8002f60:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8002f64:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002f6e:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002f72:	2bef      	cmp	r3, #239	; 0xef
 8002f74:	d9d6      	bls.n	8002f24 <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002f7c:	e00b      	b.n	8002f96 <ST7789_Fill_Color+0x9e>
 8002f7e:	f107 030c 	add.w	r3, r7, #12
 8002f82:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fe20 	bl	8002bcc <ST7789_WriteDataLine>
 8002f8c:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002f90:	3301      	adds	r3, #1
 8002f92:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002f96:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002f9a:	2bef      	cmp	r3, #239	; 0xef
 8002f9c:	d9ef      	bls.n	8002f7e <ST7789_Fill_Color+0x86>

//#endif
}
 8002f9e:	bf00      	nop
 8002fa0:	bf00      	nop
 8002fa2:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8002faa:	b590      	push	{r4, r7, lr}
 8002fac:	b085      	sub	sp, #20
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	4608      	mov	r0, r1
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4623      	mov	r3, r4
 8002fba:	80fb      	strh	r3, [r7, #6]
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	80bb      	strh	r3, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	807b      	strh	r3, [r7, #2]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8002fc8:	887b      	ldrh	r3, [r7, #2]
 8002fca:	2bef      	cmp	r3, #239	; 0xef
 8002fcc:	d82b      	bhi.n	8003026 <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8002fce:	883b      	ldrh	r3, [r7, #0]
 8002fd0:	2bef      	cmp	r3, #239	; 0xef
 8002fd2:	d828      	bhi.n	8003026 <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 8002fd4:	8c3b      	ldrh	r3, [r7, #32]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	723b      	strb	r3, [r7, #8]
 8002fde:	8c3b      	ldrh	r3, [r7, #32]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8002fe4:	883b      	ldrh	r3, [r7, #0]
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	88b9      	ldrh	r1, [r7, #4]
 8002fea:	88f8      	ldrh	r0, [r7, #6]
 8002fec:	f7ff fe8e 	bl	8002d0c <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 8002ff0:	88bb      	ldrh	r3, [r7, #4]
 8002ff2:	81fb      	strh	r3, [r7, #14]
 8002ff4:	e012      	b.n	800301c <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	81bb      	strh	r3, [r7, #12]
 8002ffa:	e008      	b.n	800300e <ST7789_Fill+0x64>
 8002ffc:	f107 0308 	add.w	r3, r7, #8
 8003000:	2102      	movs	r1, #2
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fd92 	bl	8002b2c <ST7789_WriteData>
 8003008:	89bb      	ldrh	r3, [r7, #12]
 800300a:	3301      	adds	r3, #1
 800300c:	81bb      	strh	r3, [r7, #12]
 800300e:	89ba      	ldrh	r2, [r7, #12]
 8003010:	887b      	ldrh	r3, [r7, #2]
 8003012:	429a      	cmp	r2, r3
 8003014:	d9f2      	bls.n	8002ffc <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 8003016:	89fb      	ldrh	r3, [r7, #14]
 8003018:	3301      	adds	r3, #1
 800301a:	81fb      	strh	r3, [r7, #14]
 800301c:	89fa      	ldrh	r2, [r7, #14]
 800301e:	883b      	ldrh	r3, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d9e8      	bls.n	8002ff6 <ST7789_Fill+0x4c>
 8003024:	e000      	b.n	8003028 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8003026:	bf00      	nop
	}
}
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	bd90      	pop	{r4, r7, pc}

0800302e <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800302e:	b082      	sub	sp, #8
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af00      	add	r7, sp, #0
 8003036:	637b      	str	r3, [r7, #52]	; 0x34
 8003038:	4603      	mov	r3, r0
 800303a:	80fb      	strh	r3, [r7, #6]
 800303c:	460b      	mov	r3, r1
 800303e:	80bb      	strh	r3, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8003044:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003048:	b29a      	uxth	r2, r3
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	4413      	add	r3, r2
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29c      	uxth	r4, r3
 8003054:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003058:	b29a      	uxth	r2, r3
 800305a:	88bb      	ldrh	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29b      	uxth	r3, r3
 8003064:	88b9      	ldrh	r1, [r7, #4]
 8003066:	88f8      	ldrh	r0, [r7, #6]
 8003068:	4622      	mov	r2, r4
 800306a:	f7ff fe4f 	bl	8002d0c <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 800306e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	b29b      	uxth	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	733b      	strb	r3, [r7, #12]
 8003078:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800307a:	b2db      	uxtb	r3, r3
 800307c:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 800307e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	b29b      	uxth	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	723b      	strb	r3, [r7, #8]
 800308a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800308e:	b2db      	uxtb	r3, r3
 8003090:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	e02f      	b.n	80030fc <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 800309c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	3b20      	subs	r3, #32
 80030a2:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80030a6:	fb01 f303 	mul.w	r3, r1, r3
 80030aa:	4619      	mov	r1, r3
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	440b      	add	r3, r1
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4413      	add	r3, r2
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 80030b8:	2300      	movs	r3, #0
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	e015      	b.n	80030ea <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <ST7789_WriteChar+0xa8>
				uk = cdata;
 80030ce:	f107 030c 	add.w	r3, r7, #12
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	e002      	b.n	80030dc <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 80030d6:	f107 0308 	add.w	r3, r7, #8
 80030da:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 80030dc:	2102      	movs	r1, #2
 80030de:	6978      	ldr	r0, [r7, #20]
 80030e0:	f7ff fd24 	bl	8002b2c <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	3301      	adds	r3, #1
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80030ee:	461a      	mov	r2, r3
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d3e3      	bcc.n	80030be <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3301      	adds	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003100:	461a      	mov	r2, r3
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	4293      	cmp	r3, r2
 8003106:	d3c9      	bcc.n	800309c <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	3724      	adds	r7, #36	; 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003114:	b002      	add	sp, #8
 8003116:	4770      	bx	lr

08003118 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003118:	b082      	sub	sp, #8
 800311a:	b580      	push	{r7, lr}
 800311c:	b086      	sub	sp, #24
 800311e:	af04      	add	r7, sp, #16
 8003120:	603a      	str	r2, [r7, #0]
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	4603      	mov	r3, r0
 8003126:	80fb      	strh	r3, [r7, #6]
 8003128:	460b      	mov	r3, r1
 800312a:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d03f      	beq.n	80031b2 <ST7789_WriteString+0x9a>

	while (*str) {
 8003132:	e039      	b.n	80031a8 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	7d3a      	ldrb	r2, [r7, #20]
 8003138:	4413      	add	r3, r2
 800313a:	2bef      	cmp	r3, #239	; 0xef
 800313c:	dd13      	ble.n	8003166 <ST7789_WriteString+0x4e>
			x = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003142:	7d7b      	ldrb	r3, [r7, #21]
 8003144:	b29a      	uxth	r2, r3
 8003146:	88bb      	ldrh	r3, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 800314c:	88bb      	ldrh	r3, [r7, #4]
 800314e:	7d7a      	ldrb	r2, [r7, #21]
 8003150:	4413      	add	r3, r2
 8003152:	2bef      	cmp	r3, #239	; 0xef
 8003154:	dc2f      	bgt.n	80031b6 <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b20      	cmp	r3, #32
 800315c:	d103      	bne.n	8003166 <ST7789_WriteString+0x4e>
				str++;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	603b      	str	r3, [r7, #0]
				continue;
 8003164:	e020      	b.n	80031a8 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b0a      	cmp	r3, #10
 800316c:	d012      	beq.n	8003194 <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	88b9      	ldrh	r1, [r7, #4]
 8003174:	88f8      	ldrh	r0, [r7, #6]
 8003176:	8c3b      	ldrh	r3, [r7, #32]
 8003178:	9302      	str	r3, [sp, #8]
 800317a:	8bbb      	ldrh	r3, [r7, #28]
 800317c:	9301      	str	r3, [sp, #4]
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f7ff ff53 	bl	800302e <ST7789_WriteChar>
			x += font.width;
 8003188:	7d3b      	ldrb	r3, [r7, #20]
 800318a:	b29a      	uxth	r2, r3
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	4413      	add	r3, r2
 8003190:	80fb      	strh	r3, [r7, #6]
 8003192:	e006      	b.n	80031a2 <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003198:	7d7b      	ldrb	r3, [r7, #21]
 800319a:	b29a      	uxth	r2, r3
 800319c:	88bb      	ldrh	r3, [r7, #4]
 800319e:	4413      	add	r3, r2
 80031a0:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	3301      	adds	r3, #1
 80031a6:	603b      	str	r3, [r7, #0]
	while (*str) {
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1c1      	bne.n	8003134 <ST7789_WriteString+0x1c>
 80031b0:	e002      	b.n	80031b8 <ST7789_WriteString+0xa0>
	if (!str) return;
 80031b2:	bf00      	nop
 80031b4:	e000      	b.n	80031b8 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 80031b6:	bf00      	nop
	}
}
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031c0:	b002      	add	sp, #8
 80031c2:	4770      	bx	lr

080031c4 <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b0a4      	sub	sp, #144	; 0x90
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	f107 0310 	add.w	r3, r7, #16
 80031d8:	227c      	movs	r2, #124	; 0x7c
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f008 fcbb 	bl	800bb58 <memset>

	memset(st, 0x20, 127);
 80031e2:	f107 030c 	add.w	r3, r7, #12
 80031e6:	227f      	movs	r2, #127	; 0x7f
 80031e8:	2120      	movs	r1, #32
 80031ea:	4618      	mov	r0, r3
 80031ec:	f008 fcb4 	bl	800bb58 <memset>
	int8_t k = strlen(str);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7fc ffed 	bl	80001d0 <strlen>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 80031fc:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8003200:	887b      	ldrh	r3, [r7, #2]
 8003202:	429a      	cmp	r2, r3
 8003204:	da25      	bge.n	8003252 <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 8003206:	887a      	ldrh	r2, [r7, #2]
 8003208:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	0fda      	lsrs	r2, r3, #31
 8003210:	4413      	add	r3, r2
 8003212:	105b      	asrs	r3, r3, #1
 8003214:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 8003218:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 800321c:	f107 020c 	add.w	r2, r7, #12
 8003220:	4413      	add	r3, r2
 8003222:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4618      	mov	r0, r3
 800322a:	f008 fc87 	bl	800bb3c <memcpy>
		st[k + n*2 + 1] = '\0';
 800322e:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8003232:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	3301      	adds	r3, #1
 800323c:	3390      	adds	r3, #144	; 0x90
 800323e:	443b      	add	r3, r7
 8003240:	2200      	movs	r2, #0
 8003242:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 8003246:	f107 030c 	add.w	r3, r7, #12
 800324a:	4619      	mov	r1, r3
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f008 fe37 	bl	800bec0 <strcpy>
	}

	return str;
 8003252:	687b      	ldr	r3, [r7, #4]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3790      	adds	r7, #144	; 0x90
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_MspInit+0x54>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	4a11      	ldr	r2, [pc, #68]	; (80032b0 <HAL_MspInit+0x54>)
 800326c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003270:	6453      	str	r3, [r2, #68]	; 0x44
 8003272:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <HAL_MspInit+0x54>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_MspInit+0x54>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <HAL_MspInit+0x54>)
 8003288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328c:	6413      	str	r3, [r2, #64]	; 0x40
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_MspInit+0x54>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800329a:	2200      	movs	r2, #0
 800329c:	210f      	movs	r1, #15
 800329e:	f06f 0001 	mvn.w	r0, #1
 80032a2:	f000 fc15 	bl	8003ad0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800

080032b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032bc:	f107 0308 	add.w	r3, r7, #8
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <HAL_RTC_MspInit+0x4c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d110      	bne.n	80032f6 <HAL_RTC_MspInit+0x42>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80032d4:	2302      	movs	r3, #2
 80032d6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <HAL_RTC_MspInit+0x50>)
 80032da:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032dc:	f107 0308 	add.w	r3, r7, #8
 80032e0:	4618      	mov	r0, r3
 80032e2:	f002 fb0f 	bl	8005904 <HAL_RCCEx_PeriphCLKConfig>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 80032ec:	f7ff fbc6 	bl	8002a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RTC_MspInit+0x54>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80032f6:	bf00      	nop
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40002800 	.word	0x40002800
 8003304:	00190300 	.word	0x00190300
 8003308:	42470e3c 	.word	0x42470e3c

0800330c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a39      	ldr	r2, [pc, #228]	; (8003410 <HAL_SPI_MspInit+0x104>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d16b      	bne.n	8003406 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	4b38      	ldr	r3, [pc, #224]	; (8003414 <HAL_SPI_MspInit+0x108>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	4a37      	ldr	r2, [pc, #220]	; (8003414 <HAL_SPI_MspInit+0x108>)
 8003338:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800333c:	6453      	str	r3, [r2, #68]	; 0x44
 800333e:	4b35      	ldr	r3, [pc, #212]	; (8003414 <HAL_SPI_MspInit+0x108>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	4b31      	ldr	r3, [pc, #196]	; (8003414 <HAL_SPI_MspInit+0x108>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4a30      	ldr	r2, [pc, #192]	; (8003414 <HAL_SPI_MspInit+0x108>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
 800335a:	4b2e      	ldr	r3, [pc, #184]	; (8003414 <HAL_SPI_MspInit+0x108>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 8003366:	23a0      	movs	r3, #160	; 0xa0
 8003368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336a:	2302      	movs	r3, #2
 800336c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003372:	2303      	movs	r3, #3
 8003374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003376:	2305      	movs	r3, #5
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337a:	f107 0314 	add.w	r3, r7, #20
 800337e:	4619      	mov	r1, r3
 8003380:	4825      	ldr	r0, [pc, #148]	; (8003418 <HAL_SPI_MspInit+0x10c>)
 8003382:	f000 ffd1 	bl	8004328 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003386:	4b25      	ldr	r3, [pc, #148]	; (800341c <HAL_SPI_MspInit+0x110>)
 8003388:	4a25      	ldr	r2, [pc, #148]	; (8003420 <HAL_SPI_MspInit+0x114>)
 800338a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800338c:	4b23      	ldr	r3, [pc, #140]	; (800341c <HAL_SPI_MspInit+0x110>)
 800338e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003392:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <HAL_SPI_MspInit+0x110>)
 8003396:	2240      	movs	r2, #64	; 0x40
 8003398:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800339a:	4b20      	ldr	r3, [pc, #128]	; (800341c <HAL_SPI_MspInit+0x110>)
 800339c:	2200      	movs	r2, #0
 800339e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033a0:	4b1e      	ldr	r3, [pc, #120]	; (800341c <HAL_SPI_MspInit+0x110>)
 80033a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033a6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033a8:	4b1c      	ldr	r3, [pc, #112]	; (800341c <HAL_SPI_MspInit+0x110>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ae:	4b1b      	ldr	r3, [pc, #108]	; (800341c <HAL_SPI_MspInit+0x110>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80033b4:	4b19      	ldr	r3, [pc, #100]	; (800341c <HAL_SPI_MspInit+0x110>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80033ba:	4b18      	ldr	r3, [pc, #96]	; (800341c <HAL_SPI_MspInit+0x110>)
 80033bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033c0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <HAL_SPI_MspInit+0x110>)
 80033c4:	2204      	movs	r2, #4
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80033c8:	4b14      	ldr	r3, [pc, #80]	; (800341c <HAL_SPI_MspInit+0x110>)
 80033ca:	2203      	movs	r2, #3
 80033cc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80033ce:	4b13      	ldr	r3, [pc, #76]	; (800341c <HAL_SPI_MspInit+0x110>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <HAL_SPI_MspInit+0x110>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80033da:	4810      	ldr	r0, [pc, #64]	; (800341c <HAL_SPI_MspInit+0x110>)
 80033dc:	f000 fba2 	bl	8003b24 <HAL_DMA_Init>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 80033e6:	f7ff fb49 	bl	8002a7c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a0b      	ldr	r2, [pc, #44]	; (800341c <HAL_SPI_MspInit+0x110>)
 80033ee:	649a      	str	r2, [r3, #72]	; 0x48
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_SPI_MspInit+0x110>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 80033f6:	2200      	movs	r2, #0
 80033f8:	2102      	movs	r1, #2
 80033fa:	2023      	movs	r0, #35	; 0x23
 80033fc:	f000 fb68 	bl	8003ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003400:	2023      	movs	r0, #35	; 0x23
 8003402:	f000 fb81 	bl	8003b08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003406:	bf00      	nop
 8003408:	3728      	adds	r7, #40	; 0x28
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40013000 	.word	0x40013000
 8003414:	40023800 	.word	0x40023800
 8003418:	40020000 	.word	0x40020000
 800341c:	20000194 	.word	0x20000194
 8003420:	40026458 	.word	0x40026458

08003424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003434:	d115      	bne.n	8003462 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	4b0c      	ldr	r3, [pc, #48]	; (800346c <HAL_TIM_Base_MspInit+0x48>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	4a0b      	ldr	r2, [pc, #44]	; (800346c <HAL_TIM_Base_MspInit+0x48>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6413      	str	r3, [r2, #64]	; 0x40
 8003446:	4b09      	ldr	r3, [pc, #36]	; (800346c <HAL_TIM_Base_MspInit+0x48>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003452:	2200      	movs	r2, #0
 8003454:	2101      	movs	r1, #1
 8003456:	201c      	movs	r0, #28
 8003458:	f000 fb3a 	bl	8003ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800345c:	201c      	movs	r0, #28
 800345e:	f000 fb53 	bl	8003b08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003462:	bf00      	nop
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800

08003470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	; 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 0314 	add.w	r3, r7, #20
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a35      	ldr	r2, [pc, #212]	; (8003564 <HAL_UART_MspInit+0xf4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d163      	bne.n	800355a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	4b34      	ldr	r3, [pc, #208]	; (8003568 <HAL_UART_MspInit+0xf8>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	4a33      	ldr	r2, [pc, #204]	; (8003568 <HAL_UART_MspInit+0xf8>)
 800349c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034a0:	6413      	str	r3, [r2, #64]	; 0x40
 80034a2:	4b31      	ldr	r3, [pc, #196]	; (8003568 <HAL_UART_MspInit+0xf8>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <HAL_UART_MspInit+0xf8>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	4a2c      	ldr	r2, [pc, #176]	; (8003568 <HAL_UART_MspInit+0xf8>)
 80034b8:	f043 0302 	orr.w	r3, r3, #2
 80034bc:	6313      	str	r3, [r2, #48]	; 0x30
 80034be:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <HAL_UART_MspInit+0xf8>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 80034ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d8:	2303      	movs	r3, #3
 80034da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034dc:	2307      	movs	r3, #7
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	4619      	mov	r1, r3
 80034e6:	4821      	ldr	r0, [pc, #132]	; (800356c <HAL_UART_MspInit+0xfc>)
 80034e8:	f000 ff1e 	bl	8004328 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80034ec:	4b20      	ldr	r3, [pc, #128]	; (8003570 <HAL_UART_MspInit+0x100>)
 80034ee:	4a21      	ldr	r2, [pc, #132]	; (8003574 <HAL_UART_MspInit+0x104>)
 80034f0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80034f2:	4b1f      	ldr	r3, [pc, #124]	; (8003570 <HAL_UART_MspInit+0x100>)
 80034f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034f8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034fa:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <HAL_UART_MspInit+0x100>)
 80034fc:	2240      	movs	r2, #64	; 0x40
 80034fe:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003500:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <HAL_UART_MspInit+0x100>)
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003506:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <HAL_UART_MspInit+0x100>)
 8003508:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800350c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800350e:	4b18      	ldr	r3, [pc, #96]	; (8003570 <HAL_UART_MspInit+0x100>)
 8003510:	2200      	movs	r2, #0
 8003512:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003514:	4b16      	ldr	r3, [pc, #88]	; (8003570 <HAL_UART_MspInit+0x100>)
 8003516:	2200      	movs	r2, #0
 8003518:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_UART_MspInit+0x100>)
 800351c:	2200      	movs	r2, #0
 800351e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003520:	4b13      	ldr	r3, [pc, #76]	; (8003570 <HAL_UART_MspInit+0x100>)
 8003522:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003526:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003528:	4b11      	ldr	r3, [pc, #68]	; (8003570 <HAL_UART_MspInit+0x100>)
 800352a:	2200      	movs	r2, #0
 800352c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800352e:	4810      	ldr	r0, [pc, #64]	; (8003570 <HAL_UART_MspInit+0x100>)
 8003530:	f000 faf8 	bl	8003b24 <HAL_DMA_Init>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800353a:	f7ff fa9f 	bl	8002a7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <HAL_UART_MspInit+0x100>)
 8003542:	635a      	str	r2, [r3, #52]	; 0x34
 8003544:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <HAL_UART_MspInit+0x100>)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800354a:	2200      	movs	r2, #0
 800354c:	2105      	movs	r1, #5
 800354e:	2027      	movs	r0, #39	; 0x27
 8003550:	f000 fabe 	bl	8003ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003554:	2027      	movs	r0, #39	; 0x27
 8003556:	f000 fad7 	bl	8003b08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800355a:	bf00      	nop
 800355c:	3728      	adds	r7, #40	; 0x28
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40004800 	.word	0x40004800
 8003568:	40023800 	.word	0x40023800
 800356c:	40020400 	.word	0x40020400
 8003570:	20000280 	.word	0x20000280
 8003574:	40026058 	.word	0x40026058

08003578 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800357e:	1d3b      	adds	r3, r7, #4
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800358c:	4b20      	ldr	r3, [pc, #128]	; (8003610 <HAL_FSMC_MspInit+0x98>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d139      	bne.n	8003608 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8003594:	4b1e      	ldr	r3, [pc, #120]	; (8003610 <HAL_FSMC_MspInit+0x98>)
 8003596:	2201      	movs	r2, #1
 8003598:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <HAL_FSMC_MspInit+0x9c>)
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	4a1c      	ldr	r2, [pc, #112]	; (8003614 <HAL_FSMC_MspInit+0x9c>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6393      	str	r3, [r2, #56]	; 0x38
 80035aa:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <HAL_FSMC_MspInit+0x9c>)
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 80035b6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80035ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035bc:	2302      	movs	r3, #2
 80035be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c4:	2303      	movs	r3, #3
 80035c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80035c8:	230c      	movs	r3, #12
 80035ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	4619      	mov	r1, r3
 80035d0:	4811      	ldr	r0, [pc, #68]	; (8003618 <HAL_FSMC_MspInit+0xa0>)
 80035d2:	f000 fea9 	bl	8004328 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 80035d6:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 80035da:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                          |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035dc:	2302      	movs	r3, #2
 80035de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e4:	2303      	movs	r3, #3
 80035e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80035e8:	230c      	movs	r3, #12
 80035ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035ec:	1d3b      	adds	r3, r7, #4
 80035ee:	4619      	mov	r1, r3
 80035f0:	480a      	ldr	r0, [pc, #40]	; (800361c <HAL_FSMC_MspInit+0xa4>)
 80035f2:	f000 fe99 	bl	8004328 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 80035f6:	2200      	movs	r2, #0
 80035f8:	2105      	movs	r1, #5
 80035fa:	2030      	movs	r0, #48	; 0x30
 80035fc:	f000 fa68 	bl	8003ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8003600:	2030      	movs	r0, #48	; 0x30
 8003602:	f000 fa81 	bl	8003b08 <HAL_NVIC_EnableIRQ>
 8003606:	e000      	b.n	800360a <HAL_FSMC_MspInit+0x92>
    return;
 8003608:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20000b88 	.word	0x20000b88
 8003614:	40023800 	.word	0x40023800
 8003618:	40021000 	.word	0x40021000
 800361c:	40020c00 	.word	0x40020c00

08003620 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8003628:	f7ff ffa6 	bl	8003578 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08c      	sub	sp, #48	; 0x30
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003644:	2200      	movs	r2, #0
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	2019      	movs	r0, #25
 800364a:	f000 fa41 	bl	8003ad0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800364e:	2019      	movs	r0, #25
 8003650:	f000 fa5a 	bl	8003b08 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <HAL_InitTick+0xa4>)
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	4a1e      	ldr	r2, [pc, #120]	; (80036d8 <HAL_InitTick+0xa4>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6453      	str	r3, [r2, #68]	; 0x44
 8003664:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <HAL_InitTick+0xa4>)
 8003666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003670:	f107 0210 	add.w	r2, r7, #16
 8003674:	f107 0314 	add.w	r3, r7, #20
 8003678:	4611      	mov	r1, r2
 800367a:	4618      	mov	r0, r3
 800367c:	f002 f910 	bl	80058a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003680:	f002 f8fa 	bl	8005878 <HAL_RCC_GetPCLK2Freq>
 8003684:	4603      	mov	r3, r0
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	4a13      	ldr	r2, [pc, #76]	; (80036dc <HAL_InitTick+0xa8>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	0c9b      	lsrs	r3, r3, #18
 8003694:	3b01      	subs	r3, #1
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <HAL_InitTick+0xac>)
 800369a:	4a12      	ldr	r2, [pc, #72]	; (80036e4 <HAL_InitTick+0xb0>)
 800369c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800369e:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <HAL_InitTick+0xac>)
 80036a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80036a6:	4a0e      	ldr	r2, [pc, #56]	; (80036e0 <HAL_InitTick+0xac>)
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80036ac:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <HAL_InitTick+0xac>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b2:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_InitTick+0xac>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80036b8:	4809      	ldr	r0, [pc, #36]	; (80036e0 <HAL_InitTick+0xac>)
 80036ba:	f003 fa27 	bl	8006b0c <HAL_TIM_Base_Init>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d104      	bne.n	80036ce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80036c4:	4806      	ldr	r0, [pc, #24]	; (80036e0 <HAL_InitTick+0xac>)
 80036c6:	f003 fa71 	bl	8006bac <HAL_TIM_Base_Start_IT>
 80036ca:	4603      	mov	r3, r0
 80036cc:	e000      	b.n	80036d0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3730      	adds	r7, #48	; 0x30
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40023800 	.word	0x40023800
 80036dc:	431bde83 	.word	0x431bde83
 80036e0:	20000b8c 	.word	0x20000b8c
 80036e4:	40010000 	.word	0x40010000

080036e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036f6:	b480      	push	{r7}
 80036f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036fa:	e7fe      	b.n	80036fa <HardFault_Handler+0x4>

080036fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003700:	e7fe      	b.n	8003700 <MemManage_Handler+0x4>

08003702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003702:	b480      	push	{r7}
 8003704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003706:	e7fe      	b.n	8003706 <BusFault_Handler+0x4>

08003708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800370c:	e7fe      	b.n	800370c <UsageFault_Handler+0x4>

0800370e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800370e:	b480      	push	{r7}
 8003710:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <DMA1_Stream3_IRQHandler+0x10>)
 8003722:	f000 fb97 	bl	8003e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000280 	.word	0x20000280

08003730 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003734:	4802      	ldr	r0, [pc, #8]	; (8003740 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003736:	f003 faa9 	bl	8006c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000b8c 	.word	0x20000b8c

08003744 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003748:	4802      	ldr	r0, [pc, #8]	; (8003754 <TIM2_IRQHandler+0x10>)
 800374a:	f003 fa9f 	bl	8006c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	200001f4 	.word	0x200001f4

08003758 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800375c:	4802      	ldr	r0, [pc, #8]	; (8003768 <SPI1_IRQHandler+0x10>)
 800375e:	f002 ff61 	bl	8006624 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	2000013c 	.word	0x2000013c

0800376c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003770:	4802      	ldr	r0, [pc, #8]	; (800377c <USART3_IRQHandler+0x10>)
 8003772:	f003 ff49 	bl	8007608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	2000023c 	.word	0x2000023c

08003780 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <FSMC_IRQHandler+0x10>)
 8003786:	f000 ffec 	bl	8004762 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	200002e0 	.word	0x200002e0

08003794 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003798:	4802      	ldr	r0, [pc, #8]	; (80037a4 <DMA2_Stream3_IRQHandler+0x10>)
 800379a:	f000 fb5b 	bl	8003e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000194 	.word	0x20000194

080037a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037b0:	4a14      	ldr	r2, [pc, #80]	; (8003804 <_sbrk+0x5c>)
 80037b2:	4b15      	ldr	r3, [pc, #84]	; (8003808 <_sbrk+0x60>)
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037bc:	4b13      	ldr	r3, [pc, #76]	; (800380c <_sbrk+0x64>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037c4:	4b11      	ldr	r3, [pc, #68]	; (800380c <_sbrk+0x64>)
 80037c6:	4a12      	ldr	r2, [pc, #72]	; (8003810 <_sbrk+0x68>)
 80037c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <_sbrk+0x64>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d207      	bcs.n	80037e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037d8:	f008 f8d0 	bl	800b97c <__errno>
 80037dc:	4603      	mov	r3, r0
 80037de:	220c      	movs	r2, #12
 80037e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037e6:	e009      	b.n	80037fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037e8:	4b08      	ldr	r3, [pc, #32]	; (800380c <_sbrk+0x64>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037ee:	4b07      	ldr	r3, [pc, #28]	; (800380c <_sbrk+0x64>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	4a05      	ldr	r2, [pc, #20]	; (800380c <_sbrk+0x64>)
 80037f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037fa:	68fb      	ldr	r3, [r7, #12]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	20020000 	.word	0x20020000
 8003808:	00000800 	.word	0x00000800
 800380c:	20000bd4 	.word	0x20000bd4
 8003810:	20006200 	.word	0x20006200

08003814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <SystemInit+0x28>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381e:	4a07      	ldr	r2, [pc, #28]	; (800383c <SystemInit+0x28>)
 8003820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <SystemInit+0x28>)
 800382a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800382e:	609a      	str	r2, [r3, #8]
#endif
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	e000ed00 	.word	0xe000ed00

08003840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003878 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003844:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003846:	e003      	b.n	8003850 <LoopCopyDataInit>

08003848 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003848:	4b0c      	ldr	r3, [pc, #48]	; (800387c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800384a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800384c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800384e:	3104      	adds	r1, #4

08003850 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003850:	480b      	ldr	r0, [pc, #44]	; (8003880 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003854:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003856:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003858:	d3f6      	bcc.n	8003848 <CopyDataInit>
  ldr  r2, =_sbss
 800385a:	4a0b      	ldr	r2, [pc, #44]	; (8003888 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800385c:	e002      	b.n	8003864 <LoopFillZerobss>

0800385e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800385e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003860:	f842 3b04 	str.w	r3, [r2], #4

08003864 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003864:	4b09      	ldr	r3, [pc, #36]	; (800388c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003866:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003868:	d3f9      	bcc.n	800385e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800386a:	f7ff ffd3 	bl	8003814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800386e:	f008 f937 	bl	800bae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003872:	f7fd f9f3 	bl	8000c5c <main>
  bx  lr    
 8003876:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003878:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800387c:	0800ef10 	.word	0x0800ef10
  ldr  r0, =_sdata
 8003880:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003884:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8003888:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 800388c:	200061fc 	.word	0x200061fc

08003890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003890:	e7fe      	b.n	8003890 <ADC_IRQHandler>
	...

08003894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003898:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <HAL_Init+0x40>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <HAL_Init+0x40>)
 800389e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_Init+0x40>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <HAL_Init+0x40>)
 80038aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <HAL_Init+0x40>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a07      	ldr	r2, [pc, #28]	; (80038d4 <HAL_Init+0x40>)
 80038b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038bc:	2003      	movs	r0, #3
 80038be:	f000 f8fc 	bl	8003aba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038c2:	200f      	movs	r0, #15
 80038c4:	f7ff feb6 	bl	8003634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038c8:	f7ff fcc8 	bl	800325c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023c00 	.word	0x40023c00

080038d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_IncTick+0x20>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	461a      	mov	r2, r3
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <HAL_IncTick+0x24>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4413      	add	r3, r2
 80038e8:	4a04      	ldr	r2, [pc, #16]	; (80038fc <HAL_IncTick+0x24>)
 80038ea:	6013      	str	r3, [r2, #0]
}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000080 	.word	0x20000080
 80038fc:	20000bd8 	.word	0x20000bd8

08003900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return uwTick;
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <HAL_GetTick+0x14>)
 8003906:	681b      	ldr	r3, [r3, #0]
}
 8003908:	4618      	mov	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000bd8 	.word	0x20000bd8

08003918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003920:	f7ff ffee 	bl	8003900 <HAL_GetTick>
 8003924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003930:	d005      	beq.n	800393e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <HAL_Delay+0x44>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4413      	add	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800393e:	bf00      	nop
 8003940:	f7ff ffde 	bl	8003900 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	429a      	cmp	r2, r3
 800394e:	d8f7      	bhi.n	8003940 <HAL_Delay+0x28>
  {
  }
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000080 	.word	0x20000080

08003960 <__NVIC_SetPriorityGrouping>:
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800397c:	4013      	ands	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800398c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003992:	4a04      	ldr	r2, [pc, #16]	; (80039a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	60d3      	str	r3, [r2, #12]
}
 8003998:	bf00      	nop
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	e000ed00 	.word	0xe000ed00

080039a8 <__NVIC_GetPriorityGrouping>:
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039ac:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <__NVIC_GetPriorityGrouping+0x18>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	0a1b      	lsrs	r3, r3, #8
 80039b2:	f003 0307 	and.w	r3, r3, #7
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <__NVIC_EnableIRQ>:
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	db0b      	blt.n	80039ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	f003 021f 	and.w	r2, r3, #31
 80039dc:	4907      	ldr	r1, [pc, #28]	; (80039fc <__NVIC_EnableIRQ+0x38>)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	2001      	movs	r0, #1
 80039e6:	fa00 f202 	lsl.w	r2, r0, r2
 80039ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000e100 	.word	0xe000e100

08003a00 <__NVIC_SetPriority>:
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	6039      	str	r1, [r7, #0]
 8003a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	db0a      	blt.n	8003a2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	490c      	ldr	r1, [pc, #48]	; (8003a4c <__NVIC_SetPriority+0x4c>)
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	0112      	lsls	r2, r2, #4
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	440b      	add	r3, r1
 8003a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a28:	e00a      	b.n	8003a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	4908      	ldr	r1, [pc, #32]	; (8003a50 <__NVIC_SetPriority+0x50>)
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	3b04      	subs	r3, #4
 8003a38:	0112      	lsls	r2, r2, #4
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	761a      	strb	r2, [r3, #24]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	e000e100 	.word	0xe000e100
 8003a50:	e000ed00 	.word	0xe000ed00

08003a54 <NVIC_EncodePriority>:
{
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	; 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f1c3 0307 	rsb	r3, r3, #7
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	bf28      	it	cs
 8003a72:	2304      	movcs	r3, #4
 8003a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2b06      	cmp	r3, #6
 8003a7c:	d902      	bls.n	8003a84 <NVIC_EncodePriority+0x30>
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3b03      	subs	r3, #3
 8003a82:	e000      	b.n	8003a86 <NVIC_EncodePriority+0x32>
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43da      	mvns	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	401a      	ands	r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa6:	43d9      	mvns	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aac:	4313      	orrs	r3, r2
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3724      	adds	r7, #36	; 0x24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff ff4c 	bl	8003960 <__NVIC_SetPriorityGrouping>
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ae2:	f7ff ff61 	bl	80039a8 <__NVIC_GetPriorityGrouping>
 8003ae6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	6978      	ldr	r0, [r7, #20]
 8003aee:	f7ff ffb1 	bl	8003a54 <NVIC_EncodePriority>
 8003af2:	4602      	mov	r2, r0
 8003af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff ff80 	bl	8003a00 <__NVIC_SetPriority>
}
 8003b00:	bf00      	nop
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff ff54 	bl	80039c4 <__NVIC_EnableIRQ>
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b30:	f7ff fee6 	bl	8003900 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e099      	b.n	8003c74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b60:	e00f      	b.n	8003b82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b62:	f7ff fecd 	bl	8003900 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b05      	cmp	r3, #5
 8003b6e:	d908      	bls.n	8003b82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2203      	movs	r2, #3
 8003b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e078      	b.n	8003c74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e8      	bne.n	8003b62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4b38      	ldr	r3, [pc, #224]	; (8003c7c <HAL_DMA_Init+0x158>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d107      	bne.n	8003bec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	4313      	orrs	r3, r2
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f023 0307 	bic.w	r3, r3, #7
 8003c02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d117      	bne.n	8003c46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00e      	beq.n	8003c46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fb01 	bl	8004230 <DMA_CheckFifoParam>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2240      	movs	r2, #64	; 0x40
 8003c38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c42:	2301      	movs	r3, #1
 8003c44:	e016      	b.n	8003c74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fab8 	bl	80041c4 <DMA_CalcBaseAndBitshift>
 8003c54:	4603      	mov	r3, r0
 8003c56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5c:	223f      	movs	r2, #63	; 0x3f
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	f010803f 	.word	0xf010803f

08003c80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_DMA_Start_IT+0x26>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e040      	b.n	8003d28 <HAL_DMA_Start_IT+0xa8>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d12f      	bne.n	8003d1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fa4a 	bl	8004168 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd8:	223f      	movs	r2, #63	; 0x3f
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0216 	orr.w	r2, r2, #22
 8003cee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0208 	orr.w	r2, r2, #8
 8003d06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e005      	b.n	8003d26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d22:	2302      	movs	r3, #2
 8003d24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d3e:	f7ff fddf 	bl	8003900 <HAL_GetTick>
 8003d42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d008      	beq.n	8003d62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2280      	movs	r2, #128	; 0x80
 8003d54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e052      	b.n	8003e08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0216 	bic.w	r2, r2, #22
 8003d70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695a      	ldr	r2, [r3, #20]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d103      	bne.n	8003d92 <HAL_DMA_Abort+0x62>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0208 	bic.w	r2, r2, #8
 8003da0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003db2:	e013      	b.n	8003ddc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003db4:	f7ff fda4 	bl	8003900 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	d90c      	bls.n	8003ddc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2203      	movs	r2, #3
 8003dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e015      	b.n	8003e08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e4      	bne.n	8003db4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dee:	223f      	movs	r2, #63	; 0x3f
 8003df0:	409a      	lsls	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d004      	beq.n	8003e2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2280      	movs	r2, #128	; 0x80
 8003e28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e00c      	b.n	8003e48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2205      	movs	r2, #5
 8003e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0201 	bic.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e60:	4b8e      	ldr	r3, [pc, #568]	; (800409c <HAL_DMA_IRQHandler+0x248>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a8e      	ldr	r2, [pc, #568]	; (80040a0 <HAL_DMA_IRQHandler+0x24c>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	0a9b      	lsrs	r3, r3, #10
 8003e6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7e:	2208      	movs	r2, #8
 8003e80:	409a      	lsls	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d01a      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0204 	bic.w	r2, r2, #4
 8003ea6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eac:	2208      	movs	r2, #8
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	f043 0201 	orr.w	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d012      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00b      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eee:	f043 0202 	orr.w	r2, r3, #2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efa:	2204      	movs	r2, #4
 8003efc:	409a      	lsls	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d012      	beq.n	8003f2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f18:	2204      	movs	r2, #4
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f043 0204 	orr.w	r2, r3, #4
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f30:	2210      	movs	r2, #16
 8003f32:	409a      	lsls	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d043      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d03c      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4e:	2210      	movs	r2, #16
 8003f50:	409a      	lsls	r2, r3
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d018      	beq.n	8003f96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d108      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d024      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
 8003f82:	e01f      	b.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01b      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
 8003f94:	e016      	b.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d107      	bne.n	8003fb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0208 	bic.w	r2, r2, #8
 8003fb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc8:	2220      	movs	r2, #32
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 808f 	beq.w	80040f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8087 	beq.w	80040f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fea:	2220      	movs	r2, #32
 8003fec:	409a      	lsls	r2, r3
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b05      	cmp	r3, #5
 8003ffc:	d136      	bne.n	800406c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0216 	bic.w	r2, r2, #22
 800400c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695a      	ldr	r2, [r3, #20]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800401c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <HAL_DMA_IRQHandler+0x1da>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0208 	bic.w	r2, r2, #8
 800403c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004042:	223f      	movs	r2, #63	; 0x3f
 8004044:	409a      	lsls	r2, r3
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405e:	2b00      	cmp	r3, #0
 8004060:	d07e      	beq.n	8004160 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
        }
        return;
 800406a:	e079      	b.n	8004160 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01d      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10d      	bne.n	80040a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	2b00      	cmp	r3, #0
 800408e:	d031      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	4798      	blx	r3
 8004098:	e02c      	b.n	80040f4 <HAL_DMA_IRQHandler+0x2a0>
 800409a:	bf00      	nop
 800409c:	20000078 	.word	0x20000078
 80040a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d023      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4798      	blx	r3
 80040b4:	e01e      	b.n	80040f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10f      	bne.n	80040e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0210 	bic.w	r2, r2, #16
 80040d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d032      	beq.n	8004162 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d022      	beq.n	800414e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2205      	movs	r2, #5
 800410c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	3301      	adds	r3, #1
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	429a      	cmp	r2, r3
 800412a:	d307      	bcc.n	800413c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f2      	bne.n	8004120 <HAL_DMA_IRQHandler+0x2cc>
 800413a:	e000      	b.n	800413e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800413c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	4798      	blx	r3
 800415e:	e000      	b.n	8004162 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004160:	bf00      	nop
    }
  }
}
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004184:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b40      	cmp	r3, #64	; 0x40
 8004194:	d108      	bne.n	80041a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041a6:	e007      	b.n	80041b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	60da      	str	r2, [r3, #12]
}
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	3b10      	subs	r3, #16
 80041d4:	4a14      	ldr	r2, [pc, #80]	; (8004228 <DMA_CalcBaseAndBitshift+0x64>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041de:	4a13      	ldr	r2, [pc, #76]	; (800422c <DMA_CalcBaseAndBitshift+0x68>)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d909      	bls.n	8004206 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	1d1a      	adds	r2, r3, #4
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	659a      	str	r2, [r3, #88]	; 0x58
 8004204:	e007      	b.n	8004216 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800420e:	f023 0303 	bic.w	r3, r3, #3
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	aaaaaaab 	.word	0xaaaaaaab
 800422c:	0800ed64 	.word	0x0800ed64

08004230 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d11f      	bne.n	800428a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b03      	cmp	r3, #3
 800424e:	d856      	bhi.n	80042fe <DMA_CheckFifoParam+0xce>
 8004250:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <DMA_CheckFifoParam+0x28>)
 8004252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004256:	bf00      	nop
 8004258:	08004269 	.word	0x08004269
 800425c:	0800427b 	.word	0x0800427b
 8004260:	08004269 	.word	0x08004269
 8004264:	080042ff 	.word	0x080042ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d046      	beq.n	8004302 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004278:	e043      	b.n	8004302 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004282:	d140      	bne.n	8004306 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004288:	e03d      	b.n	8004306 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004292:	d121      	bne.n	80042d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b03      	cmp	r3, #3
 8004298:	d837      	bhi.n	800430a <DMA_CheckFifoParam+0xda>
 800429a:	a201      	add	r2, pc, #4	; (adr r2, 80042a0 <DMA_CheckFifoParam+0x70>)
 800429c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a0:	080042b1 	.word	0x080042b1
 80042a4:	080042b7 	.word	0x080042b7
 80042a8:	080042b1 	.word	0x080042b1
 80042ac:	080042c9 	.word	0x080042c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
      break;
 80042b4:	e030      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d025      	beq.n	800430e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c6:	e022      	b.n	800430e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042d0:	d11f      	bne.n	8004312 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042d6:	e01c      	b.n	8004312 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d903      	bls.n	80042e6 <DMA_CheckFifoParam+0xb6>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d003      	beq.n	80042ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042e4:	e018      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
      break;
 80042ea:	e015      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00e      	beq.n	8004316 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
      break;
 80042fc:	e00b      	b.n	8004316 <DMA_CheckFifoParam+0xe6>
      break;
 80042fe:	bf00      	nop
 8004300:	e00a      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
      break;
 8004302:	bf00      	nop
 8004304:	e008      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
      break;
 8004306:	bf00      	nop
 8004308:	e006      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
      break;
 800430a:	bf00      	nop
 800430c:	e004      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
      break;
 800430e:	bf00      	nop
 8004310:	e002      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
      break;   
 8004312:	bf00      	nop
 8004314:	e000      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
      break;
 8004316:	bf00      	nop
    }
  } 
  
  return status; 
 8004318:	7bfb      	ldrb	r3, [r7, #15]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop

08004328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004328:	b480      	push	{r7}
 800432a:	b089      	sub	sp, #36	; 0x24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004336:	2300      	movs	r3, #0
 8004338:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800433a:	2300      	movs	r3, #0
 800433c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
 8004342:	e16b      	b.n	800461c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004344:	2201      	movs	r2, #1
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4013      	ands	r3, r2
 8004356:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	429a      	cmp	r2, r3
 800435e:	f040 815a 	bne.w	8004616 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b01      	cmp	r3, #1
 800436c:	d005      	beq.n	800437a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004376:	2b02      	cmp	r3, #2
 8004378:	d130      	bne.n	80043dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	2203      	movs	r2, #3
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4013      	ands	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043b0:	2201      	movs	r2, #1
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 0201 	and.w	r2, r3, #1
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d017      	beq.n	8004418 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	2203      	movs	r2, #3
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	43db      	mvns	r3, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4013      	ands	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4313      	orrs	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d123      	bne.n	800446c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	08da      	lsrs	r2, r3, #3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3208      	adds	r2, #8
 800442c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004430:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	220f      	movs	r2, #15
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43db      	mvns	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	08da      	lsrs	r2, r3, #3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3208      	adds	r2, #8
 8004466:	69b9      	ldr	r1, [r7, #24]
 8004468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	2203      	movs	r2, #3
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	43db      	mvns	r3, r3
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	4013      	ands	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f003 0203 	and.w	r2, r3, #3
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4313      	orrs	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 80b4 	beq.w	8004616 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	4b60      	ldr	r3, [pc, #384]	; (8004634 <HAL_GPIO_Init+0x30c>)
 80044b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b6:	4a5f      	ldr	r2, [pc, #380]	; (8004634 <HAL_GPIO_Init+0x30c>)
 80044b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044bc:	6453      	str	r3, [r2, #68]	; 0x44
 80044be:	4b5d      	ldr	r3, [pc, #372]	; (8004634 <HAL_GPIO_Init+0x30c>)
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044ca:	4a5b      	ldr	r2, [pc, #364]	; (8004638 <HAL_GPIO_Init+0x310>)
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	089b      	lsrs	r3, r3, #2
 80044d0:	3302      	adds	r3, #2
 80044d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	220f      	movs	r2, #15
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43db      	mvns	r3, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4013      	ands	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a52      	ldr	r2, [pc, #328]	; (800463c <HAL_GPIO_Init+0x314>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d02b      	beq.n	800454e <HAL_GPIO_Init+0x226>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a51      	ldr	r2, [pc, #324]	; (8004640 <HAL_GPIO_Init+0x318>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d025      	beq.n	800454a <HAL_GPIO_Init+0x222>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a50      	ldr	r2, [pc, #320]	; (8004644 <HAL_GPIO_Init+0x31c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01f      	beq.n	8004546 <HAL_GPIO_Init+0x21e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a4f      	ldr	r2, [pc, #316]	; (8004648 <HAL_GPIO_Init+0x320>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d019      	beq.n	8004542 <HAL_GPIO_Init+0x21a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a4e      	ldr	r2, [pc, #312]	; (800464c <HAL_GPIO_Init+0x324>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d013      	beq.n	800453e <HAL_GPIO_Init+0x216>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a4d      	ldr	r2, [pc, #308]	; (8004650 <HAL_GPIO_Init+0x328>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00d      	beq.n	800453a <HAL_GPIO_Init+0x212>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a4c      	ldr	r2, [pc, #304]	; (8004654 <HAL_GPIO_Init+0x32c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d007      	beq.n	8004536 <HAL_GPIO_Init+0x20e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a4b      	ldr	r2, [pc, #300]	; (8004658 <HAL_GPIO_Init+0x330>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d101      	bne.n	8004532 <HAL_GPIO_Init+0x20a>
 800452e:	2307      	movs	r3, #7
 8004530:	e00e      	b.n	8004550 <HAL_GPIO_Init+0x228>
 8004532:	2308      	movs	r3, #8
 8004534:	e00c      	b.n	8004550 <HAL_GPIO_Init+0x228>
 8004536:	2306      	movs	r3, #6
 8004538:	e00a      	b.n	8004550 <HAL_GPIO_Init+0x228>
 800453a:	2305      	movs	r3, #5
 800453c:	e008      	b.n	8004550 <HAL_GPIO_Init+0x228>
 800453e:	2304      	movs	r3, #4
 8004540:	e006      	b.n	8004550 <HAL_GPIO_Init+0x228>
 8004542:	2303      	movs	r3, #3
 8004544:	e004      	b.n	8004550 <HAL_GPIO_Init+0x228>
 8004546:	2302      	movs	r3, #2
 8004548:	e002      	b.n	8004550 <HAL_GPIO_Init+0x228>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <HAL_GPIO_Init+0x228>
 800454e:	2300      	movs	r3, #0
 8004550:	69fa      	ldr	r2, [r7, #28]
 8004552:	f002 0203 	and.w	r2, r2, #3
 8004556:	0092      	lsls	r2, r2, #2
 8004558:	4093      	lsls	r3, r2
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4313      	orrs	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004560:	4935      	ldr	r1, [pc, #212]	; (8004638 <HAL_GPIO_Init+0x310>)
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	089b      	lsrs	r3, r3, #2
 8004566:	3302      	adds	r3, #2
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800456e:	4b3b      	ldr	r3, [pc, #236]	; (800465c <HAL_GPIO_Init+0x334>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	43db      	mvns	r3, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4013      	ands	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004592:	4a32      	ldr	r2, [pc, #200]	; (800465c <HAL_GPIO_Init+0x334>)
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004598:	4b30      	ldr	r3, [pc, #192]	; (800465c <HAL_GPIO_Init+0x334>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045bc:	4a27      	ldr	r2, [pc, #156]	; (800465c <HAL_GPIO_Init+0x334>)
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045c2:	4b26      	ldr	r3, [pc, #152]	; (800465c <HAL_GPIO_Init+0x334>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	43db      	mvns	r3, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4013      	ands	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045e6:	4a1d      	ldr	r2, [pc, #116]	; (800465c <HAL_GPIO_Init+0x334>)
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045ec:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_GPIO_Init+0x334>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4013      	ands	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004610:	4a12      	ldr	r2, [pc, #72]	; (800465c <HAL_GPIO_Init+0x334>)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	3301      	adds	r3, #1
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	2b0f      	cmp	r3, #15
 8004620:	f67f ae90 	bls.w	8004344 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004624:	bf00      	nop
 8004626:	bf00      	nop
 8004628:	3724      	adds	r7, #36	; 0x24
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800
 8004638:	40013800 	.word	0x40013800
 800463c:	40020000 	.word	0x40020000
 8004640:	40020400 	.word	0x40020400
 8004644:	40020800 	.word	0x40020800
 8004648:	40020c00 	.word	0x40020c00
 800464c:	40021000 	.word	0x40021000
 8004650:	40021400 	.word	0x40021400
 8004654:	40021800 	.word	0x40021800
 8004658:	40021c00 	.word	0x40021c00
 800465c:	40013c00 	.word	0x40013c00

08004660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	807b      	strh	r3, [r7, #2]
 800466c:	4613      	mov	r3, r2
 800466e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004670:	787b      	ldrb	r3, [r7, #1]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004676:	887a      	ldrh	r2, [r7, #2]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800467c:	e003      	b.n	8004686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800467e:	887b      	ldrh	r3, [r7, #2]
 8004680:	041a      	lsls	r2, r3, #16
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	619a      	str	r2, [r3, #24]
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	460b      	mov	r3, r1
 800469c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046a4:	887a      	ldrh	r2, [r7, #2]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4013      	ands	r3, r2
 80046aa:	041a      	lsls	r2, r3, #16
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	43d9      	mvns	r1, r3
 80046b0:	887b      	ldrh	r3, [r7, #2]
 80046b2:	400b      	ands	r3, r1
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	619a      	str	r2, [r3, #24]
}
 80046ba:	bf00      	nop
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_NAND_Init>:
  * @param  ComSpace_Timing pointer to Common space timing structure
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing, FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if(hnand == NULL)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_NAND_Init+0x16>
  {
     return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e03e      	b.n	800475a <HAL_NAND_Init+0x94>
  }

  if(hnand->State == HAL_NAND_STATE_RESET)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d106      	bne.n	80046f6 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7fe ff95 	bl	8003620 <HAL_NAND_MspInit>
#endif
  }

  /* Initialize NAND control Interface */
  FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3304      	adds	r3, #4
 80046fe:	4619      	mov	r1, r3
 8004700:	4610      	mov	r0, r2
 8004702:	f003 ff45 	bl	8008590 <FSMC_NAND_Init>
  
  /* Initialize NAND common space timing Interface */  
  FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	461a      	mov	r2, r3
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	f003 ff7f 	bl	8008614 <FSMC_NAND_CommonSpace_Timing_Init>
  
  /* Initialize NAND attribute space timing Interface */  
  FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	461a      	mov	r2, r3
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	f003 ffad 	bl	8008680 <FSMC_NAND_AttributeSpace_Timing_Init>
  
  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b10      	cmp	r3, #16
 800472c:	d108      	bne.n	8004740 <HAL_NAND_Init+0x7a>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0204 	orr.w	r2, r2, #4
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	e007      	b.n	8004750 <HAL_NAND_Init+0x8a>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0204 	orr.w	r2, r2, #4
 800474e:	621a      	str	r2, [r3, #32]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
*/
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b10      	cmp	r3, #16
 8004770:	d10a      	bne.n	8004788 <HAL_NAND_IRQHandler+0x26>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b01      	cmp	r3, #1
 800477e:	bf0c      	ite	eq
 8004780:	2301      	moveq	r3, #1
 8004782:	2300      	movne	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	e009      	b.n	800479c <HAL_NAND_IRQHandler+0x3a>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b01      	cmp	r3, #1
 8004794:	bf0c      	ite	eq
 8004796:	2301      	moveq	r3, #1
 8004798:	2300      	movne	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d017      	beq.n	80047d0 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7fd fbe7 	bl	8001f74 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Rising edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b10      	cmp	r3, #16
 80047ac:	d108      	bne.n	80047c0 <HAL_NAND_IRQHandler+0x5e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0201 	bic.w	r2, r2, #1
 80047bc:	605a      	str	r2, [r3, #4]
 80047be:	e007      	b.n	80047d0 <HAL_NAND_IRQHandler+0x6e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0201 	bic.w	r2, r2, #1
 80047ce:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt Level flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d10a      	bne.n	80047ee <HAL_NAND_IRQHandler+0x8c>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	bf0c      	ite	eq
 80047e6:	2301      	moveq	r3, #1
 80047e8:	2300      	movne	r3, #0
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	e009      	b.n	8004802 <HAL_NAND_IRQHandler+0xa0>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d017      	beq.n	8004836 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fd fbb4 	bl	8001f74 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Level pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b10      	cmp	r3, #16
 8004812:	d108      	bne.n	8004826 <HAL_NAND_IRQHandler+0xc4>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0202 	bic.w	r2, r2, #2
 8004822:	605a      	str	r2, [r3, #4]
 8004824:	e007      	b.n	8004836 <HAL_NAND_IRQHandler+0xd4>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0202 	bic.w	r2, r2, #2
 8004834:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Check NAND interrupt Falling edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b10      	cmp	r3, #16
 800483c:	d10a      	bne.n	8004854 <HAL_NAND_IRQHandler+0xf2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b04      	cmp	r3, #4
 800484a:	bf0c      	ite	eq
 800484c:	2301      	moveq	r3, #1
 800484e:	2300      	movne	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e009      	b.n	8004868 <HAL_NAND_IRQHandler+0x106>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b04      	cmp	r3, #4
 8004860:	bf0c      	ite	eq
 8004862:	2301      	moveq	r3, #1
 8004864:	2300      	movne	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d017      	beq.n	800489c <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7fd fb81 	bl	8001f74 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Falling edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b10      	cmp	r3, #16
 8004878:	d108      	bne.n	800488c <HAL_NAND_IRQHandler+0x12a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0204 	bic.w	r2, r2, #4
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	e007      	b.n	800489c <HAL_NAND_IRQHandler+0x13a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0204 	bic.w	r2, r2, #4
 800489a:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt FIFO empty flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d10a      	bne.n	80048ba <HAL_NAND_IRQHandler+0x158>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b40      	cmp	r3, #64	; 0x40
 80048b0:	bf0c      	ite	eq
 80048b2:	2301      	moveq	r3, #1
 80048b4:	2300      	movne	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	e009      	b.n	80048ce <HAL_NAND_IRQHandler+0x16c>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	bf0c      	ite	eq
 80048c8:	2301      	moveq	r3, #1
 80048ca:	2300      	movne	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d017      	beq.n	8004902 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fd fb4e 	bl	8001f74 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt FIFO empty pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d108      	bne.n	80048f2 <HAL_NAND_IRQHandler+0x190>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ee:	605a      	str	r2, [r3, #4]
  }
}
 80048f0:	e007      	b.n	8004902 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004900:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_NAND_Read_Page_8b>:
  * @param  pBuffer  pointer to destination read buffer
  * @param  NumPageToRead  number of pages to read from block 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer, uint32_t NumPageToRead)
{   
 800490a:	b580      	push	{r7, lr}
 800490c:	b08a      	sub	sp, #40	; 0x28
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	603b      	str	r3, [r7, #0]
  __IO uint32_t index  = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	61bb      	str	r3, [r7, #24]
  uint32_t deviceaddress = 0U, size = 0U, numPagesRead = 0U, nandaddress = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	2300      	movs	r3, #0
 800492a:	623b      	str	r3, [r7, #32]
 800492c:	2300      	movs	r3, #0
 800492e:	61fb      	str	r3, [r7, #28]
  
  /* Process Locked */
  __HAL_LOCK(hnand); 
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_NAND_Read_Page_8b+0x34>
 800493a:	2302      	movs	r3, #2
 800493c:	e108      	b.n	8004b50 <HAL_NAND_Read_Page_8b+0x246>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2020 	strb.w	r2, [r3, #32]
  
  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d101      	bne.n	8004956 <HAL_NAND_Read_Page_8b+0x4c>
  {
     return HAL_BUSY;
 8004952:	2302      	movs	r3, #2
 8004954:	e0fc      	b.n	8004b50 <HAL_NAND_Read_Page_8b+0x246>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b10      	cmp	r3, #16
 800495c:	d103      	bne.n	8004966 <HAL_NAND_Read_Page_8b+0x5c>
  {
    deviceaddress = NAND_DEVICE1;
 800495e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
 8004964:	e002      	b.n	800496c <HAL_NAND_Read_Page_8b+0x62>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8004966:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_BUSY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* NAND raw address calculation */
  nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	4619      	mov	r1, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	889b      	ldrh	r3, [r3, #4]
 800497e:	461a      	mov	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	885b      	ldrh	r3, [r3, #2]
 8004984:	4618      	mov	r0, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	fb00 f303 	mul.w	r3, r0, r3
 800498e:	4413      	add	r3, r2
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004994:	fb02 f303 	mul.w	r3, r2, r3
 8004998:	440b      	add	r3, r1
 800499a:	61fb      	str	r3, [r7, #28]

  /* Page(s) read loop */  
  while((NumPageToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 800499c:	e0c2      	b.n	8004b24 <HAL_NAND_Read_Page_8b+0x21a>
  {
    /* update the buffer size */
    size = (hnand->Config.PageSize) + ((hnand->Config.PageSize) * numPagesRead);
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	3301      	adds	r3, #1
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	617b      	str	r3, [r7, #20]
    
    /* Send read page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
   
    /* Cards with page size <= 512 bytes */
    if((hnand->Config.PageSize) <= 512U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049be:	d835      	bhi.n	8004a2c <HAL_NAND_Read_Page_8b+0x122>
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049c8:	fb02 f303 	mul.w	r3, r2, r3
 80049cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d0:	d212      	bcs.n	80049f8 <HAL_NAND_Read_Page_8b+0xee>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	0a1a      	lsrs	r2, r3, #8
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	701a      	strb	r2, [r3, #0]
 80049f6:	e058      	b.n	8004aaa <HAL_NAND_Read_Page_8b+0x1a0>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	0a1a      	lsrs	r2, r3, #8
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	0c1a      	lsrs	r2, r3, #16
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	e03e      	b.n	8004aaa <HAL_NAND_Read_Page_8b+0x1a0>
      }
    }
    else /* (hnand->Config.PageSize) > 512 */
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a34:	fb02 f303 	mul.w	r3, r2, r3
 8004a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3c:	d217      	bcs.n	8004a6e <HAL_NAND_Read_Page_8b+0x164>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a44:	2200      	movs	r2, #0
 8004a46:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a58:	69fa      	ldr	r2, [r7, #28]
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	0a1a      	lsrs	r2, r3, #8
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	e01d      	b.n	8004aaa <HAL_NAND_Read_Page_8b+0x1a0>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a7e:	2200      	movs	r2, #0
 8004a80:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	0a1a      	lsrs	r2, r3, #8
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	0c1a      	lsrs	r2, r3, #16
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]
      }
    }
  
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab0:	2230      	movs	r2, #48	; 0x30
 8004ab2:	701a      	strb	r2, [r3, #0]
      
    /* Check if an extra command is needed for reading pages  */
    if(hnand->Config.ExtraCommandEnable == ENABLE)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d125      	bne.n	8004b0a <HAL_NAND_Read_Page_8b+0x200>
    {
      /* Get tick */
      tickstart = HAL_GetTick();
 8004abe:	f7fe ff1f 	bl	8003900 <HAL_GetTick>
 8004ac2:	61b8      	str	r0, [r7, #24]
      
      /* Read status until NAND is ready */
      while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004ac4:	e009      	b.n	8004ada <HAL_NAND_Read_Page_8b+0x1d0>
      {
        if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 8004ac6:	f7fe ff1b 	bl	8003900 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ad4:	d901      	bls.n	8004ada <HAL_NAND_Read_Page_8b+0x1d0>
        {
          return HAL_TIMEOUT; 
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e03a      	b.n	8004b50 <HAL_NAND_Read_Page_8b+0x246>
      while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 fa08 	bl	8004ef0 <HAL_NAND_Read_Status>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d1ef      	bne.n	8004ac6 <HAL_NAND_Read_Page_8b+0x1bc>
        }
      }
      
      /* Go back to read mode */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004af0:	f3bf 8f4f 	dsb	sy
}
 8004af4:	bf00      	nop
      __DSB();
    }
    
    /* Get Data into Buffer */    
    for(; index < size; index++)
 8004af6:	e008      	b.n	8004b0a <HAL_NAND_Read_Page_8b+0x200>
    {
      *(uint8_t *)pBuffer++ = *(uint8_t *)deviceaddress;
 8004af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	1c59      	adds	r1, r3, #1
 8004afe:	6079      	str	r1, [r7, #4]
 8004b00:	7812      	ldrb	r2, [r2, #0]
 8004b02:	701a      	strb	r2, [r3, #0]
    for(; index < size; index++)
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	3301      	adds	r3, #1
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d8f2      	bhi.n	8004af8 <HAL_NAND_Read_Page_8b+0x1ee>
    }
    
    /* Increment read pages number */
    numPagesRead++;
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	3301      	adds	r3, #1
 8004b16:	623b      	str	r3, [r7, #32]
    
    /* Decrement pages to read */
    NumPageToRead--;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	603b      	str	r3, [r7, #0]
    
    /* Increment the NAND address */
    nandaddress = (uint32_t)(nandaddress + 1U);
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	3301      	adds	r3, #1
 8004b22:	61fb      	str	r3, [r7, #28]
  while((NumPageToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <HAL_NAND_Read_Page_8b+0x234>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b32:	fb02 f303 	mul.w	r3, r2, r3
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	f4ff af30 	bcc.w	800499e <HAL_NAND_Read_Page_8b+0x94>
  }
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process unlocked */
  __HAL_UNLOCK(hnand);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3728      	adds	r7, #40	; 0x28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_NAND_Write_Page_8b>:
  * @param  pBuffer  pointer to source buffer to write  
  * @param  NumPageToWrite   number of pages to write to block 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08a      	sub	sp, #40	; 0x28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
  __IO uint32_t index = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61bb      	str	r3, [r7, #24]
  uint32_t deviceaddress = 0U, size = 0U, numPagesWritten = 0U, nandaddress = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	2300      	movs	r3, #0
 8004b78:	623b      	str	r3, [r7, #32]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
  
  /* Process Locked */
  __HAL_LOCK(hnand);  
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_NAND_Write_Page_8b+0x34>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e106      	b.n	8004d9a <HAL_NAND_Write_Page_8b+0x242>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2020 	strb.w	r2, [r3, #32]

  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d101      	bne.n	8004ba4 <HAL_NAND_Write_Page_8b+0x4c>
  {
     return HAL_BUSY;
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e0fa      	b.n	8004d9a <HAL_NAND_Write_Page_8b+0x242>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	d103      	bne.n	8004bb4 <HAL_NAND_Write_Page_8b+0x5c>
  {
    deviceaddress = NAND_DEVICE1;
 8004bac:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb2:	e002      	b.n	8004bba <HAL_NAND_Write_Page_8b+0x62>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8004bb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Update the NAND controller state */ 
  hnand->State = HAL_NAND_STATE_BUSY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* NAND raw address calculation */
  nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	889b      	ldrh	r3, [r3, #4]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	885b      	ldrh	r3, [r3, #2]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	fb00 f303 	mul.w	r3, r0, r3
 8004bdc:	4413      	add	r3, r2
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004be2:	fb02 f303 	mul.w	r3, r2, r3
 8004be6:	440b      	add	r3, r1
 8004be8:	61fb      	str	r3, [r7, #28]
    
  /* Page(s) write loop */
  while((NumPageToWrite != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004bea:	e0c0      	b.n	8004d6e <HAL_NAND_Write_Page_8b+0x216>
  {
    /* update the buffer size */
    size = hnand->Config.PageSize + ((hnand->Config.PageSize) * numPagesWritten);
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bf4:	fb02 f303 	mul.w	r3, r2, r3
 8004bf8:	617b      	str	r3, [r7, #20]
    
    /* Send write page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0a:	2280      	movs	r2, #128	; 0x80
 8004c0c:	701a      	strb	r2, [r3, #0]

    /* Cards with page size <= 512 bytes */
    if((hnand->Config.PageSize) <= 512U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c16:	d835      	bhi.n	8004c84 <HAL_NAND_Write_Page_8b+0x12c>
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c20:	fb02 f303 	mul.w	r3, r2, r3
 8004c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c28:	d212      	bcs.n	8004c50 <HAL_NAND_Write_Page_8b+0xf8>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	0a1a      	lsrs	r2, r3, #8
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	e068      	b.n	8004d22 <HAL_NAND_Write_Page_8b+0x1ca>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c56:	2200      	movs	r2, #0
 8004c58:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c60:	69fa      	ldr	r2, [r7, #28]
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	0a1a      	lsrs	r2, r3, #8
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	0c1a      	lsrs	r2, r3, #16
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	e04e      	b.n	8004d22 <HAL_NAND_Write_Page_8b+0x1ca>
      }
    }
    else /* (hnand->Config.PageSize) > 512 */
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
 8004c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c94:	d217      	bcs.n	8004cc6 <HAL_NAND_Write_Page_8b+0x16e>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	0a1a      	lsrs	r2, r3, #8
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	e02d      	b.n	8004d22 <HAL_NAND_Write_Page_8b+0x1ca>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	0a1a      	lsrs	r2, r3, #8
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004cf4:	f3bf 8f4f 	dsb	sy
}
 8004cf8:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	0c1a      	lsrs	r2, r3, #16
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d08:	f3bf 8f4f 	dsb	sy
}
 8004d0c:	bf00      	nop
      }
    }
  

    /* Write data to memory */
    for(; index < size; index++)
 8004d0e:	e008      	b.n	8004d22 <HAL_NAND_Write_Page_8b+0x1ca>
    {
      *(__IO uint8_t *)deviceaddress = *(uint8_t *)pBuffer++;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	7013      	strb	r3, [r2, #0]
    for(; index < size; index++)
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d8f2      	bhi.n	8004d10 <HAL_NAND_Write_Page_8b+0x1b8>
    }
   
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d30:	2210      	movs	r2, #16
 8004d32:	701a      	strb	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d34:	f7fe fde4 	bl	8003900 <HAL_GetTick>
 8004d38:	61b8      	str	r0, [r7, #24]

    /* Read status until NAND is ready */
    while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004d3a:	e009      	b.n	8004d50 <HAL_NAND_Write_Page_8b+0x1f8>
    {
      
      if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 8004d3c:	f7fe fde0 	bl	8003900 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d4a:	d901      	bls.n	8004d50 <HAL_NAND_Write_Page_8b+0x1f8>
      {
        return HAL_TIMEOUT; 
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e024      	b.n	8004d9a <HAL_NAND_Write_Page_8b+0x242>
    while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f8cd 	bl	8004ef0 <HAL_NAND_Read_Status>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d1ef      	bne.n	8004d3c <HAL_NAND_Write_Page_8b+0x1e4>
      }
    }
 
    /* Increment written pages number */
    numPagesWritten++;
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	623b      	str	r3, [r7, #32]
    
    /* Decrement pages to write */
    NumPageToWrite--;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	603b      	str	r3, [r7, #0]
    
    /* Increment the NAND address */
    nandaddress = (uint32_t)(nandaddress + 1U);
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	61fb      	str	r3, [r7, #28]
  while((NumPageToWrite != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d009      	beq.n	8004d88 <HAL_NAND_Write_Page_8b+0x230>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d7c:	fb02 f303 	mul.w	r3, r2, r3
 8004d80:	69fa      	ldr	r2, [r7, #28]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	f4ff af32 	bcc.w	8004bec <HAL_NAND_Write_Page_8b+0x94>
  }
  
  /* Update the NAND controller state */ 
  hnand->State = HAL_NAND_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process unlocked */
  __HAL_UNLOCK(hnand);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3728      	adds	r7, #40	; 0x28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(hnand);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_NAND_Erase_Block+0x20>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e092      	b.n	8004ee8 <HAL_NAND_Erase_Block+0x146>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2020 	strb.w	r2, [r3, #32]
  
  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d101      	bne.n	8004dda <HAL_NAND_Erase_Block+0x38>
  {
     return HAL_BUSY;
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e086      	b.n	8004ee8 <HAL_NAND_Erase_Block+0x146>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b10      	cmp	r3, #16
 8004de0:	d103      	bne.n	8004dea <HAL_NAND_Erase_Block+0x48>
  {
    deviceaddress = NAND_DEVICE1;
 8004de2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	e002      	b.n	8004df0 <HAL_NAND_Erase_Block+0x4e>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8004dea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004dee:	60fb      	str	r3, [r7, #12]
  }
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_BUSY;  
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Send Erase block command sequence */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfe:	2260      	movs	r2, #96	; 0x60
 8004e00:	701a      	strb	r2, [r3, #0]

  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	889b      	ldrh	r3, [r3, #4]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	885b      	ldrh	r3, [r3, #2]
 8004e12:	4618      	mov	r0, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	fb00 f303 	mul.w	r3, r0, r3
 8004e1c:	440b      	add	r3, r1
 8004e1e:	b2d9      	uxtb	r1, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	fb11 f303 	smulbb	r3, r1, r3
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	68f9      	ldr	r1, [r7, #12]
 8004e2e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004e32:	4413      	add	r3, r2
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	700b      	strb	r3, [r1, #0]
  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	889b      	ldrh	r3, [r3, #4]
 8004e42:	461a      	mov	r2, r3
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	885b      	ldrh	r3, [r3, #2]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	fb00 f303 	mul.w	r3, r0, r3
 8004e52:	4413      	add	r3, r2
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e58:	fb02 f303 	mul.w	r3, r2, r3
 8004e5c:	440b      	add	r3, r1
 8004e5e:	0a1a      	lsrs	r2, r3, #8
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	889b      	ldrh	r3, [r3, #4]
 8004e74:	461a      	mov	r2, r3
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	885b      	ldrh	r3, [r3, #2]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	fb00 f303 	mul.w	r3, r0, r3
 8004e84:	4413      	add	r3, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e8a:	fb02 f303 	mul.w	r3, r2, r3
 8004e8e:	440b      	add	r3, r1
 8004e90:	0c1a      	lsrs	r2, r3, #16
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]
    
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1; 
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea2:	22d0      	movs	r2, #208	; 0xd0
 8004ea4:	701a      	strb	r2, [r3, #0]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004eae:	f7fe fd27 	bl	8003900 <HAL_GetTick>
 8004eb2:	60b8      	str	r0, [r7, #8]
  
  /* Read status until NAND is ready */
  while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004eb4:	e00d      	b.n	8004ed2 <HAL_NAND_Erase_Block+0x130>
  {
    if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 8004eb6:	f7fe fd23 	bl	8003900 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ec4:	d905      	bls.n	8004ed2 <HAL_NAND_Erase_Block+0x130>
    {
      /* Process unlocked */
      __HAL_UNLOCK(hnand);    
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2020 	strb.w	r2, [r3, #32]
  
      return HAL_TIMEOUT; 
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e00a      	b.n	8004ee8 <HAL_NAND_Erase_Block+0x146>
  while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f80c 	bl	8004ef0 <HAL_NAND_Read_Status>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b40      	cmp	r3, #64	; 0x40
 8004edc:	d1eb      	bne.n	8004eb6 <HAL_NAND_Erase_Block+0x114>
    } 
  }    
 
  /* Process unlocked */
  __HAL_UNLOCK(hnand);    
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;  
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t data = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60bb      	str	r3, [r7, #8]
  uint32_t deviceaddress = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d103      	bne.n	8004f10 <HAL_NAND_Read_Status+0x20>
  {
    deviceaddress = NAND_DEVICE1;
 8004f08:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	e002      	b.n	8004f16 <HAL_NAND_Read_Status+0x26>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8004f10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f14:	60fb      	str	r3, [r7, #12]
  } 

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f1c:	2270      	movs	r2, #112	; 0x70
 8004f1e:	701a      	strb	r2, [r3, #0]
  
  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if((data & NAND_ERROR) == NAND_ERROR)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <HAL_NAND_Read_Status+0x46>
  {
    return NAND_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e007      	b.n	8004f46 <HAL_NAND_Read_Status+0x56>
  } 
  else if((data & NAND_READY) == NAND_READY)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <HAL_NAND_Read_Status+0x54>
  {
    return NAND_READY;
 8004f40:	2340      	movs	r3, #64	; 0x40
 8004f42:	e000      	b.n	8004f46 <HAL_NAND_Read_Status+0x56>
  }

  return NAND_BUSY; 
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  return hnand->State;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f60:	b2db      	uxtb	r3, r3
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e267      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d075      	beq.n	800507a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f8e:	4b88      	ldr	r3, [pc, #544]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 030c 	and.w	r3, r3, #12
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d00c      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f9a:	4b85      	ldr	r3, [pc, #532]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d112      	bne.n	8004fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fa6:	4b82      	ldr	r3, [pc, #520]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fb2:	d10b      	bne.n	8004fcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb4:	4b7e      	ldr	r3, [pc, #504]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d05b      	beq.n	8005078 <HAL_RCC_OscConfig+0x108>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d157      	bne.n	8005078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e242      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd4:	d106      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x74>
 8004fd6:	4b76      	ldr	r3, [pc, #472]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a75      	ldr	r2, [pc, #468]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	e01d      	b.n	8005020 <HAL_RCC_OscConfig+0xb0>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fec:	d10c      	bne.n	8005008 <HAL_RCC_OscConfig+0x98>
 8004fee:	4b70      	ldr	r3, [pc, #448]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a6f      	ldr	r2, [pc, #444]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	4b6d      	ldr	r3, [pc, #436]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a6c      	ldr	r2, [pc, #432]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8005000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	e00b      	b.n	8005020 <HAL_RCC_OscConfig+0xb0>
 8005008:	4b69      	ldr	r3, [pc, #420]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a68      	ldr	r2, [pc, #416]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 800500e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	4b66      	ldr	r3, [pc, #408]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a65      	ldr	r2, [pc, #404]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 800501a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800501e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d013      	beq.n	8005050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005028:	f7fe fc6a 	bl	8003900 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005030:	f7fe fc66 	bl	8003900 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b64      	cmp	r3, #100	; 0x64
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e207      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005042:	4b5b      	ldr	r3, [pc, #364]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f0      	beq.n	8005030 <HAL_RCC_OscConfig+0xc0>
 800504e:	e014      	b.n	800507a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005050:	f7fe fc56 	bl	8003900 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005058:	f7fe fc52 	bl	8003900 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b64      	cmp	r3, #100	; 0x64
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e1f3      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800506a:	4b51      	ldr	r3, [pc, #324]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f0      	bne.n	8005058 <HAL_RCC_OscConfig+0xe8>
 8005076:	e000      	b.n	800507a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d063      	beq.n	800514e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005086:	4b4a      	ldr	r3, [pc, #296]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 030c 	and.w	r3, r3, #12
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00b      	beq.n	80050aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005092:	4b47      	ldr	r3, [pc, #284]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800509a:	2b08      	cmp	r3, #8
 800509c:	d11c      	bne.n	80050d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800509e:	4b44      	ldr	r3, [pc, #272]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d116      	bne.n	80050d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050aa:	4b41      	ldr	r3, [pc, #260]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <HAL_RCC_OscConfig+0x152>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d001      	beq.n	80050c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e1c7      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c2:	4b3b      	ldr	r3, [pc, #236]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	4937      	ldr	r1, [pc, #220]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050d6:	e03a      	b.n	800514e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d020      	beq.n	8005122 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050e0:	4b34      	ldr	r3, [pc, #208]	; (80051b4 <HAL_RCC_OscConfig+0x244>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e6:	f7fe fc0b 	bl	8003900 <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ec:	e008      	b.n	8005100 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ee:	f7fe fc07 	bl	8003900 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e1a8      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005100:	4b2b      	ldr	r3, [pc, #172]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f0      	beq.n	80050ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800510c:	4b28      	ldr	r3, [pc, #160]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	4925      	ldr	r1, [pc, #148]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 800511c:	4313      	orrs	r3, r2
 800511e:	600b      	str	r3, [r1, #0]
 8005120:	e015      	b.n	800514e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005122:	4b24      	ldr	r3, [pc, #144]	; (80051b4 <HAL_RCC_OscConfig+0x244>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fe fbea 	bl	8003900 <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005130:	f7fe fbe6 	bl	8003900 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e187      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005142:	4b1b      	ldr	r3, [pc, #108]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f0      	bne.n	8005130 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d036      	beq.n	80051c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d016      	beq.n	8005190 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005162:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <HAL_RCC_OscConfig+0x248>)
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005168:	f7fe fbca 	bl	8003900 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005170:	f7fe fbc6 	bl	8003900 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e167      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005182:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCC_OscConfig+0x240>)
 8005184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f0      	beq.n	8005170 <HAL_RCC_OscConfig+0x200>
 800518e:	e01b      	b.n	80051c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005190:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <HAL_RCC_OscConfig+0x248>)
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005196:	f7fe fbb3 	bl	8003900 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800519c:	e00e      	b.n	80051bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800519e:	f7fe fbaf 	bl	8003900 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d907      	bls.n	80051bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e150      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
 80051b0:	40023800 	.word	0x40023800
 80051b4:	42470000 	.word	0x42470000
 80051b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051bc:	4b88      	ldr	r3, [pc, #544]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 80051be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1ea      	bne.n	800519e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 8097 	beq.w	8005304 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d6:	2300      	movs	r3, #0
 80051d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051da:	4b81      	ldr	r3, [pc, #516]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10f      	bne.n	8005206 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051e6:	2300      	movs	r3, #0
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	4b7d      	ldr	r3, [pc, #500]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	4a7c      	ldr	r2, [pc, #496]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 80051f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f4:	6413      	str	r3, [r2, #64]	; 0x40
 80051f6:	4b7a      	ldr	r3, [pc, #488]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fe:	60bb      	str	r3, [r7, #8]
 8005200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005202:	2301      	movs	r3, #1
 8005204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005206:	4b77      	ldr	r3, [pc, #476]	; (80053e4 <HAL_RCC_OscConfig+0x474>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520e:	2b00      	cmp	r3, #0
 8005210:	d118      	bne.n	8005244 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005212:	4b74      	ldr	r3, [pc, #464]	; (80053e4 <HAL_RCC_OscConfig+0x474>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a73      	ldr	r2, [pc, #460]	; (80053e4 <HAL_RCC_OscConfig+0x474>)
 8005218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800521c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800521e:	f7fe fb6f 	bl	8003900 <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005226:	f7fe fb6b 	bl	8003900 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e10c      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005238:	4b6a      	ldr	r3, [pc, #424]	; (80053e4 <HAL_RCC_OscConfig+0x474>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0f0      	beq.n	8005226 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d106      	bne.n	800525a <HAL_RCC_OscConfig+0x2ea>
 800524c:	4b64      	ldr	r3, [pc, #400]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 800524e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005250:	4a63      	ldr	r2, [pc, #396]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 8005252:	f043 0301 	orr.w	r3, r3, #1
 8005256:	6713      	str	r3, [r2, #112]	; 0x70
 8005258:	e01c      	b.n	8005294 <HAL_RCC_OscConfig+0x324>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2b05      	cmp	r3, #5
 8005260:	d10c      	bne.n	800527c <HAL_RCC_OscConfig+0x30c>
 8005262:	4b5f      	ldr	r3, [pc, #380]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005266:	4a5e      	ldr	r2, [pc, #376]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 8005268:	f043 0304 	orr.w	r3, r3, #4
 800526c:	6713      	str	r3, [r2, #112]	; 0x70
 800526e:	4b5c      	ldr	r3, [pc, #368]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 8005270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005272:	4a5b      	ldr	r2, [pc, #364]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	6713      	str	r3, [r2, #112]	; 0x70
 800527a:	e00b      	b.n	8005294 <HAL_RCC_OscConfig+0x324>
 800527c:	4b58      	ldr	r3, [pc, #352]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 800527e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005280:	4a57      	ldr	r2, [pc, #348]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 8005282:	f023 0301 	bic.w	r3, r3, #1
 8005286:	6713      	str	r3, [r2, #112]	; 0x70
 8005288:	4b55      	ldr	r3, [pc, #340]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 800528a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528c:	4a54      	ldr	r2, [pc, #336]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 800528e:	f023 0304 	bic.w	r3, r3, #4
 8005292:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d015      	beq.n	80052c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529c:	f7fe fb30 	bl	8003900 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a2:	e00a      	b.n	80052ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a4:	f7fe fb2c 	bl	8003900 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e0cb      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ba:	4b49      	ldr	r3, [pc, #292]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 80052bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0ee      	beq.n	80052a4 <HAL_RCC_OscConfig+0x334>
 80052c6:	e014      	b.n	80052f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c8:	f7fe fb1a 	bl	8003900 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ce:	e00a      	b.n	80052e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052d0:	f7fe fb16 	bl	8003900 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	f241 3288 	movw	r2, #5000	; 0x1388
 80052de:	4293      	cmp	r3, r2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e0b5      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e6:	4b3e      	ldr	r3, [pc, #248]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 80052e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1ee      	bne.n	80052d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d105      	bne.n	8005304 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052f8:	4b39      	ldr	r3, [pc, #228]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	4a38      	ldr	r2, [pc, #224]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 80052fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005302:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 80a1 	beq.w	8005450 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800530e:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
 8005316:	2b08      	cmp	r3, #8
 8005318:	d05c      	beq.n	80053d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d141      	bne.n	80053a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005322:	4b31      	ldr	r3, [pc, #196]	; (80053e8 <HAL_RCC_OscConfig+0x478>)
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005328:	f7fe faea 	bl	8003900 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005330:	f7fe fae6 	bl	8003900 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e087      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005342:	4b27      	ldr	r3, [pc, #156]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f0      	bne.n	8005330 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69da      	ldr	r2, [r3, #28]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	019b      	lsls	r3, r3, #6
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	085b      	lsrs	r3, r3, #1
 8005366:	3b01      	subs	r3, #1
 8005368:	041b      	lsls	r3, r3, #16
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	061b      	lsls	r3, r3, #24
 8005372:	491b      	ldr	r1, [pc, #108]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 8005374:	4313      	orrs	r3, r2
 8005376:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005378:	4b1b      	ldr	r3, [pc, #108]	; (80053e8 <HAL_RCC_OscConfig+0x478>)
 800537a:	2201      	movs	r2, #1
 800537c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537e:	f7fe fabf 	bl	8003900 <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005386:	f7fe fabb 	bl	8003900 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e05c      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005398:	4b11      	ldr	r3, [pc, #68]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0f0      	beq.n	8005386 <HAL_RCC_OscConfig+0x416>
 80053a4:	e054      	b.n	8005450 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a6:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <HAL_RCC_OscConfig+0x478>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ac:	f7fe faa8 	bl	8003900 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053b4:	f7fe faa4 	bl	8003900 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e045      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_RCC_OscConfig+0x470>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x444>
 80053d2:	e03d      	b.n	8005450 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d107      	bne.n	80053ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e038      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
 80053e0:	40023800 	.word	0x40023800
 80053e4:	40007000 	.word	0x40007000
 80053e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053ec:	4b1b      	ldr	r3, [pc, #108]	; (800545c <HAL_RCC_OscConfig+0x4ec>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d028      	beq.n	800544c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005404:	429a      	cmp	r2, r3
 8005406:	d121      	bne.n	800544c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005412:	429a      	cmp	r2, r3
 8005414:	d11a      	bne.n	800544c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800541c:	4013      	ands	r3, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005422:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005424:	4293      	cmp	r3, r2
 8005426:	d111      	bne.n	800544c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	085b      	lsrs	r3, r3, #1
 8005434:	3b01      	subs	r3, #1
 8005436:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005438:	429a      	cmp	r2, r3
 800543a:	d107      	bne.n	800544c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005448:	429a      	cmp	r2, r3
 800544a:	d001      	beq.n	8005450 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e000      	b.n	8005452 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40023800 	.word	0x40023800

08005460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e0cc      	b.n	800560e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005474:	4b68      	ldr	r3, [pc, #416]	; (8005618 <HAL_RCC_ClockConfig+0x1b8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d90c      	bls.n	800549c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005482:	4b65      	ldr	r3, [pc, #404]	; (8005618 <HAL_RCC_ClockConfig+0x1b8>)
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800548a:	4b63      	ldr	r3, [pc, #396]	; (8005618 <HAL_RCC_ClockConfig+0x1b8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d001      	beq.n	800549c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e0b8      	b.n	800560e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d020      	beq.n	80054ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d005      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054b4:	4b59      	ldr	r3, [pc, #356]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	4a58      	ldr	r2, [pc, #352]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d005      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054cc:	4b53      	ldr	r3, [pc, #332]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	4a52      	ldr	r2, [pc, #328]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054d8:	4b50      	ldr	r3, [pc, #320]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	494d      	ldr	r1, [pc, #308]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d044      	beq.n	8005580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d107      	bne.n	800550e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054fe:	4b47      	ldr	r3, [pc, #284]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d119      	bne.n	800553e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e07f      	b.n	800560e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b02      	cmp	r3, #2
 8005514:	d003      	beq.n	800551e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800551a:	2b03      	cmp	r3, #3
 800551c:	d107      	bne.n	800552e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800551e:	4b3f      	ldr	r3, [pc, #252]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e06f      	b.n	800560e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800552e:	4b3b      	ldr	r3, [pc, #236]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e067      	b.n	800560e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800553e:	4b37      	ldr	r3, [pc, #220]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f023 0203 	bic.w	r2, r3, #3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	4934      	ldr	r1, [pc, #208]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 800554c:	4313      	orrs	r3, r2
 800554e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005550:	f7fe f9d6 	bl	8003900 <HAL_GetTick>
 8005554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005556:	e00a      	b.n	800556e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005558:	f7fe f9d2 	bl	8003900 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	f241 3288 	movw	r2, #5000	; 0x1388
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e04f      	b.n	800560e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556e:	4b2b      	ldr	r3, [pc, #172]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 020c 	and.w	r2, r3, #12
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	429a      	cmp	r2, r3
 800557e:	d1eb      	bne.n	8005558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005580:	4b25      	ldr	r3, [pc, #148]	; (8005618 <HAL_RCC_ClockConfig+0x1b8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d20c      	bcs.n	80055a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558e:	4b22      	ldr	r3, [pc, #136]	; (8005618 <HAL_RCC_ClockConfig+0x1b8>)
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005596:	4b20      	ldr	r3, [pc, #128]	; (8005618 <HAL_RCC_ClockConfig+0x1b8>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d001      	beq.n	80055a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e032      	b.n	800560e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d008      	beq.n	80055c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055b4:	4b19      	ldr	r3, [pc, #100]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	4916      	ldr	r1, [pc, #88]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0308 	and.w	r3, r3, #8
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d009      	beq.n	80055e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	490e      	ldr	r1, [pc, #56]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055e6:	f000 f821 	bl	800562c <HAL_RCC_GetSysClockFreq>
 80055ea:	4602      	mov	r2, r0
 80055ec:	4b0b      	ldr	r3, [pc, #44]	; (800561c <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	091b      	lsrs	r3, r3, #4
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	490a      	ldr	r1, [pc, #40]	; (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 80055f8:	5ccb      	ldrb	r3, [r1, r3]
 80055fa:	fa22 f303 	lsr.w	r3, r2, r3
 80055fe:	4a09      	ldr	r2, [pc, #36]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 8005600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005602:	4b09      	ldr	r3, [pc, #36]	; (8005628 <HAL_RCC_ClockConfig+0x1c8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4618      	mov	r0, r3
 8005608:	f7fe f814 	bl	8003634 <HAL_InitTick>

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40023c00 	.word	0x40023c00
 800561c:	40023800 	.word	0x40023800
 8005620:	0800ed4c 	.word	0x0800ed4c
 8005624:	20000078 	.word	0x20000078
 8005628:	2000007c 	.word	0x2000007c

0800562c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800562c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005630:	b094      	sub	sp, #80	; 0x50
 8005632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	647b      	str	r3, [r7, #68]	; 0x44
 8005638:	2300      	movs	r3, #0
 800563a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800563c:	2300      	movs	r3, #0
 800563e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005644:	4b79      	ldr	r3, [pc, #484]	; (800582c <HAL_RCC_GetSysClockFreq+0x200>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 030c 	and.w	r3, r3, #12
 800564c:	2b08      	cmp	r3, #8
 800564e:	d00d      	beq.n	800566c <HAL_RCC_GetSysClockFreq+0x40>
 8005650:	2b08      	cmp	r3, #8
 8005652:	f200 80e1 	bhi.w	8005818 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <HAL_RCC_GetSysClockFreq+0x34>
 800565a:	2b04      	cmp	r3, #4
 800565c:	d003      	beq.n	8005666 <HAL_RCC_GetSysClockFreq+0x3a>
 800565e:	e0db      	b.n	8005818 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005660:	4b73      	ldr	r3, [pc, #460]	; (8005830 <HAL_RCC_GetSysClockFreq+0x204>)
 8005662:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005664:	e0db      	b.n	800581e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005666:	4b73      	ldr	r3, [pc, #460]	; (8005834 <HAL_RCC_GetSysClockFreq+0x208>)
 8005668:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800566a:	e0d8      	b.n	800581e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800566c:	4b6f      	ldr	r3, [pc, #444]	; (800582c <HAL_RCC_GetSysClockFreq+0x200>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005674:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005676:	4b6d      	ldr	r3, [pc, #436]	; (800582c <HAL_RCC_GetSysClockFreq+0x200>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d063      	beq.n	800574a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005682:	4b6a      	ldr	r3, [pc, #424]	; (800582c <HAL_RCC_GetSysClockFreq+0x200>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	099b      	lsrs	r3, r3, #6
 8005688:	2200      	movs	r2, #0
 800568a:	63bb      	str	r3, [r7, #56]	; 0x38
 800568c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005694:	633b      	str	r3, [r7, #48]	; 0x30
 8005696:	2300      	movs	r3, #0
 8005698:	637b      	str	r3, [r7, #52]	; 0x34
 800569a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800569e:	4622      	mov	r2, r4
 80056a0:	462b      	mov	r3, r5
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	f04f 0100 	mov.w	r1, #0
 80056aa:	0159      	lsls	r1, r3, #5
 80056ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056b0:	0150      	lsls	r0, r2, #5
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4621      	mov	r1, r4
 80056b8:	1a51      	subs	r1, r2, r1
 80056ba:	6139      	str	r1, [r7, #16]
 80056bc:	4629      	mov	r1, r5
 80056be:	eb63 0301 	sbc.w	r3, r3, r1
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056d0:	4659      	mov	r1, fp
 80056d2:	018b      	lsls	r3, r1, #6
 80056d4:	4651      	mov	r1, sl
 80056d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056da:	4651      	mov	r1, sl
 80056dc:	018a      	lsls	r2, r1, #6
 80056de:	4651      	mov	r1, sl
 80056e0:	ebb2 0801 	subs.w	r8, r2, r1
 80056e4:	4659      	mov	r1, fp
 80056e6:	eb63 0901 	sbc.w	r9, r3, r1
 80056ea:	f04f 0200 	mov.w	r2, #0
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056fe:	4690      	mov	r8, r2
 8005700:	4699      	mov	r9, r3
 8005702:	4623      	mov	r3, r4
 8005704:	eb18 0303 	adds.w	r3, r8, r3
 8005708:	60bb      	str	r3, [r7, #8]
 800570a:	462b      	mov	r3, r5
 800570c:	eb49 0303 	adc.w	r3, r9, r3
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800571e:	4629      	mov	r1, r5
 8005720:	024b      	lsls	r3, r1, #9
 8005722:	4621      	mov	r1, r4
 8005724:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005728:	4621      	mov	r1, r4
 800572a:	024a      	lsls	r2, r1, #9
 800572c:	4610      	mov	r0, r2
 800572e:	4619      	mov	r1, r3
 8005730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005732:	2200      	movs	r2, #0
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28
 8005736:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005738:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800573c:	f7fb f8f6 	bl	800092c <__aeabi_uldivmod>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4613      	mov	r3, r2
 8005746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005748:	e058      	b.n	80057fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800574a:	4b38      	ldr	r3, [pc, #224]	; (800582c <HAL_RCC_GetSysClockFreq+0x200>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	099b      	lsrs	r3, r3, #6
 8005750:	2200      	movs	r2, #0
 8005752:	4618      	mov	r0, r3
 8005754:	4611      	mov	r1, r2
 8005756:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800575a:	623b      	str	r3, [r7, #32]
 800575c:	2300      	movs	r3, #0
 800575e:	627b      	str	r3, [r7, #36]	; 0x24
 8005760:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005764:	4642      	mov	r2, r8
 8005766:	464b      	mov	r3, r9
 8005768:	f04f 0000 	mov.w	r0, #0
 800576c:	f04f 0100 	mov.w	r1, #0
 8005770:	0159      	lsls	r1, r3, #5
 8005772:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005776:	0150      	lsls	r0, r2, #5
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4641      	mov	r1, r8
 800577e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005782:	4649      	mov	r1, r9
 8005784:	eb63 0b01 	sbc.w	fp, r3, r1
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005794:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005798:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800579c:	ebb2 040a 	subs.w	r4, r2, sl
 80057a0:	eb63 050b 	sbc.w	r5, r3, fp
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	00eb      	lsls	r3, r5, #3
 80057ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057b2:	00e2      	lsls	r2, r4, #3
 80057b4:	4614      	mov	r4, r2
 80057b6:	461d      	mov	r5, r3
 80057b8:	4643      	mov	r3, r8
 80057ba:	18e3      	adds	r3, r4, r3
 80057bc:	603b      	str	r3, [r7, #0]
 80057be:	464b      	mov	r3, r9
 80057c0:	eb45 0303 	adc.w	r3, r5, r3
 80057c4:	607b      	str	r3, [r7, #4]
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	f04f 0300 	mov.w	r3, #0
 80057ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057d2:	4629      	mov	r1, r5
 80057d4:	028b      	lsls	r3, r1, #10
 80057d6:	4621      	mov	r1, r4
 80057d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057dc:	4621      	mov	r1, r4
 80057de:	028a      	lsls	r2, r1, #10
 80057e0:	4610      	mov	r0, r2
 80057e2:	4619      	mov	r1, r3
 80057e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057e6:	2200      	movs	r2, #0
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	61fa      	str	r2, [r7, #28]
 80057ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057f0:	f7fb f89c 	bl	800092c <__aeabi_uldivmod>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4613      	mov	r3, r2
 80057fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057fc:	4b0b      	ldr	r3, [pc, #44]	; (800582c <HAL_RCC_GetSysClockFreq+0x200>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	0c1b      	lsrs	r3, r3, #16
 8005802:	f003 0303 	and.w	r3, r3, #3
 8005806:	3301      	adds	r3, #1
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800580c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800580e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005810:	fbb2 f3f3 	udiv	r3, r2, r3
 8005814:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005816:	e002      	b.n	800581e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005818:	4b05      	ldr	r3, [pc, #20]	; (8005830 <HAL_RCC_GetSysClockFreq+0x204>)
 800581a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800581c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800581e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005820:	4618      	mov	r0, r3
 8005822:	3750      	adds	r7, #80	; 0x50
 8005824:	46bd      	mov	sp, r7
 8005826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800582a:	bf00      	nop
 800582c:	40023800 	.word	0x40023800
 8005830:	00f42400 	.word	0x00f42400
 8005834:	007a1200 	.word	0x007a1200

08005838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800583c:	4b03      	ldr	r3, [pc, #12]	; (800584c <HAL_RCC_GetHCLKFreq+0x14>)
 800583e:	681b      	ldr	r3, [r3, #0]
}
 8005840:	4618      	mov	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20000078 	.word	0x20000078

08005850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005854:	f7ff fff0 	bl	8005838 <HAL_RCC_GetHCLKFreq>
 8005858:	4602      	mov	r2, r0
 800585a:	4b05      	ldr	r3, [pc, #20]	; (8005870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	0a9b      	lsrs	r3, r3, #10
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	4903      	ldr	r1, [pc, #12]	; (8005874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005866:	5ccb      	ldrb	r3, [r1, r3]
 8005868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800586c:	4618      	mov	r0, r3
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40023800 	.word	0x40023800
 8005874:	0800ed5c 	.word	0x0800ed5c

08005878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800587c:	f7ff ffdc 	bl	8005838 <HAL_RCC_GetHCLKFreq>
 8005880:	4602      	mov	r2, r0
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	0b5b      	lsrs	r3, r3, #13
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	4903      	ldr	r1, [pc, #12]	; (800589c <HAL_RCC_GetPCLK2Freq+0x24>)
 800588e:	5ccb      	ldrb	r3, [r1, r3]
 8005890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005894:	4618      	mov	r0, r3
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40023800 	.word	0x40023800
 800589c:	0800ed5c 	.word	0x0800ed5c

080058a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	220f      	movs	r2, #15
 80058ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80058b0:	4b12      	ldr	r3, [pc, #72]	; (80058fc <HAL_RCC_GetClockConfig+0x5c>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 0203 	and.w	r2, r3, #3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80058bc:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <HAL_RCC_GetClockConfig+0x5c>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80058c8:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <HAL_RCC_GetClockConfig+0x5c>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80058d4:	4b09      	ldr	r3, [pc, #36]	; (80058fc <HAL_RCC_GetClockConfig+0x5c>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	08db      	lsrs	r3, r3, #3
 80058da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80058e2:	4b07      	ldr	r3, [pc, #28]	; (8005900 <HAL_RCC_GetClockConfig+0x60>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0207 	and.w	r2, r3, #7
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	601a      	str	r2, [r3, #0]
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40023800 	.word	0x40023800
 8005900:	40023c00 	.word	0x40023c00

08005904 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d105      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005928:	2b00      	cmp	r3, #0
 800592a:	d035      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800592c:	4b62      	ldr	r3, [pc, #392]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005932:	f7fd ffe5 	bl	8003900 <HAL_GetTick>
 8005936:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005938:	e008      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800593a:	f7fd ffe1 	bl	8003900 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e0b0      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800594c:	4b5b      	ldr	r3, [pc, #364]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f0      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	019a      	lsls	r2, r3, #6
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	071b      	lsls	r3, r3, #28
 8005964:	4955      	ldr	r1, [pc, #340]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800596c:	4b52      	ldr	r3, [pc, #328]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800596e:	2201      	movs	r2, #1
 8005970:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005972:	f7fd ffc5 	bl	8003900 <HAL_GetTick>
 8005976:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005978:	e008      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800597a:	f7fd ffc1 	bl	8003900 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e090      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800598c:	4b4b      	ldr	r3, [pc, #300]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f0      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 8083 	beq.w	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	4b44      	ldr	r3, [pc, #272]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	4a43      	ldr	r2, [pc, #268]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b4:	6413      	str	r3, [r2, #64]	; 0x40
 80059b6:	4b41      	ldr	r3, [pc, #260]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80059c2:	4b3f      	ldr	r3, [pc, #252]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a3e      	ldr	r2, [pc, #248]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059ce:	f7fd ff97 	bl	8003900 <HAL_GetTick>
 80059d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059d4:	e008      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80059d6:	f7fd ff93 	bl	8003900 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e062      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059e8:	4b35      	ldr	r3, [pc, #212]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0f0      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059f4:	4b31      	ldr	r3, [pc, #196]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d02f      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d028      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a12:	4b2a      	ldr	r3, [pc, #168]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a1c:	4b29      	ldr	r3, [pc, #164]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a1e:	2201      	movs	r2, #1
 8005a20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a22:	4b28      	ldr	r3, [pc, #160]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a28:	4a24      	ldr	r2, [pc, #144]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a2e:	4b23      	ldr	r3, [pc, #140]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d114      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a3a:	f7fd ff61 	bl	8003900 <HAL_GetTick>
 8005a3e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a40:	e00a      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a42:	f7fd ff5d 	bl	8003900 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e02a      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a58:	4b18      	ldr	r3, [pc, #96]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0ee      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a70:	d10d      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005a72:	4b12      	ldr	r3, [pc, #72]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a86:	490d      	ldr	r1, [pc, #52]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	608b      	str	r3, [r1, #8]
 8005a8c:	e005      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005a8e:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	4a0a      	ldr	r2, [pc, #40]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a94:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a98:	6093      	str	r3, [r2, #8]
 8005a9a:	4b08      	ldr	r3, [pc, #32]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa6:	4905      	ldr	r1, [pc, #20]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	42470068 	.word	0x42470068
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	40007000 	.word	0x40007000
 8005ac4:	42470e40 	.word	0x42470e40

08005ac8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e083      	b.n	8005be2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	7f5b      	ldrb	r3, [r3, #29]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d105      	bne.n	8005af0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fd fbe2 	bl	80032b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	22ca      	movs	r2, #202	; 0xca
 8005afc:	625a      	str	r2, [r3, #36]	; 0x24
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2253      	movs	r2, #83	; 0x53
 8005b04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 faa8 	bl	800605c <RTC_EnterInitMode>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d008      	beq.n	8005b24 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	22ff      	movs	r2, #255	; 0xff
 8005b18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2204      	movs	r2, #4
 8005b1e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e05e      	b.n	8005be2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6812      	ldr	r2, [r2, #0]
 8005b2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b36:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6899      	ldr	r1, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	68d2      	ldr	r2, [r2, #12]
 8005b5e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6919      	ldr	r1, [r3, #16]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	041a      	lsls	r2, r3, #16
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b82:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10e      	bne.n	8005bb0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fa3a 	bl	800600c <HAL_RTC_WaitForSynchro>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d008      	beq.n	8005bb0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	22ff      	movs	r2, #255	; 0xff
 8005ba4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e018      	b.n	8005be2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	22ff      	movs	r2, #255	; 0xff
 8005bd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005be0:	2300      	movs	r3, #0
  }
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005bea:	b590      	push	{r4, r7, lr}
 8005bec:	b087      	sub	sp, #28
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	7f1b      	ldrb	r3, [r3, #28]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_RTC_SetTime+0x1c>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e0aa      	b.n	8005d5c <HAL_RTC_SetTime+0x172>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d126      	bne.n	8005c66 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fa3f 	bl	80060b4 <RTC_ByteToBcd2>
 8005c36:	4603      	mov	r3, r0
 8005c38:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fa38 	bl	80060b4 <RTC_ByteToBcd2>
 8005c44:	4603      	mov	r3, r0
 8005c46:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c48:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	789b      	ldrb	r3, [r3, #2]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fa30 	bl	80060b4 <RTC_ByteToBcd2>
 8005c54:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005c56:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	78db      	ldrb	r3, [r3, #3]
 8005c5e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	e018      	b.n	8005c98 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d102      	bne.n	8005c7a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2200      	movs	r2, #0
 8005c78:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c86:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005c8c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	78db      	ldrb	r3, [r3, #3]
 8005c92:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	22ca      	movs	r2, #202	; 0xca
 8005c9e:	625a      	str	r2, [r3, #36]	; 0x24
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2253      	movs	r2, #83	; 0x53
 8005ca6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f9d7 	bl	800605c <RTC_EnterInitMode>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00b      	beq.n	8005ccc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	22ff      	movs	r2, #255	; 0xff
 8005cba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2204      	movs	r2, #4
 8005cc0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e047      	b.n	8005d5c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005cd6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005cda:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cea:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6899      	ldr	r1, [r3, #8]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d12:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d111      	bne.n	8005d46 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 f972 	bl	800600c <HAL_RTC_WaitForSynchro>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00b      	beq.n	8005d46 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	22ff      	movs	r2, #255	; 0xff
 8005d34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2204      	movs	r2, #4
 8005d3a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e00a      	b.n	8005d5c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	22ff      	movs	r2, #255	; 0xff
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2201      	movs	r2, #1
 8005d52:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
  }
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd90      	pop	{r4, r7, pc}

08005d64 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005d96:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	0c1b      	lsrs	r3, r3, #16
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	0a1b      	lsrs	r3, r3, #8
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	0c1b      	lsrs	r3, r3, #16
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d11a      	bne.n	8005e16 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 f983 	bl	80060f0 <RTC_Bcd2ToByte>
 8005dea:	4603      	mov	r3, r0
 8005dec:	461a      	mov	r2, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	785b      	ldrb	r3, [r3, #1]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 f97a 	bl	80060f0 <RTC_Bcd2ToByte>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	461a      	mov	r2, r3
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	789b      	ldrb	r3, [r3, #2]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 f971 	bl	80060f0 <RTC_Bcd2ToByte>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	461a      	mov	r2, r3
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e20:	b590      	push	{r4, r7, lr}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	7f1b      	ldrb	r3, [r3, #28]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_RTC_SetDate+0x1c>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e094      	b.n	8005f66 <HAL_RTC_SetDate+0x146>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2202      	movs	r2, #2
 8005e46:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10e      	bne.n	8005e6c <HAL_RTC_SetDate+0x4c>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	f003 0310 	and.w	r3, r3, #16
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d008      	beq.n	8005e6c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	785b      	ldrb	r3, [r3, #1]
 8005e5e:	f023 0310 	bic.w	r3, r3, #16
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	330a      	adds	r3, #10
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d11c      	bne.n	8005eac <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	78db      	ldrb	r3, [r3, #3]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 f91c 	bl	80060b4 <RTC_ByteToBcd2>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 f915 	bl	80060b4 <RTC_ByteToBcd2>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005e8e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	789b      	ldrb	r3, [r3, #2]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 f90d 	bl	80060b4 <RTC_ByteToBcd2>
 8005e9a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005e9c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	e00e      	b.n	8005eca <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	78db      	ldrb	r3, [r3, #3]
 8005eb0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005eb8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005ebe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	22ca      	movs	r2, #202	; 0xca
 8005ed0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2253      	movs	r2, #83	; 0x53
 8005ed8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f8be 	bl	800605c <RTC_EnterInitMode>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00b      	beq.n	8005efe <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	22ff      	movs	r2, #255	; 0xff
 8005eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e033      	b.n	8005f66 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f0c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f1c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d111      	bne.n	8005f50 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 f86d 	bl	800600c <HAL_RTC_WaitForSynchro>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	22ff      	movs	r2, #255	; 0xff
 8005f3e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2204      	movs	r2, #4
 8005f44:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e00a      	b.n	8005f66 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	22ff      	movs	r2, #255	; 0xff
 8005f56:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005f64:	2300      	movs	r3, #0
  }
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd90      	pop	{r4, r7, pc}

08005f6e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b086      	sub	sp, #24
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f8c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	0c1b      	lsrs	r3, r3, #16
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	0a1b      	lsrs	r3, r3, #8
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	f003 031f 	and.w	r3, r3, #31
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	0b5b      	lsrs	r3, r3, #13
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d11a      	bne.n	8006002 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	78db      	ldrb	r3, [r3, #3]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 f88d 	bl	80060f0 <RTC_Bcd2ToByte>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	461a      	mov	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	785b      	ldrb	r3, [r3, #1]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 f884 	bl	80060f0 <RTC_Bcd2ToByte>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	461a      	mov	r2, r3
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	789b      	ldrb	r3, [r3, #2]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 f87b 	bl	80060f0 <RTC_Bcd2ToByte>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006026:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006028:	f7fd fc6a 	bl	8003900 <HAL_GetTick>
 800602c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800602e:	e009      	b.n	8006044 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006030:	f7fd fc66 	bl	8003900 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800603e:	d901      	bls.n	8006044 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e007      	b.n	8006054 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0ee      	beq.n	8006030 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d119      	bne.n	80060aa <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800607e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006080:	f7fd fc3e 	bl	8003900 <HAL_GetTick>
 8006084:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006086:	e009      	b.n	800609c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006088:	f7fd fc3a 	bl	8003900 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006096:	d901      	bls.n	800609c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e007      	b.n	80060ac <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0ee      	beq.n	8006088 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80060c2:	e005      	b.n	80060d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3301      	adds	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	3b0a      	subs	r3, #10
 80060ce:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80060d0:	79fb      	ldrb	r3, [r7, #7]
 80060d2:	2b09      	cmp	r3, #9
 80060d4:	d8f6      	bhi.n	80060c4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	011b      	lsls	r3, r3, #4
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	79fb      	ldrb	r3, [r7, #7]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	b2db      	uxtb	r3, r3
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	4603      	mov	r3, r0
 80060f8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	091b      	lsrs	r3, r3, #4
 8006102:	b2db      	uxtb	r3, r3
 8006104:	461a      	mov	r2, r3
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	b2da      	uxtb	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	4413      	add	r3, r2
 800611e:	b2db      	uxtb	r3, r3
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e07b      	b.n	8006236 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	2b00      	cmp	r3, #0
 8006144:	d108      	bne.n	8006158 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800614e:	d009      	beq.n	8006164 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	61da      	str	r2, [r3, #28]
 8006156:	e005      	b.n	8006164 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fd f8c4 	bl	800330c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800619a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	431a      	orrs	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061de:	431a      	orrs	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e8:	ea42 0103 	orr.w	r1, r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	0c1b      	lsrs	r3, r3, #16
 8006202:	f003 0104 	and.w	r1, r3, #4
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	f003 0210 	and.w	r2, r3, #16
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69da      	ldr	r2, [r3, #28]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006224:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b088      	sub	sp, #32
 8006242:	af00      	add	r7, sp, #0
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	603b      	str	r3, [r7, #0]
 800624a:	4613      	mov	r3, r2
 800624c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_SPI_Transmit+0x22>
 800625c:	2302      	movs	r3, #2
 800625e:	e126      	b.n	80064ae <HAL_SPI_Transmit+0x270>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006268:	f7fd fb4a 	bl	8003900 <HAL_GetTick>
 800626c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b01      	cmp	r3, #1
 800627c:	d002      	beq.n	8006284 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800627e:	2302      	movs	r3, #2
 8006280:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006282:	e10b      	b.n	800649c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_SPI_Transmit+0x52>
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d102      	bne.n	8006296 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006294:	e102      	b.n	800649c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2203      	movs	r2, #3
 800629a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	88fa      	ldrh	r2, [r7, #6]
 80062ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	88fa      	ldrh	r2, [r7, #6]
 80062b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062dc:	d10f      	bne.n	80062fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006308:	2b40      	cmp	r3, #64	; 0x40
 800630a:	d007      	beq.n	800631c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800631a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006324:	d14b      	bne.n	80063be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_SPI_Transmit+0xf6>
 800632e:	8afb      	ldrh	r3, [r7, #22]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d13e      	bne.n	80063b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006338:	881a      	ldrh	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006344:	1c9a      	adds	r2, r3, #2
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006358:	e02b      	b.n	80063b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b02      	cmp	r3, #2
 8006366:	d112      	bne.n	800638e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636c:	881a      	ldrh	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006378:	1c9a      	adds	r2, r3, #2
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006382:	b29b      	uxth	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	86da      	strh	r2, [r3, #54]	; 0x36
 800638c:	e011      	b.n	80063b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800638e:	f7fd fab7 	bl	8003900 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	429a      	cmp	r2, r3
 800639c:	d803      	bhi.n	80063a6 <HAL_SPI_Transmit+0x168>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063a4:	d102      	bne.n	80063ac <HAL_SPI_Transmit+0x16e>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063b0:	e074      	b.n	800649c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1ce      	bne.n	800635a <HAL_SPI_Transmit+0x11c>
 80063bc:	e04c      	b.n	8006458 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <HAL_SPI_Transmit+0x18e>
 80063c6:	8afb      	ldrh	r3, [r7, #22]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d140      	bne.n	800644e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	330c      	adds	r3, #12
 80063d6:	7812      	ldrb	r2, [r2, #0]
 80063d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	3b01      	subs	r3, #1
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063f2:	e02c      	b.n	800644e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d113      	bne.n	800642a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	330c      	adds	r3, #12
 800640c:	7812      	ldrb	r2, [r2, #0]
 800640e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	86da      	strh	r2, [r3, #54]	; 0x36
 8006428:	e011      	b.n	800644e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800642a:	f7fd fa69 	bl	8003900 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d803      	bhi.n	8006442 <HAL_SPI_Transmit+0x204>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006440:	d102      	bne.n	8006448 <HAL_SPI_Transmit+0x20a>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d102      	bne.n	800644e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800644c:	e026      	b.n	800649c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1cd      	bne.n	80063f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	6839      	ldr	r1, [r7, #0]
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 fb13 	bl	8006a88 <SPI_EndRxTxTransaction>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2220      	movs	r2, #32
 800646c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10a      	bne.n	800648c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	613b      	str	r3, [r7, #16]
 800648a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	77fb      	strb	r3, [r7, #31]
 8006498:	e000      	b.n	800649c <HAL_SPI_Transmit+0x25e>
  }

error:
 800649a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3720      	adds	r7, #32
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	4613      	mov	r3, r2
 80064c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d101      	bne.n	80064d8 <HAL_SPI_Transmit_DMA+0x20>
 80064d4:	2302      	movs	r3, #2
 80064d6:	e09b      	b.n	8006610 <HAL_SPI_Transmit_DMA+0x158>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d002      	beq.n	80064f2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80064ec:	2302      	movs	r3, #2
 80064ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064f0:	e089      	b.n	8006606 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <HAL_SPI_Transmit_DMA+0x46>
 80064f8:	88fb      	ldrh	r3, [r7, #6]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d102      	bne.n	8006504 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006502:	e080      	b.n	8006606 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2203      	movs	r2, #3
 8006508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	88fa      	ldrh	r2, [r7, #6]
 800651c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	88fa      	ldrh	r2, [r7, #6]
 8006522:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654a:	d10f      	bne.n	800656c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800656a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006570:	4a29      	ldr	r2, [pc, #164]	; (8006618 <HAL_SPI_Transmit_DMA+0x160>)
 8006572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006578:	4a28      	ldr	r2, [pc, #160]	; (800661c <HAL_SPI_Transmit_DMA+0x164>)
 800657a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006580:	4a27      	ldr	r2, [pc, #156]	; (8006620 <HAL_SPI_Transmit_DMA+0x168>)
 8006582:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006588:	2200      	movs	r2, #0
 800658a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	4619      	mov	r1, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80065a4:	f7fd fb6c 	bl	8003c80 <HAL_DMA_Start_IT>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00c      	beq.n	80065c8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b2:	f043 0210 	orr.w	r2, r3, #16
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80065c6:	e01e      	b.n	8006606 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d2:	2b40      	cmp	r3, #64	; 0x40
 80065d4:	d007      	beq.n	80065e6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065e4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f042 0220 	orr.w	r2, r2, #32
 80065f4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f042 0202 	orr.w	r2, r2, #2
 8006604:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800660e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	080068f5 	.word	0x080068f5
 800661c:	0800684d 	.word	0x0800684d
 8006620:	08006911 	.word	0x08006911

08006624 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	099b      	lsrs	r3, r3, #6
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10f      	bne.n	8006668 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	099b      	lsrs	r3, r3, #6
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	4798      	blx	r3
    return;
 8006666:	e0d7      	b.n	8006818 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	085b      	lsrs	r3, r3, #1
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00a      	beq.n	800668a <HAL_SPI_IRQHandler+0x66>
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	09db      	lsrs	r3, r3, #7
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d004      	beq.n	800668a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	4798      	blx	r3
    return;
 8006688:	e0c6      	b.n	8006818 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	095b      	lsrs	r3, r3, #5
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10c      	bne.n	80066b0 <HAL_SPI_IRQHandler+0x8c>
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	099b      	lsrs	r3, r3, #6
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	0a1b      	lsrs	r3, r3, #8
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 80b4 	beq.w	8006818 <HAL_SPI_IRQHandler+0x1f4>
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	095b      	lsrs	r3, r3, #5
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 80ad 	beq.w	8006818 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	099b      	lsrs	r3, r3, #6
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d023      	beq.n	8006712 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d011      	beq.n	80066fa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066da:	f043 0204 	orr.w	r2, r3, #4
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066e2:	2300      	movs	r3, #0
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	617b      	str	r3, [r7, #20]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	e00b      	b.n	8006712 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066fa:	2300      	movs	r3, #0
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	613b      	str	r3, [r7, #16]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	613b      	str	r3, [r7, #16]
 800670e:	693b      	ldr	r3, [r7, #16]
        return;
 8006710:	e082      	b.n	8006818 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	095b      	lsrs	r3, r3, #5
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d014      	beq.n	8006748 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006722:	f043 0201 	orr.w	r2, r3, #1
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800672a:	2300      	movs	r3, #0
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	0a1b      	lsrs	r3, r3, #8
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00c      	beq.n	800676e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006758:	f043 0208 	orr.w	r2, r3, #8
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006760:	2300      	movs	r3, #0
 8006762:	60bb      	str	r3, [r7, #8]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	60bb      	str	r3, [r7, #8]
 800676c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006772:	2b00      	cmp	r3, #0
 8006774:	d04f      	beq.n	8006816 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006784:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d104      	bne.n	80067a2 <HAL_SPI_IRQHandler+0x17e>
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d034      	beq.n	800680c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0203 	bic.w	r2, r2, #3
 80067b0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d011      	beq.n	80067de <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067be:	4a18      	ldr	r2, [pc, #96]	; (8006820 <HAL_SPI_IRQHandler+0x1fc>)
 80067c0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fd fb22 	bl	8003e10 <HAL_DMA_Abort_IT>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d016      	beq.n	8006814 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ea:	4a0d      	ldr	r2, [pc, #52]	; (8006820 <HAL_SPI_IRQHandler+0x1fc>)
 80067ec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fd fb0c 	bl	8003e10 <HAL_DMA_Abort_IT>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006802:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800680a:	e003      	b.n	8006814 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f813 	bl	8006838 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006812:	e000      	b.n	8006816 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006814:	bf00      	nop
    return;
 8006816:	bf00      	nop
  }
}
 8006818:	3720      	adds	r7, #32
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	08006951 	.word	0x08006951

08006824 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006858:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800685a:	f7fd f851 	bl	8003900 <HAL_GetTick>
 800685e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800686e:	d03b      	beq.n	80068e8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0220 	bic.w	r2, r2, #32
 800687e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0202 	bic.w	r2, r2, #2
 800688e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	2164      	movs	r1, #100	; 0x64
 8006894:	6978      	ldr	r0, [r7, #20]
 8006896:	f000 f8f7 	bl	8006a88 <SPI_EndRxTxTransaction>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a4:	f043 0220 	orr.w	r2, r3, #32
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2200      	movs	r2, #0
 80068ce:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80068e0:	6978      	ldr	r0, [r7, #20]
 80068e2:	f7ff ffa9 	bl	8006838 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80068e6:	e002      	b.n	80068ee <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80068e8:	6978      	ldr	r0, [r7, #20]
 80068ea:	f7fb fb2d 	bl	8001f48 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7ff ff8e 	bl	8006824 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006908:	bf00      	nop
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0203 	bic.w	r2, r2, #3
 800692c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006932:	f043 0210 	orr.w	r2, r3, #16
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f7ff ff78 	bl	8006838 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f7ff ff64 	bl	8006838 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006970:	bf00      	nop
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	603b      	str	r3, [r7, #0]
 8006984:	4613      	mov	r3, r2
 8006986:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006988:	f7fc ffba 	bl	8003900 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	1a9b      	subs	r3, r3, r2
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	4413      	add	r3, r2
 8006996:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006998:	f7fc ffb2 	bl	8003900 <HAL_GetTick>
 800699c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800699e:	4b39      	ldr	r3, [pc, #228]	; (8006a84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	015b      	lsls	r3, r3, #5
 80069a4:	0d1b      	lsrs	r3, r3, #20
 80069a6:	69fa      	ldr	r2, [r7, #28]
 80069a8:	fb02 f303 	mul.w	r3, r2, r3
 80069ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069ae:	e054      	b.n	8006a5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069b6:	d050      	beq.n	8006a5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069b8:	f7fc ffa2 	bl	8003900 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	69fa      	ldr	r2, [r7, #28]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d902      	bls.n	80069ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d13d      	bne.n	8006a4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069e6:	d111      	bne.n	8006a0c <SPI_WaitFlagStateUntilTimeout+0x94>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f0:	d004      	beq.n	80069fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069fa:	d107      	bne.n	8006a0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a14:	d10f      	bne.n	8006a36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e017      	b.n	8006a7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	4013      	ands	r3, r2
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	bf0c      	ite	eq
 8006a6a:	2301      	moveq	r3, #1
 8006a6c:	2300      	movne	r3, #0
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	461a      	mov	r2, r3
 8006a72:	79fb      	ldrb	r3, [r7, #7]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d19b      	bne.n	80069b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3720      	adds	r7, #32
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20000078 	.word	0x20000078

08006a88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b088      	sub	sp, #32
 8006a8c:	af02      	add	r7, sp, #8
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a94:	4b1b      	ldr	r3, [pc, #108]	; (8006b04 <SPI_EndRxTxTransaction+0x7c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a1b      	ldr	r2, [pc, #108]	; (8006b08 <SPI_EndRxTxTransaction+0x80>)
 8006a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9e:	0d5b      	lsrs	r3, r3, #21
 8006aa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006aa4:	fb02 f303 	mul.w	r3, r2, r3
 8006aa8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ab2:	d112      	bne.n	8006ada <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2200      	movs	r2, #0
 8006abc:	2180      	movs	r1, #128	; 0x80
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f7ff ff5a 	bl	8006978 <SPI_WaitFlagStateUntilTimeout>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d016      	beq.n	8006af8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ace:	f043 0220 	orr.w	r2, r3, #32
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e00f      	b.n	8006afa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00a      	beq.n	8006af6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af0:	2b80      	cmp	r3, #128	; 0x80
 8006af2:	d0f2      	beq.n	8006ada <SPI_EndRxTxTransaction+0x52>
 8006af4:	e000      	b.n	8006af8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006af6:	bf00      	nop
  }

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000078 	.word	0x20000078
 8006b08:	165e9f81 	.word	0x165e9f81

08006b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e041      	b.n	8006ba2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d106      	bne.n	8006b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7fc fc76 	bl	8003424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3304      	adds	r3, #4
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	f000 fa96 	bl	800707c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d001      	beq.n	8006bc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e04e      	b.n	8006c62 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0201 	orr.w	r2, r2, #1
 8006bda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a23      	ldr	r2, [pc, #140]	; (8006c70 <HAL_TIM_Base_Start_IT+0xc4>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d022      	beq.n	8006c2c <HAL_TIM_Base_Start_IT+0x80>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bee:	d01d      	beq.n	8006c2c <HAL_TIM_Base_Start_IT+0x80>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a1f      	ldr	r2, [pc, #124]	; (8006c74 <HAL_TIM_Base_Start_IT+0xc8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d018      	beq.n	8006c2c <HAL_TIM_Base_Start_IT+0x80>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a1e      	ldr	r2, [pc, #120]	; (8006c78 <HAL_TIM_Base_Start_IT+0xcc>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d013      	beq.n	8006c2c <HAL_TIM_Base_Start_IT+0x80>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a1c      	ldr	r2, [pc, #112]	; (8006c7c <HAL_TIM_Base_Start_IT+0xd0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00e      	beq.n	8006c2c <HAL_TIM_Base_Start_IT+0x80>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a1b      	ldr	r2, [pc, #108]	; (8006c80 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d009      	beq.n	8006c2c <HAL_TIM_Base_Start_IT+0x80>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a19      	ldr	r2, [pc, #100]	; (8006c84 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d004      	beq.n	8006c2c <HAL_TIM_Base_Start_IT+0x80>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a18      	ldr	r2, [pc, #96]	; (8006c88 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d111      	bne.n	8006c50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b06      	cmp	r3, #6
 8006c3c:	d010      	beq.n	8006c60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f042 0201 	orr.w	r2, r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c4e:	e007      	b.n	8006c60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0201 	orr.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	40000c00 	.word	0x40000c00
 8006c80:	40010400 	.word	0x40010400
 8006c84:	40014000 	.word	0x40014000
 8006c88:	40001800 	.word	0x40001800

08006c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d122      	bne.n	8006ce8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d11b      	bne.n	8006ce8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f06f 0202 	mvn.w	r2, #2
 8006cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f9b5 	bl	800703e <HAL_TIM_IC_CaptureCallback>
 8006cd4:	e005      	b.n	8006ce2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f9a7 	bl	800702a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f9b8 	bl	8007052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	f003 0304 	and.w	r3, r3, #4
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	d122      	bne.n	8006d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d11b      	bne.n	8006d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f06f 0204 	mvn.w	r2, #4
 8006d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2202      	movs	r2, #2
 8006d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f98b 	bl	800703e <HAL_TIM_IC_CaptureCallback>
 8006d28:	e005      	b.n	8006d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f97d 	bl	800702a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f98e 	bl	8007052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f003 0308 	and.w	r3, r3, #8
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d122      	bne.n	8006d90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f003 0308 	and.w	r3, r3, #8
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d11b      	bne.n	8006d90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f06f 0208 	mvn.w	r2, #8
 8006d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2204      	movs	r2, #4
 8006d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f961 	bl	800703e <HAL_TIM_IC_CaptureCallback>
 8006d7c:	e005      	b.n	8006d8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f953 	bl	800702a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f964 	bl	8007052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	f003 0310 	and.w	r3, r3, #16
 8006d9a:	2b10      	cmp	r3, #16
 8006d9c:	d122      	bne.n	8006de4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f003 0310 	and.w	r3, r3, #16
 8006da8:	2b10      	cmp	r3, #16
 8006daa:	d11b      	bne.n	8006de4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f06f 0210 	mvn.w	r2, #16
 8006db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2208      	movs	r2, #8
 8006dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f937 	bl	800703e <HAL_TIM_IC_CaptureCallback>
 8006dd0:	e005      	b.n	8006dde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f929 	bl	800702a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f93a 	bl	8007052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d10e      	bne.n	8006e10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d107      	bne.n	8006e10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f06f 0201 	mvn.w	r2, #1
 8006e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fb fe0a 	bl	8002a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1a:	2b80      	cmp	r3, #128	; 0x80
 8006e1c:	d10e      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e28:	2b80      	cmp	r3, #128	; 0x80
 8006e2a:	d107      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fae0 	bl	80073fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e46:	2b40      	cmp	r3, #64	; 0x40
 8006e48:	d10e      	bne.n	8006e68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e54:	2b40      	cmp	r3, #64	; 0x40
 8006e56:	d107      	bne.n	8006e68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f8ff 	bl	8007066 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f003 0320 	and.w	r3, r3, #32
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	d10e      	bne.n	8006e94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f003 0320 	and.w	r3, r3, #32
 8006e80:	2b20      	cmp	r3, #32
 8006e82:	d107      	bne.n	8006e94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f06f 0220 	mvn.w	r2, #32
 8006e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 faaa 	bl	80073e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e94:	bf00      	nop
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d101      	bne.n	8006eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e0b4      	b.n	8007022 <HAL_TIM_ConfigClockSource+0x186>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ede:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef0:	d03e      	beq.n	8006f70 <HAL_TIM_ConfigClockSource+0xd4>
 8006ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef6:	f200 8087 	bhi.w	8007008 <HAL_TIM_ConfigClockSource+0x16c>
 8006efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006efe:	f000 8086 	beq.w	800700e <HAL_TIM_ConfigClockSource+0x172>
 8006f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f06:	d87f      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x16c>
 8006f08:	2b70      	cmp	r3, #112	; 0x70
 8006f0a:	d01a      	beq.n	8006f42 <HAL_TIM_ConfigClockSource+0xa6>
 8006f0c:	2b70      	cmp	r3, #112	; 0x70
 8006f0e:	d87b      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x16c>
 8006f10:	2b60      	cmp	r3, #96	; 0x60
 8006f12:	d050      	beq.n	8006fb6 <HAL_TIM_ConfigClockSource+0x11a>
 8006f14:	2b60      	cmp	r3, #96	; 0x60
 8006f16:	d877      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x16c>
 8006f18:	2b50      	cmp	r3, #80	; 0x50
 8006f1a:	d03c      	beq.n	8006f96 <HAL_TIM_ConfigClockSource+0xfa>
 8006f1c:	2b50      	cmp	r3, #80	; 0x50
 8006f1e:	d873      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x16c>
 8006f20:	2b40      	cmp	r3, #64	; 0x40
 8006f22:	d058      	beq.n	8006fd6 <HAL_TIM_ConfigClockSource+0x13a>
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d86f      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x16c>
 8006f28:	2b30      	cmp	r3, #48	; 0x30
 8006f2a:	d064      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f2c:	2b30      	cmp	r3, #48	; 0x30
 8006f2e:	d86b      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x16c>
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	d060      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	d867      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x16c>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d05c      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f3c:	2b10      	cmp	r3, #16
 8006f3e:	d05a      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f40:	e062      	b.n	8007008 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	6899      	ldr	r1, [r3, #8]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f000 f9ad 	bl	80072b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	609a      	str	r2, [r3, #8]
      break;
 8006f6e:	e04f      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6818      	ldr	r0, [r3, #0]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	6899      	ldr	r1, [r3, #8]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f000 f996 	bl	80072b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f92:	609a      	str	r2, [r3, #8]
      break;
 8006f94:	e03c      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	6859      	ldr	r1, [r3, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f000 f90a 	bl	80071bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2150      	movs	r1, #80	; 0x50
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 f963 	bl	800727a <TIM_ITRx_SetConfig>
      break;
 8006fb4:	e02c      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	6859      	ldr	r1, [r3, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f000 f929 	bl	800721a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2160      	movs	r1, #96	; 0x60
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 f953 	bl	800727a <TIM_ITRx_SetConfig>
      break;
 8006fd4:	e01c      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	6859      	ldr	r1, [r3, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f000 f8ea 	bl	80071bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2140      	movs	r1, #64	; 0x40
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 f943 	bl	800727a <TIM_ITRx_SetConfig>
      break;
 8006ff4:	e00c      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4619      	mov	r1, r3
 8007000:	4610      	mov	r0, r2
 8007002:	f000 f93a 	bl	800727a <TIM_ITRx_SetConfig>
      break;
 8007006:	e003      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	73fb      	strb	r3, [r7, #15]
      break;
 800700c:	e000      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800700e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800705a:	bf00      	nop
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800706e:	bf00      	nop
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
	...

0800707c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a40      	ldr	r2, [pc, #256]	; (8007190 <TIM_Base_SetConfig+0x114>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d013      	beq.n	80070bc <TIM_Base_SetConfig+0x40>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800709a:	d00f      	beq.n	80070bc <TIM_Base_SetConfig+0x40>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a3d      	ldr	r2, [pc, #244]	; (8007194 <TIM_Base_SetConfig+0x118>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00b      	beq.n	80070bc <TIM_Base_SetConfig+0x40>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a3c      	ldr	r2, [pc, #240]	; (8007198 <TIM_Base_SetConfig+0x11c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d007      	beq.n	80070bc <TIM_Base_SetConfig+0x40>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a3b      	ldr	r2, [pc, #236]	; (800719c <TIM_Base_SetConfig+0x120>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d003      	beq.n	80070bc <TIM_Base_SetConfig+0x40>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a3a      	ldr	r2, [pc, #232]	; (80071a0 <TIM_Base_SetConfig+0x124>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d108      	bne.n	80070ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a2f      	ldr	r2, [pc, #188]	; (8007190 <TIM_Base_SetConfig+0x114>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d02b      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070dc:	d027      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a2c      	ldr	r2, [pc, #176]	; (8007194 <TIM_Base_SetConfig+0x118>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d023      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a2b      	ldr	r2, [pc, #172]	; (8007198 <TIM_Base_SetConfig+0x11c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d01f      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a2a      	ldr	r2, [pc, #168]	; (800719c <TIM_Base_SetConfig+0x120>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d01b      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a29      	ldr	r2, [pc, #164]	; (80071a0 <TIM_Base_SetConfig+0x124>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d017      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a28      	ldr	r2, [pc, #160]	; (80071a4 <TIM_Base_SetConfig+0x128>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d013      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a27      	ldr	r2, [pc, #156]	; (80071a8 <TIM_Base_SetConfig+0x12c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d00f      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a26      	ldr	r2, [pc, #152]	; (80071ac <TIM_Base_SetConfig+0x130>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00b      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a25      	ldr	r2, [pc, #148]	; (80071b0 <TIM_Base_SetConfig+0x134>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d007      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a24      	ldr	r2, [pc, #144]	; (80071b4 <TIM_Base_SetConfig+0x138>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d003      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a23      	ldr	r2, [pc, #140]	; (80071b8 <TIM_Base_SetConfig+0x13c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d108      	bne.n	8007140 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	689a      	ldr	r2, [r3, #8]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a0a      	ldr	r2, [pc, #40]	; (8007190 <TIM_Base_SetConfig+0x114>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_Base_SetConfig+0xf8>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a0c      	ldr	r2, [pc, #48]	; (80071a0 <TIM_Base_SetConfig+0x124>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d103      	bne.n	800717c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	691a      	ldr	r2, [r3, #16]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	615a      	str	r2, [r3, #20]
}
 8007182:	bf00      	nop
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	40010000 	.word	0x40010000
 8007194:	40000400 	.word	0x40000400
 8007198:	40000800 	.word	0x40000800
 800719c:	40000c00 	.word	0x40000c00
 80071a0:	40010400 	.word	0x40010400
 80071a4:	40014000 	.word	0x40014000
 80071a8:	40014400 	.word	0x40014400
 80071ac:	40014800 	.word	0x40014800
 80071b0:	40001800 	.word	0x40001800
 80071b4:	40001c00 	.word	0x40001c00
 80071b8:	40002000 	.word	0x40002000

080071bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f023 0201 	bic.w	r2, r3, #1
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f023 030a 	bic.w	r3, r3, #10
 80071f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	4313      	orrs	r3, r2
 8007200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	621a      	str	r2, [r3, #32]
}
 800720e:	bf00      	nop
 8007210:	371c      	adds	r7, #28
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800721a:	b480      	push	{r7}
 800721c:	b087      	sub	sp, #28
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	f023 0210 	bic.w	r2, r3, #16
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007244:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	031b      	lsls	r3, r3, #12
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	4313      	orrs	r3, r2
 800724e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007256:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	011b      	lsls	r3, r3, #4
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	4313      	orrs	r3, r2
 8007260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	621a      	str	r2, [r3, #32]
}
 800726e:	bf00      	nop
 8007270:	371c      	adds	r7, #28
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800727a:	b480      	push	{r7}
 800727c:	b085      	sub	sp, #20
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	f043 0307 	orr.w	r3, r3, #7
 800729c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	609a      	str	r2, [r3, #8]
}
 80072a4:	bf00      	nop
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	021a      	lsls	r2, r3, #8
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	431a      	orrs	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	4313      	orrs	r3, r2
 80072dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	609a      	str	r2, [r3, #8]
}
 80072e4:	bf00      	nop
 80072e6:	371c      	adds	r7, #28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007304:	2302      	movs	r3, #2
 8007306:	e05a      	b.n	80073be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2202      	movs	r2, #2
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a21      	ldr	r2, [pc, #132]	; (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d022      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007354:	d01d      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a1d      	ldr	r2, [pc, #116]	; (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d018      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a1b      	ldr	r2, [pc, #108]	; (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d013      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a1a      	ldr	r2, [pc, #104]	; (80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00e      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a18      	ldr	r2, [pc, #96]	; (80073dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d009      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a17      	ldr	r2, [pc, #92]	; (80073e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d004      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a15      	ldr	r2, [pc, #84]	; (80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d10c      	bne.n	80073ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007398:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	40010000 	.word	0x40010000
 80073d0:	40000400 	.word	0x40000400
 80073d4:	40000800 	.word	0x40000800
 80073d8:	40000c00 	.word	0x40000c00
 80073dc:	40010400 	.word	0x40010400
 80073e0:	40014000 	.word	0x40014000
 80073e4:	40001800 	.word	0x40001800

080073e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e03f      	b.n	80074a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d106      	bne.n	800743c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7fc f81a 	bl	8003470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2224      	movs	r2, #36	; 0x24
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007452:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fe27 	bl	80080a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	691a      	ldr	r2, [r3, #16]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007468:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	695a      	ldr	r2, [r3, #20]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007478:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68da      	ldr	r2, [r3, #12]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007488:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2220      	movs	r2, #32
 8007494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	4613      	mov	r3, r2
 80074b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	d11d      	bne.n	8007500 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <HAL_UART_Receive_IT+0x26>
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e016      	b.n	8007502 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <HAL_UART_Receive_IT+0x38>
 80074de:	2302      	movs	r3, #2
 80074e0:	e00f      	b.n	8007502 <HAL_UART_Receive_IT+0x58>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074f0:	88fb      	ldrh	r3, [r7, #6]
 80074f2:	461a      	mov	r2, r3
 80074f4:	68b9      	ldr	r1, [r7, #8]
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 fbd9 	bl	8007cae <UART_Start_Receive_IT>
 80074fc:	4603      	mov	r3, r0
 80074fe:	e000      	b.n	8007502 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007500:	2302      	movs	r3, #2
  }
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08c      	sub	sp, #48	; 0x30
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	4613      	mov	r3, r2
 8007518:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b20      	cmp	r3, #32
 8007524:	d165      	bne.n	80075f2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <HAL_UART_Transmit_DMA+0x26>
 800752c:	88fb      	ldrh	r3, [r7, #6]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e05e      	b.n	80075f4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_UART_Transmit_DMA+0x38>
 8007540:	2302      	movs	r3, #2
 8007542:	e057      	b.n	80075f4 <HAL_UART_Transmit_DMA+0xe8>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	88fa      	ldrh	r2, [r7, #6]
 8007556:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	88fa      	ldrh	r2, [r7, #6]
 800755c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2221      	movs	r2, #33	; 0x21
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007570:	4a22      	ldr	r2, [pc, #136]	; (80075fc <HAL_UART_Transmit_DMA+0xf0>)
 8007572:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007578:	4a21      	ldr	r2, [pc, #132]	; (8007600 <HAL_UART_Transmit_DMA+0xf4>)
 800757a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007580:	4a20      	ldr	r2, [pc, #128]	; (8007604 <HAL_UART_Transmit_DMA+0xf8>)
 8007582:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007588:	2200      	movs	r2, #0
 800758a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800758c:	f107 0308 	add.w	r3, r7, #8
 8007590:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	6819      	ldr	r1, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3304      	adds	r3, #4
 80075a0:	461a      	mov	r2, r3
 80075a2:	88fb      	ldrh	r3, [r7, #6]
 80075a4:	f7fc fb6c 	bl	8003c80 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075b0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3314      	adds	r3, #20
 80075c0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	617b      	str	r3, [r7, #20]
   return(result);
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3314      	adds	r3, #20
 80075d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075da:	627a      	str	r2, [r7, #36]	; 0x24
 80075dc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	6a39      	ldr	r1, [r7, #32]
 80075e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e5      	bne.n	80075ba <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	e000      	b.n	80075f4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80075f2:	2302      	movs	r3, #2
  }
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3730      	adds	r7, #48	; 0x30
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	08007b65 	.word	0x08007b65
 8007600:	08007bff 	.word	0x08007bff
 8007604:	08007c1b 	.word	0x08007c1b

08007608 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b0ba      	sub	sp, #232	; 0xe8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800762e:	2300      	movs	r3, #0
 8007630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007634:	2300      	movs	r3, #0
 8007636:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800763a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10f      	bne.n	800766e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800764e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b00      	cmp	r3, #0
 8007658:	d009      	beq.n	800766e <HAL_UART_IRQHandler+0x66>
 800765a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fc62 	bl	8007f30 <UART_Receive_IT>
      return;
 800766c:	e256      	b.n	8007b1c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800766e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 80de 	beq.w	8007834 <HAL_UART_IRQHandler+0x22c>
 8007678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	2b00      	cmp	r3, #0
 8007682:	d106      	bne.n	8007692 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007688:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 80d1 	beq.w	8007834 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <HAL_UART_IRQHandler+0xae>
 800769e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d005      	beq.n	80076b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ae:	f043 0201 	orr.w	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ba:	f003 0304 	and.w	r3, r3, #4
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00b      	beq.n	80076da <HAL_UART_IRQHandler+0xd2>
 80076c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d005      	beq.n	80076da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d2:	f043 0202 	orr.w	r2, r3, #2
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00b      	beq.n	80076fe <HAL_UART_IRQHandler+0xf6>
 80076e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	f043 0204 	orr.w	r2, r3, #4
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007702:	f003 0308 	and.w	r3, r3, #8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d011      	beq.n	800772e <HAL_UART_IRQHandler+0x126>
 800770a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800770e:	f003 0320 	and.w	r3, r3, #32
 8007712:	2b00      	cmp	r3, #0
 8007714:	d105      	bne.n	8007722 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d005      	beq.n	800772e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	f043 0208 	orr.w	r2, r3, #8
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	2b00      	cmp	r3, #0
 8007734:	f000 81ed 	beq.w	8007b12 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800773c:	f003 0320 	and.w	r3, r3, #32
 8007740:	2b00      	cmp	r3, #0
 8007742:	d008      	beq.n	8007756 <HAL_UART_IRQHandler+0x14e>
 8007744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007748:	f003 0320 	and.w	r3, r3, #32
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fbed 	bl	8007f30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007760:	2b40      	cmp	r3, #64	; 0x40
 8007762:	bf0c      	ite	eq
 8007764:	2301      	moveq	r3, #1
 8007766:	2300      	movne	r3, #0
 8007768:	b2db      	uxtb	r3, r3
 800776a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	f003 0308 	and.w	r3, r3, #8
 8007776:	2b00      	cmp	r3, #0
 8007778:	d103      	bne.n	8007782 <HAL_UART_IRQHandler+0x17a>
 800777a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800777e:	2b00      	cmp	r3, #0
 8007780:	d04f      	beq.n	8007822 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 faf5 	bl	8007d72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007792:	2b40      	cmp	r3, #64	; 0x40
 8007794:	d141      	bne.n	800781a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3314      	adds	r3, #20
 800779c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3314      	adds	r3, #20
 80077be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1d9      	bne.n	8007796 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d013      	beq.n	8007812 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ee:	4a7d      	ldr	r2, [pc, #500]	; (80079e4 <HAL_UART_IRQHandler+0x3dc>)
 80077f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fc fb0a 	bl	8003e10 <HAL_DMA_Abort_IT>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d016      	beq.n	8007830 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800780c:	4610      	mov	r0, r2
 800780e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007810:	e00e      	b.n	8007830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f990 	bl	8007b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007818:	e00a      	b.n	8007830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f98c 	bl	8007b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007820:	e006      	b.n	8007830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f988 	bl	8007b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800782e:	e170      	b.n	8007b12 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007830:	bf00      	nop
    return;
 8007832:	e16e      	b.n	8007b12 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007838:	2b01      	cmp	r3, #1
 800783a:	f040 814a 	bne.w	8007ad2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800783e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007842:	f003 0310 	and.w	r3, r3, #16
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 8143 	beq.w	8007ad2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800784c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007850:	f003 0310 	and.w	r3, r3, #16
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 813c 	beq.w	8007ad2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800785a:	2300      	movs	r3, #0
 800785c:	60bb      	str	r3, [r7, #8]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60bb      	str	r3, [r7, #8]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	60bb      	str	r3, [r7, #8]
 800786e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800787a:	2b40      	cmp	r3, #64	; 0x40
 800787c:	f040 80b4 	bne.w	80079e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800788c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 8140 	beq.w	8007b16 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800789a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800789e:	429a      	cmp	r2, r3
 80078a0:	f080 8139 	bcs.w	8007b16 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078b6:	f000 8088 	beq.w	80079ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	330c      	adds	r3, #12
 80078c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	330c      	adds	r3, #12
 80078e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80078e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1d9      	bne.n	80078ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3314      	adds	r3, #20
 800790c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007910:	e853 3f00 	ldrex	r3, [r3]
 8007914:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007918:	f023 0301 	bic.w	r3, r3, #1
 800791c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3314      	adds	r3, #20
 8007926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800792a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800792e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007932:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800793c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e1      	bne.n	8007906 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3314      	adds	r3, #20
 8007948:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3314      	adds	r3, #20
 8007962:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007966:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007968:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800796c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e3      	bne.n	8007942 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2220      	movs	r2, #32
 800797e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	330c      	adds	r3, #12
 800798e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800799a:	f023 0310 	bic.w	r3, r3, #16
 800799e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	330c      	adds	r3, #12
 80079a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80079ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80079ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079b4:	e841 2300 	strex	r3, r2, [r1]
 80079b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e3      	bne.n	8007988 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fc f9b3 	bl	8003d30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f8b6 	bl	8007b4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079e0:	e099      	b.n	8007b16 <HAL_UART_IRQHandler+0x50e>
 80079e2:	bf00      	nop
 80079e4:	08007e39 	.word	0x08007e39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 808b 	beq.w	8007b1a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007a04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 8086 	beq.w	8007b1a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	330c      	adds	r3, #12
 8007a14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	330c      	adds	r3, #12
 8007a2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a32:	647a      	str	r2, [r7, #68]	; 0x44
 8007a34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a3a:	e841 2300 	strex	r3, r2, [r1]
 8007a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1e3      	bne.n	8007a0e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3314      	adds	r3, #20
 8007a4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	e853 3f00 	ldrex	r3, [r3]
 8007a54:	623b      	str	r3, [r7, #32]
   return(result);
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	f023 0301 	bic.w	r3, r3, #1
 8007a5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3314      	adds	r3, #20
 8007a66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a6a:	633a      	str	r2, [r7, #48]	; 0x30
 8007a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a72:	e841 2300 	strex	r3, r2, [r1]
 8007a76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1e3      	bne.n	8007a46 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2220      	movs	r2, #32
 8007a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	330c      	adds	r3, #12
 8007a92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	e853 3f00 	ldrex	r3, [r3]
 8007a9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f023 0310 	bic.w	r3, r3, #16
 8007aa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	330c      	adds	r3, #12
 8007aac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ab0:	61fa      	str	r2, [r7, #28]
 8007ab2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	69b9      	ldr	r1, [r7, #24]
 8007ab6:	69fa      	ldr	r2, [r7, #28]
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	617b      	str	r3, [r7, #20]
   return(result);
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e3      	bne.n	8007a8c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f83e 	bl	8007b4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ad0:	e023      	b.n	8007b1a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d009      	beq.n	8007af2 <HAL_UART_IRQHandler+0x4ea>
 8007ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d003      	beq.n	8007af2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f9b8 	bl	8007e60 <UART_Transmit_IT>
    return;
 8007af0:	e014      	b.n	8007b1c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00e      	beq.n	8007b1c <HAL_UART_IRQHandler+0x514>
 8007afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d008      	beq.n	8007b1c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f9f8 	bl	8007f00 <UART_EndTransmit_IT>
    return;
 8007b10:	e004      	b.n	8007b1c <HAL_UART_IRQHandler+0x514>
    return;
 8007b12:	bf00      	nop
 8007b14:	e002      	b.n	8007b1c <HAL_UART_IRQHandler+0x514>
      return;
 8007b16:	bf00      	nop
 8007b18:	e000      	b.n	8007b1c <HAL_UART_IRQHandler+0x514>
      return;
 8007b1a:	bf00      	nop
  }
}
 8007b1c:	37e8      	adds	r7, #232	; 0xe8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop

08007b24 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b090      	sub	sp, #64	; 0x40
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d137      	bne.n	8007bf0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b82:	2200      	movs	r2, #0
 8007b84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3314      	adds	r3, #20
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	e853 3f00 	ldrex	r3, [r3]
 8007b94:	623b      	str	r3, [r7, #32]
   return(result);
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3314      	adds	r3, #20
 8007ba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ba6:	633a      	str	r2, [r7, #48]	; 0x30
 8007ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e5      	bne.n	8007b86 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	330c      	adds	r3, #12
 8007bc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	e853 3f00 	ldrex	r3, [r3]
 8007bc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8007bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	330c      	adds	r3, #12
 8007bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bda:	61fa      	str	r2, [r7, #28]
 8007bdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bde:	69b9      	ldr	r1, [r7, #24]
 8007be0:	69fa      	ldr	r2, [r7, #28]
 8007be2:	e841 2300 	strex	r3, r2, [r1]
 8007be6:	617b      	str	r3, [r7, #20]
   return(result);
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1e5      	bne.n	8007bba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bee:	e002      	b.n	8007bf6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007bf0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007bf2:	f7fa f993 	bl	8001f1c <HAL_UART_TxCpltCallback>
}
 8007bf6:	bf00      	nop
 8007bf8:	3740      	adds	r7, #64	; 0x40
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f7ff ff89 	bl	8007b24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c12:	bf00      	nop
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c36:	2b80      	cmp	r3, #128	; 0x80
 8007c38:	bf0c      	ite	eq
 8007c3a:	2301      	moveq	r3, #1
 8007c3c:	2300      	movne	r3, #0
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b21      	cmp	r3, #33	; 0x21
 8007c4c:	d108      	bne.n	8007c60 <UART_DMAError+0x46>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2200      	movs	r2, #0
 8007c58:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007c5a:	68b8      	ldr	r0, [r7, #8]
 8007c5c:	f000 f861 	bl	8007d22 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6a:	2b40      	cmp	r3, #64	; 0x40
 8007c6c:	bf0c      	ite	eq
 8007c6e:	2301      	moveq	r3, #1
 8007c70:	2300      	movne	r3, #0
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b22      	cmp	r3, #34	; 0x22
 8007c80:	d108      	bne.n	8007c94 <UART_DMAError+0x7a>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d005      	beq.n	8007c94 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007c8e:	68b8      	ldr	r0, [r7, #8]
 8007c90:	f000 f86f 	bl	8007d72 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c98:	f043 0210 	orr.w	r2, r3, #16
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ca0:	68b8      	ldr	r0, [r7, #8]
 8007ca2:	f7ff ff49 	bl	8007b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ca6:	bf00      	nop
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b085      	sub	sp, #20
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	88fa      	ldrh	r2, [r7, #6]
 8007cc6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	88fa      	ldrh	r2, [r7, #6]
 8007ccc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2222      	movs	r2, #34	; 0x22
 8007cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cf2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	695a      	ldr	r2, [r3, #20]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0201 	orr.w	r2, r2, #1
 8007d02:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f042 0220 	orr.w	r2, r2, #32
 8007d12:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b089      	sub	sp, #36	; 0x24
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	330c      	adds	r3, #12
 8007d30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d40:	61fb      	str	r3, [r7, #28]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	330c      	adds	r3, #12
 8007d48:	69fa      	ldr	r2, [r7, #28]
 8007d4a:	61ba      	str	r2, [r7, #24]
 8007d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6979      	ldr	r1, [r7, #20]
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	613b      	str	r3, [r7, #16]
   return(result);
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e5      	bne.n	8007d2a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2220      	movs	r2, #32
 8007d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007d66:	bf00      	nop
 8007d68:	3724      	adds	r7, #36	; 0x24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b095      	sub	sp, #84	; 0x54
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	330c      	adds	r3, #12
 8007d80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	330c      	adds	r3, #12
 8007d98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d9a:	643a      	str	r2, [r7, #64]	; 0x40
 8007d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007da0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1e5      	bne.n	8007d7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3314      	adds	r3, #20
 8007db4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	f023 0301 	bic.w	r3, r3, #1
 8007dc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3314      	adds	r3, #20
 8007dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e5      	bne.n	8007dae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d119      	bne.n	8007e1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	330c      	adds	r3, #12
 8007df0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	e853 3f00 	ldrex	r3, [r3]
 8007df8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	f023 0310 	bic.w	r3, r3, #16
 8007e00:	647b      	str	r3, [r7, #68]	; 0x44
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	330c      	adds	r3, #12
 8007e08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e0a:	61ba      	str	r2, [r7, #24]
 8007e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0e:	6979      	ldr	r1, [r7, #20]
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	e841 2300 	strex	r3, r2, [r1]
 8007e16:	613b      	str	r3, [r7, #16]
   return(result);
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1e5      	bne.n	8007dea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2220      	movs	r2, #32
 8007e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e2c:	bf00      	nop
 8007e2e:	3754      	adds	r7, #84	; 0x54
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff fe70 	bl	8007b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b21      	cmp	r3, #33	; 0x21
 8007e72:	d13e      	bne.n	8007ef2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e7c:	d114      	bne.n	8007ea8 <UART_Transmit_IT+0x48>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d110      	bne.n	8007ea8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	461a      	mov	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	1c9a      	adds	r2, r3, #2
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	621a      	str	r2, [r3, #32]
 8007ea6:	e008      	b.n	8007eba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	1c59      	adds	r1, r3, #1
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	6211      	str	r1, [r2, #32]
 8007eb2:	781a      	ldrb	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10f      	bne.n	8007eee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007edc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	e000      	b.n	8007ef4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ef2:	2302      	movs	r3, #2
  }
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7f9 fffb 	bl	8001f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08c      	sub	sp, #48	; 0x30
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b22      	cmp	r3, #34	; 0x22
 8007f42:	f040 80ab 	bne.w	800809c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f4e:	d117      	bne.n	8007f80 <UART_Receive_IT+0x50>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d113      	bne.n	8007f80 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f60:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f78:	1c9a      	adds	r2, r3, #2
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	629a      	str	r2, [r3, #40]	; 0x28
 8007f7e:	e026      	b.n	8007fce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f92:	d007      	beq.n	8007fa4 <UART_Receive_IT+0x74>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10a      	bne.n	8007fb2 <UART_Receive_IT+0x82>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d106      	bne.n	8007fb2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fae:	701a      	strb	r2, [r3, #0]
 8007fb0:	e008      	b.n	8007fc4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc8:	1c5a      	adds	r2, r3, #1
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d15a      	bne.n	8008098 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68da      	ldr	r2, [r3, #12]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0220 	bic.w	r2, r2, #32
 8007ff0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68da      	ldr	r2, [r3, #12]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008000:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	695a      	ldr	r2, [r3, #20]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f022 0201 	bic.w	r2, r2, #1
 8008010:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2220      	movs	r2, #32
 8008016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801e:	2b01      	cmp	r3, #1
 8008020:	d135      	bne.n	800808e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	330c      	adds	r3, #12
 800802e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	e853 3f00 	ldrex	r3, [r3]
 8008036:	613b      	str	r3, [r7, #16]
   return(result);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	f023 0310 	bic.w	r3, r3, #16
 800803e:	627b      	str	r3, [r7, #36]	; 0x24
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	330c      	adds	r3, #12
 8008046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008048:	623a      	str	r2, [r7, #32]
 800804a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804c:	69f9      	ldr	r1, [r7, #28]
 800804e:	6a3a      	ldr	r2, [r7, #32]
 8008050:	e841 2300 	strex	r3, r2, [r1]
 8008054:	61bb      	str	r3, [r7, #24]
   return(result);
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1e5      	bne.n	8008028 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0310 	and.w	r3, r3, #16
 8008066:	2b10      	cmp	r3, #16
 8008068:	d10a      	bne.n	8008080 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800806a:	2300      	movs	r3, #0
 800806c:	60fb      	str	r3, [r7, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	60fb      	str	r3, [r7, #12]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	60fb      	str	r3, [r7, #12]
 800807e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7ff fd60 	bl	8007b4c <HAL_UARTEx_RxEventCallback>
 800808c:	e002      	b.n	8008094 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7f9 fcec 	bl	8001a6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	e002      	b.n	800809e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	e000      	b.n	800809e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800809c:	2302      	movs	r3, #2
  }
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3730      	adds	r7, #48	; 0x30
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080ac:	b0c0      	sub	sp, #256	; 0x100
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c4:	68d9      	ldr	r1, [r3, #12]
 80080c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	ea40 0301 	orr.w	r3, r0, r1
 80080d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	431a      	orrs	r2, r3
 80080e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	431a      	orrs	r2, r3
 80080e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80080f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008100:	f021 010c 	bic.w	r1, r1, #12
 8008104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800810e:	430b      	orrs	r3, r1
 8008110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800811e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008122:	6999      	ldr	r1, [r3, #24]
 8008124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	ea40 0301 	orr.w	r3, r0, r1
 800812e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	4b8f      	ldr	r3, [pc, #572]	; (8008374 <UART_SetConfig+0x2cc>)
 8008138:	429a      	cmp	r2, r3
 800813a:	d005      	beq.n	8008148 <UART_SetConfig+0xa0>
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4b8d      	ldr	r3, [pc, #564]	; (8008378 <UART_SetConfig+0x2d0>)
 8008144:	429a      	cmp	r2, r3
 8008146:	d104      	bne.n	8008152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008148:	f7fd fb96 	bl	8005878 <HAL_RCC_GetPCLK2Freq>
 800814c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008150:	e003      	b.n	800815a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008152:	f7fd fb7d 	bl	8005850 <HAL_RCC_GetPCLK1Freq>
 8008156:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800815a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008164:	f040 810c 	bne.w	8008380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800816c:	2200      	movs	r2, #0
 800816e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008172:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800817a:	4622      	mov	r2, r4
 800817c:	462b      	mov	r3, r5
 800817e:	1891      	adds	r1, r2, r2
 8008180:	65b9      	str	r1, [r7, #88]	; 0x58
 8008182:	415b      	adcs	r3, r3
 8008184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800818a:	4621      	mov	r1, r4
 800818c:	eb12 0801 	adds.w	r8, r2, r1
 8008190:	4629      	mov	r1, r5
 8008192:	eb43 0901 	adc.w	r9, r3, r1
 8008196:	f04f 0200 	mov.w	r2, #0
 800819a:	f04f 0300 	mov.w	r3, #0
 800819e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081aa:	4690      	mov	r8, r2
 80081ac:	4699      	mov	r9, r3
 80081ae:	4623      	mov	r3, r4
 80081b0:	eb18 0303 	adds.w	r3, r8, r3
 80081b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081b8:	462b      	mov	r3, r5
 80081ba:	eb49 0303 	adc.w	r3, r9, r3
 80081be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081d6:	460b      	mov	r3, r1
 80081d8:	18db      	adds	r3, r3, r3
 80081da:	653b      	str	r3, [r7, #80]	; 0x50
 80081dc:	4613      	mov	r3, r2
 80081de:	eb42 0303 	adc.w	r3, r2, r3
 80081e2:	657b      	str	r3, [r7, #84]	; 0x54
 80081e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081ec:	f7f8 fb9e 	bl	800092c <__aeabi_uldivmod>
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	4b61      	ldr	r3, [pc, #388]	; (800837c <UART_SetConfig+0x2d4>)
 80081f6:	fba3 2302 	umull	r2, r3, r3, r2
 80081fa:	095b      	lsrs	r3, r3, #5
 80081fc:	011c      	lsls	r4, r3, #4
 80081fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008202:	2200      	movs	r2, #0
 8008204:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008208:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800820c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008210:	4642      	mov	r2, r8
 8008212:	464b      	mov	r3, r9
 8008214:	1891      	adds	r1, r2, r2
 8008216:	64b9      	str	r1, [r7, #72]	; 0x48
 8008218:	415b      	adcs	r3, r3
 800821a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800821c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008220:	4641      	mov	r1, r8
 8008222:	eb12 0a01 	adds.w	sl, r2, r1
 8008226:	4649      	mov	r1, r9
 8008228:	eb43 0b01 	adc.w	fp, r3, r1
 800822c:	f04f 0200 	mov.w	r2, #0
 8008230:	f04f 0300 	mov.w	r3, #0
 8008234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800823c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008240:	4692      	mov	sl, r2
 8008242:	469b      	mov	fp, r3
 8008244:	4643      	mov	r3, r8
 8008246:	eb1a 0303 	adds.w	r3, sl, r3
 800824a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800824e:	464b      	mov	r3, r9
 8008250:	eb4b 0303 	adc.w	r3, fp, r3
 8008254:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008264:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800826c:	460b      	mov	r3, r1
 800826e:	18db      	adds	r3, r3, r3
 8008270:	643b      	str	r3, [r7, #64]	; 0x40
 8008272:	4613      	mov	r3, r2
 8008274:	eb42 0303 	adc.w	r3, r2, r3
 8008278:	647b      	str	r3, [r7, #68]	; 0x44
 800827a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800827e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008282:	f7f8 fb53 	bl	800092c <__aeabi_uldivmod>
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	4611      	mov	r1, r2
 800828c:	4b3b      	ldr	r3, [pc, #236]	; (800837c <UART_SetConfig+0x2d4>)
 800828e:	fba3 2301 	umull	r2, r3, r3, r1
 8008292:	095b      	lsrs	r3, r3, #5
 8008294:	2264      	movs	r2, #100	; 0x64
 8008296:	fb02 f303 	mul.w	r3, r2, r3
 800829a:	1acb      	subs	r3, r1, r3
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082a2:	4b36      	ldr	r3, [pc, #216]	; (800837c <UART_SetConfig+0x2d4>)
 80082a4:	fba3 2302 	umull	r2, r3, r3, r2
 80082a8:	095b      	lsrs	r3, r3, #5
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082b0:	441c      	add	r4, r3
 80082b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082c4:	4642      	mov	r2, r8
 80082c6:	464b      	mov	r3, r9
 80082c8:	1891      	adds	r1, r2, r2
 80082ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80082cc:	415b      	adcs	r3, r3
 80082ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082d4:	4641      	mov	r1, r8
 80082d6:	1851      	adds	r1, r2, r1
 80082d8:	6339      	str	r1, [r7, #48]	; 0x30
 80082da:	4649      	mov	r1, r9
 80082dc:	414b      	adcs	r3, r1
 80082de:	637b      	str	r3, [r7, #52]	; 0x34
 80082e0:	f04f 0200 	mov.w	r2, #0
 80082e4:	f04f 0300 	mov.w	r3, #0
 80082e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80082ec:	4659      	mov	r1, fp
 80082ee:	00cb      	lsls	r3, r1, #3
 80082f0:	4651      	mov	r1, sl
 80082f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082f6:	4651      	mov	r1, sl
 80082f8:	00ca      	lsls	r2, r1, #3
 80082fa:	4610      	mov	r0, r2
 80082fc:	4619      	mov	r1, r3
 80082fe:	4603      	mov	r3, r0
 8008300:	4642      	mov	r2, r8
 8008302:	189b      	adds	r3, r3, r2
 8008304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008308:	464b      	mov	r3, r9
 800830a:	460a      	mov	r2, r1
 800830c:	eb42 0303 	adc.w	r3, r2, r3
 8008310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008320:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008328:	460b      	mov	r3, r1
 800832a:	18db      	adds	r3, r3, r3
 800832c:	62bb      	str	r3, [r7, #40]	; 0x28
 800832e:	4613      	mov	r3, r2
 8008330:	eb42 0303 	adc.w	r3, r2, r3
 8008334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800833a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800833e:	f7f8 faf5 	bl	800092c <__aeabi_uldivmod>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	4b0d      	ldr	r3, [pc, #52]	; (800837c <UART_SetConfig+0x2d4>)
 8008348:	fba3 1302 	umull	r1, r3, r3, r2
 800834c:	095b      	lsrs	r3, r3, #5
 800834e:	2164      	movs	r1, #100	; 0x64
 8008350:	fb01 f303 	mul.w	r3, r1, r3
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	3332      	adds	r3, #50	; 0x32
 800835a:	4a08      	ldr	r2, [pc, #32]	; (800837c <UART_SetConfig+0x2d4>)
 800835c:	fba2 2303 	umull	r2, r3, r2, r3
 8008360:	095b      	lsrs	r3, r3, #5
 8008362:	f003 0207 	and.w	r2, r3, #7
 8008366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4422      	add	r2, r4
 800836e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008370:	e105      	b.n	800857e <UART_SetConfig+0x4d6>
 8008372:	bf00      	nop
 8008374:	40011000 	.word	0x40011000
 8008378:	40011400 	.word	0x40011400
 800837c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008384:	2200      	movs	r2, #0
 8008386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800838a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800838e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008392:	4642      	mov	r2, r8
 8008394:	464b      	mov	r3, r9
 8008396:	1891      	adds	r1, r2, r2
 8008398:	6239      	str	r1, [r7, #32]
 800839a:	415b      	adcs	r3, r3
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
 800839e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083a2:	4641      	mov	r1, r8
 80083a4:	1854      	adds	r4, r2, r1
 80083a6:	4649      	mov	r1, r9
 80083a8:	eb43 0501 	adc.w	r5, r3, r1
 80083ac:	f04f 0200 	mov.w	r2, #0
 80083b0:	f04f 0300 	mov.w	r3, #0
 80083b4:	00eb      	lsls	r3, r5, #3
 80083b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083ba:	00e2      	lsls	r2, r4, #3
 80083bc:	4614      	mov	r4, r2
 80083be:	461d      	mov	r5, r3
 80083c0:	4643      	mov	r3, r8
 80083c2:	18e3      	adds	r3, r4, r3
 80083c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083c8:	464b      	mov	r3, r9
 80083ca:	eb45 0303 	adc.w	r3, r5, r3
 80083ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083e2:	f04f 0200 	mov.w	r2, #0
 80083e6:	f04f 0300 	mov.w	r3, #0
 80083ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80083ee:	4629      	mov	r1, r5
 80083f0:	008b      	lsls	r3, r1, #2
 80083f2:	4621      	mov	r1, r4
 80083f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083f8:	4621      	mov	r1, r4
 80083fa:	008a      	lsls	r2, r1, #2
 80083fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008400:	f7f8 fa94 	bl	800092c <__aeabi_uldivmod>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	4b60      	ldr	r3, [pc, #384]	; (800858c <UART_SetConfig+0x4e4>)
 800840a:	fba3 2302 	umull	r2, r3, r3, r2
 800840e:	095b      	lsrs	r3, r3, #5
 8008410:	011c      	lsls	r4, r3, #4
 8008412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008416:	2200      	movs	r2, #0
 8008418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800841c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008424:	4642      	mov	r2, r8
 8008426:	464b      	mov	r3, r9
 8008428:	1891      	adds	r1, r2, r2
 800842a:	61b9      	str	r1, [r7, #24]
 800842c:	415b      	adcs	r3, r3
 800842e:	61fb      	str	r3, [r7, #28]
 8008430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008434:	4641      	mov	r1, r8
 8008436:	1851      	adds	r1, r2, r1
 8008438:	6139      	str	r1, [r7, #16]
 800843a:	4649      	mov	r1, r9
 800843c:	414b      	adcs	r3, r1
 800843e:	617b      	str	r3, [r7, #20]
 8008440:	f04f 0200 	mov.w	r2, #0
 8008444:	f04f 0300 	mov.w	r3, #0
 8008448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800844c:	4659      	mov	r1, fp
 800844e:	00cb      	lsls	r3, r1, #3
 8008450:	4651      	mov	r1, sl
 8008452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008456:	4651      	mov	r1, sl
 8008458:	00ca      	lsls	r2, r1, #3
 800845a:	4610      	mov	r0, r2
 800845c:	4619      	mov	r1, r3
 800845e:	4603      	mov	r3, r0
 8008460:	4642      	mov	r2, r8
 8008462:	189b      	adds	r3, r3, r2
 8008464:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008468:	464b      	mov	r3, r9
 800846a:	460a      	mov	r2, r1
 800846c:	eb42 0303 	adc.w	r3, r2, r3
 8008470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	67bb      	str	r3, [r7, #120]	; 0x78
 800847e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008480:	f04f 0200 	mov.w	r2, #0
 8008484:	f04f 0300 	mov.w	r3, #0
 8008488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800848c:	4649      	mov	r1, r9
 800848e:	008b      	lsls	r3, r1, #2
 8008490:	4641      	mov	r1, r8
 8008492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008496:	4641      	mov	r1, r8
 8008498:	008a      	lsls	r2, r1, #2
 800849a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800849e:	f7f8 fa45 	bl	800092c <__aeabi_uldivmod>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	4b39      	ldr	r3, [pc, #228]	; (800858c <UART_SetConfig+0x4e4>)
 80084a8:	fba3 1302 	umull	r1, r3, r3, r2
 80084ac:	095b      	lsrs	r3, r3, #5
 80084ae:	2164      	movs	r1, #100	; 0x64
 80084b0:	fb01 f303 	mul.w	r3, r1, r3
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	3332      	adds	r3, #50	; 0x32
 80084ba:	4a34      	ldr	r2, [pc, #208]	; (800858c <UART_SetConfig+0x4e4>)
 80084bc:	fba2 2303 	umull	r2, r3, r2, r3
 80084c0:	095b      	lsrs	r3, r3, #5
 80084c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084c6:	441c      	add	r4, r3
 80084c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084cc:	2200      	movs	r2, #0
 80084ce:	673b      	str	r3, [r7, #112]	; 0x70
 80084d0:	677a      	str	r2, [r7, #116]	; 0x74
 80084d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084d6:	4642      	mov	r2, r8
 80084d8:	464b      	mov	r3, r9
 80084da:	1891      	adds	r1, r2, r2
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	415b      	adcs	r3, r3
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084e6:	4641      	mov	r1, r8
 80084e8:	1851      	adds	r1, r2, r1
 80084ea:	6039      	str	r1, [r7, #0]
 80084ec:	4649      	mov	r1, r9
 80084ee:	414b      	adcs	r3, r1
 80084f0:	607b      	str	r3, [r7, #4]
 80084f2:	f04f 0200 	mov.w	r2, #0
 80084f6:	f04f 0300 	mov.w	r3, #0
 80084fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80084fe:	4659      	mov	r1, fp
 8008500:	00cb      	lsls	r3, r1, #3
 8008502:	4651      	mov	r1, sl
 8008504:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008508:	4651      	mov	r1, sl
 800850a:	00ca      	lsls	r2, r1, #3
 800850c:	4610      	mov	r0, r2
 800850e:	4619      	mov	r1, r3
 8008510:	4603      	mov	r3, r0
 8008512:	4642      	mov	r2, r8
 8008514:	189b      	adds	r3, r3, r2
 8008516:	66bb      	str	r3, [r7, #104]	; 0x68
 8008518:	464b      	mov	r3, r9
 800851a:	460a      	mov	r2, r1
 800851c:	eb42 0303 	adc.w	r3, r2, r3
 8008520:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	663b      	str	r3, [r7, #96]	; 0x60
 800852c:	667a      	str	r2, [r7, #100]	; 0x64
 800852e:	f04f 0200 	mov.w	r2, #0
 8008532:	f04f 0300 	mov.w	r3, #0
 8008536:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800853a:	4649      	mov	r1, r9
 800853c:	008b      	lsls	r3, r1, #2
 800853e:	4641      	mov	r1, r8
 8008540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008544:	4641      	mov	r1, r8
 8008546:	008a      	lsls	r2, r1, #2
 8008548:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800854c:	f7f8 f9ee 	bl	800092c <__aeabi_uldivmod>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	4b0d      	ldr	r3, [pc, #52]	; (800858c <UART_SetConfig+0x4e4>)
 8008556:	fba3 1302 	umull	r1, r3, r3, r2
 800855a:	095b      	lsrs	r3, r3, #5
 800855c:	2164      	movs	r1, #100	; 0x64
 800855e:	fb01 f303 	mul.w	r3, r1, r3
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	011b      	lsls	r3, r3, #4
 8008566:	3332      	adds	r3, #50	; 0x32
 8008568:	4a08      	ldr	r2, [pc, #32]	; (800858c <UART_SetConfig+0x4e4>)
 800856a:	fba2 2303 	umull	r2, r3, r2, r3
 800856e:	095b      	lsrs	r3, r3, #5
 8008570:	f003 020f 	and.w	r2, r3, #15
 8008574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4422      	add	r2, r4
 800857c:	609a      	str	r2, [r3, #8]
}
 800857e:	bf00      	nop
 8008580:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008584:	46bd      	mov	sp, r7
 8008586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800858a:	bf00      	nop
 800858c:	51eb851f 	.word	0x51eb851f

08008590 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 800859a:	2300      	movs	r3, #0
 800859c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b10      	cmp	r3, #16
 80085a4:	d103      	bne.n	80085ae <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	e002      	b.n	80085b4 <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4b16      	ldr	r3, [pc, #88]	; (8008610 <FSMC_NAND_Init+0x80>)
 80085b8:	4013      	ands	r3, r2
 80085ba:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 80085c4:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 80085ca:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 80085d0:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 80085d8:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 80085e0:	431a      	orrs	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	f043 0308 	orr.w	r3, r3, #8
 80085ea:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b10      	cmp	r3, #16
 80085f2:	d103      	bne.n	80085fc <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	e002      	b.n	8008602 <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	fff00181 	.word	0xfff00181

08008614 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8008614:	b480      	push	{r7}
 8008616:	b087      	sub	sp, #28
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8008620:	2300      	movs	r3, #0
 8008622:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b10      	cmp	r3, #16
 8008628:	d103      	bne.n	8008632 <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	e002      	b.n	8008638 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008636:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8008638:	2300      	movs	r3, #0
 800863a:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8008646:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 800864e:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8008656:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	4313      	orrs	r3, r2
 800865c:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b10      	cmp	r3, #16
 8008662:	d103      	bne.n	800866c <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	609a      	str	r2, [r3, #8]
 800866a:	e002      	b.n	8008672 <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	371c      	adds	r7, #28
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 800868c:	2300      	movs	r3, #0
 800868e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b10      	cmp	r3, #16
 8008694:	d103      	bne.n	800869e <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	617b      	str	r3, [r7, #20]
 800869c:	e002      	b.n	80086a4 <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a2:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 80086a4:	2300      	movs	r3, #0
 80086a6:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80086b2:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 80086ba:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 80086c2:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b10      	cmp	r3, #16
 80086ce:	d103      	bne.n	80086d8 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	60da      	str	r2, [r3, #12]
 80086d6:	e002      	b.n	80086de <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <__NVIC_SetPriority>:
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	4603      	mov	r3, r0
 80086f4:	6039      	str	r1, [r7, #0]
 80086f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	db0a      	blt.n	8008716 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	b2da      	uxtb	r2, r3
 8008704:	490c      	ldr	r1, [pc, #48]	; (8008738 <__NVIC_SetPriority+0x4c>)
 8008706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800870a:	0112      	lsls	r2, r2, #4
 800870c:	b2d2      	uxtb	r2, r2
 800870e:	440b      	add	r3, r1
 8008710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008714:	e00a      	b.n	800872c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	b2da      	uxtb	r2, r3
 800871a:	4908      	ldr	r1, [pc, #32]	; (800873c <__NVIC_SetPriority+0x50>)
 800871c:	79fb      	ldrb	r3, [r7, #7]
 800871e:	f003 030f 	and.w	r3, r3, #15
 8008722:	3b04      	subs	r3, #4
 8008724:	0112      	lsls	r2, r2, #4
 8008726:	b2d2      	uxtb	r2, r2
 8008728:	440b      	add	r3, r1
 800872a:	761a      	strb	r2, [r3, #24]
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	e000e100 	.word	0xe000e100
 800873c:	e000ed00 	.word	0xe000ed00

08008740 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008740:	b580      	push	{r7, lr}
 8008742:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008744:	4b05      	ldr	r3, [pc, #20]	; (800875c <SysTick_Handler+0x1c>)
 8008746:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008748:	f002 f856 	bl	800a7f8 <xTaskGetSchedulerState>
 800874c:	4603      	mov	r3, r0
 800874e:	2b01      	cmp	r3, #1
 8008750:	d001      	beq.n	8008756 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008752:	f002 fe41 	bl	800b3d8 <xPortSysTickHandler>
  }
}
 8008756:	bf00      	nop
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	e000e010 	.word	0xe000e010

08008760 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008760:	b580      	push	{r7, lr}
 8008762:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008764:	2100      	movs	r1, #0
 8008766:	f06f 0004 	mvn.w	r0, #4
 800876a:	f7ff ffbf 	bl	80086ec <__NVIC_SetPriority>
#endif
}
 800876e:	bf00      	nop
 8008770:	bd80      	pop	{r7, pc}
	...

08008774 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800877a:	f3ef 8305 	mrs	r3, IPSR
 800877e:	603b      	str	r3, [r7, #0]
  return(result);
 8008780:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008786:	f06f 0305 	mvn.w	r3, #5
 800878a:	607b      	str	r3, [r7, #4]
 800878c:	e00f      	b.n	80087ae <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800878e:	4b0a      	ldr	r3, [pc, #40]	; (80087b8 <osKernelInitialize+0x44>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d108      	bne.n	80087a8 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 8008796:	4809      	ldr	r0, [pc, #36]	; (80087bc <osKernelInitialize+0x48>)
 8008798:	f003 f81a 	bl	800b7d0 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 800879c:	4b06      	ldr	r3, [pc, #24]	; (80087b8 <osKernelInitialize+0x44>)
 800879e:	2201      	movs	r2, #1
 80087a0:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	607b      	str	r3, [r7, #4]
 80087a6:	e002      	b.n	80087ae <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 80087a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087ac:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087ae:	687b      	ldr	r3, [r7, #4]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	20000bdc 	.word	0x20000bdc
 80087bc:	20000084 	.word	0x20000084

080087c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087c6:	f3ef 8305 	mrs	r3, IPSR
 80087ca:	603b      	str	r3, [r7, #0]
  return(result);
 80087cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <osKernelStart+0x1a>
    stat = osErrorISR;
 80087d2:	f06f 0305 	mvn.w	r3, #5
 80087d6:	607b      	str	r3, [r7, #4]
 80087d8:	e010      	b.n	80087fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80087da:	4b0b      	ldr	r3, [pc, #44]	; (8008808 <osKernelStart+0x48>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d109      	bne.n	80087f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80087e2:	f7ff ffbd 	bl	8008760 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80087e6:	4b08      	ldr	r3, [pc, #32]	; (8008808 <osKernelStart+0x48>)
 80087e8:	2202      	movs	r2, #2
 80087ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80087ec:	f001 fba8 	bl	8009f40 <vTaskStartScheduler>
      stat = osOK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	607b      	str	r3, [r7, #4]
 80087f4:	e002      	b.n	80087fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80087f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087fc:	687b      	ldr	r3, [r7, #4]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20000bdc 	.word	0x20000bdc

0800880c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800880c:	b580      	push	{r7, lr}
 800880e:	b08e      	sub	sp, #56	; 0x38
 8008810:	af04      	add	r7, sp, #16
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008818:	2300      	movs	r3, #0
 800881a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800881c:	f3ef 8305 	mrs	r3, IPSR
 8008820:	617b      	str	r3, [r7, #20]
  return(result);
 8008822:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008824:	2b00      	cmp	r3, #0
 8008826:	d17e      	bne.n	8008926 <osThreadNew+0x11a>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d07b      	beq.n	8008926 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800882e:	2380      	movs	r3, #128	; 0x80
 8008830:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008832:	2318      	movs	r3, #24
 8008834:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008836:	2300      	movs	r3, #0
 8008838:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800883a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800883e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d045      	beq.n	80088d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <osThreadNew+0x48>
        name = attr->name;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d008      	beq.n	800887a <osThreadNew+0x6e>
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	2b38      	cmp	r3, #56	; 0x38
 800886c:	d805      	bhi.n	800887a <osThreadNew+0x6e>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <osThreadNew+0x72>
        return (NULL);
 800887a:	2300      	movs	r3, #0
 800887c:	e054      	b.n	8008928 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d003      	beq.n	800888e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	089b      	lsrs	r3, r3, #2
 800888c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00e      	beq.n	80088b4 <osThreadNew+0xa8>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	2bbb      	cmp	r3, #187	; 0xbb
 800889c:	d90a      	bls.n	80088b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d006      	beq.n	80088b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <osThreadNew+0xa8>
        mem = 1;
 80088ae:	2301      	movs	r3, #1
 80088b0:	61bb      	str	r3, [r7, #24]
 80088b2:	e010      	b.n	80088d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10c      	bne.n	80088d6 <osThreadNew+0xca>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d108      	bne.n	80088d6 <osThreadNew+0xca>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d104      	bne.n	80088d6 <osThreadNew+0xca>
          mem = 0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	61bb      	str	r3, [r7, #24]
 80088d0:	e001      	b.n	80088d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d110      	bne.n	80088fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088e4:	9202      	str	r2, [sp, #8]
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	6a3a      	ldr	r2, [r7, #32]
 80088f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f001 f938 	bl	8009b68 <xTaskCreateStatic>
 80088f8:	4603      	mov	r3, r0
 80088fa:	613b      	str	r3, [r7, #16]
 80088fc:	e013      	b.n	8008926 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d110      	bne.n	8008926 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	b29a      	uxth	r2, r3
 8008908:	f107 0310 	add.w	r3, r7, #16
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f001 f983 	bl	8009c22 <xTaskCreate>
 800891c:	4603      	mov	r3, r0
 800891e:	2b01      	cmp	r3, #1
 8008920:	d001      	beq.n	8008926 <osThreadNew+0x11a>
            hTask = NULL;
 8008922:	2300      	movs	r3, #0
 8008924:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008926:	693b      	ldr	r3, [r7, #16]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3728      	adds	r7, #40	; 0x28
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008938:	f3ef 8305 	mrs	r3, IPSR
 800893c:	60bb      	str	r3, [r7, #8]
  return(result);
 800893e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <osDelay+0x1c>
    stat = osErrorISR;
 8008944:	f06f 0305 	mvn.w	r3, #5
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	e007      	b.n	800895c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800894c:	2300      	movs	r3, #0
 800894e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 fabe 	bl	8009ed8 <vTaskDelay>
    }
  }

  return (stat);
 800895c:	68fb      	ldr	r3, [r7, #12]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008966:	b580      	push	{r7, lr}
 8008968:	b08a      	sub	sp, #40	; 0x28
 800896a:	af02      	add	r7, sp, #8
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008972:	2300      	movs	r3, #0
 8008974:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008976:	f3ef 8305 	mrs	r3, IPSR
 800897a:	613b      	str	r3, [r7, #16]
  return(result);
 800897c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800897e:	2b00      	cmp	r3, #0
 8008980:	d175      	bne.n	8008a6e <osSemaphoreNew+0x108>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d072      	beq.n	8008a6e <osSemaphoreNew+0x108>
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	429a      	cmp	r2, r3
 800898e:	d86e      	bhi.n	8008a6e <osSemaphoreNew+0x108>
    mem = -1;
 8008990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008994:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d015      	beq.n	80089c8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d006      	beq.n	80089b2 <osSemaphoreNew+0x4c>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	2b4f      	cmp	r3, #79	; 0x4f
 80089aa:	d902      	bls.n	80089b2 <osSemaphoreNew+0x4c>
        mem = 1;
 80089ac:	2301      	movs	r3, #1
 80089ae:	61bb      	str	r3, [r7, #24]
 80089b0:	e00c      	b.n	80089cc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d108      	bne.n	80089cc <osSemaphoreNew+0x66>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d104      	bne.n	80089cc <osSemaphoreNew+0x66>
          mem = 0;
 80089c2:	2300      	movs	r3, #0
 80089c4:	61bb      	str	r3, [r7, #24]
 80089c6:	e001      	b.n	80089cc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80089c8:	2300      	movs	r3, #0
 80089ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089d2:	d04c      	beq.n	8008a6e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d128      	bne.n	8008a2c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d10a      	bne.n	80089f6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	2203      	movs	r2, #3
 80089e6:	9200      	str	r2, [sp, #0]
 80089e8:	2200      	movs	r2, #0
 80089ea:	2100      	movs	r1, #0
 80089ec:	2001      	movs	r0, #1
 80089ee:	f000 fac5 	bl	8008f7c <xQueueGenericCreateStatic>
 80089f2:	61f8      	str	r0, [r7, #28]
 80089f4:	e005      	b.n	8008a02 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80089f6:	2203      	movs	r2, #3
 80089f8:	2100      	movs	r1, #0
 80089fa:	2001      	movs	r0, #1
 80089fc:	f000 fb36 	bl	800906c <xQueueGenericCreate>
 8008a00:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d022      	beq.n	8008a4e <osSemaphoreNew+0xe8>
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d01f      	beq.n	8008a4e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2200      	movs	r2, #0
 8008a12:	2100      	movs	r1, #0
 8008a14:	69f8      	ldr	r0, [r7, #28]
 8008a16:	f000 fbf1 	bl	80091fc <xQueueGenericSend>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d016      	beq.n	8008a4e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008a20:	69f8      	ldr	r0, [r7, #28]
 8008a22:	f000 fee5 	bl	80097f0 <vQueueDelete>
            hSemaphore = NULL;
 8008a26:	2300      	movs	r3, #0
 8008a28:	61fb      	str	r3, [r7, #28]
 8008a2a:	e010      	b.n	8008a4e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d108      	bne.n	8008a44 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	461a      	mov	r2, r3
 8008a38:	68b9      	ldr	r1, [r7, #8]
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f000 fb73 	bl	8009126 <xQueueCreateCountingSemaphoreStatic>
 8008a40:	61f8      	str	r0, [r7, #28]
 8008a42:	e004      	b.n	8008a4e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008a44:	68b9      	ldr	r1, [r7, #8]
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 fba4 	bl	8009194 <xQueueCreateCountingSemaphore>
 8008a4c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00c      	beq.n	8008a6e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	e001      	b.n	8008a66 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008a66:	6979      	ldr	r1, [r7, #20]
 8008a68:	69f8      	ldr	r0, [r7, #28]
 8008a6a:	f000 fff5 	bl	8009a58 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008a6e:	69fb      	ldr	r3, [r7, #28]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3720      	adds	r7, #32
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b08a      	sub	sp, #40	; 0x28
 8008a7c:	af02      	add	r7, sp, #8
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a88:	f3ef 8305 	mrs	r3, IPSR
 8008a8c:	613b      	str	r3, [r7, #16]
  return(result);
 8008a8e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d15f      	bne.n	8008b54 <osMessageQueueNew+0xdc>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d05c      	beq.n	8008b54 <osMessageQueueNew+0xdc>
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d059      	beq.n	8008b54 <osMessageQueueNew+0xdc>
    mem = -1;
 8008aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008aa4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d029      	beq.n	8008b00 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d012      	beq.n	8008ada <osMessageQueueNew+0x62>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	2b4f      	cmp	r3, #79	; 0x4f
 8008aba:	d90e      	bls.n	8008ada <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00a      	beq.n	8008ada <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	695a      	ldr	r2, [r3, #20]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	68b9      	ldr	r1, [r7, #8]
 8008acc:	fb01 f303 	mul.w	r3, r1, r3
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d302      	bcc.n	8008ada <osMessageQueueNew+0x62>
        mem = 1;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	e014      	b.n	8008b04 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d110      	bne.n	8008b04 <osMessageQueueNew+0x8c>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10c      	bne.n	8008b04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d108      	bne.n	8008b04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d104      	bne.n	8008b04 <osMessageQueueNew+0x8c>
          mem = 0;
 8008afa:	2300      	movs	r3, #0
 8008afc:	61bb      	str	r3, [r7, #24]
 8008afe:	e001      	b.n	8008b04 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d10b      	bne.n	8008b22 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	691a      	ldr	r2, [r3, #16]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	2100      	movs	r1, #0
 8008b14:	9100      	str	r1, [sp, #0]
 8008b16:	68b9      	ldr	r1, [r7, #8]
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 fa2f 	bl	8008f7c <xQueueGenericCreateStatic>
 8008b1e:	61f8      	str	r0, [r7, #28]
 8008b20:	e008      	b.n	8008b34 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d105      	bne.n	8008b34 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008b28:	2200      	movs	r2, #0
 8008b2a:	68b9      	ldr	r1, [r7, #8]
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f000 fa9d 	bl	800906c <xQueueGenericCreate>
 8008b32:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00c      	beq.n	8008b54 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d003      	beq.n	8008b48 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	e001      	b.n	8008b4c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008b4c:	6979      	ldr	r1, [r7, #20]
 8008b4e:	69f8      	ldr	r0, [r7, #28]
 8008b50:	f000 ff82 	bl	8009a58 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008b54:	69fb      	ldr	r3, [r7, #28]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3720      	adds	r7, #32
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b088      	sub	sp, #32
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	603b      	str	r3, [r7, #0]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b78:	f3ef 8305 	mrs	r3, IPSR
 8008b7c:	617b      	str	r3, [r7, #20]
  return(result);
 8008b7e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d028      	beq.n	8008bd6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d005      	beq.n	8008b96 <osMessageQueuePut+0x36>
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <osMessageQueuePut+0x36>
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008b96:	f06f 0303 	mvn.w	r3, #3
 8008b9a:	61fb      	str	r3, [r7, #28]
 8008b9c:	e038      	b.n	8008c10 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008ba2:	f107 0210 	add.w	r2, r7, #16
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	68b9      	ldr	r1, [r7, #8]
 8008baa:	69b8      	ldr	r0, [r7, #24]
 8008bac:	f000 fc24 	bl	80093f8 <xQueueGenericSendFromISR>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d003      	beq.n	8008bbe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008bb6:	f06f 0302 	mvn.w	r3, #2
 8008bba:	61fb      	str	r3, [r7, #28]
 8008bbc:	e028      	b.n	8008c10 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d025      	beq.n	8008c10 <osMessageQueuePut+0xb0>
 8008bc4:	4b15      	ldr	r3, [pc, #84]	; (8008c1c <osMessageQueuePut+0xbc>)
 8008bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	e01c      	b.n	8008c10 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <osMessageQueuePut+0x82>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d103      	bne.n	8008bea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008be2:	f06f 0303 	mvn.w	r3, #3
 8008be6:	61fb      	str	r3, [r7, #28]
 8008be8:	e012      	b.n	8008c10 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008bea:	2300      	movs	r3, #0
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	68b9      	ldr	r1, [r7, #8]
 8008bf0:	69b8      	ldr	r0, [r7, #24]
 8008bf2:	f000 fb03 	bl	80091fc <xQueueGenericSend>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d009      	beq.n	8008c10 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008c02:	f06f 0301 	mvn.w	r3, #1
 8008c06:	61fb      	str	r3, [r7, #28]
 8008c08:	e002      	b.n	8008c10 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008c0a:	f06f 0302 	mvn.w	r3, #2
 8008c0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008c10:	69fb      	ldr	r3, [r7, #28]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3720      	adds	r7, #32
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	e000ed04 	.word	0xe000ed04

08008c20 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b088      	sub	sp, #32
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
 8008c2c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c36:	f3ef 8305 	mrs	r3, IPSR
 8008c3a:	617b      	str	r3, [r7, #20]
  return(result);
 8008c3c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d028      	beq.n	8008c94 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d005      	beq.n	8008c54 <osMessageQueueGet+0x34>
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d002      	beq.n	8008c54 <osMessageQueueGet+0x34>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008c54:	f06f 0303 	mvn.w	r3, #3
 8008c58:	61fb      	str	r3, [r7, #28]
 8008c5a:	e037      	b.n	8008ccc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008c60:	f107 0310 	add.w	r3, r7, #16
 8008c64:	461a      	mov	r2, r3
 8008c66:	68b9      	ldr	r1, [r7, #8]
 8008c68:	69b8      	ldr	r0, [r7, #24]
 8008c6a:	f000 fd41 	bl	80096f0 <xQueueReceiveFromISR>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d003      	beq.n	8008c7c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008c74:	f06f 0302 	mvn.w	r3, #2
 8008c78:	61fb      	str	r3, [r7, #28]
 8008c7a:	e027      	b.n	8008ccc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d024      	beq.n	8008ccc <osMessageQueueGet+0xac>
 8008c82:	4b15      	ldr	r3, [pc, #84]	; (8008cd8 <osMessageQueueGet+0xb8>)
 8008c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c88:	601a      	str	r2, [r3, #0]
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	e01b      	b.n	8008ccc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <osMessageQueueGet+0x80>
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d103      	bne.n	8008ca8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008ca0:	f06f 0303 	mvn.w	r3, #3
 8008ca4:	61fb      	str	r3, [r7, #28]
 8008ca6:	e011      	b.n	8008ccc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	68b9      	ldr	r1, [r7, #8]
 8008cac:	69b8      	ldr	r0, [r7, #24]
 8008cae:	f000 fc3f 	bl	8009530 <xQueueReceive>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d009      	beq.n	8008ccc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d003      	beq.n	8008cc6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008cbe:	f06f 0301 	mvn.w	r3, #1
 8008cc2:	61fb      	str	r3, [r7, #28]
 8008cc4:	e002      	b.n	8008ccc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008cc6:	f06f 0302 	mvn.w	r3, #2
 8008cca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008ccc:	69fb      	ldr	r3, [r7, #28]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3720      	adds	r7, #32
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	e000ed04 	.word	0xe000ed04

08008cdc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	4a07      	ldr	r2, [pc, #28]	; (8008d08 <vApplicationGetIdleTaskMemory+0x2c>)
 8008cec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	4a06      	ldr	r2, [pc, #24]	; (8008d0c <vApplicationGetIdleTaskMemory+0x30>)
 8008cf2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2280      	movs	r2, #128	; 0x80
 8008cf8:	601a      	str	r2, [r3, #0]
}
 8008cfa:	bf00      	nop
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	200053e0 	.word	0x200053e0
 8008d0c:	2000549c 	.word	0x2000549c

08008d10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4a07      	ldr	r2, [pc, #28]	; (8008d3c <vApplicationGetTimerTaskMemory+0x2c>)
 8008d20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	4a06      	ldr	r2, [pc, #24]	; (8008d40 <vApplicationGetTimerTaskMemory+0x30>)
 8008d26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d2e:	601a      	str	r2, [r3, #0]
}
 8008d30:	bf00      	nop
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	2000569c 	.word	0x2000569c
 8008d40:	20005758 	.word	0x20005758

08008d44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f103 0208 	add.w	r2, r3, #8
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f103 0208 	add.w	r2, r3, #8
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f103 0208 	add.w	r2, r3, #8
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b085      	sub	sp, #20
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	689a      	ldr	r2, [r3, #8]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	1c5a      	adds	r2, r3, #1
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	601a      	str	r2, [r3, #0]
}
 8008dda:	bf00      	nop
 8008ddc:	3714      	adds	r7, #20
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008de6:	b480      	push	{r7}
 8008de8:	b085      	sub	sp, #20
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dfc:	d103      	bne.n	8008e06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	60fb      	str	r3, [r7, #12]
 8008e04:	e00c      	b.n	8008e20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	3308      	adds	r3, #8
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	e002      	b.n	8008e14 <vListInsert+0x2e>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d2f6      	bcs.n	8008e0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	601a      	str	r2, [r3, #0]
}
 8008e4c:	bf00      	nop
 8008e4e:	3714      	adds	r7, #20
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	6892      	ldr	r2, [r2, #8]
 8008e6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	6852      	ldr	r2, [r2, #4]
 8008e78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d103      	bne.n	8008e8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	689a      	ldr	r2, [r3, #8]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	1e5a      	subs	r2, r3, #1
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008ed6:	f002 f9ed 	bl	800b2b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee2:	68f9      	ldr	r1, [r7, #12]
 8008ee4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ee6:	fb01 f303 	mul.w	r3, r1, r3
 8008eea:	441a      	add	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f06:	3b01      	subs	r3, #1
 8008f08:	68f9      	ldr	r1, [r7, #12]
 8008f0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f0c:	fb01 f303 	mul.w	r3, r1, r3
 8008f10:	441a      	add	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	22ff      	movs	r2, #255	; 0xff
 8008f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	22ff      	movs	r2, #255	; 0xff
 8008f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d114      	bne.n	8008f56 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d01a      	beq.n	8008f6a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	3310      	adds	r3, #16
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f001 fa9b 	bl	800a474 <xTaskRemoveFromEventList>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d012      	beq.n	8008f6a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008f44:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <xQueueGenericReset+0xcc>)
 8008f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f4a:	601a      	str	r2, [r3, #0]
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	f3bf 8f6f 	isb	sy
 8008f54:	e009      	b.n	8008f6a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3310      	adds	r3, #16
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7ff fef2 	bl	8008d44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	3324      	adds	r3, #36	; 0x24
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7ff feed 	bl	8008d44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008f6a:	f002 f9d3 	bl	800b314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008f6e:	2301      	movs	r3, #1
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	e000ed04 	.word	0xe000ed04

08008f7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08e      	sub	sp, #56	; 0x38
 8008f80:	af02      	add	r7, sp, #8
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10a      	bne.n	8008fa6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fa2:	bf00      	nop
 8008fa4:	e7fe      	b.n	8008fa4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10a      	bne.n	8008fc2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fbe:	bf00      	nop
 8008fc0:	e7fe      	b.n	8008fc0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <xQueueGenericCreateStatic+0x52>
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <xQueueGenericCreateStatic+0x56>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e000      	b.n	8008fd4 <xQueueGenericCreateStatic+0x58>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10a      	bne.n	8008fee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fdc:	f383 8811 	msr	BASEPRI, r3
 8008fe0:	f3bf 8f6f 	isb	sy
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	623b      	str	r3, [r7, #32]
}
 8008fea:	bf00      	nop
 8008fec:	e7fe      	b.n	8008fec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d102      	bne.n	8008ffa <xQueueGenericCreateStatic+0x7e>
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <xQueueGenericCreateStatic+0x82>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e000      	b.n	8009000 <xQueueGenericCreateStatic+0x84>
 8008ffe:	2300      	movs	r3, #0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	61fb      	str	r3, [r7, #28]
}
 8009016:	bf00      	nop
 8009018:	e7fe      	b.n	8009018 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800901a:	2350      	movs	r3, #80	; 0x50
 800901c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	2b50      	cmp	r3, #80	; 0x50
 8009022:	d00a      	beq.n	800903a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	61bb      	str	r3, [r7, #24]
}
 8009036:	bf00      	nop
 8009038:	e7fe      	b.n	8009038 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800903a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00d      	beq.n	8009062 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	2201      	movs	r2, #1
 800904a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800904e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	4613      	mov	r3, r2
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	68b9      	ldr	r1, [r7, #8]
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f000 f83f 	bl	80090e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009064:	4618      	mov	r0, r3
 8009066:	3730      	adds	r7, #48	; 0x30
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800906c:	b580      	push	{r7, lr}
 800906e:	b08a      	sub	sp, #40	; 0x28
 8009070:	af02      	add	r7, sp, #8
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	4613      	mov	r3, r2
 8009078:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10a      	bne.n	8009096 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	613b      	str	r3, [r7, #16]
}
 8009092:	bf00      	nop
 8009094:	e7fe      	b.n	8009094 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	fb02 f303 	mul.w	r3, r2, r3
 800909e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	3350      	adds	r3, #80	; 0x50
 80090a4:	4618      	mov	r0, r3
 80090a6:	f002 fa27 	bl	800b4f8 <pvPortMalloc>
 80090aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d011      	beq.n	80090d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	3350      	adds	r3, #80	; 0x50
 80090ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090c4:	79fa      	ldrb	r2, [r7, #7]
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	4613      	mov	r3, r2
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f000 f805 	bl	80090e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80090d6:	69bb      	ldr	r3, [r7, #24]
	}
 80090d8:	4618      	mov	r0, r3
 80090da:	3720      	adds	r7, #32
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
 80090ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d103      	bne.n	80090fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	69ba      	ldr	r2, [r7, #24]
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	e002      	b.n	8009102 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800910e:	2101      	movs	r1, #1
 8009110:	69b8      	ldr	r0, [r7, #24]
 8009112:	f7ff fecb 	bl	8008eac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	78fa      	ldrb	r2, [r7, #3]
 800911a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800911e:	bf00      	nop
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009126:	b580      	push	{r7, lr}
 8009128:	b08a      	sub	sp, #40	; 0x28
 800912a:	af02      	add	r7, sp, #8
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10a      	bne.n	800914e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	61bb      	str	r3, [r7, #24]
}
 800914a:	bf00      	nop
 800914c:	e7fe      	b.n	800914c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	429a      	cmp	r2, r3
 8009154:	d90a      	bls.n	800916c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915a:	f383 8811 	msr	BASEPRI, r3
 800915e:	f3bf 8f6f 	isb	sy
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	617b      	str	r3, [r7, #20]
}
 8009168:	bf00      	nop
 800916a:	e7fe      	b.n	800916a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800916c:	2302      	movs	r3, #2
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	2100      	movs	r1, #0
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f7ff ff00 	bl	8008f7c <xQueueGenericCreateStatic>
 800917c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d002      	beq.n	800918a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800918a:	69fb      	ldr	r3, [r7, #28]
	}
 800918c:	4618      	mov	r0, r3
 800918e:	3720      	adds	r7, #32
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10a      	bne.n	80091ba <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	613b      	str	r3, [r7, #16]
}
 80091b6:	bf00      	nop
 80091b8:	e7fe      	b.n	80091b8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d90a      	bls.n	80091d8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	60fb      	str	r3, [r7, #12]
}
 80091d4:	bf00      	nop
 80091d6:	e7fe      	b.n	80091d6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80091d8:	2202      	movs	r2, #2
 80091da:	2100      	movs	r1, #0
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7ff ff45 	bl	800906c <xQueueGenericCreate>
 80091e2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d002      	beq.n	80091f0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80091f0:	697b      	ldr	r3, [r7, #20]
	}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3718      	adds	r7, #24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08e      	sub	sp, #56	; 0x38
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
 8009208:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800920a:	2300      	movs	r3, #0
 800920c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10a      	bne.n	800922e <xQueueGenericSend+0x32>
	__asm volatile
 8009218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800922a:	bf00      	nop
 800922c:	e7fe      	b.n	800922c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d103      	bne.n	800923c <xQueueGenericSend+0x40>
 8009234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <xQueueGenericSend+0x44>
 800923c:	2301      	movs	r3, #1
 800923e:	e000      	b.n	8009242 <xQueueGenericSend+0x46>
 8009240:	2300      	movs	r3, #0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10a      	bne.n	800925c <xQueueGenericSend+0x60>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009258:	bf00      	nop
 800925a:	e7fe      	b.n	800925a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	2b02      	cmp	r3, #2
 8009260:	d103      	bne.n	800926a <xQueueGenericSend+0x6e>
 8009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <xQueueGenericSend+0x72>
 800926a:	2301      	movs	r3, #1
 800926c:	e000      	b.n	8009270 <xQueueGenericSend+0x74>
 800926e:	2300      	movs	r3, #0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10a      	bne.n	800928a <xQueueGenericSend+0x8e>
	__asm volatile
 8009274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	623b      	str	r3, [r7, #32]
}
 8009286:	bf00      	nop
 8009288:	e7fe      	b.n	8009288 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800928a:	f001 fab5 	bl	800a7f8 <xTaskGetSchedulerState>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d102      	bne.n	800929a <xQueueGenericSend+0x9e>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <xQueueGenericSend+0xa2>
 800929a:	2301      	movs	r3, #1
 800929c:	e000      	b.n	80092a0 <xQueueGenericSend+0xa4>
 800929e:	2300      	movs	r3, #0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10a      	bne.n	80092ba <xQueueGenericSend+0xbe>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	61fb      	str	r3, [r7, #28]
}
 80092b6:	bf00      	nop
 80092b8:	e7fe      	b.n	80092b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092ba:	f001 fffb 	bl	800b2b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d302      	bcc.n	80092d0 <xQueueGenericSend+0xd4>
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d129      	bne.n	8009324 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	68b9      	ldr	r1, [r7, #8]
 80092d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092d6:	f000 faae 	bl	8009836 <prvCopyDataToQueue>
 80092da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d010      	beq.n	8009306 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	3324      	adds	r3, #36	; 0x24
 80092e8:	4618      	mov	r0, r3
 80092ea:	f001 f8c3 	bl	800a474 <xTaskRemoveFromEventList>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d013      	beq.n	800931c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80092f4:	4b3f      	ldr	r3, [pc, #252]	; (80093f4 <xQueueGenericSend+0x1f8>)
 80092f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	f3bf 8f6f 	isb	sy
 8009304:	e00a      	b.n	800931c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009308:	2b00      	cmp	r3, #0
 800930a:	d007      	beq.n	800931c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800930c:	4b39      	ldr	r3, [pc, #228]	; (80093f4 <xQueueGenericSend+0x1f8>)
 800930e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800931c:	f001 fffa 	bl	800b314 <vPortExitCritical>
				return pdPASS;
 8009320:	2301      	movs	r3, #1
 8009322:	e063      	b.n	80093ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d103      	bne.n	8009332 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800932a:	f001 fff3 	bl	800b314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800932e:	2300      	movs	r3, #0
 8009330:	e05c      	b.n	80093ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009334:	2b00      	cmp	r3, #0
 8009336:	d106      	bne.n	8009346 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009338:	f107 0314 	add.w	r3, r7, #20
 800933c:	4618      	mov	r0, r3
 800933e:	f001 f8fd 	bl	800a53c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009342:	2301      	movs	r3, #1
 8009344:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009346:	f001 ffe5 	bl	800b314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800934a:	f000 fe69 	bl	800a020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800934e:	f001 ffb1 	bl	800b2b4 <vPortEnterCritical>
 8009352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009354:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009358:	b25b      	sxtb	r3, r3
 800935a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800935e:	d103      	bne.n	8009368 <xQueueGenericSend+0x16c>
 8009360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009362:	2200      	movs	r2, #0
 8009364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800936e:	b25b      	sxtb	r3, r3
 8009370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009374:	d103      	bne.n	800937e <xQueueGenericSend+0x182>
 8009376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009378:	2200      	movs	r2, #0
 800937a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800937e:	f001 ffc9 	bl	800b314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009382:	1d3a      	adds	r2, r7, #4
 8009384:	f107 0314 	add.w	r3, r7, #20
 8009388:	4611      	mov	r1, r2
 800938a:	4618      	mov	r0, r3
 800938c:	f001 f8ec 	bl	800a568 <xTaskCheckForTimeOut>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d124      	bne.n	80093e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009396:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009398:	f000 fb45 	bl	8009a26 <prvIsQueueFull>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d018      	beq.n	80093d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	3310      	adds	r3, #16
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	4611      	mov	r1, r2
 80093aa:	4618      	mov	r0, r3
 80093ac:	f001 f812 	bl	800a3d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80093b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093b2:	f000 fad0 	bl	8009956 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80093b6:	f000 fe41 	bl	800a03c <xTaskResumeAll>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f47f af7c 	bne.w	80092ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80093c2:	4b0c      	ldr	r3, [pc, #48]	; (80093f4 <xQueueGenericSend+0x1f8>)
 80093c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	e772      	b.n	80092ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80093d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093d6:	f000 fabe 	bl	8009956 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093da:	f000 fe2f 	bl	800a03c <xTaskResumeAll>
 80093de:	e76c      	b.n	80092ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80093e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093e2:	f000 fab8 	bl	8009956 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093e6:	f000 fe29 	bl	800a03c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80093ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3738      	adds	r7, #56	; 0x38
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	e000ed04 	.word	0xe000ed04

080093f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b090      	sub	sp, #64	; 0x40
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
 8009404:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800940a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10a      	bne.n	8009426 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009422:	bf00      	nop
 8009424:	e7fe      	b.n	8009424 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d103      	bne.n	8009434 <xQueueGenericSendFromISR+0x3c>
 800942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009430:	2b00      	cmp	r3, #0
 8009432:	d101      	bne.n	8009438 <xQueueGenericSendFromISR+0x40>
 8009434:	2301      	movs	r3, #1
 8009436:	e000      	b.n	800943a <xQueueGenericSendFromISR+0x42>
 8009438:	2300      	movs	r3, #0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10a      	bne.n	8009454 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009450:	bf00      	nop
 8009452:	e7fe      	b.n	8009452 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	2b02      	cmp	r3, #2
 8009458:	d103      	bne.n	8009462 <xQueueGenericSendFromISR+0x6a>
 800945a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945e:	2b01      	cmp	r3, #1
 8009460:	d101      	bne.n	8009466 <xQueueGenericSendFromISR+0x6e>
 8009462:	2301      	movs	r3, #1
 8009464:	e000      	b.n	8009468 <xQueueGenericSendFromISR+0x70>
 8009466:	2300      	movs	r3, #0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10a      	bne.n	8009482 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	623b      	str	r3, [r7, #32]
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009482:	f001 fff9 	bl	800b478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009486:	f3ef 8211 	mrs	r2, BASEPRI
 800948a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	61fa      	str	r2, [r7, #28]
 800949c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800949e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d302      	bcc.n	80094b4 <xQueueGenericSendFromISR+0xbc>
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d12f      	bne.n	8009514 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	68b9      	ldr	r1, [r7, #8]
 80094c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094ca:	f000 f9b4 	bl	8009836 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80094d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094d6:	d112      	bne.n	80094fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d016      	beq.n	800950e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e2:	3324      	adds	r3, #36	; 0x24
 80094e4:	4618      	mov	r0, r3
 80094e6:	f000 ffc5 	bl	800a474 <xTaskRemoveFromEventList>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00e      	beq.n	800950e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00b      	beq.n	800950e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	601a      	str	r2, [r3, #0]
 80094fc:	e007      	b.n	800950e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80094fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009502:	3301      	adds	r3, #1
 8009504:	b2db      	uxtb	r3, r3
 8009506:	b25a      	sxtb	r2, r3
 8009508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800950e:	2301      	movs	r3, #1
 8009510:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009512:	e001      	b.n	8009518 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009514:	2300      	movs	r3, #0
 8009516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800951a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009522:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009526:	4618      	mov	r0, r3
 8009528:	3740      	adds	r7, #64	; 0x40
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b08c      	sub	sp, #48	; 0x30
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800953c:	2300      	movs	r3, #0
 800953e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10a      	bne.n	8009560 <xQueueReceive+0x30>
	__asm volatile
 800954a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954e:	f383 8811 	msr	BASEPRI, r3
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	623b      	str	r3, [r7, #32]
}
 800955c:	bf00      	nop
 800955e:	e7fe      	b.n	800955e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d103      	bne.n	800956e <xQueueReceive+0x3e>
 8009566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <xQueueReceive+0x42>
 800956e:	2301      	movs	r3, #1
 8009570:	e000      	b.n	8009574 <xQueueReceive+0x44>
 8009572:	2300      	movs	r3, #0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d10a      	bne.n	800958e <xQueueReceive+0x5e>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	61fb      	str	r3, [r7, #28]
}
 800958a:	bf00      	nop
 800958c:	e7fe      	b.n	800958c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800958e:	f001 f933 	bl	800a7f8 <xTaskGetSchedulerState>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d102      	bne.n	800959e <xQueueReceive+0x6e>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d101      	bne.n	80095a2 <xQueueReceive+0x72>
 800959e:	2301      	movs	r3, #1
 80095a0:	e000      	b.n	80095a4 <xQueueReceive+0x74>
 80095a2:	2300      	movs	r3, #0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10a      	bne.n	80095be <xQueueReceive+0x8e>
	__asm volatile
 80095a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ac:	f383 8811 	msr	BASEPRI, r3
 80095b0:	f3bf 8f6f 	isb	sy
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	61bb      	str	r3, [r7, #24]
}
 80095ba:	bf00      	nop
 80095bc:	e7fe      	b.n	80095bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095be:	f001 fe79 	bl	800b2b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d01f      	beq.n	800960e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80095ce:	68b9      	ldr	r1, [r7, #8]
 80095d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095d2:	f000 f99a 	bl	800990a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80095d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d8:	1e5a      	subs	r2, r3, #1
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00f      	beq.n	8009606 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e8:	3310      	adds	r3, #16
 80095ea:	4618      	mov	r0, r3
 80095ec:	f000 ff42 	bl	800a474 <xTaskRemoveFromEventList>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d007      	beq.n	8009606 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80095f6:	4b3d      	ldr	r3, [pc, #244]	; (80096ec <xQueueReceive+0x1bc>)
 80095f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009606:	f001 fe85 	bl	800b314 <vPortExitCritical>
				return pdPASS;
 800960a:	2301      	movs	r3, #1
 800960c:	e069      	b.n	80096e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d103      	bne.n	800961c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009614:	f001 fe7e 	bl	800b314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009618:	2300      	movs	r3, #0
 800961a:	e062      	b.n	80096e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800961c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961e:	2b00      	cmp	r3, #0
 8009620:	d106      	bne.n	8009630 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009622:	f107 0310 	add.w	r3, r7, #16
 8009626:	4618      	mov	r0, r3
 8009628:	f000 ff88 	bl	800a53c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800962c:	2301      	movs	r3, #1
 800962e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009630:	f001 fe70 	bl	800b314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009634:	f000 fcf4 	bl	800a020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009638:	f001 fe3c 	bl	800b2b4 <vPortEnterCritical>
 800963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009642:	b25b      	sxtb	r3, r3
 8009644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009648:	d103      	bne.n	8009652 <xQueueReceive+0x122>
 800964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964c:	2200      	movs	r2, #0
 800964e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009658:	b25b      	sxtb	r3, r3
 800965a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800965e:	d103      	bne.n	8009668 <xQueueReceive+0x138>
 8009660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009662:	2200      	movs	r2, #0
 8009664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009668:	f001 fe54 	bl	800b314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800966c:	1d3a      	adds	r2, r7, #4
 800966e:	f107 0310 	add.w	r3, r7, #16
 8009672:	4611      	mov	r1, r2
 8009674:	4618      	mov	r0, r3
 8009676:	f000 ff77 	bl	800a568 <xTaskCheckForTimeOut>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d123      	bne.n	80096c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009682:	f000 f9ba 	bl	80099fa <prvIsQueueEmpty>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d017      	beq.n	80096bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	3324      	adds	r3, #36	; 0x24
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	4611      	mov	r1, r2
 8009694:	4618      	mov	r0, r3
 8009696:	f000 fe9d 	bl	800a3d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800969a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800969c:	f000 f95b 	bl	8009956 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096a0:	f000 fccc 	bl	800a03c <xTaskResumeAll>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d189      	bne.n	80095be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80096aa:	4b10      	ldr	r3, [pc, #64]	; (80096ec <xQueueReceive+0x1bc>)
 80096ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	e780      	b.n	80095be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80096bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096be:	f000 f94a 	bl	8009956 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096c2:	f000 fcbb 	bl	800a03c <xTaskResumeAll>
 80096c6:	e77a      	b.n	80095be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80096c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ca:	f000 f944 	bl	8009956 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096ce:	f000 fcb5 	bl	800a03c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096d4:	f000 f991 	bl	80099fa <prvIsQueueEmpty>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f43f af6f 	beq.w	80095be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80096e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3730      	adds	r7, #48	; 0x30
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	e000ed04 	.word	0xe000ed04

080096f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b08e      	sub	sp, #56	; 0x38
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10a      	bne.n	800971c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	623b      	str	r3, [r7, #32]
}
 8009718:	bf00      	nop
 800971a:	e7fe      	b.n	800971a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d103      	bne.n	800972a <xQueueReceiveFromISR+0x3a>
 8009722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <xQueueReceiveFromISR+0x3e>
 800972a:	2301      	movs	r3, #1
 800972c:	e000      	b.n	8009730 <xQueueReceiveFromISR+0x40>
 800972e:	2300      	movs	r3, #0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10a      	bne.n	800974a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	61fb      	str	r3, [r7, #28]
}
 8009746:	bf00      	nop
 8009748:	e7fe      	b.n	8009748 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800974a:	f001 fe95 	bl	800b478 <vPortValidateInterruptPriority>
	__asm volatile
 800974e:	f3ef 8211 	mrs	r2, BASEPRI
 8009752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	61ba      	str	r2, [r7, #24]
 8009764:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009766:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009768:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800976a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	2b00      	cmp	r3, #0
 8009774:	d02f      	beq.n	80097d6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800977c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009780:	68b9      	ldr	r1, [r7, #8]
 8009782:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009784:	f000 f8c1 	bl	800990a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978a:	1e5a      	subs	r2, r3, #1
 800978c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009790:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009798:	d112      	bne.n	80097c0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d016      	beq.n	80097d0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a4:	3310      	adds	r3, #16
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 fe64 	bl	800a474 <xTaskRemoveFromEventList>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00e      	beq.n	80097d0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00b      	beq.n	80097d0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	e007      	b.n	80097d0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80097c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097c4:	3301      	adds	r3, #1
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	b25a      	sxtb	r2, r3
 80097ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80097d0:	2301      	movs	r3, #1
 80097d2:	637b      	str	r3, [r7, #52]	; 0x34
 80097d4:	e001      	b.n	80097da <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	637b      	str	r3, [r7, #52]	; 0x34
 80097da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	f383 8811 	msr	BASEPRI, r3
}
 80097e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3738      	adds	r7, #56	; 0x38
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10a      	bne.n	8009818 <vQueueDelete+0x28>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	60bb      	str	r3, [r7, #8]
}
 8009814:	bf00      	nop
 8009816:	e7fe      	b.n	8009816 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f000 f947 	bl	8009aac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009824:	2b00      	cmp	r3, #0
 8009826:	d102      	bne.n	800982e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f001 ff09 	bl	800b640 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800982e:	bf00      	nop
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b086      	sub	sp, #24
 800983a:	af00      	add	r7, sp, #0
 800983c:	60f8      	str	r0, [r7, #12]
 800983e:	60b9      	str	r1, [r7, #8]
 8009840:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009842:	2300      	movs	r3, #0
 8009844:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10d      	bne.n	8009870 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d14d      	bne.n	80098f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	4618      	mov	r0, r3
 8009862:	f000 ffe7 	bl	800a834 <xTaskPriorityDisinherit>
 8009866:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	609a      	str	r2, [r3, #8]
 800986e:	e043      	b.n	80098f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d119      	bne.n	80098aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6858      	ldr	r0, [r3, #4]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987e:	461a      	mov	r2, r3
 8009880:	68b9      	ldr	r1, [r7, #8]
 8009882:	f002 f95b 	bl	800bb3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	685a      	ldr	r2, [r3, #4]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988e:	441a      	add	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	429a      	cmp	r2, r3
 800989e:	d32b      	bcc.n	80098f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	605a      	str	r2, [r3, #4]
 80098a8:	e026      	b.n	80098f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	68d8      	ldr	r0, [r3, #12]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b2:	461a      	mov	r2, r3
 80098b4:	68b9      	ldr	r1, [r7, #8]
 80098b6:	f002 f941 	bl	800bb3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	68da      	ldr	r2, [r3, #12]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c2:	425b      	negs	r3, r3
 80098c4:	441a      	add	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d207      	bcs.n	80098e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	689a      	ldr	r2, [r3, #8]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098de:	425b      	negs	r3, r3
 80098e0:	441a      	add	r2, r3
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d105      	bne.n	80098f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d002      	beq.n	80098f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009900:	697b      	ldr	r3, [r7, #20]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3718      	adds	r7, #24
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b082      	sub	sp, #8
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009918:	2b00      	cmp	r3, #0
 800991a:	d018      	beq.n	800994e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68da      	ldr	r2, [r3, #12]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009924:	441a      	add	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	429a      	cmp	r2, r3
 8009934:	d303      	bcc.n	800993e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68d9      	ldr	r1, [r3, #12]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009946:	461a      	mov	r2, r3
 8009948:	6838      	ldr	r0, [r7, #0]
 800994a:	f002 f8f7 	bl	800bb3c <memcpy>
	}
}
 800994e:	bf00      	nop
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b084      	sub	sp, #16
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800995e:	f001 fca9 	bl	800b2b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009968:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800996a:	e011      	b.n	8009990 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009970:	2b00      	cmp	r3, #0
 8009972:	d012      	beq.n	800999a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3324      	adds	r3, #36	; 0x24
 8009978:	4618      	mov	r0, r3
 800997a:	f000 fd7b 	bl	800a474 <xTaskRemoveFromEventList>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009984:	f000 fe52 	bl	800a62c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009988:	7bfb      	ldrb	r3, [r7, #15]
 800998a:	3b01      	subs	r3, #1
 800998c:	b2db      	uxtb	r3, r3
 800998e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009994:	2b00      	cmp	r3, #0
 8009996:	dce9      	bgt.n	800996c <prvUnlockQueue+0x16>
 8009998:	e000      	b.n	800999c <prvUnlockQueue+0x46>
					break;
 800999a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	22ff      	movs	r2, #255	; 0xff
 80099a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80099a4:	f001 fcb6 	bl	800b314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80099a8:	f001 fc84 	bl	800b2b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099b4:	e011      	b.n	80099da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d012      	beq.n	80099e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	3310      	adds	r3, #16
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 fd56 	bl	800a474 <xTaskRemoveFromEventList>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80099ce:	f000 fe2d 	bl	800a62c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80099d2:	7bbb      	ldrb	r3, [r7, #14]
 80099d4:	3b01      	subs	r3, #1
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	dce9      	bgt.n	80099b6 <prvUnlockQueue+0x60>
 80099e2:	e000      	b.n	80099e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80099e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	22ff      	movs	r2, #255	; 0xff
 80099ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80099ee:	f001 fc91 	bl	800b314 <vPortExitCritical>
}
 80099f2:	bf00      	nop
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a02:	f001 fc57 	bl	800b2b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d102      	bne.n	8009a14 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	60fb      	str	r3, [r7, #12]
 8009a12:	e001      	b.n	8009a18 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a14:	2300      	movs	r3, #0
 8009a16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a18:	f001 fc7c 	bl	800b314 <vPortExitCritical>

	return xReturn;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b084      	sub	sp, #16
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a2e:	f001 fc41 	bl	800b2b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d102      	bne.n	8009a44 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	60fb      	str	r3, [r7, #12]
 8009a42:	e001      	b.n	8009a48 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a44:	2300      	movs	r3, #0
 8009a46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a48:	f001 fc64 	bl	800b314 <vPortExitCritical>

	return xReturn;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
	...

08009a58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a62:	2300      	movs	r3, #0
 8009a64:	60fb      	str	r3, [r7, #12]
 8009a66:	e014      	b.n	8009a92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a68:	4a0f      	ldr	r2, [pc, #60]	; (8009aa8 <vQueueAddToRegistry+0x50>)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10b      	bne.n	8009a8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a74:	490c      	ldr	r1, [pc, #48]	; (8009aa8 <vQueueAddToRegistry+0x50>)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a7e:	4a0a      	ldr	r2, [pc, #40]	; (8009aa8 <vQueueAddToRegistry+0x50>)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	00db      	lsls	r3, r3, #3
 8009a84:	4413      	add	r3, r2
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009a8a:	e006      	b.n	8009a9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	60fb      	str	r3, [r7, #12]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2b07      	cmp	r3, #7
 8009a96:	d9e7      	bls.n	8009a68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a98:	bf00      	nop
 8009a9a:	bf00      	nop
 8009a9c:	3714      	adds	r7, #20
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	20005b58 	.word	0x20005b58

08009aac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	e016      	b.n	8009ae8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009aba:	4a10      	ldr	r2, [pc, #64]	; (8009afc <vQueueUnregisterQueue+0x50>)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	00db      	lsls	r3, r3, #3
 8009ac0:	4413      	add	r3, r2
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d10b      	bne.n	8009ae2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009aca:	4a0c      	ldr	r2, [pc, #48]	; (8009afc <vQueueUnregisterQueue+0x50>)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2100      	movs	r1, #0
 8009ad0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009ad4:	4a09      	ldr	r2, [pc, #36]	; (8009afc <vQueueUnregisterQueue+0x50>)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	00db      	lsls	r3, r3, #3
 8009ada:	4413      	add	r3, r2
 8009adc:	2200      	movs	r2, #0
 8009ade:	605a      	str	r2, [r3, #4]
				break;
 8009ae0:	e006      	b.n	8009af0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	60fb      	str	r3, [r7, #12]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2b07      	cmp	r3, #7
 8009aec:	d9e5      	bls.n	8009aba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009aee:	bf00      	nop
 8009af0:	bf00      	nop
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	20005b58 	.word	0x20005b58

08009b00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009b10:	f001 fbd0 	bl	800b2b4 <vPortEnterCritical>
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b1a:	b25b      	sxtb	r3, r3
 8009b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b20:	d103      	bne.n	8009b2a <vQueueWaitForMessageRestricted+0x2a>
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b30:	b25b      	sxtb	r3, r3
 8009b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b36:	d103      	bne.n	8009b40 <vQueueWaitForMessageRestricted+0x40>
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b40:	f001 fbe8 	bl	800b314 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d106      	bne.n	8009b5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	3324      	adds	r3, #36	; 0x24
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	68b9      	ldr	r1, [r7, #8]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f000 fc61 	bl	800a41c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009b5a:	6978      	ldr	r0, [r7, #20]
 8009b5c:	f7ff fefb 	bl	8009956 <prvUnlockQueue>
	}
 8009b60:	bf00      	nop
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08e      	sub	sp, #56	; 0x38
 8009b6c:	af04      	add	r7, sp, #16
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
 8009b74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10a      	bne.n	8009b92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	623b      	str	r3, [r7, #32]
}
 8009b8e:	bf00      	nop
 8009b90:	e7fe      	b.n	8009b90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10a      	bne.n	8009bae <xTaskCreateStatic+0x46>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	61fb      	str	r3, [r7, #28]
}
 8009baa:	bf00      	nop
 8009bac:	e7fe      	b.n	8009bac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009bae:	23bc      	movs	r3, #188	; 0xbc
 8009bb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	2bbc      	cmp	r3, #188	; 0xbc
 8009bb6:	d00a      	beq.n	8009bce <xTaskCreateStatic+0x66>
	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	61bb      	str	r3, [r7, #24]
}
 8009bca:	bf00      	nop
 8009bcc:	e7fe      	b.n	8009bcc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009bce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d01e      	beq.n	8009c14 <xTaskCreateStatic+0xac>
 8009bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d01b      	beq.n	8009c14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009be4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	2202      	movs	r2, #2
 8009bea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009bee:	2300      	movs	r3, #0
 8009bf0:	9303      	str	r3, [sp, #12]
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf4:	9302      	str	r3, [sp, #8]
 8009bf6:	f107 0314 	add.w	r3, r7, #20
 8009bfa:	9301      	str	r3, [sp, #4]
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	68b9      	ldr	r1, [r7, #8]
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f000 f850 	bl	8009cac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c0e:	f000 f8f3 	bl	8009df8 <prvAddNewTaskToReadyList>
 8009c12:	e001      	b.n	8009c18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009c14:	2300      	movs	r3, #0
 8009c16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c18:	697b      	ldr	r3, [r7, #20]
	}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3728      	adds	r7, #40	; 0x28
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b08c      	sub	sp, #48	; 0x30
 8009c26:	af04      	add	r7, sp, #16
 8009c28:	60f8      	str	r0, [r7, #12]
 8009c2a:	60b9      	str	r1, [r7, #8]
 8009c2c:	603b      	str	r3, [r7, #0]
 8009c2e:	4613      	mov	r3, r2
 8009c30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c32:	88fb      	ldrh	r3, [r7, #6]
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f001 fc5e 	bl	800b4f8 <pvPortMalloc>
 8009c3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00e      	beq.n	8009c62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c44:	20bc      	movs	r0, #188	; 0xbc
 8009c46:	f001 fc57 	bl	800b4f8 <pvPortMalloc>
 8009c4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d003      	beq.n	8009c5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	631a      	str	r2, [r3, #48]	; 0x30
 8009c58:	e005      	b.n	8009c66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c5a:	6978      	ldr	r0, [r7, #20]
 8009c5c:	f001 fcf0 	bl	800b640 <vPortFree>
 8009c60:	e001      	b.n	8009c66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c62:	2300      	movs	r3, #0
 8009c64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d017      	beq.n	8009c9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c74:	88fa      	ldrh	r2, [r7, #6]
 8009c76:	2300      	movs	r3, #0
 8009c78:	9303      	str	r3, [sp, #12]
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	9302      	str	r3, [sp, #8]
 8009c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c80:	9301      	str	r3, [sp, #4]
 8009c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	68b9      	ldr	r1, [r7, #8]
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f000 f80e 	bl	8009cac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c90:	69f8      	ldr	r0, [r7, #28]
 8009c92:	f000 f8b1 	bl	8009df8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c96:	2301      	movs	r3, #1
 8009c98:	61bb      	str	r3, [r7, #24]
 8009c9a:	e002      	b.n	8009ca2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ca0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009ca2:	69bb      	ldr	r3, [r7, #24]
	}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3720      	adds	r7, #32
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b088      	sub	sp, #32
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	21a5      	movs	r1, #165	; 0xa5
 8009cc6:	f001 ff47 	bl	800bb58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4413      	add	r3, r2
 8009cda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	f023 0307 	bic.w	r3, r3, #7
 8009ce2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	f003 0307 	and.w	r3, r3, #7
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00a      	beq.n	8009d04 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	617b      	str	r3, [r7, #20]
}
 8009d00:	bf00      	nop
 8009d02:	e7fe      	b.n	8009d02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d01f      	beq.n	8009d4a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	61fb      	str	r3, [r7, #28]
 8009d0e:	e012      	b.n	8009d36 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	4413      	add	r3, r2
 8009d16:	7819      	ldrb	r1, [r3, #0]
 8009d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	3334      	adds	r3, #52	; 0x34
 8009d20:	460a      	mov	r2, r1
 8009d22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	4413      	add	r3, r2
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d006      	beq.n	8009d3e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	3301      	adds	r3, #1
 8009d34:	61fb      	str	r3, [r7, #28]
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	2b0f      	cmp	r3, #15
 8009d3a:	d9e9      	bls.n	8009d10 <prvInitialiseNewTask+0x64>
 8009d3c:	e000      	b.n	8009d40 <prvInitialiseNewTask+0x94>
			{
				break;
 8009d3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d48:	e003      	b.n	8009d52 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d54:	2b37      	cmp	r3, #55	; 0x37
 8009d56:	d901      	bls.n	8009d5c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d58:	2337      	movs	r3, #55	; 0x37
 8009d5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d70:	3304      	adds	r3, #4
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7ff f806 	bl	8008d84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7a:	3318      	adds	r3, #24
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7ff f801 	bl	8008d84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009daa:	3354      	adds	r3, #84	; 0x54
 8009dac:	2260      	movs	r2, #96	; 0x60
 8009dae:	2100      	movs	r1, #0
 8009db0:	4618      	mov	r0, r3
 8009db2:	f001 fed1 	bl	800bb58 <memset>
 8009db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db8:	4a0c      	ldr	r2, [pc, #48]	; (8009dec <prvInitialiseNewTask+0x140>)
 8009dba:	659a      	str	r2, [r3, #88]	; 0x58
 8009dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbe:	4a0c      	ldr	r2, [pc, #48]	; (8009df0 <prvInitialiseNewTask+0x144>)
 8009dc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	4a0b      	ldr	r2, [pc, #44]	; (8009df4 <prvInitialiseNewTask+0x148>)
 8009dc6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009dc8:	683a      	ldr	r2, [r7, #0]
 8009dca:	68f9      	ldr	r1, [r7, #12]
 8009dcc:	69b8      	ldr	r0, [r7, #24]
 8009dce:	f001 f941 	bl	800b054 <pxPortInitialiseStack>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009de2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009de4:	bf00      	nop
 8009de6:	3720      	adds	r7, #32
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	0800ed8c 	.word	0x0800ed8c
 8009df0:	0800edac 	.word	0x0800edac
 8009df4:	0800ed6c 	.word	0x0800ed6c

08009df8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e00:	f001 fa58 	bl	800b2b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e04:	4b2d      	ldr	r3, [pc, #180]	; (8009ebc <prvAddNewTaskToReadyList+0xc4>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	4a2c      	ldr	r2, [pc, #176]	; (8009ebc <prvAddNewTaskToReadyList+0xc4>)
 8009e0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e0e:	4b2c      	ldr	r3, [pc, #176]	; (8009ec0 <prvAddNewTaskToReadyList+0xc8>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d109      	bne.n	8009e2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e16:	4a2a      	ldr	r2, [pc, #168]	; (8009ec0 <prvAddNewTaskToReadyList+0xc8>)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e1c:	4b27      	ldr	r3, [pc, #156]	; (8009ebc <prvAddNewTaskToReadyList+0xc4>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d110      	bne.n	8009e46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e24:	f000 fc26 	bl	800a674 <prvInitialiseTaskLists>
 8009e28:	e00d      	b.n	8009e46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e2a:	4b26      	ldr	r3, [pc, #152]	; (8009ec4 <prvAddNewTaskToReadyList+0xcc>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d109      	bne.n	8009e46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e32:	4b23      	ldr	r3, [pc, #140]	; (8009ec0 <prvAddNewTaskToReadyList+0xc8>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d802      	bhi.n	8009e46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e40:	4a1f      	ldr	r2, [pc, #124]	; (8009ec0 <prvAddNewTaskToReadyList+0xc8>)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e46:	4b20      	ldr	r3, [pc, #128]	; (8009ec8 <prvAddNewTaskToReadyList+0xd0>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	4a1e      	ldr	r2, [pc, #120]	; (8009ec8 <prvAddNewTaskToReadyList+0xd0>)
 8009e4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009e50:	4b1d      	ldr	r3, [pc, #116]	; (8009ec8 <prvAddNewTaskToReadyList+0xd0>)
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e5c:	4b1b      	ldr	r3, [pc, #108]	; (8009ecc <prvAddNewTaskToReadyList+0xd4>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d903      	bls.n	8009e6c <prvAddNewTaskToReadyList+0x74>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e68:	4a18      	ldr	r2, [pc, #96]	; (8009ecc <prvAddNewTaskToReadyList+0xd4>)
 8009e6a:	6013      	str	r3, [r2, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e70:	4613      	mov	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4a15      	ldr	r2, [pc, #84]	; (8009ed0 <prvAddNewTaskToReadyList+0xd8>)
 8009e7a:	441a      	add	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	4619      	mov	r1, r3
 8009e82:	4610      	mov	r0, r2
 8009e84:	f7fe ff8b 	bl	8008d9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e88:	f001 fa44 	bl	800b314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e8c:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <prvAddNewTaskToReadyList+0xcc>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00e      	beq.n	8009eb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e94:	4b0a      	ldr	r3, [pc, #40]	; (8009ec0 <prvAddNewTaskToReadyList+0xc8>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d207      	bcs.n	8009eb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ea2:	4b0c      	ldr	r3, [pc, #48]	; (8009ed4 <prvAddNewTaskToReadyList+0xdc>)
 8009ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ea8:	601a      	str	r2, [r3, #0]
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009eb2:	bf00      	nop
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	2000606c 	.word	0x2000606c
 8009ec0:	20005b98 	.word	0x20005b98
 8009ec4:	20006078 	.word	0x20006078
 8009ec8:	20006088 	.word	0x20006088
 8009ecc:	20006074 	.word	0x20006074
 8009ed0:	20005b9c 	.word	0x20005b9c
 8009ed4:	e000ed04 	.word	0xe000ed04

08009ed8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d017      	beq.n	8009f1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009eea:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <vTaskDelay+0x60>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00a      	beq.n	8009f08 <vTaskDelay+0x30>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	60bb      	str	r3, [r7, #8]
}
 8009f04:	bf00      	nop
 8009f06:	e7fe      	b.n	8009f06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009f08:	f000 f88a 	bl	800a020 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fcfe 	bl	800a910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009f14:	f000 f892 	bl	800a03c <xTaskResumeAll>
 8009f18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d107      	bne.n	8009f30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009f20:	4b06      	ldr	r3, [pc, #24]	; (8009f3c <vTaskDelay+0x64>)
 8009f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f26:	601a      	str	r2, [r3, #0]
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f30:	bf00      	nop
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	20006094 	.word	0x20006094
 8009f3c:	e000ed04 	.word	0xe000ed04

08009f40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b08a      	sub	sp, #40	; 0x28
 8009f44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f46:	2300      	movs	r3, #0
 8009f48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f4e:	463a      	mov	r2, r7
 8009f50:	1d39      	adds	r1, r7, #4
 8009f52:	f107 0308 	add.w	r3, r7, #8
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fe fec0 	bl	8008cdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	9202      	str	r2, [sp, #8]
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	2300      	movs	r3, #0
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	460a      	mov	r2, r1
 8009f6e:	4924      	ldr	r1, [pc, #144]	; (800a000 <vTaskStartScheduler+0xc0>)
 8009f70:	4824      	ldr	r0, [pc, #144]	; (800a004 <vTaskStartScheduler+0xc4>)
 8009f72:	f7ff fdf9 	bl	8009b68 <xTaskCreateStatic>
 8009f76:	4603      	mov	r3, r0
 8009f78:	4a23      	ldr	r2, [pc, #140]	; (800a008 <vTaskStartScheduler+0xc8>)
 8009f7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f7c:	4b22      	ldr	r3, [pc, #136]	; (800a008 <vTaskStartScheduler+0xc8>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f84:	2301      	movs	r3, #1
 8009f86:	617b      	str	r3, [r7, #20]
 8009f88:	e001      	b.n	8009f8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d102      	bne.n	8009f9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009f94:	f000 fd10 	bl	800a9b8 <xTimerCreateTimerTask>
 8009f98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d11b      	bne.n	8009fd8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	613b      	str	r3, [r7, #16]
}
 8009fb2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009fb4:	4b15      	ldr	r3, [pc, #84]	; (800a00c <vTaskStartScheduler+0xcc>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	3354      	adds	r3, #84	; 0x54
 8009fba:	4a15      	ldr	r2, [pc, #84]	; (800a010 <vTaskStartScheduler+0xd0>)
 8009fbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009fbe:	4b15      	ldr	r3, [pc, #84]	; (800a014 <vTaskStartScheduler+0xd4>)
 8009fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009fc6:	4b14      	ldr	r3, [pc, #80]	; (800a018 <vTaskStartScheduler+0xd8>)
 8009fc8:	2201      	movs	r2, #1
 8009fca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009fcc:	4b13      	ldr	r3, [pc, #76]	; (800a01c <vTaskStartScheduler+0xdc>)
 8009fce:	2200      	movs	r2, #0
 8009fd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009fd2:	f001 f8cd 	bl	800b170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009fd6:	e00e      	b.n	8009ff6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fde:	d10a      	bne.n	8009ff6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	60fb      	str	r3, [r7, #12]
}
 8009ff2:	bf00      	nop
 8009ff4:	e7fe      	b.n	8009ff4 <vTaskStartScheduler+0xb4>
}
 8009ff6:	bf00      	nop
 8009ff8:	3718      	adds	r7, #24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	0800cc24 	.word	0x0800cc24
 800a004:	0800a645 	.word	0x0800a645
 800a008:	20006090 	.word	0x20006090
 800a00c:	20005b98 	.word	0x20005b98
 800a010:	20000098 	.word	0x20000098
 800a014:	2000608c 	.word	0x2000608c
 800a018:	20006078 	.word	0x20006078
 800a01c:	20006070 	.word	0x20006070

0800a020 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a020:	b480      	push	{r7}
 800a022:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a024:	4b04      	ldr	r3, [pc, #16]	; (800a038 <vTaskSuspendAll+0x18>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	3301      	adds	r3, #1
 800a02a:	4a03      	ldr	r2, [pc, #12]	; (800a038 <vTaskSuspendAll+0x18>)
 800a02c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a02e:	bf00      	nop
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	20006094 	.word	0x20006094

0800a03c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a042:	2300      	movs	r3, #0
 800a044:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a046:	2300      	movs	r3, #0
 800a048:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a04a:	4b42      	ldr	r3, [pc, #264]	; (800a154 <xTaskResumeAll+0x118>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10a      	bne.n	800a068 <xTaskResumeAll+0x2c>
	__asm volatile
 800a052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	603b      	str	r3, [r7, #0]
}
 800a064:	bf00      	nop
 800a066:	e7fe      	b.n	800a066 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a068:	f001 f924 	bl	800b2b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a06c:	4b39      	ldr	r3, [pc, #228]	; (800a154 <xTaskResumeAll+0x118>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	3b01      	subs	r3, #1
 800a072:	4a38      	ldr	r2, [pc, #224]	; (800a154 <xTaskResumeAll+0x118>)
 800a074:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a076:	4b37      	ldr	r3, [pc, #220]	; (800a154 <xTaskResumeAll+0x118>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d162      	bne.n	800a144 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a07e:	4b36      	ldr	r3, [pc, #216]	; (800a158 <xTaskResumeAll+0x11c>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d05e      	beq.n	800a144 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a086:	e02f      	b.n	800a0e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a088:	4b34      	ldr	r3, [pc, #208]	; (800a15c <xTaskResumeAll+0x120>)
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	3318      	adds	r3, #24
 800a094:	4618      	mov	r0, r3
 800a096:	f7fe fedf 	bl	8008e58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3304      	adds	r3, #4
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fe feda 	bl	8008e58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a8:	4b2d      	ldr	r3, [pc, #180]	; (800a160 <xTaskResumeAll+0x124>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d903      	bls.n	800a0b8 <xTaskResumeAll+0x7c>
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b4:	4a2a      	ldr	r2, [pc, #168]	; (800a160 <xTaskResumeAll+0x124>)
 800a0b6:	6013      	str	r3, [r2, #0]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0bc:	4613      	mov	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4a27      	ldr	r2, [pc, #156]	; (800a164 <xTaskResumeAll+0x128>)
 800a0c6:	441a      	add	r2, r3
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	f7fe fe65 	bl	8008d9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d8:	4b23      	ldr	r3, [pc, #140]	; (800a168 <xTaskResumeAll+0x12c>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d302      	bcc.n	800a0e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a0e2:	4b22      	ldr	r3, [pc, #136]	; (800a16c <xTaskResumeAll+0x130>)
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0e8:	4b1c      	ldr	r3, [pc, #112]	; (800a15c <xTaskResumeAll+0x120>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1cb      	bne.n	800a088 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a0f6:	f000 fb5f 	bl	800a7b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a0fa:	4b1d      	ldr	r3, [pc, #116]	; (800a170 <xTaskResumeAll+0x134>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d010      	beq.n	800a128 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a106:	f000 f847 	bl	800a198 <xTaskIncrementTick>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d002      	beq.n	800a116 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a110:	4b16      	ldr	r3, [pc, #88]	; (800a16c <xTaskResumeAll+0x130>)
 800a112:	2201      	movs	r2, #1
 800a114:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	3b01      	subs	r3, #1
 800a11a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1f1      	bne.n	800a106 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a122:	4b13      	ldr	r3, [pc, #76]	; (800a170 <xTaskResumeAll+0x134>)
 800a124:	2200      	movs	r2, #0
 800a126:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a128:	4b10      	ldr	r3, [pc, #64]	; (800a16c <xTaskResumeAll+0x130>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d009      	beq.n	800a144 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a130:	2301      	movs	r3, #1
 800a132:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a134:	4b0f      	ldr	r3, [pc, #60]	; (800a174 <xTaskResumeAll+0x138>)
 800a136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a13a:	601a      	str	r2, [r3, #0]
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a144:	f001 f8e6 	bl	800b314 <vPortExitCritical>

	return xAlreadyYielded;
 800a148:	68bb      	ldr	r3, [r7, #8]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	20006094 	.word	0x20006094
 800a158:	2000606c 	.word	0x2000606c
 800a15c:	2000602c 	.word	0x2000602c
 800a160:	20006074 	.word	0x20006074
 800a164:	20005b9c 	.word	0x20005b9c
 800a168:	20005b98 	.word	0x20005b98
 800a16c:	20006080 	.word	0x20006080
 800a170:	2000607c 	.word	0x2000607c
 800a174:	e000ed04 	.word	0xe000ed04

0800a178 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a17e:	4b05      	ldr	r3, [pc, #20]	; (800a194 <xTaskGetTickCount+0x1c>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a184:	687b      	ldr	r3, [r7, #4]
}
 800a186:	4618      	mov	r0, r3
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	20006070 	.word	0x20006070

0800a198 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1a2:	4b4f      	ldr	r3, [pc, #316]	; (800a2e0 <xTaskIncrementTick+0x148>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f040 808f 	bne.w	800a2ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a1ac:	4b4d      	ldr	r3, [pc, #308]	; (800a2e4 <xTaskIncrementTick+0x14c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a1b4:	4a4b      	ldr	r2, [pc, #300]	; (800a2e4 <xTaskIncrementTick+0x14c>)
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d120      	bne.n	800a202 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a1c0:	4b49      	ldr	r3, [pc, #292]	; (800a2e8 <xTaskIncrementTick+0x150>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00a      	beq.n	800a1e0 <xTaskIncrementTick+0x48>
	__asm volatile
 800a1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ce:	f383 8811 	msr	BASEPRI, r3
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	603b      	str	r3, [r7, #0]
}
 800a1dc:	bf00      	nop
 800a1de:	e7fe      	b.n	800a1de <xTaskIncrementTick+0x46>
 800a1e0:	4b41      	ldr	r3, [pc, #260]	; (800a2e8 <xTaskIncrementTick+0x150>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	60fb      	str	r3, [r7, #12]
 800a1e6:	4b41      	ldr	r3, [pc, #260]	; (800a2ec <xTaskIncrementTick+0x154>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a3f      	ldr	r2, [pc, #252]	; (800a2e8 <xTaskIncrementTick+0x150>)
 800a1ec:	6013      	str	r3, [r2, #0]
 800a1ee:	4a3f      	ldr	r2, [pc, #252]	; (800a2ec <xTaskIncrementTick+0x154>)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6013      	str	r3, [r2, #0]
 800a1f4:	4b3e      	ldr	r3, [pc, #248]	; (800a2f0 <xTaskIncrementTick+0x158>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	4a3d      	ldr	r2, [pc, #244]	; (800a2f0 <xTaskIncrementTick+0x158>)
 800a1fc:	6013      	str	r3, [r2, #0]
 800a1fe:	f000 fadb 	bl	800a7b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a202:	4b3c      	ldr	r3, [pc, #240]	; (800a2f4 <xTaskIncrementTick+0x15c>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d349      	bcc.n	800a2a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a20c:	4b36      	ldr	r3, [pc, #216]	; (800a2e8 <xTaskIncrementTick+0x150>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d104      	bne.n	800a220 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a216:	4b37      	ldr	r3, [pc, #220]	; (800a2f4 <xTaskIncrementTick+0x15c>)
 800a218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a21c:	601a      	str	r2, [r3, #0]
					break;
 800a21e:	e03f      	b.n	800a2a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a220:	4b31      	ldr	r3, [pc, #196]	; (800a2e8 <xTaskIncrementTick+0x150>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	429a      	cmp	r2, r3
 800a236:	d203      	bcs.n	800a240 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a238:	4a2e      	ldr	r2, [pc, #184]	; (800a2f4 <xTaskIncrementTick+0x15c>)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a23e:	e02f      	b.n	800a2a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	3304      	adds	r3, #4
 800a244:	4618      	mov	r0, r3
 800a246:	f7fe fe07 	bl	8008e58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d004      	beq.n	800a25c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	3318      	adds	r3, #24
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe fdfe 	bl	8008e58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a260:	4b25      	ldr	r3, [pc, #148]	; (800a2f8 <xTaskIncrementTick+0x160>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	429a      	cmp	r2, r3
 800a266:	d903      	bls.n	800a270 <xTaskIncrementTick+0xd8>
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26c:	4a22      	ldr	r2, [pc, #136]	; (800a2f8 <xTaskIncrementTick+0x160>)
 800a26e:	6013      	str	r3, [r2, #0]
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a274:	4613      	mov	r3, r2
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	4413      	add	r3, r2
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	4a1f      	ldr	r2, [pc, #124]	; (800a2fc <xTaskIncrementTick+0x164>)
 800a27e:	441a      	add	r2, r3
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	3304      	adds	r3, #4
 800a284:	4619      	mov	r1, r3
 800a286:	4610      	mov	r0, r2
 800a288:	f7fe fd89 	bl	8008d9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a290:	4b1b      	ldr	r3, [pc, #108]	; (800a300 <xTaskIncrementTick+0x168>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a296:	429a      	cmp	r2, r3
 800a298:	d3b8      	bcc.n	800a20c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a29a:	2301      	movs	r3, #1
 800a29c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a29e:	e7b5      	b.n	800a20c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a2a0:	4b17      	ldr	r3, [pc, #92]	; (800a300 <xTaskIncrementTick+0x168>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a6:	4915      	ldr	r1, [pc, #84]	; (800a2fc <xTaskIncrementTick+0x164>)
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4413      	add	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	440b      	add	r3, r1
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d901      	bls.n	800a2bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a2bc:	4b11      	ldr	r3, [pc, #68]	; (800a304 <xTaskIncrementTick+0x16c>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d007      	beq.n	800a2d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	617b      	str	r3, [r7, #20]
 800a2c8:	e004      	b.n	800a2d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a2ca:	4b0f      	ldr	r3, [pc, #60]	; (800a308 <xTaskIncrementTick+0x170>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	4a0d      	ldr	r2, [pc, #52]	; (800a308 <xTaskIncrementTick+0x170>)
 800a2d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a2d4:	697b      	ldr	r3, [r7, #20]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3718      	adds	r7, #24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	20006094 	.word	0x20006094
 800a2e4:	20006070 	.word	0x20006070
 800a2e8:	20006024 	.word	0x20006024
 800a2ec:	20006028 	.word	0x20006028
 800a2f0:	20006084 	.word	0x20006084
 800a2f4:	2000608c 	.word	0x2000608c
 800a2f8:	20006074 	.word	0x20006074
 800a2fc:	20005b9c 	.word	0x20005b9c
 800a300:	20005b98 	.word	0x20005b98
 800a304:	20006080 	.word	0x20006080
 800a308:	2000607c 	.word	0x2000607c

0800a30c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a312:	4b2a      	ldr	r3, [pc, #168]	; (800a3bc <vTaskSwitchContext+0xb0>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a31a:	4b29      	ldr	r3, [pc, #164]	; (800a3c0 <vTaskSwitchContext+0xb4>)
 800a31c:	2201      	movs	r2, #1
 800a31e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a320:	e046      	b.n	800a3b0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a322:	4b27      	ldr	r3, [pc, #156]	; (800a3c0 <vTaskSwitchContext+0xb4>)
 800a324:	2200      	movs	r2, #0
 800a326:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a328:	4b26      	ldr	r3, [pc, #152]	; (800a3c4 <vTaskSwitchContext+0xb8>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	60fb      	str	r3, [r7, #12]
 800a32e:	e010      	b.n	800a352 <vTaskSwitchContext+0x46>
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10a      	bne.n	800a34c <vTaskSwitchContext+0x40>
	__asm volatile
 800a336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33a:	f383 8811 	msr	BASEPRI, r3
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	607b      	str	r3, [r7, #4]
}
 800a348:	bf00      	nop
 800a34a:	e7fe      	b.n	800a34a <vTaskSwitchContext+0x3e>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	3b01      	subs	r3, #1
 800a350:	60fb      	str	r3, [r7, #12]
 800a352:	491d      	ldr	r1, [pc, #116]	; (800a3c8 <vTaskSwitchContext+0xbc>)
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	4613      	mov	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4413      	add	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	440b      	add	r3, r1
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d0e4      	beq.n	800a330 <vTaskSwitchContext+0x24>
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	4613      	mov	r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4413      	add	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4a15      	ldr	r2, [pc, #84]	; (800a3c8 <vTaskSwitchContext+0xbc>)
 800a372:	4413      	add	r3, r2
 800a374:	60bb      	str	r3, [r7, #8]
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	605a      	str	r2, [r3, #4]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	685a      	ldr	r2, [r3, #4]
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	3308      	adds	r3, #8
 800a388:	429a      	cmp	r2, r3
 800a38a:	d104      	bne.n	800a396 <vTaskSwitchContext+0x8a>
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	685a      	ldr	r2, [r3, #4]
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	605a      	str	r2, [r3, #4]
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	4a0b      	ldr	r2, [pc, #44]	; (800a3cc <vTaskSwitchContext+0xc0>)
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	4a08      	ldr	r2, [pc, #32]	; (800a3c4 <vTaskSwitchContext+0xb8>)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a3a6:	4b09      	ldr	r3, [pc, #36]	; (800a3cc <vTaskSwitchContext+0xc0>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3354      	adds	r3, #84	; 0x54
 800a3ac:	4a08      	ldr	r2, [pc, #32]	; (800a3d0 <vTaskSwitchContext+0xc4>)
 800a3ae:	6013      	str	r3, [r2, #0]
}
 800a3b0:	bf00      	nop
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	20006094 	.word	0x20006094
 800a3c0:	20006080 	.word	0x20006080
 800a3c4:	20006074 	.word	0x20006074
 800a3c8:	20005b9c 	.word	0x20005b9c
 800a3cc:	20005b98 	.word	0x20005b98
 800a3d0:	20000098 	.word	0x20000098

0800a3d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10a      	bne.n	800a3fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e8:	f383 8811 	msr	BASEPRI, r3
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	60fb      	str	r3, [r7, #12]
}
 800a3f6:	bf00      	nop
 800a3f8:	e7fe      	b.n	800a3f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a3fa:	4b07      	ldr	r3, [pc, #28]	; (800a418 <vTaskPlaceOnEventList+0x44>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3318      	adds	r3, #24
 800a400:	4619      	mov	r1, r3
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7fe fcef 	bl	8008de6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a408:	2101      	movs	r1, #1
 800a40a:	6838      	ldr	r0, [r7, #0]
 800a40c:	f000 fa80 	bl	800a910 <prvAddCurrentTaskToDelayedList>
}
 800a410:	bf00      	nop
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	20005b98 	.word	0x20005b98

0800a41c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10a      	bne.n	800a444 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	617b      	str	r3, [r7, #20]
}
 800a440:	bf00      	nop
 800a442:	e7fe      	b.n	800a442 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a444:	4b0a      	ldr	r3, [pc, #40]	; (800a470 <vTaskPlaceOnEventListRestricted+0x54>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3318      	adds	r3, #24
 800a44a:	4619      	mov	r1, r3
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f7fe fca6 	bl	8008d9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a45c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a45e:	6879      	ldr	r1, [r7, #4]
 800a460:	68b8      	ldr	r0, [r7, #8]
 800a462:	f000 fa55 	bl	800a910 <prvAddCurrentTaskToDelayedList>
	}
 800a466:	bf00      	nop
 800a468:	3718      	adds	r7, #24
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	20005b98 	.word	0x20005b98

0800a474 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10a      	bne.n	800a4a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	60fb      	str	r3, [r7, #12]
}
 800a49c:	bf00      	nop
 800a49e:	e7fe      	b.n	800a49e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	3318      	adds	r3, #24
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fe fcd7 	bl	8008e58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4aa:	4b1e      	ldr	r3, [pc, #120]	; (800a524 <xTaskRemoveFromEventList+0xb0>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d11d      	bne.n	800a4ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fe fcce 	bl	8008e58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c0:	4b19      	ldr	r3, [pc, #100]	; (800a528 <xTaskRemoveFromEventList+0xb4>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d903      	bls.n	800a4d0 <xTaskRemoveFromEventList+0x5c>
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4cc:	4a16      	ldr	r2, [pc, #88]	; (800a528 <xTaskRemoveFromEventList+0xb4>)
 800a4ce:	6013      	str	r3, [r2, #0]
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4a13      	ldr	r2, [pc, #76]	; (800a52c <xTaskRemoveFromEventList+0xb8>)
 800a4de:	441a      	add	r2, r3
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	f7fe fc59 	bl	8008d9e <vListInsertEnd>
 800a4ec:	e005      	b.n	800a4fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	3318      	adds	r3, #24
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	480e      	ldr	r0, [pc, #56]	; (800a530 <xTaskRemoveFromEventList+0xbc>)
 800a4f6:	f7fe fc52 	bl	8008d9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4fe:	4b0d      	ldr	r3, [pc, #52]	; (800a534 <xTaskRemoveFromEventList+0xc0>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a504:	429a      	cmp	r2, r3
 800a506:	d905      	bls.n	800a514 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a508:	2301      	movs	r3, #1
 800a50a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a50c:	4b0a      	ldr	r3, [pc, #40]	; (800a538 <xTaskRemoveFromEventList+0xc4>)
 800a50e:	2201      	movs	r2, #1
 800a510:	601a      	str	r2, [r3, #0]
 800a512:	e001      	b.n	800a518 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a514:	2300      	movs	r3, #0
 800a516:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a518:	697b      	ldr	r3, [r7, #20]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3718      	adds	r7, #24
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20006094 	.word	0x20006094
 800a528:	20006074 	.word	0x20006074
 800a52c:	20005b9c 	.word	0x20005b9c
 800a530:	2000602c 	.word	0x2000602c
 800a534:	20005b98 	.word	0x20005b98
 800a538:	20006080 	.word	0x20006080

0800a53c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a544:	4b06      	ldr	r3, [pc, #24]	; (800a560 <vTaskInternalSetTimeOutState+0x24>)
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a54c:	4b05      	ldr	r3, [pc, #20]	; (800a564 <vTaskInternalSetTimeOutState+0x28>)
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	605a      	str	r2, [r3, #4]
}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	20006084 	.word	0x20006084
 800a564:	20006070 	.word	0x20006070

0800a568 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b088      	sub	sp, #32
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10a      	bne.n	800a58e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	613b      	str	r3, [r7, #16]
}
 800a58a:	bf00      	nop
 800a58c:	e7fe      	b.n	800a58c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10a      	bne.n	800a5aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	60fb      	str	r3, [r7, #12]
}
 800a5a6:	bf00      	nop
 800a5a8:	e7fe      	b.n	800a5a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a5aa:	f000 fe83 	bl	800b2b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a5ae:	4b1d      	ldr	r3, [pc, #116]	; (800a624 <xTaskCheckForTimeOut+0xbc>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	69ba      	ldr	r2, [r7, #24]
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5c6:	d102      	bne.n	800a5ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	61fb      	str	r3, [r7, #28]
 800a5cc:	e023      	b.n	800a616 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	4b15      	ldr	r3, [pc, #84]	; (800a628 <xTaskCheckForTimeOut+0xc0>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d007      	beq.n	800a5ea <xTaskCheckForTimeOut+0x82>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	69ba      	ldr	r2, [r7, #24]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d302      	bcc.n	800a5ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	61fb      	str	r3, [r7, #28]
 800a5e8:	e015      	b.n	800a616 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	697a      	ldr	r2, [r7, #20]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d20b      	bcs.n	800a60c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	1ad2      	subs	r2, r2, r3
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f7ff ff9b 	bl	800a53c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a606:	2300      	movs	r3, #0
 800a608:	61fb      	str	r3, [r7, #28]
 800a60a:	e004      	b.n	800a616 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	2200      	movs	r2, #0
 800a610:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a612:	2301      	movs	r3, #1
 800a614:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a616:	f000 fe7d 	bl	800b314 <vPortExitCritical>

	return xReturn;
 800a61a:	69fb      	ldr	r3, [r7, #28]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3720      	adds	r7, #32
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	20006070 	.word	0x20006070
 800a628:	20006084 	.word	0x20006084

0800a62c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a62c:	b480      	push	{r7}
 800a62e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a630:	4b03      	ldr	r3, [pc, #12]	; (800a640 <vTaskMissedYield+0x14>)
 800a632:	2201      	movs	r2, #1
 800a634:	601a      	str	r2, [r3, #0]
}
 800a636:	bf00      	nop
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr
 800a640:	20006080 	.word	0x20006080

0800a644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a64c:	f000 f852 	bl	800a6f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a650:	4b06      	ldr	r3, [pc, #24]	; (800a66c <prvIdleTask+0x28>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d9f9      	bls.n	800a64c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a658:	4b05      	ldr	r3, [pc, #20]	; (800a670 <prvIdleTask+0x2c>)
 800a65a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a668:	e7f0      	b.n	800a64c <prvIdleTask+0x8>
 800a66a:	bf00      	nop
 800a66c:	20005b9c 	.word	0x20005b9c
 800a670:	e000ed04 	.word	0xe000ed04

0800a674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a67a:	2300      	movs	r3, #0
 800a67c:	607b      	str	r3, [r7, #4]
 800a67e:	e00c      	b.n	800a69a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	4613      	mov	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4a12      	ldr	r2, [pc, #72]	; (800a6d4 <prvInitialiseTaskLists+0x60>)
 800a68c:	4413      	add	r3, r2
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fe fb58 	bl	8008d44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3301      	adds	r3, #1
 800a698:	607b      	str	r3, [r7, #4]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2b37      	cmp	r3, #55	; 0x37
 800a69e:	d9ef      	bls.n	800a680 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a6a0:	480d      	ldr	r0, [pc, #52]	; (800a6d8 <prvInitialiseTaskLists+0x64>)
 800a6a2:	f7fe fb4f 	bl	8008d44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a6a6:	480d      	ldr	r0, [pc, #52]	; (800a6dc <prvInitialiseTaskLists+0x68>)
 800a6a8:	f7fe fb4c 	bl	8008d44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a6ac:	480c      	ldr	r0, [pc, #48]	; (800a6e0 <prvInitialiseTaskLists+0x6c>)
 800a6ae:	f7fe fb49 	bl	8008d44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a6b2:	480c      	ldr	r0, [pc, #48]	; (800a6e4 <prvInitialiseTaskLists+0x70>)
 800a6b4:	f7fe fb46 	bl	8008d44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a6b8:	480b      	ldr	r0, [pc, #44]	; (800a6e8 <prvInitialiseTaskLists+0x74>)
 800a6ba:	f7fe fb43 	bl	8008d44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a6be:	4b0b      	ldr	r3, [pc, #44]	; (800a6ec <prvInitialiseTaskLists+0x78>)
 800a6c0:	4a05      	ldr	r2, [pc, #20]	; (800a6d8 <prvInitialiseTaskLists+0x64>)
 800a6c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a6c4:	4b0a      	ldr	r3, [pc, #40]	; (800a6f0 <prvInitialiseTaskLists+0x7c>)
 800a6c6:	4a05      	ldr	r2, [pc, #20]	; (800a6dc <prvInitialiseTaskLists+0x68>)
 800a6c8:	601a      	str	r2, [r3, #0]
}
 800a6ca:	bf00      	nop
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20005b9c 	.word	0x20005b9c
 800a6d8:	20005ffc 	.word	0x20005ffc
 800a6dc:	20006010 	.word	0x20006010
 800a6e0:	2000602c 	.word	0x2000602c
 800a6e4:	20006040 	.word	0x20006040
 800a6e8:	20006058 	.word	0x20006058
 800a6ec:	20006024 	.word	0x20006024
 800a6f0:	20006028 	.word	0x20006028

0800a6f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6fa:	e019      	b.n	800a730 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a6fc:	f000 fdda 	bl	800b2b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a700:	4b10      	ldr	r3, [pc, #64]	; (800a744 <prvCheckTasksWaitingTermination+0x50>)
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	3304      	adds	r3, #4
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fe fba3 	bl	8008e58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a712:	4b0d      	ldr	r3, [pc, #52]	; (800a748 <prvCheckTasksWaitingTermination+0x54>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	3b01      	subs	r3, #1
 800a718:	4a0b      	ldr	r2, [pc, #44]	; (800a748 <prvCheckTasksWaitingTermination+0x54>)
 800a71a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a71c:	4b0b      	ldr	r3, [pc, #44]	; (800a74c <prvCheckTasksWaitingTermination+0x58>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3b01      	subs	r3, #1
 800a722:	4a0a      	ldr	r2, [pc, #40]	; (800a74c <prvCheckTasksWaitingTermination+0x58>)
 800a724:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a726:	f000 fdf5 	bl	800b314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f810 	bl	800a750 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a730:	4b06      	ldr	r3, [pc, #24]	; (800a74c <prvCheckTasksWaitingTermination+0x58>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1e1      	bne.n	800a6fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a738:	bf00      	nop
 800a73a:	bf00      	nop
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	20006040 	.word	0x20006040
 800a748:	2000606c 	.word	0x2000606c
 800a74c:	20006054 	.word	0x20006054

0800a750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	3354      	adds	r3, #84	; 0x54
 800a75c:	4618      	mov	r0, r3
 800a75e:	f001 fb07 	bl	800bd70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d108      	bne.n	800a77e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a770:	4618      	mov	r0, r3
 800a772:	f000 ff65 	bl	800b640 <vPortFree>
				vPortFree( pxTCB );
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 ff62 	bl	800b640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a77c:	e018      	b.n	800a7b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a784:	2b01      	cmp	r3, #1
 800a786:	d103      	bne.n	800a790 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 ff59 	bl	800b640 <vPortFree>
	}
 800a78e:	e00f      	b.n	800a7b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a796:	2b02      	cmp	r3, #2
 800a798:	d00a      	beq.n	800a7b0 <prvDeleteTCB+0x60>
	__asm volatile
 800a79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79e:	f383 8811 	msr	BASEPRI, r3
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	f3bf 8f4f 	dsb	sy
 800a7aa:	60fb      	str	r3, [r7, #12]
}
 800a7ac:	bf00      	nop
 800a7ae:	e7fe      	b.n	800a7ae <prvDeleteTCB+0x5e>
	}
 800a7b0:	bf00      	nop
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7be:	4b0c      	ldr	r3, [pc, #48]	; (800a7f0 <prvResetNextTaskUnblockTime+0x38>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d104      	bne.n	800a7d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7c8:	4b0a      	ldr	r3, [pc, #40]	; (800a7f4 <prvResetNextTaskUnblockTime+0x3c>)
 800a7ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a7d0:	e008      	b.n	800a7e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7d2:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <prvResetNextTaskUnblockTime+0x38>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	4a04      	ldr	r2, [pc, #16]	; (800a7f4 <prvResetNextTaskUnblockTime+0x3c>)
 800a7e2:	6013      	str	r3, [r2, #0]
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	20006024 	.word	0x20006024
 800a7f4:	2000608c 	.word	0x2000608c

0800a7f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a7fe:	4b0b      	ldr	r3, [pc, #44]	; (800a82c <xTaskGetSchedulerState+0x34>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d102      	bne.n	800a80c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a806:	2301      	movs	r3, #1
 800a808:	607b      	str	r3, [r7, #4]
 800a80a:	e008      	b.n	800a81e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a80c:	4b08      	ldr	r3, [pc, #32]	; (800a830 <xTaskGetSchedulerState+0x38>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d102      	bne.n	800a81a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a814:	2302      	movs	r3, #2
 800a816:	607b      	str	r3, [r7, #4]
 800a818:	e001      	b.n	800a81e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a81a:	2300      	movs	r3, #0
 800a81c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a81e:	687b      	ldr	r3, [r7, #4]
	}
 800a820:	4618      	mov	r0, r3
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr
 800a82c:	20006078 	.word	0x20006078
 800a830:	20006094 	.word	0x20006094

0800a834 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a840:	2300      	movs	r3, #0
 800a842:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d056      	beq.n	800a8f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a84a:	4b2e      	ldr	r3, [pc, #184]	; (800a904 <xTaskPriorityDisinherit+0xd0>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	429a      	cmp	r2, r3
 800a852:	d00a      	beq.n	800a86a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	60fb      	str	r3, [r7, #12]
}
 800a866:	bf00      	nop
 800a868:	e7fe      	b.n	800a868 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10a      	bne.n	800a888 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a876:	f383 8811 	msr	BASEPRI, r3
 800a87a:	f3bf 8f6f 	isb	sy
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	60bb      	str	r3, [r7, #8]
}
 800a884:	bf00      	nop
 800a886:	e7fe      	b.n	800a886 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a88c:	1e5a      	subs	r2, r3, #1
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d02c      	beq.n	800a8f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d128      	bne.n	800a8f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	3304      	adds	r3, #4
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fe fad4 	bl	8008e58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8c8:	4b0f      	ldr	r3, [pc, #60]	; (800a908 <xTaskPriorityDisinherit+0xd4>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d903      	bls.n	800a8d8 <xTaskPriorityDisinherit+0xa4>
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d4:	4a0c      	ldr	r2, [pc, #48]	; (800a908 <xTaskPriorityDisinherit+0xd4>)
 800a8d6:	6013      	str	r3, [r2, #0]
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8dc:	4613      	mov	r3, r2
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4413      	add	r3, r2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4a09      	ldr	r2, [pc, #36]	; (800a90c <xTaskPriorityDisinherit+0xd8>)
 800a8e6:	441a      	add	r2, r3
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	4610      	mov	r0, r2
 800a8f0:	f7fe fa55 	bl	8008d9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a8f8:	697b      	ldr	r3, [r7, #20]
	}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3718      	adds	r7, #24
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	20005b98 	.word	0x20005b98
 800a908:	20006074 	.word	0x20006074
 800a90c:	20005b9c 	.word	0x20005b9c

0800a910 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a91a:	4b21      	ldr	r3, [pc, #132]	; (800a9a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a920:	4b20      	ldr	r3, [pc, #128]	; (800a9a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	3304      	adds	r3, #4
 800a926:	4618      	mov	r0, r3
 800a928:	f7fe fa96 	bl	8008e58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a932:	d10a      	bne.n	800a94a <prvAddCurrentTaskToDelayedList+0x3a>
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d007      	beq.n	800a94a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a93a:	4b1a      	ldr	r3, [pc, #104]	; (800a9a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3304      	adds	r3, #4
 800a940:	4619      	mov	r1, r3
 800a942:	4819      	ldr	r0, [pc, #100]	; (800a9a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a944:	f7fe fa2b 	bl	8008d9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a948:	e026      	b.n	800a998 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4413      	add	r3, r2
 800a950:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a952:	4b14      	ldr	r3, [pc, #80]	; (800a9a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d209      	bcs.n	800a976 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a962:	4b12      	ldr	r3, [pc, #72]	; (800a9ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	4b0f      	ldr	r3, [pc, #60]	; (800a9a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	3304      	adds	r3, #4
 800a96c:	4619      	mov	r1, r3
 800a96e:	4610      	mov	r0, r2
 800a970:	f7fe fa39 	bl	8008de6 <vListInsert>
}
 800a974:	e010      	b.n	800a998 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a976:	4b0e      	ldr	r3, [pc, #56]	; (800a9b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	4b0a      	ldr	r3, [pc, #40]	; (800a9a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	3304      	adds	r3, #4
 800a980:	4619      	mov	r1, r3
 800a982:	4610      	mov	r0, r2
 800a984:	f7fe fa2f 	bl	8008de6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a988:	4b0a      	ldr	r3, [pc, #40]	; (800a9b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d202      	bcs.n	800a998 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a992:	4a08      	ldr	r2, [pc, #32]	; (800a9b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	6013      	str	r3, [r2, #0]
}
 800a998:	bf00      	nop
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	20006070 	.word	0x20006070
 800a9a4:	20005b98 	.word	0x20005b98
 800a9a8:	20006058 	.word	0x20006058
 800a9ac:	20006028 	.word	0x20006028
 800a9b0:	20006024 	.word	0x20006024
 800a9b4:	2000608c 	.word	0x2000608c

0800a9b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b08a      	sub	sp, #40	; 0x28
 800a9bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a9c2:	f000 fb07 	bl	800afd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a9c6:	4b1c      	ldr	r3, [pc, #112]	; (800aa38 <xTimerCreateTimerTask+0x80>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d021      	beq.n	800aa12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a9d6:	1d3a      	adds	r2, r7, #4
 800a9d8:	f107 0108 	add.w	r1, r7, #8
 800a9dc:	f107 030c 	add.w	r3, r7, #12
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fe f995 	bl	8008d10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a9e6:	6879      	ldr	r1, [r7, #4]
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	9202      	str	r2, [sp, #8]
 800a9ee:	9301      	str	r3, [sp, #4]
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	460a      	mov	r2, r1
 800a9f8:	4910      	ldr	r1, [pc, #64]	; (800aa3c <xTimerCreateTimerTask+0x84>)
 800a9fa:	4811      	ldr	r0, [pc, #68]	; (800aa40 <xTimerCreateTimerTask+0x88>)
 800a9fc:	f7ff f8b4 	bl	8009b68 <xTaskCreateStatic>
 800aa00:	4603      	mov	r3, r0
 800aa02:	4a10      	ldr	r2, [pc, #64]	; (800aa44 <xTimerCreateTimerTask+0x8c>)
 800aa04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aa06:	4b0f      	ldr	r3, [pc, #60]	; (800aa44 <xTimerCreateTimerTask+0x8c>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d001      	beq.n	800aa12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10a      	bne.n	800aa2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1c:	f383 8811 	msr	BASEPRI, r3
 800aa20:	f3bf 8f6f 	isb	sy
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	613b      	str	r3, [r7, #16]
}
 800aa2a:	bf00      	nop
 800aa2c:	e7fe      	b.n	800aa2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aa2e:	697b      	ldr	r3, [r7, #20]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3718      	adds	r7, #24
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	200060c8 	.word	0x200060c8
 800aa3c:	0800cc2c 	.word	0x0800cc2c
 800aa40:	0800ab7d 	.word	0x0800ab7d
 800aa44:	200060cc 	.word	0x200060cc

0800aa48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b08a      	sub	sp, #40	; 0x28
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	607a      	str	r2, [r7, #4]
 800aa54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aa56:	2300      	movs	r3, #0
 800aa58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10a      	bne.n	800aa76 <xTimerGenericCommand+0x2e>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	623b      	str	r3, [r7, #32]
}
 800aa72:	bf00      	nop
 800aa74:	e7fe      	b.n	800aa74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aa76:	4b1a      	ldr	r3, [pc, #104]	; (800aae0 <xTimerGenericCommand+0x98>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d02a      	beq.n	800aad4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	2b05      	cmp	r3, #5
 800aa8e:	dc18      	bgt.n	800aac2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aa90:	f7ff feb2 	bl	800a7f8 <xTaskGetSchedulerState>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d109      	bne.n	800aaae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa9a:	4b11      	ldr	r3, [pc, #68]	; (800aae0 <xTimerGenericCommand+0x98>)
 800aa9c:	6818      	ldr	r0, [r3, #0]
 800aa9e:	f107 0110 	add.w	r1, r7, #16
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaa6:	f7fe fba9 	bl	80091fc <xQueueGenericSend>
 800aaaa:	6278      	str	r0, [r7, #36]	; 0x24
 800aaac:	e012      	b.n	800aad4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aaae:	4b0c      	ldr	r3, [pc, #48]	; (800aae0 <xTimerGenericCommand+0x98>)
 800aab0:	6818      	ldr	r0, [r3, #0]
 800aab2:	f107 0110 	add.w	r1, r7, #16
 800aab6:	2300      	movs	r3, #0
 800aab8:	2200      	movs	r2, #0
 800aaba:	f7fe fb9f 	bl	80091fc <xQueueGenericSend>
 800aabe:	6278      	str	r0, [r7, #36]	; 0x24
 800aac0:	e008      	b.n	800aad4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aac2:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <xTimerGenericCommand+0x98>)
 800aac4:	6818      	ldr	r0, [r3, #0]
 800aac6:	f107 0110 	add.w	r1, r7, #16
 800aaca:	2300      	movs	r3, #0
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	f7fe fc93 	bl	80093f8 <xQueueGenericSendFromISR>
 800aad2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3728      	adds	r7, #40	; 0x28
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	200060c8 	.word	0x200060c8

0800aae4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b088      	sub	sp, #32
 800aae8:	af02      	add	r7, sp, #8
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaee:	4b22      	ldr	r3, [pc, #136]	; (800ab78 <prvProcessExpiredTimer+0x94>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	3304      	adds	r3, #4
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fe f9ab 	bl	8008e58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab08:	f003 0304 	and.w	r3, r3, #4
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d022      	beq.n	800ab56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	699a      	ldr	r2, [r3, #24]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	18d1      	adds	r1, r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	6978      	ldr	r0, [r7, #20]
 800ab1e:	f000 f8d1 	bl	800acc4 <prvInsertTimerInActiveList>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d01f      	beq.n	800ab68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab28:	2300      	movs	r3, #0
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	2100      	movs	r1, #0
 800ab32:	6978      	ldr	r0, [r7, #20]
 800ab34:	f7ff ff88 	bl	800aa48 <xTimerGenericCommand>
 800ab38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d113      	bne.n	800ab68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	60fb      	str	r3, [r7, #12]
}
 800ab52:	bf00      	nop
 800ab54:	e7fe      	b.n	800ab54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab5c:	f023 0301 	bic.w	r3, r3, #1
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	6a1b      	ldr	r3, [r3, #32]
 800ab6c:	6978      	ldr	r0, [r7, #20]
 800ab6e:	4798      	blx	r3
}
 800ab70:	bf00      	nop
 800ab72:	3718      	adds	r7, #24
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	200060c0 	.word	0x200060c0

0800ab7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab84:	f107 0308 	add.w	r3, r7, #8
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f000 f857 	bl	800ac3c <prvGetNextExpireTime>
 800ab8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	4619      	mov	r1, r3
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	f000 f803 	bl	800aba0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ab9a:	f000 f8d5 	bl	800ad48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab9e:	e7f1      	b.n	800ab84 <prvTimerTask+0x8>

0800aba0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800abaa:	f7ff fa39 	bl	800a020 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abae:	f107 0308 	add.w	r3, r7, #8
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 f866 	bl	800ac84 <prvSampleTimeNow>
 800abb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d130      	bne.n	800ac22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d10a      	bne.n	800abdc <prvProcessTimerOrBlockTask+0x3c>
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d806      	bhi.n	800abdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800abce:	f7ff fa35 	bl	800a03c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800abd2:	68f9      	ldr	r1, [r7, #12]
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7ff ff85 	bl	800aae4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800abda:	e024      	b.n	800ac26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d008      	beq.n	800abf4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800abe2:	4b13      	ldr	r3, [pc, #76]	; (800ac30 <prvProcessTimerOrBlockTask+0x90>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d101      	bne.n	800abf0 <prvProcessTimerOrBlockTask+0x50>
 800abec:	2301      	movs	r3, #1
 800abee:	e000      	b.n	800abf2 <prvProcessTimerOrBlockTask+0x52>
 800abf0:	2300      	movs	r3, #0
 800abf2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800abf4:	4b0f      	ldr	r3, [pc, #60]	; (800ac34 <prvProcessTimerOrBlockTask+0x94>)
 800abf6:	6818      	ldr	r0, [r3, #0]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	1ad3      	subs	r3, r2, r3
 800abfe:	683a      	ldr	r2, [r7, #0]
 800ac00:	4619      	mov	r1, r3
 800ac02:	f7fe ff7d 	bl	8009b00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ac06:	f7ff fa19 	bl	800a03c <xTaskResumeAll>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10a      	bne.n	800ac26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ac10:	4b09      	ldr	r3, [pc, #36]	; (800ac38 <prvProcessTimerOrBlockTask+0x98>)
 800ac12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac16:	601a      	str	r2, [r3, #0]
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	f3bf 8f6f 	isb	sy
}
 800ac20:	e001      	b.n	800ac26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ac22:	f7ff fa0b 	bl	800a03c <xTaskResumeAll>
}
 800ac26:	bf00      	nop
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	200060c4 	.word	0x200060c4
 800ac34:	200060c8 	.word	0x200060c8
 800ac38:	e000ed04 	.word	0xe000ed04

0800ac3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ac44:	4b0e      	ldr	r3, [pc, #56]	; (800ac80 <prvGetNextExpireTime+0x44>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d101      	bne.n	800ac52 <prvGetNextExpireTime+0x16>
 800ac4e:	2201      	movs	r2, #1
 800ac50:	e000      	b.n	800ac54 <prvGetNextExpireTime+0x18>
 800ac52:	2200      	movs	r2, #0
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d105      	bne.n	800ac6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac60:	4b07      	ldr	r3, [pc, #28]	; (800ac80 <prvGetNextExpireTime+0x44>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	60fb      	str	r3, [r7, #12]
 800ac6a:	e001      	b.n	800ac70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ac70:	68fb      	ldr	r3, [r7, #12]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3714      	adds	r7, #20
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop
 800ac80:	200060c0 	.word	0x200060c0

0800ac84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ac8c:	f7ff fa74 	bl	800a178 <xTaskGetTickCount>
 800ac90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ac92:	4b0b      	ldr	r3, [pc, #44]	; (800acc0 <prvSampleTimeNow+0x3c>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d205      	bcs.n	800aca8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ac9c:	f000 f936 	bl	800af0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	e002      	b.n	800acae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800acae:	4a04      	ldr	r2, [pc, #16]	; (800acc0 <prvSampleTimeNow+0x3c>)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800acb4:	68fb      	ldr	r3, [r7, #12]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	200060d0 	.word	0x200060d0

0800acc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	607a      	str	r2, [r7, #4]
 800acd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800acd2:	2300      	movs	r3, #0
 800acd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	68ba      	ldr	r2, [r7, #8]
 800acda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d812      	bhi.n	800ad10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	1ad2      	subs	r2, r2, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	699b      	ldr	r3, [r3, #24]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d302      	bcc.n	800acfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800acf8:	2301      	movs	r3, #1
 800acfa:	617b      	str	r3, [r7, #20]
 800acfc:	e01b      	b.n	800ad36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800acfe:	4b10      	ldr	r3, [pc, #64]	; (800ad40 <prvInsertTimerInActiveList+0x7c>)
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	3304      	adds	r3, #4
 800ad06:	4619      	mov	r1, r3
 800ad08:	4610      	mov	r0, r2
 800ad0a:	f7fe f86c 	bl	8008de6 <vListInsert>
 800ad0e:	e012      	b.n	800ad36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d206      	bcs.n	800ad26 <prvInsertTimerInActiveList+0x62>
 800ad18:	68ba      	ldr	r2, [r7, #8]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d302      	bcc.n	800ad26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ad20:	2301      	movs	r3, #1
 800ad22:	617b      	str	r3, [r7, #20]
 800ad24:	e007      	b.n	800ad36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad26:	4b07      	ldr	r3, [pc, #28]	; (800ad44 <prvInsertTimerInActiveList+0x80>)
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	4619      	mov	r1, r3
 800ad30:	4610      	mov	r0, r2
 800ad32:	f7fe f858 	bl	8008de6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ad36:	697b      	ldr	r3, [r7, #20]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3718      	adds	r7, #24
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	200060c4 	.word	0x200060c4
 800ad44:	200060c0 	.word	0x200060c0

0800ad48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b08e      	sub	sp, #56	; 0x38
 800ad4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad4e:	e0ca      	b.n	800aee6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	da18      	bge.n	800ad88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ad56:	1d3b      	adds	r3, r7, #4
 800ad58:	3304      	adds	r3, #4
 800ad5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ad5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d10a      	bne.n	800ad78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ad62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad66:	f383 8811 	msr	BASEPRI, r3
 800ad6a:	f3bf 8f6f 	isb	sy
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	61fb      	str	r3, [r7, #28]
}
 800ad74:	bf00      	nop
 800ad76:	e7fe      	b.n	800ad76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ad78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad7e:	6850      	ldr	r0, [r2, #4]
 800ad80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad82:	6892      	ldr	r2, [r2, #8]
 800ad84:	4611      	mov	r1, r2
 800ad86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f2c0 80aa 	blt.w	800aee4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ad94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad96:	695b      	ldr	r3, [r3, #20]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d004      	beq.n	800ada6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9e:	3304      	adds	r3, #4
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fe f859 	bl	8008e58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ada6:	463b      	mov	r3, r7
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7ff ff6b 	bl	800ac84 <prvSampleTimeNow>
 800adae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b09      	cmp	r3, #9
 800adb4:	f200 8097 	bhi.w	800aee6 <prvProcessReceivedCommands+0x19e>
 800adb8:	a201      	add	r2, pc, #4	; (adr r2, 800adc0 <prvProcessReceivedCommands+0x78>)
 800adba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adbe:	bf00      	nop
 800adc0:	0800ade9 	.word	0x0800ade9
 800adc4:	0800ade9 	.word	0x0800ade9
 800adc8:	0800ade9 	.word	0x0800ade9
 800adcc:	0800ae5d 	.word	0x0800ae5d
 800add0:	0800ae71 	.word	0x0800ae71
 800add4:	0800aebb 	.word	0x0800aebb
 800add8:	0800ade9 	.word	0x0800ade9
 800addc:	0800ade9 	.word	0x0800ade9
 800ade0:	0800ae5d 	.word	0x0800ae5d
 800ade4:	0800ae71 	.word	0x0800ae71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ade8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adee:	f043 0301 	orr.w	r3, r3, #1
 800adf2:	b2da      	uxtb	r2, r3
 800adf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800adfa:	68ba      	ldr	r2, [r7, #8]
 800adfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfe:	699b      	ldr	r3, [r3, #24]
 800ae00:	18d1      	adds	r1, r2, r3
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae08:	f7ff ff5c 	bl	800acc4 <prvInsertTimerInActiveList>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d069      	beq.n	800aee6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae20:	f003 0304 	and.w	r3, r3, #4
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d05e      	beq.n	800aee6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	441a      	add	r2, r3
 800ae30:	2300      	movs	r3, #0
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	2300      	movs	r3, #0
 800ae36:	2100      	movs	r1, #0
 800ae38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae3a:	f7ff fe05 	bl	800aa48 <xTimerGenericCommand>
 800ae3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ae40:	6a3b      	ldr	r3, [r7, #32]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d14f      	bne.n	800aee6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ae46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4a:	f383 8811 	msr	BASEPRI, r3
 800ae4e:	f3bf 8f6f 	isb	sy
 800ae52:	f3bf 8f4f 	dsb	sy
 800ae56:	61bb      	str	r3, [r7, #24]
}
 800ae58:	bf00      	nop
 800ae5a:	e7fe      	b.n	800ae5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae62:	f023 0301 	bic.w	r3, r3, #1
 800ae66:	b2da      	uxtb	r2, r3
 800ae68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ae6e:	e03a      	b.n	800aee6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae76:	f043 0301 	orr.w	r3, r3, #1
 800ae7a:	b2da      	uxtb	r2, r3
 800ae7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ae82:	68ba      	ldr	r2, [r7, #8]
 800ae84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ae88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8a:	699b      	ldr	r3, [r3, #24]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10a      	bne.n	800aea6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	617b      	str	r3, [r7, #20]
}
 800aea2:	bf00      	nop
 800aea4:	e7fe      	b.n	800aea4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea8:	699a      	ldr	r2, [r3, #24]
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeac:	18d1      	adds	r1, r2, r3
 800aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeb4:	f7ff ff06 	bl	800acc4 <prvInsertTimerInActiveList>
					break;
 800aeb8:	e015      	b.n	800aee6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aeba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aec0:	f003 0302 	and.w	r3, r3, #2
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d103      	bne.n	800aed0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeca:	f000 fbb9 	bl	800b640 <vPortFree>
 800aece:	e00a      	b.n	800aee6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aed6:	f023 0301 	bic.w	r3, r3, #1
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aee2:	e000      	b.n	800aee6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aee4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aee6:	4b08      	ldr	r3, [pc, #32]	; (800af08 <prvProcessReceivedCommands+0x1c0>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	1d39      	adds	r1, r7, #4
 800aeec:	2200      	movs	r2, #0
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fe fb1e 	bl	8009530 <xQueueReceive>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f47f af2a 	bne.w	800ad50 <prvProcessReceivedCommands+0x8>
	}
}
 800aefc:	bf00      	nop
 800aefe:	bf00      	nop
 800af00:	3730      	adds	r7, #48	; 0x30
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	200060c8 	.word	0x200060c8

0800af0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b088      	sub	sp, #32
 800af10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af12:	e048      	b.n	800afa6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af14:	4b2d      	ldr	r3, [pc, #180]	; (800afcc <prvSwitchTimerLists+0xc0>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af1e:	4b2b      	ldr	r3, [pc, #172]	; (800afcc <prvSwitchTimerLists+0xc0>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	3304      	adds	r3, #4
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7fd ff93 	bl	8008e58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af40:	f003 0304 	and.w	r3, r3, #4
 800af44:	2b00      	cmp	r3, #0
 800af46:	d02e      	beq.n	800afa6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	699b      	ldr	r3, [r3, #24]
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	4413      	add	r3, r2
 800af50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800af52:	68ba      	ldr	r2, [r7, #8]
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	429a      	cmp	r2, r3
 800af58:	d90e      	bls.n	800af78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af66:	4b19      	ldr	r3, [pc, #100]	; (800afcc <prvSwitchTimerLists+0xc0>)
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3304      	adds	r3, #4
 800af6e:	4619      	mov	r1, r3
 800af70:	4610      	mov	r0, r2
 800af72:	f7fd ff38 	bl	8008de6 <vListInsert>
 800af76:	e016      	b.n	800afa6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af78:	2300      	movs	r3, #0
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	2300      	movs	r3, #0
 800af7e:	693a      	ldr	r2, [r7, #16]
 800af80:	2100      	movs	r1, #0
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f7ff fd60 	bl	800aa48 <xTimerGenericCommand>
 800af88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10a      	bne.n	800afa6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	603b      	str	r3, [r7, #0]
}
 800afa2:	bf00      	nop
 800afa4:	e7fe      	b.n	800afa4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800afa6:	4b09      	ldr	r3, [pc, #36]	; (800afcc <prvSwitchTimerLists+0xc0>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1b1      	bne.n	800af14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800afb0:	4b06      	ldr	r3, [pc, #24]	; (800afcc <prvSwitchTimerLists+0xc0>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800afb6:	4b06      	ldr	r3, [pc, #24]	; (800afd0 <prvSwitchTimerLists+0xc4>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a04      	ldr	r2, [pc, #16]	; (800afcc <prvSwitchTimerLists+0xc0>)
 800afbc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800afbe:	4a04      	ldr	r2, [pc, #16]	; (800afd0 <prvSwitchTimerLists+0xc4>)
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	6013      	str	r3, [r2, #0]
}
 800afc4:	bf00      	nop
 800afc6:	3718      	adds	r7, #24
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	200060c0 	.word	0x200060c0
 800afd0:	200060c4 	.word	0x200060c4

0800afd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800afda:	f000 f96b 	bl	800b2b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800afde:	4b15      	ldr	r3, [pc, #84]	; (800b034 <prvCheckForValidListAndQueue+0x60>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d120      	bne.n	800b028 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800afe6:	4814      	ldr	r0, [pc, #80]	; (800b038 <prvCheckForValidListAndQueue+0x64>)
 800afe8:	f7fd feac 	bl	8008d44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800afec:	4813      	ldr	r0, [pc, #76]	; (800b03c <prvCheckForValidListAndQueue+0x68>)
 800afee:	f7fd fea9 	bl	8008d44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aff2:	4b13      	ldr	r3, [pc, #76]	; (800b040 <prvCheckForValidListAndQueue+0x6c>)
 800aff4:	4a10      	ldr	r2, [pc, #64]	; (800b038 <prvCheckForValidListAndQueue+0x64>)
 800aff6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aff8:	4b12      	ldr	r3, [pc, #72]	; (800b044 <prvCheckForValidListAndQueue+0x70>)
 800affa:	4a10      	ldr	r2, [pc, #64]	; (800b03c <prvCheckForValidListAndQueue+0x68>)
 800affc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800affe:	2300      	movs	r3, #0
 800b000:	9300      	str	r3, [sp, #0]
 800b002:	4b11      	ldr	r3, [pc, #68]	; (800b048 <prvCheckForValidListAndQueue+0x74>)
 800b004:	4a11      	ldr	r2, [pc, #68]	; (800b04c <prvCheckForValidListAndQueue+0x78>)
 800b006:	2110      	movs	r1, #16
 800b008:	200a      	movs	r0, #10
 800b00a:	f7fd ffb7 	bl	8008f7c <xQueueGenericCreateStatic>
 800b00e:	4603      	mov	r3, r0
 800b010:	4a08      	ldr	r2, [pc, #32]	; (800b034 <prvCheckForValidListAndQueue+0x60>)
 800b012:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b014:	4b07      	ldr	r3, [pc, #28]	; (800b034 <prvCheckForValidListAndQueue+0x60>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d005      	beq.n	800b028 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b01c:	4b05      	ldr	r3, [pc, #20]	; (800b034 <prvCheckForValidListAndQueue+0x60>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	490b      	ldr	r1, [pc, #44]	; (800b050 <prvCheckForValidListAndQueue+0x7c>)
 800b022:	4618      	mov	r0, r3
 800b024:	f7fe fd18 	bl	8009a58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b028:	f000 f974 	bl	800b314 <vPortExitCritical>
}
 800b02c:	bf00      	nop
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	200060c8 	.word	0x200060c8
 800b038:	20006098 	.word	0x20006098
 800b03c:	200060ac 	.word	0x200060ac
 800b040:	200060c0 	.word	0x200060c0
 800b044:	200060c4 	.word	0x200060c4
 800b048:	20006174 	.word	0x20006174
 800b04c:	200060d4 	.word	0x200060d4
 800b050:	0800cc34 	.word	0x0800cc34

0800b054 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	3b04      	subs	r3, #4
 800b064:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b06c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3b04      	subs	r3, #4
 800b072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	f023 0201 	bic.w	r2, r3, #1
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3b04      	subs	r3, #4
 800b082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b084:	4a0c      	ldr	r2, [pc, #48]	; (800b0b8 <pxPortInitialiseStack+0x64>)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	3b14      	subs	r3, #20
 800b08e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3b04      	subs	r3, #4
 800b09a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f06f 0202 	mvn.w	r2, #2
 800b0a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	3b20      	subs	r3, #32
 800b0a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3714      	adds	r7, #20
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr
 800b0b8:	0800b0bd 	.word	0x0800b0bd

0800b0bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b0c6:	4b12      	ldr	r3, [pc, #72]	; (800b110 <prvTaskExitError+0x54>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0ce:	d00a      	beq.n	800b0e6 <prvTaskExitError+0x2a>
	__asm volatile
 800b0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	60fb      	str	r3, [r7, #12]
}
 800b0e2:	bf00      	nop
 800b0e4:	e7fe      	b.n	800b0e4 <prvTaskExitError+0x28>
	__asm volatile
 800b0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ea:	f383 8811 	msr	BASEPRI, r3
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	60bb      	str	r3, [r7, #8]
}
 800b0f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b0fa:	bf00      	nop
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d0fc      	beq.n	800b0fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b102:	bf00      	nop
 800b104:	bf00      	nop
 800b106:	3714      	adds	r7, #20
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr
 800b110:	20000094 	.word	0x20000094
	...

0800b120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b120:	4b07      	ldr	r3, [pc, #28]	; (800b140 <pxCurrentTCBConst2>)
 800b122:	6819      	ldr	r1, [r3, #0]
 800b124:	6808      	ldr	r0, [r1, #0]
 800b126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12a:	f380 8809 	msr	PSP, r0
 800b12e:	f3bf 8f6f 	isb	sy
 800b132:	f04f 0000 	mov.w	r0, #0
 800b136:	f380 8811 	msr	BASEPRI, r0
 800b13a:	4770      	bx	lr
 800b13c:	f3af 8000 	nop.w

0800b140 <pxCurrentTCBConst2>:
 800b140:	20005b98 	.word	0x20005b98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b144:	bf00      	nop
 800b146:	bf00      	nop

0800b148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b148:	4808      	ldr	r0, [pc, #32]	; (800b16c <prvPortStartFirstTask+0x24>)
 800b14a:	6800      	ldr	r0, [r0, #0]
 800b14c:	6800      	ldr	r0, [r0, #0]
 800b14e:	f380 8808 	msr	MSP, r0
 800b152:	f04f 0000 	mov.w	r0, #0
 800b156:	f380 8814 	msr	CONTROL, r0
 800b15a:	b662      	cpsie	i
 800b15c:	b661      	cpsie	f
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	df00      	svc	0
 800b168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b16a:	bf00      	nop
 800b16c:	e000ed08 	.word	0xe000ed08

0800b170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b176:	4b46      	ldr	r3, [pc, #280]	; (800b290 <xPortStartScheduler+0x120>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a46      	ldr	r2, [pc, #280]	; (800b294 <xPortStartScheduler+0x124>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d10a      	bne.n	800b196 <xPortStartScheduler+0x26>
	__asm volatile
 800b180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	613b      	str	r3, [r7, #16]
}
 800b192:	bf00      	nop
 800b194:	e7fe      	b.n	800b194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b196:	4b3e      	ldr	r3, [pc, #248]	; (800b290 <xPortStartScheduler+0x120>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a3f      	ldr	r2, [pc, #252]	; (800b298 <xPortStartScheduler+0x128>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d10a      	bne.n	800b1b6 <xPortStartScheduler+0x46>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	60fb      	str	r3, [r7, #12]
}
 800b1b2:	bf00      	nop
 800b1b4:	e7fe      	b.n	800b1b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b1b6:	4b39      	ldr	r3, [pc, #228]	; (800b29c <xPortStartScheduler+0x12c>)
 800b1b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	22ff      	movs	r2, #255	; 0xff
 800b1c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b1d0:	78fb      	ldrb	r3, [r7, #3]
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b1d8:	b2da      	uxtb	r2, r3
 800b1da:	4b31      	ldr	r3, [pc, #196]	; (800b2a0 <xPortStartScheduler+0x130>)
 800b1dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b1de:	4b31      	ldr	r3, [pc, #196]	; (800b2a4 <xPortStartScheduler+0x134>)
 800b1e0:	2207      	movs	r2, #7
 800b1e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1e4:	e009      	b.n	800b1fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b1e6:	4b2f      	ldr	r3, [pc, #188]	; (800b2a4 <xPortStartScheduler+0x134>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	4a2d      	ldr	r2, [pc, #180]	; (800b2a4 <xPortStartScheduler+0x134>)
 800b1ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b1f0:	78fb      	ldrb	r3, [r7, #3]
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	005b      	lsls	r3, r3, #1
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1fa:	78fb      	ldrb	r3, [r7, #3]
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b202:	2b80      	cmp	r3, #128	; 0x80
 800b204:	d0ef      	beq.n	800b1e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b206:	4b27      	ldr	r3, [pc, #156]	; (800b2a4 <xPortStartScheduler+0x134>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f1c3 0307 	rsb	r3, r3, #7
 800b20e:	2b04      	cmp	r3, #4
 800b210:	d00a      	beq.n	800b228 <xPortStartScheduler+0xb8>
	__asm volatile
 800b212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b216:	f383 8811 	msr	BASEPRI, r3
 800b21a:	f3bf 8f6f 	isb	sy
 800b21e:	f3bf 8f4f 	dsb	sy
 800b222:	60bb      	str	r3, [r7, #8]
}
 800b224:	bf00      	nop
 800b226:	e7fe      	b.n	800b226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b228:	4b1e      	ldr	r3, [pc, #120]	; (800b2a4 <xPortStartScheduler+0x134>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	021b      	lsls	r3, r3, #8
 800b22e:	4a1d      	ldr	r2, [pc, #116]	; (800b2a4 <xPortStartScheduler+0x134>)
 800b230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b232:	4b1c      	ldr	r3, [pc, #112]	; (800b2a4 <xPortStartScheduler+0x134>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b23a:	4a1a      	ldr	r2, [pc, #104]	; (800b2a4 <xPortStartScheduler+0x134>)
 800b23c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	b2da      	uxtb	r2, r3
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b246:	4b18      	ldr	r3, [pc, #96]	; (800b2a8 <xPortStartScheduler+0x138>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a17      	ldr	r2, [pc, #92]	; (800b2a8 <xPortStartScheduler+0x138>)
 800b24c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b252:	4b15      	ldr	r3, [pc, #84]	; (800b2a8 <xPortStartScheduler+0x138>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a14      	ldr	r2, [pc, #80]	; (800b2a8 <xPortStartScheduler+0x138>)
 800b258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b25c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b25e:	f000 f8dd 	bl	800b41c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b262:	4b12      	ldr	r3, [pc, #72]	; (800b2ac <xPortStartScheduler+0x13c>)
 800b264:	2200      	movs	r2, #0
 800b266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b268:	f000 f8fc 	bl	800b464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b26c:	4b10      	ldr	r3, [pc, #64]	; (800b2b0 <xPortStartScheduler+0x140>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a0f      	ldr	r2, [pc, #60]	; (800b2b0 <xPortStartScheduler+0x140>)
 800b272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b278:	f7ff ff66 	bl	800b148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b27c:	f7ff f846 	bl	800a30c <vTaskSwitchContext>
	prvTaskExitError();
 800b280:	f7ff ff1c 	bl	800b0bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3718      	adds	r7, #24
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	e000ed00 	.word	0xe000ed00
 800b294:	410fc271 	.word	0x410fc271
 800b298:	410fc270 	.word	0x410fc270
 800b29c:	e000e400 	.word	0xe000e400
 800b2a0:	200061c4 	.word	0x200061c4
 800b2a4:	200061c8 	.word	0x200061c8
 800b2a8:	e000ed20 	.word	0xe000ed20
 800b2ac:	20000094 	.word	0x20000094
 800b2b0:	e000ef34 	.word	0xe000ef34

0800b2b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
	__asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	607b      	str	r3, [r7, #4]
}
 800b2cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b2ce:	4b0f      	ldr	r3, [pc, #60]	; (800b30c <vPortEnterCritical+0x58>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	4a0d      	ldr	r2, [pc, #52]	; (800b30c <vPortEnterCritical+0x58>)
 800b2d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b2d8:	4b0c      	ldr	r3, [pc, #48]	; (800b30c <vPortEnterCritical+0x58>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d10f      	bne.n	800b300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b2e0:	4b0b      	ldr	r3, [pc, #44]	; (800b310 <vPortEnterCritical+0x5c>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00a      	beq.n	800b300 <vPortEnterCritical+0x4c>
	__asm volatile
 800b2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ee:	f383 8811 	msr	BASEPRI, r3
 800b2f2:	f3bf 8f6f 	isb	sy
 800b2f6:	f3bf 8f4f 	dsb	sy
 800b2fa:	603b      	str	r3, [r7, #0]
}
 800b2fc:	bf00      	nop
 800b2fe:	e7fe      	b.n	800b2fe <vPortEnterCritical+0x4a>
	}
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	20000094 	.word	0x20000094
 800b310:	e000ed04 	.word	0xe000ed04

0800b314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b31a:	4b12      	ldr	r3, [pc, #72]	; (800b364 <vPortExitCritical+0x50>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10a      	bne.n	800b338 <vPortExitCritical+0x24>
	__asm volatile
 800b322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b326:	f383 8811 	msr	BASEPRI, r3
 800b32a:	f3bf 8f6f 	isb	sy
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	607b      	str	r3, [r7, #4]
}
 800b334:	bf00      	nop
 800b336:	e7fe      	b.n	800b336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b338:	4b0a      	ldr	r3, [pc, #40]	; (800b364 <vPortExitCritical+0x50>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	3b01      	subs	r3, #1
 800b33e:	4a09      	ldr	r2, [pc, #36]	; (800b364 <vPortExitCritical+0x50>)
 800b340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b342:	4b08      	ldr	r3, [pc, #32]	; (800b364 <vPortExitCritical+0x50>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d105      	bne.n	800b356 <vPortExitCritical+0x42>
 800b34a:	2300      	movs	r3, #0
 800b34c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	f383 8811 	msr	BASEPRI, r3
}
 800b354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b356:	bf00      	nop
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	20000094 	.word	0x20000094
	...

0800b370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b370:	f3ef 8009 	mrs	r0, PSP
 800b374:	f3bf 8f6f 	isb	sy
 800b378:	4b15      	ldr	r3, [pc, #84]	; (800b3d0 <pxCurrentTCBConst>)
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	f01e 0f10 	tst.w	lr, #16
 800b380:	bf08      	it	eq
 800b382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38a:	6010      	str	r0, [r2, #0]
 800b38c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b390:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b394:	f380 8811 	msr	BASEPRI, r0
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f7fe ffb4 	bl	800a30c <vTaskSwitchContext>
 800b3a4:	f04f 0000 	mov.w	r0, #0
 800b3a8:	f380 8811 	msr	BASEPRI, r0
 800b3ac:	bc09      	pop	{r0, r3}
 800b3ae:	6819      	ldr	r1, [r3, #0]
 800b3b0:	6808      	ldr	r0, [r1, #0]
 800b3b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b6:	f01e 0f10 	tst.w	lr, #16
 800b3ba:	bf08      	it	eq
 800b3bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b3c0:	f380 8809 	msr	PSP, r0
 800b3c4:	f3bf 8f6f 	isb	sy
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	f3af 8000 	nop.w

0800b3d0 <pxCurrentTCBConst>:
 800b3d0:	20005b98 	.word	0x20005b98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b3d4:	bf00      	nop
 800b3d6:	bf00      	nop

0800b3d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	607b      	str	r3, [r7, #4]
}
 800b3f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b3f2:	f7fe fed1 	bl	800a198 <xTaskIncrementTick>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d003      	beq.n	800b404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b3fc:	4b06      	ldr	r3, [pc, #24]	; (800b418 <xPortSysTickHandler+0x40>)
 800b3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	2300      	movs	r3, #0
 800b406:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	f383 8811 	msr	BASEPRI, r3
}
 800b40e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b410:	bf00      	nop
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	e000ed04 	.word	0xe000ed04

0800b41c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b41c:	b480      	push	{r7}
 800b41e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b420:	4b0b      	ldr	r3, [pc, #44]	; (800b450 <vPortSetupTimerInterrupt+0x34>)
 800b422:	2200      	movs	r2, #0
 800b424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b426:	4b0b      	ldr	r3, [pc, #44]	; (800b454 <vPortSetupTimerInterrupt+0x38>)
 800b428:	2200      	movs	r2, #0
 800b42a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b42c:	4b0a      	ldr	r3, [pc, #40]	; (800b458 <vPortSetupTimerInterrupt+0x3c>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a0a      	ldr	r2, [pc, #40]	; (800b45c <vPortSetupTimerInterrupt+0x40>)
 800b432:	fba2 2303 	umull	r2, r3, r2, r3
 800b436:	099b      	lsrs	r3, r3, #6
 800b438:	4a09      	ldr	r2, [pc, #36]	; (800b460 <vPortSetupTimerInterrupt+0x44>)
 800b43a:	3b01      	subs	r3, #1
 800b43c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b43e:	4b04      	ldr	r3, [pc, #16]	; (800b450 <vPortSetupTimerInterrupt+0x34>)
 800b440:	2207      	movs	r2, #7
 800b442:	601a      	str	r2, [r3, #0]
}
 800b444:	bf00      	nop
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	e000e010 	.word	0xe000e010
 800b454:	e000e018 	.word	0xe000e018
 800b458:	20000078 	.word	0x20000078
 800b45c:	10624dd3 	.word	0x10624dd3
 800b460:	e000e014 	.word	0xe000e014

0800b464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b474 <vPortEnableVFP+0x10>
 800b468:	6801      	ldr	r1, [r0, #0]
 800b46a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b46e:	6001      	str	r1, [r0, #0]
 800b470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b472:	bf00      	nop
 800b474:	e000ed88 	.word	0xe000ed88

0800b478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b478:	b480      	push	{r7}
 800b47a:	b085      	sub	sp, #20
 800b47c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b47e:	f3ef 8305 	mrs	r3, IPSR
 800b482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2b0f      	cmp	r3, #15
 800b488:	d914      	bls.n	800b4b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b48a:	4a17      	ldr	r2, [pc, #92]	; (800b4e8 <vPortValidateInterruptPriority+0x70>)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	4413      	add	r3, r2
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b494:	4b15      	ldr	r3, [pc, #84]	; (800b4ec <vPortValidateInterruptPriority+0x74>)
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	7afa      	ldrb	r2, [r7, #11]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d20a      	bcs.n	800b4b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	607b      	str	r3, [r7, #4]
}
 800b4b0:	bf00      	nop
 800b4b2:	e7fe      	b.n	800b4b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b4b4:	4b0e      	ldr	r3, [pc, #56]	; (800b4f0 <vPortValidateInterruptPriority+0x78>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b4bc:	4b0d      	ldr	r3, [pc, #52]	; (800b4f4 <vPortValidateInterruptPriority+0x7c>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d90a      	bls.n	800b4da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	603b      	str	r3, [r7, #0]
}
 800b4d6:	bf00      	nop
 800b4d8:	e7fe      	b.n	800b4d8 <vPortValidateInterruptPriority+0x60>
	}
 800b4da:	bf00      	nop
 800b4dc:	3714      	adds	r7, #20
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	e000e3f0 	.word	0xe000e3f0
 800b4ec:	200061c4 	.word	0x200061c4
 800b4f0:	e000ed0c 	.word	0xe000ed0c
 800b4f4:	200061c8 	.word	0x200061c8

0800b4f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b088      	sub	sp, #32
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b500:	2300      	movs	r3, #0
 800b502:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800b504:	4b48      	ldr	r3, [pc, #288]	; (800b628 <pvPortMalloc+0x130>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10a      	bne.n	800b522 <pvPortMalloc+0x2a>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	60fb      	str	r3, [r7, #12]
}
 800b51e:	bf00      	nop
 800b520:	e7fe      	b.n	800b520 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800b522:	f7fe fd7d 	bl	800a020 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b526:	4b41      	ldr	r3, [pc, #260]	; (800b62c <pvPortMalloc+0x134>)
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4013      	ands	r3, r2
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d172      	bne.n	800b618 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00d      	beq.n	800b554 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800b538:	2208      	movs	r2, #8
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	4413      	add	r3, r2
 800b53e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f003 0307 	and.w	r3, r3, #7
 800b546:	2b00      	cmp	r3, #0
 800b548:	d004      	beq.n	800b554 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f023 0307 	bic.w	r3, r3, #7
 800b550:	3308      	adds	r3, #8
 800b552:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d05e      	beq.n	800b618 <pvPortMalloc+0x120>
 800b55a:	4b35      	ldr	r3, [pc, #212]	; (800b630 <pvPortMalloc+0x138>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	429a      	cmp	r2, r3
 800b562:	d859      	bhi.n	800b618 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b564:	4b33      	ldr	r3, [pc, #204]	; (800b634 <pvPortMalloc+0x13c>)
 800b566:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800b568:	4b32      	ldr	r3, [pc, #200]	; (800b634 <pvPortMalloc+0x13c>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b56e:	e004      	b.n	800b57a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	429a      	cmp	r2, r3
 800b582:	d903      	bls.n	800b58c <pvPortMalloc+0x94>
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d1f1      	bne.n	800b570 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b58c:	4b26      	ldr	r3, [pc, #152]	; (800b628 <pvPortMalloc+0x130>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	69fa      	ldr	r2, [r7, #28]
 800b592:	429a      	cmp	r2, r3
 800b594:	d040      	beq.n	800b618 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2208      	movs	r2, #8
 800b59c:	4413      	add	r3, r2
 800b59e:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	1ad2      	subs	r2, r2, r3
 800b5b0:	2308      	movs	r3, #8
 800b5b2:	005b      	lsls	r3, r3, #1
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d90f      	bls.n	800b5d8 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b5b8:	69fa      	ldr	r2, [r7, #28]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4413      	add	r3, r2
 800b5be:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	1ad2      	subs	r2, r2, r3
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800b5d2:	6938      	ldr	r0, [r7, #16]
 800b5d4:	f000 f8a2 	bl	800b71c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5d8:	4b15      	ldr	r3, [pc, #84]	; (800b630 <pvPortMalloc+0x138>)
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	4a13      	ldr	r2, [pc, #76]	; (800b630 <pvPortMalloc+0x138>)
 800b5e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5e6:	4b12      	ldr	r3, [pc, #72]	; (800b630 <pvPortMalloc+0x138>)
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	4b13      	ldr	r3, [pc, #76]	; (800b638 <pvPortMalloc+0x140>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d203      	bcs.n	800b5fa <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b5f2:	4b0f      	ldr	r3, [pc, #60]	; (800b630 <pvPortMalloc+0x138>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a10      	ldr	r2, [pc, #64]	; (800b638 <pvPortMalloc+0x140>)
 800b5f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	685a      	ldr	r2, [r3, #4]
 800b5fe:	4b0b      	ldr	r3, [pc, #44]	; (800b62c <pvPortMalloc+0x134>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	431a      	orrs	r2, r3
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	2200      	movs	r2, #0
 800b60c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b60e:	4b0b      	ldr	r3, [pc, #44]	; (800b63c <pvPortMalloc+0x144>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	3301      	adds	r3, #1
 800b614:	4a09      	ldr	r2, [pc, #36]	; (800b63c <pvPortMalloc+0x144>)
 800b616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b618:	f7fe fd10 	bl	800a03c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800b61c:	697b      	ldr	r3, [r7, #20]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3720      	adds	r7, #32
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	200061d4 	.word	0x200061d4
 800b62c:	200061e8 	.word	0x200061e8
 800b630:	200061d8 	.word	0x200061d8
 800b634:	200061cc 	.word	0x200061cc
 800b638:	200061dc 	.word	0x200061dc
 800b63c:	200061e0 	.word	0x200061e0

0800b640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d04d      	beq.n	800b6ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b652:	2308      	movs	r3, #8
 800b654:	425b      	negs	r3, r3
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	4413      	add	r3, r2
 800b65a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	685a      	ldr	r2, [r3, #4]
 800b664:	4b24      	ldr	r3, [pc, #144]	; (800b6f8 <vPortFree+0xb8>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4013      	ands	r3, r2
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10a      	bne.n	800b684 <vPortFree+0x44>
	__asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	60fb      	str	r3, [r7, #12]
}
 800b680:	bf00      	nop
 800b682:	e7fe      	b.n	800b682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00a      	beq.n	800b6a2 <vPortFree+0x62>
	__asm volatile
 800b68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b690:	f383 8811 	msr	BASEPRI, r3
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	60bb      	str	r3, [r7, #8]
}
 800b69e:	bf00      	nop
 800b6a0:	e7fe      	b.n	800b6a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	685a      	ldr	r2, [r3, #4]
 800b6a6:	4b14      	ldr	r3, [pc, #80]	; (800b6f8 <vPortFree+0xb8>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4013      	ands	r3, r2
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d01e      	beq.n	800b6ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d11a      	bne.n	800b6ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	685a      	ldr	r2, [r3, #4]
 800b6bc:	4b0e      	ldr	r3, [pc, #56]	; (800b6f8 <vPortFree+0xb8>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	43db      	mvns	r3, r3
 800b6c2:	401a      	ands	r2, r3
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b6c8:	f7fe fcaa 	bl	800a020 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	685a      	ldr	r2, [r3, #4]
 800b6d0:	4b0a      	ldr	r3, [pc, #40]	; (800b6fc <vPortFree+0xbc>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	4a09      	ldr	r2, [pc, #36]	; (800b6fc <vPortFree+0xbc>)
 800b6d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6da:	6938      	ldr	r0, [r7, #16]
 800b6dc:	f000 f81e 	bl	800b71c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b6e0:	4b07      	ldr	r3, [pc, #28]	; (800b700 <vPortFree+0xc0>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	4a06      	ldr	r2, [pc, #24]	; (800b700 <vPortFree+0xc0>)
 800b6e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b6ea:	f7fe fca7 	bl	800a03c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b6ee:	bf00      	nop
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	200061e8 	.word	0x200061e8
 800b6fc:	200061d8 	.word	0x200061d8
 800b700:	200061e4 	.word	0x200061e4

0800b704 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800b704:	b480      	push	{r7}
 800b706:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800b708:	4b03      	ldr	r3, [pc, #12]	; (800b718 <xPortGetFreeHeapSize+0x14>)
 800b70a:	681b      	ldr	r3, [r3, #0]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	200061d8 	.word	0x200061d8

0800b71c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b71c:	b480      	push	{r7}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b724:	4b28      	ldr	r3, [pc, #160]	; (800b7c8 <prvInsertBlockIntoFreeList+0xac>)
 800b726:	60fb      	str	r3, [r7, #12]
 800b728:	e002      	b.n	800b730 <prvInsertBlockIntoFreeList+0x14>
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	60fb      	str	r3, [r7, #12]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	429a      	cmp	r2, r3
 800b738:	d8f7      	bhi.n	800b72a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	4413      	add	r3, r2
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d108      	bne.n	800b75e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	685a      	ldr	r2, [r3, #4]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	441a      	add	r2, r3
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	441a      	add	r2, r3
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d118      	bne.n	800b7a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	4b15      	ldr	r3, [pc, #84]	; (800b7cc <prvInsertBlockIntoFreeList+0xb0>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d00d      	beq.n	800b79a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	685a      	ldr	r2, [r3, #4]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	441a      	add	r2, r3
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	601a      	str	r2, [r3, #0]
 800b798:	e008      	b.n	800b7ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b79a:	4b0c      	ldr	r3, [pc, #48]	; (800b7cc <prvInsertBlockIntoFreeList+0xb0>)
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	601a      	str	r2, [r3, #0]
 800b7a2:	e003      	b.n	800b7ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d002      	beq.n	800b7ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7ba:	bf00      	nop
 800b7bc:	3714      	adds	r7, #20
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	200061cc 	.word	0x200061cc
 800b7cc:	200061d4 	.word	0x200061d4

0800b7d0 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b08f      	sub	sp, #60	; 0x3c
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800b7e4:	4b5a      	ldr	r3, [pc, #360]	; (800b950 <vPortDefineHeapRegions+0x180>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00a      	beq.n	800b802 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800b7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f0:	f383 8811 	msr	BASEPRI, r3
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	617b      	str	r3, [r7, #20]
}
 800b7fe:	bf00      	nop
 800b800:	e7fe      	b.n	800b800 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800b802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b804:	00db      	lsls	r3, r3, #3
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	4413      	add	r3, r2
 800b80a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800b80c:	e07d      	b.n	800b90a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800b80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81c:	f003 0307 	and.w	r3, r3, #7
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00e      	beq.n	800b842 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800b824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b826:	3307      	adds	r3, #7
 800b828:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800b82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82c:	f023 0307 	bic.w	r3, r3, #7
 800b830:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800b832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	461a      	mov	r2, r3
 800b838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b83e:	4413      	add	r3, r2
 800b840:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800b842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b844:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800b846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d106      	bne.n	800b85a <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	4a41      	ldr	r2, [pc, #260]	; (800b954 <vPortDefineHeapRegions+0x184>)
 800b850:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800b852:	4b40      	ldr	r3, [pc, #256]	; (800b954 <vPortDefineHeapRegions+0x184>)
 800b854:	2200      	movs	r2, #0
 800b856:	605a      	str	r2, [r3, #4]
 800b858:	e01f      	b.n	800b89a <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800b85a:	4b3d      	ldr	r3, [pc, #244]	; (800b950 <vPortDefineHeapRegions+0x180>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10a      	bne.n	800b878 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800b862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b866:	f383 8811 	msr	BASEPRI, r3
 800b86a:	f3bf 8f6f 	isb	sy
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	613b      	str	r3, [r7, #16]
}
 800b874:	bf00      	nop
 800b876:	e7fe      	b.n	800b876 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800b878:	4b35      	ldr	r3, [pc, #212]	; (800b950 <vPortDefineHeapRegions+0x180>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	461a      	mov	r2, r3
 800b87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b880:	4293      	cmp	r3, r2
 800b882:	d80a      	bhi.n	800b89a <vPortDefineHeapRegions+0xca>
	__asm volatile
 800b884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b888:	f383 8811 	msr	BASEPRI, r3
 800b88c:	f3bf 8f6f 	isb	sy
 800b890:	f3bf 8f4f 	dsb	sy
 800b894:	60fb      	str	r3, [r7, #12]
}
 800b896:	bf00      	nop
 800b898:	e7fe      	b.n	800b898 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800b89a:	4b2d      	ldr	r3, [pc, #180]	; (800b950 <vPortDefineHeapRegions+0x180>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800b8a0:	69fa      	ldr	r2, [r7, #28]
 800b8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a4:	4413      	add	r3, r2
 800b8a6:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800b8a8:	2208      	movs	r2, #8
 800b8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ac:	1a9b      	subs	r3, r3, r2
 800b8ae:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800b8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b2:	f023 0307 	bic.w	r3, r3, #7
 800b8b6:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800b8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ba:	4a25      	ldr	r2, [pc, #148]	; (800b950 <vPortDefineHeapRegions+0x180>)
 800b8bc:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800b8be:	4b24      	ldr	r3, [pc, #144]	; (800b950 <vPortDefineHeapRegions+0x180>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800b8c6:	4b22      	ldr	r3, [pc, #136]	; (800b950 <vPortDefineHeapRegions+0x180>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800b8d2:	6a3b      	ldr	r3, [r7, #32]
 800b8d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8d6:	1ad2      	subs	r2, r2, r3
 800b8d8:	6a3b      	ldr	r3, [r7, #32]
 800b8da:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800b8dc:	4b1c      	ldr	r3, [pc, #112]	; (800b950 <vPortDefineHeapRegions+0x180>)
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	6a3b      	ldr	r3, [r7, #32]
 800b8e2:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d002      	beq.n	800b8f0 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	6a3a      	ldr	r2, [r7, #32]
 800b8ee:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800b8f0:	6a3b      	ldr	r3, [r7, #32]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8f6:	4413      	add	r3, r2
 800b8f8:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800b8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800b900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b902:	00db      	lsls	r3, r3, #3
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	4413      	add	r3, r2
 800b908:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	f47f af7d 	bne.w	800b80e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800b914:	4a10      	ldr	r2, [pc, #64]	; (800b958 <vPortDefineHeapRegions+0x188>)
 800b916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b918:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800b91a:	4a10      	ldr	r2, [pc, #64]	; (800b95c <vPortDefineHeapRegions+0x18c>)
 800b91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800b920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b922:	2b00      	cmp	r3, #0
 800b924:	d10a      	bne.n	800b93c <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800b926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92a:	f383 8811 	msr	BASEPRI, r3
 800b92e:	f3bf 8f6f 	isb	sy
 800b932:	f3bf 8f4f 	dsb	sy
 800b936:	60bb      	str	r3, [r7, #8]
}
 800b938:	bf00      	nop
 800b93a:	e7fe      	b.n	800b93a <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b93c:	4b08      	ldr	r3, [pc, #32]	; (800b960 <vPortDefineHeapRegions+0x190>)
 800b93e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b942:	601a      	str	r2, [r3, #0]
}
 800b944:	bf00      	nop
 800b946:	373c      	adds	r7, #60	; 0x3c
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr
 800b950:	200061d4 	.word	0x200061d4
 800b954:	200061cc 	.word	0x200061cc
 800b958:	200061dc 	.word	0x200061dc
 800b95c:	200061d8 	.word	0x200061d8
 800b960:	200061e8 	.word	0x200061e8

0800b964 <atol>:
 800b964:	220a      	movs	r2, #10
 800b966:	2100      	movs	r1, #0
 800b968:	f000 bb5e 	b.w	800c028 <strtol>

0800b96c <calloc>:
 800b96c:	4b02      	ldr	r3, [pc, #8]	; (800b978 <calloc+0xc>)
 800b96e:	460a      	mov	r2, r1
 800b970:	4601      	mov	r1, r0
 800b972:	6818      	ldr	r0, [r3, #0]
 800b974:	f000 b8f8 	b.w	800bb68 <_calloc_r>
 800b978:	20000098 	.word	0x20000098

0800b97c <__errno>:
 800b97c:	4b01      	ldr	r3, [pc, #4]	; (800b984 <__errno+0x8>)
 800b97e:	6818      	ldr	r0, [r3, #0]
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	20000098 	.word	0x20000098

0800b988 <gmtime_r>:
 800b988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b98c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800b990:	460c      	mov	r4, r1
 800b992:	4a4f      	ldr	r2, [pc, #316]	; (800bad0 <gmtime_r+0x148>)
 800b994:	2300      	movs	r3, #0
 800b996:	4630      	mov	r0, r6
 800b998:	4639      	mov	r1, r7
 800b99a:	f7f4 ff77 	bl	800088c <__aeabi_ldivmod>
 800b99e:	4639      	mov	r1, r7
 800b9a0:	4605      	mov	r5, r0
 800b9a2:	4a4b      	ldr	r2, [pc, #300]	; (800bad0 <gmtime_r+0x148>)
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	f7f4 ff70 	bl	800088c <__aeabi_ldivmod>
 800b9ac:	2a00      	cmp	r2, #0
 800b9ae:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800b9b2:	bfb7      	itett	lt
 800b9b4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800b9b8:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800b9bc:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800b9c0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800b9c4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800b9c8:	fbb2 f1f0 	udiv	r1, r2, r0
 800b9cc:	fb00 2211 	mls	r2, r0, r1, r2
 800b9d0:	203c      	movs	r0, #60	; 0x3c
 800b9d2:	60a1      	str	r1, [r4, #8]
 800b9d4:	fbb2 f1f0 	udiv	r1, r2, r0
 800b9d8:	fb00 2211 	mls	r2, r0, r1, r2
 800b9dc:	6061      	str	r1, [r4, #4]
 800b9de:	6022      	str	r2, [r4, #0]
 800b9e0:	2107      	movs	r1, #7
 800b9e2:	1cda      	adds	r2, r3, #3
 800b9e4:	fb92 f1f1 	sdiv	r1, r2, r1
 800b9e8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b9ec:	1a52      	subs	r2, r2, r1
 800b9ee:	bf48      	it	mi
 800b9f0:	3207      	addmi	r2, #7
 800b9f2:	4d38      	ldr	r5, [pc, #224]	; (800bad4 <gmtime_r+0x14c>)
 800b9f4:	4838      	ldr	r0, [pc, #224]	; (800bad8 <gmtime_r+0x150>)
 800b9f6:	61a2      	str	r2, [r4, #24]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	bfb7      	itett	lt
 800b9fc:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800ba00:	fb93 f5f5 	sdivge	r5, r3, r5
 800ba04:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800ba08:	fb92 f5f5 	sdivlt	r5, r2, r5
 800ba0c:	fb00 3005 	mla	r0, r0, r5, r3
 800ba10:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800ba14:	fbb0 f2f2 	udiv	r2, r0, r2
 800ba18:	4402      	add	r2, r0
 800ba1a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800ba1e:	fbb0 f1f3 	udiv	r1, r0, r3
 800ba22:	1a52      	subs	r2, r2, r1
 800ba24:	f240 1c6d 	movw	ip, #365	; 0x16d
 800ba28:	492c      	ldr	r1, [pc, #176]	; (800badc <gmtime_r+0x154>)
 800ba2a:	fbb0 f1f1 	udiv	r1, r0, r1
 800ba2e:	2764      	movs	r7, #100	; 0x64
 800ba30:	1a52      	subs	r2, r2, r1
 800ba32:	fbb2 f1fc 	udiv	r1, r2, ip
 800ba36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba3a:	fbb1 f6f7 	udiv	r6, r1, r7
 800ba3e:	1af3      	subs	r3, r6, r3
 800ba40:	4403      	add	r3, r0
 800ba42:	fb0c 3311 	mls	r3, ip, r1, r3
 800ba46:	2299      	movs	r2, #153	; 0x99
 800ba48:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800ba4c:	f10e 0e02 	add.w	lr, lr, #2
 800ba50:	f103 0c01 	add.w	ip, r3, #1
 800ba54:	fbbe f0f2 	udiv	r0, lr, r2
 800ba58:	4342      	muls	r2, r0
 800ba5a:	3202      	adds	r2, #2
 800ba5c:	f04f 0805 	mov.w	r8, #5
 800ba60:	fbb2 f2f8 	udiv	r2, r2, r8
 800ba64:	ebac 0c02 	sub.w	ip, ip, r2
 800ba68:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800ba6c:	4596      	cmp	lr, r2
 800ba6e:	bf94      	ite	ls
 800ba70:	2202      	movls	r2, #2
 800ba72:	f06f 0209 	mvnhi.w	r2, #9
 800ba76:	4410      	add	r0, r2
 800ba78:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ba7c:	fb02 1505 	mla	r5, r2, r5, r1
 800ba80:	2801      	cmp	r0, #1
 800ba82:	bf98      	it	ls
 800ba84:	3501      	addls	r5, #1
 800ba86:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800ba8a:	d30d      	bcc.n	800baa8 <gmtime_r+0x120>
 800ba8c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ba90:	61e3      	str	r3, [r4, #28]
 800ba92:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800ba96:	2300      	movs	r3, #0
 800ba98:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800ba9c:	f8c4 c00c 	str.w	ip, [r4, #12]
 800baa0:	6223      	str	r3, [r4, #32]
 800baa2:	4620      	mov	r0, r4
 800baa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa8:	078a      	lsls	r2, r1, #30
 800baaa:	d102      	bne.n	800bab2 <gmtime_r+0x12a>
 800baac:	fb07 1616 	mls	r6, r7, r6, r1
 800bab0:	b95e      	cbnz	r6, 800baca <gmtime_r+0x142>
 800bab2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bab6:	fbb1 f6f2 	udiv	r6, r1, r2
 800baba:	fb02 1216 	mls	r2, r2, r6, r1
 800babe:	fab2 f282 	clz	r2, r2
 800bac2:	0952      	lsrs	r2, r2, #5
 800bac4:	333b      	adds	r3, #59	; 0x3b
 800bac6:	4413      	add	r3, r2
 800bac8:	e7e2      	b.n	800ba90 <gmtime_r+0x108>
 800baca:	2201      	movs	r2, #1
 800bacc:	e7fa      	b.n	800bac4 <gmtime_r+0x13c>
 800bace:	bf00      	nop
 800bad0:	00015180 	.word	0x00015180
 800bad4:	00023ab1 	.word	0x00023ab1
 800bad8:	fffdc54f 	.word	0xfffdc54f
 800badc:	00023ab0 	.word	0x00023ab0

0800bae0 <__libc_init_array>:
 800bae0:	b570      	push	{r4, r5, r6, lr}
 800bae2:	4d0d      	ldr	r5, [pc, #52]	; (800bb18 <__libc_init_array+0x38>)
 800bae4:	4c0d      	ldr	r4, [pc, #52]	; (800bb1c <__libc_init_array+0x3c>)
 800bae6:	1b64      	subs	r4, r4, r5
 800bae8:	10a4      	asrs	r4, r4, #2
 800baea:	2600      	movs	r6, #0
 800baec:	42a6      	cmp	r6, r4
 800baee:	d109      	bne.n	800bb04 <__libc_init_array+0x24>
 800baf0:	4d0b      	ldr	r5, [pc, #44]	; (800bb20 <__libc_init_array+0x40>)
 800baf2:	4c0c      	ldr	r4, [pc, #48]	; (800bb24 <__libc_init_array+0x44>)
 800baf4:	f000 fe2a 	bl	800c74c <_init>
 800baf8:	1b64      	subs	r4, r4, r5
 800bafa:	10a4      	asrs	r4, r4, #2
 800bafc:	2600      	movs	r6, #0
 800bafe:	42a6      	cmp	r6, r4
 800bb00:	d105      	bne.n	800bb0e <__libc_init_array+0x2e>
 800bb02:	bd70      	pop	{r4, r5, r6, pc}
 800bb04:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb08:	4798      	blx	r3
 800bb0a:	3601      	adds	r6, #1
 800bb0c:	e7ee      	b.n	800baec <__libc_init_array+0xc>
 800bb0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb12:	4798      	blx	r3
 800bb14:	3601      	adds	r6, #1
 800bb16:	e7f2      	b.n	800bafe <__libc_init_array+0x1e>
 800bb18:	0800ef08 	.word	0x0800ef08
 800bb1c:	0800ef08 	.word	0x0800ef08
 800bb20:	0800ef08 	.word	0x0800ef08
 800bb24:	0800ef0c 	.word	0x0800ef0c

0800bb28 <__retarget_lock_acquire_recursive>:
 800bb28:	4770      	bx	lr

0800bb2a <__retarget_lock_release_recursive>:
 800bb2a:	4770      	bx	lr

0800bb2c <free>:
 800bb2c:	4b02      	ldr	r3, [pc, #8]	; (800bb38 <free+0xc>)
 800bb2e:	4601      	mov	r1, r0
 800bb30:	6818      	ldr	r0, [r3, #0]
 800bb32:	f000 b82f 	b.w	800bb94 <_free_r>
 800bb36:	bf00      	nop
 800bb38:	20000098 	.word	0x20000098

0800bb3c <memcpy>:
 800bb3c:	440a      	add	r2, r1
 800bb3e:	4291      	cmp	r1, r2
 800bb40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bb44:	d100      	bne.n	800bb48 <memcpy+0xc>
 800bb46:	4770      	bx	lr
 800bb48:	b510      	push	{r4, lr}
 800bb4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb52:	4291      	cmp	r1, r2
 800bb54:	d1f9      	bne.n	800bb4a <memcpy+0xe>
 800bb56:	bd10      	pop	{r4, pc}

0800bb58 <memset>:
 800bb58:	4402      	add	r2, r0
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d100      	bne.n	800bb62 <memset+0xa>
 800bb60:	4770      	bx	lr
 800bb62:	f803 1b01 	strb.w	r1, [r3], #1
 800bb66:	e7f9      	b.n	800bb5c <memset+0x4>

0800bb68 <_calloc_r>:
 800bb68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb6a:	fba1 2402 	umull	r2, r4, r1, r2
 800bb6e:	b94c      	cbnz	r4, 800bb84 <_calloc_r+0x1c>
 800bb70:	4611      	mov	r1, r2
 800bb72:	9201      	str	r2, [sp, #4]
 800bb74:	f000 f87a 	bl	800bc6c <_malloc_r>
 800bb78:	9a01      	ldr	r2, [sp, #4]
 800bb7a:	4605      	mov	r5, r0
 800bb7c:	b930      	cbnz	r0, 800bb8c <_calloc_r+0x24>
 800bb7e:	4628      	mov	r0, r5
 800bb80:	b003      	add	sp, #12
 800bb82:	bd30      	pop	{r4, r5, pc}
 800bb84:	220c      	movs	r2, #12
 800bb86:	6002      	str	r2, [r0, #0]
 800bb88:	2500      	movs	r5, #0
 800bb8a:	e7f8      	b.n	800bb7e <_calloc_r+0x16>
 800bb8c:	4621      	mov	r1, r4
 800bb8e:	f7ff ffe3 	bl	800bb58 <memset>
 800bb92:	e7f4      	b.n	800bb7e <_calloc_r+0x16>

0800bb94 <_free_r>:
 800bb94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb96:	2900      	cmp	r1, #0
 800bb98:	d044      	beq.n	800bc24 <_free_r+0x90>
 800bb9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb9e:	9001      	str	r0, [sp, #4]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f1a1 0404 	sub.w	r4, r1, #4
 800bba6:	bfb8      	it	lt
 800bba8:	18e4      	addlt	r4, r4, r3
 800bbaa:	f000 fa81 	bl	800c0b0 <__malloc_lock>
 800bbae:	4a1e      	ldr	r2, [pc, #120]	; (800bc28 <_free_r+0x94>)
 800bbb0:	9801      	ldr	r0, [sp, #4]
 800bbb2:	6813      	ldr	r3, [r2, #0]
 800bbb4:	b933      	cbnz	r3, 800bbc4 <_free_r+0x30>
 800bbb6:	6063      	str	r3, [r4, #4]
 800bbb8:	6014      	str	r4, [r2, #0]
 800bbba:	b003      	add	sp, #12
 800bbbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbc0:	f000 ba7c 	b.w	800c0bc <__malloc_unlock>
 800bbc4:	42a3      	cmp	r3, r4
 800bbc6:	d908      	bls.n	800bbda <_free_r+0x46>
 800bbc8:	6825      	ldr	r5, [r4, #0]
 800bbca:	1961      	adds	r1, r4, r5
 800bbcc:	428b      	cmp	r3, r1
 800bbce:	bf01      	itttt	eq
 800bbd0:	6819      	ldreq	r1, [r3, #0]
 800bbd2:	685b      	ldreq	r3, [r3, #4]
 800bbd4:	1949      	addeq	r1, r1, r5
 800bbd6:	6021      	streq	r1, [r4, #0]
 800bbd8:	e7ed      	b.n	800bbb6 <_free_r+0x22>
 800bbda:	461a      	mov	r2, r3
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	b10b      	cbz	r3, 800bbe4 <_free_r+0x50>
 800bbe0:	42a3      	cmp	r3, r4
 800bbe2:	d9fa      	bls.n	800bbda <_free_r+0x46>
 800bbe4:	6811      	ldr	r1, [r2, #0]
 800bbe6:	1855      	adds	r5, r2, r1
 800bbe8:	42a5      	cmp	r5, r4
 800bbea:	d10b      	bne.n	800bc04 <_free_r+0x70>
 800bbec:	6824      	ldr	r4, [r4, #0]
 800bbee:	4421      	add	r1, r4
 800bbf0:	1854      	adds	r4, r2, r1
 800bbf2:	42a3      	cmp	r3, r4
 800bbf4:	6011      	str	r1, [r2, #0]
 800bbf6:	d1e0      	bne.n	800bbba <_free_r+0x26>
 800bbf8:	681c      	ldr	r4, [r3, #0]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	6053      	str	r3, [r2, #4]
 800bbfe:	4421      	add	r1, r4
 800bc00:	6011      	str	r1, [r2, #0]
 800bc02:	e7da      	b.n	800bbba <_free_r+0x26>
 800bc04:	d902      	bls.n	800bc0c <_free_r+0x78>
 800bc06:	230c      	movs	r3, #12
 800bc08:	6003      	str	r3, [r0, #0]
 800bc0a:	e7d6      	b.n	800bbba <_free_r+0x26>
 800bc0c:	6825      	ldr	r5, [r4, #0]
 800bc0e:	1961      	adds	r1, r4, r5
 800bc10:	428b      	cmp	r3, r1
 800bc12:	bf04      	itt	eq
 800bc14:	6819      	ldreq	r1, [r3, #0]
 800bc16:	685b      	ldreq	r3, [r3, #4]
 800bc18:	6063      	str	r3, [r4, #4]
 800bc1a:	bf04      	itt	eq
 800bc1c:	1949      	addeq	r1, r1, r5
 800bc1e:	6021      	streq	r1, [r4, #0]
 800bc20:	6054      	str	r4, [r2, #4]
 800bc22:	e7ca      	b.n	800bbba <_free_r+0x26>
 800bc24:	b003      	add	sp, #12
 800bc26:	bd30      	pop	{r4, r5, pc}
 800bc28:	200061f0 	.word	0x200061f0

0800bc2c <sbrk_aligned>:
 800bc2c:	b570      	push	{r4, r5, r6, lr}
 800bc2e:	4e0e      	ldr	r6, [pc, #56]	; (800bc68 <sbrk_aligned+0x3c>)
 800bc30:	460c      	mov	r4, r1
 800bc32:	6831      	ldr	r1, [r6, #0]
 800bc34:	4605      	mov	r5, r0
 800bc36:	b911      	cbnz	r1, 800bc3e <sbrk_aligned+0x12>
 800bc38:	f000 f8f6 	bl	800be28 <_sbrk_r>
 800bc3c:	6030      	str	r0, [r6, #0]
 800bc3e:	4621      	mov	r1, r4
 800bc40:	4628      	mov	r0, r5
 800bc42:	f000 f8f1 	bl	800be28 <_sbrk_r>
 800bc46:	1c43      	adds	r3, r0, #1
 800bc48:	d00a      	beq.n	800bc60 <sbrk_aligned+0x34>
 800bc4a:	1cc4      	adds	r4, r0, #3
 800bc4c:	f024 0403 	bic.w	r4, r4, #3
 800bc50:	42a0      	cmp	r0, r4
 800bc52:	d007      	beq.n	800bc64 <sbrk_aligned+0x38>
 800bc54:	1a21      	subs	r1, r4, r0
 800bc56:	4628      	mov	r0, r5
 800bc58:	f000 f8e6 	bl	800be28 <_sbrk_r>
 800bc5c:	3001      	adds	r0, #1
 800bc5e:	d101      	bne.n	800bc64 <sbrk_aligned+0x38>
 800bc60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bc64:	4620      	mov	r0, r4
 800bc66:	bd70      	pop	{r4, r5, r6, pc}
 800bc68:	200061f4 	.word	0x200061f4

0800bc6c <_malloc_r>:
 800bc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc70:	1ccd      	adds	r5, r1, #3
 800bc72:	f025 0503 	bic.w	r5, r5, #3
 800bc76:	3508      	adds	r5, #8
 800bc78:	2d0c      	cmp	r5, #12
 800bc7a:	bf38      	it	cc
 800bc7c:	250c      	movcc	r5, #12
 800bc7e:	2d00      	cmp	r5, #0
 800bc80:	4607      	mov	r7, r0
 800bc82:	db01      	blt.n	800bc88 <_malloc_r+0x1c>
 800bc84:	42a9      	cmp	r1, r5
 800bc86:	d905      	bls.n	800bc94 <_malloc_r+0x28>
 800bc88:	230c      	movs	r3, #12
 800bc8a:	603b      	str	r3, [r7, #0]
 800bc8c:	2600      	movs	r6, #0
 800bc8e:	4630      	mov	r0, r6
 800bc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc94:	4e2e      	ldr	r6, [pc, #184]	; (800bd50 <_malloc_r+0xe4>)
 800bc96:	f000 fa0b 	bl	800c0b0 <__malloc_lock>
 800bc9a:	6833      	ldr	r3, [r6, #0]
 800bc9c:	461c      	mov	r4, r3
 800bc9e:	bb34      	cbnz	r4, 800bcee <_malloc_r+0x82>
 800bca0:	4629      	mov	r1, r5
 800bca2:	4638      	mov	r0, r7
 800bca4:	f7ff ffc2 	bl	800bc2c <sbrk_aligned>
 800bca8:	1c43      	adds	r3, r0, #1
 800bcaa:	4604      	mov	r4, r0
 800bcac:	d14d      	bne.n	800bd4a <_malloc_r+0xde>
 800bcae:	6834      	ldr	r4, [r6, #0]
 800bcb0:	4626      	mov	r6, r4
 800bcb2:	2e00      	cmp	r6, #0
 800bcb4:	d140      	bne.n	800bd38 <_malloc_r+0xcc>
 800bcb6:	6823      	ldr	r3, [r4, #0]
 800bcb8:	4631      	mov	r1, r6
 800bcba:	4638      	mov	r0, r7
 800bcbc:	eb04 0803 	add.w	r8, r4, r3
 800bcc0:	f000 f8b2 	bl	800be28 <_sbrk_r>
 800bcc4:	4580      	cmp	r8, r0
 800bcc6:	d13a      	bne.n	800bd3e <_malloc_r+0xd2>
 800bcc8:	6821      	ldr	r1, [r4, #0]
 800bcca:	3503      	adds	r5, #3
 800bccc:	1a6d      	subs	r5, r5, r1
 800bcce:	f025 0503 	bic.w	r5, r5, #3
 800bcd2:	3508      	adds	r5, #8
 800bcd4:	2d0c      	cmp	r5, #12
 800bcd6:	bf38      	it	cc
 800bcd8:	250c      	movcc	r5, #12
 800bcda:	4629      	mov	r1, r5
 800bcdc:	4638      	mov	r0, r7
 800bcde:	f7ff ffa5 	bl	800bc2c <sbrk_aligned>
 800bce2:	3001      	adds	r0, #1
 800bce4:	d02b      	beq.n	800bd3e <_malloc_r+0xd2>
 800bce6:	6823      	ldr	r3, [r4, #0]
 800bce8:	442b      	add	r3, r5
 800bcea:	6023      	str	r3, [r4, #0]
 800bcec:	e00e      	b.n	800bd0c <_malloc_r+0xa0>
 800bcee:	6822      	ldr	r2, [r4, #0]
 800bcf0:	1b52      	subs	r2, r2, r5
 800bcf2:	d41e      	bmi.n	800bd32 <_malloc_r+0xc6>
 800bcf4:	2a0b      	cmp	r2, #11
 800bcf6:	d916      	bls.n	800bd26 <_malloc_r+0xba>
 800bcf8:	1961      	adds	r1, r4, r5
 800bcfa:	42a3      	cmp	r3, r4
 800bcfc:	6025      	str	r5, [r4, #0]
 800bcfe:	bf18      	it	ne
 800bd00:	6059      	strne	r1, [r3, #4]
 800bd02:	6863      	ldr	r3, [r4, #4]
 800bd04:	bf08      	it	eq
 800bd06:	6031      	streq	r1, [r6, #0]
 800bd08:	5162      	str	r2, [r4, r5]
 800bd0a:	604b      	str	r3, [r1, #4]
 800bd0c:	4638      	mov	r0, r7
 800bd0e:	f104 060b 	add.w	r6, r4, #11
 800bd12:	f000 f9d3 	bl	800c0bc <__malloc_unlock>
 800bd16:	f026 0607 	bic.w	r6, r6, #7
 800bd1a:	1d23      	adds	r3, r4, #4
 800bd1c:	1af2      	subs	r2, r6, r3
 800bd1e:	d0b6      	beq.n	800bc8e <_malloc_r+0x22>
 800bd20:	1b9b      	subs	r3, r3, r6
 800bd22:	50a3      	str	r3, [r4, r2]
 800bd24:	e7b3      	b.n	800bc8e <_malloc_r+0x22>
 800bd26:	6862      	ldr	r2, [r4, #4]
 800bd28:	42a3      	cmp	r3, r4
 800bd2a:	bf0c      	ite	eq
 800bd2c:	6032      	streq	r2, [r6, #0]
 800bd2e:	605a      	strne	r2, [r3, #4]
 800bd30:	e7ec      	b.n	800bd0c <_malloc_r+0xa0>
 800bd32:	4623      	mov	r3, r4
 800bd34:	6864      	ldr	r4, [r4, #4]
 800bd36:	e7b2      	b.n	800bc9e <_malloc_r+0x32>
 800bd38:	4634      	mov	r4, r6
 800bd3a:	6876      	ldr	r6, [r6, #4]
 800bd3c:	e7b9      	b.n	800bcb2 <_malloc_r+0x46>
 800bd3e:	230c      	movs	r3, #12
 800bd40:	603b      	str	r3, [r7, #0]
 800bd42:	4638      	mov	r0, r7
 800bd44:	f000 f9ba 	bl	800c0bc <__malloc_unlock>
 800bd48:	e7a1      	b.n	800bc8e <_malloc_r+0x22>
 800bd4a:	6025      	str	r5, [r4, #0]
 800bd4c:	e7de      	b.n	800bd0c <_malloc_r+0xa0>
 800bd4e:	bf00      	nop
 800bd50:	200061f0 	.word	0x200061f0

0800bd54 <cleanup_glue>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	460c      	mov	r4, r1
 800bd58:	6809      	ldr	r1, [r1, #0]
 800bd5a:	4605      	mov	r5, r0
 800bd5c:	b109      	cbz	r1, 800bd62 <cleanup_glue+0xe>
 800bd5e:	f7ff fff9 	bl	800bd54 <cleanup_glue>
 800bd62:	4621      	mov	r1, r4
 800bd64:	4628      	mov	r0, r5
 800bd66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd6a:	f7ff bf13 	b.w	800bb94 <_free_r>
	...

0800bd70 <_reclaim_reent>:
 800bd70:	4b2c      	ldr	r3, [pc, #176]	; (800be24 <_reclaim_reent+0xb4>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4283      	cmp	r3, r0
 800bd76:	b570      	push	{r4, r5, r6, lr}
 800bd78:	4604      	mov	r4, r0
 800bd7a:	d051      	beq.n	800be20 <_reclaim_reent+0xb0>
 800bd7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bd7e:	b143      	cbz	r3, 800bd92 <_reclaim_reent+0x22>
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d14a      	bne.n	800be1c <_reclaim_reent+0xac>
 800bd86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd88:	6819      	ldr	r1, [r3, #0]
 800bd8a:	b111      	cbz	r1, 800bd92 <_reclaim_reent+0x22>
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	f7ff ff01 	bl	800bb94 <_free_r>
 800bd92:	6961      	ldr	r1, [r4, #20]
 800bd94:	b111      	cbz	r1, 800bd9c <_reclaim_reent+0x2c>
 800bd96:	4620      	mov	r0, r4
 800bd98:	f7ff fefc 	bl	800bb94 <_free_r>
 800bd9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bd9e:	b111      	cbz	r1, 800bda6 <_reclaim_reent+0x36>
 800bda0:	4620      	mov	r0, r4
 800bda2:	f7ff fef7 	bl	800bb94 <_free_r>
 800bda6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bda8:	b111      	cbz	r1, 800bdb0 <_reclaim_reent+0x40>
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f7ff fef2 	bl	800bb94 <_free_r>
 800bdb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bdb2:	b111      	cbz	r1, 800bdba <_reclaim_reent+0x4a>
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f7ff feed 	bl	800bb94 <_free_r>
 800bdba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bdbc:	b111      	cbz	r1, 800bdc4 <_reclaim_reent+0x54>
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f7ff fee8 	bl	800bb94 <_free_r>
 800bdc4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bdc6:	b111      	cbz	r1, 800bdce <_reclaim_reent+0x5e>
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f7ff fee3 	bl	800bb94 <_free_r>
 800bdce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bdd0:	b111      	cbz	r1, 800bdd8 <_reclaim_reent+0x68>
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f7ff fede 	bl	800bb94 <_free_r>
 800bdd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdda:	b111      	cbz	r1, 800bde2 <_reclaim_reent+0x72>
 800bddc:	4620      	mov	r0, r4
 800bdde:	f7ff fed9 	bl	800bb94 <_free_r>
 800bde2:	69a3      	ldr	r3, [r4, #24]
 800bde4:	b1e3      	cbz	r3, 800be20 <_reclaim_reent+0xb0>
 800bde6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bde8:	4620      	mov	r0, r4
 800bdea:	4798      	blx	r3
 800bdec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bdee:	b1b9      	cbz	r1, 800be20 <_reclaim_reent+0xb0>
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bdf6:	f7ff bfad 	b.w	800bd54 <cleanup_glue>
 800bdfa:	5949      	ldr	r1, [r1, r5]
 800bdfc:	b941      	cbnz	r1, 800be10 <_reclaim_reent+0xa0>
 800bdfe:	3504      	adds	r5, #4
 800be00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be02:	2d80      	cmp	r5, #128	; 0x80
 800be04:	68d9      	ldr	r1, [r3, #12]
 800be06:	d1f8      	bne.n	800bdfa <_reclaim_reent+0x8a>
 800be08:	4620      	mov	r0, r4
 800be0a:	f7ff fec3 	bl	800bb94 <_free_r>
 800be0e:	e7ba      	b.n	800bd86 <_reclaim_reent+0x16>
 800be10:	680e      	ldr	r6, [r1, #0]
 800be12:	4620      	mov	r0, r4
 800be14:	f7ff febe 	bl	800bb94 <_free_r>
 800be18:	4631      	mov	r1, r6
 800be1a:	e7ef      	b.n	800bdfc <_reclaim_reent+0x8c>
 800be1c:	2500      	movs	r5, #0
 800be1e:	e7ef      	b.n	800be00 <_reclaim_reent+0x90>
 800be20:	bd70      	pop	{r4, r5, r6, pc}
 800be22:	bf00      	nop
 800be24:	20000098 	.word	0x20000098

0800be28 <_sbrk_r>:
 800be28:	b538      	push	{r3, r4, r5, lr}
 800be2a:	4d06      	ldr	r5, [pc, #24]	; (800be44 <_sbrk_r+0x1c>)
 800be2c:	2300      	movs	r3, #0
 800be2e:	4604      	mov	r4, r0
 800be30:	4608      	mov	r0, r1
 800be32:	602b      	str	r3, [r5, #0]
 800be34:	f7f7 fcb8 	bl	80037a8 <_sbrk>
 800be38:	1c43      	adds	r3, r0, #1
 800be3a:	d102      	bne.n	800be42 <_sbrk_r+0x1a>
 800be3c:	682b      	ldr	r3, [r5, #0]
 800be3e:	b103      	cbz	r3, 800be42 <_sbrk_r+0x1a>
 800be40:	6023      	str	r3, [r4, #0]
 800be42:	bd38      	pop	{r3, r4, r5, pc}
 800be44:	200061f8 	.word	0x200061f8

0800be48 <siprintf>:
 800be48:	b40e      	push	{r1, r2, r3}
 800be4a:	b500      	push	{lr}
 800be4c:	b09c      	sub	sp, #112	; 0x70
 800be4e:	ab1d      	add	r3, sp, #116	; 0x74
 800be50:	9002      	str	r0, [sp, #8]
 800be52:	9006      	str	r0, [sp, #24]
 800be54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be58:	4809      	ldr	r0, [pc, #36]	; (800be80 <siprintf+0x38>)
 800be5a:	9107      	str	r1, [sp, #28]
 800be5c:	9104      	str	r1, [sp, #16]
 800be5e:	4909      	ldr	r1, [pc, #36]	; (800be84 <siprintf+0x3c>)
 800be60:	f853 2b04 	ldr.w	r2, [r3], #4
 800be64:	9105      	str	r1, [sp, #20]
 800be66:	6800      	ldr	r0, [r0, #0]
 800be68:	9301      	str	r3, [sp, #4]
 800be6a:	a902      	add	r1, sp, #8
 800be6c:	f000 f988 	bl	800c180 <_svfiprintf_r>
 800be70:	9b02      	ldr	r3, [sp, #8]
 800be72:	2200      	movs	r2, #0
 800be74:	701a      	strb	r2, [r3, #0]
 800be76:	b01c      	add	sp, #112	; 0x70
 800be78:	f85d eb04 	ldr.w	lr, [sp], #4
 800be7c:	b003      	add	sp, #12
 800be7e:	4770      	bx	lr
 800be80:	20000098 	.word	0x20000098
 800be84:	ffff0208 	.word	0xffff0208

0800be88 <strcat>:
 800be88:	b510      	push	{r4, lr}
 800be8a:	4602      	mov	r2, r0
 800be8c:	7814      	ldrb	r4, [r2, #0]
 800be8e:	4613      	mov	r3, r2
 800be90:	3201      	adds	r2, #1
 800be92:	2c00      	cmp	r4, #0
 800be94:	d1fa      	bne.n	800be8c <strcat+0x4>
 800be96:	3b01      	subs	r3, #1
 800be98:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bea0:	2a00      	cmp	r2, #0
 800bea2:	d1f9      	bne.n	800be98 <strcat+0x10>
 800bea4:	bd10      	pop	{r4, pc}

0800bea6 <strchr>:
 800bea6:	b2c9      	uxtb	r1, r1
 800bea8:	4603      	mov	r3, r0
 800beaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800beae:	b11a      	cbz	r2, 800beb8 <strchr+0x12>
 800beb0:	428a      	cmp	r2, r1
 800beb2:	d1f9      	bne.n	800bea8 <strchr+0x2>
 800beb4:	4618      	mov	r0, r3
 800beb6:	4770      	bx	lr
 800beb8:	2900      	cmp	r1, #0
 800beba:	bf18      	it	ne
 800bebc:	2300      	movne	r3, #0
 800bebe:	e7f9      	b.n	800beb4 <strchr+0xe>

0800bec0 <strcpy>:
 800bec0:	4603      	mov	r3, r0
 800bec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bec6:	f803 2b01 	strb.w	r2, [r3], #1
 800beca:	2a00      	cmp	r2, #0
 800becc:	d1f9      	bne.n	800bec2 <strcpy+0x2>
 800bece:	4770      	bx	lr

0800bed0 <strncpy>:
 800bed0:	b510      	push	{r4, lr}
 800bed2:	3901      	subs	r1, #1
 800bed4:	4603      	mov	r3, r0
 800bed6:	b132      	cbz	r2, 800bee6 <strncpy+0x16>
 800bed8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bedc:	f803 4b01 	strb.w	r4, [r3], #1
 800bee0:	3a01      	subs	r2, #1
 800bee2:	2c00      	cmp	r4, #0
 800bee4:	d1f7      	bne.n	800bed6 <strncpy+0x6>
 800bee6:	441a      	add	r2, r3
 800bee8:	2100      	movs	r1, #0
 800beea:	4293      	cmp	r3, r2
 800beec:	d100      	bne.n	800bef0 <strncpy+0x20>
 800beee:	bd10      	pop	{r4, pc}
 800bef0:	f803 1b01 	strb.w	r1, [r3], #1
 800bef4:	e7f9      	b.n	800beea <strncpy+0x1a>

0800bef6 <strstr>:
 800bef6:	780a      	ldrb	r2, [r1, #0]
 800bef8:	b570      	push	{r4, r5, r6, lr}
 800befa:	b96a      	cbnz	r2, 800bf18 <strstr+0x22>
 800befc:	bd70      	pop	{r4, r5, r6, pc}
 800befe:	429a      	cmp	r2, r3
 800bf00:	d109      	bne.n	800bf16 <strstr+0x20>
 800bf02:	460c      	mov	r4, r1
 800bf04:	4605      	mov	r5, r0
 800bf06:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d0f6      	beq.n	800befc <strstr+0x6>
 800bf0e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800bf12:	429e      	cmp	r6, r3
 800bf14:	d0f7      	beq.n	800bf06 <strstr+0x10>
 800bf16:	3001      	adds	r0, #1
 800bf18:	7803      	ldrb	r3, [r0, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1ef      	bne.n	800befe <strstr+0x8>
 800bf1e:	4618      	mov	r0, r3
 800bf20:	e7ec      	b.n	800befc <strstr+0x6>
	...

0800bf24 <_strtol_l.constprop.0>:
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf2a:	d001      	beq.n	800bf30 <_strtol_l.constprop.0+0xc>
 800bf2c:	2b24      	cmp	r3, #36	; 0x24
 800bf2e:	d906      	bls.n	800bf3e <_strtol_l.constprop.0+0x1a>
 800bf30:	f7ff fd24 	bl	800b97c <__errno>
 800bf34:	2316      	movs	r3, #22
 800bf36:	6003      	str	r3, [r0, #0]
 800bf38:	2000      	movs	r0, #0
 800bf3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf3e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c024 <_strtol_l.constprop.0+0x100>
 800bf42:	460d      	mov	r5, r1
 800bf44:	462e      	mov	r6, r5
 800bf46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf4a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bf4e:	f017 0708 	ands.w	r7, r7, #8
 800bf52:	d1f7      	bne.n	800bf44 <_strtol_l.constprop.0+0x20>
 800bf54:	2c2d      	cmp	r4, #45	; 0x2d
 800bf56:	d132      	bne.n	800bfbe <_strtol_l.constprop.0+0x9a>
 800bf58:	782c      	ldrb	r4, [r5, #0]
 800bf5a:	2701      	movs	r7, #1
 800bf5c:	1cb5      	adds	r5, r6, #2
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d05b      	beq.n	800c01a <_strtol_l.constprop.0+0xf6>
 800bf62:	2b10      	cmp	r3, #16
 800bf64:	d109      	bne.n	800bf7a <_strtol_l.constprop.0+0x56>
 800bf66:	2c30      	cmp	r4, #48	; 0x30
 800bf68:	d107      	bne.n	800bf7a <_strtol_l.constprop.0+0x56>
 800bf6a:	782c      	ldrb	r4, [r5, #0]
 800bf6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bf70:	2c58      	cmp	r4, #88	; 0x58
 800bf72:	d14d      	bne.n	800c010 <_strtol_l.constprop.0+0xec>
 800bf74:	786c      	ldrb	r4, [r5, #1]
 800bf76:	2310      	movs	r3, #16
 800bf78:	3502      	adds	r5, #2
 800bf7a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bf7e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bf82:	f04f 0c00 	mov.w	ip, #0
 800bf86:	fbb8 f9f3 	udiv	r9, r8, r3
 800bf8a:	4666      	mov	r6, ip
 800bf8c:	fb03 8a19 	mls	sl, r3, r9, r8
 800bf90:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bf94:	f1be 0f09 	cmp.w	lr, #9
 800bf98:	d816      	bhi.n	800bfc8 <_strtol_l.constprop.0+0xa4>
 800bf9a:	4674      	mov	r4, lr
 800bf9c:	42a3      	cmp	r3, r4
 800bf9e:	dd24      	ble.n	800bfea <_strtol_l.constprop.0+0xc6>
 800bfa0:	f1bc 0f00 	cmp.w	ip, #0
 800bfa4:	db1e      	blt.n	800bfe4 <_strtol_l.constprop.0+0xc0>
 800bfa6:	45b1      	cmp	r9, r6
 800bfa8:	d31c      	bcc.n	800bfe4 <_strtol_l.constprop.0+0xc0>
 800bfaa:	d101      	bne.n	800bfb0 <_strtol_l.constprop.0+0x8c>
 800bfac:	45a2      	cmp	sl, r4
 800bfae:	db19      	blt.n	800bfe4 <_strtol_l.constprop.0+0xc0>
 800bfb0:	fb06 4603 	mla	r6, r6, r3, r4
 800bfb4:	f04f 0c01 	mov.w	ip, #1
 800bfb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfbc:	e7e8      	b.n	800bf90 <_strtol_l.constprop.0+0x6c>
 800bfbe:	2c2b      	cmp	r4, #43	; 0x2b
 800bfc0:	bf04      	itt	eq
 800bfc2:	782c      	ldrbeq	r4, [r5, #0]
 800bfc4:	1cb5      	addeq	r5, r6, #2
 800bfc6:	e7ca      	b.n	800bf5e <_strtol_l.constprop.0+0x3a>
 800bfc8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bfcc:	f1be 0f19 	cmp.w	lr, #25
 800bfd0:	d801      	bhi.n	800bfd6 <_strtol_l.constprop.0+0xb2>
 800bfd2:	3c37      	subs	r4, #55	; 0x37
 800bfd4:	e7e2      	b.n	800bf9c <_strtol_l.constprop.0+0x78>
 800bfd6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bfda:	f1be 0f19 	cmp.w	lr, #25
 800bfde:	d804      	bhi.n	800bfea <_strtol_l.constprop.0+0xc6>
 800bfe0:	3c57      	subs	r4, #87	; 0x57
 800bfe2:	e7db      	b.n	800bf9c <_strtol_l.constprop.0+0x78>
 800bfe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800bfe8:	e7e6      	b.n	800bfb8 <_strtol_l.constprop.0+0x94>
 800bfea:	f1bc 0f00 	cmp.w	ip, #0
 800bfee:	da05      	bge.n	800bffc <_strtol_l.constprop.0+0xd8>
 800bff0:	2322      	movs	r3, #34	; 0x22
 800bff2:	6003      	str	r3, [r0, #0]
 800bff4:	4646      	mov	r6, r8
 800bff6:	b942      	cbnz	r2, 800c00a <_strtol_l.constprop.0+0xe6>
 800bff8:	4630      	mov	r0, r6
 800bffa:	e79e      	b.n	800bf3a <_strtol_l.constprop.0+0x16>
 800bffc:	b107      	cbz	r7, 800c000 <_strtol_l.constprop.0+0xdc>
 800bffe:	4276      	negs	r6, r6
 800c000:	2a00      	cmp	r2, #0
 800c002:	d0f9      	beq.n	800bff8 <_strtol_l.constprop.0+0xd4>
 800c004:	f1bc 0f00 	cmp.w	ip, #0
 800c008:	d000      	beq.n	800c00c <_strtol_l.constprop.0+0xe8>
 800c00a:	1e69      	subs	r1, r5, #1
 800c00c:	6011      	str	r1, [r2, #0]
 800c00e:	e7f3      	b.n	800bff8 <_strtol_l.constprop.0+0xd4>
 800c010:	2430      	movs	r4, #48	; 0x30
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1b1      	bne.n	800bf7a <_strtol_l.constprop.0+0x56>
 800c016:	2308      	movs	r3, #8
 800c018:	e7af      	b.n	800bf7a <_strtol_l.constprop.0+0x56>
 800c01a:	2c30      	cmp	r4, #48	; 0x30
 800c01c:	d0a5      	beq.n	800bf6a <_strtol_l.constprop.0+0x46>
 800c01e:	230a      	movs	r3, #10
 800c020:	e7ab      	b.n	800bf7a <_strtol_l.constprop.0+0x56>
 800c022:	bf00      	nop
 800c024:	0800edcd 	.word	0x0800edcd

0800c028 <strtol>:
 800c028:	4613      	mov	r3, r2
 800c02a:	460a      	mov	r2, r1
 800c02c:	4601      	mov	r1, r0
 800c02e:	4802      	ldr	r0, [pc, #8]	; (800c038 <strtol+0x10>)
 800c030:	6800      	ldr	r0, [r0, #0]
 800c032:	f7ff bf77 	b.w	800bf24 <_strtol_l.constprop.0>
 800c036:	bf00      	nop
 800c038:	20000098 	.word	0x20000098

0800c03c <_vsniprintf_r>:
 800c03c:	b530      	push	{r4, r5, lr}
 800c03e:	4614      	mov	r4, r2
 800c040:	2c00      	cmp	r4, #0
 800c042:	b09b      	sub	sp, #108	; 0x6c
 800c044:	4605      	mov	r5, r0
 800c046:	461a      	mov	r2, r3
 800c048:	da05      	bge.n	800c056 <_vsniprintf_r+0x1a>
 800c04a:	238b      	movs	r3, #139	; 0x8b
 800c04c:	6003      	str	r3, [r0, #0]
 800c04e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c052:	b01b      	add	sp, #108	; 0x6c
 800c054:	bd30      	pop	{r4, r5, pc}
 800c056:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c05a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c05e:	bf14      	ite	ne
 800c060:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c064:	4623      	moveq	r3, r4
 800c066:	9302      	str	r3, [sp, #8]
 800c068:	9305      	str	r3, [sp, #20]
 800c06a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c06e:	9100      	str	r1, [sp, #0]
 800c070:	9104      	str	r1, [sp, #16]
 800c072:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c076:	4669      	mov	r1, sp
 800c078:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c07a:	f000 f881 	bl	800c180 <_svfiprintf_r>
 800c07e:	1c43      	adds	r3, r0, #1
 800c080:	bfbc      	itt	lt
 800c082:	238b      	movlt	r3, #139	; 0x8b
 800c084:	602b      	strlt	r3, [r5, #0]
 800c086:	2c00      	cmp	r4, #0
 800c088:	d0e3      	beq.n	800c052 <_vsniprintf_r+0x16>
 800c08a:	9b00      	ldr	r3, [sp, #0]
 800c08c:	2200      	movs	r2, #0
 800c08e:	701a      	strb	r2, [r3, #0]
 800c090:	e7df      	b.n	800c052 <_vsniprintf_r+0x16>
	...

0800c094 <vsniprintf>:
 800c094:	b507      	push	{r0, r1, r2, lr}
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	4613      	mov	r3, r2
 800c09a:	460a      	mov	r2, r1
 800c09c:	4601      	mov	r1, r0
 800c09e:	4803      	ldr	r0, [pc, #12]	; (800c0ac <vsniprintf+0x18>)
 800c0a0:	6800      	ldr	r0, [r0, #0]
 800c0a2:	f7ff ffcb 	bl	800c03c <_vsniprintf_r>
 800c0a6:	b003      	add	sp, #12
 800c0a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0ac:	20000098 	.word	0x20000098

0800c0b0 <__malloc_lock>:
 800c0b0:	4801      	ldr	r0, [pc, #4]	; (800c0b8 <__malloc_lock+0x8>)
 800c0b2:	f7ff bd39 	b.w	800bb28 <__retarget_lock_acquire_recursive>
 800c0b6:	bf00      	nop
 800c0b8:	200061ec 	.word	0x200061ec

0800c0bc <__malloc_unlock>:
 800c0bc:	4801      	ldr	r0, [pc, #4]	; (800c0c4 <__malloc_unlock+0x8>)
 800c0be:	f7ff bd34 	b.w	800bb2a <__retarget_lock_release_recursive>
 800c0c2:	bf00      	nop
 800c0c4:	200061ec 	.word	0x200061ec

0800c0c8 <__ssputs_r>:
 800c0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0cc:	688e      	ldr	r6, [r1, #8]
 800c0ce:	429e      	cmp	r6, r3
 800c0d0:	4682      	mov	sl, r0
 800c0d2:	460c      	mov	r4, r1
 800c0d4:	4690      	mov	r8, r2
 800c0d6:	461f      	mov	r7, r3
 800c0d8:	d838      	bhi.n	800c14c <__ssputs_r+0x84>
 800c0da:	898a      	ldrh	r2, [r1, #12]
 800c0dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0e0:	d032      	beq.n	800c148 <__ssputs_r+0x80>
 800c0e2:	6825      	ldr	r5, [r4, #0]
 800c0e4:	6909      	ldr	r1, [r1, #16]
 800c0e6:	eba5 0901 	sub.w	r9, r5, r1
 800c0ea:	6965      	ldr	r5, [r4, #20]
 800c0ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	444b      	add	r3, r9
 800c0f8:	106d      	asrs	r5, r5, #1
 800c0fa:	429d      	cmp	r5, r3
 800c0fc:	bf38      	it	cc
 800c0fe:	461d      	movcc	r5, r3
 800c100:	0553      	lsls	r3, r2, #21
 800c102:	d531      	bpl.n	800c168 <__ssputs_r+0xa0>
 800c104:	4629      	mov	r1, r5
 800c106:	f7ff fdb1 	bl	800bc6c <_malloc_r>
 800c10a:	4606      	mov	r6, r0
 800c10c:	b950      	cbnz	r0, 800c124 <__ssputs_r+0x5c>
 800c10e:	230c      	movs	r3, #12
 800c110:	f8ca 3000 	str.w	r3, [sl]
 800c114:	89a3      	ldrh	r3, [r4, #12]
 800c116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c11a:	81a3      	strh	r3, [r4, #12]
 800c11c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c124:	6921      	ldr	r1, [r4, #16]
 800c126:	464a      	mov	r2, r9
 800c128:	f7ff fd08 	bl	800bb3c <memcpy>
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c136:	81a3      	strh	r3, [r4, #12]
 800c138:	6126      	str	r6, [r4, #16]
 800c13a:	6165      	str	r5, [r4, #20]
 800c13c:	444e      	add	r6, r9
 800c13e:	eba5 0509 	sub.w	r5, r5, r9
 800c142:	6026      	str	r6, [r4, #0]
 800c144:	60a5      	str	r5, [r4, #8]
 800c146:	463e      	mov	r6, r7
 800c148:	42be      	cmp	r6, r7
 800c14a:	d900      	bls.n	800c14e <__ssputs_r+0x86>
 800c14c:	463e      	mov	r6, r7
 800c14e:	6820      	ldr	r0, [r4, #0]
 800c150:	4632      	mov	r2, r6
 800c152:	4641      	mov	r1, r8
 800c154:	f000 faa8 	bl	800c6a8 <memmove>
 800c158:	68a3      	ldr	r3, [r4, #8]
 800c15a:	1b9b      	subs	r3, r3, r6
 800c15c:	60a3      	str	r3, [r4, #8]
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	4433      	add	r3, r6
 800c162:	6023      	str	r3, [r4, #0]
 800c164:	2000      	movs	r0, #0
 800c166:	e7db      	b.n	800c120 <__ssputs_r+0x58>
 800c168:	462a      	mov	r2, r5
 800c16a:	f000 fab7 	bl	800c6dc <_realloc_r>
 800c16e:	4606      	mov	r6, r0
 800c170:	2800      	cmp	r0, #0
 800c172:	d1e1      	bne.n	800c138 <__ssputs_r+0x70>
 800c174:	6921      	ldr	r1, [r4, #16]
 800c176:	4650      	mov	r0, sl
 800c178:	f7ff fd0c 	bl	800bb94 <_free_r>
 800c17c:	e7c7      	b.n	800c10e <__ssputs_r+0x46>
	...

0800c180 <_svfiprintf_r>:
 800c180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c184:	4698      	mov	r8, r3
 800c186:	898b      	ldrh	r3, [r1, #12]
 800c188:	061b      	lsls	r3, r3, #24
 800c18a:	b09d      	sub	sp, #116	; 0x74
 800c18c:	4607      	mov	r7, r0
 800c18e:	460d      	mov	r5, r1
 800c190:	4614      	mov	r4, r2
 800c192:	d50e      	bpl.n	800c1b2 <_svfiprintf_r+0x32>
 800c194:	690b      	ldr	r3, [r1, #16]
 800c196:	b963      	cbnz	r3, 800c1b2 <_svfiprintf_r+0x32>
 800c198:	2140      	movs	r1, #64	; 0x40
 800c19a:	f7ff fd67 	bl	800bc6c <_malloc_r>
 800c19e:	6028      	str	r0, [r5, #0]
 800c1a0:	6128      	str	r0, [r5, #16]
 800c1a2:	b920      	cbnz	r0, 800c1ae <_svfiprintf_r+0x2e>
 800c1a4:	230c      	movs	r3, #12
 800c1a6:	603b      	str	r3, [r7, #0]
 800c1a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1ac:	e0d1      	b.n	800c352 <_svfiprintf_r+0x1d2>
 800c1ae:	2340      	movs	r3, #64	; 0x40
 800c1b0:	616b      	str	r3, [r5, #20]
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b6:	2320      	movs	r3, #32
 800c1b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1c0:	2330      	movs	r3, #48	; 0x30
 800c1c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c36c <_svfiprintf_r+0x1ec>
 800c1c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1ca:	f04f 0901 	mov.w	r9, #1
 800c1ce:	4623      	mov	r3, r4
 800c1d0:	469a      	mov	sl, r3
 800c1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1d6:	b10a      	cbz	r2, 800c1dc <_svfiprintf_r+0x5c>
 800c1d8:	2a25      	cmp	r2, #37	; 0x25
 800c1da:	d1f9      	bne.n	800c1d0 <_svfiprintf_r+0x50>
 800c1dc:	ebba 0b04 	subs.w	fp, sl, r4
 800c1e0:	d00b      	beq.n	800c1fa <_svfiprintf_r+0x7a>
 800c1e2:	465b      	mov	r3, fp
 800c1e4:	4622      	mov	r2, r4
 800c1e6:	4629      	mov	r1, r5
 800c1e8:	4638      	mov	r0, r7
 800c1ea:	f7ff ff6d 	bl	800c0c8 <__ssputs_r>
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	f000 80aa 	beq.w	800c348 <_svfiprintf_r+0x1c8>
 800c1f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1f6:	445a      	add	r2, fp
 800c1f8:	9209      	str	r2, [sp, #36]	; 0x24
 800c1fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	f000 80a2 	beq.w	800c348 <_svfiprintf_r+0x1c8>
 800c204:	2300      	movs	r3, #0
 800c206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c20a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c20e:	f10a 0a01 	add.w	sl, sl, #1
 800c212:	9304      	str	r3, [sp, #16]
 800c214:	9307      	str	r3, [sp, #28]
 800c216:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c21a:	931a      	str	r3, [sp, #104]	; 0x68
 800c21c:	4654      	mov	r4, sl
 800c21e:	2205      	movs	r2, #5
 800c220:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c224:	4851      	ldr	r0, [pc, #324]	; (800c36c <_svfiprintf_r+0x1ec>)
 800c226:	f7f3 ffdb 	bl	80001e0 <memchr>
 800c22a:	9a04      	ldr	r2, [sp, #16]
 800c22c:	b9d8      	cbnz	r0, 800c266 <_svfiprintf_r+0xe6>
 800c22e:	06d0      	lsls	r0, r2, #27
 800c230:	bf44      	itt	mi
 800c232:	2320      	movmi	r3, #32
 800c234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c238:	0711      	lsls	r1, r2, #28
 800c23a:	bf44      	itt	mi
 800c23c:	232b      	movmi	r3, #43	; 0x2b
 800c23e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c242:	f89a 3000 	ldrb.w	r3, [sl]
 800c246:	2b2a      	cmp	r3, #42	; 0x2a
 800c248:	d015      	beq.n	800c276 <_svfiprintf_r+0xf6>
 800c24a:	9a07      	ldr	r2, [sp, #28]
 800c24c:	4654      	mov	r4, sl
 800c24e:	2000      	movs	r0, #0
 800c250:	f04f 0c0a 	mov.w	ip, #10
 800c254:	4621      	mov	r1, r4
 800c256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c25a:	3b30      	subs	r3, #48	; 0x30
 800c25c:	2b09      	cmp	r3, #9
 800c25e:	d94e      	bls.n	800c2fe <_svfiprintf_r+0x17e>
 800c260:	b1b0      	cbz	r0, 800c290 <_svfiprintf_r+0x110>
 800c262:	9207      	str	r2, [sp, #28]
 800c264:	e014      	b.n	800c290 <_svfiprintf_r+0x110>
 800c266:	eba0 0308 	sub.w	r3, r0, r8
 800c26a:	fa09 f303 	lsl.w	r3, r9, r3
 800c26e:	4313      	orrs	r3, r2
 800c270:	9304      	str	r3, [sp, #16]
 800c272:	46a2      	mov	sl, r4
 800c274:	e7d2      	b.n	800c21c <_svfiprintf_r+0x9c>
 800c276:	9b03      	ldr	r3, [sp, #12]
 800c278:	1d19      	adds	r1, r3, #4
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	9103      	str	r1, [sp, #12]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	bfbb      	ittet	lt
 800c282:	425b      	neglt	r3, r3
 800c284:	f042 0202 	orrlt.w	r2, r2, #2
 800c288:	9307      	strge	r3, [sp, #28]
 800c28a:	9307      	strlt	r3, [sp, #28]
 800c28c:	bfb8      	it	lt
 800c28e:	9204      	strlt	r2, [sp, #16]
 800c290:	7823      	ldrb	r3, [r4, #0]
 800c292:	2b2e      	cmp	r3, #46	; 0x2e
 800c294:	d10c      	bne.n	800c2b0 <_svfiprintf_r+0x130>
 800c296:	7863      	ldrb	r3, [r4, #1]
 800c298:	2b2a      	cmp	r3, #42	; 0x2a
 800c29a:	d135      	bne.n	800c308 <_svfiprintf_r+0x188>
 800c29c:	9b03      	ldr	r3, [sp, #12]
 800c29e:	1d1a      	adds	r2, r3, #4
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	9203      	str	r2, [sp, #12]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	bfb8      	it	lt
 800c2a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c2ac:	3402      	adds	r4, #2
 800c2ae:	9305      	str	r3, [sp, #20]
 800c2b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c37c <_svfiprintf_r+0x1fc>
 800c2b4:	7821      	ldrb	r1, [r4, #0]
 800c2b6:	2203      	movs	r2, #3
 800c2b8:	4650      	mov	r0, sl
 800c2ba:	f7f3 ff91 	bl	80001e0 <memchr>
 800c2be:	b140      	cbz	r0, 800c2d2 <_svfiprintf_r+0x152>
 800c2c0:	2340      	movs	r3, #64	; 0x40
 800c2c2:	eba0 000a 	sub.w	r0, r0, sl
 800c2c6:	fa03 f000 	lsl.w	r0, r3, r0
 800c2ca:	9b04      	ldr	r3, [sp, #16]
 800c2cc:	4303      	orrs	r3, r0
 800c2ce:	3401      	adds	r4, #1
 800c2d0:	9304      	str	r3, [sp, #16]
 800c2d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2d6:	4826      	ldr	r0, [pc, #152]	; (800c370 <_svfiprintf_r+0x1f0>)
 800c2d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2dc:	2206      	movs	r2, #6
 800c2de:	f7f3 ff7f 	bl	80001e0 <memchr>
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d038      	beq.n	800c358 <_svfiprintf_r+0x1d8>
 800c2e6:	4b23      	ldr	r3, [pc, #140]	; (800c374 <_svfiprintf_r+0x1f4>)
 800c2e8:	bb1b      	cbnz	r3, 800c332 <_svfiprintf_r+0x1b2>
 800c2ea:	9b03      	ldr	r3, [sp, #12]
 800c2ec:	3307      	adds	r3, #7
 800c2ee:	f023 0307 	bic.w	r3, r3, #7
 800c2f2:	3308      	adds	r3, #8
 800c2f4:	9303      	str	r3, [sp, #12]
 800c2f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f8:	4433      	add	r3, r6
 800c2fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c2fc:	e767      	b.n	800c1ce <_svfiprintf_r+0x4e>
 800c2fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800c302:	460c      	mov	r4, r1
 800c304:	2001      	movs	r0, #1
 800c306:	e7a5      	b.n	800c254 <_svfiprintf_r+0xd4>
 800c308:	2300      	movs	r3, #0
 800c30a:	3401      	adds	r4, #1
 800c30c:	9305      	str	r3, [sp, #20]
 800c30e:	4619      	mov	r1, r3
 800c310:	f04f 0c0a 	mov.w	ip, #10
 800c314:	4620      	mov	r0, r4
 800c316:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c31a:	3a30      	subs	r2, #48	; 0x30
 800c31c:	2a09      	cmp	r2, #9
 800c31e:	d903      	bls.n	800c328 <_svfiprintf_r+0x1a8>
 800c320:	2b00      	cmp	r3, #0
 800c322:	d0c5      	beq.n	800c2b0 <_svfiprintf_r+0x130>
 800c324:	9105      	str	r1, [sp, #20]
 800c326:	e7c3      	b.n	800c2b0 <_svfiprintf_r+0x130>
 800c328:	fb0c 2101 	mla	r1, ip, r1, r2
 800c32c:	4604      	mov	r4, r0
 800c32e:	2301      	movs	r3, #1
 800c330:	e7f0      	b.n	800c314 <_svfiprintf_r+0x194>
 800c332:	ab03      	add	r3, sp, #12
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	462a      	mov	r2, r5
 800c338:	4b0f      	ldr	r3, [pc, #60]	; (800c378 <_svfiprintf_r+0x1f8>)
 800c33a:	a904      	add	r1, sp, #16
 800c33c:	4638      	mov	r0, r7
 800c33e:	f3af 8000 	nop.w
 800c342:	1c42      	adds	r2, r0, #1
 800c344:	4606      	mov	r6, r0
 800c346:	d1d6      	bne.n	800c2f6 <_svfiprintf_r+0x176>
 800c348:	89ab      	ldrh	r3, [r5, #12]
 800c34a:	065b      	lsls	r3, r3, #25
 800c34c:	f53f af2c 	bmi.w	800c1a8 <_svfiprintf_r+0x28>
 800c350:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c352:	b01d      	add	sp, #116	; 0x74
 800c354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c358:	ab03      	add	r3, sp, #12
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	462a      	mov	r2, r5
 800c35e:	4b06      	ldr	r3, [pc, #24]	; (800c378 <_svfiprintf_r+0x1f8>)
 800c360:	a904      	add	r1, sp, #16
 800c362:	4638      	mov	r0, r7
 800c364:	f000 f87a 	bl	800c45c <_printf_i>
 800c368:	e7eb      	b.n	800c342 <_svfiprintf_r+0x1c2>
 800c36a:	bf00      	nop
 800c36c:	0800eecd 	.word	0x0800eecd
 800c370:	0800eed7 	.word	0x0800eed7
 800c374:	00000000 	.word	0x00000000
 800c378:	0800c0c9 	.word	0x0800c0c9
 800c37c:	0800eed3 	.word	0x0800eed3

0800c380 <_printf_common>:
 800c380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c384:	4616      	mov	r6, r2
 800c386:	4699      	mov	r9, r3
 800c388:	688a      	ldr	r2, [r1, #8]
 800c38a:	690b      	ldr	r3, [r1, #16]
 800c38c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c390:	4293      	cmp	r3, r2
 800c392:	bfb8      	it	lt
 800c394:	4613      	movlt	r3, r2
 800c396:	6033      	str	r3, [r6, #0]
 800c398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c39c:	4607      	mov	r7, r0
 800c39e:	460c      	mov	r4, r1
 800c3a0:	b10a      	cbz	r2, 800c3a6 <_printf_common+0x26>
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	6033      	str	r3, [r6, #0]
 800c3a6:	6823      	ldr	r3, [r4, #0]
 800c3a8:	0699      	lsls	r1, r3, #26
 800c3aa:	bf42      	ittt	mi
 800c3ac:	6833      	ldrmi	r3, [r6, #0]
 800c3ae:	3302      	addmi	r3, #2
 800c3b0:	6033      	strmi	r3, [r6, #0]
 800c3b2:	6825      	ldr	r5, [r4, #0]
 800c3b4:	f015 0506 	ands.w	r5, r5, #6
 800c3b8:	d106      	bne.n	800c3c8 <_printf_common+0x48>
 800c3ba:	f104 0a19 	add.w	sl, r4, #25
 800c3be:	68e3      	ldr	r3, [r4, #12]
 800c3c0:	6832      	ldr	r2, [r6, #0]
 800c3c2:	1a9b      	subs	r3, r3, r2
 800c3c4:	42ab      	cmp	r3, r5
 800c3c6:	dc26      	bgt.n	800c416 <_printf_common+0x96>
 800c3c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3cc:	1e13      	subs	r3, r2, #0
 800c3ce:	6822      	ldr	r2, [r4, #0]
 800c3d0:	bf18      	it	ne
 800c3d2:	2301      	movne	r3, #1
 800c3d4:	0692      	lsls	r2, r2, #26
 800c3d6:	d42b      	bmi.n	800c430 <_printf_common+0xb0>
 800c3d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3dc:	4649      	mov	r1, r9
 800c3de:	4638      	mov	r0, r7
 800c3e0:	47c0      	blx	r8
 800c3e2:	3001      	adds	r0, #1
 800c3e4:	d01e      	beq.n	800c424 <_printf_common+0xa4>
 800c3e6:	6823      	ldr	r3, [r4, #0]
 800c3e8:	68e5      	ldr	r5, [r4, #12]
 800c3ea:	6832      	ldr	r2, [r6, #0]
 800c3ec:	f003 0306 	and.w	r3, r3, #6
 800c3f0:	2b04      	cmp	r3, #4
 800c3f2:	bf08      	it	eq
 800c3f4:	1aad      	subeq	r5, r5, r2
 800c3f6:	68a3      	ldr	r3, [r4, #8]
 800c3f8:	6922      	ldr	r2, [r4, #16]
 800c3fa:	bf0c      	ite	eq
 800c3fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c400:	2500      	movne	r5, #0
 800c402:	4293      	cmp	r3, r2
 800c404:	bfc4      	itt	gt
 800c406:	1a9b      	subgt	r3, r3, r2
 800c408:	18ed      	addgt	r5, r5, r3
 800c40a:	2600      	movs	r6, #0
 800c40c:	341a      	adds	r4, #26
 800c40e:	42b5      	cmp	r5, r6
 800c410:	d11a      	bne.n	800c448 <_printf_common+0xc8>
 800c412:	2000      	movs	r0, #0
 800c414:	e008      	b.n	800c428 <_printf_common+0xa8>
 800c416:	2301      	movs	r3, #1
 800c418:	4652      	mov	r2, sl
 800c41a:	4649      	mov	r1, r9
 800c41c:	4638      	mov	r0, r7
 800c41e:	47c0      	blx	r8
 800c420:	3001      	adds	r0, #1
 800c422:	d103      	bne.n	800c42c <_printf_common+0xac>
 800c424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c42c:	3501      	adds	r5, #1
 800c42e:	e7c6      	b.n	800c3be <_printf_common+0x3e>
 800c430:	18e1      	adds	r1, r4, r3
 800c432:	1c5a      	adds	r2, r3, #1
 800c434:	2030      	movs	r0, #48	; 0x30
 800c436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c43a:	4422      	add	r2, r4
 800c43c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c444:	3302      	adds	r3, #2
 800c446:	e7c7      	b.n	800c3d8 <_printf_common+0x58>
 800c448:	2301      	movs	r3, #1
 800c44a:	4622      	mov	r2, r4
 800c44c:	4649      	mov	r1, r9
 800c44e:	4638      	mov	r0, r7
 800c450:	47c0      	blx	r8
 800c452:	3001      	adds	r0, #1
 800c454:	d0e6      	beq.n	800c424 <_printf_common+0xa4>
 800c456:	3601      	adds	r6, #1
 800c458:	e7d9      	b.n	800c40e <_printf_common+0x8e>
	...

0800c45c <_printf_i>:
 800c45c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c460:	7e0f      	ldrb	r7, [r1, #24]
 800c462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c464:	2f78      	cmp	r7, #120	; 0x78
 800c466:	4691      	mov	r9, r2
 800c468:	4680      	mov	r8, r0
 800c46a:	460c      	mov	r4, r1
 800c46c:	469a      	mov	sl, r3
 800c46e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c472:	d807      	bhi.n	800c484 <_printf_i+0x28>
 800c474:	2f62      	cmp	r7, #98	; 0x62
 800c476:	d80a      	bhi.n	800c48e <_printf_i+0x32>
 800c478:	2f00      	cmp	r7, #0
 800c47a:	f000 80d8 	beq.w	800c62e <_printf_i+0x1d2>
 800c47e:	2f58      	cmp	r7, #88	; 0x58
 800c480:	f000 80a3 	beq.w	800c5ca <_printf_i+0x16e>
 800c484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c48c:	e03a      	b.n	800c504 <_printf_i+0xa8>
 800c48e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c492:	2b15      	cmp	r3, #21
 800c494:	d8f6      	bhi.n	800c484 <_printf_i+0x28>
 800c496:	a101      	add	r1, pc, #4	; (adr r1, 800c49c <_printf_i+0x40>)
 800c498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c49c:	0800c4f5 	.word	0x0800c4f5
 800c4a0:	0800c509 	.word	0x0800c509
 800c4a4:	0800c485 	.word	0x0800c485
 800c4a8:	0800c485 	.word	0x0800c485
 800c4ac:	0800c485 	.word	0x0800c485
 800c4b0:	0800c485 	.word	0x0800c485
 800c4b4:	0800c509 	.word	0x0800c509
 800c4b8:	0800c485 	.word	0x0800c485
 800c4bc:	0800c485 	.word	0x0800c485
 800c4c0:	0800c485 	.word	0x0800c485
 800c4c4:	0800c485 	.word	0x0800c485
 800c4c8:	0800c615 	.word	0x0800c615
 800c4cc:	0800c539 	.word	0x0800c539
 800c4d0:	0800c5f7 	.word	0x0800c5f7
 800c4d4:	0800c485 	.word	0x0800c485
 800c4d8:	0800c485 	.word	0x0800c485
 800c4dc:	0800c637 	.word	0x0800c637
 800c4e0:	0800c485 	.word	0x0800c485
 800c4e4:	0800c539 	.word	0x0800c539
 800c4e8:	0800c485 	.word	0x0800c485
 800c4ec:	0800c485 	.word	0x0800c485
 800c4f0:	0800c5ff 	.word	0x0800c5ff
 800c4f4:	682b      	ldr	r3, [r5, #0]
 800c4f6:	1d1a      	adds	r2, r3, #4
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	602a      	str	r2, [r5, #0]
 800c4fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c504:	2301      	movs	r3, #1
 800c506:	e0a3      	b.n	800c650 <_printf_i+0x1f4>
 800c508:	6820      	ldr	r0, [r4, #0]
 800c50a:	6829      	ldr	r1, [r5, #0]
 800c50c:	0606      	lsls	r6, r0, #24
 800c50e:	f101 0304 	add.w	r3, r1, #4
 800c512:	d50a      	bpl.n	800c52a <_printf_i+0xce>
 800c514:	680e      	ldr	r6, [r1, #0]
 800c516:	602b      	str	r3, [r5, #0]
 800c518:	2e00      	cmp	r6, #0
 800c51a:	da03      	bge.n	800c524 <_printf_i+0xc8>
 800c51c:	232d      	movs	r3, #45	; 0x2d
 800c51e:	4276      	negs	r6, r6
 800c520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c524:	485e      	ldr	r0, [pc, #376]	; (800c6a0 <_printf_i+0x244>)
 800c526:	230a      	movs	r3, #10
 800c528:	e019      	b.n	800c55e <_printf_i+0x102>
 800c52a:	680e      	ldr	r6, [r1, #0]
 800c52c:	602b      	str	r3, [r5, #0]
 800c52e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c532:	bf18      	it	ne
 800c534:	b236      	sxthne	r6, r6
 800c536:	e7ef      	b.n	800c518 <_printf_i+0xbc>
 800c538:	682b      	ldr	r3, [r5, #0]
 800c53a:	6820      	ldr	r0, [r4, #0]
 800c53c:	1d19      	adds	r1, r3, #4
 800c53e:	6029      	str	r1, [r5, #0]
 800c540:	0601      	lsls	r1, r0, #24
 800c542:	d501      	bpl.n	800c548 <_printf_i+0xec>
 800c544:	681e      	ldr	r6, [r3, #0]
 800c546:	e002      	b.n	800c54e <_printf_i+0xf2>
 800c548:	0646      	lsls	r6, r0, #25
 800c54a:	d5fb      	bpl.n	800c544 <_printf_i+0xe8>
 800c54c:	881e      	ldrh	r6, [r3, #0]
 800c54e:	4854      	ldr	r0, [pc, #336]	; (800c6a0 <_printf_i+0x244>)
 800c550:	2f6f      	cmp	r7, #111	; 0x6f
 800c552:	bf0c      	ite	eq
 800c554:	2308      	moveq	r3, #8
 800c556:	230a      	movne	r3, #10
 800c558:	2100      	movs	r1, #0
 800c55a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c55e:	6865      	ldr	r5, [r4, #4]
 800c560:	60a5      	str	r5, [r4, #8]
 800c562:	2d00      	cmp	r5, #0
 800c564:	bfa2      	ittt	ge
 800c566:	6821      	ldrge	r1, [r4, #0]
 800c568:	f021 0104 	bicge.w	r1, r1, #4
 800c56c:	6021      	strge	r1, [r4, #0]
 800c56e:	b90e      	cbnz	r6, 800c574 <_printf_i+0x118>
 800c570:	2d00      	cmp	r5, #0
 800c572:	d04d      	beq.n	800c610 <_printf_i+0x1b4>
 800c574:	4615      	mov	r5, r2
 800c576:	fbb6 f1f3 	udiv	r1, r6, r3
 800c57a:	fb03 6711 	mls	r7, r3, r1, r6
 800c57e:	5dc7      	ldrb	r7, [r0, r7]
 800c580:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c584:	4637      	mov	r7, r6
 800c586:	42bb      	cmp	r3, r7
 800c588:	460e      	mov	r6, r1
 800c58a:	d9f4      	bls.n	800c576 <_printf_i+0x11a>
 800c58c:	2b08      	cmp	r3, #8
 800c58e:	d10b      	bne.n	800c5a8 <_printf_i+0x14c>
 800c590:	6823      	ldr	r3, [r4, #0]
 800c592:	07de      	lsls	r6, r3, #31
 800c594:	d508      	bpl.n	800c5a8 <_printf_i+0x14c>
 800c596:	6923      	ldr	r3, [r4, #16]
 800c598:	6861      	ldr	r1, [r4, #4]
 800c59a:	4299      	cmp	r1, r3
 800c59c:	bfde      	ittt	le
 800c59e:	2330      	movle	r3, #48	; 0x30
 800c5a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c5a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c5a8:	1b52      	subs	r2, r2, r5
 800c5aa:	6122      	str	r2, [r4, #16]
 800c5ac:	f8cd a000 	str.w	sl, [sp]
 800c5b0:	464b      	mov	r3, r9
 800c5b2:	aa03      	add	r2, sp, #12
 800c5b4:	4621      	mov	r1, r4
 800c5b6:	4640      	mov	r0, r8
 800c5b8:	f7ff fee2 	bl	800c380 <_printf_common>
 800c5bc:	3001      	adds	r0, #1
 800c5be:	d14c      	bne.n	800c65a <_printf_i+0x1fe>
 800c5c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5c4:	b004      	add	sp, #16
 800c5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ca:	4835      	ldr	r0, [pc, #212]	; (800c6a0 <_printf_i+0x244>)
 800c5cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c5d0:	6829      	ldr	r1, [r5, #0]
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5d8:	6029      	str	r1, [r5, #0]
 800c5da:	061d      	lsls	r5, r3, #24
 800c5dc:	d514      	bpl.n	800c608 <_printf_i+0x1ac>
 800c5de:	07df      	lsls	r7, r3, #31
 800c5e0:	bf44      	itt	mi
 800c5e2:	f043 0320 	orrmi.w	r3, r3, #32
 800c5e6:	6023      	strmi	r3, [r4, #0]
 800c5e8:	b91e      	cbnz	r6, 800c5f2 <_printf_i+0x196>
 800c5ea:	6823      	ldr	r3, [r4, #0]
 800c5ec:	f023 0320 	bic.w	r3, r3, #32
 800c5f0:	6023      	str	r3, [r4, #0]
 800c5f2:	2310      	movs	r3, #16
 800c5f4:	e7b0      	b.n	800c558 <_printf_i+0xfc>
 800c5f6:	6823      	ldr	r3, [r4, #0]
 800c5f8:	f043 0320 	orr.w	r3, r3, #32
 800c5fc:	6023      	str	r3, [r4, #0]
 800c5fe:	2378      	movs	r3, #120	; 0x78
 800c600:	4828      	ldr	r0, [pc, #160]	; (800c6a4 <_printf_i+0x248>)
 800c602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c606:	e7e3      	b.n	800c5d0 <_printf_i+0x174>
 800c608:	0659      	lsls	r1, r3, #25
 800c60a:	bf48      	it	mi
 800c60c:	b2b6      	uxthmi	r6, r6
 800c60e:	e7e6      	b.n	800c5de <_printf_i+0x182>
 800c610:	4615      	mov	r5, r2
 800c612:	e7bb      	b.n	800c58c <_printf_i+0x130>
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	6826      	ldr	r6, [r4, #0]
 800c618:	6961      	ldr	r1, [r4, #20]
 800c61a:	1d18      	adds	r0, r3, #4
 800c61c:	6028      	str	r0, [r5, #0]
 800c61e:	0635      	lsls	r5, r6, #24
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	d501      	bpl.n	800c628 <_printf_i+0x1cc>
 800c624:	6019      	str	r1, [r3, #0]
 800c626:	e002      	b.n	800c62e <_printf_i+0x1d2>
 800c628:	0670      	lsls	r0, r6, #25
 800c62a:	d5fb      	bpl.n	800c624 <_printf_i+0x1c8>
 800c62c:	8019      	strh	r1, [r3, #0]
 800c62e:	2300      	movs	r3, #0
 800c630:	6123      	str	r3, [r4, #16]
 800c632:	4615      	mov	r5, r2
 800c634:	e7ba      	b.n	800c5ac <_printf_i+0x150>
 800c636:	682b      	ldr	r3, [r5, #0]
 800c638:	1d1a      	adds	r2, r3, #4
 800c63a:	602a      	str	r2, [r5, #0]
 800c63c:	681d      	ldr	r5, [r3, #0]
 800c63e:	6862      	ldr	r2, [r4, #4]
 800c640:	2100      	movs	r1, #0
 800c642:	4628      	mov	r0, r5
 800c644:	f7f3 fdcc 	bl	80001e0 <memchr>
 800c648:	b108      	cbz	r0, 800c64e <_printf_i+0x1f2>
 800c64a:	1b40      	subs	r0, r0, r5
 800c64c:	6060      	str	r0, [r4, #4]
 800c64e:	6863      	ldr	r3, [r4, #4]
 800c650:	6123      	str	r3, [r4, #16]
 800c652:	2300      	movs	r3, #0
 800c654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c658:	e7a8      	b.n	800c5ac <_printf_i+0x150>
 800c65a:	6923      	ldr	r3, [r4, #16]
 800c65c:	462a      	mov	r2, r5
 800c65e:	4649      	mov	r1, r9
 800c660:	4640      	mov	r0, r8
 800c662:	47d0      	blx	sl
 800c664:	3001      	adds	r0, #1
 800c666:	d0ab      	beq.n	800c5c0 <_printf_i+0x164>
 800c668:	6823      	ldr	r3, [r4, #0]
 800c66a:	079b      	lsls	r3, r3, #30
 800c66c:	d413      	bmi.n	800c696 <_printf_i+0x23a>
 800c66e:	68e0      	ldr	r0, [r4, #12]
 800c670:	9b03      	ldr	r3, [sp, #12]
 800c672:	4298      	cmp	r0, r3
 800c674:	bfb8      	it	lt
 800c676:	4618      	movlt	r0, r3
 800c678:	e7a4      	b.n	800c5c4 <_printf_i+0x168>
 800c67a:	2301      	movs	r3, #1
 800c67c:	4632      	mov	r2, r6
 800c67e:	4649      	mov	r1, r9
 800c680:	4640      	mov	r0, r8
 800c682:	47d0      	blx	sl
 800c684:	3001      	adds	r0, #1
 800c686:	d09b      	beq.n	800c5c0 <_printf_i+0x164>
 800c688:	3501      	adds	r5, #1
 800c68a:	68e3      	ldr	r3, [r4, #12]
 800c68c:	9903      	ldr	r1, [sp, #12]
 800c68e:	1a5b      	subs	r3, r3, r1
 800c690:	42ab      	cmp	r3, r5
 800c692:	dcf2      	bgt.n	800c67a <_printf_i+0x21e>
 800c694:	e7eb      	b.n	800c66e <_printf_i+0x212>
 800c696:	2500      	movs	r5, #0
 800c698:	f104 0619 	add.w	r6, r4, #25
 800c69c:	e7f5      	b.n	800c68a <_printf_i+0x22e>
 800c69e:	bf00      	nop
 800c6a0:	0800eede 	.word	0x0800eede
 800c6a4:	0800eeef 	.word	0x0800eeef

0800c6a8 <memmove>:
 800c6a8:	4288      	cmp	r0, r1
 800c6aa:	b510      	push	{r4, lr}
 800c6ac:	eb01 0402 	add.w	r4, r1, r2
 800c6b0:	d902      	bls.n	800c6b8 <memmove+0x10>
 800c6b2:	4284      	cmp	r4, r0
 800c6b4:	4623      	mov	r3, r4
 800c6b6:	d807      	bhi.n	800c6c8 <memmove+0x20>
 800c6b8:	1e43      	subs	r3, r0, #1
 800c6ba:	42a1      	cmp	r1, r4
 800c6bc:	d008      	beq.n	800c6d0 <memmove+0x28>
 800c6be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6c6:	e7f8      	b.n	800c6ba <memmove+0x12>
 800c6c8:	4402      	add	r2, r0
 800c6ca:	4601      	mov	r1, r0
 800c6cc:	428a      	cmp	r2, r1
 800c6ce:	d100      	bne.n	800c6d2 <memmove+0x2a>
 800c6d0:	bd10      	pop	{r4, pc}
 800c6d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6da:	e7f7      	b.n	800c6cc <memmove+0x24>

0800c6dc <_realloc_r>:
 800c6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e0:	4680      	mov	r8, r0
 800c6e2:	4614      	mov	r4, r2
 800c6e4:	460e      	mov	r6, r1
 800c6e6:	b921      	cbnz	r1, 800c6f2 <_realloc_r+0x16>
 800c6e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ec:	4611      	mov	r1, r2
 800c6ee:	f7ff babd 	b.w	800bc6c <_malloc_r>
 800c6f2:	b92a      	cbnz	r2, 800c700 <_realloc_r+0x24>
 800c6f4:	f7ff fa4e 	bl	800bb94 <_free_r>
 800c6f8:	4625      	mov	r5, r4
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c700:	f000 f81b 	bl	800c73a <_malloc_usable_size_r>
 800c704:	4284      	cmp	r4, r0
 800c706:	4607      	mov	r7, r0
 800c708:	d802      	bhi.n	800c710 <_realloc_r+0x34>
 800c70a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c70e:	d812      	bhi.n	800c736 <_realloc_r+0x5a>
 800c710:	4621      	mov	r1, r4
 800c712:	4640      	mov	r0, r8
 800c714:	f7ff faaa 	bl	800bc6c <_malloc_r>
 800c718:	4605      	mov	r5, r0
 800c71a:	2800      	cmp	r0, #0
 800c71c:	d0ed      	beq.n	800c6fa <_realloc_r+0x1e>
 800c71e:	42bc      	cmp	r4, r7
 800c720:	4622      	mov	r2, r4
 800c722:	4631      	mov	r1, r6
 800c724:	bf28      	it	cs
 800c726:	463a      	movcs	r2, r7
 800c728:	f7ff fa08 	bl	800bb3c <memcpy>
 800c72c:	4631      	mov	r1, r6
 800c72e:	4640      	mov	r0, r8
 800c730:	f7ff fa30 	bl	800bb94 <_free_r>
 800c734:	e7e1      	b.n	800c6fa <_realloc_r+0x1e>
 800c736:	4635      	mov	r5, r6
 800c738:	e7df      	b.n	800c6fa <_realloc_r+0x1e>

0800c73a <_malloc_usable_size_r>:
 800c73a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c73e:	1f18      	subs	r0, r3, #4
 800c740:	2b00      	cmp	r3, #0
 800c742:	bfbc      	itt	lt
 800c744:	580b      	ldrlt	r3, [r1, r0]
 800c746:	18c0      	addlt	r0, r0, r3
 800c748:	4770      	bx	lr
	...

0800c74c <_init>:
 800c74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74e:	bf00      	nop
 800c750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c752:	bc08      	pop	{r3}
 800c754:	469e      	mov	lr, r3
 800c756:	4770      	bx	lr

0800c758 <_fini>:
 800c758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75a:	bf00      	nop
 800c75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c75e:	bc08      	pop	{r3}
 800c760:	469e      	mov	lr, r3
 800c762:	4770      	bx	lr
