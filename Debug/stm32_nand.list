
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011bf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030bc  08011d88  08011d88  00021d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014e44  08014e44  0003013c  2**0
                  CONTENTS
  4 .ARM          00000008  08014e44  08014e44  00024e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014e4c  08014e4c  0003013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014e4c  08014e4c  00024e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014e50  08014e50  00024e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08014e54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003013c  2**0
                  CONTENTS
 10 .bss          000099e4  20000140  20000140  00030140  2**3
                  ALLOC
 11 ._user_heap_stack 00003004  20009b24  20009b24  00030140  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028300  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c6e  00000000  00000000  0005846c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f08  00000000  00000000  0005d0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008543  00000000  00000000  0005efe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027ceb  00000000  00000000  0006752b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5a7e  00000000  00000000  0008f216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00174c94  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001d68  00000000  00000000  00174ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008b90  00000000  00000000  00176a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000140 	.word	0x20000140
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011d70 	.word	0x08011d70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000144 	.word	0x20000144
 80001cc:	08011d70 	.word	0x08011d70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c42:	4904      	ldr	r1, [pc, #16]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_SystemReset+0x28>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
}
 8000c4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <__NVIC_SystemReset+0x20>
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0004 	.word	0x05fa0004

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f004 fb01 	bl	8005268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f889 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 fa2d 	bl	80010c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6e:	f000 f9f5 	bl	800105c <MX_DMA_Init>
  MX_TIM2_Init();
 8000c72:	f000 f97d 	bl	8000f70 <MX_TIM2_Init>
  MX_RTC_Init();
 8000c76:	f000 f8eb 	bl	8000e50 <MX_RTC_Init>
  MX_FSMC_Init();
 8000c7a:	f000 facb 	bl	8001214 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000c7e:	f000 f9c3 	bl	8001008 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000c82:	f000 f93f 	bl	8000f04 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000c86:	f009 f89b 	bl	8009dc0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	71fb      	strb	r3, [r7, #7]
 8000c8e:	e01e      	b.n	8000cce <main+0x72>
	  HAL_Delay(150);
 8000c90:	2096      	movs	r0, #150	; 0x96
 8000c92:	f004 fb2b 	bl	80052ec <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	482a      	ldr	r0, [pc, #168]	; (8000d44 <main+0xe8>)
 8000c9c:	f005 f9ca 	bl	8006034 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca6:	4828      	ldr	r0, [pc, #160]	; (8000d48 <main+0xec>)
 8000ca8:	f005 f9c4 	bl	8006034 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8000cac:	2096      	movs	r0, #150	; 0x96
 8000cae:	f004 fb1d 	bl	80052ec <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	4823      	ldr	r0, [pc, #140]	; (8000d44 <main+0xe8>)
 8000cb8:	f005 f9bc 	bl	8006034 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc2:	4821      	ldr	r0, [pc, #132]	; (8000d48 <main+0xec>)
 8000cc4:	f005 f9b6 	bl	8006034 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d9dd      	bls.n	8000c90 <main+0x34>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <main+0xf0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f007 faa9 	bl	8008230 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <main+0xf4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	491b      	ldr	r1, [pc, #108]	; (8000d54 <main+0xf8>)
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f007 ff21 	bl	8008b2e <HAL_UART_Receive_IT>

  set_Date(epoch);
 8000cec:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <main+0xfc>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f001 fe3f 	bl	8002974 <set_Date>

  ST7789_Reset();
 8000cf6:	f003 fd2b 	bl	8004750 <ST7789_Reset>
  ST7789_Init(back_color);
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <main+0x100>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f003 fd40 	bl	8004784 <ST7789_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d04:	f00c fc54 	bl	800d5b0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000d08:	4a15      	ldr	r2, [pc, #84]	; (8000d60 <main+0x104>)
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f00c fe7c 	bl	800da0a <osSemaphoreNew>
 8000d12:	4603      	mov	r3, r0
 8000d14:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <main+0x108>)
 8000d16:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(uint16_t), &myQue_attributes);
 8000d18:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <main+0x10c>)
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	2010      	movs	r0, #16
 8000d1e:	f00c fefd 	bl	800db1c <osMessageQueueNew>
 8000d22:	4603      	mov	r3, r0
 8000d24:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <main+0x110>)
 8000d26:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000d28:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <main+0x114>)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4811      	ldr	r0, [pc, #68]	; (8000d74 <main+0x118>)
 8000d2e:	f00c fc8b 	bl	800d648 <osThreadNew>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <main+0x11c>)
 8000d36:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d38:	f00c fc60 	bl	800d5fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f004 fad5 	bl	80052ec <HAL_Delay>
 8000d42:	e7fb      	b.n	8000d3c <main+0xe0>
 8000d44:	40020800 	.word	0x40020800
 8000d48:	40020c00 	.word	0x40020c00
 8000d4c:	20000070 	.word	0x20000070
 8000d50:	20000074 	.word	0x20000074
 8000d54:	20001380 	.word	0x20001380
 8000d58:	20000064 	.word	0x20000064
 8000d5c:	20001386 	.word	0x20001386
 8000d60:	08014b44 	.word	0x08014b44
 8000d64:	20000368 	.word	0x20000368
 8000d68:	08014b2c 	.word	0x08014b2c
 8000d6c:	20000364 	.word	0x20000364
 8000d70:	08014b08 	.word	0x08014b08
 8000d74:	080033a9 	.word	0x080033a9
 8000d78:	20000360 	.word	0x20000360

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b094      	sub	sp, #80	; 0x50
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	2230      	movs	r2, #48	; 0x30
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f010 fa0c 	bl	80111a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <SystemClock_Config+0xcc>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <SystemClock_Config+0xcc>)
 8000daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <SystemClock_Config+0xcc>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <SystemClock_Config+0xd0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <SystemClock_Config+0xd0>)
 8000dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <SystemClock_Config+0xd0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de2:	2302      	movs	r3, #2
 8000de4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dec:	2308      	movs	r3, #8
 8000dee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000df0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000df4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df6:	2302      	movs	r3, #2
 8000df8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	4618      	mov	r0, r3
 8000e04:	f005 fc2a 	bl	800665c <HAL_RCC_OscConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e0e:	f003 fae7 	bl	80043e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e12:	230f      	movs	r3, #15
 8000e14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e16:	2302      	movs	r3, #2
 8000e18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e1e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	2105      	movs	r1, #5
 8000e30:	4618      	mov	r0, r3
 8000e32:	f005 fe8b 	bl	8006b4c <HAL_RCC_ClockConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e3c:	f003 fad0 	bl	80043e0 <Error_Handler>
  }
}
 8000e40:	bf00      	nop
 8000e42:	3750      	adds	r7, #80	; 0x50
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40007000 	.word	0x40007000

08000e50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e64:	2300      	movs	r3, #0
 8000e66:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <MX_RTC_Init+0xac>)
 8000e6a:	4a25      	ldr	r2, [pc, #148]	; (8000f00 <MX_RTC_Init+0xb0>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e6e:	4b23      	ldr	r3, [pc, #140]	; (8000efc <MX_RTC_Init+0xac>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_RTC_Init+0xac>)
 8000e76:	227f      	movs	r2, #127	; 0x7f
 8000e78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <MX_RTC_Init+0xac>)
 8000e7c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e80:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <MX_RTC_Init+0xac>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_RTC_Init+0xac>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <MX_RTC_Init+0xac>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e94:	4819      	ldr	r0, [pc, #100]	; (8000efc <MX_RTC_Init+0xac>)
 8000e96:	f006 f98d 	bl	80071b4 <HAL_RTC_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000ea0:	f003 fa9e 	bl	80043e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 8000ea4:	2315      	movs	r3, #21
 8000ea6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8000ea8:	2334      	movs	r3, #52	; 0x34
 8000eaa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 12;
 8000eac:	230c      	movs	r3, #12
 8000eae:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480f      	ldr	r0, [pc, #60]	; (8000efc <MX_RTC_Init+0xac>)
 8000ec0:	f006 f9ee 	bl	80072a0 <HAL_RTC_SetTime>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000eca:	f003 fa89 	bl	80043e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ede:	463b      	mov	r3, r7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_RTC_Init+0xac>)
 8000ee6:	f006 fad3 	bl	8007490 <HAL_RTC_SetDate>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000ef0:	f003 fa76 	bl	80043e0 <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000015c 	.word	0x2000015c
 8000f00:	40002800 	.word	0x40002800

08000f04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <MX_SPI1_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f50:	220a      	movs	r2, #10
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f56:	f006 fc2b 	bl	80077b0 <HAL_SPI_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f60:	f003 fa3e 	bl	80043e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2000017c 	.word	0x2000017c
 8000f6c:	40013000 	.word	0x40013000

08000f70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f96:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fa4:	22f9      	movs	r2, #249	; 0xf9
 8000fa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_TIM2_Init+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fb6:	f007 f8eb 	bl	8008190 <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fc0:	f003 fa0e 	bl	80043e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fd2:	f007 faa5 	bl	8008520 <HAL_TIM_ConfigClockSource>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fdc:	f003 fa00 	bl	80043e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fee:	f007 fcc1 	bl	8008974 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ff8:	f003 f9f2 	bl	80043e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000234 	.word	0x20000234

08001008 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <MX_USART3_UART_Init+0x50>)
 8001010:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001014:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001018:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001040:	f007 fd28 	bl	8008a94 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800104a:	f003 f9c9 	bl	80043e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000027c 	.word	0x2000027c
 8001058:	40004800 	.word	0x40004800

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_DMA_Init+0x68>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <MX_DMA_Init+0x68>)
 800106c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_DMA_Init+0x68>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_DMA_Init+0x68>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <MX_DMA_Init+0x68>)
 8001088:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <MX_DMA_Init+0x68>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2105      	movs	r1, #5
 800109e:	200e      	movs	r0, #14
 80010a0:	f004 fa00 	bl	80054a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010a4:	200e      	movs	r0, #14
 80010a6:	f004 fa19 	bl	80054dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2103      	movs	r1, #3
 80010ae:	203b      	movs	r0, #59	; 0x3b
 80010b0:	f004 f9f8 	bl	80054a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010b4:	203b      	movs	r0, #59	; 0x3b
 80010b6:	f004 fa11 	bl	80054dc <HAL_NVIC_EnableIRQ>

}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4b48      	ldr	r3, [pc, #288]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a47      	ldr	r2, [pc, #284]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b45      	ldr	r3, [pc, #276]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	4b41      	ldr	r3, [pc, #260]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a40      	ldr	r2, [pc, #256]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <MX_GPIO_Init+0x13c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <MX_GPIO_Init+0x13c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a39      	ldr	r2, [pc, #228]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b37      	ldr	r3, [pc, #220]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b33      	ldr	r3, [pc, #204]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a32      	ldr	r2, [pc, #200]	; (8001204 <MX_GPIO_Init+0x13c>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b30      	ldr	r3, [pc, #192]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a2b      	ldr	r2, [pc, #172]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a24      	ldr	r2, [pc, #144]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_GPIO_Init+0x13c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	210e      	movs	r1, #14
 800118a:	481f      	ldr	r0, [pc, #124]	; (8001208 <MX_GPIO_Init+0x140>)
 800118c:	f004 ff52 	bl	8006034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001196:	481d      	ldr	r0, [pc, #116]	; (800120c <MX_GPIO_Init+0x144>)
 8001198:	f004 ff4c 	bl	8006034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	481b      	ldr	r0, [pc, #108]	; (8001210 <MX_GPIO_Init+0x148>)
 80011a2:	f004 ff47 	bl	8006034 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 80011a6:	230e      	movs	r3, #14
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011b2:	2301      	movs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_GPIO_Init+0x140>)
 80011be:	f004 fd9d 	bl	8005cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80011c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_GPIO_Init+0x144>)
 80011dc:	f004 fd8e 	bl	8005cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e8:	2302      	movs	r3, #2
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_GPIO_Init+0x148>)
 80011f8:	f004 fd80 	bl	8005cfc <HAL_GPIO_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3730      	adds	r7, #48	; 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40020800 	.word	0x40020800

08001214 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001214:	b5b0      	push	{r4, r5, r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 800121a:	4b4c      	ldr	r3, [pc, #304]	; (800134c <MX_FSMC_Init+0x138>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 800123a:	4b45      	ldr	r3, [pc, #276]	; (8001350 <MX_FSMC_Init+0x13c>)
 800123c:	4a45      	ldr	r2, [pc, #276]	; (8001354 <MX_FSMC_Init+0x140>)
 800123e:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8001240:	4b43      	ldr	r3, [pc, #268]	; (8001350 <MX_FSMC_Init+0x13c>)
 8001242:	2210      	movs	r2, #16
 8001244:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001246:	4b42      	ldr	r3, [pc, #264]	; (8001350 <MX_FSMC_Init+0x13c>)
 8001248:	2202      	movs	r2, #2
 800124a:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800124c:	4b40      	ldr	r3, [pc, #256]	; (8001350 <MX_FSMC_Init+0x13c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8001252:	4b3f      	ldr	r3, [pc, #252]	; (8001350 <MX_FSMC_Init+0x13c>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8001258:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <MX_FSMC_Init+0x13c>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800125e:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <MX_FSMC_Init+0x13c>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001264:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <MX_FSMC_Init+0x13c>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 800126a:	4b39      	ldr	r3, [pc, #228]	; (8001350 <MX_FSMC_Init+0x13c>)
 800126c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 16;
 8001272:	4b37      	ldr	r3, [pc, #220]	; (8001350 <MX_FSMC_Init+0x13c>)
 8001274:	2210      	movs	r2, #16
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 131072;
 8001278:	4b35      	ldr	r3, [pc, #212]	; (8001350 <MX_FSMC_Init+0x13c>)
 800127a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 8001280:	4b33      	ldr	r3, [pc, #204]	; (8001350 <MX_FSMC_Init+0x13c>)
 8001282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001286:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 8001288:	4b31      	ldr	r3, [pc, #196]	; (8001350 <MX_FSMC_Init+0x13c>)
 800128a:	2201      	movs	r2, #1
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 134217728;
 800128e:	4b30      	ldr	r3, [pc, #192]	; (8001350 <MX_FSMC_Init+0x13c>)
 8001290:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8001296:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <MX_FSMC_Init+0x13c>)
 8001298:	2200      	movs	r2, #0
 800129a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800129e:	23fc      	movs	r3, #252	; 0xfc
 80012a0:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 80012a2:	23fc      	movs	r3, #252	; 0xfc
 80012a4:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 80012a6:	23fc      	movs	r3, #252	; 0xfc
 80012a8:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 80012aa:	23fc      	movs	r3, #252	; 0xfc
 80012ac:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 80012ae:	23fc      	movs	r3, #252	; 0xfc
 80012b0:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 80012b2:	23fc      	movs	r3, #252	; 0xfc
 80012b4:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 80012b6:	23fc      	movs	r3, #252	; 0xfc
 80012b8:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 80012ba:	23fc      	movs	r3, #252	; 0xfc
 80012bc:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80012be:	463a      	mov	r2, r7
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	4822      	ldr	r0, [pc, #136]	; (8001350 <MX_FSMC_Init+0x13c>)
 80012c8:	f004 fee7 	bl	800609a <HAL_NAND_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_FSMC_Init+0xc2>
  {
    Error_Handler( );
 80012d2:	f003 f885 	bl	80043e0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

    if (HAL_NAND_ECC_Disable(&hnand1) != HAL_OK) devError |= devNAND;
 80012d6:	481e      	ldr	r0, [pc, #120]	; (8001350 <MX_FSMC_Init+0x13c>)
 80012d8:	f005 f963 	bl	80065a2 <HAL_NAND_ECC_Disable>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <MX_FSMC_Init+0xdc>
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <MX_FSMC_Init+0x144>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	f043 0320 	orr.w	r3, r3, #32
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_FSMC_Init+0x144>)
 80012ee:	801a      	strh	r2, [r3, #0]

#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    if (HAL_NAND_RegisterCallback(&hnand1, HAL_NAND_IT_CB_ID, HAL_NAND_ITCallback) == HAL_ERROR) devError |= devNAND;
#endif

    if (NAND_Read_ID(&hnand1, &nandID) == HAL_OK) {//read ID information from chip
 80012f0:	491a      	ldr	r1, [pc, #104]	; (800135c <MX_FSMC_Init+0x148>)
 80012f2:	4817      	ldr	r0, [pc, #92]	; (8001350 <MX_FSMC_Init+0x13c>)
 80012f4:	f000 f890 	bl	8001418 <NAND_Read_ID>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d122      	bne.n	8001344 <MX_FSMC_Init+0x130>

    	nandState = HAL_NAND_GetState(&hnand1);
 80012fe:	4814      	ldr	r0, [pc, #80]	; (8001350 <MX_FSMC_Init+0x13c>)
 8001300:	f005 f978 	bl	80065f4 <HAL_NAND_GetState>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <MX_FSMC_Init+0x14c>)
 800130a:	701a      	strb	r2, [r3, #0]

    	memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand1.Config, sizeof(s_chipConf));
 800130c:	4a15      	ldr	r2, [pc, #84]	; (8001364 <MX_FSMC_Init+0x150>)
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_FSMC_Init+0x13c>)
 8001310:	4615      	mov	r5, r2
 8001312:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800131a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800131e:	e885 0003 	stmia.w	r5, {r0, r1}

    	if ((chipConf.PageSize > 0) && (chipConf.PageSize <= MAX_NAND_BUF)) {
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MX_FSMC_Init+0x150>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <MX_FSMC_Init+0x120>
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_FSMC_Init+0x150>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001332:	d907      	bls.n	8001344 <MX_FSMC_Init+0x130>
    		/*rdBuf = (uint8_t *)calloc(1, chipConf.PageSize);
    		wrBuf = (uint8_t *)calloc(1, chipConf.PageSize);

    		if (!rdBuf || !wrBuf) devError |= devMEM;*/
    	} else {
    		devError |= devNAND;
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_FSMC_Init+0x144>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	f043 0320 	orr.w	r3, r3, #32
 800133c:	b29a      	uxth	r2, r3
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_FSMC_Init+0x144>)
 8001340:	801a      	strh	r2, [r3, #0]

    }


  /* USER CODE END FSMC_Init 2 */
}
 8001342:	e7ff      	b.n	8001344 <MX_FSMC_Init+0x130>
 8001344:	bf00      	nop
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bdb0      	pop	{r4, r5, r7, pc}
 800134c:	2000139c 	.word	0x2000139c
 8001350:	20000320 	.word	0x20000320
 8001354:	a0000060 	.word	0xa0000060
 8001358:	2000036c 	.word	0x2000036c
 800135c:	200013a0 	.word	0x200013a0
 8001360:	20000085 	.word	0x20000085
 8001364:	200013a8 	.word	0x200013a8

08001368 <nand_getPageSize>:

/* USER CODE BEGIN 4 */

//-----------------------------------------------------------------------------
uint32_t nand_getPageSize()
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
	return chipConf.PageSize;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <nand_getPageSize+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	200013a8 	.word	0x200013a8

08001380 <nand_getPageCount>:
//-----------------------------------------------------------------------------
uint32_t nand_getPageCount()
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
	return ((chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr);
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <nand_getPageCount+0x24>)
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <nand_getPageCount+0x24>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <nand_getPageCount+0x24>)
 8001392:	68d2      	ldr	r2, [r2, #12]
 8001394:	fb02 f303 	mul.w	r3, r2, r3
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	200013a8 	.word	0x200013a8

080013a8 <nand_getBlockSize>:
//-----------------------------------------------------------------------------
uint32_t nand_getBlockSize()
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
	return chipConf.BlockSize;
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <nand_getBlockSize+0x14>)
 80013ae:	689b      	ldr	r3, [r3, #8]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	200013a8 	.word	0x200013a8

080013c0 <nand_PageToBlock>:
{
	return chipConf.BlockNbr;
}
//-----------------------------------------------------------------------------
uint32_t nand_PageToBlock(const uint32_t page)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
    return (page * chipConf.PageSize) / chipConf.BlockSize;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <nand_PageToBlock+0x28>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	fb03 f202 	mul.w	r2, r3, r2
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <nand_PageToBlock+0x28>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	200013a8 	.word	0x200013a8

080013ec <nand_BlockToPage>:
//-----------------------------------------------------------------------------
uint32_t nand_BlockToPage(const uint32_t blk)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	return (blk * chipConf.BlockSize) / chipConf.PageSize;
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <nand_BlockToPage+0x28>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	fb03 f202 	mul.w	r2, r3, r2
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <nand_BlockToPage+0x28>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	200013a8 	.word	0x200013a8

08001418 <NAND_Read_ID>:
//-----------------------------------------------------------------------------

HAL_StatusTypeDef NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d101      	bne.n	8001432 <NAND_Read_ID+0x1a>

		return HAL_BUSY;
 800142e:	2302      	movs	r3, #2
 8001430:	e059      	b.n	80014e6 <NAND_Read_ID+0xce>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b01      	cmp	r3, #1
 800143c:	d152      	bne.n	80014e4 <NAND_Read_ID+0xcc>

		__HAL_LOCK(hnand);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d101      	bne.n	800144c <NAND_Read_ID+0x34>
 8001448:	2302      	movs	r3, #2
 800144a:	e04c      	b.n	80014e6 <NAND_Read_ID+0xce>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2202      	movs	r2, #2
 8001458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    	devAdr = NAND_DEVICE1;
	    } else {
	    	devAdr = NAND_DEVICE2;
	    }
#else
	    devAdr = NAND_DEVICE;//MY_NAND_DEVICE;
 800145c:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <NAND_Read_ID+0xdc>)
 800145e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001462:	601a      	str	r2, [r3, #0]
#endif

	    /* Send Read ID command sequence */
	    *(__IO uint8_t *)((uint32_t)(devAdr | CMD_AREA))  = NAND_CMD_READID;
 8001464:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <NAND_Read_ID+0xdc>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146c:	2290      	movs	r2, #144	; 0x90
 800146e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001470:	f3bf 8f4f 	dsb	sy
}
 8001474:	bf00      	nop
	    __DSB();
	    *(__IO uint8_t *)((uint32_t)(devAdr | ADDR_AREA)) = 0x00;
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <NAND_Read_ID+0xdc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001482:	f3bf 8f4f 	dsb	sy
}
 8001486:	bf00      	nop
	    __DSB();

	    /* Read the electronic signature from NAND flash */
	    if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d123      	bne.n	80014d8 <NAND_Read_ID+0xc0>
	    	__IO uint32_t data  = *(__IO uint32_t *)devAdr;
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <NAND_Read_ID+0xdc>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	60fb      	str	r3, [r7, #12]
	    	__IO uint32_t data1 = *((__IO uint32_t *)devAdr + 4);
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <NAND_Read_ID+0xdc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3310      	adds	r3, #16
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60bb      	str	r3, [r7, #8]

	    	pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	701a      	strb	r2, [r3, #0]
	    	pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	705a      	strb	r2, [r3, #1]
	    	pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	0c1b      	lsrs	r3, r3, #16
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	709a      	strb	r2, [r3, #2]
	    	pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	0e1b      	lsrs	r3, r3, #24
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	70da      	strb	r2, [r3, #3]
	    	pNAND_ID->Plane_Id   = ADDR_1ST_CYCLE(data1);
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	711a      	strb	r2, [r3, #4]

	    	hnand->State = HAL_NAND_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    }

	    __HAL_UNLOCK(hnand);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	e000      	b.n	80014e6 <NAND_Read_ID+0xce>
	    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20001388 	.word	0x20001388

080014f8 <NAND_Read_Page_8b>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef  NAND_Read_Page_8b(NAND_HandleTypeDef *hnand,
									   NAND_AddressTypeDef *pAddress,
									   uint8_t *pBuffer,
                                       uint32_t NumPageToRead)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b090      	sub	sp, #64	; 0x40
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	603b      	str	r3, [r7, #0]
uint32_t numpagesread = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t nbpages = NumPageToRead;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
uint8_t *buff = pBuffer;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	627b      	str	r3, [r7, #36]	; 0x24

	// Check the NAND controller state
	if (hnand->State == HAL_NAND_STATE_BUSY) {
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d101      	bne.n	8001522 <NAND_Read_Page_8b+0x2a>
		return HAL_BUSY;
 800151e:	2302      	movs	r3, #2
 8001520:	e0dc      	b.n	80016dc <NAND_Read_Page_8b+0x1e4>
	} else if (hnand->State == HAL_NAND_STATE_READY) {
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b01      	cmp	r3, #1
 800152c:	f040 80d5 	bne.w	80016da <NAND_Read_Page_8b+0x1e2>
		__HAL_LOCK(hnand);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <NAND_Read_Page_8b+0x46>
 800153a:	2302      	movs	r3, #2
 800153c:	e0ce      	b.n	80016dc <NAND_Read_Page_8b+0x1e4>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2202      	movs	r2, #2
 800154a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	    uint32_t deviceaddress = devAdr;
 800154e:	4b65      	ldr	r3, [pc, #404]	; (80016e4 <NAND_Read_Page_8b+0x1ec>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	61bb      	str	r3, [r7, #24]
	    uint32_t nandaddress = pAddress->Page;//ARRAY_ADDRESS(pAddress, hnand);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	623b      	str	r3, [r7, #32]

	    if (dbg > logOn)
 800155a:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <NAND_Read_Page_8b+0x1f0>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	f240 80a4 	bls.w	80016ac <NAND_Read_Page_8b+0x1b4>
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
	    		  __func__,
				  nandaddress,
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	881b      	ldrh	r3, [r3, #0]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001568:	461a      	mov	r2, r3
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	885b      	ldrh	r3, [r3, #2]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800156e:	4619      	mov	r1, r3
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	889b      	ldrh	r3, [r3, #4]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001574:	4618      	mov	r0, r3
 8001576:	4b5d      	ldr	r3, [pc, #372]	; (80016ec <NAND_Read_Page_8b+0x1f4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	9303      	str	r3, [sp, #12]
 800157c:	9002      	str	r0, [sp, #8]
 800157e:	9101      	str	r1, [sp, #4]
 8001580:	9200      	str	r2, [sp, #0]
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	4a5a      	ldr	r2, [pc, #360]	; (80016f0 <NAND_Read_Page_8b+0x1f8>)
 8001586:	495b      	ldr	r1, [pc, #364]	; (80016f4 <NAND_Read_Page_8b+0x1fc>)
 8001588:	2001      	movs	r0, #1
 800158a:	f001 faed 	bl	8002b68 <Report>

	    // Page(s) read loop
	    while (nbpages && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 800158e:	e08d      	b.n	80016ac <NAND_Read_Page_8b+0x1b4>
	    	// Send read page command sequence
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800159a:	f3bf 8f4f 	dsb	sy
}
 800159e:	bf00      	nop
	    	__DSB();
	    	//
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015aa:	f3bf 8f4f 	dsb	sy
}
 80015ae:	bf00      	nop
	    	__DSB();
	    	if ((hnand->Config.PageSize) > 512U) {
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015b8:	d907      	bls.n	80015ca <NAND_Read_Page_8b+0xd2>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015c4:	f3bf 8f4f 	dsb	sy
}
 80015c8:	bf00      	nop
	    		__DSB();
	    	}
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	6a3a      	ldr	r2, [r7, #32]
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015d6:	f3bf 8f4f 	dsb	sy
}
 80015da:	bf00      	nop
	    	__DSB();
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80015dc:	6a3b      	ldr	r3, [r7, #32]
 80015de:	0a1a      	lsrs	r2, r3, #8
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015ea:	f3bf 8f4f 	dsb	sy
}
 80015ee:	bf00      	nop
	    	__DSB();
	    	if ((hnand->Config.BlockSize * hnand->Config.BlockNbr) > 65535U) {
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d309      	bcc.n	8001616 <NAND_Read_Page_8b+0x11e>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	0c1a      	lsrs	r2, r3, #16
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001610:	f3bf 8f4f 	dsb	sy
}
 8001614:	bf00      	nop
	    		__DSB();
	    	}
	    	//
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161c:	2230      	movs	r2, #48	; 0x30
 800161e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001620:	f3bf 8f4f 	dsb	sy
}
 8001624:	bf00      	nop
	    	__DSB();


	    	if (hnand->Config.ExtraCommandEnable == ENABLE) {
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800162c:	2b01      	cmp	r3, #1
 800162e:	d123      	bne.n	8001678 <NAND_Read_Page_8b+0x180>
	    		uint32_t tickstart = HAL_GetTick();
 8001630:	f003 fe50 	bl	80052d4 <HAL_GetTick>
 8001634:	6178      	str	r0, [r7, #20]
	    		while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 8001636:	e011      	b.n	800165c <NAND_Read_Page_8b+0x164>
	    			if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT) {
 8001638:	f003 fe4c 	bl	80052d4 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001646:	d909      	bls.n	800165c <NAND_Read_Page_8b+0x164>
	    				hnand->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2203      	movs	r2, #3
 800164c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    				__HAL_UNLOCK(hnand);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2020 	strb.w	r2, [r3, #32]
	    				return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e03f      	b.n	80016dc <NAND_Read_Page_8b+0x1e4>
	    		while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f004 ffd7 	bl	8006610 <HAL_NAND_Read_Status>
 8001662:	4603      	mov	r3, r0
 8001664:	2b40      	cmp	r3, #64	; 0x40
 8001666:	d1e7      	bne.n	8001638 <NAND_Read_Page_8b+0x140>
	    			}
	    		}

	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001672:	f3bf 8f4f 	dsb	sy
}
 8001676:	bf00      	nop
	    		__DSB();
	    	}

	    	// Get Data into Buffer
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	e008      	b.n	8001690 <NAND_Read_Page_8b+0x198>
	    		*buff++ = *(uint8_t *)deviceaddress;
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	1c59      	adds	r1, r3, #1
 8001684:	6279      	str	r1, [r7, #36]	; 0x24
 8001686:	7812      	ldrb	r2, [r2, #0]
 8001688:	701a      	strb	r2, [r3, #0]
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3301      	adds	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	429a      	cmp	r2, r3
 8001698:	d3f1      	bcc.n	800167e <NAND_Read_Page_8b+0x186>
	    	}

	    	numpagesread++;// Increment read pages number
 800169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169c:	3301      	adds	r3, #1
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
	    	nbpages--;// Decrement pages to read
 80016a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a2:	3b01      	subs	r3, #1
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
	    	nandaddress = (uint32_t)(nandaddress + 1U);// Increment the NAND address
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	3301      	adds	r3, #1
 80016aa:	623b      	str	r3, [r7, #32]
	    while (nbpages && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 80016ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d009      	beq.n	80016c6 <NAND_Read_Page_8b+0x1ce>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	6a3a      	ldr	r2, [r7, #32]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	f4ff af65 	bcc.w	8001590 <NAND_Read_Page_8b+0x98>
	    }

	    hnand->State = HAL_NAND_STATE_READY;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    __HAL_UNLOCK(hnand);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <NAND_Read_Page_8b+0x1e4>
	    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3730      	adds	r7, #48	; 0x30
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20001388 	.word	0x20001388
 80016e8:	20000068 	.word	0x20000068
 80016ec:	20000004 	.word	0x20000004
 80016f0:	08014b54 	.word	0x08014b54
 80016f4:	08011ee0 	.word	0x08011ee0

080016f8 <NAND_Write_Page_8b>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef  NAND_Write_Page_8b(NAND_HandleTypeDef *hnand,
									    NAND_AddressTypeDef *pAddress,
									    uint8_t *pBuffer,
                                        uint32_t NumPageToWrite)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08e      	sub	sp, #56	; 0x38
 80016fc:	af04      	add	r7, sp, #16
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
uint32_t numpageswritten = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t nbpages = NumPageToWrite;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	623b      	str	r3, [r7, #32]

	/* Check the NAND controller state */
	if (hnand->State == HAL_NAND_STATE_BUSY) {
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d101      	bne.n	800171e <NAND_Write_Page_8b+0x26>
		return HAL_BUSY;
 800171a:	2302      	movs	r3, #2
 800171c:	e0da      	b.n	80018d4 <NAND_Write_Page_8b+0x1dc>
	} else if (hnand->State == HAL_NAND_STATE_READY) {
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b01      	cmp	r3, #1
 8001728:	f040 80d3 	bne.w	80018d2 <NAND_Write_Page_8b+0x1da>

	    __HAL_LOCK(hnand);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <NAND_Write_Page_8b+0x42>
 8001736:	2302      	movs	r3, #2
 8001738:	e0cc      	b.n	80018d4 <NAND_Write_Page_8b+0x1dc>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2202      	movs	r2, #2
 8001746:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	    uint32_t deviceaddress = devAdr;
 800174a:	4b64      	ldr	r3, [pc, #400]	; (80018dc <NAND_Write_Page_8b+0x1e4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	617b      	str	r3, [r7, #20]
	    uint32_t nandaddress = pAddress->Page;//ARRAY_ADDRESS(pAddress, hnand);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	61fb      	str	r3, [r7, #28]

	    if (dbg > logOn)
 8001756:	4b62      	ldr	r3, [pc, #392]	; (80018e0 <NAND_Write_Page_8b+0x1e8>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b01      	cmp	r3, #1
 800175c:	f240 80a2 	bls.w	80018a4 <NAND_Write_Page_8b+0x1ac>
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
	    	      __func__,
	    		  nandaddress,
	    		  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	881b      	ldrh	r3, [r3, #0]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001764:	461a      	mov	r2, r3
	    		  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	885b      	ldrh	r3, [r3, #2]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800176a:	4619      	mov	r1, r3
	    		  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	889b      	ldrh	r3, [r3, #4]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001770:	4618      	mov	r0, r3
 8001772:	4b5c      	ldr	r3, [pc, #368]	; (80018e4 <NAND_Write_Page_8b+0x1ec>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	9303      	str	r3, [sp, #12]
 8001778:	9002      	str	r0, [sp, #8]
 800177a:	9101      	str	r1, [sp, #4]
 800177c:	9200      	str	r2, [sp, #0]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	4a59      	ldr	r2, [pc, #356]	; (80018e8 <NAND_Write_Page_8b+0x1f0>)
 8001782:	495a      	ldr	r1, [pc, #360]	; (80018ec <NAND_Write_Page_8b+0x1f4>)
 8001784:	2001      	movs	r0, #1
 8001786:	f001 f9ef 	bl	8002b68 <Report>

	    /* Page(s) write loop */
	    while ((nbpages > 0) && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 800178a:	e08b      	b.n	80018a4 <NAND_Write_Page_8b+0x1ac>
	    	/* Send write page command sequence */
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001796:	f3bf 8f4f 	dsb	sy
}
 800179a:	bf00      	nop
	    	__DSB();
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017a6:	f3bf 8f4f 	dsb	sy
}
 80017aa:	bf00      	nop
	    	__DSB();
	    	//
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017b6:	f3bf 8f4f 	dsb	sy
}
 80017ba:	bf00      	nop
	    	__DSB();
	    	if (hnand->Config.PageSize > 512U) {
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c4:	d907      	bls.n	80017d6 <NAND_Write_Page_8b+0xde>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017d0:	f3bf 8f4f 	dsb	sy
}
 80017d4:	bf00      	nop
	    		__DSB();
	    	}
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017e2:	f3bf 8f4f 	dsb	sy
}
 80017e6:	bf00      	nop
	    	__DSB();
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	0a1a      	lsrs	r2, r3, #8
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017f6:	f3bf 8f4f 	dsb	sy
}
 80017fa:	bf00      	nop
	    	__DSB();
	    	if ((hnand->Config.BlockSize * hnand->Config.BlockNbr) > 65535U) {
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001804:	fb02 f303 	mul.w	r3, r2, r3
 8001808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180c:	d309      	bcc.n	8001822 <NAND_Write_Page_8b+0x12a>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	0c1a      	lsrs	r2, r3, #16
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800181c:	f3bf 8f4f 	dsb	sy
}
 8001820:	bf00      	nop
	    		__DSB();
	    	}
	    	//
	    	// Write data to memory
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
 8001826:	e00b      	b.n	8001840 <NAND_Write_Page_8b+0x148>
	    		*(__IO uint8_t *)deviceaddress = *(pBuffer + index);
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	441a      	add	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001834:	f3bf 8f4f 	dsb	sy
}
 8001838:	bf00      	nop
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	3301      	adds	r3, #1
 800183e:	61bb      	str	r3, [r7, #24]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	429a      	cmp	r2, r3
 8001848:	d3ee      	bcc.n	8001828 <NAND_Write_Page_8b+0x130>
	    		__DSB();
	    	}

	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	2210      	movs	r2, #16
 8001852:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001854:	f3bf 8f4f 	dsb	sy
}
 8001858:	bf00      	nop
	    	__DSB();

	    	uint32_t tickstart = HAL_GetTick();
 800185a:	f003 fd3b 	bl	80052d4 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]
	    	while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 8001860:	e011      	b.n	8001886 <NAND_Write_Page_8b+0x18e>
	    		if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT) {
 8001862:	f003 fd37 	bl	80052d4 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001870:	d909      	bls.n	8001886 <NAND_Write_Page_8b+0x18e>
	    			hnand->State = HAL_NAND_STATE_ERROR;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2203      	movs	r2, #3
 8001876:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    			__HAL_UNLOCK(hnand);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2020 	strb.w	r2, [r3, #32]
	    			return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e026      	b.n	80018d4 <NAND_Write_Page_8b+0x1dc>
	    	while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f004 fec2 	bl	8006610 <HAL_NAND_Read_Status>
 800188c:	4603      	mov	r3, r0
 800188e:	2b40      	cmp	r3, #64	; 0x40
 8001890:	d1e7      	bne.n	8001862 <NAND_Write_Page_8b+0x16a>
	    		}
	    	}

	    	numpageswritten++;// Increment written pages number
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	3301      	adds	r3, #1
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
	    	nbpages--;// Decrement pages to write
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	3b01      	subs	r3, #1
 800189c:	623b      	str	r3, [r7, #32]
	    	nandaddress = (uint32_t)(nandaddress + 1U);// Increment the NAND address
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3301      	adds	r3, #1
 80018a2:	61fb      	str	r3, [r7, #28]
	    while ((nbpages > 0) && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <NAND_Write_Page_8b+0x1c6>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f4ff af67 	bcc.w	800178c <NAND_Write_Page_8b+0x94>
	    }

	    hnand->State = HAL_NAND_STATE_READY;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    __HAL_UNLOCK(hnand);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <NAND_Write_Page_8b+0x1dc>
	    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3728      	adds	r7, #40	; 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20001388 	.word	0x20001388
 80018e0:	20000068 	.word	0x20000068
 80018e4:	20000004 	.word	0x20000004
 80018e8:	08014b68 	.word	0x08014b68
 80018ec:	08011ee0 	.word	0x08011ee0

080018f0 <NAND_Erase_Block>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t prn)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af04      	add	r7, sp, #16
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	4613      	mov	r3, r2
 80018fc:	71fb      	strb	r3, [r7, #7]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d101      	bne.n	800190e <NAND_Erase_Block+0x1e>

		return HAL_BUSY;
 800190a:	2302      	movs	r3, #2
 800190c:	e06e      	b.n	80019ec <NAND_Erase_Block+0xfc>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d167      	bne.n	80019ea <NAND_Erase_Block+0xfa>

		__HAL_LOCK(hnand);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <NAND_Erase_Block+0x38>
 8001924:	2302      	movs	r3, #2
 8001926:	e061      	b.n	80019ec <NAND_Erase_Block+0xfc>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2020 	strb.w	r2, [r3, #32]
		hnand->State = HAL_NAND_STATE_BUSY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		uint32_t deviceaddress = devAdr;
 8001938:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <NAND_Erase_Block+0x104>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	617b      	str	r3, [r7, #20]
		uint32_t nandaddress = pAddress->Page;//ARRAY_ADDRESS(pAddress, hnand);
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	613b      	str	r3, [r7, #16]

		if (prn) {
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d018      	beq.n	800197c <NAND_Erase_Block+0x8c>
			if (dbg > logOn)
 800194a:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <NAND_Erase_Block+0x108>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d914      	bls.n	800197c <NAND_Erase_Block+0x8c>
				Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
			    	      __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	881b      	ldrh	r3, [r3, #0]
				Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001956:	461a      	mov	r2, r3
			    	      __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	885b      	ldrh	r3, [r3, #2]
				Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800195c:	4619      	mov	r1, r3
			    	      __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	889b      	ldrh	r3, [r3, #4]
				Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001962:	4618      	mov	r0, r3
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <NAND_Erase_Block+0x10c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	9303      	str	r3, [sp, #12]
 800196a:	9002      	str	r0, [sp, #8]
 800196c:	9101      	str	r1, [sp, #4]
 800196e:	9200      	str	r2, [sp, #0]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <NAND_Erase_Block+0x110>)
 8001974:	4923      	ldr	r1, [pc, #140]	; (8001a04 <NAND_Erase_Block+0x114>)
 8001976:	2001      	movs	r0, #1
 8001978:	f001 f8f6 	bl	8002b68 <Report>
		}

		/* Send Erase block command sequence */
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001982:	2260      	movs	r2, #96	; 0x60
 8001984:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001986:	f3bf 8f4f 	dsb	sy
}
 800198a:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001998:	f3bf 8f4f 	dsb	sy
}
 800199c:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	0a1a      	lsrs	r2, r3, #8
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019ac:	f3bf 8f4f 	dsb	sy
}
 80019b0:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	0c1a      	lsrs	r2, r3, #16
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019c0:	f3bf 8f4f 	dsb	sy
}
 80019c4:	bf00      	nop
		__DSB();

		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	22d0      	movs	r2, #208	; 0xd0
 80019ce:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
		__DSB();

		hnand->State = HAL_NAND_STATE_READY;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(hnand);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2020 	strb.w	r2, [r3, #32]

		return HAL_ERROR;

	}

	return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <NAND_Erase_Block+0xfc>
		return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20001388 	.word	0x20001388
 80019f8:	20000068 	.word	0x20000068
 80019fc:	20000004 	.word	0x20000004
 8001a00:	08014b7c 	.word	0x08014b7c
 8001a04:	08011ee0 	.word	0x08011ee0

08001a08 <pageIsEmpty>:
//-----------------------------------------------------------------------------
//      Check: page is empty ?
//
bool pageIsEmpty(uint32_t page)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
bool ret = false;
 8001a10:	2300      	movs	r3, #0
 8001a12:	75fb      	strb	r3, [r7, #23]

	NAND_AddressTypeDef addr = {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	813b      	strh	r3, [r7, #8]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	817b      	strh	r3, [r7, #10]
		.Page = page,//(page % (chipConf.BlockSize / chipConf.PageSize)),//page,
		.Plane = 1,
		.Block = nand_PageToBlock(page)
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fcce 	bl	80013c0 <nand_PageToBlock>
 8001a24:	4603      	mov	r3, r0
	NAND_AddressTypeDef addr = {
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	81bb      	strh	r3, [r7, #12]
	};

	if (NAND_Read_Page_8b(nandPort, &addr, rdBuf, 1) != HAL_OK) {
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <pageIsEmpty+0x7c>)
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	f107 0108 	add.w	r1, r7, #8
 8001a32:	2301      	movs	r3, #1
 8001a34:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <pageIsEmpty+0x80>)
 8001a36:	f7ff fd5f 	bl	80014f8 <NAND_Read_Page_8b>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <pageIsEmpty+0x48>
		devError |= devNAND;
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <pageIsEmpty+0x84>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	f043 0320 	orr.w	r3, r3, #32
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <pageIsEmpty+0x84>)
 8001a4c:	801a      	strh	r2, [r3, #0]
 8001a4e:	e014      	b.n	8001a7a <pageIsEmpty+0x72>
	} else {
		ret = true;
 8001a50:	2301      	movs	r3, #1
 8001a52:	75fb      	strb	r3, [r7, #23]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	e00a      	b.n	8001a70 <pageIsEmpty+0x68>
			if (*(uint8_t *)(rdBuf + i) != 0xff) {
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <pageIsEmpty+0x80>)
 8001a5e:	4413      	add	r3, r2
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2bff      	cmp	r3, #255	; 0xff
 8001a64:	d001      	beq.n	8001a6a <pageIsEmpty+0x62>
				ret = false;
 8001a66:	2300      	movs	r3, #0
 8001a68:	75fb      	strb	r3, [r7, #23]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <pageIsEmpty+0x88>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d3ef      	bcc.n	8001a5a <pageIsEmpty+0x52>
			}
		}
	}

	return ret;
 8001a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000078 	.word	0x20000078
 8001a88:	200013c0 	.word	0x200013c0
 8001a8c:	2000036c 	.word	0x2000036c
 8001a90:	200013a8 	.word	0x200013a8

08001a94 <emptyArea>:
//-------------------------------------------------------------------------------------------
int emptyArea(uint32_t addr, uint32_t len, uint8_t *buf, NAND_AddressTypeDef *nan)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b093      	sub	sp, #76	; 0x4c
 8001a98:	af08      	add	r7, sp, #32
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	603b      	str	r3, [r7, #0]
int ret = -1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t shift = (addr - devAdr) % chipConf.PageSize;
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <emptyArea+0x104>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4a3a      	ldr	r2, [pc, #232]	; (8001b9c <emptyArea+0x108>)
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ab8:	fb01 f202 	mul.w	r2, r1, r2
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
uint32_t dlin = shift + len;
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	623b      	str	r3, [r7, #32]

	if (dlin > chipConf.PageSize)  dlin = chipConf.PageSize - shift;
 8001ac8:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <emptyArea+0x108>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6a3a      	ldr	r2, [r7, #32]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d904      	bls.n	8001adc <emptyArea+0x48>
 8001ad2:	4b32      	ldr	r3, [pc, #200]	; (8001b9c <emptyArea+0x108>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	623b      	str	r3, [r7, #32]
	//

	if (dbg > logOn)
 8001adc:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <emptyArea+0x10c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d91c      	bls.n	8001b1e <emptyArea+0x8a>
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	4413      	add	r3, r2
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001aea:	3b01      	subs	r3, #1
 8001aec:	6a3a      	ldr	r2, [r7, #32]
 8001aee:	3a01      	subs	r2, #1
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8001af0:	6839      	ldr	r1, [r7, #0]
 8001af2:	8809      	ldrh	r1, [r1, #0]
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001af4:	4608      	mov	r0, r1
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8001af6:	6839      	ldr	r1, [r7, #0]
 8001af8:	8889      	ldrh	r1, [r1, #4]
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001afa:	460c      	mov	r4, r1
 8001afc:	4929      	ldr	r1, [pc, #164]	; (8001ba4 <emptyArea+0x110>)
 8001afe:	6809      	ldr	r1, [r1, #0]
 8001b00:	9106      	str	r1, [sp, #24]
 8001b02:	9405      	str	r4, [sp, #20]
 8001b04:	9004      	str	r0, [sp, #16]
 8001b06:	9203      	str	r2, [sp, #12]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	9202      	str	r2, [sp, #8]
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	9201      	str	r2, [sp, #4]
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4a24      	ldr	r2, [pc, #144]	; (8001ba8 <emptyArea+0x114>)
 8001b16:	4925      	ldr	r1, [pc, #148]	; (8001bac <emptyArea+0x118>)
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f001 f825 	bl	8002b68 <Report>

	//
	bool rt = false;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	77fb      	strb	r3, [r7, #31]
	if (NAND_Read_Page_8b(nandPort, nan, buf, 1) != HAL_OK) {
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <emptyArea+0x11c>)
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	2301      	movs	r3, #1
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6839      	ldr	r1, [r7, #0]
 8001b2c:	f7ff fce4 	bl	80014f8 <NAND_Read_Page_8b>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <emptyArea+0xb2>
		devError |= devNAND;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <emptyArea+0x120>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	f043 0320 	orr.w	r3, r3, #32
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <emptyArea+0x120>)
 8001b42:	801a      	strh	r2, [r3, #0]
 8001b44:	e01e      	b.n	8001b84 <emptyArea+0xf0>
	} else {
		//
		rt = true;
 8001b46:	2301      	movs	r3, #1
 8001b48:	77fb      	strb	r3, [r7, #31]
		uint8_t byte;
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
 8001b4e:	e014      	b.n	8001b7a <emptyArea+0xe6>
			byte = *(buf + i);
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4413      	add	r3, r2
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	74fb      	strb	r3, [r7, #19]
			if ((i >= shift) && (i < dlin)) {
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d308      	bcc.n	8001b74 <emptyArea+0xe0>
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d204      	bcs.n	8001b74 <emptyArea+0xe0>
				if (byte != 0xff) rt = false;
 8001b6a:	7cfb      	ldrb	r3, [r7, #19]
 8001b6c:	2bff      	cmp	r3, #255	; 0xff
 8001b6e:	d001      	beq.n	8001b74 <emptyArea+0xe0>
 8001b70:	2300      	movs	r3, #0
 8001b72:	77fb      	strb	r3, [r7, #31]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	3301      	adds	r3, #1
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <emptyArea+0x108>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d3e5      	bcc.n	8001b50 <emptyArea+0xbc>
			}
		}
		//
	}

	if (rt) ret = shift;
 8001b84:	7ffb      	ldrb	r3, [r7, #31]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <emptyArea+0xfa>
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24

	return ret;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	372c      	adds	r7, #44	; 0x2c
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd90      	pop	{r4, r7, pc}
 8001b98:	20001388 	.word	0x20001388
 8001b9c:	200013a8 	.word	0x200013a8
 8001ba0:	20000068 	.word	0x20000068
 8001ba4:	20000004 	.word	0x20000004
 8001ba8:	08014b90 	.word	0x08014b90
 8001bac:	08011f14 	.word	0x08011f14
 8001bb0:	20000078 	.word	0x20000078
 8001bb4:	2000036c 	.word	0x2000036c

08001bb8 <areaIsEmpty>:
//
bool areaIsEmpty(uint32_t adr, uint32_t len)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b094      	sub	sp, #80	; 0x50
 8001bbc:	af08      	add	r7, sp, #32
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
bool ret = false;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
uint32_t shift = adr - devAdr;
 8001bc8:	4b97      	ldr	r3, [pc, #604]	; (8001e28 <areaIsEmpty+0x270>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	623b      	str	r3, [r7, #32]
uint32_t page = shift / nandPort->Config.PageSize;
 8001bd2:	4b96      	ldr	r3, [pc, #600]	; (8001e2c <areaIsEmpty+0x274>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	6a3a      	ldr	r2, [r7, #32]
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	61fb      	str	r3, [r7, #28]
uint32_t block = nand_PageToBlock(page);
 8001be0:	69f8      	ldr	r0, [r7, #28]
 8001be2:	f7ff fbed 	bl	80013c0 <nand_PageToBlock>
 8001be6:	61b8      	str	r0, [r7, #24]


	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 8001be8:	4b90      	ldr	r3, [pc, #576]	; (8001e2c <areaIsEmpty+0x274>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d109      	bne.n	8001c0a <areaIsEmpty+0x52>
		devError |= devNAND;
 8001bf6:	4b8e      	ldr	r3, [pc, #568]	; (8001e30 <areaIsEmpty+0x278>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	f043 0320 	orr.w	r3, r3, #32
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	4b8b      	ldr	r3, [pc, #556]	; (8001e30 <areaIsEmpty+0x278>)
 8001c02:	801a      	strh	r2, [r3, #0]
		return ret;//HAL_BUSY;
 8001c04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c08:	e10a      	b.n	8001e20 <areaIsEmpty+0x268>
	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 8001c0a:	4b88      	ldr	r3, [pc, #544]	; (8001e2c <areaIsEmpty+0x274>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	f040 80fa 	bne.w	8001e0e <areaIsEmpty+0x256>
		//
		shift %= nandPort->Config.PageSize;
 8001c1a:	4b84      	ldr	r3, [pc, #528]	; (8001e2c <areaIsEmpty+0x274>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c26:	fb01 f202 	mul.w	r2, r1, r2
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	623b      	str	r3, [r7, #32]
		uint32_t dlin = shift + len;
 8001c2e:	6a3a      	ldr	r2, [r7, #32]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
		if (dlin > nandPort->Config.PageSize)  dlin = nandPort->Config.PageSize - shift;
 8001c36:	4b7d      	ldr	r3, [pc, #500]	; (8001e2c <areaIsEmpty+0x274>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d905      	bls.n	8001c4e <areaIsEmpty+0x96>
 8001c42:	4b7a      	ldr	r3, [pc, #488]	; (8001e2c <areaIsEmpty+0x274>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
		//
		__HAL_LOCK(nandPort);
 8001c4e:	4b77      	ldr	r3, [pc, #476]	; (8001e2c <areaIsEmpty+0x274>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d101      	bne.n	8001c5e <areaIsEmpty+0xa6>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e0e0      	b.n	8001e20 <areaIsEmpty+0x268>
 8001c5e:	4b73      	ldr	r3, [pc, #460]	; (8001e2c <areaIsEmpty+0x274>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 8001c68:	4b70      	ldr	r3, [pc, #448]	; (8001e2c <areaIsEmpty+0x274>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		NAND_AddressTypeDef pAddress = {
			.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),//page,
 8001c72:	4b70      	ldr	r3, [pc, #448]	; (8001e34 <areaIsEmpty+0x27c>)
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	4b6f      	ldr	r3, [pc, #444]	; (8001e34 <areaIsEmpty+0x27c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c84:	fb01 f202 	mul.w	r2, r1, r2
 8001c88:	1a9b      	subs	r3, r3, r2
		NAND_AddressTypeDef pAddress = {
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	813b      	strh	r3, [r7, #8]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	817b      	strh	r3, [r7, #10]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	81bb      	strh	r3, [r7, #12]
			.Plane = 1,
			.Block = block
		};
		uint32_t deviceaddress = devAdr;
 8001c98:	4b63      	ldr	r3, [pc, #396]	; (8001e28 <areaIsEmpty+0x270>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	617b      	str	r3, [r7, #20]
		uint32_t nandaddress = ARRAY_ADDRESS(&pAddress, nandPort);
 8001c9e:	893b      	ldrh	r3, [r7, #8]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	89bb      	ldrh	r3, [r7, #12]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	897b      	ldrh	r3, [r7, #10]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	4b60      	ldr	r3, [pc, #384]	; (8001e2c <areaIsEmpty+0x274>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb0:	fb00 f303 	mul.w	r3, r0, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a5d      	ldr	r2, [pc, #372]	; (8001e2c <areaIsEmpty+0x274>)
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	613b      	str	r3, [r7, #16]

		if (dbg > logOn)
 8001cc4:	4b5c      	ldr	r3, [pc, #368]	; (8001e38 <areaIsEmpty+0x280>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d91a      	bls.n	8001d02 <areaIsEmpty+0x14a>
			Report(1, "[%s] nand_adr:0x%X adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
				  __func__, nandaddress, adr, adr + len - 1, len, shift, dlin - 1, page, block, eol);
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	4413      	add	r3, r2
			Report(1, "[%s] nand_adr:0x%X adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cd6:	3a01      	subs	r2, #1
 8001cd8:	4958      	ldr	r1, [pc, #352]	; (8001e3c <areaIsEmpty+0x284>)
 8001cda:	6809      	ldr	r1, [r1, #0]
 8001cdc:	9107      	str	r1, [sp, #28]
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	9106      	str	r1, [sp, #24]
 8001ce2:	69f9      	ldr	r1, [r7, #28]
 8001ce4:	9105      	str	r1, [sp, #20]
 8001ce6:	9204      	str	r2, [sp, #16]
 8001ce8:	6a3a      	ldr	r2, [r7, #32]
 8001cea:	9203      	str	r2, [sp, #12]
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	9202      	str	r2, [sp, #8]
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4a51      	ldr	r2, [pc, #324]	; (8001e40 <areaIsEmpty+0x288>)
 8001cfa:	4952      	ldr	r1, [pc, #328]	; (8001e44 <areaIsEmpty+0x28c>)
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f000 ff33 	bl	8002b68 <Report>

		/* Page(s) read loop */
		if (nandaddress < ((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr))) {
 8001d02:	4b4a      	ldr	r3, [pc, #296]	; (8001e2c <areaIsEmpty+0x274>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	4a48      	ldr	r2, [pc, #288]	; (8001e2c <areaIsEmpty+0x274>)
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d26d      	bcs.n	8001df4 <areaIsEmpty+0x23c>
			/* Send read page command sequence */
			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d22:	f3bf 8f4f 	dsb	sy
}
 8001d26:	bf00      	nop
			__DSB();
			//
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d32:	f3bf 8f4f 	dsb	sy
}
 8001d36:	bf00      	nop
			__DSB();
			if ((nandPort->Config.PageSize) > 512U) {
 8001d38:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <areaIsEmpty+0x274>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d42:	d907      	bls.n	8001d54 <areaIsEmpty+0x19c>
				*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d4e:	f3bf 8f4f 	dsb	sy
}
 8001d52:	bf00      	nop
				__DSB();
			}
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d60:	f3bf 8f4f 	dsb	sy
}
 8001d64:	bf00      	nop
			__DSB();
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	0a1a      	lsrs	r2, r3, #8
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d74:	f3bf 8f4f 	dsb	sy
}
 8001d78:	bf00      	nop
			__DSB();
			if (((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr)) > 65535U) {
 8001d7a:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <areaIsEmpty+0x274>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	4a2a      	ldr	r2, [pc, #168]	; (8001e2c <areaIsEmpty+0x274>)
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8e:	d309      	bcc.n	8001da4 <areaIsEmpty+0x1ec>
				*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	0c1a      	lsrs	r2, r3, #16
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d9e:	f3bf 8f4f 	dsb	sy
}
 8001da2:	bf00      	nop
				__DSB();
			}
			//
			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001daa:	2230      	movs	r2, #48	; 0x30
 8001dac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001dae:	f3bf 8f4f 	dsb	sy
}
 8001db2:	bf00      	nop
			__DSB();

			ret = true;
 8001db4:	2301      	movs	r3, #1
 8001db6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint8_t byte;
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbe:	e013      	b.n	8001de8 <areaIsEmpty+0x230>
				byte = *(uint8_t *)deviceaddress;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	73fb      	strb	r3, [r7, #15]
				if ((index >= shift) && (index < dlin)) {
 8001dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d309      	bcc.n	8001de2 <areaIsEmpty+0x22a>
 8001dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d205      	bcs.n	8001de2 <areaIsEmpty+0x22a>
					if (byte != 0xff) ret = false;
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2bff      	cmp	r3, #255	; 0xff
 8001dda:	d002      	beq.n	8001de2 <areaIsEmpty+0x22a>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	3301      	adds	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
 8001de8:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <areaIsEmpty+0x274>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d3e5      	bcc.n	8001dc0 <areaIsEmpty+0x208>
				}
			}
		}
		//
		nandPort->State = HAL_NAND_STATE_READY;
 8001df4:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <areaIsEmpty+0x274>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <areaIsEmpty+0x274>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2020 	strb.w	r2, [r3, #32]
		devError |= devNAND;
		return ret;//HAL_ERROR;
	}

	//
	return ret;
 8001e08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e0c:	e008      	b.n	8001e20 <areaIsEmpty+0x268>
		devError |= devNAND;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <areaIsEmpty+0x278>)
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	f043 0320 	orr.w	r3, r3, #32
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <areaIsEmpty+0x278>)
 8001e1a:	801a      	strh	r2, [r3, #0]
		return ret;//HAL_ERROR;
 8001e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3730      	adds	r7, #48	; 0x30
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20001388 	.word	0x20001388
 8001e2c:	20000078 	.word	0x20000078
 8001e30:	2000036c 	.word	0x2000036c
 8001e34:	200013a8 	.word	0x200013a8
 8001e38:	20000068 	.word	0x20000068
 8001e3c:	20000004 	.word	0x20000004
 8001e40:	08014b9c 	.word	0x08014b9c
 8001e44:	08011f54 	.word	0x08011f54

08001e48 <nand_ReadPage>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef nand_ReadPage(uint32_t page, uint8_t *buf)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
	NAND_AddressTypeDef nans = {
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	813b      	strh	r3, [r7, #8]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	817b      	strh	r3, [r7, #10]
		.Page = page,
		.Plane = 1,
		.Block = nand_PageToBlock(page)
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff faaf 	bl	80013c0 <nand_PageToBlock>
 8001e62:	4603      	mov	r3, r0
	NAND_AddressTypeDef nans = {
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	81bb      	strh	r3, [r7, #12]
	};

	return NAND_Read_Page_8b(nandPort, &nans, buf, 1);
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <nand_ReadPage+0x3c>)
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	f107 0108 	add.w	r1, r7, #8
 8001e70:	2301      	movs	r3, #1
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	f7ff fb40 	bl	80014f8 <NAND_Read_Page_8b>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000078 	.word	0x20000078

08001e88 <nand_WritePage>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef nand_WritePage(uint32_t page, uint8_t *buf)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
	NAND_AddressTypeDef nans = {
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	813b      	strh	r3, [r7, #8]
 8001e98:	2301      	movs	r3, #1
 8001e9a:	817b      	strh	r3, [r7, #10]
		.Page = page,
		.Plane = 1,
		.Block = nand_PageToBlock(page)
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff fa8f 	bl	80013c0 <nand_PageToBlock>
 8001ea2:	4603      	mov	r3, r0
	NAND_AddressTypeDef nans = {
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	81bb      	strh	r3, [r7, #12]
	};

	return NAND_Write_Page_8b(nandPort, &nans, buf, 1);
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <nand_WritePage+0x3c>)
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	f107 0108 	add.w	r1, r7, #8
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	f7ff fc20 	bl	80016f8 <NAND_Write_Page_8b>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000078 	.word	0x20000078

08001ec8 <fsErrName>:
}
//-----------------------------------------------------------------------------
#ifdef SET_FAT_FS

static char *fsErrName(int fr)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	switch (fr) {
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b13      	cmp	r3, #19
 8001ed4:	d850      	bhi.n	8001f78 <fsErrName+0xb0>
 8001ed6:	a201      	add	r2, pc, #4	; (adr r2, 8001edc <fsErrName+0x14>)
 8001ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001edc:	08001f2d 	.word	0x08001f2d
 8001ee0:	08001f31 	.word	0x08001f31
 8001ee4:	08001f35 	.word	0x08001f35
 8001ee8:	08001f39 	.word	0x08001f39
 8001eec:	08001f3d 	.word	0x08001f3d
 8001ef0:	08001f41 	.word	0x08001f41
 8001ef4:	08001f45 	.word	0x08001f45
 8001ef8:	08001f49 	.word	0x08001f49
 8001efc:	08001f49 	.word	0x08001f49
 8001f00:	08001f4d 	.word	0x08001f4d
 8001f04:	08001f51 	.word	0x08001f51
 8001f08:	08001f55 	.word	0x08001f55
 8001f0c:	08001f59 	.word	0x08001f59
 8001f10:	08001f5d 	.word	0x08001f5d
 8001f14:	08001f61 	.word	0x08001f61
 8001f18:	08001f65 	.word	0x08001f65
 8001f1c:	08001f69 	.word	0x08001f69
 8001f20:	08001f6d 	.word	0x08001f6d
 8001f24:	08001f71 	.word	0x08001f71
 8001f28:	08001f75 	.word	0x08001f75
		case FR_OK:				// (0) Succeeded
			return "Succeeded";
 8001f2c:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <fsErrName+0xc0>)
 8001f2e:	e024      	b.n	8001f7a <fsErrName+0xb2>
		case FR_DISK_ERR://			(1) A hard error occurred in the low level disk I/O layer
			return "Error disk I/O";
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <fsErrName+0xc4>)
 8001f32:	e022      	b.n	8001f7a <fsErrName+0xb2>
		case FR_INT_ERR://			(2) Assertion failed
			return "Assertion failed";
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <fsErrName+0xc8>)
 8001f36:	e020      	b.n	8001f7a <fsErrName+0xb2>
		case FR_NOT_READY://		(3) The physical drive cannot work
			return "Drive not ready";
 8001f38:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <fsErrName+0xcc>)
 8001f3a:	e01e      	b.n	8001f7a <fsErrName+0xb2>
		case FR_NO_FILE://			(4) Could not find the file
			return "No file";
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <fsErrName+0xd0>)
 8001f3e:	e01c      	b.n	8001f7a <fsErrName+0xb2>
		case FR_NO_PATH://			(5) Could not find the path
			return "No path";
 8001f40:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <fsErrName+0xd4>)
 8001f42:	e01a      	b.n	8001f7a <fsErrName+0xb2>
		case FR_INVALID_NAME://		(6) The path name format is invalid
			return "Path error";
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <fsErrName+0xd8>)
 8001f46:	e018      	b.n	8001f7a <fsErrName+0xb2>
		case FR_DENIED://			(7) Access denied due to prohibited access or directory full
		case FR_EXIST://			(8) Access denied due to prohibited access
			return "Access denied";
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <fsErrName+0xdc>)
 8001f4a:	e016      	b.n	8001f7a <fsErrName+0xb2>
		case FR_INVALID_OBJECT://	(9) The file/directory object is invalid
			return "Invalid file/dir";
 8001f4c:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <fsErrName+0xe0>)
 8001f4e:	e014      	b.n	8001f7a <fsErrName+0xb2>
		case FR_WRITE_PROTECTED://	(10) The physical drive is write protected
			return "Write protected";
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <fsErrName+0xe4>)
 8001f52:	e012      	b.n	8001f7a <fsErrName+0xb2>
		case FR_INVALID_DRIVE://	(11) The logical drive number is invalid
			return "Invalid drive number";
 8001f54:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <fsErrName+0xe8>)
 8001f56:	e010      	b.n	8001f7a <fsErrName+0xb2>
		case FR_NOT_ENABLED://		(12) The volume has no work area
			return "Volume no area";
 8001f58:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <fsErrName+0xec>)
 8001f5a:	e00e      	b.n	8001f7a <fsErrName+0xb2>
		case FR_NO_FILESYSTEM://	(13) There is no valid FAT volume
			return "Volume has't filesystem";
 8001f5c:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <fsErrName+0xf0>)
 8001f5e:	e00c      	b.n	8001f7a <fsErrName+0xb2>
		case FR_MKFS_ABORTED://		(14) The f_mkfs() aborted due to any problem
			return "f_mkfs() aborted";
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <fsErrName+0xf4>)
 8001f62:	e00a      	b.n	8001f7a <fsErrName+0xb2>
		case FR_TIMEOUT://			(15) Could not get a grant to access the volume within defined period
			return "Timeout access";
 8001f64:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <fsErrName+0xf8>)
 8001f66:	e008      	b.n	8001f7a <fsErrName+0xb2>
		case FR_LOCKED://			(16) The operation is rejected according to the file sharing policy
			return "File locked";
 8001f68:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <fsErrName+0xfc>)
 8001f6a:	e006      	b.n	8001f7a <fsErrName+0xb2>
		case FR_NOT_ENOUGH_CORE://	(17) LFN working buffer could not be allocated
			return "Allocated buf error";
 8001f6c:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <fsErrName+0x100>)
 8001f6e:	e004      	b.n	8001f7a <fsErrName+0xb2>
		case FR_TOO_MANY_OPEN_FILES://	(18) Number of open files > _FS_LOCK
			return "Open file limit";
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <fsErrName+0x104>)
 8001f72:	e002      	b.n	8001f7a <fsErrName+0xb2>
		case FR_INVALID_PARAMETER://	(19) Given parameter is invalid
			return "Invalid parameter";
 8001f74:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <fsErrName+0x108>)
 8001f76:	e000      	b.n	8001f7a <fsErrName+0xb2>
	}
	return "Unknown error";
 8001f78:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <fsErrName+0x10c>)
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	08011fa4 	.word	0x08011fa4
 8001f8c:	08011fb0 	.word	0x08011fb0
 8001f90:	08011fc0 	.word	0x08011fc0
 8001f94:	08011fd4 	.word	0x08011fd4
 8001f98:	08011fe4 	.word	0x08011fe4
 8001f9c:	08011fec 	.word	0x08011fec
 8001fa0:	08011ff4 	.word	0x08011ff4
 8001fa4:	08012000 	.word	0x08012000
 8001fa8:	08012010 	.word	0x08012010
 8001fac:	08012024 	.word	0x08012024
 8001fb0:	08012034 	.word	0x08012034
 8001fb4:	0801204c 	.word	0x0801204c
 8001fb8:	0801205c 	.word	0x0801205c
 8001fbc:	08012074 	.word	0x08012074
 8001fc0:	08012088 	.word	0x08012088
 8001fc4:	08012098 	.word	0x08012098
 8001fc8:	080120a4 	.word	0x080120a4
 8001fcc:	080120b8 	.word	0x080120b8
 8001fd0:	080120c8 	.word	0x080120c8
 8001fd4:	080120dc 	.word	0x080120dc

08001fd8 <attrName>:
//------------------------------------------------------------------------------------------
static char *attrName(uint8_t attr)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
	switch (attr) {
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	2b1f      	cmp	r3, #31
 8001fe8:	d84c      	bhi.n	8002084 <attrName+0xac>
 8001fea:	a201      	add	r2, pc, #4	; (adr r2, 8001ff0 <attrName+0x18>)
 8001fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff0:	08002071 	.word	0x08002071
 8001ff4:	08002075 	.word	0x08002075
 8001ff8:	08002085 	.word	0x08002085
 8001ffc:	08002079 	.word	0x08002079
 8002000:	08002085 	.word	0x08002085
 8002004:	08002085 	.word	0x08002085
 8002008:	08002085 	.word	0x08002085
 800200c:	08002085 	.word	0x08002085
 8002010:	08002085 	.word	0x08002085
 8002014:	08002085 	.word	0x08002085
 8002018:	08002085 	.word	0x08002085
 800201c:	08002085 	.word	0x08002085
 8002020:	08002085 	.word	0x08002085
 8002024:	08002085 	.word	0x08002085
 8002028:	08002085 	.word	0x08002085
 800202c:	0800207d 	.word	0x0800207d
 8002030:	08002085 	.word	0x08002085
 8002034:	08002085 	.word	0x08002085
 8002038:	08002085 	.word	0x08002085
 800203c:	08002085 	.word	0x08002085
 8002040:	08002085 	.word	0x08002085
 8002044:	08002085 	.word	0x08002085
 8002048:	08002085 	.word	0x08002085
 800204c:	08002085 	.word	0x08002085
 8002050:	08002085 	.word	0x08002085
 8002054:	08002085 	.word	0x08002085
 8002058:	08002085 	.word	0x08002085
 800205c:	08002085 	.word	0x08002085
 8002060:	08002085 	.word	0x08002085
 8002064:	08002085 	.word	0x08002085
 8002068:	08002085 	.word	0x08002085
 800206c:	08002081 	.word	0x08002081
		case AM_RDO://	0x01	/* Read only */
			return "Read only";
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <attrName+0xbc>)
 8002072:	e008      	b.n	8002086 <attrName+0xae>
		case AM_HID://	0x02	/* Hidden */
			return "Hidden";
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <attrName+0xc0>)
 8002076:	e006      	b.n	8002086 <attrName+0xae>
		case AM_SYS://	0x04	/* System */
			return "System";
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <attrName+0xc4>)
 800207a:	e004      	b.n	8002086 <attrName+0xae>
		case AM_DIR://	0x10	/* Directory */
			return "Directory";
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <attrName+0xc8>)
 800207e:	e002      	b.n	8002086 <attrName+0xae>
		case AM_ARC://	0x20	/* Archive */
			return "Archive";
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <attrName+0xcc>)
 8002082:	e000      	b.n	8002086 <attrName+0xae>
		default : return "Unknown";
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <attrName+0xd0>)
	}
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	080120ec 	.word	0x080120ec
 8002098:	080120f8 	.word	0x080120f8
 800209c:	08012100 	.word	0x08012100
 80020a0:	08012108 	.word	0x08012108
 80020a4:	08012114 	.word	0x08012114
 80020a8:	0801211c 	.word	0x0801211c

080020ac <drvMount>:
//------------------------------------------------------------------------------------------
bool drvMount(const char *path)
{
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af04      	add	r7, sp, #16
 80020b2:	6078      	str	r0, [r7, #4]
bool ret = false;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]
uint8_t lg = dbg;
 80020b8:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <drvMount+0x128>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	737b      	strb	r3, [r7, #13]

	FRESULT res = f_mount(&FatFs, path, 1);
 80020be:	2201      	movs	r2, #1
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4845      	ldr	r0, [pc, #276]	; (80021d8 <drvMount+0x12c>)
 80020c4:	f009 fdd6 	bl	800bc74 <f_mount>
 80020c8:	4603      	mov	r3, r0
 80020ca:	73bb      	strb	r3, [r7, #14]
	if (res == FR_NO_FILESYSTEM) {
 80020cc:	7bbb      	ldrb	r3, [r7, #14]
 80020ce:	2b0d      	cmp	r3, #13
 80020d0:	d150      	bne.n	8002174 <drvMount+0xc8>
		if (lg > logOff) Report(1, "[%s] Mount drive '%.*s' error #%u (%s)%s", __func__, sizeof(path), path, res, fsErrName(res), eol);
 80020d2:	7b7b      	ldrb	r3, [r7, #13]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d012      	beq.n	80020fe <drvMount+0x52>
 80020d8:	7bbc      	ldrb	r4, [r7, #14]
 80020da:	7bbb      	ldrb	r3, [r7, #14]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fef3 	bl	8001ec8 <fsErrName>
 80020e2:	4602      	mov	r2, r0
 80020e4:	4b3d      	ldr	r3, [pc, #244]	; (80021dc <drvMount+0x130>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	9303      	str	r3, [sp, #12]
 80020ea:	9202      	str	r2, [sp, #8]
 80020ec:	9401      	str	r4, [sp, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2304      	movs	r3, #4
 80020f4:	4a3a      	ldr	r2, [pc, #232]	; (80021e0 <drvMount+0x134>)
 80020f6:	493b      	ldr	r1, [pc, #236]	; (80021e4 <drvMount+0x138>)
 80020f8:	2001      	movs	r0, #1
 80020fa:	f000 fd35 	bl	8002b68 <Report>
		res = f_mkfs(path, FM_FAT, nand_getBlockSize(), fs_work, sizeof(fs_work));
 80020fe:	f7ff f953 	bl	80013a8 <nand_getBlockSize>
 8002102:	4602      	mov	r2, r0
 8002104:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <drvMount+0x13c>)
 800210c:	2101      	movs	r1, #1
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f00a fc60 	bl	800c9d4 <f_mkfs>
 8002114:	4603      	mov	r3, r0
 8002116:	73bb      	strb	r3, [r7, #14]
		if (!res) {
 8002118:	7bbb      	ldrb	r3, [r7, #14]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d115      	bne.n	800214a <drvMount+0x9e>
			if (lg > logOff) Report(1, "[%s] Make FAT fs on drive '%.*s' OK%s", __func__, sizeof(path), path, eol);
 800211e:	7b7b      	ldrb	r3, [r7, #13]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <drvMount+0x8e>
 8002124:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <drvMount+0x130>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2304      	movs	r3, #4
 8002130:	4a2b      	ldr	r2, [pc, #172]	; (80021e0 <drvMount+0x134>)
 8002132:	492e      	ldr	r1, [pc, #184]	; (80021ec <drvMount+0x140>)
 8002134:	2001      	movs	r0, #1
 8002136:	f000 fd17 	bl	8002b68 <Report>
			res = f_mount(&FatFs, path, 1);
 800213a:	2201      	movs	r2, #1
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4826      	ldr	r0, [pc, #152]	; (80021d8 <drvMount+0x12c>)
 8002140:	f009 fd98 	bl	800bc74 <f_mount>
 8002144:	4603      	mov	r3, r0
 8002146:	73bb      	strb	r3, [r7, #14]
 8002148:	e014      	b.n	8002174 <drvMount+0xc8>
    	} else {
    		if (lg > logOff) Report(1, "[%s] Make FAT fs error #%u (%s)%s", __func__, res, fsErrName(res), eol);
 800214a:	7b7b      	ldrb	r3, [r7, #13]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00f      	beq.n	8002170 <drvMount+0xc4>
 8002150:	7bbc      	ldrb	r4, [r7, #14]
 8002152:	7bbb      	ldrb	r3, [r7, #14]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff feb7 	bl	8001ec8 <fsErrName>
 800215a:	4602      	mov	r2, r0
 800215c:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <drvMount+0x130>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	9200      	str	r2, [sp, #0]
 8002164:	4623      	mov	r3, r4
 8002166:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <drvMount+0x134>)
 8002168:	4921      	ldr	r1, [pc, #132]	; (80021f0 <drvMount+0x144>)
 800216a:	2001      	movs	r0, #1
 800216c:	f000 fcfc 	bl	8002b68 <Report>
    		return ret;
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	e02a      	b.n	80021ca <drvMount+0x11e>
    	}
	}

	if (!res) {
 8002174:	7bbb      	ldrb	r3, [r7, #14]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d110      	bne.n	800219c <drvMount+0xf0>
		ret = true;
 800217a:	2301      	movs	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
		if (lg > logOff) Report(1, "[%s] Mount drive '%.*s' OK%s", __func__, sizeof(path), path, eol);
 800217e:	7b7b      	ldrb	r3, [r7, #13]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d021      	beq.n	80021c8 <drvMount+0x11c>
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <drvMount+0x130>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2304      	movs	r3, #4
 8002190:	4a13      	ldr	r2, [pc, #76]	; (80021e0 <drvMount+0x134>)
 8002192:	4918      	ldr	r1, [pc, #96]	; (80021f4 <drvMount+0x148>)
 8002194:	2001      	movs	r0, #1
 8002196:	f000 fce7 	bl	8002b68 <Report>
 800219a:	e015      	b.n	80021c8 <drvMount+0x11c>
	} else {
		if (lg > logOff) Report(1, "[%s] Mount drive '%.*s' error #%u (%s)%s", __func__, sizeof(path), path, res, fsErrName(res), eol);
 800219c:	7b7b      	ldrb	r3, [r7, #13]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d012      	beq.n	80021c8 <drvMount+0x11c>
 80021a2:	7bbc      	ldrb	r4, [r7, #14]
 80021a4:	7bbb      	ldrb	r3, [r7, #14]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fe8e 	bl	8001ec8 <fsErrName>
 80021ac:	4602      	mov	r2, r0
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <drvMount+0x130>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	9303      	str	r3, [sp, #12]
 80021b4:	9202      	str	r2, [sp, #8]
 80021b6:	9401      	str	r4, [sp, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2304      	movs	r3, #4
 80021be:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <drvMount+0x134>)
 80021c0:	4908      	ldr	r1, [pc, #32]	; (80021e4 <drvMount+0x138>)
 80021c2:	2001      	movs	r0, #1
 80021c4:	f000 fcd0 	bl	8002b68 <Report>
	}


	return ret;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd90      	pop	{r4, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000068 	.word	0x20000068
 80021d8:	20002bc4 	.word	0x20002bc4
 80021dc:	20000004 	.word	0x20000004
 80021e0:	08014ba8 	.word	0x08014ba8
 80021e4:	08012124 	.word	0x08012124
 80021e8:	2000342c 	.word	0x2000342c
 80021ec:	08012150 	.word	0x08012150
 80021f0:	08012178 	.word	0x08012178
 80021f4:	0801219c 	.word	0x0801219c

080021f8 <dirList>:
//--------------------------------------------------------------------------------------------------------
bool dirList(const char *name_dir, DIR *dir)
{
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b091      	sub	sp, #68	; 0x44
 80021fc:	af04      	add	r7, sp, #16
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
bool ret = false;
 8002202:	2300      	movs	r3, #0
 8002204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
uint8_t lg = dbg;
 8002208:	4b49      	ldr	r3, [pc, #292]	; (8002330 <dirList+0x138>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	FRESULT res = f_opendir(dir, name_dir);
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	6838      	ldr	r0, [r7, #0]
 8002214:	f00a fb21 	bl	800c85a <f_opendir>
 8002218:	4603      	mov	r3, r0
 800221a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (res == FR_OK) {
 800221e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002222:	2b00      	cmp	r3, #0
 8002224:	d15d      	bne.n	80022e2 <dirList+0xea>
		FILINFO fno;
		int cnt = -1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (lg > logOff) Report(1, "[%s] Read folder '%s':%s", __func__, name_dir, eol);
 800222c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <dirList+0x4e>
 8002234:	4b3f      	ldr	r3, [pc, #252]	; (8002334 <dirList+0x13c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a3e      	ldr	r2, [pc, #248]	; (8002338 <dirList+0x140>)
 800223e:	493f      	ldr	r1, [pc, #252]	; (800233c <dirList+0x144>)
 8002240:	2001      	movs	r0, #1
 8002242:	f000 fc91 	bl	8002b68 <Report>
		for (;;) {
			res = f_readdir(dir, &fno);
 8002246:	f107 030c 	add.w	r3, r7, #12
 800224a:	4619      	mov	r1, r3
 800224c:	6838      	ldr	r0, [r7, #0]
 800224e:	f00a fb7d 	bl	800c94c <f_readdir>
 8002252:	4603      	mov	r3, r0
 8002254:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			cnt++;
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	3301      	adds	r3, #1
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
			if (res || fno.fname[0] == 0) {
 800225e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002262:	2b00      	cmp	r3, #0
 8002264:	d102      	bne.n	800226c <dirList+0x74>
 8002266:	7d7b      	ldrb	r3, [r7, #21]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10e      	bne.n	800228a <dirList+0x92>
				if (!cnt) {
 800226c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226e:	2b00      	cmp	r3, #0
 8002270:	d14f      	bne.n	8002312 <dirList+0x11a>
					if (lg > logOff) Report(0, "\tFolder '%s' is empty%s", name_dir, eol);
 8002272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002276:	2b00      	cmp	r3, #0
 8002278:	d04b      	beq.n	8002312 <dirList+0x11a>
 800227a:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <dirList+0x13c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	492f      	ldr	r1, [pc, #188]	; (8002340 <dirList+0x148>)
 8002282:	2000      	movs	r0, #0
 8002284:	f000 fc70 	bl	8002b68 <Report>
				}
				break;
 8002288:	e043      	b.n	8002312 <dirList+0x11a>
			} else if (fno.fattrib & AM_DIR) {// It is a directory
 800228a:	7d3b      	ldrb	r3, [r7, #20]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00f      	beq.n	80022b4 <dirList+0xbc>
				if (lg > logOff) Report(0, "\tIt is folder -> '%s'%s", fno.fname, eol);
 8002294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0d4      	beq.n	8002246 <dirList+0x4e>
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <dirList+0x13c>)
 800229e:	6819      	ldr	r1, [r3, #0]
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	f103 0209 	add.w	r2, r3, #9
 80022a8:	460b      	mov	r3, r1
 80022aa:	4926      	ldr	r1, [pc, #152]	; (8002344 <dirList+0x14c>)
 80022ac:	2000      	movs	r0, #0
 80022ae:	f000 fc5b 	bl	8002b68 <Report>
 80022b2:	e7c8      	b.n	8002246 <dirList+0x4e>
			} else {// It is a file.
				if (lg > logOff) Report(0, "\tname:%s, size:%u bytes, attr:%s%s",
 80022b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0c4      	beq.n	8002246 <dirList+0x4e>
 80022bc:	68fc      	ldr	r4, [r7, #12]
 80022be:	7d3b      	ldrb	r3, [r7, #20]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fe89 	bl	8001fd8 <attrName>
 80022c6:	4601      	mov	r1, r0
 80022c8:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <dirList+0x13c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f107 020c 	add.w	r2, r7, #12
 80022d0:	3209      	adds	r2, #9
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	9100      	str	r1, [sp, #0]
 80022d6:	4623      	mov	r3, r4
 80022d8:	491b      	ldr	r1, [pc, #108]	; (8002348 <dirList+0x150>)
 80022da:	2000      	movs	r0, #0
 80022dc:	f000 fc44 	bl	8002b68 <Report>
			res = f_readdir(dir, &fno);
 80022e0:	e7b1      	b.n	8002246 <dirList+0x4e>
							attrName(fno.fattrib),
							eol);
			}
		}
	} else {
		if (lg > logOff) Report(1, "[%s] Read folder '%s' error #%u (%s)%s", __func__, name_dir, res, fsErrName(res), eol);
 80022e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d014      	beq.n	8002314 <dirList+0x11c>
 80022ea:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 80022ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fde8 	bl	8001ec8 <fsErrName>
 80022f8:	4602      	mov	r2, r0
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <dirList+0x13c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	9302      	str	r3, [sp, #8]
 8002300:	9201      	str	r2, [sp, #4]
 8002302:	9400      	str	r4, [sp, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a0c      	ldr	r2, [pc, #48]	; (8002338 <dirList+0x140>)
 8002308:	4910      	ldr	r1, [pc, #64]	; (800234c <dirList+0x154>)
 800230a:	2001      	movs	r0, #1
 800230c:	f000 fc2c 	bl	8002b68 <Report>
 8002310:	e000      	b.n	8002314 <dirList+0x11c>
				break;
 8002312:	bf00      	nop
	}
	if (res == FR_OK) ret = true;
 8002314:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <dirList+0x12a>
 800231c:	2301      	movs	r3, #1
 800231e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	return ret;
 8002322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002326:	4618      	mov	r0, r3
 8002328:	3734      	adds	r7, #52	; 0x34
 800232a:	46bd      	mov	sp, r7
 800232c:	bd90      	pop	{r4, r7, pc}
 800232e:	bf00      	nop
 8002330:	20000068 	.word	0x20000068
 8002334:	20000004 	.word	0x20000004
 8002338:	08014bb4 	.word	0x08014bb4
 800233c:	080121bc 	.word	0x080121bc
 8002340:	080121d8 	.word	0x080121d8
 8002344:	080121f0 	.word	0x080121f0
 8002348:	08012208 	.word	0x08012208
 800234c:	0801222c 	.word	0x0801222c

08002350 <wrFile>:
		devError |= devFS;
	}
}
//--------------------------------------------------------------------------------------------------------
void wrFile(const char *name, char *text, bool update)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	f6ad 0de4 	subw	sp, sp, #2276	; 0x8e4
 8002356:	af04      	add	r7, sp, #16
 8002358:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800235c:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8002360:	6018      	str	r0, [r3, #0]
 8002362:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8002366:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 800236a:	6019      	str	r1, [r3, #0]
 800236c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8002370:	f6a3 03c9 	subw	r3, r3, #2249	; 0x8c9
 8002374:	701a      	strb	r2, [r3, #0]
char tmp[128];
FIL fp;
FRESULT res = FR_NO_FILE;
 8002376:	2304      	movs	r3, #4
 8002378:	f887 38cf 	strb.w	r3, [r7, #2255]	; 0x8cf
uint8_t lg = dbg;
 800237c:	4b62      	ldr	r3, [pc, #392]	; (8002508 <wrFile+0x1b8>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	f887 38ce 	strb.w	r3, [r7, #2254]	; 0x8ce

	sprintf(tmp, "/%s", cfg);
 8002384:	4b61      	ldr	r3, [pc, #388]	; (800250c <wrFile+0x1bc>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	f607 0344 	addw	r3, r7, #2116	; 0x844
 800238c:	4960      	ldr	r1, [pc, #384]	; (8002510 <wrFile+0x1c0>)
 800238e:	4618      	mov	r0, r3
 8002390:	f00f f820 	bl	80113d4 <siprintf>
	if (!update) {
 8002394:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8002398:	f6a3 03c9 	subw	r3, r3, #2249	; 0x8c9
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	f083 0301 	eor.w	r3, r3, #1
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d027      	beq.n	80023f8 <wrFile+0xa8>
		res = f_open(&fp, tmp, FA_READ);
 80023a8:	f607 0144 	addw	r1, r7, #2116	; 0x844
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	2201      	movs	r2, #1
 80023b2:	4618      	mov	r0, r3
 80023b4:	f009 fcc2 	bl	800bd3c <f_open>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f887 38cf 	strb.w	r3, [r7, #2255]	; 0x8cf
		if (res == FR_OK) {
 80023be:	f897 38cf 	ldrb.w	r3, [r7, #2255]	; 0x8cf
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d118      	bne.n	80023f8 <wrFile+0xa8>
			res = f_close(&fp);
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	4618      	mov	r0, r3
 80023cc:	f00a fa16 	bl	800c7fc <f_close>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f887 38cf 	strb.w	r3, [r7, #2255]	; 0x8cf
			if (lg > logOff) Report(1, "[%s] File '%s' allready present and update has't been ordered%s", __func__, tmp, eol);
 80023d6:	f897 38ce 	ldrb.w	r3, [r7, #2254]	; 0x8ce
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 808e 	beq.w	80024fc <wrFile+0x1ac>
 80023e0:	4b4c      	ldr	r3, [pc, #304]	; (8002514 <wrFile+0x1c4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f607 0244 	addw	r2, r7, #2116	; 0x844
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	4613      	mov	r3, r2
 80023ec:	4a4a      	ldr	r2, [pc, #296]	; (8002518 <wrFile+0x1c8>)
 80023ee:	494b      	ldr	r1, [pc, #300]	; (800251c <wrFile+0x1cc>)
 80023f0:	2001      	movs	r0, #1
 80023f2:	f000 fbb9 	bl	8002b68 <Report>
 80023f6:	e082      	b.n	80024fe <wrFile+0x1ae>
			return;
		}
	}

	res = f_open(&fp, tmp, FA_CREATE_ALWAYS | FA_WRITE);
 80023f8:	f607 0144 	addw	r1, r7, #2116	; 0x844
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	220a      	movs	r2, #10
 8002402:	4618      	mov	r0, r3
 8002404:	f009 fc9a 	bl	800bd3c <f_open>
 8002408:	4603      	mov	r3, r0
 800240a:	f887 38cf 	strb.w	r3, [r7, #2255]	; 0x8cf
	if (!res) {
 800240e:	f897 38cf 	ldrb.w	r3, [r7, #2255]	; 0x8cf
 8002412:	2b00      	cmp	r3, #0
 8002414:	d158      	bne.n	80024c8 <wrFile+0x178>
		if (lg > logOff) Report(1, "[%s] Create new file '%s' OK%s", __func__, tmp, eol);
 8002416:	f897 38ce 	ldrb.w	r3, [r7, #2254]	; 0x8ce
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00a      	beq.n	8002434 <wrFile+0xe4>
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <wrFile+0x1c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f607 0244 	addw	r2, r7, #2116	; 0x844
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	4a3b      	ldr	r2, [pc, #236]	; (8002518 <wrFile+0x1c8>)
 800242c:	493c      	ldr	r1, [pc, #240]	; (8002520 <wrFile+0x1d0>)
 800242e:	2001      	movs	r0, #1
 8002430:	f000 fb9a 	bl	8002b68 <Report>
		int wrt = 0, dl = strlen(text);
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 38c8 	str.w	r3, [r7, #2248]	; 0x8c8
 800243a:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800243e:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	f7fd fec4 	bl	80001d0 <strlen>
 8002448:	4603      	mov	r3, r0
 800244a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4

		wrt = f_puts(text, &fp);
 800244e:	f107 0214 	add.w	r2, r7, #20
 8002452:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8002456:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 800245a:	4611      	mov	r1, r2
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	f00a ff99 	bl	800d394 <f_puts>
 8002462:	f8c7 08c8 	str.w	r0, [r7, #2248]	; 0x8c8
		if (wrt != dl) {
 8002466:	f8d7 28c8 	ldr.w	r2, [r7, #2248]	; 0x8c8
 800246a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800246e:	429a      	cmp	r2, r3
 8002470:	d016      	beq.n	80024a0 <wrFile+0x150>
			devError |= devFS;
 8002472:	4b2c      	ldr	r3, [pc, #176]	; (8002524 <wrFile+0x1d4>)
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247a:	b29a      	uxth	r2, r3
 800247c:	4b29      	ldr	r3, [pc, #164]	; (8002524 <wrFile+0x1d4>)
 800247e:	801a      	strh	r2, [r3, #0]
			if (lg > logOff) Report(1, "[%s] Error while write file '%s'%s", __func__, tmp, eol);
 8002480:	f897 38ce 	ldrb.w	r3, [r7, #2254]	; 0x8ce
 8002484:	2b00      	cmp	r3, #0
 8002486:	d016      	beq.n	80024b6 <wrFile+0x166>
 8002488:	4b22      	ldr	r3, [pc, #136]	; (8002514 <wrFile+0x1c4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f607 0244 	addw	r2, r7, #2116	; 0x844
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	4613      	mov	r3, r2
 8002494:	4a20      	ldr	r2, [pc, #128]	; (8002518 <wrFile+0x1c8>)
 8002496:	4924      	ldr	r1, [pc, #144]	; (8002528 <wrFile+0x1d8>)
 8002498:	2001      	movs	r0, #1
 800249a:	f000 fb65 	bl	8002b68 <Report>
 800249e:	e00a      	b.n	80024b6 <wrFile+0x166>
		} else Report(1, "[%s] File file '%s' write OK%s", __func__, tmp, eol);
 80024a0:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <wrFile+0x1c4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f607 0244 	addw	r2, r7, #2116	; 0x844
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	4613      	mov	r3, r2
 80024ac:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <wrFile+0x1c8>)
 80024ae:	491f      	ldr	r1, [pc, #124]	; (800252c <wrFile+0x1dc>)
 80024b0:	2001      	movs	r0, #1
 80024b2:	f000 fb59 	bl	8002b68 <Report>

		res = f_close(&fp);
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	4618      	mov	r0, r3
 80024bc:	f00a f99e 	bl	800c7fc <f_close>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f887 38cf 	strb.w	r3, [r7, #2255]	; 0x8cf
 80024c6:	e01a      	b.n	80024fe <wrFile+0x1ae>
	} else {
		if (lg > logOff) Report(1, "[%s] Create new file '%s' error #%u (%s)%s", __func__, tmp, res, fsErrName(res), eol);
 80024c8:	f897 38ce 	ldrb.w	r3, [r7, #2254]	; 0x8ce
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d016      	beq.n	80024fe <wrFile+0x1ae>
 80024d0:	f897 48cf 	ldrb.w	r4, [r7, #2255]	; 0x8cf
 80024d4:	f897 38cf 	ldrb.w	r3, [r7, #2255]	; 0x8cf
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fcf5 	bl	8001ec8 <fsErrName>
 80024de:	4601      	mov	r1, r0
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <wrFile+0x1c4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f607 0244 	addw	r2, r7, #2116	; 0x844
 80024e8:	9302      	str	r3, [sp, #8]
 80024ea:	9101      	str	r1, [sp, #4]
 80024ec:	9400      	str	r4, [sp, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	4a09      	ldr	r2, [pc, #36]	; (8002518 <wrFile+0x1c8>)
 80024f2:	490f      	ldr	r1, [pc, #60]	; (8002530 <wrFile+0x1e0>)
 80024f4:	2001      	movs	r0, #1
 80024f6:	f000 fb37 	bl	8002b68 <Report>
 80024fa:	e000      	b.n	80024fe <wrFile+0x1ae>
			return;
 80024fc:	bf00      	nop
	}

}
 80024fe:	f607 07d4 	addw	r7, r7, #2260	; 0x8d4
 8002502:	46bd      	mov	sp, r7
 8002504:	bd90      	pop	{r4, r7, pc}
 8002506:	bf00      	nop
 8002508:	20000068 	.word	0x20000068
 800250c:	2000009c 	.word	0x2000009c
 8002510:	08012268 	.word	0x08012268
 8002514:	20000004 	.word	0x20000004
 8002518:	08014bbc 	.word	0x08014bbc
 800251c:	0801226c 	.word	0x0801226c
 8002520:	080122ac 	.word	0x080122ac
 8002524:	2000036c 	.word	0x2000036c
 8002528:	080122cc 	.word	0x080122cc
 800252c:	080122f0 	.word	0x080122f0
 8002530:	08012310 	.word	0x08012310

08002534 <rdFile>:
//--------------------------------------------------------------------------------------------------------
void rdFile(const char *name)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	f6ad 0dc8 	subw	sp, sp, #2248	; 0x8c8
 800253a:	af02      	add	r7, sp, #8
 800253c:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8002540:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 8002544:	6018      	str	r0, [r3, #0]
char tmp[128];
FIL fp;
uint8_t lg = dbg;
 8002546:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <rdFile+0xbc>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf

	if (!f_open(&fp, name, FA_READ)) {
 800254e:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8002552:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 8002556:	f107 000c 	add.w	r0, r7, #12
 800255a:	2201      	movs	r2, #1
 800255c:	6819      	ldr	r1, [r3, #0]
 800255e:	f009 fbed 	bl	800bd3c <f_open>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d12d      	bne.n	80025c4 <rdFile+0x90>
		if (lg > logOff) Report(1, "[%s] File '%s' open for reading OK%s", __func__, name, eol);
 8002568:	f897 38bf 	ldrb.w	r3, [r7, #2239]	; 0x8bf
 800256c:	2b00      	cmp	r3, #0
 800256e:	d018      	beq.n	80025a2 <rdFile+0x6e>
 8002570:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <rdFile+0xc0>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8002578:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 800257c:	9200      	str	r2, [sp, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1d      	ldr	r2, [pc, #116]	; (80025f8 <rdFile+0xc4>)
 8002582:	491e      	ldr	r1, [pc, #120]	; (80025fc <rdFile+0xc8>)
 8002584:	2001      	movs	r0, #1
 8002586:	f000 faef 	bl	8002b68 <Report>

		while (f_gets(tmp, sizeof(tmp) - 1, &fp) != NULL)
 800258a:	e00a      	b.n	80025a2 <rdFile+0x6e>
			if (lg > logOff) Report(0, "%s", tmp);
 800258c:	f897 38bf 	ldrb.w	r3, [r7, #2239]	; 0x8bf
 8002590:	2b00      	cmp	r3, #0
 8002592:	d006      	beq.n	80025a2 <rdFile+0x6e>
 8002594:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8002598:	461a      	mov	r2, r3
 800259a:	4919      	ldr	r1, [pc, #100]	; (8002600 <rdFile+0xcc>)
 800259c:	2000      	movs	r0, #0
 800259e:	f000 fae3 	bl	8002b68 <Report>
		while (f_gets(tmp, sizeof(tmp) - 1, &fp) != NULL)
 80025a2:	f107 020c 	add.w	r2, r7, #12
 80025a6:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 80025aa:	217f      	movs	r1, #127	; 0x7f
 80025ac:	4618      	mov	r0, r3
 80025ae:	f00a fe3d 	bl	800d22c <f_gets>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1e9      	bne.n	800258c <rdFile+0x58>

		f_close(&fp);
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	4618      	mov	r0, r3
 80025be:	f00a f91d 	bl	800c7fc <f_close>
	} else {
		if (lg > logOff) Report(1, "[%s] Error while open for reading file '%s'%s", __func__, name, eol);
	}

}
 80025c2:	e010      	b.n	80025e6 <rdFile+0xb2>
		if (lg > logOff) Report(1, "[%s] Error while open for reading file '%s'%s", __func__, name, eol);
 80025c4:	f897 38bf 	ldrb.w	r3, [r7, #2239]	; 0x8bf
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00c      	beq.n	80025e6 <rdFile+0xb2>
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <rdFile+0xc0>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80025d4:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 80025d8:	9200      	str	r2, [sp, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a06      	ldr	r2, [pc, #24]	; (80025f8 <rdFile+0xc4>)
 80025de:	4909      	ldr	r1, [pc, #36]	; (8002604 <rdFile+0xd0>)
 80025e0:	2001      	movs	r0, #1
 80025e2:	f000 fac1 	bl	8002b68 <Report>
}
 80025e6:	bf00      	nop
 80025e8:	f507 670c 	add.w	r7, r7, #2240	; 0x8c0
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000068 	.word	0x20000068
 80025f4:	20000004 	.word	0x20000004
 80025f8:	08014bc4 	.word	0x08014bc4
 80025fc:	0801233c 	.word	0x0801233c
 8002600:	08012364 	.word	0x08012364
 8002604:	08012368 	.word	0x08012368

08002608 <get_qStat>:
//--------------------------------------------------------------------------------------------------------

#endif
//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	dc18      	bgt.n	8002648 <get_qStat+0x40>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f113 0f06 	cmn.w	r3, #6
 800261c:	db2a      	blt.n	8002674 <get_qStat+0x6c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3306      	adds	r3, #6
 8002622:	2b06      	cmp	r3, #6
 8002624:	d826      	bhi.n	8002674 <get_qStat+0x6c>
 8002626:	a201      	add	r2, pc, #4	; (adr r2, 800262c <get_qStat+0x24>)
 8002628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262c:	0800266d 	.word	0x0800266d
 8002630:	08002669 	.word	0x08002669
 8002634:	08002665 	.word	0x08002665
 8002638:	08002661 	.word	0x08002661
 800263c:	0800265d 	.word	0x0800265d
 8002640:	08002659 	.word	0x08002659
 8002644:	08002655 	.word	0x08002655
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800264e:	4293      	cmp	r3, r2
 8002650:	d00e      	beq.n	8002670 <get_qStat+0x68>
 8002652:	e00f      	b.n	8002674 <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <get_qStat+0x7c>)
 8002656:	e00e      	b.n	8002676 <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <get_qStat+0x80>)
 800265a:	e00c      	b.n	8002676 <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <get_qStat+0x84>)
 800265e:	e00a      	b.n	8002676 <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <get_qStat+0x88>)
 8002662:	e008      	b.n	8002676 <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <get_qStat+0x8c>)
 8002666:	e006      	b.n	8002676 <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <get_qStat+0x90>)
 800266a:	e004      	b.n	8002676 <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <get_qStat+0x94>)
 800266e:	e002      	b.n	8002676 <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <get_qStat+0x98>)
 8002672:	e000      	b.n	8002676 <get_qStat+0x6e>
	}

	return "UnknownError";
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <get_qStat+0x9c>)
}
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	08012398 	.word	0x08012398
 8002688:	080123a0 	.word	0x080123a0
 800268c:	080123a8 	.word	0x080123a8
 8002690:	080123b8 	.word	0x080123b8
 8002694:	080123c8 	.word	0x080123c8
 8002698:	080123dc 	.word	0x080123dc
 800269c:	080123ec 	.word	0x080123ec
 80026a0:	080123f8 	.word	0x080123f8
 80026a4:	0801240c 	.word	0x0801240c

080026a8 <get_logName>:
//-----------------------------------------------------------------------------
static const char *get_logName(uint8_t lg)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
	switch (lg) {
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d00a      	beq.n	80026ce <get_logName+0x26>
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	dc0a      	bgt.n	80026d2 <get_logName+0x2a>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <get_logName+0x1e>
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d002      	beq.n	80026ca <get_logName+0x22>
 80026c4:	e005      	b.n	80026d2 <get_logName+0x2a>
		case logOff:
			return "logOff";
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <get_logName+0x38>)
 80026c8:	e004      	b.n	80026d4 <get_logName+0x2c>
		case logOn:
			return "logOn";
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <get_logName+0x3c>)
 80026cc:	e002      	b.n	80026d4 <get_logName+0x2c>
		case logDump:
			return "logDump";
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <get_logName+0x40>)
 80026d0:	e000      	b.n	80026d4 <get_logName+0x2c>
	}

	return "???";
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <get_logName+0x44>)
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	0801241c 	.word	0x0801241c
 80026e4:	08012424 	.word	0x08012424
 80026e8:	0801242c 	.word	0x0801242c
 80026ec:	08012434 	.word	0x08012434

080026f0 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 80026fc:	2330      	movs	r3, #48	; 0x30
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	2300      	movs	r3, #0
 8002706:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <hex2bin+0x28>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <hex2bin+0x2c>
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	e0b2      	b.n	8002882 <hex2bin+0x192>
    if (len > 8) len = 8;
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	2b08      	cmp	r3, #8
 8002720:	d901      	bls.n	8002726 <hex2bin+0x36>
 8002722:	2308      	movs	r3, #8
 8002724:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	f1c3 0308 	rsb	r3, r3, #8
 800272c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 8002730:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002734:	f107 0210 	add.w	r2, r7, #16
 8002738:	4413      	add	r3, r2
 800273a:	78fa      	ldrb	r2, [r7, #3]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4618      	mov	r0, r3
 8002740:	f00e fd24 	bl	801118c <memcpy>

    k = j = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800274a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800274e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 8002752:	e090      	b.n	8002876 <hex2bin+0x186>
        jk = j + 2;
 8002754:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002758:	3302      	adds	r3, #2
 800275a:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 800275c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002764:	e066      	b.n	8002834 <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 8002766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800276a:	3328      	adds	r3, #40	; 0x28
 800276c:	443b      	add	r3, r7
 800276e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002772:	2b2f      	cmp	r3, #47	; 0x2f
 8002774:	d918      	bls.n	80027a8 <hex2bin+0xb8>
 8002776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800277a:	3328      	adds	r3, #40	; 0x28
 800277c:	443b      	add	r3, r7
 800277e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002782:	2b39      	cmp	r3, #57	; 0x39
 8002784:	d810      	bhi.n	80027a8 <hex2bin+0xb8>
 8002786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800278a:	3328      	adds	r3, #40	; 0x28
 800278c:	443b      	add	r3, r7
 800278e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	3a30      	subs	r2, #48	; 0x30
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	3328      	adds	r3, #40	; 0x28
 80027a0:	443b      	add	r3, r7
 80027a2:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80027a6:	e040      	b.n	800282a <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 80027a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027ac:	3328      	adds	r3, #40	; 0x28
 80027ae:	443b      	add	r3, r7
 80027b0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80027b4:	2b60      	cmp	r3, #96	; 0x60
 80027b6:	d918      	bls.n	80027ea <hex2bin+0xfa>
 80027b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027bc:	3328      	adds	r3, #40	; 0x28
 80027be:	443b      	add	r3, r7
 80027c0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80027c4:	2b66      	cmp	r3, #102	; 0x66
 80027c6:	d810      	bhi.n	80027ea <hex2bin+0xfa>
 80027c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027cc:	3328      	adds	r3, #40	; 0x28
 80027ce:	443b      	add	r3, r7
 80027d0:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80027d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	3a57      	subs	r2, #87	; 0x57
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	3328      	adds	r3, #40	; 0x28
 80027e2:	443b      	add	r3, r7
 80027e4:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80027e8:	e01f      	b.n	800282a <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 80027ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027ee:	3328      	adds	r3, #40	; 0x28
 80027f0:	443b      	add	r3, r7
 80027f2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80027f6:	2b40      	cmp	r3, #64	; 0x40
 80027f8:	d917      	bls.n	800282a <hex2bin+0x13a>
 80027fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027fe:	3328      	adds	r3, #40	; 0x28
 8002800:	443b      	add	r3, r7
 8002802:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002806:	2b46      	cmp	r3, #70	; 0x46
 8002808:	d80f      	bhi.n	800282a <hex2bin+0x13a>
 800280a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800280e:	3328      	adds	r3, #40	; 0x28
 8002810:	443b      	add	r3, r7
 8002812:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	3a37      	subs	r2, #55	; 0x37
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	3328      	adds	r3, #40	; 0x28
 8002824:	443b      	add	r3, r7
 8002826:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 800282a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800282e:	3301      	adds	r3, #1
 8002830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002834:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002838:	7ffb      	ldrb	r3, [r7, #31]
 800283a:	429a      	cmp	r2, r3
 800283c:	d393      	bcc.n	8002766 <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 800283e:	7b3b      	ldrb	r3, [r7, #12]
 8002840:	011a      	lsls	r2, r3, #4
 8002842:	7b7b      	ldrb	r3, [r7, #13]
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 800284c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002850:	f1c3 0303 	rsb	r3, r3, #3
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	6a3a      	ldr	r2, [r7, #32]
 800285e:	4313      	orrs	r3, r2
 8002860:	623b      	str	r3, [r7, #32]
        k++;
 8002862:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002866:	3301      	adds	r3, #1
 8002868:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 800286c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002870:	3302      	adds	r3, #2
 8002872:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 8002876:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800287a:	2b03      	cmp	r3, #3
 800287c:	f67f af6a 	bls.w	8002754 <hex2bin+0x64>
    }

    return ret;
 8002880:	6a3b      	ldr	r3, [r7, #32]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3728      	adds	r7, #40	; 0x28
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
	if (on)
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d006      	beq.n	80028aa <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 800289c:	2201      	movs	r2, #1
 800289e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028a2:	4807      	ldr	r0, [pc, #28]	; (80028c0 <errLedOn+0x34>)
 80028a4:	f003 fbc6 	bl	8006034 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 80028a8:	e005      	b.n	80028b6 <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 80028aa:	2200      	movs	r2, #0
 80028ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028b0:	4803      	ldr	r0, [pc, #12]	; (80028c0 <errLedOn+0x34>)
 80028b2:	f003 fbbf 	bl	8006034 <HAL_GPIO_WritePin>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40020c00 	.word	0x40020c00

080028c4 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
	return secCounter;
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <get_secCounter+0x14>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20000370 	.word	0x20000370

080028dc <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
	secCounter++;
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <inc_secCounter+0x18>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	4a03      	ldr	r2, [pc, #12]	; (80028f4 <inc_secCounter+0x18>)
 80028e8:	6013      	str	r3, [r2, #0]
}
 80028ea:	bf00      	nop
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	20000370 	.word	0x20000370

080028f8 <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
	return msCounter;
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <get_msCounter+0x18>)
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000378 	.word	0x20000378

08002914 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
	msCounter++;
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <inc_msCounter+0x20>)
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	1c50      	adds	r0, r2, #1
 8002920:	f143 0100 	adc.w	r1, r3, #0
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <inc_msCounter+0x20>)
 8002926:	e9c3 0100 	strd	r0, r1, [r3]
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	20000378 	.word	0x20000378

08002938 <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8002940:	f7ff ffc0 	bl	80028c4 <get_secCounter>
 8002944:	4602      	mov	r2, r0
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4413      	add	r3, r2
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 800295a:	f7ff ffb3 	bl	80028c4 <get_secCounter>
 800295e:	4602      	mov	r2, r0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4293      	cmp	r3, r2
 8002964:	bf94      	ite	ls
 8002966:	2301      	movls	r3, #1
 8002968:	2300      	movhi	r3, #0
 800296a:	b2db      	uxtb	r3, r3
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b094      	sub	sp, #80	; 0x50
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	2000      	movs	r0, #0
 8002980:	460a      	mov	r2, r1
 8002982:	4603      	mov	r3, r0
 8002984:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8002988:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800298c:	f107 0320 	add.w	r3, r7, #32
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f00e fb28 	bl	8010fe8 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8002998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800299a:	b2db      	uxtb	r3, r3
 800299c:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 800299e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 80029a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 80029ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 80029b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <set_Date+0xb0>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4413      	add	r3, r2
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 80029c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 80029c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80029ce:	f107 030c 	add.w	r3, r7, #12
 80029d2:	2200      	movs	r2, #0
 80029d4:	4619      	mov	r1, r3
 80029d6:	4814      	ldr	r0, [pc, #80]	; (8002a28 <set_Date+0xb4>)
 80029d8:	f004 fc62 	bl	80072a0 <HAL_RTC_SetTime>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d007      	beq.n	80029f2 <set_Date+0x7e>
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <set_Date+0xb8>)
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	f043 0308 	orr.w	r3, r3, #8
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <set_Date+0xb8>)
 80029ee:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 80029f0:	e014      	b.n	8002a1c <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80029f2:	f107 0308 	add.w	r3, r7, #8
 80029f6:	2200      	movs	r2, #0
 80029f8:	4619      	mov	r1, r3
 80029fa:	480b      	ldr	r0, [pc, #44]	; (8002a28 <set_Date+0xb4>)
 80029fc:	f004 fd48 	bl	8007490 <HAL_RTC_SetDate>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <set_Date+0xa2>
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <set_Date+0xb8>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	f043 0308 	orr.w	r3, r3, #8
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <set_Date+0xb8>)
 8002a12:	801a      	strh	r2, [r3, #0]
}
 8002a14:	e002      	b.n	8002a1c <set_Date+0xa8>
			setDate = true;
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <set_Date+0xbc>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	3750      	adds	r7, #80	; 0x50
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20001385 	.word	0x20001385
 8002a28:	2000015c 	.word	0x2000015c
 8002a2c:	2000036c 	.word	0x2000036c
 8002a30:	20001384 	.word	0x20001384

08002a34 <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b093      	sub	sp, #76	; 0x4c
 8002a38:	af04      	add	r7, sp, #16
 8002a3a:	6078      	str	r0, [r7, #4]
int ret = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8002a40:	4b40      	ldr	r3, [pc, #256]	; (8002b44 <sec2str+0x110>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	f083 0301 	eor.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d040      	beq.n	8002ad0 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8002a4e:	f7ff ff39 	bl	80028c4 <get_secCounter>
 8002a52:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8002a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a56:	4a3c      	ldr	r2, [pc, #240]	; (8002b48 <sec2str+0x114>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	0c1b      	lsrs	r3, r3, #16
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	4a39      	ldr	r2, [pc, #228]	; (8002b48 <sec2str+0x114>)
 8002a64:	fba2 1203 	umull	r1, r2, r2, r3
 8002a68:	0c12      	lsrs	r2, r2, #16
 8002a6a:	4938      	ldr	r1, [pc, #224]	; (8002b4c <sec2str+0x118>)
 8002a6c:	fb01 f202 	mul.w	r2, r1, r2
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	4a36      	ldr	r2, [pc, #216]	; (8002b50 <sec2str+0x11c>)
 8002a78:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7c:	0adb      	lsrs	r3, r3, #11
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8002a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a82:	4a33      	ldr	r2, [pc, #204]	; (8002b50 <sec2str+0x11c>)
 8002a84:	fba2 1203 	umull	r1, r2, r2, r3
 8002a88:	0ad2      	lsrs	r2, r2, #11
 8002a8a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002a8e:	fb01 f202 	mul.w	r2, r1, r2
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	4a2e      	ldr	r2, [pc, #184]	; (8002b54 <sec2str+0x120>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 8002aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <sec2str+0x120>)
 8002aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8002aaa:	0959      	lsrs	r1, r3, #5
 8002aac:	460b      	mov	r3, r1
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a5b      	subs	r3, r3, r1
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac4:	4924      	ldr	r1, [pc, #144]	; (8002b58 <sec2str+0x124>)
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f00e fc84 	bl	80113d4 <siprintf>
 8002acc:	6378      	str	r0, [r7, #52]	; 0x34
 8002ace:	e034      	b.n	8002b3a <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8002ad0:	f107 030c 	add.w	r3, r7, #12
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4820      	ldr	r0, [pc, #128]	; (8002b5c <sec2str+0x128>)
 8002ada:	f004 fd5d 	bl	8007598 <HAL_RTC_GetDate>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <sec2str+0xc0>
 8002ae4:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <sec2str+0x12c>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	f043 0308 	orr.w	r3, r3, #8
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <sec2str+0x12c>)
 8002af0:	801a      	strh	r2, [r3, #0]
 8002af2:	e022      	b.n	8002b3a <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8002af4:	f107 0310 	add.w	r3, r7, #16
 8002af8:	2200      	movs	r2, #0
 8002afa:	4619      	mov	r1, r3
 8002afc:	4817      	ldr	r0, [pc, #92]	; (8002b5c <sec2str+0x128>)
 8002afe:	f004 fc69 	bl	80073d4 <HAL_RTC_GetTime>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <sec2str+0xe4>
 8002b08:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <sec2str+0x12c>)
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	f043 0308 	orr.w	r3, r3, #8
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <sec2str+0x12c>)
 8002b14:	801a      	strh	r2, [r3, #0]
 8002b16:	e010      	b.n	8002b3a <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 8002b18:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8002b1a:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8002b1c:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8002b1e:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002b20:	7c3b      	ldrb	r3, [r7, #16]
 8002b22:	7c7a      	ldrb	r2, [r7, #17]
 8002b24:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8002b26:	9102      	str	r1, [sp, #8]
 8002b28:	9201      	str	r2, [sp, #4]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	4623      	mov	r3, r4
 8002b2e:	4602      	mov	r2, r0
 8002b30:	490c      	ldr	r1, [pc, #48]	; (8002b64 <sec2str+0x130>)
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f00e fc4e 	bl	80113d4 <siprintf>
 8002b38:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 8002b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	373c      	adds	r7, #60	; 0x3c
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd90      	pop	{r4, r7, pc}
 8002b44:	20001384 	.word	0x20001384
 8002b48:	c22e4507 	.word	0xc22e4507
 8002b4c:	00015180 	.word	0x00015180
 8002b50:	91a2b3c5 	.word	0x91a2b3c5
 8002b54:	88888889 	.word	0x88888889
 8002b58:	08012438 	.word	0x08012438
 8002b5c:	2000015c 	.word	0x2000015c
 8002b60:	2000036c 	.word	0x2000036c
 8002b64:	08012450 	.word	0x08012450

08002b68 <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(const uint8_t addTime, const char *fmt, ...)
{
 8002b68:	b40e      	push	{r1, r2, r3}
 8002b6a:	b590      	push	{r4, r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 8002b74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b78:	613b      	str	r3, [r7, #16]
int dl = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 8002b7e:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <Report+0xb4>)
 8002b80:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d010      	beq.n	8002bb0 <Report+0x48>
		dl = sec2str(buf);
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f7ff ff50 	bl	8002a34 <sec2str>
 8002b94:	6178      	str	r0, [r7, #20]
		strcat(buf, " | ");
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f7fd fb1a 	bl	80001d0 <strlen>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a1e      	ldr	r2, [pc, #120]	; (8002c20 <Report+0xb8>)
 8002ba6:	6810      	ldr	r0, [r2, #0]
 8002ba8:	6018      	str	r0, [r3, #0]
		dl += 3;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	3303      	adds	r3, #3
 8002bae:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 8002bb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bb4:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	18d0      	adds	r0, r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	1ad1      	subs	r1, r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc6:	f00e fd2b 	bl	8011620 <vsniprintf>

	uartRdy = false;
 8002bca:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <Report+0xbc>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <Report+0xc0>)
 8002bd2:	681c      	ldr	r4, [r3, #0]
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f7fd fafb 	bl	80001d0 <strlen>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	4620      	mov	r0, r4
 8002be4:	f005 ffd4 	bl	8008b90 <HAL_UART_Transmit_DMA>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <Report+0x94>
 8002bee:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <Report+0xc4>)
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <Report+0xc4>)
 8002bfa:	801a      	strh	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 8002bfc:	bf00      	nop
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <Report+0xbc>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	f083 0301 	eor.w	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f8      	bne.n	8002bfe <Report+0x96>

	va_end(args);

	return 0;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002c18:	b003      	add	sp, #12
 8002c1a:	4770      	bx	lr
 8002c1c:	20000380 	.word	0x20000380
 8002c20:	0801246c 	.word	0x0801246c
 8002c24:	20000060 	.word	0x20000060
 8002c28:	20000074 	.word	0x20000074
 8002c2c:	2000036c 	.word	0x2000036c

08002c30 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b090      	sub	sp, #64	; 0x40
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4aa3      	ldr	r2, [pc, #652]	; (8002ecc <HAL_UART_RxCpltCallback+0x29c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	f040 829f 	bne.w	8003182 <HAL_UART_RxCpltCallback+0x552>

		rxBuf[ruk++] = (char)rxByte;
 8002c44:	4ba2      	ldr	r3, [pc, #648]	; (8002ed0 <HAL_UART_RxCpltCallback+0x2a0>)
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	b291      	uxth	r1, r2
 8002c4c:	4aa0      	ldr	r2, [pc, #640]	; (8002ed0 <HAL_UART_RxCpltCallback+0x2a0>)
 8002c4e:	8011      	strh	r1, [r2, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4ba0      	ldr	r3, [pc, #640]	; (8002ed4 <HAL_UART_RxCpltCallback+0x2a4>)
 8002c54:	7819      	ldrb	r1, [r3, #0]
 8002c56:	4ba0      	ldr	r3, [pc, #640]	; (8002ed8 <HAL_UART_RxCpltCallback+0x2a8>)
 8002c58:	5499      	strb	r1, [r3, r2]

		if (rxByte == 0x0a) {//end of line
 8002c5a:	4b9e      	ldr	r3, [pc, #632]	; (8002ed4 <HAL_UART_RxCpltCallback+0x2a4>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b0a      	cmp	r3, #10
 8002c60:	f040 828a 	bne.w	8003178 <HAL_UART_RxCpltCallback+0x548>
			rxBuf[--ruk] = '\0';
 8002c64:	4b9a      	ldr	r3, [pc, #616]	; (8002ed0 <HAL_UART_RxCpltCallback+0x2a0>)
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	4b98      	ldr	r3, [pc, #608]	; (8002ed0 <HAL_UART_RxCpltCallback+0x2a0>)
 8002c6e:	801a      	strh	r2, [r3, #0]
 8002c70:	4b97      	ldr	r3, [pc, #604]	; (8002ed0 <HAL_UART_RxCpltCallback+0x2a0>)
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b98      	ldr	r3, [pc, #608]	; (8002ed8 <HAL_UART_RxCpltCallback+0x2a8>)
 8002c78:	2100      	movs	r1, #0
 8002c7a:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
			bool check = false;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			cmd_flag = 0;
 8002c86:	4b95      	ldr	r3, [pc, #596]	; (8002edc <HAL_UART_RxCpltCallback+0x2ac>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
			s_qcmd qcmd = {0};
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	83bb      	strh	r3, [r7, #28]
			if (strlen(rxBuf) >= 4) {
 8002c90:	4891      	ldr	r0, [pc, #580]	; (8002ed8 <HAL_UART_RxCpltCallback+0x2a8>)
 8002c92:	f7fd fa9d 	bl	80001d0 <strlen>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	f240 8267 	bls.w	800316c <HAL_UART_RxCpltCallback+0x53c>
				int8_t idx = -1;
 8002c9e:	23ff      	movs	r3, #255	; 0xff
 8002ca0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002caa:	e018      	b.n	8002cde <HAL_UART_RxCpltCallback+0xae>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds ="restart"
 8002cac:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002cb0:	4a8b      	ldr	r2, [pc, #556]	; (8002ee0 <HAL_UART_RxCpltCallback+0x2b0>)
 8002cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4887      	ldr	r0, [pc, #540]	; (8002ed8 <HAL_UART_RxCpltCallback+0x2a8>)
 8002cba:	f00e fbe2 	bl	8011482 <strstr>
 8002cbe:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <HAL_UART_RxCpltCallback+0xa0>
														  //"check:"
														  //"area:"
														  //"save:"
														  //"log:"
														  //"help"
						idx = i;
 8002cc6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002cca:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						break;
 8002cce:	e00a      	b.n	8002ce6 <HAL_UART_RxCpltCallback+0xb6>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002cd0:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002cde:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002ce2:	2b0a      	cmp	r3, #10
 8002ce4:	dde2      	ble.n	8002cac <HAL_UART_RxCpltCallback+0x7c>
					}
				}
				if ((uk == rxBuf) && (idx != -1)) {
 8002ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce8:	4a7b      	ldr	r2, [pc, #492]	; (8002ed8 <HAL_UART_RxCpltCallback+0x2a8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	f040 823e 	bne.w	800316c <HAL_UART_RxCpltCallback+0x53c>
 8002cf0:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cf8:	f000 8238 	beq.w	800316c <HAL_UART_RxCpltCallback+0x53c>
					nandLen = MAX_LEN_DATA;//256;
 8002cfc:	4b79      	ldr	r3, [pc, #484]	; (8002ee4 <HAL_UART_RxCpltCallback+0x2b4>)
 8002cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d02:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 8002d04:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002d08:	4a75      	ldr	r2, [pc, #468]	; (8002ee0 <HAL_UART_RxCpltCallback+0x2b0>)
 8002d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fa5e 	bl	80001d0 <strlen>
 8002d14:	4602      	mov	r2, r0
 8002d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d18:	4413      	add	r3, r2
 8002d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d20:	2300      	movs	r3, #0
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d24:	2300      	movs	r3, #0
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
					switch (idx) {
 8002d28:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002d2c:	2b0a      	cmp	r3, #10
 8002d2e:	f200 81d9 	bhi.w	80030e4 <HAL_UART_RxCpltCallback+0x4b4>
 8002d32:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <HAL_UART_RxCpltCallback+0x108>)
 8002d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d38:	08002d71 	.word	0x08002d71
 8002d3c:	08002d7d 	.word	0x08002d7d
 8002d40:	08002def 	.word	0x08002def
 8002d44:	08002e6f 	.word	0x08002e6f
 8002d48:	08002e9f 	.word	0x08002e9f
 8002d4c:	08003017 	.word	0x08003017
 8002d50:	08003051 	.word	0x08003051
 8002d54:	08002e9f 	.word	0x08002e9f
 8002d58:	08002e9f 	.word	0x08002e9f
 8002d5c:	08003087 	.word	0x08003087
 8002d60:	08002d65 	.word	0x08002d65
						case cmdHelp:
							qcmd.cmd = cmdHelp;
 8002d64:	230a      	movs	r3, #10
 8002d66:	773b      	strb	r3, [r7, #28]
							cmd_flag = 1;
 8002d68:	4b5c      	ldr	r3, [pc, #368]	; (8002edc <HAL_UART_RxCpltCallback+0x2ac>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
						break;
 8002d6e:	e1b9      	b.n	80030e4 <HAL_UART_RxCpltCallback+0x4b4>
						case cmdRestart:
							qcmd.cmd = cmdRestart;
 8002d70:	2300      	movs	r3, #0
 8002d72:	773b      	strb	r3, [r7, #28]
							cmd_flag = 1;
 8002d74:	4b59      	ldr	r3, [pc, #356]	; (8002edc <HAL_UART_RxCpltCallback+0x2ac>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]
						break;
 8002d7a:	e1b3      	b.n	80030e4 <HAL_UART_RxCpltCallback+0x4b4>
						case cmdEpoch:
							qcmd.cmd = cmdEpoch;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	773b      	strb	r3, [r7, #28]
							if (*uk == '?') {
 8002d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b3f      	cmp	r3, #63	; 0x3f
 8002d86:	d105      	bne.n	8002d94 <HAL_UART_RxCpltCallback+0x164>
								qcmd.attr = 1;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	777b      	strb	r3, [r7, #29]
								cmd_flag = 1;
 8002d8c:	4b53      	ldr	r3, [pc, #332]	; (8002edc <HAL_UART_RxCpltCallback+0x2ac>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
									}
									epoch = (uint32_t)atol(uk);
									cmd_flag = 1;
								}
							}
						break;
 8002d92:	e1a7      	b.n	80030e4 <HAL_UART_RxCpltCallback+0x4b4>
								if (strlen(uk) < 10) {
 8002d94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d96:	f7fd fa1b 	bl	80001d0 <strlen>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b09      	cmp	r3, #9
 8002d9e:	d803      	bhi.n	8002da8 <HAL_UART_RxCpltCallback+0x178>
									setDate = false;
 8002da0:	4b51      	ldr	r3, [pc, #324]	; (8002ee8 <HAL_UART_RxCpltCallback+0x2b8>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]
						break;
 8002da6:	e19d      	b.n	80030e4 <HAL_UART_RxCpltCallback+0x4b4>
									uki = strchr(uk, ':');
 8002da8:	213a      	movs	r1, #58	; 0x3a
 8002daa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002dac:	f00e fb41 	bl	8011432 <strchr>
 8002db0:	6378      	str	r0, [r7, #52]	; 0x34
									if (uki) {
 8002db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00c      	beq.n	8002dd2 <HAL_UART_RxCpltCallback+0x1a2>
										tZone = (uint8_t)atol(uki + 1);
 8002db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dba:	3301      	adds	r3, #1
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f00e f909 	bl	8010fd4 <atol>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4b49      	ldr	r3, [pc, #292]	; (8002eec <HAL_UART_RxCpltCallback+0x2bc>)
 8002dc8:	701a      	strb	r2, [r3, #0]
										*uki = '\0';
 8002dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
 8002dd0:	e002      	b.n	8002dd8 <HAL_UART_RxCpltCallback+0x1a8>
										tZone = 0;
 8002dd2:	4b46      	ldr	r3, [pc, #280]	; (8002eec <HAL_UART_RxCpltCallback+0x2bc>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
									epoch = (uint32_t)atol(uk);
 8002dd8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002dda:	f00e f8fb 	bl	8010fd4 <atol>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b43      	ldr	r3, [pc, #268]	; (8002ef0 <HAL_UART_RxCpltCallback+0x2c0>)
 8002de4:	601a      	str	r2, [r3, #0]
									cmd_flag = 1;
 8002de6:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <HAL_UART_RxCpltCallback+0x2ac>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
						break;
 8002dec:	e17a      	b.n	80030e4 <HAL_UART_RxCpltCallback+0x4b4>
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 8002dee:	213a      	movs	r1, #58	; 0x3a
 8002df0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002df2:	f00e fb1e 	bl	8011432 <strchr>
 8002df6:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <HAL_UART_RxCpltCallback+0x1e6>
								nandLen = atol(uki + 1);
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e00:	3301      	adds	r3, #1
 8002e02:	4618      	mov	r0, r3
 8002e04:	f00e f8e6 	bl	8010fd4 <atol>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	4b35      	ldr	r3, [pc, #212]	; (8002ee4 <HAL_UART_RxCpltCallback+0x2b4>)
 8002e0e:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 8002e16:	4937      	ldr	r1, [pc, #220]	; (8002ef4 <HAL_UART_RxCpltCallback+0x2c4>)
 8002e18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e1a:	f00e fb32 	bl	8011482 <strstr>
 8002e1e:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00f      	beq.n	8002e46 <HAL_UART_RxCpltCallback+0x216>
								uki += 2;
 8002e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e28:	3302      	adds	r3, #2
 8002e2a:	637b      	str	r3, [r7, #52]	; 0x34
								nandAdr = hex2bin(uki, strlen(uki));
 8002e2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e2e:	f7fd f9cf 	bl	80001d0 <strlen>
 8002e32:	4603      	mov	r3, r0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	4619      	mov	r1, r3
 8002e38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e3a:	f7ff fc59 	bl	80026f0 <hex2bin>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4a2d      	ldr	r2, [pc, #180]	; (8002ef8 <HAL_UART_RxCpltCallback+0x2c8>)
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	e006      	b.n	8002e54 <HAL_UART_RxCpltCallback+0x224>
							} else {
								nandAdr = atol(uk);
 8002e46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e48:	f00e f8c4 	bl	8010fd4 <atol>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4b29      	ldr	r3, [pc, #164]	; (8002ef8 <HAL_UART_RxCpltCallback+0x2c8>)
 8002e52:	601a      	str	r2, [r3, #0]
							}
							nandAdr += devAdr;
 8002e54:	4b28      	ldr	r3, [pc, #160]	; (8002ef8 <HAL_UART_RxCpltCallback+0x2c8>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b28      	ldr	r3, [pc, #160]	; (8002efc <HAL_UART_RxCpltCallback+0x2cc>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	4a26      	ldr	r2, [pc, #152]	; (8002ef8 <HAL_UART_RxCpltCallback+0x2c8>)
 8002e60:	6013      	str	r3, [r2, #0]
							check = true;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							qcmd.cmd = cmdRead;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	773b      	strb	r3, [r7, #28]
						break;
 8002e6c:	e13a      	b.n	80030e4 <HAL_UART_RxCpltCallback+0x4b4>
						case cmdNext://"next";
							if (nandAdr < devAdr) nandAdr = devAdr;
 8002e6e:	4b22      	ldr	r3, [pc, #136]	; (8002ef8 <HAL_UART_RxCpltCallback+0x2c8>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4b22      	ldr	r3, [pc, #136]	; (8002efc <HAL_UART_RxCpltCallback+0x2cc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d203      	bcs.n	8002e82 <HAL_UART_RxCpltCallback+0x252>
 8002e7a:	4b20      	ldr	r3, [pc, #128]	; (8002efc <HAL_UART_RxCpltCallback+0x2cc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1e      	ldr	r2, [pc, #120]	; (8002ef8 <HAL_UART_RxCpltCallback+0x2c8>)
 8002e80:	6013      	str	r3, [r2, #0]
							nandAdr += nandLen;
 8002e82:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <HAL_UART_RxCpltCallback+0x2b4>)
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <HAL_UART_RxCpltCallback+0x2c8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4a1a      	ldr	r2, [pc, #104]	; (8002ef8 <HAL_UART_RxCpltCallback+0x2c8>)
 8002e90:	6013      	str	r3, [r2, #0]
							check = true;
 8002e92:	2301      	movs	r3, #1
 8002e94:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							qcmd.cmd = cmdNext;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	773b      	strb	r3, [r7, #28]
						break;
 8002e9c:	e122      	b.n	80030e4 <HAL_UART_RxCpltCallback+0x4b4>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						case cmdArea://"area:'0x0:0x55:256'" //adr:byte:len
						case cmdSave://"save:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							uki = strstr(uk, "0x");
 8002ea4:	4913      	ldr	r1, [pc, #76]	; (8002ef4 <HAL_UART_RxCpltCallback+0x2c4>)
 8002ea6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ea8:	f00e faeb 	bl	8011482 <strstr>
 8002eac:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d025      	beq.n	8002f00 <HAL_UART_RxCpltCallback+0x2d0>
								if (uki == uk) {
 8002eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d123      	bne.n	8002f04 <HAL_UART_RxCpltCallback+0x2d4>
									uki += 2;
 8002ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	637b      	str	r3, [r7, #52]	; 0x34
									hex = true;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002ec8:	e01c      	b.n	8002f04 <HAL_UART_RxCpltCallback+0x2d4>
 8002eca:	bf00      	nop
 8002ecc:	40004800 	.word	0x40004800
 8002ed0:	20001382 	.word	0x20001382
 8002ed4:	20001380 	.word	0x20001380
 8002ed8:	20000b80 	.word	0x20000b80
 8002edc:	2000036e 	.word	0x2000036e
 8002ee0:	20000008 	.word	0x20000008
 8002ee4:	20001390 	.word	0x20001390
 8002ee8:	20001384 	.word	0x20001384
 8002eec:	20001385 	.word	0x20001385
 8002ef0:	20000064 	.word	0x20000064
 8002ef4:	08012470 	.word	0x08012470
 8002ef8:	2000138c 	.word	0x2000138c
 8002efc:	20001388 	.word	0x20001388
								}
							} else uki = uk;
 8002f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
							uke = strchr(uki, ':');//adr:byte
 8002f04:	213a      	movs	r1, #58	; 0x3a
 8002f06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f08:	f00e fa93 	bl	8011432 <strchr>
 8002f0c:	62b8      	str	r0, [r7, #40]	; 0x28
							if (uke) {
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80e4 	beq.w	80030de <HAL_UART_RxCpltCallback+0x4ae>
								ukb = uke + 1;
 8002f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f18:	3301      	adds	r3, #1
 8002f1a:	633b      	str	r3, [r7, #48]	; 0x30
								char tmp[16];
								memset(tmp, 0, 16);
 8002f1c:	f107 030c 	add.w	r3, r7, #12
 8002f20:	2210      	movs	r2, #16
 8002f22:	2100      	movs	r1, #0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f00e f93f 	bl	80111a8 <memset>
								memcpy(tmp, uki, uke - uki);
 8002f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	f107 030c 	add.w	r3, r7, #12
 8002f36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f00e f927 	bl	801118c <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 8002f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d010      	beq.n	8002f68 <HAL_UART_RxCpltCallback+0x338>
 8002f46:	f107 030c 	add.w	r3, r7, #12
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd f940 	bl	80001d0 <strlen>
 8002f50:	4603      	mov	r3, r0
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	f107 030c 	add.w	r3, r7, #12
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fbc8 	bl	80026f0 <hex2bin>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4a8a      	ldr	r2, [pc, #552]	; (800318c <HAL_UART_RxCpltCallback+0x55c>)
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e008      	b.n	8002f7a <HAL_UART_RxCpltCallback+0x34a>
								    else nandAdr = atol(tmp);
 8002f68:	f107 030c 	add.w	r3, r7, #12
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f00e f831 	bl	8010fd4 <atol>
 8002f72:	4603      	mov	r3, r0
 8002f74:	461a      	mov	r2, r3
 8002f76:	4b85      	ldr	r3, [pc, #532]	; (800318c <HAL_UART_RxCpltCallback+0x55c>)
 8002f78:	601a      	str	r2, [r3, #0]
								uki = ukb;
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
								uke = strchr(uki, ':');//byte:len
 8002f7e:	213a      	movs	r1, #58	; 0x3a
 8002f80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f82:	f00e fa56 	bl	8011432 <strchr>
 8002f86:	62b8      	str	r0, [r7, #40]	; 0x28
								if (uke) {
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_UART_RxCpltCallback+0x376>
									nandLen = atol(uke + 1);
 8002f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f90:	3301      	adds	r3, #1
 8002f92:	4618      	mov	r0, r3
 8002f94:	f00e f81e 	bl	8010fd4 <atol>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	4b7c      	ldr	r3, [pc, #496]	; (8003190 <HAL_UART_RxCpltCallback+0x560>)
 8002f9e:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 8002fa6:	497b      	ldr	r1, [pc, #492]	; (8003194 <HAL_UART_RxCpltCallback+0x564>)
 8002fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002faa:	f00e fa6a 	bl	8011482 <strstr>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d006      	beq.n	8002fc2 <HAL_UART_RxCpltCallback+0x392>
									ukb += 2;
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	3302      	adds	r3, #2
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
									hex = true;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002fc0:	e002      	b.n	8002fc8 <HAL_UART_RxCpltCallback+0x398>
								} else hex = false;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 8002fc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00d      	beq.n	8002fec <HAL_UART_RxCpltCallback+0x3bc>
 8002fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fd2:	f7fd f8fd 	bl	80001d0 <strlen>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	4619      	mov	r1, r3
 8002fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fde:	f7ff fb87 	bl	80026f0 <hex2bin>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4b6c      	ldr	r3, [pc, #432]	; (8003198 <HAL_UART_RxCpltCallback+0x568>)
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e006      	b.n	8002ffa <HAL_UART_RxCpltCallback+0x3ca>
								    else nandByte = (uint8_t)atol(ukb);
 8002fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fee:	f00d fff1 	bl	8010fd4 <atol>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4b68      	ldr	r3, [pc, #416]	; (8003198 <HAL_UART_RxCpltCallback+0x568>)
 8002ff8:	701a      	strb	r2, [r3, #0]
								nandAdr += devAdr;
 8002ffa:	4b64      	ldr	r3, [pc, #400]	; (800318c <HAL_UART_RxCpltCallback+0x55c>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b67      	ldr	r3, [pc, #412]	; (800319c <HAL_UART_RxCpltCallback+0x56c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4413      	add	r3, r2
 8003004:	4a61      	ldr	r2, [pc, #388]	; (800318c <HAL_UART_RxCpltCallback+0x55c>)
 8003006:	6013      	str	r3, [r2, #0]
								check = true;
 8003008:	2301      	movs	r3, #1
 800300a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
								qcmd.cmd = idx;
 800300e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003012:	773b      	strb	r3, [r7, #28]
							}
						}
						break;
 8003014:	e063      	b.n	80030de <HAL_UART_RxCpltCallback+0x4ae>
						case cmdErase://"erase:0" or "erase:all" //erase:block_number from 0..1023
							if (strstr(uk, "all")) {
 8003016:	4962      	ldr	r1, [pc, #392]	; (80031a0 <HAL_UART_RxCpltCallback+0x570>)
 8003018:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800301a:	f00e fa32 	bl	8011482 <strstr>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <HAL_UART_RxCpltCallback+0x3fa>
								qcmd.attr = 1;
 8003024:	2301      	movs	r3, #1
 8003026:	777b      	strb	r3, [r7, #29]
 8003028:	e00c      	b.n	8003044 <HAL_UART_RxCpltCallback+0x414>
							} else {
								uint32_t blk = atol(uk);
 800302a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800302c:	f00d ffd2 	bl	8010fd4 <atol>
 8003030:	4603      	mov	r3, r0
 8003032:	623b      	str	r3, [r7, #32]
								if (blk < chipConf.BlockNbr) nandBlk = blk;
 8003034:	4b5b      	ldr	r3, [pc, #364]	; (80031a4 <HAL_UART_RxCpltCallback+0x574>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	6a3a      	ldr	r2, [r7, #32]
 800303a:	429a      	cmp	r2, r3
 800303c:	d202      	bcs.n	8003044 <HAL_UART_RxCpltCallback+0x414>
 800303e:	4a5a      	ldr	r2, [pc, #360]	; (80031a8 <HAL_UART_RxCpltCallback+0x578>)
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	6013      	str	r3, [r2, #0]
							}
							qcmd.cmd = cmdErase;
 8003044:	2305      	movs	r3, #5
 8003046:	773b      	strb	r3, [r7, #28]
							cmd_flag = 1;
 8003048:	4b58      	ldr	r3, [pc, #352]	; (80031ac <HAL_UART_RxCpltCallback+0x57c>)
 800304a:	2201      	movs	r2, #1
 800304c:	701a      	strb	r2, [r3, #0]
						break;
 800304e:	e049      	b.n	80030e4 <HAL_UART_RxCpltCallback+0x4b4>
						case cmdCheck://"check:0" //check:page //(chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr
						{
							uint32_t page = atol(uk);
 8003050:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003052:	f00d ffbf 	bl	8010fd4 <atol>
 8003056:	4603      	mov	r3, r0
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
							if (page < ((chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr)) {//(128K / 2K) * 1024 = 65536
 800305a:	4b52      	ldr	r3, [pc, #328]	; (80031a4 <HAL_UART_RxCpltCallback+0x574>)
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	4b51      	ldr	r3, [pc, #324]	; (80031a4 <HAL_UART_RxCpltCallback+0x574>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	fbb2 f3f3 	udiv	r3, r2, r3
 8003066:	4a4f      	ldr	r2, [pc, #316]	; (80031a4 <HAL_UART_RxCpltCallback+0x574>)
 8003068:	68d2      	ldr	r2, [r2, #12]
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003070:	429a      	cmp	r2, r3
 8003072:	d236      	bcs.n	80030e2 <HAL_UART_RxCpltCallback+0x4b2>
								nandPage = page;
 8003074:	4a4e      	ldr	r2, [pc, #312]	; (80031b0 <HAL_UART_RxCpltCallback+0x580>)
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	6013      	str	r3, [r2, #0]
								qcmd.cmd = cmdCheck;
 800307a:	2306      	movs	r3, #6
 800307c:	773b      	strb	r3, [r7, #28]
								cmd_flag = 1;
 800307e:	4b4b      	ldr	r3, [pc, #300]	; (80031ac <HAL_UART_RxCpltCallback+0x57c>)
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 8003084:	e02d      	b.n	80030e2 <HAL_UART_RxCpltCallback+0x4b2>
						case cmdLog://"log:off" , "log:on" , "log:dump"
						{
							uint8_t lg = logNone;
 8003086:	2303      	movs	r3, #3
 8003088:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							if (strstr(uk, "off")) {
 800308c:	4949      	ldr	r1, [pc, #292]	; (80031b4 <HAL_UART_RxCpltCallback+0x584>)
 800308e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003090:	f00e f9f7 	bl	8011482 <strstr>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_UART_RxCpltCallback+0x472>
								lg = logOff;
 800309a:	2300      	movs	r3, #0
 800309c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80030a0:	e014      	b.n	80030cc <HAL_UART_RxCpltCallback+0x49c>
							} else if (strstr(uk, "on")) {
 80030a2:	4945      	ldr	r1, [pc, #276]	; (80031b8 <HAL_UART_RxCpltCallback+0x588>)
 80030a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80030a6:	f00e f9ec 	bl	8011482 <strstr>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_UART_RxCpltCallback+0x488>
								lg = logOn;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80030b6:	e009      	b.n	80030cc <HAL_UART_RxCpltCallback+0x49c>
							} else if (strstr(uk, "dump")) {
 80030b8:	4940      	ldr	r1, [pc, #256]	; (80031bc <HAL_UART_RxCpltCallback+0x58c>)
 80030ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80030bc:	f00e f9e1 	bl	8011482 <strstr>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <HAL_UART_RxCpltCallback+0x49c>
								lg = logDump;
 80030c6:	2302      	movs	r3, #2
 80030c8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							}
							qcmd.cmd = cmdLog;
 80030cc:	2309      	movs	r3, #9
 80030ce:	773b      	strb	r3, [r7, #28]
							qcmd.attr = lg;
 80030d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80030d4:	777b      	strb	r3, [r7, #29]
							cmd_flag = 1;
 80030d6:	4b35      	ldr	r3, [pc, #212]	; (80031ac <HAL_UART_RxCpltCallback+0x57c>)
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
						}
						break;
 80030dc:	e002      	b.n	80030e4 <HAL_UART_RxCpltCallback+0x4b4>
						break;
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <HAL_UART_RxCpltCallback+0x4b4>
						break;
 80030e2:	bf00      	nop
					}
					if (check) {
 80030e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d025      	beq.n	8003138 <HAL_UART_RxCpltCallback+0x508>
						if ((nandAdr + nandLen) >= ((chipConf.BlockSize * chipConf.BlockNbr) + devAdr)) {
 80030ec:	4b28      	ldr	r3, [pc, #160]	; (8003190 <HAL_UART_RxCpltCallback+0x560>)
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b26      	ldr	r3, [pc, #152]	; (800318c <HAL_UART_RxCpltCallback+0x55c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	441a      	add	r2, r3
 80030f8:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <HAL_UART_RxCpltCallback+0x574>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4929      	ldr	r1, [pc, #164]	; (80031a4 <HAL_UART_RxCpltCallback+0x574>)
 80030fe:	68c9      	ldr	r1, [r1, #12]
 8003100:	fb03 f101 	mul.w	r1, r3, r1
 8003104:	4b25      	ldr	r3, [pc, #148]	; (800319c <HAL_UART_RxCpltCallback+0x56c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	440b      	add	r3, r1
 800310a:	429a      	cmp	r2, r3
 800310c:	d311      	bcc.n	8003132 <HAL_UART_RxCpltCallback+0x502>
							nandLen = (chipConf.BlockSize * chipConf.BlockNbr) - nandAdr - 1;
 800310e:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <HAL_UART_RxCpltCallback+0x574>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	b29a      	uxth	r2, r3
 8003114:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <HAL_UART_RxCpltCallback+0x574>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	b29b      	uxth	r3, r3
 800311a:	fb12 f303 	smulbb	r3, r2, r3
 800311e:	b29a      	uxth	r2, r3
 8003120:	4b1a      	ldr	r3, [pc, #104]	; (800318c <HAL_UART_RxCpltCallback+0x55c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	b29b      	uxth	r3, r3
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	4b18      	ldr	r3, [pc, #96]	; (8003190 <HAL_UART_RxCpltCallback+0x560>)
 8003130:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 8003132:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <HAL_UART_RxCpltCallback+0x57c>)
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
					}
					//
					if (cmd_flag) {
 8003138:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <HAL_UART_RxCpltCallback+0x57c>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d015      	beq.n	800316c <HAL_UART_RxCpltCallback+0x53c>
						if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, 5, 0)) != osOK) devError |= devQUE;
 8003140:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <HAL_UART_RxCpltCallback+0x590>)
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	f107 011c 	add.w	r1, r7, #28
 8003148:	2300      	movs	r3, #0
 800314a:	2205      	movs	r2, #5
 800314c:	f00a fd5a 	bl	800dc04 <osMessageQueuePut>
 8003150:	4603      	mov	r3, r0
 8003152:	4a1c      	ldr	r2, [pc, #112]	; (80031c4 <HAL_UART_RxCpltCallback+0x594>)
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <HAL_UART_RxCpltCallback+0x594>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <HAL_UART_RxCpltCallback+0x53c>
 800315e:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <HAL_UART_RxCpltCallback+0x598>)
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003166:	b29a      	uxth	r2, r3
 8003168:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <HAL_UART_RxCpltCallback+0x598>)
 800316a:	801a      	strh	r2, [r3, #0]
					}
					//
				}
			}
			ruk = 0;
 800316c:	4b17      	ldr	r3, [pc, #92]	; (80031cc <HAL_UART_RxCpltCallback+0x59c>)
 800316e:	2200      	movs	r2, #0
 8003170:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <HAL_UART_RxCpltCallback+0x5a0>)
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 8003178:	2201      	movs	r2, #1
 800317a:	4916      	ldr	r1, [pc, #88]	; (80031d4 <HAL_UART_RxCpltCallback+0x5a4>)
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f005 fcd6 	bl	8008b2e <HAL_UART_Receive_IT>
	}
}
 8003182:	bf00      	nop
 8003184:	3740      	adds	r7, #64	; 0x40
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	2000138c 	.word	0x2000138c
 8003190:	20001390 	.word	0x20001390
 8003194:	08012470 	.word	0x08012470
 8003198:	20000084 	.word	0x20000084
 800319c:	20001388 	.word	0x20001388
 80031a0:	08012474 	.word	0x08012474
 80031a4:	200013a8 	.word	0x200013a8
 80031a8:	20001394 	.word	0x20001394
 80031ac:	2000036e 	.word	0x2000036e
 80031b0:	20001398 	.word	0x20001398
 80031b4:	08012478 	.word	0x08012478
 80031b8:	0801247c 	.word	0x0801247c
 80031bc:	08012480 	.word	0x08012480
 80031c0:	20000364 	.word	0x20000364
 80031c4:	200023c0 	.word	0x200023c0
 80031c8:	2000036c 	.word	0x2000036c
 80031cc:	20001382 	.word	0x20001382
 80031d0:	20000b80 	.word	0x20000b80
 80031d4:	20001380 	.word	0x20001380

080031d8 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a05      	ldr	r2, [pc, #20]	; (80031fc <HAL_UART_TxCpltCallback+0x24>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d102      	bne.n	80031f0 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_UART_TxCpltCallback+0x28>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	701a      	strb	r2, [r3, #0]
	}
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	40004800 	.word	0x40004800
 8003200:	20000060 	.word	0x20000060

08003204 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a05      	ldr	r2, [pc, #20]	; (8003228 <HAL_SPI_TxCpltCallback+0x24>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d102      	bne.n	800321c <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 8003216:	4b05      	ldr	r3, [pc, #20]	; (800322c <HAL_SPI_TxCpltCallback+0x28>)
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
	}
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40013000 	.word	0x40013000
 800322c:	20000061 	.word	0x20000061

08003230 <showBuf>:
	}
}
*/
//-------------------------------------------------------------------------------------------
void showBuf(uint8_t type, bool rd, uint32_t adr, uint32_t len, const uint8_t *buf)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08e      	sub	sp, #56	; 0x38
 8003234:	af02      	add	r7, sp, #8
 8003236:	60ba      	str	r2, [r7, #8]
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	4603      	mov	r3, r0
 800323c:	73fb      	strb	r3, [r7, #15]
 800323e:	460b      	mov	r3, r1
 8003240:	73bb      	strb	r3, [r7, #14]
int step = 32;
 8003242:	2320      	movs	r3, #32
 8003244:	617b      	str	r3, [r7, #20]
uint32_t ind = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t max_ind = len;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (type == 2) {
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d10e      	bne.n	8003272 <showBuf+0x42>
		if (rd) {
 8003254:	7bbb      	ldrb	r3, [r7, #14]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <showBuf+0x3e>
			ind = adr & (chipConf.PageSize - 1);// - devAdr;
 800325a:	4b4a      	ldr	r3, [pc, #296]	; (8003384 <showBuf+0x154>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3b01      	subs	r3, #1
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	4013      	ands	r3, r2
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
			max_ind = chipConf.PageSize;
 8003266:	4b47      	ldr	r3, [pc, #284]	; (8003384 <showBuf+0x154>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28
 800326c:	e001      	b.n	8003272 <showBuf+0x42>
		} else ind = max_ind;
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (ind < max_ind) {
 8003272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003276:	429a      	cmp	r2, r3
 8003278:	d271      	bcs.n	800335e <showBuf+0x12e>
		bool done = false;
 800327a:	2300      	movs	r3, #0
 800327c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint32_t ix = 0, sch = len / step;
 8003280:	2300      	movs	r3, #0
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	61fb      	str	r3, [r7, #28]
		if (len % step) sch++;
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	fbb3 f1f2 	udiv	r1, r3, r2
 8003296:	fb01 f202 	mul.w	r2, r1, r2
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <showBuf+0x76>
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	3301      	adds	r3, #1
 80032a4:	61fb      	str	r3, [r7, #28]
		stx[0] = '\0';
 80032a6:	4b38      	ldr	r3, [pc, #224]	; (8003388 <showBuf+0x158>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
		while (!done) {
 80032ac:	e046      	b.n	800333c <showBuf+0x10c>
			sprintf(stx+strlen(stx), "%08X ", (unsigned int)adr);
 80032ae:	4836      	ldr	r0, [pc, #216]	; (8003388 <showBuf+0x158>)
 80032b0:	f7fc ff8e 	bl	80001d0 <strlen>
 80032b4:	4603      	mov	r3, r0
 80032b6:	4a34      	ldr	r2, [pc, #208]	; (8003388 <showBuf+0x158>)
 80032b8:	4413      	add	r3, r2
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	4933      	ldr	r1, [pc, #204]	; (800338c <showBuf+0x15c>)
 80032be:	4618      	mov	r0, r3
 80032c0:	f00e f888 	bl	80113d4 <siprintf>
			for (int i = 0; i < step; i++) {
 80032c4:	2300      	movs	r3, #0
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	e01d      	b.n	8003306 <showBuf+0xd6>
				sprintf(stx+strlen(stx), " %02X", *(buf + i + ind));
 80032ca:	482f      	ldr	r0, [pc, #188]	; (8003388 <showBuf+0x158>)
 80032cc:	f7fc ff80 	bl	80001d0 <strlen>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4a2d      	ldr	r2, [pc, #180]	; (8003388 <showBuf+0x158>)
 80032d4:	1898      	adds	r0, r3, r2
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	4413      	add	r3, r2
 80032dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032de:	4413      	add	r3, r2
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	492a      	ldr	r1, [pc, #168]	; (8003390 <showBuf+0x160>)
 80032e6:	f00e f875 	bl	80113d4 <siprintf>
				ix++;
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	3301      	adds	r3, #1
 80032ee:	623b      	str	r3, [r7, #32]
				if (ix == len) {
 80032f0:	6a3a      	ldr	r2, [r7, #32]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d103      	bne.n	8003300 <showBuf+0xd0>
					done = true;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
 80032fe:	e006      	b.n	800330e <showBuf+0xde>
			for (int i = 0; i < step; i++) {
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	3301      	adds	r3, #1
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	429a      	cmp	r2, r3
 800330c:	dbdd      	blt.n	80032ca <showBuf+0x9a>
				}
			}
			strcat(stx, eol);
 800330e:	4b21      	ldr	r3, [pc, #132]	; (8003394 <showBuf+0x164>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4619      	mov	r1, r3
 8003314:	481c      	ldr	r0, [pc, #112]	; (8003388 <showBuf+0x158>)
 8003316:	f00e f87d 	bl	8011414 <strcat>
			adr += step;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	4413      	add	r3, r2
 8003320:	60bb      	str	r3, [r7, #8]
			ind += step;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003326:	4413      	add	r3, r2
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
			sch--;
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3b01      	subs	r3, #1
 800332e:	61fb      	str	r3, [r7, #28]
			if (!sch) done = true;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <showBuf+0x10c>
 8003336:	2301      	movs	r3, #1
 8003338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (!done) {
 800333c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003340:	f083 0301 	eor.w	r3, r3, #1
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1b1      	bne.n	80032ae <showBuf+0x7e>
		}
		if (dbg != logOff) Report(0, "%s", stx);
 800334a:	4b13      	ldr	r3, [pc, #76]	; (8003398 <showBuf+0x168>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d014      	beq.n	800337c <showBuf+0x14c>
 8003352:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <showBuf+0x158>)
 8003354:	4911      	ldr	r1, [pc, #68]	; (800339c <showBuf+0x16c>)
 8003356:	2000      	movs	r0, #0
 8003358:	f7ff fc06 	bl	8002b68 <Report>
	} else {
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
	}
}
 800335c:	e00e      	b.n	800337c <showBuf+0x14c>
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
 800335e:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <showBuf+0x168>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <showBuf+0x14c>
 8003366:	7bbb      	ldrb	r3, [r7, #14]
 8003368:	4a0a      	ldr	r2, [pc, #40]	; (8003394 <showBuf+0x164>)
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	9201      	str	r2, [sp, #4]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003374:	490a      	ldr	r1, [pc, #40]	; (80033a0 <showBuf+0x170>)
 8003376:	2000      	movs	r0, #0
 8003378:	f7ff fbf6 	bl	8002b68 <Report>
}
 800337c:	bf00      	nop
 800337e:	3730      	adds	r7, #48	; 0x30
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	200013a8 	.word	0x200013a8
 8003388:	200023c4 	.word	0x200023c4
 800338c:	08012488 	.word	0x08012488
 8003390:	08012490 	.word	0x08012490
 8003394:	20000004 	.word	0x20000004
 8003398:	20000068 	.word	0x20000068
 800339c:	08012364 	.word	0x08012364
 80033a0:	08012498 	.word	0x08012498
 80033a4:	00000000 	.word	0x00000000

080033a8 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 80033a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033aa:	f2ad 4ddc 	subw	sp, sp, #1244	; 0x4dc
 80033ae:	af0c      	add	r7, sp, #48	; 0x30
 80033b0:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80033b4:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80033b8:	6018      	str	r0, [r3, #0]
#ifdef SET_SWV
	char stz[MAX_SCR_BUF];
#endif


	HAL_Delay(250);
 80033ba:	20fa      	movs	r0, #250	; 0xfa
 80033bc:	f001 ff96 	bl	80052ec <HAL_Delay>
	if (dbg != logOff) {
 80033c0:	4b78      	ldr	r3, [pc, #480]	; (80035a4 <defThread+0x1fc>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d018      	beq.n	80033fa <defThread+0x52>
		Report(0, "%s", eol);
 80033c8:	4b77      	ldr	r3, [pc, #476]	; (80035a8 <defThread+0x200>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4977      	ldr	r1, [pc, #476]	; (80035ac <defThread+0x204>)
 80033d0:	2000      	movs	r0, #0
 80033d2:	f7ff fbc9 	bl	8002b68 <Report>
		Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 80033d6:	4b76      	ldr	r3, [pc, #472]	; (80035b0 <defThread+0x208>)
 80033d8:	681c      	ldr	r4, [r3, #0]
 80033da:	f00d fccb 	bl	8010d74 <xPortGetFreeHeapSize>
 80033de:	4602      	mov	r2, r0
 80033e0:	4b71      	ldr	r3, [pc, #452]	; (80035a8 <defThread+0x200>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	9302      	str	r3, [sp, #8]
 80033e6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	9200      	str	r2, [sp, #0]
 80033ee:	4b71      	ldr	r3, [pc, #452]	; (80035b4 <defThread+0x20c>)
 80033f0:	4622      	mov	r2, r4
 80033f2:	4971      	ldr	r1, [pc, #452]	; (80035b8 <defThread+0x210>)
 80033f4:	2001      	movs	r0, #1
 80033f6:	f7ff fbb7 	bl	8002b68 <Report>
	}

#ifdef SET_FAT_FS

	//"RAM","NAND","CF","SD1","SD2","USB1","USB2","USB3"
	strcpy(USERPath, "0:/");
 80033fa:	4b70      	ldr	r3, [pc, #448]	; (80035bc <defThread+0x214>)
 80033fc:	4a70      	ldr	r2, [pc, #448]	; (80035c0 <defThread+0x218>)
 80033fe:	6810      	ldr	r0, [r2, #0]
 8003400:	6018      	str	r0, [r3, #0]

	mnt = drvMount(USERPath);
 8003402:	486e      	ldr	r0, [pc, #440]	; (80035bc <defThread+0x214>)
 8003404:	f7fe fe52 	bl	80020ac <drvMount>
 8003408:	4603      	mov	r3, r0
 800340a:	461a      	mov	r2, r3
 800340c:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <defThread+0x21c>)
 800340e:	701a      	strb	r2, [r3, #0]
    if (mnt) {
 8003410:	4b6c      	ldr	r3, [pc, #432]	; (80035c4 <defThread+0x21c>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d050      	beq.n	80034ba <defThread+0x112>
      	  dir_open = dirList(dirName, &dir);
 8003418:	4b6b      	ldr	r3, [pc, #428]	; (80035c8 <defThread+0x220>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	496b      	ldr	r1, [pc, #428]	; (80035cc <defThread+0x224>)
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe feea 	bl	80021f8 <dirList>
 8003424:	4603      	mov	r3, r0
 8003426:	461a      	mov	r2, r3
 8003428:	4b69      	ldr	r3, [pc, #420]	; (80035d0 <defThread+0x228>)
 800342a:	701a      	strb	r2, [r3, #0]
      	  if (dir_open) {
 800342c:	4b68      	ldr	r3, [pc, #416]	; (80035d0 <defThread+0x228>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d042      	beq.n	80034ba <defThread+0x112>
      		  sprintf(stx,"#Configuration file:%s"
 8003434:	4b5c      	ldr	r3, [pc, #368]	; (80035a8 <defThread+0x200>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	4b66      	ldr	r3, [pc, #408]	; (80035d4 <defThread+0x22c>)
 800343c:	6819      	ldr	r1, [r3, #0]
 800343e:	6179      	str	r1, [r7, #20]
 8003440:	4b59      	ldr	r3, [pc, #356]	; (80035a8 <defThread+0x200>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a63      	ldr	r2, [pc, #396]	; (80035d4 <defThread+0x22c>)
 8003446:	6852      	ldr	r2, [r2, #4]
 8003448:	4957      	ldr	r1, [pc, #348]	; (80035a8 <defThread+0x200>)
 800344a:	6809      	ldr	r1, [r1, #0]
      			  	  "PlaneNbr:%lu%s"
      			  	  "PlaneSize:%lu MB%s",
					  eol,
					  chipConf.PageSize, eol,
					  chipConf.SpareAreaSize, eol,
					  chipConf.BlockSize / 1024, eol,
 800344c:	4861      	ldr	r0, [pc, #388]	; (80035d4 <defThread+0x22c>)
 800344e:	6880      	ldr	r0, [r0, #8]
      		  sprintf(stx,"#Configuration file:%s"
 8003450:	0a80      	lsrs	r0, r0, #10
 8003452:	6138      	str	r0, [r7, #16]
 8003454:	4c54      	ldr	r4, [pc, #336]	; (80035a8 <defThread+0x200>)
 8003456:	6824      	ldr	r4, [r4, #0]
 8003458:	4d5e      	ldr	r5, [pc, #376]	; (80035d4 <defThread+0x22c>)
 800345a:	68ed      	ldr	r5, [r5, #12]
 800345c:	4e52      	ldr	r6, [pc, #328]	; (80035a8 <defThread+0x200>)
 800345e:	6836      	ldr	r6, [r6, #0]
 8003460:	485c      	ldr	r0, [pc, #368]	; (80035d4 <defThread+0x22c>)
 8003462:	6900      	ldr	r0, [r0, #16]
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	4850      	ldr	r0, [pc, #320]	; (80035a8 <defThread+0x200>)
 8003468:	6800      	ldr	r0, [r0, #0]
 800346a:	60b8      	str	r0, [r7, #8]
					  chipConf.BlockNbr, eol,
					  chipConf.PlaneNbr, eol,
					  chipConf.PlaneSize / 1024 / 1024,  eol);
 800346c:	4859      	ldr	r0, [pc, #356]	; (80035d4 <defThread+0x22c>)
 800346e:	6940      	ldr	r0, [r0, #20]
      		  sprintf(stx,"#Configuration file:%s"
 8003470:	0d00      	lsrs	r0, r0, #20
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	484c      	ldr	r0, [pc, #304]	; (80035a8 <defThread+0x200>)
 8003476:	6800      	ldr	r0, [r0, #0]
 8003478:	900a      	str	r0, [sp, #40]	; 0x28
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	9009      	str	r0, [sp, #36]	; 0x24
 800347e:	68b8      	ldr	r0, [r7, #8]
 8003480:	9008      	str	r0, [sp, #32]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	9007      	str	r0, [sp, #28]
 8003486:	9606      	str	r6, [sp, #24]
 8003488:	9505      	str	r5, [sp, #20]
 800348a:	9404      	str	r4, [sp, #16]
 800348c:	6938      	ldr	r0, [r7, #16]
 800348e:	9003      	str	r0, [sp, #12]
 8003490:	9102      	str	r1, [sp, #8]
 8003492:	9201      	str	r2, [sp, #4]
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	494f      	ldr	r1, [pc, #316]	; (80035d8 <defThread+0x230>)
 800349c:	484f      	ldr	r0, [pc, #316]	; (80035dc <defThread+0x234>)
 800349e:	f00d ff99 	bl	80113d4 <siprintf>
      		  wrFile(cfg, stx, false);
 80034a2:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <defThread+0x238>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	494c      	ldr	r1, [pc, #304]	; (80035dc <defThread+0x234>)
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe ff50 	bl	8002350 <wrFile>
      		  rdFile(cfg);
 80034b0:	4b4b      	ldr	r3, [pc, #300]	; (80035e0 <defThread+0x238>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff f83d 	bl	8002534 <rdFile>
    }
#endif



	uint8_t next_block_erase = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
	uint32_t iBlk, stik;
	NAND_AddressTypeDef clr = {
 80034c0:	2300      	movs	r3, #0
 80034c2:	f8a7 3460 	strh.w	r3, [r7, #1120]	; 0x460
 80034c6:	2301      	movs	r3, #1
 80034c8:	f8a7 3462 	strh.w	r3, [r7, #1122]	; 0x462
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8a7 3464 	strh.w	r3, [r7, #1124]	; 0x464
		.Page = 0,
		.Plane = 1,
		.Block = 0
	};
	uint8_t nand_show = 0;
 80034d2:	2300      	movs	r3, #0
 80034d4:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
	bool readed = false;
 80034d8:	2300      	movs	r3, #0
 80034da:	f887 349a 	strb.w	r3, [r7, #1178]	; 0x49a
	char cid[32];
	if (nandState == HAL_NAND_STATE_READY) {
 80034de:	4b41      	ldr	r3, [pc, #260]	; (80035e4 <defThread+0x23c>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	f040 808c 	bne.w	8003600 <defThread+0x258>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 80034e8:	4b3f      	ldr	r3, [pc, #252]	; (80035e8 <defThread+0x240>)
 80034ea:	785b      	ldrb	r3, [r3, #1]
 80034ec:	22f1      	movs	r2, #241	; 0xf1
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d108      	bne.n	8003504 <defThread+0x15c>
 80034f2:	4b3e      	ldr	r3, [pc, #248]	; (80035ec <defThread+0x244>)
 80034f4:	6819      	ldr	r1, [r3, #0]
 80034f6:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80034fa:	2220      	movs	r2, #32
 80034fc:	4618      	mov	r0, r3
 80034fe:	f00d ffad 	bl	801145c <strncpy>
 8003502:	e006      	b.n	8003512 <defThread+0x16a>
		                               else strcpy(cid, "UNKNOWN");
 8003504:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003508:	4a39      	ldr	r2, [pc, #228]	; (80035f0 <defThread+0x248>)
 800350a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800350e:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 8003512:	4b32      	ldr	r3, [pc, #200]	; (80035dc <defThread+0x234>)
 8003514:	4a37      	ldr	r2, [pc, #220]	; (80035f4 <defThread+0x24c>)
 8003516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800351a:	6018      	str	r0, [r3, #0]
 800351c:	3304      	adds	r3, #4
 800351e:	8019      	strh	r1, [r3, #0]
		uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 8003520:	4b31      	ldr	r3, [pc, #196]	; (80035e8 <defThread+0x240>)
 8003522:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 8003526:	2300      	movs	r3, #0
 8003528:	f887 3499 	strb.w	r3, [r7, #1177]	; 0x499
 800352c:	e016      	b.n	800355c <defThread+0x1b4>
 800352e:	482b      	ldr	r0, [pc, #172]	; (80035dc <defThread+0x234>)
 8003530:	f7fc fe4e 	bl	80001d0 <strlen>
 8003534:	4603      	mov	r3, r0
 8003536:	4a29      	ldr	r2, [pc, #164]	; (80035dc <defThread+0x234>)
 8003538:	1898      	adds	r0, r3, r2
 800353a:	f997 3499 	ldrsb.w	r3, [r7, #1177]	; 0x499
 800353e:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
 8003542:	4413      	add	r3, r2
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	492b      	ldr	r1, [pc, #172]	; (80035f8 <defThread+0x250>)
 800354a:	f00d ff43 	bl	80113d4 <siprintf>
 800354e:	f997 3499 	ldrsb.w	r3, [r7, #1177]	; 0x499
 8003552:	b2db      	uxtb	r3, r3
 8003554:	3301      	adds	r3, #1
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f887 3499 	strb.w	r3, [r7, #1177]	; 0x499
 800355c:	f897 3499 	ldrb.w	r3, [r7, #1177]	; 0x499
 8003560:	2b04      	cmp	r3, #4
 8003562:	d9e4      	bls.n	800352e <defThread+0x186>
		sprintf(stx+strlen(stx),
 8003564:	481d      	ldr	r0, [pc, #116]	; (80035dc <defThread+0x234>)
 8003566:	f7fc fe33 	bl	80001d0 <strlen>
 800356a:	4603      	mov	r3, r0
 800356c:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <defThread+0x234>)
 800356e:	1898      	adds	r0, r3, r2
				"\n\tMakerID=%02X\n\tDevice_Id=%02X '%s'\n\tThird_Id=%02X\n\tFourth_Id=%02X\n\tPlane_Id=%02X",
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <defThread+0x240>)
 8003572:	781b      	ldrb	r3, [r3, #0]
		sprintf(stx+strlen(stx),
 8003574:	461c      	mov	r4, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8003576:	4b1c      	ldr	r3, [pc, #112]	; (80035e8 <defThread+0x240>)
 8003578:	785b      	ldrb	r3, [r3, #1]
		sprintf(stx+strlen(stx),
 800357a:	461d      	mov	r5, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 800357c:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <defThread+0x240>)
 800357e:	789b      	ldrb	r3, [r3, #2]
		sprintf(stx+strlen(stx),
 8003580:	461a      	mov	r2, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8003582:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <defThread+0x240>)
 8003584:	78db      	ldrb	r3, [r3, #3]
		sprintf(stx+strlen(stx),
 8003586:	4619      	mov	r1, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8003588:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <defThread+0x240>)
 800358a:	791b      	ldrb	r3, [r3, #4]
		sprintf(stx+strlen(stx),
 800358c:	9303      	str	r3, [sp, #12]
 800358e:	9102      	str	r1, [sp, #8]
 8003590:	9201      	str	r2, [sp, #4]
 8003592:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	462b      	mov	r3, r5
 800359a:	4622      	mov	r2, r4
 800359c:	4917      	ldr	r1, [pc, #92]	; (80035fc <defThread+0x254>)
 800359e:	f00d ff19 	bl	80113d4 <siprintf>
 80035a2:	e03a      	b.n	800361a <defThread+0x272>
 80035a4:	20000068 	.word	0x20000068
 80035a8:	20000004 	.word	0x20000004
 80035ac:	08012364 	.word	0x08012364
 80035b0:	20000000 	.word	0x20000000
 80035b4:	08014bcc 	.word	0x08014bcc
 80035b8:	080124c0 	.word	0x080124c0
 80035bc:	20003c88 	.word	0x20003c88
 80035c0:	080124ec 	.word	0x080124ec
 80035c4:	20003428 	.word	0x20003428
 80035c8:	200000a0 	.word	0x200000a0
 80035cc:	200033f8 	.word	0x200033f8
 80035d0:	20003c2c 	.word	0x20003c2c
 80035d4:	200013a8 	.word	0x200013a8
 80035d8:	080124f0 	.word	0x080124f0
 80035dc:	200023c4 	.word	0x200023c4
 80035e0:	2000009c 	.word	0x2000009c
 80035e4:	20000085 	.word	0x20000085
 80035e8:	200013a0 	.word	0x200013a0
 80035ec:	20000088 	.word	0x20000088
 80035f0:	08012568 	.word	0x08012568
 80035f4:	08012570 	.word	0x08012570
 80035f8:	08012490 	.word	0x08012490
 80035fc:	08012578 	.word	0x08012578
	} else {
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
					     nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8003600:	4bb5      	ldr	r3, [pc, #724]	; (80038d8 <defThread+0x530>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
 8003608:	4ab4      	ldr	r2, [pc, #720]	; (80038dc <defThread+0x534>)
 800360a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800360e:	4bb2      	ldr	r3, [pc, #712]	; (80038d8 <defThread+0x530>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	49b3      	ldr	r1, [pc, #716]	; (80038e0 <defThread+0x538>)
 8003614:	48b3      	ldr	r0, [pc, #716]	; (80038e4 <defThread+0x53c>)
 8003616:	f00d fedd 	bl	80113d4 <siprintf>
	}
	if (dbg != logOff) Report(1, "%s%s", stx, eol);
 800361a:	4bb3      	ldr	r3, [pc, #716]	; (80038e8 <defThread+0x540>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d006      	beq.n	8003630 <defThread+0x288>
 8003622:	4bb2      	ldr	r3, [pc, #712]	; (80038ec <defThread+0x544>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4aaf      	ldr	r2, [pc, #700]	; (80038e4 <defThread+0x53c>)
 8003628:	49b1      	ldr	r1, [pc, #708]	; (80038f0 <defThread+0x548>)
 800362a:	2001      	movs	r0, #1
 800362c:	f7ff fa9c 	bl	8002b68 <Report>


	char screen[MAX_SCR_BUF];
	uint16_t err_color = BLACK;
 8003630:	2300      	movs	r3, #0
 8003632:	f8a7 3496 	strh.w	r3, [r7, #1174]	; 0x496
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 8003636:	4baf      	ldr	r3, [pc, #700]	; (80038f4 <defThread+0x54c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	785b      	ldrb	r3, [r3, #1]
 800363c:	b29b      	uxth	r3, r3
 800363e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003642:	9200      	str	r2, [sp, #0]
 8003644:	22ef      	movs	r2, #239	; 0xef
 8003646:	2100      	movs	r1, #0
 8003648:	2000      	movs	r0, #0
 800364a:	f001 f980 	bl	800494e <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 800364e:	4ba9      	ldr	r3, [pc, #676]	; (80038f4 <defThread+0x54c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	785b      	ldrb	r3, [r3, #1]
 8003654:	b29b      	uxth	r3, r3
 8003656:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800365a:	b299      	uxth	r1, r3
 800365c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	23ef      	movs	r3, #239	; 0xef
 8003664:	22ef      	movs	r2, #239	; 0xef
 8003666:	2000      	movs	r0, #0
 8003668:	f001 f971 	bl	800494e <ST7789_Fill>

	sprintf(screen, "NAND : %s", cid);
 800366c:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8003670:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003674:	49a0      	ldr	r1, [pc, #640]	; (80038f8 <defThread+0x550>)
 8003676:	4618      	mov	r0, r3
 8003678:	f00d feac 	bl	80113d4 <siprintf>
	mkLineCenter(screen, ST7789_WIDTH / tFont->width);
 800367c:	4b9f      	ldr	r3, [pc, #636]	; (80038fc <defThread+0x554>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	23f0      	movs	r3, #240	; 0xf0
 8003686:	fb93 f3f2 	sdiv	r3, r3, r2
 800368a:	b29a      	uxth	r2, r3
 800368c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f001 fa68 	bl	8004b68 <mkLineCenter>
	sprintf(screen+strlen(screen),
 8003698:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800369c:	4618      	mov	r0, r3
 800369e:	f7fc fd97 	bl	80001d0 <strlen>
 80036a2:	4602      	mov	r2, r0
 80036a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036a8:	189c      	adds	r4, r3, r2
 80036aa:	4b95      	ldr	r3, [pc, #596]	; (8003900 <defThread+0x558>)
 80036ac:	681d      	ldr	r5, [r3, #0]
 80036ae:	4b94      	ldr	r3, [pc, #592]	; (8003900 <defThread+0x558>)
 80036b0:	685e      	ldr	r6, [r3, #4]
			"PageSize:%lu\nSpareAreaSize:%lu\nBlockSize:%lu KB\nBlockNbr:%lu\nPlaneNbr:%lu\nPlaneSize:%lu MB",
			chipConf.PageSize,
			chipConf.SpareAreaSize,
			chipConf.BlockSize / 1024,
 80036b2:	4b93      	ldr	r3, [pc, #588]	; (8003900 <defThread+0x558>)
 80036b4:	689b      	ldr	r3, [r3, #8]
	sprintf(screen+strlen(screen),
 80036b6:	0a9b      	lsrs	r3, r3, #10
 80036b8:	4a91      	ldr	r2, [pc, #580]	; (8003900 <defThread+0x558>)
 80036ba:	68d2      	ldr	r2, [r2, #12]
 80036bc:	4990      	ldr	r1, [pc, #576]	; (8003900 <defThread+0x558>)
 80036be:	6909      	ldr	r1, [r1, #16]
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			chipConf.PlaneSize / 1024 / 1024);
 80036c0:	488f      	ldr	r0, [pc, #572]	; (8003900 <defThread+0x558>)
 80036c2:	6940      	ldr	r0, [r0, #20]
	sprintf(screen+strlen(screen),
 80036c4:	0d00      	lsrs	r0, r0, #20
 80036c6:	9003      	str	r0, [sp, #12]
 80036c8:	9102      	str	r1, [sp, #8]
 80036ca:	9201      	str	r2, [sp, #4]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	4633      	mov	r3, r6
 80036d0:	462a      	mov	r2, r5
 80036d2:	498c      	ldr	r1, [pc, #560]	; (8003904 <defThread+0x55c>)
 80036d4:	4620      	mov	r0, r4
 80036d6:	f00d fe7d 	bl	80113d4 <siprintf>
	if (cb_nandCounter) sprintf(screen+strlen(screen), "\nCallBack:%lu", cb_nandCounter);
 80036da:	4b8b      	ldr	r3, [pc, #556]	; (8003908 <defThread+0x560>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00e      	beq.n	8003700 <defThread+0x358>
 80036e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fc fd72 	bl	80001d0 <strlen>
 80036ec:	4602      	mov	r2, r0
 80036ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036f2:	4413      	add	r3, r2
 80036f4:	4a84      	ldr	r2, [pc, #528]	; (8003908 <defThread+0x560>)
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	4984      	ldr	r1, [pc, #528]	; (800390c <defThread+0x564>)
 80036fa:	4618      	mov	r0, r3
 80036fc:	f00d fe6a 	bl	80113d4 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 8003700:	4b7e      	ldr	r3, [pc, #504]	; (80038fc <defThread+0x554>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	785b      	ldrb	r3, [r3, #1]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd f836 	bl	8000778 <__aeabi_i2d>
 800370c:	4604      	mov	r4, r0
 800370e:	460d      	mov	r5, r1
 8003710:	4b7a      	ldr	r3, [pc, #488]	; (80038fc <defThread+0x554>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	785b      	ldrb	r3, [r3, #1]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fd f82e 	bl	8000778 <__aeabi_i2d>
 800371c:	a36c      	add	r3, pc, #432	; (adr r3, 80038d0 <defThread+0x528>)
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f7fc fdad 	bl	8000280 <__aeabi_dmul>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4620      	mov	r0, r4
 800372c:	4629      	mov	r1, r5
 800372e:	f7fc fed7 	bl	80004e0 <__adddf3>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8003736:	4610      	mov	r0, r2
 8003738:	4619      	mov	r1, r3
 800373a:	f7fd f887 	bl	800084c <__aeabi_d2uiz>
 800373e:	4603      	mov	r3, r0
 8003740:	b298      	uxth	r0, r3
 8003742:	4b6e      	ldr	r3, [pc, #440]	; (80038fc <defThread+0x554>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a72      	ldr	r2, [pc, #456]	; (8003910 <defThread+0x568>)
 8003748:	8812      	ldrh	r2, [r2, #0]
 800374a:	43d2      	mvns	r2, r2
 800374c:	b292      	uxth	r2, r2
 800374e:	4970      	ldr	r1, [pc, #448]	; (8003910 <defThread+0x568>)
 8003750:	8809      	ldrh	r1, [r1, #0]
 8003752:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003756:	9102      	str	r1, [sp, #8]
 8003758:	9201      	str	r2, [sp, #4]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	9200      	str	r2, [sp, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4622      	mov	r2, r4
 8003762:	4601      	mov	r1, r0
 8003764:	2000      	movs	r0, #0
 8003766:	f001 f9a9 	bl	8004abc <ST7789_WriteString>
					   screen,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 800376a:	2001      	movs	r0, #1
 800376c:	f000 ff60 	bl	8004630 <ipsOn>


	bool loop = true;
 8003770:	2301      	movs	r3, #1
 8003772:	f887 3495 	strb.w	r3, [r7, #1173]	; 0x495
	bool led = false;
 8003776:	2300      	movs	r3, #0
 8003778:	f887 3494 	strb.w	r3, [r7, #1172]	; 0x494
	uint32_t tmr = get_tmr(1);
 800377c:	2001      	movs	r0, #1
 800377e:	f7ff f8db 	bl	8002938 <get_tmr>
 8003782:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490

	s_qcmd qcmd = {0};
 8003786:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800378a:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800378e:	2200      	movs	r2, #0
 8003790:	801a      	strh	r2, [r3, #0]
	uint8_t prio = 0;
 8003792:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003796:	f2a3 436d 	subw	r3, r3, #1133	; 0x46d
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
	osStatus_t qs = osOK;
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c

  /* Infinite loop */

	while (loop) {
 80037a4:	f000 bd8f 	b.w	80042c6 <defThread+0xf1e>

		if (check_tmr(tmr)) {
 80037a8:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 80037ac:	f7ff f8d1 	bl	8002952 <check_tmr>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80be 	beq.w	8003934 <defThread+0x58c>
			tmr = get_tmr(1);
 80037b8:	2001      	movs	r0, #1
 80037ba:	f7ff f8bd 	bl	8002938 <get_tmr>
 80037be:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
			//
			sec2str(screen);
 80037c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff f934 	bl	8002a34 <sec2str>
#ifdef SET_SWV
			strcpy(stz, screen);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 80037cc:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <defThread+0x54c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	23f0      	movs	r3, #240	; 0xf0
 80037d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80037da:	b29a      	uxth	r2, r3
 80037dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037e0:	4611      	mov	r1, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f001 f9c0 	bl	8004b68 <mkLineCenter>
 80037e8:	4601      	mov	r1, r0
 80037ea:	4b42      	ldr	r3, [pc, #264]	; (80038f4 <defThread+0x54c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80037f2:	9202      	str	r2, [sp, #8]
 80037f4:	221f      	movs	r2, #31
 80037f6:	9201      	str	r2, [sp, #4]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	9200      	str	r2, [sp, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	460a      	mov	r2, r1
 8003800:	2100      	movs	r1, #0
 8003802:	2008      	movs	r0, #8
 8003804:	f001 f95a 	bl	8004abc <ST7789_WriteString>

			sprintf(screen, "Error: 0x%04X", devError);
 8003808:	4b42      	ldr	r3, [pc, #264]	; (8003914 <defThread+0x56c>)
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003812:	4941      	ldr	r1, [pc, #260]	; (8003918 <defThread+0x570>)
 8003814:	4618      	mov	r0, r3
 8003816:	f00d fddd 	bl	80113d4 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 800381a:	4b3e      	ldr	r3, [pc, #248]	; (8003914 <defThread+0x56c>)
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <defThread+0x484>
 8003822:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003826:	f8a7 3496 	strh.w	r3, [r7, #1174]	; 0x496
 800382a:	e002      	b.n	8003832 <defThread+0x48a>
 800382c:	2300      	movs	r3, #0
 800382e:	f8a7 3496 	strh.w	r3, [r7, #1174]	; 0x496
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 8003832:	4b30      	ldr	r3, [pc, #192]	; (80038f4 <defThread+0x54c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	785b      	ldrb	r3, [r3, #1]
 8003838:	b29b      	uxth	r3, r3
 800383a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800383e:	b29c      	uxth	r4, r3
 8003840:	4b2c      	ldr	r3, [pc, #176]	; (80038f4 <defThread+0x54c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	23f0      	movs	r3, #240	; 0xf0
 800384a:	fb93 f3f2 	sdiv	r3, r3, r2
 800384e:	b29a      	uxth	r2, r3
 8003850:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f001 f986 	bl	8004b68 <mkLineCenter>
 800385c:	4601      	mov	r1, r0
 800385e:	4b25      	ldr	r3, [pc, #148]	; (80038f4 <defThread+0x54c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003866:	9202      	str	r2, [sp, #8]
 8003868:	f8b7 2496 	ldrh.w	r2, [r7, #1174]	; 0x496
 800386c:	9201      	str	r2, [sp, #4]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	9200      	str	r2, [sp, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	460a      	mov	r2, r1
 8003876:	4621      	mov	r1, r4
 8003878:	2000      	movs	r0, #0
 800387a:	f001 f91f 	bl	8004abc <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 800387e:	4b27      	ldr	r3, [pc, #156]	; (800391c <defThread+0x574>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d019      	beq.n	80038ba <defThread+0x512>
				if (qs != qStat) {
 8003886:	4b25      	ldr	r3, [pc, #148]	; (800391c <defThread+0x574>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 800388e:	429a      	cmp	r2, r3
 8003890:	d013      	beq.n	80038ba <defThread+0x512>
					if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8003892:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <defThread+0x540>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00b      	beq.n	80038b2 <defThread+0x50a>
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <defThread+0x574>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe feb2 	bl	8002608 <get_qStat>
 80038a4:	4602      	mov	r2, r0
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <defThread+0x544>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	491d      	ldr	r1, [pc, #116]	; (8003920 <defThread+0x578>)
 80038ac:	2001      	movs	r0, #1
 80038ae:	f7ff f95b 	bl	8002b68 <Report>
					qs = qStat;
 80038b2:	4b1a      	ldr	r3, [pc, #104]	; (800391c <defThread+0x574>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
				}
			}

			if (devError) led = true; else led = false;
 80038ba:	4b16      	ldr	r3, [pc, #88]	; (8003914 <defThread+0x56c>)
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d030      	beq.n	8003924 <defThread+0x57c>
 80038c2:	2301      	movs	r3, #1
 80038c4:	f887 3494 	strb.w	r3, [r7, #1172]	; 0x494
 80038c8:	e02f      	b.n	800392a <defThread+0x582>
 80038ca:	bf00      	nop
 80038cc:	f3af 8000 	nop.w
 80038d0:	33333333 	.word	0x33333333
 80038d4:	3feb3333 	.word	0x3feb3333
 80038d8:	20000085 	.word	0x20000085
 80038dc:	2000008c 	.word	0x2000008c
 80038e0:	080125cc 	.word	0x080125cc
 80038e4:	200023c4 	.word	0x200023c4
 80038e8:	20000068 	.word	0x20000068
 80038ec:	20000004 	.word	0x20000004
 80038f0:	080125ec 	.word	0x080125ec
 80038f4:	2000007c 	.word	0x2000007c
 80038f8:	080125f4 	.word	0x080125f4
 80038fc:	20000080 	.word	0x20000080
 8003900:	200013a8 	.word	0x200013a8
 8003904:	08012600 	.word	0x08012600
 8003908:	2000139c 	.word	0x2000139c
 800390c:	0801265c 	.word	0x0801265c
 8003910:	20001386 	.word	0x20001386
 8003914:	2000036c 	.word	0x2000036c
 8003918:	0801266c 	.word	0x0801266c
 800391c:	200023c0 	.word	0x200023c0
 8003920:	0801267c 	.word	0x0801267c
 8003924:	2300      	movs	r3, #0
 8003926:	f887 3494 	strb.w	r3, [r7, #1172]	; 0x494
			errLedOn(led);
 800392a:	f897 3494 	ldrb.w	r3, [r7, #1172]	; 0x494
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe ffac 	bl	800288c <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 5)) != osOK) {
 8003934:	4b9d      	ldr	r3, [pc, #628]	; (8003bac <defThread+0x804>)
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	f107 023b 	add.w	r2, r7, #59	; 0x3b
 800393c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003940:	2305      	movs	r3, #5
 8003942:	f00a f9bf 	bl	800dcc4 <osMessageQueueGet>
 8003946:	4603      	mov	r3, r0
 8003948:	4a99      	ldr	r2, [pc, #612]	; (8003bb0 <defThread+0x808>)
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	4b98      	ldr	r3, [pc, #608]	; (8003bb0 <defThread+0x808>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d029      	beq.n	80039a8 <defThread+0x600>
			if (qs != qStat) qs = qStat;
 8003954:	4b96      	ldr	r3, [pc, #600]	; (8003bb0 <defThread+0x808>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 800395c:	429a      	cmp	r2, r3
 800395e:	d003      	beq.n	8003968 <defThread+0x5c0>
 8003960:	4b93      	ldr	r3, [pc, #588]	; (8003bb0 <defThread+0x808>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
			if (qStat != osErrorTimeout) {
 8003968:	4b91      	ldr	r3, [pc, #580]	; (8003bb0 <defThread+0x808>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f113 0f02 	cmn.w	r3, #2
 8003970:	f000 8453 	beq.w	800421a <defThread+0xe72>
				devError |= devQUE;
 8003974:	4b8f      	ldr	r3, [pc, #572]	; (8003bb4 <defThread+0x80c>)
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800397c:	b29a      	uxth	r2, r3
 800397e:	4b8d      	ldr	r3, [pc, #564]	; (8003bb4 <defThread+0x80c>)
 8003980:	801a      	strh	r2, [r3, #0]
				if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8003982:	4b8d      	ldr	r3, [pc, #564]	; (8003bb8 <defThread+0x810>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 8447 	beq.w	800421a <defThread+0xe72>
 800398c:	4b88      	ldr	r3, [pc, #544]	; (8003bb0 <defThread+0x808>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe fe39 	bl	8002608 <get_qStat>
 8003996:	4602      	mov	r2, r0
 8003998:	4b88      	ldr	r3, [pc, #544]	; (8003bbc <defThread+0x814>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4988      	ldr	r1, [pc, #544]	; (8003bc0 <defThread+0x818>)
 800399e:	2001      	movs	r0, #1
 80039a0:	f7ff f8e2 	bl	8002b68 <Report>
 80039a4:	f000 bc39 	b.w	800421a <defThread+0xe72>
			}
		} else {
			sprintf(screen, "Cmd: %s", str_cmds[qcmd.cmd]);
 80039a8:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80039ac:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	4b83      	ldr	r3, [pc, #524]	; (8003bc4 <defThread+0x81c>)
 80039b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80039ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039be:	4982      	ldr	r1, [pc, #520]	; (8003bc8 <defThread+0x820>)
 80039c0:	4618      	mov	r0, r3
 80039c2:	f00d fd07 	bl	80113d4 <siprintf>
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 80039c6:	4b81      	ldr	r3, [pc, #516]	; (8003bcc <defThread+0x824>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	785b      	ldrb	r3, [r3, #1]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80039d6:	b29c      	uxth	r4, r3
							   mkLineCenter(screen, ST7789_WIDTH / fntKey->width),
 80039d8:	4b7c      	ldr	r3, [pc, #496]	; (8003bcc <defThread+0x824>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	23f0      	movs	r3, #240	; 0xf0
 80039e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039ec:	4611      	mov	r1, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 f8ba 	bl	8004b68 <mkLineCenter>
 80039f4:	4601      	mov	r1, r0
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 80039f6:	4b75      	ldr	r3, [pc, #468]	; (8003bcc <defThread+0x824>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2200      	movs	r2, #0
 80039fc:	9202      	str	r2, [sp, #8]
 80039fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003a02:	9201      	str	r2, [sp, #4]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	9200      	str	r2, [sp, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	460a      	mov	r2, r1
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	2000      	movs	r0, #0
 8003a10:	f001 f854 	bl	8004abc <ST7789_WriteString>
							   *fntKey,
							   CYAN,
							   BLACK);
			//
			if (dbg > logOn)
 8003a14:	4b68      	ldr	r3, [pc, #416]	; (8003bb8 <defThread+0x810>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d91e      	bls.n	8003a5a <defThread+0x6b2>
				Report(1, "Command(%u.%u): '%s'%s", qcmd.cmd, qcmd.attr, str_cmds[qcmd.cmd], eol);
 8003a1c:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003a20:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	4619      	mov	r1, r3
 8003a28:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003a2c:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003a30:	785b      	ldrb	r3, [r3, #1]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003a38:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	4b60      	ldr	r3, [pc, #384]	; (8003bc4 <defThread+0x81c>)
 8003a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a46:	4a5d      	ldr	r2, [pc, #372]	; (8003bbc <defThread+0x814>)
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	9201      	str	r2, [sp, #4]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	4603      	mov	r3, r0
 8003a50:	460a      	mov	r2, r1
 8003a52:	495f      	ldr	r1, [pc, #380]	; (8003bd0 <defThread+0x828>)
 8003a54:	2001      	movs	r0, #1
 8003a56:	f7ff f887 	bl	8002b68 <Report>
			//
			nand_show = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
			switch (qcmd.cmd) {
 8003a60:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003a64:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b0a      	cmp	r3, #10
 8003a6c:	f200 83c3 	bhi.w	80041f6 <defThread+0xe4e>
 8003a70:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <defThread+0x6d0>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003af9 	.word	0x08003af9
 8003a7c:	08003b01 	.word	0x08003b01
 8003a80:	08003bf9 	.word	0x08003bf9
 8003a84:	08003cb3 	.word	0x08003cb3
 8003a88:	08003e07 	.word	0x08003e07
 8003a8c:	08003cdd 	.word	0x08003cdd
 8003a90:	08003d9f 	.word	0x08003d9f
 8003a94:	08003e07 	.word	0x08003e07
 8003a98:	0800402f 	.word	0x0800402f
 8003a9c:	08003b3b 	.word	0x08003b3b
 8003aa0:	08003aa5 	.word	0x08003aa5
				case cmdHelp:
					sprintf(stx, "Support next commands:%s", eol);
 8003aa4:	4b45      	ldr	r3, [pc, #276]	; (8003bbc <defThread+0x814>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	494a      	ldr	r1, [pc, #296]	; (8003bd4 <defThread+0x82c>)
 8003aac:	484a      	ldr	r0, [pc, #296]	; (8003bd8 <defThread+0x830>)
 8003aae:	f00d fc91 	bl	80113d4 <siprintf>
					for (uint8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t'%s'%s", s_cmds[i], eol);
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
 8003ab8:	e014      	b.n	8003ae4 <defThread+0x73c>
 8003aba:	4847      	ldr	r0, [pc, #284]	; (8003bd8 <defThread+0x830>)
 8003abc:	f7fc fb88 	bl	80001d0 <strlen>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4a45      	ldr	r2, [pc, #276]	; (8003bd8 <defThread+0x830>)
 8003ac4:	1898      	adds	r0, r3, r2
 8003ac6:	f897 348b 	ldrb.w	r3, [r7, #1163]	; 0x48b
 8003aca:	4a44      	ldr	r2, [pc, #272]	; (8003bdc <defThread+0x834>)
 8003acc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ad0:	4b3a      	ldr	r3, [pc, #232]	; (8003bbc <defThread+0x814>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4942      	ldr	r1, [pc, #264]	; (8003be0 <defThread+0x838>)
 8003ad6:	f00d fc7d 	bl	80113d4 <siprintf>
 8003ada:	f897 348b 	ldrb.w	r3, [r7, #1163]	; 0x48b
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
 8003ae4:	f897 348b 	ldrb.w	r3, [r7, #1163]	; 0x48b
 8003ae8:	2b0a      	cmp	r3, #10
 8003aea:	d9e6      	bls.n	8003aba <defThread+0x712>
					Report(1, "%s", stx);
 8003aec:	4a3a      	ldr	r2, [pc, #232]	; (8003bd8 <defThread+0x830>)
 8003aee:	493d      	ldr	r1, [pc, #244]	; (8003be4 <defThread+0x83c>)
 8003af0:	2001      	movs	r0, #1
 8003af2:	f7ff f839 	bl	8002b68 <Report>
				break;
 8003af6:	e37e      	b.n	80041f6 <defThread+0xe4e>
				case cmdRestart:
					loop = false;
 8003af8:	2300      	movs	r3, #0
 8003afa:	f887 3495 	strb.w	r3, [r7, #1173]	; 0x495
		  		break;
 8003afe:	e37a      	b.n	80041f6 <defThread+0xe4e>
				case cmdEpoch:
					if (!qcmd.attr) {//set date&time
 8003b00:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003b04:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003b08:	785b      	ldrb	r3, [r3, #1]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d105      	bne.n	8003b1a <defThread+0x772>
						set_Date(epoch);
 8003b0e:	4b36      	ldr	r3, [pc, #216]	; (8003be8 <defThread+0x840>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe ff2e 	bl	8002974 <set_Date>
					} else {//show date&time
						sec2str(stx);
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
					}
				break;
 8003b18:	e360      	b.n	80041dc <defThread+0xe34>
						sec2str(stx);
 8003b1a:	482f      	ldr	r0, [pc, #188]	; (8003bd8 <defThread+0x830>)
 8003b1c:	f7fe ff8a 	bl	8002a34 <sec2str>
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
 8003b20:	4b25      	ldr	r3, [pc, #148]	; (8003bb8 <defThread+0x810>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8359 	beq.w	80041dc <defThread+0xe34>
 8003b2a:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <defThread+0x814>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <defThread+0x830>)
 8003b30:	492e      	ldr	r1, [pc, #184]	; (8003bec <defThread+0x844>)
 8003b32:	2000      	movs	r0, #0
 8003b34:	f7ff f818 	bl	8002b68 <Report>
				break;
 8003b38:	e350      	b.n	80041dc <defThread+0xe34>
				case cmdLog:
					if (qcmd.attr < logNone) {
 8003b3a:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003b3e:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003b42:	785b      	ldrb	r3, [r3, #1]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d81e      	bhi.n	8003b86 <defThread+0x7de>
						Report(1, "Set log level to '%s'(%u)%s", get_logName(qcmd.attr), qcmd.attr, eol);
 8003b48:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003b4c:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003b50:	785b      	ldrb	r3, [r3, #1]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fda8 	bl	80026a8 <get_logName>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003b5e:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003b62:	785b      	ldrb	r3, [r3, #1]
 8003b64:	4619      	mov	r1, r3
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <defThread+0x814>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4920      	ldr	r1, [pc, #128]	; (8003bf0 <defThread+0x848>)
 8003b70:	2001      	movs	r0, #1
 8003b72:	f7fe fff9 	bl	8002b68 <Report>
						dbg = qcmd.attr;
 8003b76:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003b7a:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003b7e:	785a      	ldrb	r2, [r3, #1]
 8003b80:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <defThread+0x810>)
 8003b82:	701a      	strb	r2, [r3, #0]
					} else {
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
					}
				break;
 8003b84:	e337      	b.n	80041f6 <defThread+0xe4e>
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
 8003b86:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <defThread+0x810>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe fd8c 	bl	80026a8 <get_logName>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <defThread+0x810>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	4619      	mov	r1, r3
 8003b98:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <defThread+0x814>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4914      	ldr	r1, [pc, #80]	; (8003bf4 <defThread+0x84c>)
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	f7fe ffe0 	bl	8002b68 <Report>
				break;
 8003ba8:	e325      	b.n	80041f6 <defThread+0xe4e>
 8003baa:	bf00      	nop
 8003bac:	20000364 	.word	0x20000364
 8003bb0:	200023c0 	.word	0x200023c0
 8003bb4:	2000036c 	.word	0x2000036c
 8003bb8:	20000068 	.word	0x20000068
 8003bbc:	20000004 	.word	0x20000004
 8003bc0:	0801267c 	.word	0x0801267c
 8003bc4:	20000034 	.word	0x20000034
 8003bc8:	08012688 	.word	0x08012688
 8003bcc:	2000007c 	.word	0x2000007c
 8003bd0:	08012690 	.word	0x08012690
 8003bd4:	080126a8 	.word	0x080126a8
 8003bd8:	200023c4 	.word	0x200023c4
 8003bdc:	20000008 	.word	0x20000008
 8003be0:	080126c4 	.word	0x080126c4
 8003be4:	08012364 	.word	0x08012364
 8003be8:	20000064 	.word	0x20000064
 8003bec:	080126cc 	.word	0x080126cc
 8003bf0:	080126e8 	.word	0x080126e8
 8003bf4:	08012704 	.word	0x08012704
				case cmdRead:
				{
					uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 8003bf8:	4b9a      	ldr	r3, [pc, #616]	; (8003e64 <defThread+0xabc>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b9a      	ldr	r3, [pc, #616]	; (8003e68 <defThread+0xac0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	1ad2      	subs	r2, r2, r3
 8003c02:	4b9a      	ldr	r3, [pc, #616]	; (8003e6c <defThread+0xac4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0a:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
					NAND_AddressTypeDef addr = {
 8003c0e:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003c18:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8003c1c:	801a      	strh	r2, [r3, #0]
 8003c1e:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003c22:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8003c26:	2201      	movs	r2, #1
 8003c28:	805a      	strh	r2, [r3, #2]
						.Page = p,//(p % (chipConf.BlockSize / chipConf.PageSize)),
						.Plane = 1,
						.Block = nand_PageToBlock(p)
 8003c2a:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 8003c2e:	f7fd fbc7 	bl	80013c0 <nand_PageToBlock>
 8003c32:	4603      	mov	r3, r0
					NAND_AddressTypeDef addr = {
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003c3a:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8003c3e:	809a      	strh	r2, [r3, #4]
					};
					if (dbg != logOff) Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8003c40:	4b8b      	ldr	r3, [pc, #556]	; (8003e70 <defThread+0xac8>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01a      	beq.n	8003c7e <defThread+0x8d6>
 8003c48:	4b86      	ldr	r3, [pc, #536]	; (8003e64 <defThread+0xabc>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	4b89      	ldr	r3, [pc, #548]	; (8003e74 <defThread+0xacc>)
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	461c      	mov	r4, r3
							  	  	  	  	  	  nandAdr, nandLen, addr.Page, addr.Block, eol);
 8003c52:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003c56:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8003c5a:	881b      	ldrh	r3, [r3, #0]
					if (dbg != logOff) Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8003c5c:	4619      	mov	r1, r3
							  	  	  	  	  	  nandAdr, nandLen, addr.Page, addr.Block, eol);
 8003c5e:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003c62:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8003c66:	889b      	ldrh	r3, [r3, #4]
					if (dbg != logOff) Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8003c68:	4618      	mov	r0, r3
 8003c6a:	4b83      	ldr	r3, [pc, #524]	; (8003e78 <defThread+0xad0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	9302      	str	r3, [sp, #8]
 8003c70:	9001      	str	r0, [sp, #4]
 8003c72:	9100      	str	r1, [sp, #0]
 8003c74:	4623      	mov	r3, r4
 8003c76:	4981      	ldr	r1, [pc, #516]	; (8003e7c <defThread+0xad4>)
 8003c78:	2001      	movs	r0, #1
 8003c7a:	f7fe ff75 	bl	8002b68 <Report>
					//if (rdBuf) {
						if (NAND_Read_Page_8b(nandPort, &addr, rdBuf, 1) == HAL_OK) {
 8003c7e:	4b80      	ldr	r3, [pc, #512]	; (8003e80 <defThread+0xad8>)
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003c86:	2301      	movs	r3, #1
 8003c88:	4a7e      	ldr	r2, [pc, #504]	; (8003e84 <defThread+0xadc>)
 8003c8a:	f7fd fc35 	bl	80014f8 <NAND_Read_Page_8b>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d106      	bne.n	8003ca2 <defThread+0x8fa>
							nand_show = 1;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
							readed = true;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f887 349a 	strb.w	r3, [r7, #1178]	; 0x49a
						} else devError |= devNAND;
					//}
				}
				break;
 8003ca0:	e2a9      	b.n	80041f6 <defThread+0xe4e>
						} else devError |= devNAND;
 8003ca2:	4b79      	ldr	r3, [pc, #484]	; (8003e88 <defThread+0xae0>)
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	f043 0320 	orr.w	r3, r3, #32
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	4b76      	ldr	r3, [pc, #472]	; (8003e88 <defThread+0xae0>)
 8003cae:	801a      	strh	r2, [r3, #0]
				break;
 8003cb0:	e2a1      	b.n	80041f6 <defThread+0xe4e>
				case cmdNext:
					if (dbg != logOff) Report(1, "Read next nand adr:0x%X len:%lu%s", nandAdr, nandLen, eol);
 8003cb2:	4b6f      	ldr	r3, [pc, #444]	; (8003e70 <defThread+0xac8>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00c      	beq.n	8003cd4 <defThread+0x92c>
 8003cba:	4b6a      	ldr	r3, [pc, #424]	; (8003e64 <defThread+0xabc>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b6d      	ldr	r3, [pc, #436]	; (8003e74 <defThread+0xacc>)
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4b6c      	ldr	r3, [pc, #432]	; (8003e78 <defThread+0xad0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	496f      	ldr	r1, [pc, #444]	; (8003e8c <defThread+0xae4>)
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f7fe ff4a 	bl	8002b68 <Report>
					//if (rdBuf)
						nand_show = 2;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
				break;
 8003cda:	e28c      	b.n	80041f6 <defThread+0xe4e>
				case cmdErase:
					clr.Page = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8a7 3460 	strh.w	r3, [r7, #1120]	; 0x460
					clr.Block = 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f8a7 3464 	strh.w	r3, [r7, #1124]	; 0x464
					clr.Plane = 1;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f8a7 3462 	strh.w	r3, [r7, #1122]	; 0x462
					if (!qcmd.attr) {
 8003cee:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003cf2:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003cf6:	785b      	ldrb	r3, [r3, #1]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d13d      	bne.n	8003d78 <defThread+0x9d0>
						clr.Page = nand_BlockToPage(nandBlk);
 8003cfc:	4b64      	ldr	r3, [pc, #400]	; (8003e90 <defThread+0xae8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fd fb73 	bl	80013ec <nand_BlockToPage>
 8003d06:	4603      	mov	r3, r0
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	f8a7 3460 	strh.w	r3, [r7, #1120]	; 0x460
						clr.Block = nandBlk;
 8003d0e:	4b60      	ldr	r3, [pc, #384]	; (8003e90 <defThread+0xae8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	f8a7 3464 	strh.w	r3, [r7, #1124]	; 0x464
						if (NAND_Erase_Block(nandPort, &clr, 1) != HAL_OK) {
 8003d18:	4b59      	ldr	r3, [pc, #356]	; (8003e80 <defThread+0xad8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8003d20:	2201      	movs	r2, #1
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fd fde4 	bl	80018f0 <NAND_Erase_Block>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d015      	beq.n	8003d5a <defThread+0x9b2>
							devError |= devNAND;
 8003d2e:	4b56      	ldr	r3, [pc, #344]	; (8003e88 <defThread+0xae0>)
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	f043 0320 	orr.w	r3, r3, #32
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	4b53      	ldr	r3, [pc, #332]	; (8003e88 <defThread+0xae0>)
 8003d3a:	801a      	strh	r2, [r3, #0]
							if (dbg != logOff) Report(1, "Erase nand block:%lu Error !%s", clr.Block, eol);
 8003d3c:	4b4c      	ldr	r3, [pc, #304]	; (8003e70 <defThread+0xac8>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 824d 	beq.w	80041e0 <defThread+0xe38>
 8003d46:	f8b7 3464 	ldrh.w	r3, [r7, #1124]	; 0x464
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4b4a      	ldr	r3, [pc, #296]	; (8003e78 <defThread+0xad0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4950      	ldr	r1, [pc, #320]	; (8003e94 <defThread+0xaec>)
 8003d52:	2001      	movs	r0, #1
 8003d54:	f7fe ff08 	bl	8002b68 <Report>
						iBlk = 0;
						next_block_erase = 1;
						if (dbg != logOff) Report(1, "Erase chip ");
						stik = HAL_GetTick();
					}
				break;
 8003d58:	e242      	b.n	80041e0 <defThread+0xe38>
							if (dbg != logOff) Report(1, "Erase nand block:%lu Ok !%s", clr.Block, eol);
 8003d5a:	4b45      	ldr	r3, [pc, #276]	; (8003e70 <defThread+0xac8>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 823e 	beq.w	80041e0 <defThread+0xe38>
 8003d64:	f8b7 3464 	ldrh.w	r3, [r7, #1124]	; 0x464
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b43      	ldr	r3, [pc, #268]	; (8003e78 <defThread+0xad0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	494a      	ldr	r1, [pc, #296]	; (8003e98 <defThread+0xaf0>)
 8003d70:	2001      	movs	r0, #1
 8003d72:	f7fe fef9 	bl	8002b68 <Report>
				break;
 8003d76:	e233      	b.n	80041e0 <defThread+0xe38>
						iBlk = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
						next_block_erase = 1;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
						if (dbg != logOff) Report(1, "Erase chip ");
 8003d84:	4b3a      	ldr	r3, [pc, #232]	; (8003e70 <defThread+0xac8>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <defThread+0x9ec>
 8003d8c:	4943      	ldr	r1, [pc, #268]	; (8003e9c <defThread+0xaf4>)
 8003d8e:	2001      	movs	r0, #1
 8003d90:	f7fe feea 	bl	8002b68 <Report>
						stik = HAL_GetTick();
 8003d94:	f001 fa9e 	bl	80052d4 <HAL_GetTick>
 8003d98:	f8c7 049c 	str.w	r0, [r7, #1180]	; 0x49c
				break;
 8003d9c:	e220      	b.n	80041e0 <defThread+0xe38>
				case cmdCheck:
				{
					uint32_t b = nand_PageToBlock(nandPage);
 8003d9e:	4b40      	ldr	r3, [pc, #256]	; (8003ea0 <defThread+0xaf8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fd fb0c 	bl	80013c0 <nand_PageToBlock>
 8003da8:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
					if (!pageIsEmpty(nandPage)) {
 8003dac:	4b3c      	ldr	r3, [pc, #240]	; (8003ea0 <defThread+0xaf8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fd fe29 	bl	8001a08 <pageIsEmpty>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f083 0301 	eor.w	r3, r3, #1
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d010      	beq.n	8003de4 <defThread+0xa3c>
						if (dbg != logOff) Report(1, "Page:%lu in block:%lu Not empty%s", nandPage, b, eol);
 8003dc2:	4b2b      	ldr	r3, [pc, #172]	; (8003e70 <defThread+0xac8>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 820c 	beq.w	80041e4 <defThread+0xe3c>
 8003dcc:	4b34      	ldr	r3, [pc, #208]	; (8003ea0 <defThread+0xaf8>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <defThread+0xad0>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003dda:	4932      	ldr	r1, [pc, #200]	; (8003ea4 <defThread+0xafc>)
 8003ddc:	2001      	movs	r0, #1
 8003dde:	f7fe fec3 	bl	8002b68 <Report>
					} else {
						if (dbg != logOff) Report(1, "Page:%lu in block:%lu is Empty%s", nandPage, b, eol);
					}
				}
				break;
 8003de2:	e1ff      	b.n	80041e4 <defThread+0xe3c>
						if (dbg != logOff) Report(1, "Page:%lu in block:%lu is Empty%s", nandPage, b, eol);
 8003de4:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <defThread+0xac8>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 81fb 	beq.w	80041e4 <defThread+0xe3c>
 8003dee:	4b2c      	ldr	r3, [pc, #176]	; (8003ea0 <defThread+0xaf8>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4b21      	ldr	r3, [pc, #132]	; (8003e78 <defThread+0xad0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003dfc:	492a      	ldr	r1, [pc, #168]	; (8003ea8 <defThread+0xb00>)
 8003dfe:	2001      	movs	r0, #1
 8003e00:	f7fe feb2 	bl	8002b68 <Report>
				break;
 8003e04:	e1ee      	b.n	80041e4 <defThread+0xe3c>
				case cmdWrite:
				case cmdArea:
					//if (wrBuf) {
						//
						if (qcmd.cmd == cmdArea) {
 8003e06:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003e0a:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b07      	cmp	r3, #7
 8003e12:	d14f      	bne.n	8003eb4 <defThread+0xb0c>
							if (!areaIsEmpty(nandAdr, nandLen)) {
 8003e14:	4b13      	ldr	r3, [pc, #76]	; (8003e64 <defThread+0xabc>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a16      	ldr	r2, [pc, #88]	; (8003e74 <defThread+0xacc>)
 8003e1a:	8812      	ldrh	r2, [r2, #0]
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fd feca 	bl	8001bb8 <areaIsEmpty>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f083 0301 	eor.w	r3, r3, #1
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00c      	beq.n	8003e4a <defThread+0xaa2>
								if (dbg != logOff) Report(1, "Area Not empty%s", eol);
 8003e30:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <defThread+0xac8>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 81d7 	beq.w	80041e8 <defThread+0xe40>
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <defThread+0xad0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	491a      	ldr	r1, [pc, #104]	; (8003eac <defThread+0xb04>)
 8003e42:	2001      	movs	r0, #1
 8003e44:	f7fe fe90 	bl	8002b68 <Report>
							} else {
								if (dbg != logOff) Report(1, "Area is Empty%s", eol);
							}
							break;
 8003e48:	e1ce      	b.n	80041e8 <defThread+0xe40>
								if (dbg != logOff) Report(1, "Area is Empty%s", eol);
 8003e4a:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <defThread+0xac8>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 81ca 	beq.w	80041e8 <defThread+0xe40>
 8003e54:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <defThread+0xad0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4915      	ldr	r1, [pc, #84]	; (8003eb0 <defThread+0xb08>)
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	f7fe fe83 	bl	8002b68 <Report>
							break;
 8003e62:	e1c1      	b.n	80041e8 <defThread+0xe40>
 8003e64:	2000138c 	.word	0x2000138c
 8003e68:	20001388 	.word	0x20001388
 8003e6c:	200013a8 	.word	0x200013a8
 8003e70:	20000068 	.word	0x20000068
 8003e74:	20001390 	.word	0x20001390
 8003e78:	20000004 	.word	0x20000004
 8003e7c:	08012724 	.word	0x08012724
 8003e80:	20000078 	.word	0x20000078
 8003e84:	200013c0 	.word	0x200013c0
 8003e88:	2000036c 	.word	0x2000036c
 8003e8c:	08012754 	.word	0x08012754
 8003e90:	20001394 	.word	0x20001394
 8003e94:	08012778 	.word	0x08012778
 8003e98:	08012798 	.word	0x08012798
 8003e9c:	080127b4 	.word	0x080127b4
 8003ea0:	20001398 	.word	0x20001398
 8003ea4:	080127c0 	.word	0x080127c0
 8003ea8:	080127e4 	.word	0x080127e4
 8003eac:	08012808 	.word	0x08012808
 8003eb0:	0801281c 	.word	0x0801281c
						}
						//
						uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 8003eb4:	4b87      	ldr	r3, [pc, #540]	; (80040d4 <defThread+0xd2c>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b87      	ldr	r3, [pc, #540]	; (80040d8 <defThread+0xd30>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	1ad2      	subs	r2, r2, r3
 8003ebe:	4b87      	ldr	r3, [pc, #540]	; (80040dc <defThread+0xd34>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
						uint32_t b = nand_PageToBlock(p);
 8003eca:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003ece:	f7fd fa77 	bl	80013c0 <nand_PageToBlock>
 8003ed2:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
						NAND_AddressTypeDef addr = {
 8003ed6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003ee0:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003ee4:	801a      	strh	r2, [r3, #0]
 8003ee6:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003eea:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003eee:	2201      	movs	r2, #1
 8003ef0:	805a      	strh	r2, [r3, #2]
 8003ef2:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003efc:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003f00:	809a      	strh	r2, [r3, #4]
							.Page = p,//(p % (chipConf.BlockSize / chipConf.PageSize)),
							.Plane = 1,
							.Block = b
						};
						if (!pageIsEmpty(p)) {//nandPage)) {
 8003f02:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003f06:	f7fd fd7f 	bl	8001a08 <pageIsEmpty>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f083 0301 	eor.w	r3, r3, #1
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d01c      	beq.n	8003f50 <defThread+0xba8>
							if (NAND_Erase_Block(nandPort, &addr, 1) != HAL_OK) devError |= devNAND;
 8003f16:	4b72      	ldr	r3, [pc, #456]	; (80040e0 <defThread+0xd38>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003f1e:	2201      	movs	r2, #1
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fd fce5 	bl	80018f0 <NAND_Erase_Block>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d006      	beq.n	8003f3a <defThread+0xb92>
 8003f2c:	4b6d      	ldr	r3, [pc, #436]	; (80040e4 <defThread+0xd3c>)
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	f043 0320 	orr.w	r3, r3, #32
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	4b6b      	ldr	r3, [pc, #428]	; (80040e4 <defThread+0xd3c>)
 8003f38:	801a      	strh	r2, [r3, #0]
							sprintf(stx, "Erase nand block:%u done", addr.Block);
 8003f3a:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003f3e:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003f42:	889b      	ldrh	r3, [r3, #4]
 8003f44:	461a      	mov	r2, r3
 8003f46:	4968      	ldr	r1, [pc, #416]	; (80040e8 <defThread+0xd40>)
 8003f48:	4868      	ldr	r0, [pc, #416]	; (80040ec <defThread+0xd44>)
 8003f4a:	f00d fa43 	bl	80113d4 <siprintf>
 8003f4e:	e009      	b.n	8003f64 <defThread+0xbbc>
						} else {
							sprintf(stx, "Block:%u is Empty", addr.Block);
 8003f50:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003f54:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003f58:	889b      	ldrh	r3, [r3, #4]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4964      	ldr	r1, [pc, #400]	; (80040f0 <defThread+0xd48>)
 8003f5e:	4863      	ldr	r0, [pc, #396]	; (80040ec <defThread+0xd44>)
 8003f60:	f00d fa38 	bl	80113d4 <siprintf>
						}
						if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8003f64:	4b63      	ldr	r3, [pc, #396]	; (80040f4 <defThread+0xd4c>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d006      	beq.n	8003f7a <defThread+0xbd2>
 8003f6c:	4b62      	ldr	r3, [pc, #392]	; (80040f8 <defThread+0xd50>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a5e      	ldr	r2, [pc, #376]	; (80040ec <defThread+0xd44>)
 8003f72:	4962      	ldr	r1, [pc, #392]	; (80040fc <defThread+0xd54>)
 8003f74:	2001      	movs	r0, #1
 8003f76:	f7fe fdf7 	bl	8002b68 <Report>
						memset(wrBuf, 0xff, chipConf.PageSize);
 8003f7a:	4b58      	ldr	r3, [pc, #352]	; (80040dc <defThread+0xd34>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	21ff      	movs	r1, #255	; 0xff
 8003f82:	485f      	ldr	r0, [pc, #380]	; (8004100 <defThread+0xd58>)
 8003f84:	f00d f910 	bl	80111a8 <memset>
						uint32_t ofs = (nandAdr - devAdr) % chipConf.PageSize;
 8003f88:	4b52      	ldr	r3, [pc, #328]	; (80040d4 <defThread+0xd2c>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	4b52      	ldr	r3, [pc, #328]	; (80040d8 <defThread+0xd30>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	4a52      	ldr	r2, [pc, #328]	; (80040dc <defThread+0xd34>)
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f9a:	fb01 f202 	mul.w	r2, r1, r2
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
						memset(wrBuf + ofs, nandByte, nandLen);
 8003fa4:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8003fa8:	4a55      	ldr	r2, [pc, #340]	; (8004100 <defThread+0xd58>)
 8003faa:	4413      	add	r3, r2
 8003fac:	4a55      	ldr	r2, [pc, #340]	; (8004104 <defThread+0xd5c>)
 8003fae:	7812      	ldrb	r2, [r2, #0]
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4a55      	ldr	r2, [pc, #340]	; (8004108 <defThread+0xd60>)
 8003fb4:	8812      	ldrh	r2, [r2, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f00d f8f6 	bl	80111a8 <memset>
						//showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
						if (NAND_Write_Page_8b(nandPort, &addr, wrBuf, 1) != HAL_OK) devError |= devNAND;
 8003fbc:	4b48      	ldr	r3, [pc, #288]	; (80040e0 <defThread+0xd38>)
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	4a4e      	ldr	r2, [pc, #312]	; (8004100 <defThread+0xd58>)
 8003fc8:	f7fd fb96 	bl	80016f8 <NAND_Write_Page_8b>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d006      	beq.n	8003fe0 <defThread+0xc38>
 8003fd2:	4b44      	ldr	r3, [pc, #272]	; (80040e4 <defThread+0xd3c>)
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	f043 0320 	orr.w	r3, r3, #32
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	4b41      	ldr	r3, [pc, #260]	; (80040e4 <defThread+0xd3c>)
 8003fde:	801a      	strh	r2, [r3, #0]
						if (dbg != logOff) Report(1, "Write nand adr:0x%X ofs:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 8003fe0:	4b44      	ldr	r3, [pc, #272]	; (80040f4 <defThread+0xd4c>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 8101 	beq.w	80041ec <defThread+0xe44>
 8003fea:	4b3a      	ldr	r3, [pc, #232]	; (80040d4 <defThread+0xd2c>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b45      	ldr	r3, [pc, #276]	; (8004104 <defThread+0xd5c>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4b44      	ldr	r3, [pc, #272]	; (8004108 <defThread+0xd60>)
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
							      	  	  	  	  	  nandAdr, ofs, nandByte, nandLen, addr.Page, addr.Block, eol);
 8003ffa:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003ffe:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8004002:	881b      	ldrh	r3, [r3, #0]
						if (dbg != logOff) Report(1, "Write nand adr:0x%X ofs:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 8004004:	461c      	mov	r4, r3
							      	  	  	  	  	  nandAdr, ofs, nandByte, nandLen, addr.Page, addr.Block, eol);
 8004006:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800400a:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800400e:	889b      	ldrh	r3, [r3, #4]
						if (dbg != logOff) Report(1, "Write nand adr:0x%X ofs:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 8004010:	461d      	mov	r5, r3
 8004012:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <defThread+0xd50>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	9304      	str	r3, [sp, #16]
 8004018:	9503      	str	r5, [sp, #12]
 800401a:	9402      	str	r4, [sp, #8]
 800401c:	9001      	str	r0, [sp, #4]
 800401e:	9100      	str	r1, [sp, #0]
 8004020:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8004024:	4939      	ldr	r1, [pc, #228]	; (800410c <defThread+0xd64>)
 8004026:	2001      	movs	r0, #1
 8004028:	f7fe fd9e 	bl	8002b68 <Report>
					//}
				break;
 800402c:	e0de      	b.n	80041ec <defThread+0xe44>
				case cmdSave:
				{
					uint32_t page = (nandAdr - devAdr) / chipConf.PageSize;
 800402e:	4b29      	ldr	r3, [pc, #164]	; (80040d4 <defThread+0xd2c>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4b29      	ldr	r3, [pc, #164]	; (80040d8 <defThread+0xd30>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	1ad2      	subs	r2, r2, r3
 8004038:	4b28      	ldr	r3, [pc, #160]	; (80040dc <defThread+0xd34>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004040:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
					NAND_AddressTypeDef nans = {
						.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),
 8004044:	4b25      	ldr	r3, [pc, #148]	; (80040dc <defThread+0xd34>)
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	4b24      	ldr	r3, [pc, #144]	; (80040dc <defThread+0xd34>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004050:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8004054:	fbb3 f1f2 	udiv	r1, r3, r2
 8004058:	fb01 f202 	mul.w	r2, r1, r2
 800405c:	1a9b      	subs	r3, r3, r2
					NAND_AddressTypeDef nans = {
 800405e:	b29a      	uxth	r2, r3
 8004060:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8004064:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8004068:	801a      	strh	r2, [r3, #0]
 800406a:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800406e:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8004072:	2201      	movs	r2, #1
 8004074:	805a      	strh	r2, [r3, #2]
						.Plane = 1,
						.Block = nand_PageToBlock(page)
 8004076:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 800407a:	f7fd f9a1 	bl	80013c0 <nand_PageToBlock>
 800407e:	4603      	mov	r3, r0
					NAND_AddressTypeDef nans = {
 8004080:	b29a      	uxth	r2, r3
 8004082:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8004086:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 800408a:	809a      	strh	r2, [r3, #4]
					};
					int shift = emptyArea(nandAdr, nandLen, wrBuf, &nans);
 800408c:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <defThread+0xd2c>)
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <defThread+0xd60>)
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	4619      	mov	r1, r3
 8004096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800409a:	4a19      	ldr	r2, [pc, #100]	; (8004100 <defThread+0xd58>)
 800409c:	f7fd fcfa 	bl	8001a94 <emptyArea>
 80040a0:	f8c7 047c 	str.w	r0, [r7, #1148]	; 0x47c
					if (shift == -1) {
 80040a4:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ac:	d132      	bne.n	8004114 <defThread+0xd6c>
						if (dbg != logOff) if (dbg != logOff) Report(1, "Area Not empty. Process not alow%s", eol);
 80040ae:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <defThread+0xd4c>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 809c 	beq.w	80041f0 <defThread+0xe48>
 80040b8:	4b0e      	ldr	r3, [pc, #56]	; (80040f4 <defThread+0xd4c>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8097 	beq.w	80041f0 <defThread+0xe48>
 80040c2:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <defThread+0xd50>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	4911      	ldr	r1, [pc, #68]	; (8004110 <defThread+0xd68>)
 80040ca:	2001      	movs	r0, #1
 80040cc:	f7fe fd4c 	bl	8002b68 <Report>
 80040d0:	e091      	b.n	80041f6 <defThread+0xe4e>
 80040d2:	bf00      	nop
 80040d4:	2000138c 	.word	0x2000138c
 80040d8:	20001388 	.word	0x20001388
 80040dc:	200013a8 	.word	0x200013a8
 80040e0:	20000078 	.word	0x20000078
 80040e4:	2000036c 	.word	0x2000036c
 80040e8:	0801282c 	.word	0x0801282c
 80040ec:	200023c4 	.word	0x200023c4
 80040f0:	08012848 	.word	0x08012848
 80040f4:	20000068 	.word	0x20000068
 80040f8:	20000004 	.word	0x20000004
 80040fc:	080125ec 	.word	0x080125ec
 8004100:	20001bc0 	.word	0x20001bc0
 8004104:	20000084 	.word	0x20000084
 8004108:	20001390 	.word	0x20001390
 800410c:	0801285c 	.word	0x0801285c
 8004110:	080128a4 	.word	0x080128a4
						break;
					} else {
						memset(wrBuf + shift, nandByte, nandLen);
 8004114:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8004118:	4a87      	ldr	r2, [pc, #540]	; (8004338 <defThread+0xf90>)
 800411a:	4413      	add	r3, r2
 800411c:	4a87      	ldr	r2, [pc, #540]	; (800433c <defThread+0xf94>)
 800411e:	7812      	ldrb	r2, [r2, #0]
 8004120:	4611      	mov	r1, r2
 8004122:	4a87      	ldr	r2, [pc, #540]	; (8004340 <defThread+0xf98>)
 8004124:	8812      	ldrh	r2, [r2, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f00d f83e 	bl	80111a8 <memset>
						if (HAL_NAND_Write_Page_8b(nandPort, &nans, wrBuf, 1) != HAL_OK) devError |= devNAND;
 800412c:	4b85      	ldr	r3, [pc, #532]	; (8004344 <defThread+0xf9c>)
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004134:	2301      	movs	r3, #1
 8004136:	4a80      	ldr	r2, [pc, #512]	; (8004338 <defThread+0xf90>)
 8004138:	f002 f8db 	bl	80062f2 <HAL_NAND_Write_Page_8b>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d006      	beq.n	8004150 <defThread+0xda8>
 8004142:	4b81      	ldr	r3, [pc, #516]	; (8004348 <defThread+0xfa0>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	f043 0320 	orr.w	r3, r3, #32
 800414a:	b29a      	uxth	r2, r3
 800414c:	4b7e      	ldr	r3, [pc, #504]	; (8004348 <defThread+0xfa0>)
 800414e:	801a      	strh	r2, [r3, #0]
						//showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
						if (dbg != logOff)
 8004150:	4b7e      	ldr	r3, [pc, #504]	; (800434c <defThread+0xfa4>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d04d      	beq.n	80041f4 <defThread+0xe4c>
							Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
									  ARRAY_ADDRESS(&nans, nandPort),
 8004158:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800415c:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	4619      	mov	r1, r3
 8004164:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8004168:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 800416c:	889b      	ldrh	r3, [r3, #4]
 800416e:	461a      	mov	r2, r3
 8004170:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8004174:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8004178:	885b      	ldrh	r3, [r3, #2]
 800417a:	4618      	mov	r0, r3
 800417c:	4b71      	ldr	r3, [pc, #452]	; (8004344 <defThread+0xf9c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	fb00 f303 	mul.w	r3, r0, r3
 8004186:	4413      	add	r3, r2
 8004188:	4a6e      	ldr	r2, [pc, #440]	; (8004344 <defThread+0xf9c>)
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800418e:	fb02 f303 	mul.w	r3, r2, r3
							Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 8004192:	18ca      	adds	r2, r1, r3
 8004194:	4b6e      	ldr	r3, [pc, #440]	; (8004350 <defThread+0xfa8>)
 8004196:	6819      	ldr	r1, [r3, #0]
 8004198:	4b68      	ldr	r3, [pc, #416]	; (800433c <defThread+0xf94>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	4b68      	ldr	r3, [pc, #416]	; (8004340 <defThread+0xf98>)
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	461c      	mov	r4, r3
									  nandAdr,
									  shift,
									  nandByte,
									  nandLen,
									  nans.Page,
 80041a4:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80041a8:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80041ac:	881b      	ldrh	r3, [r3, #0]
							Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 80041ae:	461d      	mov	r5, r3
									  nans.Block,
 80041b0:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80041b4:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80041b8:	889b      	ldrh	r3, [r3, #4]
							Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 80041ba:	461e      	mov	r6, r3
 80041bc:	4b65      	ldr	r3, [pc, #404]	; (8004354 <defThread+0xfac>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	9305      	str	r3, [sp, #20]
 80041c2:	9604      	str	r6, [sp, #16]
 80041c4:	9503      	str	r5, [sp, #12]
 80041c6:	9402      	str	r4, [sp, #8]
 80041c8:	9001      	str	r0, [sp, #4]
 80041ca:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	460b      	mov	r3, r1
 80041d2:	4961      	ldr	r1, [pc, #388]	; (8004358 <defThread+0xfb0>)
 80041d4:	2001      	movs	r0, #1
 80041d6:	f7fe fcc7 	bl	8002b68 <Report>
									  eol);
					}
				}
				break;
 80041da:	e00b      	b.n	80041f4 <defThread+0xe4c>
				break;
 80041dc:	bf00      	nop
 80041de:	e00a      	b.n	80041f6 <defThread+0xe4e>
				break;
 80041e0:	bf00      	nop
 80041e2:	e008      	b.n	80041f6 <defThread+0xe4e>
				break;
 80041e4:	bf00      	nop
 80041e6:	e006      	b.n	80041f6 <defThread+0xe4e>
							break;
 80041e8:	bf00      	nop
 80041ea:	e004      	b.n	80041f6 <defThread+0xe4e>
				break;
 80041ec:	bf00      	nop
 80041ee:	e002      	b.n	80041f6 <defThread+0xe4e>
						break;
 80041f0:	bf00      	nop
 80041f2:	e000      	b.n	80041f6 <defThread+0xe4e>
				break;
 80041f4:	bf00      	nop
			}
			if (nand_show) {
 80041f6:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00d      	beq.n	800421a <defThread+0xe72>
				showBuf(nand_show, readed, nandAdr, nandLen, rdBuf);
 80041fe:	4b54      	ldr	r3, [pc, #336]	; (8004350 <defThread+0xfa8>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b4f      	ldr	r3, [pc, #316]	; (8004340 <defThread+0xf98>)
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	461c      	mov	r4, r3
 8004208:	f897 149a 	ldrb.w	r1, [r7, #1178]	; 0x49a
 800420c:	f897 049b 	ldrb.w	r0, [r7, #1179]	; 0x49b
 8004210:	4b52      	ldr	r3, [pc, #328]	; (800435c <defThread+0xfb4>)
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	4623      	mov	r3, r4
 8004216:	f7ff f80b 	bl	8003230 <showBuf>
			}
		}

		// Erase all blocks (chipConf.BlockNbr)
		if (next_block_erase) {
 800421a:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 800421e:	2b00      	cmp	r3, #0
 8004220:	d04e      	beq.n	80042c0 <defThread+0xf18>
			clr.Block = iBlk;
 8004222:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8004226:	b29b      	uxth	r3, r3
 8004228:	f8a7 3464 	strh.w	r3, [r7, #1124]	; 0x464
			iBlk++;
 800422c:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8004230:	3301      	adds	r3, #1
 8004232:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
			if (NAND_Erase_Block(nandPort, &clr, 0) != HAL_OK) {
 8004236:	4b43      	ldr	r3, [pc, #268]	; (8004344 <defThread+0xf9c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 800423e:	2200      	movs	r2, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f7fd fb55 	bl	80018f0 <NAND_Erase_Block>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <defThread+0xeba>
				devError |= devNAND;
 800424c:	4b3e      	ldr	r3, [pc, #248]	; (8004348 <defThread+0xfa0>)
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	f043 0320 	orr.w	r3, r3, #32
 8004254:	b29a      	uxth	r2, r3
 8004256:	4b3c      	ldr	r3, [pc, #240]	; (8004348 <defThread+0xfa0>)
 8004258:	801a      	strh	r2, [r3, #0]
				next_block_erase = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
 8004260:	e012      	b.n	8004288 <defThread+0xee0>
			} else {
				if (!(iBlk % 16)) Report(0, ".");
 8004262:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	2b00      	cmp	r3, #0
 800426c:	d103      	bne.n	8004276 <defThread+0xece>
 800426e:	493c      	ldr	r1, [pc, #240]	; (8004360 <defThread+0xfb8>)
 8004270:	2000      	movs	r0, #0
 8004272:	f7fe fc79 	bl	8002b68 <Report>
				if (iBlk >= chipConf.BlockNbr) next_block_erase = 0;
 8004276:	4b3b      	ldr	r3, [pc, #236]	; (8004364 <defThread+0xfbc>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <defThread+0xee0>
 8004282:	2300      	movs	r3, #0
 8004284:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
			}
			if (!next_block_erase) {
 8004288:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 800428c:	2b00      	cmp	r3, #0
 800428e:	d117      	bne.n	80042c0 <defThread+0xf18>
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s", iBlk, (HAL_GetTick() - stik) / 1000, eol);
 8004290:	4b2e      	ldr	r3, [pc, #184]	; (800434c <defThread+0xfa4>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d013      	beq.n	80042c0 <defThread+0xf18>
 8004298:	f001 f81c 	bl	80052d4 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	4a30      	ldr	r2, [pc, #192]	; (8004368 <defThread+0xfc0>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	099a      	lsrs	r2, r3, #6
 80042ac:	4b29      	ldr	r3, [pc, #164]	; (8004354 <defThread+0xfac>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	4613      	mov	r3, r2
 80042b4:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 80042b8:	492c      	ldr	r1, [pc, #176]	; (800436c <defThread+0xfc4>)
 80042ba:	2000      	movs	r0, #0
 80042bc:	f7fe fc54 	bl	8002b68 <Report>
			}
		}
		//
		osDelay(5);
 80042c0:	2005      	movs	r0, #5
 80042c2:	f009 fa53 	bl	800d76c <osDelay>
	while (loop) {
 80042c6:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f47f aa6c 	bne.w	80037a8 <defThread+0x400>
#ifdef SET_FAT_FS
	/*if (dir_open) {
		dirClose(dirName, &dir);
		dir_open = false;
	}*/
	if (mnt) {
 80042d0:	4b27      	ldr	r3, [pc, #156]	; (8004370 <defThread+0xfc8>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d014      	beq.n	8004302 <defThread+0xf5a>
		f_mount(NULL, USERPath, 1);
 80042d8:	2201      	movs	r2, #1
 80042da:	4926      	ldr	r1, [pc, #152]	; (8004374 <defThread+0xfcc>)
 80042dc:	2000      	movs	r0, #0
 80042de:	f007 fcc9 	bl	800bc74 <f_mount>
		mnt = false;
 80042e2:	4b23      	ldr	r3, [pc, #140]	; (8004370 <defThread+0xfc8>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
		if (dbg != logOff) Report(1, "Umount drive '%.*s'%s", sizeof(USERPath), USERPath, eol);
 80042e8:	4b18      	ldr	r3, [pc, #96]	; (800434c <defThread+0xfa4>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d008      	beq.n	8004302 <defThread+0xf5a>
 80042f0:	4b18      	ldr	r3, [pc, #96]	; (8004354 <defThread+0xfac>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	4b1f      	ldr	r3, [pc, #124]	; (8004374 <defThread+0xfcc>)
 80042f8:	2204      	movs	r2, #4
 80042fa:	491f      	ldr	r1, [pc, #124]	; (8004378 <defThread+0xfd0>)
 80042fc:	2001      	movs	r0, #1
 80042fe:	f7fe fc33 	bl	8002b68 <Report>
	}
#endif

	if (dbg != logOff) Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8004302:	4b12      	ldr	r3, [pc, #72]	; (800434c <defThread+0xfa4>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d011      	beq.n	800432e <defThread+0xf86>
 800430a:	4b1c      	ldr	r3, [pc, #112]	; (800437c <defThread+0xfd4>)
 800430c:	681c      	ldr	r4, [r3, #0]
 800430e:	f00c fd31 	bl	8010d74 <xPortGetFreeHeapSize>
 8004312:	4602      	mov	r2, r0
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <defThread+0xfac>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	9302      	str	r3, [sp, #8]
 800431a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800431e:	9301      	str	r3, [sp, #4]
 8004320:	9200      	str	r2, [sp, #0]
 8004322:	4b17      	ldr	r3, [pc, #92]	; (8004380 <defThread+0xfd8>)
 8004324:	4622      	mov	r2, r4
 8004326:	4917      	ldr	r1, [pc, #92]	; (8004384 <defThread+0xfdc>)
 8004328:	2001      	movs	r0, #1
 800432a:	f7fe fc1d 	bl	8002b68 <Report>
	osDelay(250);
 800432e:	20fa      	movs	r0, #250	; 0xfa
 8004330:	f009 fa1c 	bl	800d76c <osDelay>

	NVIC_SystemReset();
 8004334:	f7fc fc7c 	bl	8000c30 <__NVIC_SystemReset>
 8004338:	20001bc0 	.word	0x20001bc0
 800433c:	20000084 	.word	0x20000084
 8004340:	20001390 	.word	0x20001390
 8004344:	20000078 	.word	0x20000078
 8004348:	2000036c 	.word	0x2000036c
 800434c:	20000068 	.word	0x20000068
 8004350:	2000138c 	.word	0x2000138c
 8004354:	20000004 	.word	0x20000004
 8004358:	080128c8 	.word	0x080128c8
 800435c:	200013c0 	.word	0x200013c0
 8004360:	08012920 	.word	0x08012920
 8004364:	200013a8 	.word	0x200013a8
 8004368:	10624dd3 	.word	0x10624dd3
 800436c:	08012924 	.word	0x08012924
 8004370:	20003428 	.word	0x20003428
 8004374:	20003c88 	.word	0x20003c88
 8004378:	0801293c 	.word	0x0801293c
 800437c:	20000000 	.word	0x20000000
 8004380:	08014bcc 	.word	0x08014bcc
 8004384:	08012954 	.word	0x08012954

08004388 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004388:	b5b0      	push	{r4, r5, r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a10      	ldr	r2, [pc, #64]	; (80043d8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d102      	bne.n	80043a0 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800439a:	f000 ff87 	bl	80052ac <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 800439e:	e016      	b.n	80043ce <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a8:	d111      	bne.n	80043ce <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 80043aa:	f7fe faa5 	bl	80028f8 <get_msCounter>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	f002 0403 	and.w	r4, r2, #3
 80043b6:	2500      	movs	r5, #0
 80043b8:	1ee3      	subs	r3, r4, #3
 80043ba:	432b      	orrs	r3, r5
 80043bc:	d105      	bne.n	80043ca <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 80043be:	f7fe fa8d 	bl	80028dc <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 80043c2:	2180      	movs	r1, #128	; 0x80
 80043c4:	4805      	ldr	r0, [pc, #20]	; (80043dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80043c6:	f001 fe4e 	bl	8006066 <HAL_GPIO_TogglePin>
	  inc_msCounter();
 80043ca:	f7fe faa3 	bl	8002914 <inc_msCounter>
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bdb0      	pop	{r4, r5, r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40020800 	.word	0x40020800

080043e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	devError |= devSYS;
 80043e6:	4b11      	ldr	r3, [pc, #68]	; (800442c <Error_Handler+0x4c>)
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	4b0e      	ldr	r3, [pc, #56]	; (800442c <Error_Handler+0x4c>)
 80043f2:	801a      	strh	r2, [r3, #0]

	int8_t cnt = 10;
 80043f4:	230a      	movs	r3, #10
 80043f6:	71fb      	strb	r3, [r7, #7]
	while (--cnt) {
 80043f8:	e008      	b.n	800440c <Error_Handler+0x2c>
		errLedOn(true);
 80043fa:	2001      	movs	r0, #1
 80043fc:	f7fe fa46 	bl	800288c <errLedOn>
		errLedOn(false);
 8004400:	2000      	movs	r0, #0
 8004402:	f7fe fa43 	bl	800288c <errLedOn>
		HAL_Delay(150);
 8004406:	2096      	movs	r0, #150	; 0x96
 8004408:	f000 ff70 	bl	80052ec <HAL_Delay>
	while (--cnt) {
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	3b01      	subs	r3, #1
 8004410:	b2db      	uxtb	r3, r3
 8004412:	71fb      	strb	r3, [r7, #7]
 8004414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ee      	bne.n	80043fa <Error_Handler+0x1a>
	}
	errLedOn(true);
 800441c:	2001      	movs	r0, #1
 800441e:	f7fe fa35 	bl	800288c <errLedOn>

  /* USER CODE END Error_Handler_Debug */
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	2000036c 	.word	0x2000036c

08004430 <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 800443a:	2200      	movs	r2, #0
 800443c:	2104      	movs	r1, #4
 800443e:	480c      	ldr	r0, [pc, #48]	; (8004470 <ST7789_WriteCommand+0x40>)
 8004440:	f001 fdf8 	bl	8006034 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <ST7789_WriteCommand+0x44>)
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	2396      	movs	r3, #150	; 0x96
 800444a:	1df9      	adds	r1, r7, #7
 800444c:	2201      	movs	r2, #1
 800444e:	f003 fa38 	bl	80078c2 <HAL_SPI_Transmit>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d006      	beq.n	8004466 <ST7789_WriteCommand+0x36>
 8004458:	4b07      	ldr	r3, [pc, #28]	; (8004478 <ST7789_WriteCommand+0x48>)
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	f043 0310 	orr.w	r3, r3, #16
 8004460:	b29a      	uxth	r2, r3
 8004462:	4b05      	ldr	r3, [pc, #20]	; (8004478 <ST7789_WriteCommand+0x48>)
 8004464:	801a      	strh	r2, [r3, #0]
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40020000 	.word	0x40020000
 8004474:	2000006c 	.word	0x2000006c
 8004478:	2000036c 	.word	0x2000036c

0800447c <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 8004486:	2200      	movs	r2, #0
 8004488:	2104      	movs	r1, #4
 800448a:	480e      	ldr	r0, [pc, #56]	; (80044c4 <ST7789_WriteCommands+0x48>)
 800448c:	f001 fdd2 	bl	8006034 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 8004490:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <ST7789_WriteCommands+0x4c>)
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	b29a      	uxth	r2, r3
 8004498:	2196      	movs	r1, #150	; 0x96
 800449a:	460b      	mov	r3, r1
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	f003 fa0d 	bl	80078c2 <HAL_SPI_Transmit>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d006      	beq.n	80044bc <ST7789_WriteCommands+0x40>
 80044ae:	4b07      	ldr	r3, [pc, #28]	; (80044cc <ST7789_WriteCommands+0x50>)
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	f043 0310 	orr.w	r3, r3, #16
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	4b04      	ldr	r3, [pc, #16]	; (80044cc <ST7789_WriteCommands+0x50>)
 80044ba:	801a      	strh	r2, [r3, #0]
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40020000 	.word	0x40020000
 80044c8:	2000006c 	.word	0x2000006c
 80044cc:	2000036c 	.word	0x2000036c

080044d0 <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 80044de:	2201      	movs	r2, #1
 80044e0:	2104      	movs	r1, #4
 80044e2:	481f      	ldr	r0, [pc, #124]	; (8004560 <ST7789_WriteData+0x90>)
 80044e4:	f001 fda6 	bl	8006034 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 80044e8:	e028      	b.n	800453c <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044f0:	4293      	cmp	r3, r2
 80044f2:	bf28      	it	cs
 80044f4:	4613      	movcs	r3, r2
 80044f6:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 80044f8:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <ST7789_WriteData+0x94>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 80044fe:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <ST7789_WriteData+0x98>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	89ba      	ldrh	r2, [r7, #12]
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	4618      	mov	r0, r3
 8004508:	f003 fb18 	bl	8007b3c <HAL_SPI_Transmit_DMA>
 800450c:	4603      	mov	r3, r0
 800450e:	461a      	mov	r2, r3
 8004510:	7bfb      	ldrb	r3, [r7, #15]
 8004512:	4313      	orrs	r3, r2
 8004514:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8004516:	e002      	b.n	800451e <ST7789_WriteData+0x4e>
 8004518:	2001      	movs	r0, #1
 800451a:	f000 fee7 	bl	80052ec <HAL_Delay>
 800451e:	4b11      	ldr	r3, [pc, #68]	; (8004564 <ST7789_WriteData+0x94>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	f083 0301 	eor.w	r3, r3, #1
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f5      	bne.n	8004518 <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 800452c:	89bb      	ldrh	r3, [r7, #12]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	4413      	add	r3, r2
 8004532:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8004534:	89bb      	ldrh	r3, [r7, #12]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1d3      	bne.n	80044ea <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d006      	beq.n	8004556 <ST7789_WriteData+0x86>
 8004548:	4b08      	ldr	r3, [pc, #32]	; (800456c <ST7789_WriteData+0x9c>)
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	f043 0310 	orr.w	r3, r3, #16
 8004550:	b29a      	uxth	r2, r3
 8004552:	4b06      	ldr	r3, [pc, #24]	; (800456c <ST7789_WriteData+0x9c>)
 8004554:	801a      	strh	r2, [r3, #0]
}
 8004556:	bf00      	nop
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40020000 	.word	0x40020000
 8004564:	20000061 	.word	0x20000061
 8004568:	2000006c 	.word	0x2000006c
 800456c:	2000036c 	.word	0x2000036c

08004570 <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 800457e:	2201      	movs	r2, #1
 8004580:	2104      	movs	r1, #4
 8004582:	4814      	ldr	r0, [pc, #80]	; (80045d4 <ST7789_WriteDataLine+0x64>)
 8004584:	f001 fd56 	bl	8006034 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8004588:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <ST7789_WriteDataLine+0x68>)
 800458a:	2200      	movs	r2, #0
 800458c:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 800458e:	4b13      	ldr	r3, [pc, #76]	; (80045dc <ST7789_WriteDataLine+0x6c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	b292      	uxth	r2, r2
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4618      	mov	r0, r3
 800459a:	f003 facf 	bl	8007b3c <HAL_SPI_Transmit_DMA>
 800459e:	4603      	mov	r3, r0
 80045a0:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 80045a2:	e002      	b.n	80045aa <ST7789_WriteDataLine+0x3a>
 80045a4:	2001      	movs	r0, #1
 80045a6:	f000 fea1 	bl	80052ec <HAL_Delay>
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <ST7789_WriteDataLine+0x68>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	f083 0301 	eor.w	r3, r3, #1
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f5      	bne.n	80045a4 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d006      	beq.n	80045cc <ST7789_WriteDataLine+0x5c>
 80045be:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <ST7789_WriteDataLine+0x70>)
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	f043 0310 	orr.w	r3, r3, #16
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <ST7789_WriteDataLine+0x70>)
 80045ca:	801a      	strh	r2, [r3, #0]
}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40020000 	.word	0x40020000
 80045d8:	20000061 	.word	0x20000061
 80045dc:	2000006c 	.word	0x2000006c
 80045e0:	2000036c 	.word	0x2000036c

080045e4 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 80045ee:	2201      	movs	r2, #1
 80045f0:	2104      	movs	r1, #4
 80045f2:	480c      	ldr	r0, [pc, #48]	; (8004624 <ST7789_WriteSmallData+0x40>)
 80045f4:	f001 fd1e 	bl	8006034 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <ST7789_WriteSmallData+0x44>)
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	2396      	movs	r3, #150	; 0x96
 80045fe:	1df9      	adds	r1, r7, #7
 8004600:	2201      	movs	r2, #1
 8004602:	f003 f95e 	bl	80078c2 <HAL_SPI_Transmit>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d006      	beq.n	800461a <ST7789_WriteSmallData+0x36>
 800460c:	4b07      	ldr	r3, [pc, #28]	; (800462c <ST7789_WriteSmallData+0x48>)
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	f043 0310 	orr.w	r3, r3, #16
 8004614:	b29a      	uxth	r2, r3
 8004616:	4b05      	ldr	r3, [pc, #20]	; (800462c <ST7789_WriteSmallData+0x48>)
 8004618:	801a      	strh	r2, [r3, #0]
}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40020000 	.word	0x40020000
 8004628:	2000006c 	.word	0x2000006c
 800462c:	2000036c 	.word	0x2000036c

08004630 <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <ipsOn+0x18>
 8004640:	2029      	movs	r0, #41	; 0x29
 8004642:	f7ff fef5 	bl	8004430 <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 8004646:	e002      	b.n	800464e <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8004648:	2028      	movs	r0, #40	; 0x28
 800464a:	f7ff fef1 	bl	8004430 <ST7789_WriteCommand>
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8004662:	2036      	movs	r0, #54	; 0x36
 8004664:	f7ff fee4 	bl	8004430 <ST7789_WriteCommand>
	switch (m) {
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	2b03      	cmp	r3, #3
 800466c:	d81a      	bhi.n	80046a4 <ST7789_SetRotation+0x4c>
 800466e:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <ST7789_SetRotation+0x1c>)
 8004670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004674:	08004685 	.word	0x08004685
 8004678:	0800468d 	.word	0x0800468d
 800467c:	08004695 	.word	0x08004695
 8004680:	0800469d 	.word	0x0800469d
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8004684:	20c0      	movs	r0, #192	; 0xc0
 8004686:	f7ff ffad 	bl	80045e4 <ST7789_WriteSmallData>
		break;
 800468a:	e00c      	b.n	80046a6 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800468c:	20a0      	movs	r0, #160	; 0xa0
 800468e:	f7ff ffa9 	bl	80045e4 <ST7789_WriteSmallData>
		break;
 8004692:	e008      	b.n	80046a6 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8004694:	2000      	movs	r0, #0
 8004696:	f7ff ffa5 	bl	80045e4 <ST7789_WriteSmallData>
		break;
 800469a:	e004      	b.n	80046a6 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800469c:	2060      	movs	r0, #96	; 0x60
 800469e:	f7ff ffa1 	bl	80045e4 <ST7789_WriteSmallData>
		break;
 80046a2:	e000      	b.n	80046a6 <ST7789_SetRotation+0x4e>
	default:
		break;
 80046a4:	bf00      	nop
	}
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop

080046b0 <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4604      	mov	r4, r0
 80046b8:	4608      	mov	r0, r1
 80046ba:	4611      	mov	r1, r2
 80046bc:	461a      	mov	r2, r3
 80046be:	4623      	mov	r3, r4
 80046c0:	80fb      	strh	r3, [r7, #6]
 80046c2:	4603      	mov	r3, r0
 80046c4:	80bb      	strh	r3, [r7, #4]
 80046c6:	460b      	mov	r3, r1
 80046c8:	807b      	strh	r3, [r7, #2]
 80046ca:	4613      	mov	r3, r2
 80046cc:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	82fb      	strh	r3, [r7, #22]
 80046d2:	887b      	ldrh	r3, [r7, #2]
 80046d4:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80046d6:	88bb      	ldrh	r3, [r7, #4]
 80046d8:	827b      	strh	r3, [r7, #18]
 80046da:	883b      	ldrh	r3, [r7, #0]
 80046dc:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80046de:	202a      	movs	r0, #42	; 0x2a
 80046e0:	f7ff fea6 	bl	8004430 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80046e4:	8afb      	ldrh	r3, [r7, #22]
 80046e6:	0a1b      	lsrs	r3, r3, #8
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	733b      	strb	r3, [r7, #12]
 80046ee:	8afb      	ldrh	r3, [r7, #22]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	737b      	strb	r3, [r7, #13]
 80046f4:	8abb      	ldrh	r3, [r7, #20]
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	73bb      	strb	r3, [r7, #14]
 80046fe:	8abb      	ldrh	r3, [r7, #20]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8004704:	f107 030c 	add.w	r3, r7, #12
 8004708:	2104      	movs	r1, #4
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fee0 	bl	80044d0 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8004710:	202b      	movs	r0, #43	; 0x2b
 8004712:	f7ff fe8d 	bl	8004430 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8004716:	8a7b      	ldrh	r3, [r7, #18]
 8004718:	0a1b      	lsrs	r3, r3, #8
 800471a:	b29b      	uxth	r3, r3
 800471c:	b2db      	uxtb	r3, r3
 800471e:	723b      	strb	r3, [r7, #8]
 8004720:	8a7b      	ldrh	r3, [r7, #18]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	727b      	strb	r3, [r7, #9]
 8004726:	8a3b      	ldrh	r3, [r7, #16]
 8004728:	0a1b      	lsrs	r3, r3, #8
 800472a:	b29b      	uxth	r3, r3
 800472c:	b2db      	uxtb	r3, r3
 800472e:	72bb      	strb	r3, [r7, #10]
 8004730:	8a3b      	ldrh	r3, [r7, #16]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8004736:	f107 0308 	add.w	r3, r7, #8
 800473a:	2104      	movs	r1, #4
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff fec7 	bl	80044d0 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8004742:	202c      	movs	r0, #44	; 0x2c
 8004744:	f7ff fe74 	bl	8004430 <ST7789_WriteCommand>
}
 8004748:	bf00      	nop
 800474a:	371c      	adds	r7, #28
 800474c:	46bd      	mov	sp, r7
 800474e:	bd90      	pop	{r4, r7, pc}

08004750 <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8004754:	2014      	movs	r0, #20
 8004756:	f000 fdc9 	bl	80052ec <HAL_Delay>
    ST7789_RST_Clr();
 800475a:	2200      	movs	r2, #0
 800475c:	2102      	movs	r1, #2
 800475e:	4808      	ldr	r0, [pc, #32]	; (8004780 <ST7789_Reset+0x30>)
 8004760:	f001 fc68 	bl	8006034 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8004764:	200a      	movs	r0, #10
 8004766:	f000 fdc1 	bl	80052ec <HAL_Delay>
    ST7789_RST_Set();
 800476a:	2201      	movs	r2, #1
 800476c:	2102      	movs	r1, #2
 800476e:	4804      	ldr	r0, [pc, #16]	; (8004780 <ST7789_Reset+0x30>)
 8004770:	f001 fc60 	bl	8006034 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 8004774:	2014      	movs	r0, #20
 8004776:	f000 fdb9 	bl	80052ec <HAL_Delay>
}
 800477a:	bf00      	nop
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40020000 	.word	0x40020000

08004784 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b08f      	sub	sp, #60	; 0x3c
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 800478e:	203a      	movs	r0, #58	; 0x3a
 8004790:	f7ff fe4e 	bl	8004430 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 8004794:	2055      	movs	r0, #85	; 0x55
 8004796:	f7ff ff25 	bl	80045e4 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800479a:	20b2      	movs	r0, #178	; 0xb2
 800479c:	f7ff fe48 	bl	8004430 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80047a0:	4a3a      	ldr	r2, [pc, #232]	; (800488c <ST7789_Init+0x108>)
 80047a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047aa:	6018      	str	r0, [r3, #0]
 80047ac:	3304      	adds	r3, #4
 80047ae:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80047b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047b4:	2105      	movs	r1, #5
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff fe8a 	bl	80044d0 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80047bc:	2003      	movs	r0, #3
 80047be:	f7ff ff4b 	bl	8004658 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 80047c2:	20b7      	movs	r0, #183	; 0xb7
 80047c4:	f7ff fe34 	bl	8004430 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80047c8:	2035      	movs	r0, #53	; 0x35
 80047ca:	f7ff ff0b 	bl	80045e4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80047ce:	20bb      	movs	r0, #187	; 0xbb
 80047d0:	f7ff fe2e 	bl	8004430 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80047d4:	2019      	movs	r0, #25
 80047d6:	f7ff ff05 	bl	80045e4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80047da:	20c0      	movs	r0, #192	; 0xc0
 80047dc:	f7ff fe28 	bl	8004430 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 80047e0:	202c      	movs	r0, #44	; 0x2c
 80047e2:	f7ff feff 	bl	80045e4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 80047e6:	20c2      	movs	r0, #194	; 0xc2
 80047e8:	f7ff fe22 	bl	8004430 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 80047ec:	2001      	movs	r0, #1
 80047ee:	f7ff fef9 	bl	80045e4 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 80047f2:	20ff      	movs	r0, #255	; 0xff
 80047f4:	f7ff fef6 	bl	80045e4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 80047f8:	20c3      	movs	r0, #195	; 0xc3
 80047fa:	f7ff fe19 	bl	8004430 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80047fe:	2012      	movs	r0, #18
 8004800:	f7ff fef0 	bl	80045e4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8004804:	20c4      	movs	r0, #196	; 0xc4
 8004806:	f7ff fe13 	bl	8004430 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 800480a:	2020      	movs	r0, #32
 800480c:	f7ff feea 	bl	80045e4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8004810:	20c6      	movs	r0, #198	; 0xc6
 8004812:	f7ff fe0d 	bl	8004430 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 8004816:	200f      	movs	r0, #15
 8004818:	f7ff fee4 	bl	80045e4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 800481c:	20d0      	movs	r0, #208	; 0xd0
 800481e:	f7ff fe07 	bl	8004430 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8004822:	20a4      	movs	r0, #164	; 0xa4
 8004824:	f7ff fede 	bl	80045e4 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 8004828:	20a1      	movs	r0, #161	; 0xa1
 800482a:	f7ff fedb 	bl	80045e4 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800482e:	20e0      	movs	r0, #224	; 0xe0
 8004830:	f7ff fdfe 	bl	8004430 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8004834:	4b16      	ldr	r3, [pc, #88]	; (8004890 <ST7789_Init+0x10c>)
 8004836:	f107 041c 	add.w	r4, r7, #28
 800483a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800483c:	c407      	stmia	r4!, {r0, r1, r2}
 800483e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8004840:	f107 031c 	add.w	r3, r7, #28
 8004844:	210e      	movs	r1, #14
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fe42 	bl	80044d0 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 800484c:	20e1      	movs	r0, #225	; 0xe1
 800484e:	f7ff fdef 	bl	8004430 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8004852:	4b10      	ldr	r3, [pc, #64]	; (8004894 <ST7789_Init+0x110>)
 8004854:	f107 040c 	add.w	r4, r7, #12
 8004858:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800485a:	c407      	stmia	r4!, {r0, r1, r2}
 800485c:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800485e:	f107 030c 	add.w	r3, r7, #12
 8004862:	210e      	movs	r1, #14
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff fe33 	bl	80044d0 <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <ST7789_Init+0x114>)
 800486c:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 800486e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004872:	2104      	movs	r1, #4
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff fe01 	bl	800447c <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	4618      	mov	r0, r3
 800487e:	f000 f80d 	bl	800489c <ST7789_Fill_Color>
}
 8004882:	bf00      	nop
 8004884:	373c      	adds	r7, #60	; 0x3c
 8004886:	46bd      	mov	sp, r7
 8004888:	bd90      	pop	{r4, r7, pc}
 800488a:	bf00      	nop
 800488c:	08012980 	.word	0x08012980
 8004890:	08012988 	.word	0x08012988
 8004894:	08012998 	.word	0x08012998
 8004898:	28131121 	.word	0x28131121

0800489c <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b0fc      	sub	sp, #496	; 0x1f0
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4602      	mov	r2, r0
 80048a4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80048a8:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 80048ac:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80048ae:	23ef      	movs	r3, #239	; 0xef
 80048b0:	22ef      	movs	r2, #239	; 0xef
 80048b2:	2100      	movs	r1, #0
 80048b4:	2000      	movs	r0, #0
 80048b6:	f7ff fefb 	bl	80046b0 <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 80048ba:	2300      	movs	r3, #0
 80048bc:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 80048c0:	2300      	movs	r3, #0
 80048c2:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 80048c6:	e024      	b.n	8004912 <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 80048c8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80048cc:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	b21a      	sxth	r2, r3
 80048d8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80048dc:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	b21b      	sxth	r3, r3
 80048e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048ea:	b21b      	sxth	r3, r3
 80048ec:	4313      	orrs	r3, r2
 80048ee:	b219      	sxth	r1, r3
 80048f0:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 80048f4:	f107 020c 	add.w	r2, r7, #12
 80048f8:	4413      	add	r3, r2
 80048fa:	b28a      	uxth	r2, r1
 80048fc:	801a      	strh	r2, [r3, #0]
		i += 2;
 80048fe:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8004902:	3302      	adds	r3, #2
 8004904:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8004908:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 800490c:	3301      	adds	r3, #1
 800490e:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004912:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004916:	2bef      	cmp	r3, #239	; 0xef
 8004918:	d9d6      	bls.n	80048c8 <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 800491a:	2300      	movs	r3, #0
 800491c:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004920:	e00b      	b.n	800493a <ST7789_Fill_Color+0x9e>
 8004922:	f107 030c 	add.w	r3, r7, #12
 8004926:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff fe20 	bl	8004570 <ST7789_WriteDataLine>
 8004930:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004934:	3301      	adds	r3, #1
 8004936:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 800493a:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 800493e:	2bef      	cmp	r3, #239	; 0xef
 8004940:	d9ef      	bls.n	8004922 <ST7789_Fill_Color+0x86>

//#endif
}
 8004942:	bf00      	nop
 8004944:	bf00      	nop
 8004946:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 800494e:	b590      	push	{r4, r7, lr}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	4604      	mov	r4, r0
 8004956:	4608      	mov	r0, r1
 8004958:	4611      	mov	r1, r2
 800495a:	461a      	mov	r2, r3
 800495c:	4623      	mov	r3, r4
 800495e:	80fb      	strh	r3, [r7, #6]
 8004960:	4603      	mov	r3, r0
 8004962:	80bb      	strh	r3, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	807b      	strh	r3, [r7, #2]
 8004968:	4613      	mov	r3, r2
 800496a:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 800496c:	887b      	ldrh	r3, [r7, #2]
 800496e:	2bef      	cmp	r3, #239	; 0xef
 8004970:	d82b      	bhi.n	80049ca <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8004972:	883b      	ldrh	r3, [r7, #0]
 8004974:	2bef      	cmp	r3, #239	; 0xef
 8004976:	d828      	bhi.n	80049ca <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 8004978:	8c3b      	ldrh	r3, [r7, #32]
 800497a:	0a1b      	lsrs	r3, r3, #8
 800497c:	b29b      	uxth	r3, r3
 800497e:	b2db      	uxtb	r3, r3
 8004980:	723b      	strb	r3, [r7, #8]
 8004982:	8c3b      	ldrh	r3, [r7, #32]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8004988:	883b      	ldrh	r3, [r7, #0]
 800498a:	887a      	ldrh	r2, [r7, #2]
 800498c:	88b9      	ldrh	r1, [r7, #4]
 800498e:	88f8      	ldrh	r0, [r7, #6]
 8004990:	f7ff fe8e 	bl	80046b0 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 8004994:	88bb      	ldrh	r3, [r7, #4]
 8004996:	81fb      	strh	r3, [r7, #14]
 8004998:	e012      	b.n	80049c0 <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	81bb      	strh	r3, [r7, #12]
 800499e:	e008      	b.n	80049b2 <ST7789_Fill+0x64>
 80049a0:	f107 0308 	add.w	r3, r7, #8
 80049a4:	2102      	movs	r1, #2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fd92 	bl	80044d0 <ST7789_WriteData>
 80049ac:	89bb      	ldrh	r3, [r7, #12]
 80049ae:	3301      	adds	r3, #1
 80049b0:	81bb      	strh	r3, [r7, #12]
 80049b2:	89ba      	ldrh	r2, [r7, #12]
 80049b4:	887b      	ldrh	r3, [r7, #2]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d9f2      	bls.n	80049a0 <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 80049ba:	89fb      	ldrh	r3, [r7, #14]
 80049bc:	3301      	adds	r3, #1
 80049be:	81fb      	strh	r3, [r7, #14]
 80049c0:	89fa      	ldrh	r2, [r7, #14]
 80049c2:	883b      	ldrh	r3, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d9e8      	bls.n	800499a <ST7789_Fill+0x4c>
 80049c8:	e000      	b.n	80049cc <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 80049ca:	bf00      	nop
	}
}
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd90      	pop	{r4, r7, pc}

080049d2 <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80049d2:	b082      	sub	sp, #8
 80049d4:	b590      	push	{r4, r7, lr}
 80049d6:	b089      	sub	sp, #36	; 0x24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	637b      	str	r3, [r7, #52]	; 0x34
 80049dc:	4603      	mov	r3, r0
 80049de:	80fb      	strh	r3, [r7, #6]
 80049e0:	460b      	mov	r3, r1
 80049e2:	80bb      	strh	r3, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80049e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	4413      	add	r3, r2
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29c      	uxth	r4, r3
 80049f8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	88bb      	ldrh	r3, [r7, #4]
 8004a00:	4413      	add	r3, r2
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	88b9      	ldrh	r1, [r7, #4]
 8004a0a:	88f8      	ldrh	r0, [r7, #6]
 8004a0c:	4622      	mov	r2, r4
 8004a0e:	f7ff fe4f 	bl	80046b0 <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 8004a12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	733b      	strb	r3, [r7, #12]
 8004a1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 8004a22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a26:	0a1b      	lsrs	r3, r3, #8
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	723b      	strb	r3, [r7, #8]
 8004a2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	e02f      	b.n	8004aa0 <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 8004a40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	3b20      	subs	r3, #32
 8004a46:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8004a4a:	fb01 f303 	mul.w	r3, r1, r3
 8004a4e:	4619      	mov	r1, r3
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	440b      	add	r3, r1
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	4413      	add	r3, r2
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61bb      	str	r3, [r7, #24]
 8004a60:	e015      	b.n	8004a8e <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <ST7789_WriteChar+0xa8>
				uk = cdata;
 8004a72:	f107 030c 	add.w	r3, r7, #12
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e002      	b.n	8004a80 <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 8004a7a:	f107 0308 	add.w	r3, r7, #8
 8004a7e:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 8004a80:	2102      	movs	r1, #2
 8004a82:	6978      	ldr	r0, [r7, #20]
 8004a84:	f7ff fd24 	bl	80044d0 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a92:	461a      	mov	r2, r3
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d3e3      	bcc.n	8004a62 <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d3c9      	bcc.n	8004a40 <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	3724      	adds	r7, #36	; 0x24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004ab8:	b002      	add	sp, #8
 8004aba:	4770      	bx	lr

08004abc <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8004abc:	b082      	sub	sp, #8
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b086      	sub	sp, #24
 8004ac2:	af04      	add	r7, sp, #16
 8004ac4:	603a      	str	r2, [r7, #0]
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	4603      	mov	r3, r0
 8004aca:	80fb      	strh	r3, [r7, #6]
 8004acc:	460b      	mov	r3, r1
 8004ace:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d03f      	beq.n	8004b56 <ST7789_WriteString+0x9a>

	while (*str) {
 8004ad6:	e039      	b.n	8004b4c <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	7d3a      	ldrb	r2, [r7, #20]
 8004adc:	4413      	add	r3, r2
 8004ade:	2bef      	cmp	r3, #239	; 0xef
 8004ae0:	dd13      	ble.n	8004b0a <ST7789_WriteString+0x4e>
			x = 0;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8004ae6:	7d7b      	ldrb	r3, [r7, #21]
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	88bb      	ldrh	r3, [r7, #4]
 8004aec:	4413      	add	r3, r2
 8004aee:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 8004af0:	88bb      	ldrh	r3, [r7, #4]
 8004af2:	7d7a      	ldrb	r2, [r7, #21]
 8004af4:	4413      	add	r3, r2
 8004af6:	2bef      	cmp	r3, #239	; 0xef
 8004af8:	dc2f      	bgt.n	8004b5a <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b20      	cmp	r3, #32
 8004b00:	d103      	bne.n	8004b0a <ST7789_WriteString+0x4e>
				str++;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	3301      	adds	r3, #1
 8004b06:	603b      	str	r3, [r7, #0]
				continue;
 8004b08:	e020      	b.n	8004b4c <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b0a      	cmp	r3, #10
 8004b10:	d012      	beq.n	8004b38 <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781a      	ldrb	r2, [r3, #0]
 8004b16:	88b9      	ldrh	r1, [r7, #4]
 8004b18:	88f8      	ldrh	r0, [r7, #6]
 8004b1a:	8c3b      	ldrh	r3, [r7, #32]
 8004b1c:	9302      	str	r3, [sp, #8]
 8004b1e:	8bbb      	ldrh	r3, [r7, #28]
 8004b20:	9301      	str	r3, [sp, #4]
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f7ff ff53 	bl	80049d2 <ST7789_WriteChar>
			x += font.width;
 8004b2c:	7d3b      	ldrb	r3, [r7, #20]
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	4413      	add	r3, r2
 8004b34:	80fb      	strh	r3, [r7, #6]
 8004b36:	e006      	b.n	8004b46 <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8004b3c:	7d7b      	ldrb	r3, [r7, #21]
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	88bb      	ldrh	r3, [r7, #4]
 8004b42:	4413      	add	r3, r2
 8004b44:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	603b      	str	r3, [r7, #0]
	while (*str) {
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1c1      	bne.n	8004ad8 <ST7789_WriteString+0x1c>
 8004b54:	e002      	b.n	8004b5c <ST7789_WriteString+0xa0>
	if (!str) return;
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 8004b5a:	bf00      	nop
	}
}
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b64:	b002      	add	sp, #8
 8004b66:	4770      	bx	lr

08004b68 <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b0a4      	sub	sp, #144	; 0x90
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	f107 0310 	add.w	r3, r7, #16
 8004b7c:	227c      	movs	r2, #124	; 0x7c
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4618      	mov	r0, r3
 8004b82:	f00c fb11 	bl	80111a8 <memset>

	memset(st, 0x20, 127);
 8004b86:	f107 030c 	add.w	r3, r7, #12
 8004b8a:	227f      	movs	r2, #127	; 0x7f
 8004b8c:	2120      	movs	r1, #32
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f00c fb0a 	bl	80111a8 <memset>
	int8_t k = strlen(str);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7fb fb1b 	bl	80001d0 <strlen>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 8004ba0:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004ba4:	887b      	ldrh	r3, [r7, #2]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	da25      	bge.n	8004bf6 <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 8004baa:	887a      	ldrh	r2, [r7, #2]
 8004bac:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	0fda      	lsrs	r2, r3, #31
 8004bb4:	4413      	add	r3, r2
 8004bb6:	105b      	asrs	r3, r3, #1
 8004bb8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 8004bbc:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8004bc0:	f107 020c 	add.w	r2, r7, #12
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f00c fadd 	bl	801118c <memcpy>
		st[k + n*2 + 1] = '\0';
 8004bd2:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004bd6:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	4413      	add	r3, r2
 8004bde:	3301      	adds	r3, #1
 8004be0:	3390      	adds	r3, #144	; 0x90
 8004be2:	443b      	add	r3, r7
 8004be4:	2200      	movs	r2, #0
 8004be6:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 8004bea:	f107 030c 	add.w	r3, r7, #12
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f00c fc2b 	bl	801144c <strcpy>
	}

	return str;
 8004bf6:	687b      	ldr	r3, [r7, #4]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3790      	adds	r7, #144	; 0x90
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <HAL_MspInit+0x74>)
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0e:	4a19      	ldr	r2, [pc, #100]	; (8004c74 <HAL_MspInit+0x74>)
 8004c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c14:	6453      	str	r3, [r2, #68]	; 0x44
 8004c16:	4b17      	ldr	r3, [pc, #92]	; (8004c74 <HAL_MspInit+0x74>)
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c1e:	607b      	str	r3, [r7, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <HAL_MspInit+0x74>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <HAL_MspInit+0x74>)
 8004c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c30:	6413      	str	r3, [r2, #64]	; 0x40
 8004c32:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <HAL_MspInit+0x74>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	210f      	movs	r1, #15
 8004c42:	f06f 0001 	mvn.w	r0, #1
 8004c46:	f000 fc2d 	bl	80054a4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2105      	movs	r1, #5
 8004c4e:	2005      	movs	r0, #5
 8004c50:	f000 fc28 	bl	80054a4 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004c54:	2005      	movs	r0, #5
 8004c56:	f000 fc41 	bl	80054dc <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2105      	movs	r1, #5
 8004c5e:	2005      	movs	r0, #5
 8004c60:	f000 fc20 	bl	80054a4 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004c64:	2005      	movs	r0, #5
 8004c66:	f000 fc39 	bl	80054dc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40023800 	.word	0x40023800

08004c78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c80:	f107 0308 	add.w	r3, r7, #8
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	605a      	str	r2, [r3, #4]
 8004c8a:	609a      	str	r2, [r3, #8]
 8004c8c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a0c      	ldr	r2, [pc, #48]	; (8004cc4 <HAL_RTC_MspInit+0x4c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d110      	bne.n	8004cba <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004c98:	2302      	movs	r3, #2
 8004c9a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <HAL_RTC_MspInit+0x50>)
 8004c9e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ca0:	f107 0308 	add.w	r3, r7, #8
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f002 f9a3 	bl	8006ff0 <HAL_RCCEx_PeriphCLKConfig>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8004cb0:	f7ff fb96 	bl	80043e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004cb4:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <HAL_RTC_MspInit+0x54>)
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004cba:	bf00      	nop
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40002800 	.word	0x40002800
 8004cc8:	00190300 	.word	0x00190300
 8004ccc:	42470e3c 	.word	0x42470e3c

08004cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	; 0x28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd8:	f107 0314 	add.w	r3, r7, #20
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	609a      	str	r2, [r3, #8]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a39      	ldr	r2, [pc, #228]	; (8004dd4 <HAL_SPI_MspInit+0x104>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d16b      	bne.n	8004dca <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	4b38      	ldr	r3, [pc, #224]	; (8004dd8 <HAL_SPI_MspInit+0x108>)
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	4a37      	ldr	r2, [pc, #220]	; (8004dd8 <HAL_SPI_MspInit+0x108>)
 8004cfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d00:	6453      	str	r3, [r2, #68]	; 0x44
 8004d02:	4b35      	ldr	r3, [pc, #212]	; (8004dd8 <HAL_SPI_MspInit+0x108>)
 8004d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	4b31      	ldr	r3, [pc, #196]	; (8004dd8 <HAL_SPI_MspInit+0x108>)
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	4a30      	ldr	r2, [pc, #192]	; (8004dd8 <HAL_SPI_MspInit+0x108>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d1e:	4b2e      	ldr	r3, [pc, #184]	; (8004dd8 <HAL_SPI_MspInit+0x108>)
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 8004d2a:	23a0      	movs	r3, #160	; 0xa0
 8004d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d2e:	2302      	movs	r3, #2
 8004d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d36:	2303      	movs	r3, #3
 8004d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d3a:	2305      	movs	r3, #5
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d3e:	f107 0314 	add.w	r3, r7, #20
 8004d42:	4619      	mov	r1, r3
 8004d44:	4825      	ldr	r0, [pc, #148]	; (8004ddc <HAL_SPI_MspInit+0x10c>)
 8004d46:	f000 ffd9 	bl	8005cfc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8004d4a:	4b25      	ldr	r3, [pc, #148]	; (8004de0 <HAL_SPI_MspInit+0x110>)
 8004d4c:	4a25      	ldr	r2, [pc, #148]	; (8004de4 <HAL_SPI_MspInit+0x114>)
 8004d4e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004d50:	4b23      	ldr	r3, [pc, #140]	; (8004de0 <HAL_SPI_MspInit+0x110>)
 8004d52:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004d56:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d58:	4b21      	ldr	r3, [pc, #132]	; (8004de0 <HAL_SPI_MspInit+0x110>)
 8004d5a:	2240      	movs	r2, #64	; 0x40
 8004d5c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d5e:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <HAL_SPI_MspInit+0x110>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d64:	4b1e      	ldr	r3, [pc, #120]	; (8004de0 <HAL_SPI_MspInit+0x110>)
 8004d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d6a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d6c:	4b1c      	ldr	r3, [pc, #112]	; (8004de0 <HAL_SPI_MspInit+0x110>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d72:	4b1b      	ldr	r3, [pc, #108]	; (8004de0 <HAL_SPI_MspInit+0x110>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004d78:	4b19      	ldr	r3, [pc, #100]	; (8004de0 <HAL_SPI_MspInit+0x110>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004d7e:	4b18      	ldr	r3, [pc, #96]	; (8004de0 <HAL_SPI_MspInit+0x110>)
 8004d80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d84:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004d86:	4b16      	ldr	r3, [pc, #88]	; (8004de0 <HAL_SPI_MspInit+0x110>)
 8004d88:	2204      	movs	r2, #4
 8004d8a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004d8c:	4b14      	ldr	r3, [pc, #80]	; (8004de0 <HAL_SPI_MspInit+0x110>)
 8004d8e:	2203      	movs	r2, #3
 8004d90:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004d92:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <HAL_SPI_MspInit+0x110>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004d98:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <HAL_SPI_MspInit+0x110>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004d9e:	4810      	ldr	r0, [pc, #64]	; (8004de0 <HAL_SPI_MspInit+0x110>)
 8004da0:	f000 fbaa 	bl	80054f8 <HAL_DMA_Init>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8004daa:	f7ff fb19 	bl	80043e0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a0b      	ldr	r2, [pc, #44]	; (8004de0 <HAL_SPI_MspInit+0x110>)
 8004db2:	649a      	str	r2, [r3, #72]	; 0x48
 8004db4:	4a0a      	ldr	r2, [pc, #40]	; (8004de0 <HAL_SPI_MspInit+0x110>)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2102      	movs	r1, #2
 8004dbe:	2023      	movs	r0, #35	; 0x23
 8004dc0:	f000 fb70 	bl	80054a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004dc4:	2023      	movs	r0, #35	; 0x23
 8004dc6:	f000 fb89 	bl	80054dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004dca:	bf00      	nop
 8004dcc:	3728      	adds	r7, #40	; 0x28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40013000 	.word	0x40013000
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	40020000 	.word	0x40020000
 8004de0:	200001d4 	.word	0x200001d4
 8004de4:	40026458 	.word	0x40026458

08004de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df8:	d115      	bne.n	8004e26 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <HAL_TIM_Base_MspInit+0x48>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	4a0b      	ldr	r2, [pc, #44]	; (8004e30 <HAL_TIM_Base_MspInit+0x48>)
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	6413      	str	r3, [r2, #64]	; 0x40
 8004e0a:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <HAL_TIM_Base_MspInit+0x48>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004e16:	2200      	movs	r2, #0
 8004e18:	2101      	movs	r1, #1
 8004e1a:	201c      	movs	r0, #28
 8004e1c:	f000 fb42 	bl	80054a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e20:	201c      	movs	r0, #28
 8004e22:	f000 fb5b 	bl	80054dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800

08004e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08a      	sub	sp, #40	; 0x28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e3c:	f107 0314 	add.w	r3, r7, #20
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	605a      	str	r2, [r3, #4]
 8004e46:	609a      	str	r2, [r3, #8]
 8004e48:	60da      	str	r2, [r3, #12]
 8004e4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a35      	ldr	r2, [pc, #212]	; (8004f28 <HAL_UART_MspInit+0xf4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d163      	bne.n	8004f1e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e56:	2300      	movs	r3, #0
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	4b34      	ldr	r3, [pc, #208]	; (8004f2c <HAL_UART_MspInit+0xf8>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	4a33      	ldr	r2, [pc, #204]	; (8004f2c <HAL_UART_MspInit+0xf8>)
 8004e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e64:	6413      	str	r3, [r2, #64]	; 0x40
 8004e66:	4b31      	ldr	r3, [pc, #196]	; (8004f2c <HAL_UART_MspInit+0xf8>)
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	4b2d      	ldr	r3, [pc, #180]	; (8004f2c <HAL_UART_MspInit+0xf8>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	4a2c      	ldr	r2, [pc, #176]	; (8004f2c <HAL_UART_MspInit+0xf8>)
 8004e7c:	f043 0302 	orr.w	r3, r3, #2
 8004e80:	6313      	str	r3, [r2, #48]	; 0x30
 8004e82:	4b2a      	ldr	r3, [pc, #168]	; (8004f2c <HAL_UART_MspInit+0xf8>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 8004e8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e94:	2302      	movs	r3, #2
 8004e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004ea0:	2307      	movs	r3, #7
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ea4:	f107 0314 	add.w	r3, r7, #20
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4821      	ldr	r0, [pc, #132]	; (8004f30 <HAL_UART_MspInit+0xfc>)
 8004eac:	f000 ff26 	bl	8005cfc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004eb0:	4b20      	ldr	r3, [pc, #128]	; (8004f34 <HAL_UART_MspInit+0x100>)
 8004eb2:	4a21      	ldr	r2, [pc, #132]	; (8004f38 <HAL_UART_MspInit+0x104>)
 8004eb4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004eb6:	4b1f      	ldr	r3, [pc, #124]	; (8004f34 <HAL_UART_MspInit+0x100>)
 8004eb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ebc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ebe:	4b1d      	ldr	r3, [pc, #116]	; (8004f34 <HAL_UART_MspInit+0x100>)
 8004ec0:	2240      	movs	r2, #64	; 0x40
 8004ec2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	; (8004f34 <HAL_UART_MspInit+0x100>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004eca:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <HAL_UART_MspInit+0x100>)
 8004ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ed0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ed2:	4b18      	ldr	r3, [pc, #96]	; (8004f34 <HAL_UART_MspInit+0x100>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ed8:	4b16      	ldr	r3, [pc, #88]	; (8004f34 <HAL_UART_MspInit+0x100>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004ede:	4b15      	ldr	r3, [pc, #84]	; (8004f34 <HAL_UART_MspInit+0x100>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004ee4:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <HAL_UART_MspInit+0x100>)
 8004ee6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004eea:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004eec:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <HAL_UART_MspInit+0x100>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004ef2:	4810      	ldr	r0, [pc, #64]	; (8004f34 <HAL_UART_MspInit+0x100>)
 8004ef4:	f000 fb00 	bl	80054f8 <HAL_DMA_Init>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004efe:	f7ff fa6f 	bl	80043e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a0b      	ldr	r2, [pc, #44]	; (8004f34 <HAL_UART_MspInit+0x100>)
 8004f06:	635a      	str	r2, [r3, #52]	; 0x34
 8004f08:	4a0a      	ldr	r2, [pc, #40]	; (8004f34 <HAL_UART_MspInit+0x100>)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2105      	movs	r1, #5
 8004f12:	2027      	movs	r0, #39	; 0x27
 8004f14:	f000 fac6 	bl	80054a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004f18:	2027      	movs	r0, #39	; 0x27
 8004f1a:	f000 fadf 	bl	80054dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004f1e:	bf00      	nop
 8004f20:	3728      	adds	r7, #40	; 0x28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40004800 	.word	0x40004800
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40020400 	.word	0x40020400
 8004f34:	200002c0 	.word	0x200002c0
 8004f38:	40026058 	.word	0x40026058

08004f3c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	609a      	str	r2, [r3, #8]
 8004f4c:	60da      	str	r2, [r3, #12]
 8004f4e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004f50:	4b20      	ldr	r3, [pc, #128]	; (8004fd4 <HAL_FSMC_MspInit+0x98>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d139      	bne.n	8004fcc <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8004f58:	4b1e      	ldr	r3, [pc, #120]	; (8004fd4 <HAL_FSMC_MspInit+0x98>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	603b      	str	r3, [r7, #0]
 8004f62:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <HAL_FSMC_MspInit+0x9c>)
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	4a1c      	ldr	r2, [pc, #112]	; (8004fd8 <HAL_FSMC_MspInit+0x9c>)
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	6393      	str	r3, [r2, #56]	; 0x38
 8004f6e:	4b1a      	ldr	r3, [pc, #104]	; (8004fd8 <HAL_FSMC_MspInit+0x9c>)
 8004f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8004f7a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8004f7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f80:	2302      	movs	r3, #2
 8004f82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004f8c:	230c      	movs	r3, #12
 8004f8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f90:	1d3b      	adds	r3, r7, #4
 8004f92:	4619      	mov	r1, r3
 8004f94:	4811      	ldr	r0, [pc, #68]	; (8004fdc <HAL_FSMC_MspInit+0xa0>)
 8004f96:	f000 feb1 	bl	8005cfc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 8004f9a:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8004f9e:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                          |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004fac:	230c      	movs	r3, #12
 8004fae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fb0:	1d3b      	adds	r3, r7, #4
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	480a      	ldr	r0, [pc, #40]	; (8004fe0 <HAL_FSMC_MspInit+0xa4>)
 8004fb6:	f000 fea1 	bl	8005cfc <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2105      	movs	r1, #5
 8004fbe:	2030      	movs	r0, #48	; 0x30
 8004fc0:	f000 fa70 	bl	80054a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004fc4:	2030      	movs	r0, #48	; 0x30
 8004fc6:	f000 fa89 	bl	80054dc <HAL_NVIC_EnableIRQ>
 8004fca:	e000      	b.n	8004fce <HAL_FSMC_MspInit+0x92>
    return;
 8004fcc:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20003c30 	.word	0x20003c30
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	40020c00 	.word	0x40020c00

08004fe4 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8004fec:	f7ff ffa6 	bl	8004f3c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8004ff0:	bf00      	nop
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08c      	sub	sp, #48	; 0x30
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005004:	2300      	movs	r3, #0
 8005006:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8005008:	2200      	movs	r2, #0
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	2019      	movs	r0, #25
 800500e:	f000 fa49 	bl	80054a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005012:	2019      	movs	r0, #25
 8005014:	f000 fa62 	bl	80054dc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	4b1f      	ldr	r3, [pc, #124]	; (800509c <HAL_InitTick+0xa4>)
 800501e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005020:	4a1e      	ldr	r2, [pc, #120]	; (800509c <HAL_InitTick+0xa4>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	6453      	str	r3, [r2, #68]	; 0x44
 8005028:	4b1c      	ldr	r3, [pc, #112]	; (800509c <HAL_InitTick+0xa4>)
 800502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005034:	f107 0210 	add.w	r2, r7, #16
 8005038:	f107 0314 	add.w	r3, r7, #20
 800503c:	4611      	mov	r1, r2
 800503e:	4618      	mov	r0, r3
 8005040:	f001 ffa4 	bl	8006f8c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005044:	f001 ff8e 	bl	8006f64 <HAL_RCC_GetPCLK2Freq>
 8005048:	4603      	mov	r3, r0
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	4a13      	ldr	r2, [pc, #76]	; (80050a0 <HAL_InitTick+0xa8>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	0c9b      	lsrs	r3, r3, #18
 8005058:	3b01      	subs	r3, #1
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800505c:	4b11      	ldr	r3, [pc, #68]	; (80050a4 <HAL_InitTick+0xac>)
 800505e:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <HAL_InitTick+0xb0>)
 8005060:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005062:	4b10      	ldr	r3, [pc, #64]	; (80050a4 <HAL_InitTick+0xac>)
 8005064:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005068:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800506a:	4a0e      	ldr	r2, [pc, #56]	; (80050a4 <HAL_InitTick+0xac>)
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005070:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <HAL_InitTick+0xac>)
 8005072:	2200      	movs	r2, #0
 8005074:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <HAL_InitTick+0xac>)
 8005078:	2200      	movs	r2, #0
 800507a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800507c:	4809      	ldr	r0, [pc, #36]	; (80050a4 <HAL_InitTick+0xac>)
 800507e:	f003 f887 	bl	8008190 <HAL_TIM_Base_Init>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d104      	bne.n	8005092 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005088:	4806      	ldr	r0, [pc, #24]	; (80050a4 <HAL_InitTick+0xac>)
 800508a:	f003 f8d1 	bl	8008230 <HAL_TIM_Base_Start_IT>
 800508e:	4603      	mov	r3, r0
 8005090:	e000      	b.n	8005094 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
}
 8005094:	4618      	mov	r0, r3
 8005096:	3730      	adds	r7, #48	; 0x30
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40023800 	.word	0x40023800
 80050a0:	431bde83 	.word	0x431bde83
 80050a4:	20003c34 	.word	0x20003c34
 80050a8:	40010000 	.word	0x40010000

080050ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80050b0:	bf00      	nop
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050ba:	b480      	push	{r7}
 80050bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050be:	e7fe      	b.n	80050be <HardFault_Handler+0x4>

080050c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050c4:	e7fe      	b.n	80050c4 <MemManage_Handler+0x4>

080050c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050c6:	b480      	push	{r7}
 80050c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050ca:	e7fe      	b.n	80050ca <BusFault_Handler+0x4>

080050cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050d0:	e7fe      	b.n	80050d0 <UsageFault_Handler+0x4>

080050d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050d2:	b480      	push	{r7}
 80050d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050d6:	bf00      	nop
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80050e4:	bf00      	nop
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80050f4:	4802      	ldr	r0, [pc, #8]	; (8005100 <DMA1_Stream3_IRQHandler+0x10>)
 80050f6:	f000 fb97 	bl	8005828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80050fa:	bf00      	nop
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	200002c0 	.word	0x200002c0

08005104 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005108:	4802      	ldr	r0, [pc, #8]	; (8005114 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800510a:	f003 f901 	bl	8008310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800510e:	bf00      	nop
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20003c34 	.word	0x20003c34

08005118 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800511c:	4802      	ldr	r0, [pc, #8]	; (8005128 <TIM2_IRQHandler+0x10>)
 800511e:	f003 f8f7 	bl	8008310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005122:	bf00      	nop
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000234 	.word	0x20000234

0800512c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005130:	4802      	ldr	r0, [pc, #8]	; (800513c <SPI1_IRQHandler+0x10>)
 8005132:	f002 fdb9 	bl	8007ca8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005136:	bf00      	nop
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	2000017c 	.word	0x2000017c

08005140 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005144:	4802      	ldr	r0, [pc, #8]	; (8005150 <USART3_IRQHandler+0x10>)
 8005146:	f003 fda1 	bl	8008c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800514a:	bf00      	nop
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	2000027c 	.word	0x2000027c

08005154 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8005158:	4802      	ldr	r0, [pc, #8]	; (8005164 <FSMC_IRQHandler+0x10>)
 800515a:	f000 ffec 	bl	8006136 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 800515e:	bf00      	nop
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000320 	.word	0x20000320

08005168 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800516c:	4802      	ldr	r0, [pc, #8]	; (8005178 <DMA2_Stream3_IRQHandler+0x10>)
 800516e:	f000 fb5b 	bl	8005828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005172:	bf00      	nop
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	200001d4 	.word	0x200001d4

0800517c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005184:	4a14      	ldr	r2, [pc, #80]	; (80051d8 <_sbrk+0x5c>)
 8005186:	4b15      	ldr	r3, [pc, #84]	; (80051dc <_sbrk+0x60>)
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005190:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <_sbrk+0x64>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d102      	bne.n	800519e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005198:	4b11      	ldr	r3, [pc, #68]	; (80051e0 <_sbrk+0x64>)
 800519a:	4a12      	ldr	r2, [pc, #72]	; (80051e4 <_sbrk+0x68>)
 800519c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800519e:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <_sbrk+0x64>)
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4413      	add	r3, r2
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d207      	bcs.n	80051bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051ac:	f00b ff16 	bl	8010fdc <__errno>
 80051b0:	4603      	mov	r3, r0
 80051b2:	220c      	movs	r2, #12
 80051b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051ba:	e009      	b.n	80051d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051bc:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <_sbrk+0x64>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051c2:	4b07      	ldr	r3, [pc, #28]	; (80051e0 <_sbrk+0x64>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4413      	add	r3, r2
 80051ca:	4a05      	ldr	r2, [pc, #20]	; (80051e0 <_sbrk+0x64>)
 80051cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051ce:	68fb      	ldr	r3, [r7, #12]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20020000 	.word	0x20020000
 80051dc:	00002000 	.word	0x00002000
 80051e0:	20003c7c 	.word	0x20003c7c
 80051e4:	20009b28 	.word	0x20009b28

080051e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80051ec:	4b08      	ldr	r3, [pc, #32]	; (8005210 <SystemInit+0x28>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f2:	4a07      	ldr	r2, [pc, #28]	; (8005210 <SystemInit+0x28>)
 80051f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80051fc:	4b04      	ldr	r3, [pc, #16]	; (8005210 <SystemInit+0x28>)
 80051fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005202:	609a      	str	r2, [r3, #8]
#endif
}
 8005204:	bf00      	nop
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	e000ed00 	.word	0xe000ed00

08005214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800524c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005218:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800521a:	e003      	b.n	8005224 <LoopCopyDataInit>

0800521c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800521c:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800521e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005220:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005222:	3104      	adds	r1, #4

08005224 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005224:	480b      	ldr	r0, [pc, #44]	; (8005254 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005226:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005228:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800522a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800522c:	d3f6      	bcc.n	800521c <CopyDataInit>
  ldr  r2, =_sbss
 800522e:	4a0b      	ldr	r2, [pc, #44]	; (800525c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005230:	e002      	b.n	8005238 <LoopFillZerobss>

08005232 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005232:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005234:	f842 3b04 	str.w	r3, [r2], #4

08005238 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005238:	4b09      	ldr	r3, [pc, #36]	; (8005260 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800523a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800523c:	d3f9      	bcc.n	8005232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800523e:	f7ff ffd3 	bl	80051e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005242:	f00b ff7d 	bl	8011140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005246:	f7fb fd09 	bl	8000c5c <main>
  bx  lr    
 800524a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800524c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005250:	08014e54 	.word	0x08014e54
  ldr  r0, =_sdata
 8005254:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005258:	2000013c 	.word	0x2000013c
  ldr  r2, =_sbss
 800525c:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
 8005260:	20009b24 	.word	0x20009b24

08005264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005264:	e7fe      	b.n	8005264 <ADC_IRQHandler>
	...

08005268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800526c:	4b0e      	ldr	r3, [pc, #56]	; (80052a8 <HAL_Init+0x40>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a0d      	ldr	r2, [pc, #52]	; (80052a8 <HAL_Init+0x40>)
 8005272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005278:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <HAL_Init+0x40>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a0a      	ldr	r2, [pc, #40]	; (80052a8 <HAL_Init+0x40>)
 800527e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005284:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <HAL_Init+0x40>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a07      	ldr	r2, [pc, #28]	; (80052a8 <HAL_Init+0x40>)
 800528a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005290:	2003      	movs	r0, #3
 8005292:	f000 f8fc 	bl	800548e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005296:	200f      	movs	r0, #15
 8005298:	f7ff feae 	bl	8004ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800529c:	f7ff fcb0 	bl	8004c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40023c00 	.word	0x40023c00

080052ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <HAL_IncTick+0x20>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <HAL_IncTick+0x24>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4413      	add	r3, r2
 80052bc:	4a04      	ldr	r2, [pc, #16]	; (80052d0 <HAL_IncTick+0x24>)
 80052be:	6013      	str	r3, [r2, #0]
}
 80052c0:	bf00      	nop
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	200000ac 	.word	0x200000ac
 80052d0:	20003c80 	.word	0x20003c80

080052d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  return uwTick;
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <HAL_GetTick+0x14>)
 80052da:	681b      	ldr	r3, [r3, #0]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	20003c80 	.word	0x20003c80

080052ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052f4:	f7ff ffee 	bl	80052d4 <HAL_GetTick>
 80052f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005304:	d005      	beq.n	8005312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005306:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <HAL_Delay+0x44>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005312:	bf00      	nop
 8005314:	f7ff ffde 	bl	80052d4 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	429a      	cmp	r2, r3
 8005322:	d8f7      	bhi.n	8005314 <HAL_Delay+0x28>
  {
  }
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	200000ac 	.word	0x200000ac

08005334 <__NVIC_SetPriorityGrouping>:
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <__NVIC_SetPriorityGrouping+0x44>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005350:	4013      	ands	r3, r2
 8005352:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800535c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005366:	4a04      	ldr	r2, [pc, #16]	; (8005378 <__NVIC_SetPriorityGrouping+0x44>)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	60d3      	str	r3, [r2, #12]
}
 800536c:	bf00      	nop
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	e000ed00 	.word	0xe000ed00

0800537c <__NVIC_GetPriorityGrouping>:
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005380:	4b04      	ldr	r3, [pc, #16]	; (8005394 <__NVIC_GetPriorityGrouping+0x18>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	0a1b      	lsrs	r3, r3, #8
 8005386:	f003 0307 	and.w	r3, r3, #7
}
 800538a:	4618      	mov	r0, r3
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	e000ed00 	.word	0xe000ed00

08005398 <__NVIC_EnableIRQ>:
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	4603      	mov	r3, r0
 80053a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	db0b      	blt.n	80053c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053aa:	79fb      	ldrb	r3, [r7, #7]
 80053ac:	f003 021f 	and.w	r2, r3, #31
 80053b0:	4907      	ldr	r1, [pc, #28]	; (80053d0 <__NVIC_EnableIRQ+0x38>)
 80053b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	2001      	movs	r0, #1
 80053ba:	fa00 f202 	lsl.w	r2, r0, r2
 80053be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	e000e100 	.word	0xe000e100

080053d4 <__NVIC_SetPriority>:
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	6039      	str	r1, [r7, #0]
 80053de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	db0a      	blt.n	80053fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	490c      	ldr	r1, [pc, #48]	; (8005420 <__NVIC_SetPriority+0x4c>)
 80053ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f2:	0112      	lsls	r2, r2, #4
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	440b      	add	r3, r1
 80053f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80053fc:	e00a      	b.n	8005414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	b2da      	uxtb	r2, r3
 8005402:	4908      	ldr	r1, [pc, #32]	; (8005424 <__NVIC_SetPriority+0x50>)
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	3b04      	subs	r3, #4
 800540c:	0112      	lsls	r2, r2, #4
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	440b      	add	r3, r1
 8005412:	761a      	strb	r2, [r3, #24]
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	e000e100 	.word	0xe000e100
 8005424:	e000ed00 	.word	0xe000ed00

08005428 <NVIC_EncodePriority>:
{
 8005428:	b480      	push	{r7}
 800542a:	b089      	sub	sp, #36	; 0x24
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f1c3 0307 	rsb	r3, r3, #7
 8005442:	2b04      	cmp	r3, #4
 8005444:	bf28      	it	cs
 8005446:	2304      	movcs	r3, #4
 8005448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	3304      	adds	r3, #4
 800544e:	2b06      	cmp	r3, #6
 8005450:	d902      	bls.n	8005458 <NVIC_EncodePriority+0x30>
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	3b03      	subs	r3, #3
 8005456:	e000      	b.n	800545a <NVIC_EncodePriority+0x32>
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800545c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	43da      	mvns	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	401a      	ands	r2, r3
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005470:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	fa01 f303 	lsl.w	r3, r1, r3
 800547a:	43d9      	mvns	r1, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005480:	4313      	orrs	r3, r2
}
 8005482:	4618      	mov	r0, r3
 8005484:	3724      	adds	r7, #36	; 0x24
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b082      	sub	sp, #8
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff ff4c 	bl	8005334 <__NVIC_SetPriorityGrouping>
}
 800549c:	bf00      	nop
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054b6:	f7ff ff61 	bl	800537c <__NVIC_GetPriorityGrouping>
 80054ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	6978      	ldr	r0, [r7, #20]
 80054c2:	f7ff ffb1 	bl	8005428 <NVIC_EncodePriority>
 80054c6:	4602      	mov	r2, r0
 80054c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054cc:	4611      	mov	r1, r2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff ff80 	bl	80053d4 <__NVIC_SetPriority>
}
 80054d4:	bf00      	nop
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	4603      	mov	r3, r0
 80054e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff ff54 	bl	8005398 <__NVIC_EnableIRQ>
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005504:	f7ff fee6 	bl	80052d4 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e099      	b.n	8005648 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0201 	bic.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005534:	e00f      	b.n	8005556 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005536:	f7ff fecd 	bl	80052d4 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b05      	cmp	r3, #5
 8005542:	d908      	bls.n	8005556 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2203      	movs	r2, #3
 800554e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e078      	b.n	8005648 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1e8      	bne.n	8005536 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4b38      	ldr	r3, [pc, #224]	; (8005650 <HAL_DMA_Init+0x158>)
 8005570:	4013      	ands	r3, r2
 8005572:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005582:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800558e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800559a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d107      	bne.n	80055c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	4313      	orrs	r3, r2
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f023 0307 	bic.w	r3, r3, #7
 80055d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d117      	bne.n	800561a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00e      	beq.n	800561a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fb01 	bl	8005c04 <DMA_CheckFifoParam>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d008      	beq.n	800561a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2240      	movs	r2, #64	; 0x40
 800560c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005616:	2301      	movs	r3, #1
 8005618:	e016      	b.n	8005648 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fab8 	bl	8005b98 <DMA_CalcBaseAndBitshift>
 8005628:	4603      	mov	r3, r0
 800562a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005630:	223f      	movs	r2, #63	; 0x3f
 8005632:	409a      	lsls	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	f010803f 	.word	0xf010803f

08005654 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005672:	2b01      	cmp	r3, #1
 8005674:	d101      	bne.n	800567a <HAL_DMA_Start_IT+0x26>
 8005676:	2302      	movs	r3, #2
 8005678:	e040      	b.n	80056fc <HAL_DMA_Start_IT+0xa8>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b01      	cmp	r3, #1
 800568c:	d12f      	bne.n	80056ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2202      	movs	r2, #2
 8005692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 fa4a 	bl	8005b3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ac:	223f      	movs	r2, #63	; 0x3f
 80056ae:	409a      	lsls	r2, r3
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0216 	orr.w	r2, r2, #22
 80056c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d007      	beq.n	80056dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0208 	orr.w	r2, r2, #8
 80056da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	e005      	b.n	80056fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
 80056f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005710:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005712:	f7ff fddf 	bl	80052d4 <HAL_GetTick>
 8005716:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d008      	beq.n	8005736 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2280      	movs	r2, #128	; 0x80
 8005728:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e052      	b.n	80057dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0216 	bic.w	r2, r2, #22
 8005744:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695a      	ldr	r2, [r3, #20]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005754:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d103      	bne.n	8005766 <HAL_DMA_Abort+0x62>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005762:	2b00      	cmp	r3, #0
 8005764:	d007      	beq.n	8005776 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0208 	bic.w	r2, r2, #8
 8005774:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0201 	bic.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005786:	e013      	b.n	80057b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005788:	f7ff fda4 	bl	80052d4 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b05      	cmp	r3, #5
 8005794:	d90c      	bls.n	80057b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2203      	movs	r2, #3
 80057a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e015      	b.n	80057dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e4      	bne.n	8005788 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c2:	223f      	movs	r2, #63	; 0x3f
 80057c4:	409a      	lsls	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d004      	beq.n	8005802 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2280      	movs	r2, #128	; 0x80
 80057fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e00c      	b.n	800581c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2205      	movs	r2, #5
 8005806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0201 	bic.w	r2, r2, #1
 8005818:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005834:	4b8e      	ldr	r3, [pc, #568]	; (8005a70 <HAL_DMA_IRQHandler+0x248>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a8e      	ldr	r2, [pc, #568]	; (8005a74 <HAL_DMA_IRQHandler+0x24c>)
 800583a:	fba2 2303 	umull	r2, r3, r2, r3
 800583e:	0a9b      	lsrs	r3, r3, #10
 8005840:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005846:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005852:	2208      	movs	r2, #8
 8005854:	409a      	lsls	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4013      	ands	r3, r2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d01a      	beq.n	8005894 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d013      	beq.n	8005894 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0204 	bic.w	r2, r2, #4
 800587a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005880:	2208      	movs	r2, #8
 8005882:	409a      	lsls	r2, r3
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588c:	f043 0201 	orr.w	r2, r3, #1
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005898:	2201      	movs	r2, #1
 800589a:	409a      	lsls	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4013      	ands	r3, r2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d012      	beq.n	80058ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00b      	beq.n	80058ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b6:	2201      	movs	r2, #1
 80058b8:	409a      	lsls	r2, r3
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c2:	f043 0202 	orr.w	r2, r3, #2
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ce:	2204      	movs	r2, #4
 80058d0:	409a      	lsls	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4013      	ands	r3, r2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d012      	beq.n	8005900 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00b      	beq.n	8005900 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ec:	2204      	movs	r2, #4
 80058ee:	409a      	lsls	r2, r3
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f8:	f043 0204 	orr.w	r2, r3, #4
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005904:	2210      	movs	r2, #16
 8005906:	409a      	lsls	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d043      	beq.n	8005998 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b00      	cmp	r3, #0
 800591c:	d03c      	beq.n	8005998 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005922:	2210      	movs	r2, #16
 8005924:	409a      	lsls	r2, r3
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d018      	beq.n	800596a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d108      	bne.n	8005958 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d024      	beq.n	8005998 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
 8005956:	e01f      	b.n	8005998 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01b      	beq.n	8005998 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	4798      	blx	r3
 8005968:	e016      	b.n	8005998 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005974:	2b00      	cmp	r3, #0
 8005976:	d107      	bne.n	8005988 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0208 	bic.w	r2, r2, #8
 8005986:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599c:	2220      	movs	r2, #32
 800599e:	409a      	lsls	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4013      	ands	r3, r2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 808f 	beq.w	8005ac8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8087 	beq.w	8005ac8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059be:	2220      	movs	r2, #32
 80059c0:	409a      	lsls	r2, r3
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b05      	cmp	r3, #5
 80059d0:	d136      	bne.n	8005a40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0216 	bic.w	r2, r2, #22
 80059e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695a      	ldr	r2, [r3, #20]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d103      	bne.n	8005a02 <HAL_DMA_IRQHandler+0x1da>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d007      	beq.n	8005a12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0208 	bic.w	r2, r2, #8
 8005a10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a16:	223f      	movs	r2, #63	; 0x3f
 8005a18:	409a      	lsls	r2, r3
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d07e      	beq.n	8005b34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	4798      	blx	r3
        }
        return;
 8005a3e:	e079      	b.n	8005b34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d01d      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10d      	bne.n	8005a78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d031      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	4798      	blx	r3
 8005a6c:	e02c      	b.n	8005ac8 <HAL_DMA_IRQHandler+0x2a0>
 8005a6e:	bf00      	nop
 8005a70:	200000a4 	.word	0x200000a4
 8005a74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d023      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	4798      	blx	r3
 8005a88:	e01e      	b.n	8005ac8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10f      	bne.n	8005ab8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0210 	bic.w	r2, r2, #16
 8005aa6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d032      	beq.n	8005b36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d022      	beq.n	8005b22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2205      	movs	r2, #5
 8005ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0201 	bic.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	3301      	adds	r3, #1
 8005af8:	60bb      	str	r3, [r7, #8]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d307      	bcc.n	8005b10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1f2      	bne.n	8005af4 <HAL_DMA_IRQHandler+0x2cc>
 8005b0e:	e000      	b.n	8005b12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005b10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	4798      	blx	r3
 8005b32:	e000      	b.n	8005b36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005b34:	bf00      	nop
    }
  }
}
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	2b40      	cmp	r3, #64	; 0x40
 8005b68:	d108      	bne.n	8005b7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b7a:	e007      	b.n	8005b8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	60da      	str	r2, [r3, #12]
}
 8005b8c:	bf00      	nop
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	3b10      	subs	r3, #16
 8005ba8:	4a14      	ldr	r2, [pc, #80]	; (8005bfc <DMA_CalcBaseAndBitshift+0x64>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	091b      	lsrs	r3, r3, #4
 8005bb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005bb2:	4a13      	ldr	r2, [pc, #76]	; (8005c00 <DMA_CalcBaseAndBitshift+0x68>)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d909      	bls.n	8005bda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	1d1a      	adds	r2, r3, #4
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	659a      	str	r2, [r3, #88]	; 0x58
 8005bd8:	e007      	b.n	8005bea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005be2:	f023 0303 	bic.w	r3, r3, #3
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	aaaaaaab 	.word	0xaaaaaaab
 8005c00:	08014bf0 	.word	0x08014bf0

08005c04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d11f      	bne.n	8005c5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d856      	bhi.n	8005cd2 <DMA_CheckFifoParam+0xce>
 8005c24:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <DMA_CheckFifoParam+0x28>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005c3d 	.word	0x08005c3d
 8005c30:	08005c4f 	.word	0x08005c4f
 8005c34:	08005c3d 	.word	0x08005c3d
 8005c38:	08005cd3 	.word	0x08005cd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d046      	beq.n	8005cd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c4c:	e043      	b.n	8005cd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c56:	d140      	bne.n	8005cda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c5c:	e03d      	b.n	8005cda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c66:	d121      	bne.n	8005cac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d837      	bhi.n	8005cde <DMA_CheckFifoParam+0xda>
 8005c6e:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <DMA_CheckFifoParam+0x70>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005c85 	.word	0x08005c85
 8005c78:	08005c8b 	.word	0x08005c8b
 8005c7c:	08005c85 	.word	0x08005c85
 8005c80:	08005c9d 	.word	0x08005c9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	73fb      	strb	r3, [r7, #15]
      break;
 8005c88:	e030      	b.n	8005cec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d025      	beq.n	8005ce2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c9a:	e022      	b.n	8005ce2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ca4:	d11f      	bne.n	8005ce6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005caa:	e01c      	b.n	8005ce6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d903      	bls.n	8005cba <DMA_CheckFifoParam+0xb6>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d003      	beq.n	8005cc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005cb8:	e018      	b.n	8005cec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8005cbe:	e015      	b.n	8005cec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00e      	beq.n	8005cea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd0:	e00b      	b.n	8005cea <DMA_CheckFifoParam+0xe6>
      break;
 8005cd2:	bf00      	nop
 8005cd4:	e00a      	b.n	8005cec <DMA_CheckFifoParam+0xe8>
      break;
 8005cd6:	bf00      	nop
 8005cd8:	e008      	b.n	8005cec <DMA_CheckFifoParam+0xe8>
      break;
 8005cda:	bf00      	nop
 8005cdc:	e006      	b.n	8005cec <DMA_CheckFifoParam+0xe8>
      break;
 8005cde:	bf00      	nop
 8005ce0:	e004      	b.n	8005cec <DMA_CheckFifoParam+0xe8>
      break;
 8005ce2:	bf00      	nop
 8005ce4:	e002      	b.n	8005cec <DMA_CheckFifoParam+0xe8>
      break;   
 8005ce6:	bf00      	nop
 8005ce8:	e000      	b.n	8005cec <DMA_CheckFifoParam+0xe8>
      break;
 8005cea:	bf00      	nop
    }
  } 
  
  return status; 
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop

08005cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b089      	sub	sp, #36	; 0x24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d12:	2300      	movs	r3, #0
 8005d14:	61fb      	str	r3, [r7, #28]
 8005d16:	e16b      	b.n	8005ff0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d18:	2201      	movs	r2, #1
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	f040 815a 	bne.w	8005fea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d005      	beq.n	8005d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d130      	bne.n	8005db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	2203      	movs	r2, #3
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4013      	ands	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d84:	2201      	movs	r2, #1
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	4013      	ands	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	091b      	lsrs	r3, r3, #4
 8005d9a:	f003 0201 	and.w	r2, r3, #1
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f003 0303 	and.w	r3, r3, #3
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d017      	beq.n	8005dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	43db      	mvns	r3, r3
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f003 0303 	and.w	r3, r3, #3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d123      	bne.n	8005e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	08da      	lsrs	r2, r3, #3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3208      	adds	r2, #8
 8005e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	220f      	movs	r2, #15
 8005e10:	fa02 f303 	lsl.w	r3, r2, r3
 8005e14:	43db      	mvns	r3, r3
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	691a      	ldr	r2, [r3, #16]
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	08da      	lsrs	r2, r3, #3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3208      	adds	r2, #8
 8005e3a:	69b9      	ldr	r1, [r7, #24]
 8005e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	2203      	movs	r2, #3
 8005e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e50:	43db      	mvns	r3, r3
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	4013      	ands	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f003 0203 	and.w	r2, r3, #3
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 80b4 	beq.w	8005fea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	4b60      	ldr	r3, [pc, #384]	; (8006008 <HAL_GPIO_Init+0x30c>)
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	4a5f      	ldr	r2, [pc, #380]	; (8006008 <HAL_GPIO_Init+0x30c>)
 8005e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e90:	6453      	str	r3, [r2, #68]	; 0x44
 8005e92:	4b5d      	ldr	r3, [pc, #372]	; (8006008 <HAL_GPIO_Init+0x30c>)
 8005e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e9e:	4a5b      	ldr	r2, [pc, #364]	; (800600c <HAL_GPIO_Init+0x310>)
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	089b      	lsrs	r3, r3, #2
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	220f      	movs	r2, #15
 8005eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eba:	43db      	mvns	r3, r3
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a52      	ldr	r2, [pc, #328]	; (8006010 <HAL_GPIO_Init+0x314>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d02b      	beq.n	8005f22 <HAL_GPIO_Init+0x226>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a51      	ldr	r2, [pc, #324]	; (8006014 <HAL_GPIO_Init+0x318>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d025      	beq.n	8005f1e <HAL_GPIO_Init+0x222>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a50      	ldr	r2, [pc, #320]	; (8006018 <HAL_GPIO_Init+0x31c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d01f      	beq.n	8005f1a <HAL_GPIO_Init+0x21e>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a4f      	ldr	r2, [pc, #316]	; (800601c <HAL_GPIO_Init+0x320>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d019      	beq.n	8005f16 <HAL_GPIO_Init+0x21a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a4e      	ldr	r2, [pc, #312]	; (8006020 <HAL_GPIO_Init+0x324>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <HAL_GPIO_Init+0x216>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a4d      	ldr	r2, [pc, #308]	; (8006024 <HAL_GPIO_Init+0x328>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00d      	beq.n	8005f0e <HAL_GPIO_Init+0x212>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a4c      	ldr	r2, [pc, #304]	; (8006028 <HAL_GPIO_Init+0x32c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d007      	beq.n	8005f0a <HAL_GPIO_Init+0x20e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a4b      	ldr	r2, [pc, #300]	; (800602c <HAL_GPIO_Init+0x330>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d101      	bne.n	8005f06 <HAL_GPIO_Init+0x20a>
 8005f02:	2307      	movs	r3, #7
 8005f04:	e00e      	b.n	8005f24 <HAL_GPIO_Init+0x228>
 8005f06:	2308      	movs	r3, #8
 8005f08:	e00c      	b.n	8005f24 <HAL_GPIO_Init+0x228>
 8005f0a:	2306      	movs	r3, #6
 8005f0c:	e00a      	b.n	8005f24 <HAL_GPIO_Init+0x228>
 8005f0e:	2305      	movs	r3, #5
 8005f10:	e008      	b.n	8005f24 <HAL_GPIO_Init+0x228>
 8005f12:	2304      	movs	r3, #4
 8005f14:	e006      	b.n	8005f24 <HAL_GPIO_Init+0x228>
 8005f16:	2303      	movs	r3, #3
 8005f18:	e004      	b.n	8005f24 <HAL_GPIO_Init+0x228>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e002      	b.n	8005f24 <HAL_GPIO_Init+0x228>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <HAL_GPIO_Init+0x228>
 8005f22:	2300      	movs	r3, #0
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	f002 0203 	and.w	r2, r2, #3
 8005f2a:	0092      	lsls	r2, r2, #2
 8005f2c:	4093      	lsls	r3, r2
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f34:	4935      	ldr	r1, [pc, #212]	; (800600c <HAL_GPIO_Init+0x310>)
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	089b      	lsrs	r3, r3, #2
 8005f3a:	3302      	adds	r3, #2
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f42:	4b3b      	ldr	r3, [pc, #236]	; (8006030 <HAL_GPIO_Init+0x334>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	43db      	mvns	r3, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f66:	4a32      	ldr	r2, [pc, #200]	; (8006030 <HAL_GPIO_Init+0x334>)
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f6c:	4b30      	ldr	r3, [pc, #192]	; (8006030 <HAL_GPIO_Init+0x334>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	43db      	mvns	r3, r3
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f90:	4a27      	ldr	r2, [pc, #156]	; (8006030 <HAL_GPIO_Init+0x334>)
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005f96:	4b26      	ldr	r3, [pc, #152]	; (8006030 <HAL_GPIO_Init+0x334>)
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	43db      	mvns	r3, r3
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fba:	4a1d      	ldr	r2, [pc, #116]	; (8006030 <HAL_GPIO_Init+0x334>)
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fc0:	4b1b      	ldr	r3, [pc, #108]	; (8006030 <HAL_GPIO_Init+0x334>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	43db      	mvns	r3, r3
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005fe4:	4a12      	ldr	r2, [pc, #72]	; (8006030 <HAL_GPIO_Init+0x334>)
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	3301      	adds	r3, #1
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	2b0f      	cmp	r3, #15
 8005ff4:	f67f ae90 	bls.w	8005d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	bf00      	nop
 8005ffc:	3724      	adds	r7, #36	; 0x24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40023800 	.word	0x40023800
 800600c:	40013800 	.word	0x40013800
 8006010:	40020000 	.word	0x40020000
 8006014:	40020400 	.word	0x40020400
 8006018:	40020800 	.word	0x40020800
 800601c:	40020c00 	.word	0x40020c00
 8006020:	40021000 	.word	0x40021000
 8006024:	40021400 	.word	0x40021400
 8006028:	40021800 	.word	0x40021800
 800602c:	40021c00 	.word	0x40021c00
 8006030:	40013c00 	.word	0x40013c00

08006034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	807b      	strh	r3, [r7, #2]
 8006040:	4613      	mov	r3, r2
 8006042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006044:	787b      	ldrb	r3, [r7, #1]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800604a:	887a      	ldrh	r2, [r7, #2]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006050:	e003      	b.n	800605a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006052:	887b      	ldrh	r3, [r7, #2]
 8006054:	041a      	lsls	r2, r3, #16
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	619a      	str	r2, [r3, #24]
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	460b      	mov	r3, r1
 8006070:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006078:	887a      	ldrh	r2, [r7, #2]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4013      	ands	r3, r2
 800607e:	041a      	lsls	r2, r3, #16
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	43d9      	mvns	r1, r3
 8006084:	887b      	ldrh	r3, [r7, #2]
 8006086:	400b      	ands	r3, r1
 8006088:	431a      	orrs	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	619a      	str	r2, [r3, #24]
}
 800608e:	bf00      	nop
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	60f8      	str	r0, [r7, #12]
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e03e      	b.n	800612e <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d106      	bne.n	80060ca <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f7fe ff8d 	bl	8004fe4 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3304      	adds	r3, #4
 80060d2:	4619      	mov	r1, r3
 80060d4:	4610      	mov	r0, r2
 80060d6:	f003 fda1 	bl	8009c1c <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6818      	ldr	r0, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	461a      	mov	r2, r3
 80060e4:	68b9      	ldr	r1, [r7, #8]
 80060e6:	f003 fde5 	bl	8009cb4 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	461a      	mov	r2, r3
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	f003 fe12 	bl	8009d1e <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b10      	cmp	r3, #16
 8006100:	d108      	bne.n	8006114 <HAL_NAND_Init+0x7a>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0204 	orr.w	r2, r2, #4
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	e007      	b.n	8006124 <HAL_NAND_Init+0x8a>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6a1a      	ldr	r2, [r3, #32]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0204 	orr.w	r2, r2, #4
 8006122:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b082      	sub	sp, #8
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2b10      	cmp	r3, #16
 8006144:	d10a      	bne.n	800615c <HAL_NAND_IRQHandler+0x26>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b01      	cmp	r3, #1
 8006152:	bf0c      	ite	eq
 8006154:	2301      	moveq	r3, #1
 8006156:	2300      	movne	r3, #0
 8006158:	b2db      	uxtb	r3, r3
 800615a:	e009      	b.n	8006170 <HAL_NAND_IRQHandler+0x3a>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b01      	cmp	r3, #1
 8006168:	bf0c      	ite	eq
 800616a:	2301      	moveq	r3, #1
 800616c:	2300      	movne	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d017      	beq.n	80061a4 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f8b2 	bl	80062de <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	2b10      	cmp	r3, #16
 8006180:	d108      	bne.n	8006194 <HAL_NAND_IRQHandler+0x5e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0201 	bic.w	r2, r2, #1
 8006190:	605a      	str	r2, [r3, #4]
 8006192:	e007      	b.n	80061a4 <HAL_NAND_IRQHandler+0x6e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0201 	bic.w	r2, r2, #1
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b10      	cmp	r3, #16
 80061aa:	d10a      	bne.n	80061c2 <HAL_NAND_IRQHandler+0x8c>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	bf0c      	ite	eq
 80061ba:	2301      	moveq	r3, #1
 80061bc:	2300      	movne	r3, #0
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	e009      	b.n	80061d6 <HAL_NAND_IRQHandler+0xa0>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	bf0c      	ite	eq
 80061d0:	2301      	moveq	r3, #1
 80061d2:	2300      	movne	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d017      	beq.n	800620a <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f87f 	bl	80062de <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	2b10      	cmp	r3, #16
 80061e6:	d108      	bne.n	80061fa <HAL_NAND_IRQHandler+0xc4>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0202 	bic.w	r2, r2, #2
 80061f6:	605a      	str	r2, [r3, #4]
 80061f8:	e007      	b.n	800620a <HAL_NAND_IRQHandler+0xd4>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0202 	bic.w	r2, r2, #2
 8006208:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2b10      	cmp	r3, #16
 8006210:	d10a      	bne.n	8006228 <HAL_NAND_IRQHandler+0xf2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b04      	cmp	r3, #4
 800621e:	bf0c      	ite	eq
 8006220:	2301      	moveq	r3, #1
 8006222:	2300      	movne	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	e009      	b.n	800623c <HAL_NAND_IRQHandler+0x106>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	f003 0304 	and.w	r3, r3, #4
 8006232:	2b04      	cmp	r3, #4
 8006234:	bf0c      	ite	eq
 8006236:	2301      	moveq	r3, #1
 8006238:	2300      	movne	r3, #0
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d017      	beq.n	8006270 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f84c 	bl	80062de <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b10      	cmp	r3, #16
 800624c:	d108      	bne.n	8006260 <HAL_NAND_IRQHandler+0x12a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0204 	bic.w	r2, r2, #4
 800625c:	605a      	str	r2, [r3, #4]
 800625e:	e007      	b.n	8006270 <HAL_NAND_IRQHandler+0x13a>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0204 	bic.w	r2, r2, #4
 800626e:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b10      	cmp	r3, #16
 8006276:	d10a      	bne.n	800628e <HAL_NAND_IRQHandler+0x158>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006282:	2b40      	cmp	r3, #64	; 0x40
 8006284:	bf0c      	ite	eq
 8006286:	2301      	moveq	r3, #1
 8006288:	2300      	movne	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	e009      	b.n	80062a2 <HAL_NAND_IRQHandler+0x16c>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006298:	2b40      	cmp	r3, #64	; 0x40
 800629a:	bf0c      	ite	eq
 800629c:	2301      	moveq	r3, #1
 800629e:	2300      	movne	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d017      	beq.n	80062d6 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f819 	bl	80062de <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d108      	bne.n	80062c6 <HAL_NAND_IRQHandler+0x190>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c2:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 80062c4:	e007      	b.n	80062d6 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80062d6:	bf00      	nop
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer,
                                         uint32_t NumPageToWrite)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b08c      	sub	sp, #48	; 0x30
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	607a      	str	r2, [r7, #4]
 80062fe:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d101      	bne.n	800631c <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8006318:	2302      	movs	r3, #2
 800631a:	e13e      	b.n	800659a <HAL_NAND_Write_Page_8b+0x2a8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b01      	cmp	r3, #1
 8006326:	f040 8137 	bne.w	8006598 <HAL_NAND_Write_Page_8b+0x2a6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_NAND_Write_Page_8b+0x46>
 8006334:	2302      	movs	r3, #2
 8006336:	e130      	b.n	800659a <HAL_NAND_Write_Page_8b+0x2a8>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    else
    {
      deviceaddress = NAND_DEVICE2;
    }
#else
    deviceaddress = NAND_DEVICE;
 8006348:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800634c:	61bb      	str	r3, [r7, #24]
#endif

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	4619      	mov	r1, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	889b      	ldrh	r3, [r3, #4]
 8006358:	461a      	mov	r2, r3
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	885b      	ldrh	r3, [r3, #2]
 800635e:	4618      	mov	r0, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	fb00 f303 	mul.w	r3, r0, r3
 8006368:	4413      	add	r3, r2
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800636e:	fb02 f303 	mul.w	r3, r2, r3
 8006372:	440b      	add	r3, r1
 8006374:	627b      	str	r3, [r7, #36]	; 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8006376:	e0f8      	b.n	800656a <HAL_NAND_Write_Page_8b+0x278>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800637e:	2200      	movs	r2, #0
 8006380:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006382:	f3bf 8f4f 	dsb	sy
}
 8006386:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800638e:	2280      	movs	r2, #128	; 0x80
 8006390:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006392:	f3bf 8f4f 	dsb	sy
}
 8006396:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a0:	d848      	bhi.n	8006434 <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80063aa:	fb02 f303 	mul.w	r3, r2, r3
 80063ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b2:	d21a      	bcs.n	80063ea <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80063be:	f3bf 8f4f 	dsb	sy
}
 80063c2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80063d0:	f3bf 8f4f 	dsb	sy
}
 80063d4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	0a1a      	lsrs	r2, r3, #8
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80063e4:	f3bf 8f4f 	dsb	sy
}
 80063e8:	e07d      	b.n	80064e6 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80063f4:	f3bf 8f4f 	dsb	sy
}
 80063f8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006406:	f3bf 8f4f 	dsb	sy
}
 800640a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	0a1a      	lsrs	r2, r3, #8
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800641a:	f3bf 8f4f 	dsb	sy
}
 800641e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	0c1a      	lsrs	r2, r3, #16
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800642e:	f3bf 8f4f 	dsb	sy
}
 8006432:	e058      	b.n	80064e6 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800643c:	fb02 f303 	mul.w	r3, r2, r3
 8006440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006444:	d222      	bcs.n	800648c <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800644c:	2200      	movs	r2, #0
 800644e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006450:	f3bf 8f4f 	dsb	sy
}
 8006454:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800645c:	2200      	movs	r2, #0
 800645e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006460:	f3bf 8f4f 	dsb	sy
}
 8006464:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800646c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006472:	f3bf 8f4f 	dsb	sy
}
 8006476:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	0a1a      	lsrs	r2, r3, #8
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006482:	b2d2      	uxtb	r2, r2
 8006484:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006486:	f3bf 8f4f 	dsb	sy
}
 800648a:	e02c      	b.n	80064e6 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006492:	2200      	movs	r2, #0
 8006494:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006496:	f3bf 8f4f 	dsb	sy
}
 800649a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064a2:	2200      	movs	r2, #0
 80064a4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80064a6:	f3bf 8f4f 	dsb	sy
}
 80064aa:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80064b8:	f3bf 8f4f 	dsb	sy
}
 80064bc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	0a1a      	lsrs	r2, r3, #8
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064c8:	b2d2      	uxtb	r2, r2
 80064ca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80064cc:	f3bf 8f4f 	dsb	sy
}
 80064d0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	0c1a      	lsrs	r2, r3, #16
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80064e0:	f3bf 8f4f 	dsb	sy
}
 80064e4:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 80064e6:	2300      	movs	r3, #0
 80064e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ea:	e00c      	b.n	8006506 <HAL_NAND_Write_Page_8b+0x214>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	69fa      	ldr	r2, [r7, #28]
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	701a      	strb	r2, [r3, #0]
        buff++;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	3301      	adds	r3, #1
 80064f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 80064fa:	f3bf 8f4f 	dsb	sy
}
 80064fe:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	3301      	adds	r3, #1
 8006504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800650c:	429a      	cmp	r2, r3
 800650e:	d3ed      	bcc.n	80064ec <HAL_NAND_Write_Page_8b+0x1fa>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006516:	2210      	movs	r2, #16
 8006518:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800651a:	f3bf 8f4f 	dsb	sy
}
 800651e:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8006520:	f7fe fed8 	bl	80052d4 <HAL_GetTick>
 8006524:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8006526:	e011      	b.n	800654c <HAL_NAND_Write_Page_8b+0x25a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8006528:	f7fe fed4 	bl	80052d4 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006536:	d909      	bls.n	800654c <HAL_NAND_Write_Page_8b+0x25a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2203      	movs	r2, #3
 800653c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e026      	b.n	800659a <HAL_NAND_Write_Page_8b+0x2a8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f85f 	bl	8006610 <HAL_NAND_Read_Status>
 8006552:	4603      	mov	r3, r0
 8006554:	2b40      	cmp	r3, #64	; 0x40
 8006556:	d1e7      	bne.n	8006528 <HAL_NAND_Write_Page_8b+0x236>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	3301      	adds	r3, #1
 800655c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Decrement pages to write */
      nbpages--;
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	3b01      	subs	r3, #1
 8006562:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	3301      	adds	r3, #1
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d009      	beq.n	8006584 <HAL_NAND_Write_Page_8b+0x292>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006578:	fb02 f303 	mul.w	r3, r2, r3
 800657c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657e:	429a      	cmp	r2, r3
 8006580:	f4ff aefa 	bcc.w	8006378 <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	e000      	b.n	800659a <HAL_NAND_Write_Page_8b+0x2a8>
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
}
 800659a:	4618      	mov	r0, r3
 800659c:	3730      	adds	r7, #48	; 0x30
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_NAND_ECC_Disable>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_ECC_Disable(NAND_HandleTypeDef *hnand)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b082      	sub	sp, #8
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d101      	bne.n	80065ba <HAL_NAND_ECC_Disable+0x18>
  {
    return HAL_BUSY;
 80065b6:	2302      	movs	r3, #2
 80065b8:	e018      	b.n	80065ec <HAL_NAND_ECC_Disable+0x4a>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d111      	bne.n	80065ea <HAL_NAND_ECC_Disable+0x48>
  {
    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2202      	movs	r2, #2
 80065ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable ECC feature */
    (void)FMC_NAND_ECC_Disable(hnand->Instance, hnand->Init.NandBank);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	4619      	mov	r1, r3
 80065d8:	4610      	mov	r0, r2
 80065da:	f003 fbd5 	bl	8009d88 <FSMC_NAND_ECC_Disable>

    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	e000      	b.n	80065ec <HAL_NAND_ECC_Disable+0x4a>
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  return hnand->State;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006602:	b2db      	uxtb	r3, r3
}
 8006604:	4618      	mov	r0, r3
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  else
  {
    deviceaddress = NAND_DEVICE2;
  }
#else
  deviceaddress = NAND_DEVICE;
 8006618:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800661c:	60fb      	str	r3, [r7, #12]
#endif

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006624:	2270      	movs	r2, #112	; 0x70
 8006626:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	b2db      	uxtb	r3, r3
 800662e:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e007      	b.n	800664e <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8006648:	2340      	movs	r3, #64	; 0x40
 800664a:	e000      	b.n	800664e <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 800664c:	2300      	movs	r3, #0
  }
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
	...

0800665c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e267      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d075      	beq.n	8006766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800667a:	4b88      	ldr	r3, [pc, #544]	; (800689c <HAL_RCC_OscConfig+0x240>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 030c 	and.w	r3, r3, #12
 8006682:	2b04      	cmp	r3, #4
 8006684:	d00c      	beq.n	80066a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006686:	4b85      	ldr	r3, [pc, #532]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800668e:	2b08      	cmp	r3, #8
 8006690:	d112      	bne.n	80066b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006692:	4b82      	ldr	r3, [pc, #520]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800669a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800669e:	d10b      	bne.n	80066b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066a0:	4b7e      	ldr	r3, [pc, #504]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d05b      	beq.n	8006764 <HAL_RCC_OscConfig+0x108>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d157      	bne.n	8006764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e242      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c0:	d106      	bne.n	80066d0 <HAL_RCC_OscConfig+0x74>
 80066c2:	4b76      	ldr	r3, [pc, #472]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a75      	ldr	r2, [pc, #468]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	e01d      	b.n	800670c <HAL_RCC_OscConfig+0xb0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066d8:	d10c      	bne.n	80066f4 <HAL_RCC_OscConfig+0x98>
 80066da:	4b70      	ldr	r3, [pc, #448]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a6f      	ldr	r2, [pc, #444]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	4b6d      	ldr	r3, [pc, #436]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a6c      	ldr	r2, [pc, #432]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	e00b      	b.n	800670c <HAL_RCC_OscConfig+0xb0>
 80066f4:	4b69      	ldr	r3, [pc, #420]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a68      	ldr	r2, [pc, #416]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80066fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	4b66      	ldr	r3, [pc, #408]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a65      	ldr	r2, [pc, #404]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800670a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d013      	beq.n	800673c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006714:	f7fe fdde 	bl	80052d4 <HAL_GetTick>
 8006718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800671a:	e008      	b.n	800672e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800671c:	f7fe fdda 	bl	80052d4 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b64      	cmp	r3, #100	; 0x64
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e207      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800672e:	4b5b      	ldr	r3, [pc, #364]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0f0      	beq.n	800671c <HAL_RCC_OscConfig+0xc0>
 800673a:	e014      	b.n	8006766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800673c:	f7fe fdca 	bl	80052d4 <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006744:	f7fe fdc6 	bl	80052d4 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b64      	cmp	r3, #100	; 0x64
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e1f3      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006756:	4b51      	ldr	r3, [pc, #324]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f0      	bne.n	8006744 <HAL_RCC_OscConfig+0xe8>
 8006762:	e000      	b.n	8006766 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d063      	beq.n	800683a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006772:	4b4a      	ldr	r3, [pc, #296]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 030c 	and.w	r3, r3, #12
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00b      	beq.n	8006796 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800677e:	4b47      	ldr	r3, [pc, #284]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006786:	2b08      	cmp	r3, #8
 8006788:	d11c      	bne.n	80067c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800678a:	4b44      	ldr	r3, [pc, #272]	; (800689c <HAL_RCC_OscConfig+0x240>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d116      	bne.n	80067c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006796:	4b41      	ldr	r3, [pc, #260]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d005      	beq.n	80067ae <HAL_RCC_OscConfig+0x152>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d001      	beq.n	80067ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e1c7      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ae:	4b3b      	ldr	r3, [pc, #236]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	4937      	ldr	r1, [pc, #220]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067c2:	e03a      	b.n	800683a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d020      	beq.n	800680e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067cc:	4b34      	ldr	r3, [pc, #208]	; (80068a0 <HAL_RCC_OscConfig+0x244>)
 80067ce:	2201      	movs	r2, #1
 80067d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d2:	f7fe fd7f 	bl	80052d4 <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067d8:	e008      	b.n	80067ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067da:	f7fe fd7b 	bl	80052d4 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e1a8      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ec:	4b2b      	ldr	r3, [pc, #172]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0f0      	beq.n	80067da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067f8:	4b28      	ldr	r3, [pc, #160]	; (800689c <HAL_RCC_OscConfig+0x240>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	4925      	ldr	r1, [pc, #148]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006808:	4313      	orrs	r3, r2
 800680a:	600b      	str	r3, [r1, #0]
 800680c:	e015      	b.n	800683a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800680e:	4b24      	ldr	r3, [pc, #144]	; (80068a0 <HAL_RCC_OscConfig+0x244>)
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006814:	f7fe fd5e 	bl	80052d4 <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800681c:	f7fe fd5a 	bl	80052d4 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e187      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800682e:	4b1b      	ldr	r3, [pc, #108]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1f0      	bne.n	800681c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d036      	beq.n	80068b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d016      	beq.n	800687c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800684e:	4b15      	ldr	r3, [pc, #84]	; (80068a4 <HAL_RCC_OscConfig+0x248>)
 8006850:	2201      	movs	r2, #1
 8006852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006854:	f7fe fd3e 	bl	80052d4 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800685c:	f7fe fd3a 	bl	80052d4 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e167      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800686e:	4b0b      	ldr	r3, [pc, #44]	; (800689c <HAL_RCC_OscConfig+0x240>)
 8006870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0f0      	beq.n	800685c <HAL_RCC_OscConfig+0x200>
 800687a:	e01b      	b.n	80068b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800687c:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <HAL_RCC_OscConfig+0x248>)
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006882:	f7fe fd27 	bl	80052d4 <HAL_GetTick>
 8006886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006888:	e00e      	b.n	80068a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800688a:	f7fe fd23 	bl	80052d4 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d907      	bls.n	80068a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e150      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
 800689c:	40023800 	.word	0x40023800
 80068a0:	42470000 	.word	0x42470000
 80068a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068a8:	4b88      	ldr	r3, [pc, #544]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80068aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1ea      	bne.n	800688a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8097 	beq.w	80069f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068c2:	2300      	movs	r3, #0
 80068c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068c6:	4b81      	ldr	r3, [pc, #516]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10f      	bne.n	80068f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068d2:	2300      	movs	r3, #0
 80068d4:	60bb      	str	r3, [r7, #8]
 80068d6:	4b7d      	ldr	r3, [pc, #500]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	4a7c      	ldr	r2, [pc, #496]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80068dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068e0:	6413      	str	r3, [r2, #64]	; 0x40
 80068e2:	4b7a      	ldr	r3, [pc, #488]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ea:	60bb      	str	r3, [r7, #8]
 80068ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ee:	2301      	movs	r3, #1
 80068f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068f2:	4b77      	ldr	r3, [pc, #476]	; (8006ad0 <HAL_RCC_OscConfig+0x474>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d118      	bne.n	8006930 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068fe:	4b74      	ldr	r3, [pc, #464]	; (8006ad0 <HAL_RCC_OscConfig+0x474>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a73      	ldr	r2, [pc, #460]	; (8006ad0 <HAL_RCC_OscConfig+0x474>)
 8006904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800690a:	f7fe fce3 	bl	80052d4 <HAL_GetTick>
 800690e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006910:	e008      	b.n	8006924 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006912:	f7fe fcdf 	bl	80052d4 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b02      	cmp	r3, #2
 800691e:	d901      	bls.n	8006924 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e10c      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006924:	4b6a      	ldr	r3, [pc, #424]	; (8006ad0 <HAL_RCC_OscConfig+0x474>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0f0      	beq.n	8006912 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d106      	bne.n	8006946 <HAL_RCC_OscConfig+0x2ea>
 8006938:	4b64      	ldr	r3, [pc, #400]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 800693a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693c:	4a63      	ldr	r2, [pc, #396]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	6713      	str	r3, [r2, #112]	; 0x70
 8006944:	e01c      	b.n	8006980 <HAL_RCC_OscConfig+0x324>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	2b05      	cmp	r3, #5
 800694c:	d10c      	bne.n	8006968 <HAL_RCC_OscConfig+0x30c>
 800694e:	4b5f      	ldr	r3, [pc, #380]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006952:	4a5e      	ldr	r2, [pc, #376]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 8006954:	f043 0304 	orr.w	r3, r3, #4
 8006958:	6713      	str	r3, [r2, #112]	; 0x70
 800695a:	4b5c      	ldr	r3, [pc, #368]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	4a5b      	ldr	r2, [pc, #364]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 8006960:	f043 0301 	orr.w	r3, r3, #1
 8006964:	6713      	str	r3, [r2, #112]	; 0x70
 8006966:	e00b      	b.n	8006980 <HAL_RCC_OscConfig+0x324>
 8006968:	4b58      	ldr	r3, [pc, #352]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 800696a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696c:	4a57      	ldr	r2, [pc, #348]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 800696e:	f023 0301 	bic.w	r3, r3, #1
 8006972:	6713      	str	r3, [r2, #112]	; 0x70
 8006974:	4b55      	ldr	r3, [pc, #340]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006978:	4a54      	ldr	r2, [pc, #336]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 800697a:	f023 0304 	bic.w	r3, r3, #4
 800697e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d015      	beq.n	80069b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006988:	f7fe fca4 	bl	80052d4 <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800698e:	e00a      	b.n	80069a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006990:	f7fe fca0 	bl	80052d4 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	f241 3288 	movw	r2, #5000	; 0x1388
 800699e:	4293      	cmp	r3, r2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e0cb      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069a6:	4b49      	ldr	r3, [pc, #292]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80069a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0ee      	beq.n	8006990 <HAL_RCC_OscConfig+0x334>
 80069b2:	e014      	b.n	80069de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069b4:	f7fe fc8e 	bl	80052d4 <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ba:	e00a      	b.n	80069d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069bc:	f7fe fc8a 	bl	80052d4 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e0b5      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069d2:	4b3e      	ldr	r3, [pc, #248]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1ee      	bne.n	80069bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069de:	7dfb      	ldrb	r3, [r7, #23]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d105      	bne.n	80069f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069e4:	4b39      	ldr	r3, [pc, #228]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	4a38      	ldr	r2, [pc, #224]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80069ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 80a1 	beq.w	8006b3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069fa:	4b34      	ldr	r3, [pc, #208]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 030c 	and.w	r3, r3, #12
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d05c      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d141      	bne.n	8006a92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a0e:	4b31      	ldr	r3, [pc, #196]	; (8006ad4 <HAL_RCC_OscConfig+0x478>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a14:	f7fe fc5e 	bl	80052d4 <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a1c:	f7fe fc5a 	bl	80052d4 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e087      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a2e:	4b27      	ldr	r3, [pc, #156]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f0      	bne.n	8006a1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69da      	ldr	r2, [r3, #28]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	019b      	lsls	r3, r3, #6
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a50:	085b      	lsrs	r3, r3, #1
 8006a52:	3b01      	subs	r3, #1
 8006a54:	041b      	lsls	r3, r3, #16
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	061b      	lsls	r3, r3, #24
 8006a5e:	491b      	ldr	r1, [pc, #108]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a64:	4b1b      	ldr	r3, [pc, #108]	; (8006ad4 <HAL_RCC_OscConfig+0x478>)
 8006a66:	2201      	movs	r2, #1
 8006a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a6a:	f7fe fc33 	bl	80052d4 <HAL_GetTick>
 8006a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a70:	e008      	b.n	8006a84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a72:	f7fe fc2f 	bl	80052d4 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e05c      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a84:	4b11      	ldr	r3, [pc, #68]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d0f0      	beq.n	8006a72 <HAL_RCC_OscConfig+0x416>
 8006a90:	e054      	b.n	8006b3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a92:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <HAL_RCC_OscConfig+0x478>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a98:	f7fe fc1c 	bl	80052d4 <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aa0:	f7fe fc18 	bl	80052d4 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e045      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab2:	4b06      	ldr	r3, [pc, #24]	; (8006acc <HAL_RCC_OscConfig+0x470>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f0      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x444>
 8006abe:	e03d      	b.n	8006b3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d107      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e038      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	40007000 	.word	0x40007000
 8006ad4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ad8:	4b1b      	ldr	r3, [pc, #108]	; (8006b48 <HAL_RCC_OscConfig+0x4ec>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d028      	beq.n	8006b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d121      	bne.n	8006b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d11a      	bne.n	8006b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b08:	4013      	ands	r3, r2
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d111      	bne.n	8006b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1e:	085b      	lsrs	r3, r3, #1
 8006b20:	3b01      	subs	r3, #1
 8006b22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d107      	bne.n	8006b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d001      	beq.n	8006b3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e000      	b.n	8006b3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	40023800 	.word	0x40023800

08006b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e0cc      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b60:	4b68      	ldr	r3, [pc, #416]	; (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d90c      	bls.n	8006b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b6e:	4b65      	ldr	r3, [pc, #404]	; (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b76:	4b63      	ldr	r3, [pc, #396]	; (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0307 	and.w	r3, r3, #7
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d001      	beq.n	8006b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e0b8      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0302 	and.w	r3, r3, #2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d020      	beq.n	8006bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d005      	beq.n	8006bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ba0:	4b59      	ldr	r3, [pc, #356]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	4a58      	ldr	r2, [pc, #352]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bb8:	4b53      	ldr	r3, [pc, #332]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	4a52      	ldr	r2, [pc, #328]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bc4:	4b50      	ldr	r3, [pc, #320]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	494d      	ldr	r1, [pc, #308]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d044      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d107      	bne.n	8006bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bea:	4b47      	ldr	r3, [pc, #284]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d119      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e07f      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d003      	beq.n	8006c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d107      	bne.n	8006c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c0a:	4b3f      	ldr	r3, [pc, #252]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d109      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e06f      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c1a:	4b3b      	ldr	r3, [pc, #236]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e067      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c2a:	4b37      	ldr	r3, [pc, #220]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f023 0203 	bic.w	r2, r3, #3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	4934      	ldr	r1, [pc, #208]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c3c:	f7fe fb4a 	bl	80052d4 <HAL_GetTick>
 8006c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c42:	e00a      	b.n	8006c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c44:	f7fe fb46 	bl	80052d4 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e04f      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c5a:	4b2b      	ldr	r3, [pc, #172]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 020c 	and.w	r2, r3, #12
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d1eb      	bne.n	8006c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c6c:	4b25      	ldr	r3, [pc, #148]	; (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0307 	and.w	r3, r3, #7
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d20c      	bcs.n	8006c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c7a:	4b22      	ldr	r3, [pc, #136]	; (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c82:	4b20      	ldr	r3, [pc, #128]	; (8006d04 <HAL_RCC_ClockConfig+0x1b8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d001      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e032      	b.n	8006cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0304 	and.w	r3, r3, #4
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ca0:	4b19      	ldr	r3, [pc, #100]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	4916      	ldr	r1, [pc, #88]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d009      	beq.n	8006cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cbe:	4b12      	ldr	r3, [pc, #72]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	490e      	ldr	r1, [pc, #56]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cd2:	f000 f821 	bl	8006d18 <HAL_RCC_GetSysClockFreq>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <HAL_RCC_ClockConfig+0x1bc>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	091b      	lsrs	r3, r3, #4
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	490a      	ldr	r1, [pc, #40]	; (8006d0c <HAL_RCC_ClockConfig+0x1c0>)
 8006ce4:	5ccb      	ldrb	r3, [r1, r3]
 8006ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cea:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <HAL_RCC_ClockConfig+0x1c4>)
 8006cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006cee:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <HAL_RCC_ClockConfig+0x1c8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe f980 	bl	8004ff8 <HAL_InitTick>

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40023c00 	.word	0x40023c00
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	08014bd8 	.word	0x08014bd8
 8006d10:	200000a4 	.word	0x200000a4
 8006d14:	200000a8 	.word	0x200000a8

08006d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d1c:	b094      	sub	sp, #80	; 0x50
 8006d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	647b      	str	r3, [r7, #68]	; 0x44
 8006d24:	2300      	movs	r3, #0
 8006d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d28:	2300      	movs	r3, #0
 8006d2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d30:	4b79      	ldr	r3, [pc, #484]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 030c 	and.w	r3, r3, #12
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d00d      	beq.n	8006d58 <HAL_RCC_GetSysClockFreq+0x40>
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	f200 80e1 	bhi.w	8006f04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <HAL_RCC_GetSysClockFreq+0x34>
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d003      	beq.n	8006d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d4a:	e0db      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d4c:	4b73      	ldr	r3, [pc, #460]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8006d4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006d50:	e0db      	b.n	8006f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d52:	4b73      	ldr	r3, [pc, #460]	; (8006f20 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d56:	e0d8      	b.n	8006f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d58:	4b6f      	ldr	r3, [pc, #444]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d62:	4b6d      	ldr	r3, [pc, #436]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d063      	beq.n	8006e36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d6e:	4b6a      	ldr	r3, [pc, #424]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	099b      	lsrs	r3, r3, #6
 8006d74:	2200      	movs	r2, #0
 8006d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d80:	633b      	str	r3, [r7, #48]	; 0x30
 8006d82:	2300      	movs	r3, #0
 8006d84:	637b      	str	r3, [r7, #52]	; 0x34
 8006d86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	462b      	mov	r3, r5
 8006d8e:	f04f 0000 	mov.w	r0, #0
 8006d92:	f04f 0100 	mov.w	r1, #0
 8006d96:	0159      	lsls	r1, r3, #5
 8006d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d9c:	0150      	lsls	r0, r2, #5
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4621      	mov	r1, r4
 8006da4:	1a51      	subs	r1, r2, r1
 8006da6:	6139      	str	r1, [r7, #16]
 8006da8:	4629      	mov	r1, r5
 8006daa:	eb63 0301 	sbc.w	r3, r3, r1
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	f04f 0300 	mov.w	r3, #0
 8006db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006dbc:	4659      	mov	r1, fp
 8006dbe:	018b      	lsls	r3, r1, #6
 8006dc0:	4651      	mov	r1, sl
 8006dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dc6:	4651      	mov	r1, sl
 8006dc8:	018a      	lsls	r2, r1, #6
 8006dca:	4651      	mov	r1, sl
 8006dcc:	ebb2 0801 	subs.w	r8, r2, r1
 8006dd0:	4659      	mov	r1, fp
 8006dd2:	eb63 0901 	sbc.w	r9, r3, r1
 8006dd6:	f04f 0200 	mov.w	r2, #0
 8006dda:	f04f 0300 	mov.w	r3, #0
 8006dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dea:	4690      	mov	r8, r2
 8006dec:	4699      	mov	r9, r3
 8006dee:	4623      	mov	r3, r4
 8006df0:	eb18 0303 	adds.w	r3, r8, r3
 8006df4:	60bb      	str	r3, [r7, #8]
 8006df6:	462b      	mov	r3, r5
 8006df8:	eb49 0303 	adc.w	r3, r9, r3
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	f04f 0200 	mov.w	r2, #0
 8006e02:	f04f 0300 	mov.w	r3, #0
 8006e06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	024b      	lsls	r3, r1, #9
 8006e0e:	4621      	mov	r1, r4
 8006e10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e14:	4621      	mov	r1, r4
 8006e16:	024a      	lsls	r2, r1, #9
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e1e:	2200      	movs	r2, #0
 8006e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e28:	f7f9 fd80 	bl	800092c <__aeabi_uldivmod>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4613      	mov	r3, r2
 8006e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e34:	e058      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e36:	4b38      	ldr	r3, [pc, #224]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	099b      	lsrs	r3, r3, #6
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4618      	mov	r0, r3
 8006e40:	4611      	mov	r1, r2
 8006e42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e46:	623b      	str	r3, [r7, #32]
 8006e48:	2300      	movs	r3, #0
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e50:	4642      	mov	r2, r8
 8006e52:	464b      	mov	r3, r9
 8006e54:	f04f 0000 	mov.w	r0, #0
 8006e58:	f04f 0100 	mov.w	r1, #0
 8006e5c:	0159      	lsls	r1, r3, #5
 8006e5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e62:	0150      	lsls	r0, r2, #5
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4641      	mov	r1, r8
 8006e6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e6e:	4649      	mov	r1, r9
 8006e70:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e74:	f04f 0200 	mov.w	r2, #0
 8006e78:	f04f 0300 	mov.w	r3, #0
 8006e7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e88:	ebb2 040a 	subs.w	r4, r2, sl
 8006e8c:	eb63 050b 	sbc.w	r5, r3, fp
 8006e90:	f04f 0200 	mov.w	r2, #0
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	00eb      	lsls	r3, r5, #3
 8006e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e9e:	00e2      	lsls	r2, r4, #3
 8006ea0:	4614      	mov	r4, r2
 8006ea2:	461d      	mov	r5, r3
 8006ea4:	4643      	mov	r3, r8
 8006ea6:	18e3      	adds	r3, r4, r3
 8006ea8:	603b      	str	r3, [r7, #0]
 8006eaa:	464b      	mov	r3, r9
 8006eac:	eb45 0303 	adc.w	r3, r5, r3
 8006eb0:	607b      	str	r3, [r7, #4]
 8006eb2:	f04f 0200 	mov.w	r2, #0
 8006eb6:	f04f 0300 	mov.w	r3, #0
 8006eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	028b      	lsls	r3, r1, #10
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ec8:	4621      	mov	r1, r4
 8006eca:	028a      	lsls	r2, r1, #10
 8006ecc:	4610      	mov	r0, r2
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	61bb      	str	r3, [r7, #24]
 8006ed6:	61fa      	str	r2, [r7, #28]
 8006ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006edc:	f7f9 fd26 	bl	800092c <__aeabi_uldivmod>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ee8:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	0c1b      	lsrs	r3, r3, #16
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006ef8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f02:	e002      	b.n	8006f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f04:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8006f06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3750      	adds	r7, #80	; 0x50
 8006f10:	46bd      	mov	sp, r7
 8006f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f16:	bf00      	nop
 8006f18:	40023800 	.word	0x40023800
 8006f1c:	00f42400 	.word	0x00f42400
 8006f20:	007a1200 	.word	0x007a1200

08006f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f28:	4b03      	ldr	r3, [pc, #12]	; (8006f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	200000a4 	.word	0x200000a4

08006f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f40:	f7ff fff0 	bl	8006f24 <HAL_RCC_GetHCLKFreq>
 8006f44:	4602      	mov	r2, r0
 8006f46:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	0a9b      	lsrs	r3, r3, #10
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	4903      	ldr	r1, [pc, #12]	; (8006f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f52:	5ccb      	ldrb	r3, [r1, r3]
 8006f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40023800 	.word	0x40023800
 8006f60:	08014be8 	.word	0x08014be8

08006f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f68:	f7ff ffdc 	bl	8006f24 <HAL_RCC_GetHCLKFreq>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	4b05      	ldr	r3, [pc, #20]	; (8006f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	0b5b      	lsrs	r3, r3, #13
 8006f74:	f003 0307 	and.w	r3, r3, #7
 8006f78:	4903      	ldr	r1, [pc, #12]	; (8006f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f7a:	5ccb      	ldrb	r3, [r1, r3]
 8006f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	40023800 	.word	0x40023800
 8006f88:	08014be8 	.word	0x08014be8

08006f8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	220f      	movs	r2, #15
 8006f9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f9c:	4b12      	ldr	r3, [pc, #72]	; (8006fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f003 0203 	and.w	r2, r3, #3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006fa8:	4b0f      	ldr	r3, [pc, #60]	; (8006fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006fb4:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006fc0:	4b09      	ldr	r3, [pc, #36]	; (8006fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	08db      	lsrs	r3, r3, #3
 8006fc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006fce:	4b07      	ldr	r3, [pc, #28]	; (8006fec <HAL_RCC_GetClockConfig+0x60>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0207 	and.w	r2, r3, #7
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	601a      	str	r2, [r3, #0]
}
 8006fda:	bf00      	nop
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40023800 	.word	0x40023800
 8006fec:	40023c00 	.word	0x40023c00

08006ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d105      	bne.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007014:	2b00      	cmp	r3, #0
 8007016:	d035      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007018:	4b62      	ldr	r3, [pc, #392]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800701e:	f7fe f959 	bl	80052d4 <HAL_GetTick>
 8007022:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007024:	e008      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007026:	f7fe f955 	bl	80052d4 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d901      	bls.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e0b0      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007038:	4b5b      	ldr	r3, [pc, #364]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1f0      	bne.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	019a      	lsls	r2, r3, #6
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	071b      	lsls	r3, r3, #28
 8007050:	4955      	ldr	r1, [pc, #340]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007052:	4313      	orrs	r3, r2
 8007054:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007058:	4b52      	ldr	r3, [pc, #328]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800705a:	2201      	movs	r2, #1
 800705c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800705e:	f7fe f939 	bl	80052d4 <HAL_GetTick>
 8007062:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007064:	e008      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007066:	f7fe f935 	bl	80052d4 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	2b02      	cmp	r3, #2
 8007072:	d901      	bls.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e090      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007078:	4b4b      	ldr	r3, [pc, #300]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d0f0      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0302 	and.w	r3, r3, #2
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 8083 	beq.w	8007198 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	4b44      	ldr	r3, [pc, #272]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709a:	4a43      	ldr	r2, [pc, #268]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800709c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070a0:	6413      	str	r3, [r2, #64]	; 0x40
 80070a2:	4b41      	ldr	r3, [pc, #260]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80070ae:	4b3f      	ldr	r3, [pc, #252]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a3e      	ldr	r2, [pc, #248]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070ba:	f7fe f90b 	bl	80052d4 <HAL_GetTick>
 80070be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070c0:	e008      	b.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80070c2:	f7fe f907 	bl	80052d4 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d901      	bls.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e062      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070d4:	4b35      	ldr	r3, [pc, #212]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d0f0      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070e0:	4b31      	ldr	r3, [pc, #196]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d02f      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d028      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070fe:	4b2a      	ldr	r3, [pc, #168]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007106:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007108:	4b29      	ldr	r3, [pc, #164]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800710a:	2201      	movs	r2, #1
 800710c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800710e:	4b28      	ldr	r3, [pc, #160]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007114:	4a24      	ldr	r2, [pc, #144]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800711a:	4b23      	ldr	r3, [pc, #140]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800711c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b01      	cmp	r3, #1
 8007124:	d114      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007126:	f7fe f8d5 	bl	80052d4 <HAL_GetTick>
 800712a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800712c:	e00a      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800712e:	f7fe f8d1 	bl	80052d4 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	f241 3288 	movw	r2, #5000	; 0x1388
 800713c:	4293      	cmp	r3, r2
 800713e:	d901      	bls.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e02a      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007144:	4b18      	ldr	r3, [pc, #96]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d0ee      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007158:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800715c:	d10d      	bne.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800715e:	4b12      	ldr	r3, [pc, #72]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800716e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007172:	490d      	ldr	r1, [pc, #52]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007174:	4313      	orrs	r3, r2
 8007176:	608b      	str	r3, [r1, #8]
 8007178:	e005      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800717a:	4b0b      	ldr	r3, [pc, #44]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	4a0a      	ldr	r2, [pc, #40]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007180:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007184:	6093      	str	r3, [r2, #8]
 8007186:	4b08      	ldr	r3, [pc, #32]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007188:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007192:	4905      	ldr	r1, [pc, #20]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007194:	4313      	orrs	r3, r2
 8007196:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	42470068 	.word	0x42470068
 80071a8:	40023800 	.word	0x40023800
 80071ac:	40007000 	.word	0x40007000
 80071b0:	42470e40 	.word	0x42470e40

080071b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e066      	b.n	8007298 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	7f5b      	ldrb	r3, [r3, #29]
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d105      	bne.n	80071e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fd fd4c 	bl	8004c78 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	22ca      	movs	r2, #202	; 0xca
 80071ec:	625a      	str	r2, [r3, #36]	; 0x24
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2253      	movs	r2, #83	; 0x53
 80071f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fa45 	bl	8007686 <RTC_EnterInitMode>
 80071fc:	4603      	mov	r3, r0
 80071fe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d12c      	bne.n	8007260 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6812      	ldr	r2, [r2, #0]
 8007210:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007218:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6899      	ldr	r1, [r3, #8]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	68d2      	ldr	r2, [r2, #12]
 8007240:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6919      	ldr	r1, [r3, #16]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	041a      	lsls	r2, r3, #16
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fa4c 	bl	80076f4 <RTC_ExitInitMode>
 800725c:	4603      	mov	r3, r0
 800725e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d113      	bne.n	800728e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007274:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	699a      	ldr	r2, [r3, #24]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	22ff      	movs	r2, #255	; 0xff
 8007294:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8007296:	7bfb      	ldrb	r3, [r7, #15]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80072a0:	b590      	push	{r4, r7, lr}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	7f1b      	ldrb	r3, [r3, #28]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d101      	bne.n	80072bc <HAL_RTC_SetTime+0x1c>
 80072b8:	2302      	movs	r3, #2
 80072ba:	e087      	b.n	80073cc <HAL_RTC_SetTime+0x12c>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2201      	movs	r2, #1
 80072c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2202      	movs	r2, #2
 80072c6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d126      	bne.n	800731c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d102      	bne.n	80072e2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2200      	movs	r2, #0
 80072e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fa29 	bl	800773e <RTC_ByteToBcd2>
 80072ec:	4603      	mov	r3, r0
 80072ee:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	785b      	ldrb	r3, [r3, #1]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 fa22 	bl	800773e <RTC_ByteToBcd2>
 80072fa:	4603      	mov	r3, r0
 80072fc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80072fe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	789b      	ldrb	r3, [r3, #2]
 8007304:	4618      	mov	r0, r3
 8007306:	f000 fa1a 	bl	800773e <RTC_ByteToBcd2>
 800730a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800730c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	78db      	ldrb	r3, [r3, #3]
 8007314:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007316:	4313      	orrs	r3, r2
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	e018      	b.n	800734e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007326:	2b00      	cmp	r3, #0
 8007328:	d102      	bne.n	8007330 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2200      	movs	r2, #0
 800732e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800733c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007342:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	78db      	ldrb	r3, [r3, #3]
 8007348:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800734a:	4313      	orrs	r3, r2
 800734c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	22ca      	movs	r2, #202	; 0xca
 8007354:	625a      	str	r2, [r3, #36]	; 0x24
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2253      	movs	r2, #83	; 0x53
 800735c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 f991 	bl	8007686 <RTC_EnterInitMode>
 8007364:	4603      	mov	r3, r0
 8007366:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007368:	7cfb      	ldrb	r3, [r7, #19]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d120      	bne.n	80073b0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007378:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800737c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800738c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6899      	ldr	r1, [r3, #8]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	68da      	ldr	r2, [r3, #12]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	431a      	orrs	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 f9a4 	bl	80076f4 <RTC_ExitInitMode>
 80073ac:	4603      	mov	r3, r0
 80073ae:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80073b0:	7cfb      	ldrb	r3, [r7, #19]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d102      	bne.n	80073bc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2201      	movs	r2, #1
 80073ba:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	22ff      	movs	r2, #255	; 0xff
 80073c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	771a      	strb	r2, [r3, #28]

  return status;
 80073ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	371c      	adds	r7, #28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd90      	pop	{r4, r7, pc}

080073d4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007406:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800740a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	0c1b      	lsrs	r3, r3, #16
 8007410:	b2db      	uxtb	r3, r3
 8007412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007416:	b2da      	uxtb	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	0a1b      	lsrs	r3, r3, #8
 8007420:	b2db      	uxtb	r3, r3
 8007422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007426:	b2da      	uxtb	r2, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007434:	b2da      	uxtb	r2, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	0d9b      	lsrs	r3, r3, #22
 800743e:	b2db      	uxtb	r3, r3
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	b2da      	uxtb	r2, r3
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d11a      	bne.n	8007486 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	4618      	mov	r0, r3
 8007456:	f000 f98f 	bl	8007778 <RTC_Bcd2ToByte>
 800745a:	4603      	mov	r3, r0
 800745c:	461a      	mov	r2, r3
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	785b      	ldrb	r3, [r3, #1]
 8007466:	4618      	mov	r0, r3
 8007468:	f000 f986 	bl	8007778 <RTC_Bcd2ToByte>
 800746c:	4603      	mov	r3, r0
 800746e:	461a      	mov	r2, r3
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	789b      	ldrb	r3, [r3, #2]
 8007478:	4618      	mov	r0, r3
 800747a:	f000 f97d 	bl	8007778 <RTC_Bcd2ToByte>
 800747e:	4603      	mov	r3, r0
 8007480:	461a      	mov	r2, r3
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3718      	adds	r7, #24
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007490:	b590      	push	{r4, r7, lr}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	7f1b      	ldrb	r3, [r3, #28]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d101      	bne.n	80074ac <HAL_RTC_SetDate+0x1c>
 80074a8:	2302      	movs	r3, #2
 80074aa:	e071      	b.n	8007590 <HAL_RTC_SetDate+0x100>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2201      	movs	r2, #1
 80074b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2202      	movs	r2, #2
 80074b6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10e      	bne.n	80074dc <HAL_RTC_SetDate+0x4c>
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	785b      	ldrb	r3, [r3, #1]
 80074c2:	f003 0310 	and.w	r3, r3, #16
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d008      	beq.n	80074dc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	f023 0310 	bic.w	r3, r3, #16
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	330a      	adds	r3, #10
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d11c      	bne.n	800751c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	78db      	ldrb	r3, [r3, #3]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 f929 	bl	800773e <RTC_ByteToBcd2>
 80074ec:	4603      	mov	r3, r0
 80074ee:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	785b      	ldrb	r3, [r3, #1]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 f922 	bl	800773e <RTC_ByteToBcd2>
 80074fa:	4603      	mov	r3, r0
 80074fc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80074fe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	789b      	ldrb	r3, [r3, #2]
 8007504:	4618      	mov	r0, r3
 8007506:	f000 f91a 	bl	800773e <RTC_ByteToBcd2>
 800750a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800750c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007516:	4313      	orrs	r3, r2
 8007518:	617b      	str	r3, [r7, #20]
 800751a:	e00e      	b.n	800753a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	78db      	ldrb	r3, [r3, #3]
 8007520:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	785b      	ldrb	r3, [r3, #1]
 8007526:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007528:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800752e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	22ca      	movs	r2, #202	; 0xca
 8007540:	625a      	str	r2, [r3, #36]	; 0x24
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2253      	movs	r2, #83	; 0x53
 8007548:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 f89b 	bl	8007686 <RTC_EnterInitMode>
 8007550:	4603      	mov	r3, r0
 8007552:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007554:	7cfb      	ldrb	r3, [r7, #19]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10c      	bne.n	8007574 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007564:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007568:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 f8c2 	bl	80076f4 <RTC_ExitInitMode>
 8007570:	4603      	mov	r3, r0
 8007572:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007574:	7cfb      	ldrb	r3, [r7, #19]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d102      	bne.n	8007580 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2201      	movs	r2, #1
 800757e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	22ff      	movs	r2, #255	; 0xff
 8007586:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	771a      	strb	r2, [r3, #28]

  return status;
 800758e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007590:	4618      	mov	r0, r3
 8007592:	371c      	adds	r7, #28
 8007594:	46bd      	mov	sp, r7
 8007596:	bd90      	pop	{r4, r7, pc}

08007598 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80075b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80075b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	0c1b      	lsrs	r3, r3, #16
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	0a1b      	lsrs	r3, r3, #8
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	f003 031f 	and.w	r3, r3, #31
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	0b5b      	lsrs	r3, r3, #13
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d11a      	bne.n	800762c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	78db      	ldrb	r3, [r3, #3]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 f8bc 	bl	8007778 <RTC_Bcd2ToByte>
 8007600:	4603      	mov	r3, r0
 8007602:	461a      	mov	r2, r3
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	785b      	ldrb	r3, [r3, #1]
 800760c:	4618      	mov	r0, r3
 800760e:	f000 f8b3 	bl	8007778 <RTC_Bcd2ToByte>
 8007612:	4603      	mov	r3, r0
 8007614:	461a      	mov	r2, r3
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	789b      	ldrb	r3, [r3, #2]
 800761e:	4618      	mov	r0, r3
 8007620:	f000 f8aa 	bl	8007778 <RTC_Bcd2ToByte>
 8007624:	4603      	mov	r3, r0
 8007626:	461a      	mov	r2, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007650:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007652:	f7fd fe3f 	bl	80052d4 <HAL_GetTick>
 8007656:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007658:	e009      	b.n	800766e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800765a:	f7fd fe3b 	bl	80052d4 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007668:	d901      	bls.n	800766e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e007      	b.n	800767e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0ee      	beq.n	800765a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007692:	2300      	movs	r3, #0
 8007694:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d122      	bne.n	80076ea <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80076b4:	f7fd fe0e 	bl	80052d4 <HAL_GetTick>
 80076b8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80076ba:	e00c      	b.n	80076d6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80076bc:	f7fd fe0a 	bl	80052d4 <HAL_GetTick>
 80076c0:	4602      	mov	r2, r0
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076ca:	d904      	bls.n	80076d6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2204      	movs	r2, #4
 80076d0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d102      	bne.n	80076ea <RTC_EnterInitMode+0x64>
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d1e8      	bne.n	80076bc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800770e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f003 0320 	and.w	r3, r3, #32
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10a      	bne.n	8007734 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff ff89 	bl	8007636 <HAL_RTC_WaitForSynchro>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d004      	beq.n	8007734 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2204      	movs	r2, #4
 800772e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007734:	7bfb      	ldrb	r3, [r7, #15]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800773e:	b480      	push	{r7}
 8007740:	b085      	sub	sp, #20
 8007742:	af00      	add	r7, sp, #0
 8007744:	4603      	mov	r3, r0
 8007746:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800774c:	e005      	b.n	800775a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	3301      	adds	r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007754:	79fb      	ldrb	r3, [r7, #7]
 8007756:	3b0a      	subs	r3, #10
 8007758:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800775a:	79fb      	ldrb	r3, [r7, #7]
 800775c:	2b09      	cmp	r3, #9
 800775e:	d8f6      	bhi.n	800774e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	011b      	lsls	r3, r3, #4
 8007764:	b2da      	uxtb	r2, r3
 8007766:	79fb      	ldrb	r3, [r7, #7]
 8007768:	4313      	orrs	r3, r2
 800776a:	b2db      	uxtb	r3, r3
}
 800776c:	4618      	mov	r0, r3
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007786:	79fb      	ldrb	r3, [r7, #7]
 8007788:	091b      	lsrs	r3, r3, #4
 800778a:	b2db      	uxtb	r3, r3
 800778c:	461a      	mov	r2, r3
 800778e:	0092      	lsls	r2, r2, #2
 8007790:	4413      	add	r3, r2
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007796:	79fb      	ldrb	r3, [r7, #7]
 8007798:	f003 030f 	and.w	r3, r3, #15
 800779c:	b2da      	uxtb	r2, r3
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	4413      	add	r3, r2
 80077a2:	b2db      	uxtb	r3, r3
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e07b      	b.n	80078ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d108      	bne.n	80077dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077d2:	d009      	beq.n	80077e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	61da      	str	r2, [r3, #28]
 80077da:	e005      	b.n	80077e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7fd fa64 	bl	8004cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800781e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007830:	431a      	orrs	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007858:	431a      	orrs	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786c:	ea42 0103 	orr.w	r1, r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007874:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	0c1b      	lsrs	r3, r3, #16
 8007886:	f003 0104 	and.w	r1, r3, #4
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	f003 0210 	and.w	r2, r3, #16
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69da      	ldr	r2, [r3, #28]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b088      	sub	sp, #32
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	603b      	str	r3, [r7, #0]
 80078ce:	4613      	mov	r3, r2
 80078d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <HAL_SPI_Transmit+0x22>
 80078e0:	2302      	movs	r3, #2
 80078e2:	e126      	b.n	8007b32 <HAL_SPI_Transmit+0x270>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078ec:	f7fd fcf2 	bl	80052d4 <HAL_GetTick>
 80078f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80078f2:	88fb      	ldrh	r3, [r7, #6]
 80078f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d002      	beq.n	8007908 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007902:	2302      	movs	r3, #2
 8007904:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007906:	e10b      	b.n	8007b20 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <HAL_SPI_Transmit+0x52>
 800790e:	88fb      	ldrh	r3, [r7, #6]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d102      	bne.n	800791a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007918:	e102      	b.n	8007b20 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2203      	movs	r2, #3
 800791e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	88fa      	ldrh	r2, [r7, #6]
 8007932:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	88fa      	ldrh	r2, [r7, #6]
 8007938:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007960:	d10f      	bne.n	8007982 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007970:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007980:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798c:	2b40      	cmp	r3, #64	; 0x40
 800798e:	d007      	beq.n	80079a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800799e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079a8:	d14b      	bne.n	8007a42 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_SPI_Transmit+0xf6>
 80079b2:	8afb      	ldrh	r3, [r7, #22]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d13e      	bne.n	8007a36 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079bc:	881a      	ldrh	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	1c9a      	adds	r2, r3, #2
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80079dc:	e02b      	b.n	8007a36 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 0302 	and.w	r3, r3, #2
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d112      	bne.n	8007a12 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f0:	881a      	ldrh	r2, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fc:	1c9a      	adds	r2, r3, #2
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a10:	e011      	b.n	8007a36 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a12:	f7fd fc5f 	bl	80052d4 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d803      	bhi.n	8007a2a <HAL_SPI_Transmit+0x168>
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a28:	d102      	bne.n	8007a30 <HAL_SPI_Transmit+0x16e>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d102      	bne.n	8007a36 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007a30:	2303      	movs	r3, #3
 8007a32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a34:	e074      	b.n	8007b20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1ce      	bne.n	80079de <HAL_SPI_Transmit+0x11c>
 8007a40:	e04c      	b.n	8007adc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <HAL_SPI_Transmit+0x18e>
 8007a4a:	8afb      	ldrh	r3, [r7, #22]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d140      	bne.n	8007ad2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	330c      	adds	r3, #12
 8007a5a:	7812      	ldrb	r2, [r2, #0]
 8007a5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a76:	e02c      	b.n	8007ad2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d113      	bne.n	8007aae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	330c      	adds	r3, #12
 8007a90:	7812      	ldrb	r2, [r2, #0]
 8007a92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a98:	1c5a      	adds	r2, r3, #1
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	86da      	strh	r2, [r3, #54]	; 0x36
 8007aac:	e011      	b.n	8007ad2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aae:	f7fd fc11 	bl	80052d4 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d803      	bhi.n	8007ac6 <HAL_SPI_Transmit+0x204>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ac4:	d102      	bne.n	8007acc <HAL_SPI_Transmit+0x20a>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d102      	bne.n	8007ad2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ad0:	e026      	b.n	8007b20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1cd      	bne.n	8007a78 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 fb13 	bl	800810c <SPI_EndRxTxTransaction>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d002      	beq.n	8007af2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2220      	movs	r2, #32
 8007af0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10a      	bne.n	8007b10 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007afa:	2300      	movs	r3, #0
 8007afc:	613b      	str	r3, [r7, #16]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	613b      	str	r3, [r7, #16]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	613b      	str	r3, [r7, #16]
 8007b0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	77fb      	strb	r3, [r7, #31]
 8007b1c:	e000      	b.n	8007b20 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007b1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b30:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3720      	adds	r7, #32
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
	...

08007b3c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	4613      	mov	r3, r2
 8007b48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d101      	bne.n	8007b5c <HAL_SPI_Transmit_DMA+0x20>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	e09b      	b.n	8007c94 <HAL_SPI_Transmit_DMA+0x158>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d002      	beq.n	8007b76 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007b70:	2302      	movs	r3, #2
 8007b72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b74:	e089      	b.n	8007c8a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <HAL_SPI_Transmit_DMA+0x46>
 8007b7c:	88fb      	ldrh	r3, [r7, #6]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d102      	bne.n	8007b88 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b86:	e080      	b.n	8007c8a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2203      	movs	r2, #3
 8007b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	88fa      	ldrh	r2, [r7, #6]
 8007ba0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	88fa      	ldrh	r2, [r7, #6]
 8007ba6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bce:	d10f      	bne.n	8007bf0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf4:	4a29      	ldr	r2, [pc, #164]	; (8007c9c <HAL_SPI_Transmit_DMA+0x160>)
 8007bf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bfc:	4a28      	ldr	r2, [pc, #160]	; (8007ca0 <HAL_SPI_Transmit_DMA+0x164>)
 8007bfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c04:	4a27      	ldr	r2, [pc, #156]	; (8007ca4 <HAL_SPI_Transmit_DMA+0x168>)
 8007c06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c18:	4619      	mov	r1, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	330c      	adds	r3, #12
 8007c20:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c26:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c28:	f7fd fd14 	bl	8005654 <HAL_DMA_Start_IT>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00c      	beq.n	8007c4c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c36:	f043 0210 	orr.w	r2, r3, #16
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007c4a:	e01e      	b.n	8007c8a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c56:	2b40      	cmp	r3, #64	; 0x40
 8007c58:	d007      	beq.n	8007c6a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c68:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f042 0220 	orr.w	r2, r2, #32
 8007c78:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f042 0202 	orr.w	r2, r2, #2
 8007c88:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3718      	adds	r7, #24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	08007f79 	.word	0x08007f79
 8007ca0:	08007ed1 	.word	0x08007ed1
 8007ca4:	08007f95 	.word	0x08007f95

08007ca8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	099b      	lsrs	r3, r3, #6
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10f      	bne.n	8007cec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	099b      	lsrs	r3, r3, #6
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d004      	beq.n	8007cec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
    return;
 8007cea:	e0d7      	b.n	8007e9c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	085b      	lsrs	r3, r3, #1
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00a      	beq.n	8007d0e <HAL_SPI_IRQHandler+0x66>
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	09db      	lsrs	r3, r3, #7
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d004      	beq.n	8007d0e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	4798      	blx	r3
    return;
 8007d0c:	e0c6      	b.n	8007e9c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	095b      	lsrs	r3, r3, #5
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10c      	bne.n	8007d34 <HAL_SPI_IRQHandler+0x8c>
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	099b      	lsrs	r3, r3, #6
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	0a1b      	lsrs	r3, r3, #8
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 80b4 	beq.w	8007e9c <HAL_SPI_IRQHandler+0x1f4>
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	095b      	lsrs	r3, r3, #5
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 80ad 	beq.w	8007e9c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	099b      	lsrs	r3, r3, #6
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d023      	beq.n	8007d96 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d011      	beq.n	8007d7e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5e:	f043 0204 	orr.w	r2, r3, #4
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	617b      	str	r3, [r7, #20]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	617b      	str	r3, [r7, #20]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	e00b      	b.n	8007d96 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d7e:	2300      	movs	r3, #0
 8007d80:	613b      	str	r3, [r7, #16]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	613b      	str	r3, [r7, #16]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	613b      	str	r3, [r7, #16]
 8007d92:	693b      	ldr	r3, [r7, #16]
        return;
 8007d94:	e082      	b.n	8007e9c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	095b      	lsrs	r3, r3, #5
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d014      	beq.n	8007dcc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da6:	f043 0201 	orr.w	r2, r3, #1
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007dae:	2300      	movs	r3, #0
 8007db0:	60fb      	str	r3, [r7, #12]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	60fb      	str	r3, [r7, #12]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	0a1b      	lsrs	r3, r3, #8
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00c      	beq.n	8007df2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ddc:	f043 0208 	orr.w	r2, r3, #8
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007de4:	2300      	movs	r3, #0
 8007de6:	60bb      	str	r3, [r7, #8]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	60bb      	str	r3, [r7, #8]
 8007df0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d04f      	beq.n	8007e9a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e08:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d104      	bne.n	8007e26 <HAL_SPI_IRQHandler+0x17e>
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d034      	beq.n	8007e90 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 0203 	bic.w	r2, r2, #3
 8007e34:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d011      	beq.n	8007e62 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e42:	4a18      	ldr	r2, [pc, #96]	; (8007ea4 <HAL_SPI_IRQHandler+0x1fc>)
 8007e44:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fd fcca 	bl	80057e4 <HAL_DMA_Abort_IT>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d005      	beq.n	8007e62 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d016      	beq.n	8007e98 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e6e:	4a0d      	ldr	r2, [pc, #52]	; (8007ea4 <HAL_SPI_IRQHandler+0x1fc>)
 8007e70:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fd fcb4 	bl	80057e4 <HAL_DMA_Abort_IT>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007e8e:	e003      	b.n	8007e98 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f813 	bl	8007ebc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007e96:	e000      	b.n	8007e9a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007e98:	bf00      	nop
    return;
 8007e9a:	bf00      	nop
  }
}
 8007e9c:	3720      	adds	r7, #32
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	08007fd5 	.word	0x08007fd5

08007ea8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007edc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ede:	f7fd f9f9 	bl	80052d4 <HAL_GetTick>
 8007ee2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ef2:	d03b      	beq.n	8007f6c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0220 	bic.w	r2, r2, #32
 8007f02:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0202 	bic.w	r2, r2, #2
 8007f12:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	2164      	movs	r1, #100	; 0x64
 8007f18:	6978      	ldr	r0, [r7, #20]
 8007f1a:	f000 f8f7 	bl	800810c <SPI_EndRxTxTransaction>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d005      	beq.n	8007f30 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f28:	f043 0220 	orr.w	r2, r3, #32
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10a      	bne.n	8007f4e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	60fb      	str	r3, [r7, #12]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2200      	movs	r2, #0
 8007f52:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007f64:	6978      	ldr	r0, [r7, #20]
 8007f66:	f7ff ffa9 	bl	8007ebc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007f6a:	e002      	b.n	8007f72 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007f6c:	6978      	ldr	r0, [r7, #20]
 8007f6e:	f7fb f949 	bl	8003204 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f7ff ff8e 	bl	8007ea8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f8c:	bf00      	nop
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0203 	bic.w	r2, r2, #3
 8007fb0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb6:	f043 0210 	orr.w	r2, r3, #16
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f7ff ff78 	bl	8007ebc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fcc:	bf00      	nop
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f7ff ff64 	bl	8007ebc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ff4:	bf00      	nop
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b088      	sub	sp, #32
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	4613      	mov	r3, r2
 800800a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800800c:	f7fd f962 	bl	80052d4 <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	1a9b      	subs	r3, r3, r2
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	4413      	add	r3, r2
 800801a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800801c:	f7fd f95a 	bl	80052d4 <HAL_GetTick>
 8008020:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008022:	4b39      	ldr	r3, [pc, #228]	; (8008108 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	015b      	lsls	r3, r3, #5
 8008028:	0d1b      	lsrs	r3, r3, #20
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	fb02 f303 	mul.w	r3, r2, r3
 8008030:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008032:	e054      	b.n	80080de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800803a:	d050      	beq.n	80080de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800803c:	f7fd f94a 	bl	80052d4 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	69fa      	ldr	r2, [r7, #28]
 8008048:	429a      	cmp	r2, r3
 800804a:	d902      	bls.n	8008052 <SPI_WaitFlagStateUntilTimeout+0x56>
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d13d      	bne.n	80080ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008060:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800806a:	d111      	bne.n	8008090 <SPI_WaitFlagStateUntilTimeout+0x94>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008074:	d004      	beq.n	8008080 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800807e:	d107      	bne.n	8008090 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800808e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008098:	d10f      	bne.n	80080ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e017      	b.n	80080fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	3b01      	subs	r3, #1
 80080dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	4013      	ands	r3, r2
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	bf0c      	ite	eq
 80080ee:	2301      	moveq	r3, #1
 80080f0:	2300      	movne	r3, #0
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	461a      	mov	r2, r3
 80080f6:	79fb      	ldrb	r3, [r7, #7]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d19b      	bne.n	8008034 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3720      	adds	r7, #32
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	200000a4 	.word	0x200000a4

0800810c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af02      	add	r7, sp, #8
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008118:	4b1b      	ldr	r3, [pc, #108]	; (8008188 <SPI_EndRxTxTransaction+0x7c>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a1b      	ldr	r2, [pc, #108]	; (800818c <SPI_EndRxTxTransaction+0x80>)
 800811e:	fba2 2303 	umull	r2, r3, r2, r3
 8008122:	0d5b      	lsrs	r3, r3, #21
 8008124:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008128:	fb02 f303 	mul.w	r3, r2, r3
 800812c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008136:	d112      	bne.n	800815e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2200      	movs	r2, #0
 8008140:	2180      	movs	r1, #128	; 0x80
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f7ff ff5a 	bl	8007ffc <SPI_WaitFlagStateUntilTimeout>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d016      	beq.n	800817c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008152:	f043 0220 	orr.w	r2, r3, #32
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e00f      	b.n	800817e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00a      	beq.n	800817a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	3b01      	subs	r3, #1
 8008168:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008174:	2b80      	cmp	r3, #128	; 0x80
 8008176:	d0f2      	beq.n	800815e <SPI_EndRxTxTransaction+0x52>
 8008178:	e000      	b.n	800817c <SPI_EndRxTxTransaction+0x70>
        break;
 800817a:	bf00      	nop
  }

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	200000a4 	.word	0x200000a4
 800818c:	165e9f81 	.word	0x165e9f81

08008190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e041      	b.n	8008226 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d106      	bne.n	80081bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7fc fe16 	bl	8004de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2202      	movs	r2, #2
 80081c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3304      	adds	r3, #4
 80081cc:	4619      	mov	r1, r3
 80081ce:	4610      	mov	r0, r2
 80081d0:	f000 fa96 	bl	8008700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
	...

08008230 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b01      	cmp	r3, #1
 8008242:	d001      	beq.n	8008248 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e04e      	b.n	80082e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68da      	ldr	r2, [r3, #12]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0201 	orr.w	r2, r2, #1
 800825e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a23      	ldr	r2, [pc, #140]	; (80082f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d022      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008272:	d01d      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a1f      	ldr	r2, [pc, #124]	; (80082f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d018      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a1e      	ldr	r2, [pc, #120]	; (80082fc <HAL_TIM_Base_Start_IT+0xcc>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d013      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a1c      	ldr	r2, [pc, #112]	; (8008300 <HAL_TIM_Base_Start_IT+0xd0>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00e      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a1b      	ldr	r2, [pc, #108]	; (8008304 <HAL_TIM_Base_Start_IT+0xd4>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d009      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a19      	ldr	r2, [pc, #100]	; (8008308 <HAL_TIM_Base_Start_IT+0xd8>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d004      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x80>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a18      	ldr	r2, [pc, #96]	; (800830c <HAL_TIM_Base_Start_IT+0xdc>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d111      	bne.n	80082d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f003 0307 	and.w	r3, r3, #7
 80082ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2b06      	cmp	r3, #6
 80082c0:	d010      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f042 0201 	orr.w	r2, r2, #1
 80082d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d2:	e007      	b.n	80082e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0201 	orr.w	r2, r2, #1
 80082e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	40010000 	.word	0x40010000
 80082f8:	40000400 	.word	0x40000400
 80082fc:	40000800 	.word	0x40000800
 8008300:	40000c00 	.word	0x40000c00
 8008304:	40010400 	.word	0x40010400
 8008308:	40014000 	.word	0x40014000
 800830c:	40001800 	.word	0x40001800

08008310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b02      	cmp	r3, #2
 8008324:	d122      	bne.n	800836c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f003 0302 	and.w	r3, r3, #2
 8008330:	2b02      	cmp	r3, #2
 8008332:	d11b      	bne.n	800836c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f06f 0202 	mvn.w	r2, #2
 800833c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	f003 0303 	and.w	r3, r3, #3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f9b5 	bl	80086c2 <HAL_TIM_IC_CaptureCallback>
 8008358:	e005      	b.n	8008366 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f9a7 	bl	80086ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f9b8 	bl	80086d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	f003 0304 	and.w	r3, r3, #4
 8008376:	2b04      	cmp	r3, #4
 8008378:	d122      	bne.n	80083c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b04      	cmp	r3, #4
 8008386:	d11b      	bne.n	80083c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f06f 0204 	mvn.w	r2, #4
 8008390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2202      	movs	r2, #2
 8008396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f98b 	bl	80086c2 <HAL_TIM_IC_CaptureCallback>
 80083ac:	e005      	b.n	80083ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f97d 	bl	80086ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f98e 	bl	80086d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	2b08      	cmp	r3, #8
 80083cc:	d122      	bne.n	8008414 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f003 0308 	and.w	r3, r3, #8
 80083d8:	2b08      	cmp	r3, #8
 80083da:	d11b      	bne.n	8008414 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f06f 0208 	mvn.w	r2, #8
 80083e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2204      	movs	r2, #4
 80083ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f003 0303 	and.w	r3, r3, #3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f961 	bl	80086c2 <HAL_TIM_IC_CaptureCallback>
 8008400:	e005      	b.n	800840e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f953 	bl	80086ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f964 	bl	80086d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	f003 0310 	and.w	r3, r3, #16
 800841e:	2b10      	cmp	r3, #16
 8008420:	d122      	bne.n	8008468 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	f003 0310 	and.w	r3, r3, #16
 800842c:	2b10      	cmp	r3, #16
 800842e:	d11b      	bne.n	8008468 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f06f 0210 	mvn.w	r2, #16
 8008438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2208      	movs	r2, #8
 800843e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800844a:	2b00      	cmp	r3, #0
 800844c:	d003      	beq.n	8008456 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f937 	bl	80086c2 <HAL_TIM_IC_CaptureCallback>
 8008454:	e005      	b.n	8008462 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f929 	bl	80086ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f93a 	bl	80086d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b01      	cmp	r3, #1
 8008474:	d10e      	bne.n	8008494 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	2b01      	cmp	r3, #1
 8008482:	d107      	bne.n	8008494 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f06f 0201 	mvn.w	r2, #1
 800848c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7fb ff7a 	bl	8004388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800849e:	2b80      	cmp	r3, #128	; 0x80
 80084a0:	d10e      	bne.n	80084c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ac:	2b80      	cmp	r3, #128	; 0x80
 80084ae:	d107      	bne.n	80084c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fae0 	bl	8008a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ca:	2b40      	cmp	r3, #64	; 0x40
 80084cc:	d10e      	bne.n	80084ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d8:	2b40      	cmp	r3, #64	; 0x40
 80084da:	d107      	bne.n	80084ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f8ff 	bl	80086ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	f003 0320 	and.w	r3, r3, #32
 80084f6:	2b20      	cmp	r3, #32
 80084f8:	d10e      	bne.n	8008518 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	f003 0320 	and.w	r3, r3, #32
 8008504:	2b20      	cmp	r3, #32
 8008506:	d107      	bne.n	8008518 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f06f 0220 	mvn.w	r2, #32
 8008510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 faaa 	bl	8008a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008518:	bf00      	nop
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008534:	2b01      	cmp	r3, #1
 8008536:	d101      	bne.n	800853c <HAL_TIM_ConfigClockSource+0x1c>
 8008538:	2302      	movs	r3, #2
 800853a:	e0b4      	b.n	80086a6 <HAL_TIM_ConfigClockSource+0x186>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800855a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008574:	d03e      	beq.n	80085f4 <HAL_TIM_ConfigClockSource+0xd4>
 8008576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800857a:	f200 8087 	bhi.w	800868c <HAL_TIM_ConfigClockSource+0x16c>
 800857e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008582:	f000 8086 	beq.w	8008692 <HAL_TIM_ConfigClockSource+0x172>
 8008586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800858a:	d87f      	bhi.n	800868c <HAL_TIM_ConfigClockSource+0x16c>
 800858c:	2b70      	cmp	r3, #112	; 0x70
 800858e:	d01a      	beq.n	80085c6 <HAL_TIM_ConfigClockSource+0xa6>
 8008590:	2b70      	cmp	r3, #112	; 0x70
 8008592:	d87b      	bhi.n	800868c <HAL_TIM_ConfigClockSource+0x16c>
 8008594:	2b60      	cmp	r3, #96	; 0x60
 8008596:	d050      	beq.n	800863a <HAL_TIM_ConfigClockSource+0x11a>
 8008598:	2b60      	cmp	r3, #96	; 0x60
 800859a:	d877      	bhi.n	800868c <HAL_TIM_ConfigClockSource+0x16c>
 800859c:	2b50      	cmp	r3, #80	; 0x50
 800859e:	d03c      	beq.n	800861a <HAL_TIM_ConfigClockSource+0xfa>
 80085a0:	2b50      	cmp	r3, #80	; 0x50
 80085a2:	d873      	bhi.n	800868c <HAL_TIM_ConfigClockSource+0x16c>
 80085a4:	2b40      	cmp	r3, #64	; 0x40
 80085a6:	d058      	beq.n	800865a <HAL_TIM_ConfigClockSource+0x13a>
 80085a8:	2b40      	cmp	r3, #64	; 0x40
 80085aa:	d86f      	bhi.n	800868c <HAL_TIM_ConfigClockSource+0x16c>
 80085ac:	2b30      	cmp	r3, #48	; 0x30
 80085ae:	d064      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x15a>
 80085b0:	2b30      	cmp	r3, #48	; 0x30
 80085b2:	d86b      	bhi.n	800868c <HAL_TIM_ConfigClockSource+0x16c>
 80085b4:	2b20      	cmp	r3, #32
 80085b6:	d060      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x15a>
 80085b8:	2b20      	cmp	r3, #32
 80085ba:	d867      	bhi.n	800868c <HAL_TIM_ConfigClockSource+0x16c>
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d05c      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x15a>
 80085c0:	2b10      	cmp	r3, #16
 80085c2:	d05a      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x15a>
 80085c4:	e062      	b.n	800868c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6818      	ldr	r0, [r3, #0]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	6899      	ldr	r1, [r3, #8]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	f000 f9ad 	bl	8008934 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	609a      	str	r2, [r3, #8]
      break;
 80085f2:	e04f      	b.n	8008694 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6818      	ldr	r0, [r3, #0]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	6899      	ldr	r1, [r3, #8]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	f000 f996 	bl	8008934 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	689a      	ldr	r2, [r3, #8]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008616:	609a      	str	r2, [r3, #8]
      break;
 8008618:	e03c      	b.n	8008694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6818      	ldr	r0, [r3, #0]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	6859      	ldr	r1, [r3, #4]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	461a      	mov	r2, r3
 8008628:	f000 f90a 	bl	8008840 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2150      	movs	r1, #80	; 0x50
 8008632:	4618      	mov	r0, r3
 8008634:	f000 f963 	bl	80088fe <TIM_ITRx_SetConfig>
      break;
 8008638:	e02c      	b.n	8008694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	6859      	ldr	r1, [r3, #4]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	461a      	mov	r2, r3
 8008648:	f000 f929 	bl	800889e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2160      	movs	r1, #96	; 0x60
 8008652:	4618      	mov	r0, r3
 8008654:	f000 f953 	bl	80088fe <TIM_ITRx_SetConfig>
      break;
 8008658:	e01c      	b.n	8008694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6818      	ldr	r0, [r3, #0]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	6859      	ldr	r1, [r3, #4]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	461a      	mov	r2, r3
 8008668:	f000 f8ea 	bl	8008840 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2140      	movs	r1, #64	; 0x40
 8008672:	4618      	mov	r0, r3
 8008674:	f000 f943 	bl	80088fe <TIM_ITRx_SetConfig>
      break;
 8008678:	e00c      	b.n	8008694 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4619      	mov	r1, r3
 8008684:	4610      	mov	r0, r2
 8008686:	f000 f93a 	bl	80088fe <TIM_ITRx_SetConfig>
      break;
 800868a:	e003      	b.n	8008694 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	73fb      	strb	r3, [r7, #15]
      break;
 8008690:	e000      	b.n	8008694 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086ca:	bf00      	nop
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b083      	sub	sp, #12
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086de:	bf00      	nop
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b083      	sub	sp, #12
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086f2:	bf00      	nop
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
	...

08008700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a40      	ldr	r2, [pc, #256]	; (8008814 <TIM_Base_SetConfig+0x114>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d013      	beq.n	8008740 <TIM_Base_SetConfig+0x40>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800871e:	d00f      	beq.n	8008740 <TIM_Base_SetConfig+0x40>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a3d      	ldr	r2, [pc, #244]	; (8008818 <TIM_Base_SetConfig+0x118>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d00b      	beq.n	8008740 <TIM_Base_SetConfig+0x40>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a3c      	ldr	r2, [pc, #240]	; (800881c <TIM_Base_SetConfig+0x11c>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d007      	beq.n	8008740 <TIM_Base_SetConfig+0x40>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a3b      	ldr	r2, [pc, #236]	; (8008820 <TIM_Base_SetConfig+0x120>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d003      	beq.n	8008740 <TIM_Base_SetConfig+0x40>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a3a      	ldr	r2, [pc, #232]	; (8008824 <TIM_Base_SetConfig+0x124>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d108      	bne.n	8008752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	4313      	orrs	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a2f      	ldr	r2, [pc, #188]	; (8008814 <TIM_Base_SetConfig+0x114>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d02b      	beq.n	80087b2 <TIM_Base_SetConfig+0xb2>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008760:	d027      	beq.n	80087b2 <TIM_Base_SetConfig+0xb2>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a2c      	ldr	r2, [pc, #176]	; (8008818 <TIM_Base_SetConfig+0x118>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d023      	beq.n	80087b2 <TIM_Base_SetConfig+0xb2>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a2b      	ldr	r2, [pc, #172]	; (800881c <TIM_Base_SetConfig+0x11c>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d01f      	beq.n	80087b2 <TIM_Base_SetConfig+0xb2>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a2a      	ldr	r2, [pc, #168]	; (8008820 <TIM_Base_SetConfig+0x120>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d01b      	beq.n	80087b2 <TIM_Base_SetConfig+0xb2>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a29      	ldr	r2, [pc, #164]	; (8008824 <TIM_Base_SetConfig+0x124>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d017      	beq.n	80087b2 <TIM_Base_SetConfig+0xb2>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a28      	ldr	r2, [pc, #160]	; (8008828 <TIM_Base_SetConfig+0x128>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d013      	beq.n	80087b2 <TIM_Base_SetConfig+0xb2>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a27      	ldr	r2, [pc, #156]	; (800882c <TIM_Base_SetConfig+0x12c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00f      	beq.n	80087b2 <TIM_Base_SetConfig+0xb2>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a26      	ldr	r2, [pc, #152]	; (8008830 <TIM_Base_SetConfig+0x130>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00b      	beq.n	80087b2 <TIM_Base_SetConfig+0xb2>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a25      	ldr	r2, [pc, #148]	; (8008834 <TIM_Base_SetConfig+0x134>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d007      	beq.n	80087b2 <TIM_Base_SetConfig+0xb2>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a24      	ldr	r2, [pc, #144]	; (8008838 <TIM_Base_SetConfig+0x138>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d003      	beq.n	80087b2 <TIM_Base_SetConfig+0xb2>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a23      	ldr	r2, [pc, #140]	; (800883c <TIM_Base_SetConfig+0x13c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d108      	bne.n	80087c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a0a      	ldr	r2, [pc, #40]	; (8008814 <TIM_Base_SetConfig+0x114>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d003      	beq.n	80087f8 <TIM_Base_SetConfig+0xf8>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a0c      	ldr	r2, [pc, #48]	; (8008824 <TIM_Base_SetConfig+0x124>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d103      	bne.n	8008800 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	691a      	ldr	r2, [r3, #16]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	615a      	str	r2, [r3, #20]
}
 8008806:	bf00      	nop
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	40010000 	.word	0x40010000
 8008818:	40000400 	.word	0x40000400
 800881c:	40000800 	.word	0x40000800
 8008820:	40000c00 	.word	0x40000c00
 8008824:	40010400 	.word	0x40010400
 8008828:	40014000 	.word	0x40014000
 800882c:	40014400 	.word	0x40014400
 8008830:	40014800 	.word	0x40014800
 8008834:	40001800 	.word	0x40001800
 8008838:	40001c00 	.word	0x40001c00
 800883c:	40002000 	.word	0x40002000

08008840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008840:	b480      	push	{r7}
 8008842:	b087      	sub	sp, #28
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6a1b      	ldr	r3, [r3, #32]
 8008850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	f023 0201 	bic.w	r2, r3, #1
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800886a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	011b      	lsls	r3, r3, #4
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	4313      	orrs	r3, r2
 8008874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f023 030a 	bic.w	r3, r3, #10
 800887c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	4313      	orrs	r3, r2
 8008884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	621a      	str	r2, [r3, #32]
}
 8008892:	bf00      	nop
 8008894:	371c      	adds	r7, #28
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800889e:	b480      	push	{r7}
 80088a0:	b087      	sub	sp, #28
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	60f8      	str	r0, [r7, #12]
 80088a6:	60b9      	str	r1, [r7, #8]
 80088a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	f023 0210 	bic.w	r2, r3, #16
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6a1b      	ldr	r3, [r3, #32]
 80088c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	031b      	lsls	r3, r3, #12
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	011b      	lsls	r3, r3, #4
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	621a      	str	r2, [r3, #32]
}
 80088f2:	bf00      	nop
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088fe:	b480      	push	{r7}
 8008900:	b085      	sub	sp, #20
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4313      	orrs	r3, r2
 800891c:	f043 0307 	orr.w	r3, r3, #7
 8008920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	609a      	str	r2, [r3, #8]
}
 8008928:	bf00      	nop
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
 8008940:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800894e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	021a      	lsls	r2, r3, #8
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	431a      	orrs	r2, r3
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	4313      	orrs	r3, r2
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	4313      	orrs	r3, r2
 8008960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	609a      	str	r2, [r3, #8]
}
 8008968:	bf00      	nop
 800896a:	371c      	adds	r7, #28
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008984:	2b01      	cmp	r3, #1
 8008986:	d101      	bne.n	800898c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008988:	2302      	movs	r3, #2
 800898a:	e05a      	b.n	8008a42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2202      	movs	r2, #2
 8008998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a21      	ldr	r2, [pc, #132]	; (8008a50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d022      	beq.n	8008a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d8:	d01d      	beq.n	8008a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a1d      	ldr	r2, [pc, #116]	; (8008a54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d018      	beq.n	8008a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a1b      	ldr	r2, [pc, #108]	; (8008a58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d013      	beq.n	8008a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a1a      	ldr	r2, [pc, #104]	; (8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d00e      	beq.n	8008a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a18      	ldr	r2, [pc, #96]	; (8008a60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d009      	beq.n	8008a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a17      	ldr	r2, [pc, #92]	; (8008a64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d004      	beq.n	8008a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a15      	ldr	r2, [pc, #84]	; (8008a68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d10c      	bne.n	8008a30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	40010000 	.word	0x40010000
 8008a54:	40000400 	.word	0x40000400
 8008a58:	40000800 	.word	0x40000800
 8008a5c:	40000c00 	.word	0x40000c00
 8008a60:	40010400 	.word	0x40010400
 8008a64:	40014000 	.word	0x40014000
 8008a68:	40001800 	.word	0x40001800

08008a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e03f      	b.n	8008b26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d106      	bne.n	8008ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7fc f9ba 	bl	8004e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2224      	movs	r2, #36	; 0x24
 8008ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fe2b 	bl	8009734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	691a      	ldr	r2, [r3, #16]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	695a      	ldr	r2, [r3, #20]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68da      	ldr	r2, [r3, #12]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2220      	movs	r2, #32
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b084      	sub	sp, #16
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	60f8      	str	r0, [r7, #12]
 8008b36:	60b9      	str	r1, [r7, #8]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b20      	cmp	r3, #32
 8008b46:	d11d      	bne.n	8008b84 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d002      	beq.n	8008b54 <HAL_UART_Receive_IT+0x26>
 8008b4e:	88fb      	ldrh	r3, [r7, #6]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e016      	b.n	8008b86 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d101      	bne.n	8008b66 <HAL_UART_Receive_IT+0x38>
 8008b62:	2302      	movs	r3, #2
 8008b64:	e00f      	b.n	8008b86 <HAL_UART_Receive_IT+0x58>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b74:	88fb      	ldrh	r3, [r7, #6]
 8008b76:	461a      	mov	r2, r3
 8008b78:	68b9      	ldr	r1, [r7, #8]
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f000 fbd9 	bl	8009332 <UART_Start_Receive_IT>
 8008b80:	4603      	mov	r3, r0
 8008b82:	e000      	b.n	8008b86 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008b84:	2302      	movs	r3, #2
  }
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
	...

08008b90 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b08c      	sub	sp, #48	; 0x30
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b20      	cmp	r3, #32
 8008ba8:	d165      	bne.n	8008c76 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <HAL_UART_Transmit_DMA+0x26>
 8008bb0:	88fb      	ldrh	r3, [r7, #6]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e05e      	b.n	8008c78 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d101      	bne.n	8008bc8 <HAL_UART_Transmit_DMA+0x38>
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	e057      	b.n	8008c78 <HAL_UART_Transmit_DMA+0xe8>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	88fa      	ldrh	r2, [r7, #6]
 8008bda:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	88fa      	ldrh	r2, [r7, #6]
 8008be0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2221      	movs	r2, #33	; 0x21
 8008bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf4:	4a22      	ldr	r2, [pc, #136]	; (8008c80 <HAL_UART_Transmit_DMA+0xf0>)
 8008bf6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfc:	4a21      	ldr	r2, [pc, #132]	; (8008c84 <HAL_UART_Transmit_DMA+0xf4>)
 8008bfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c04:	4a20      	ldr	r2, [pc, #128]	; (8008c88 <HAL_UART_Transmit_DMA+0xf8>)
 8008c06:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008c10:	f107 0308 	add.w	r3, r7, #8
 8008c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1c:	6819      	ldr	r1, [r3, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3304      	adds	r3, #4
 8008c24:	461a      	mov	r2, r3
 8008c26:	88fb      	ldrh	r3, [r7, #6]
 8008c28:	f7fc fd14 	bl	8005654 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c34:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	3314      	adds	r3, #20
 8008c44:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	e853 3f00 	ldrex	r3, [r3]
 8008c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3314      	adds	r3, #20
 8008c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c5e:	627a      	str	r2, [r7, #36]	; 0x24
 8008c60:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c62:	6a39      	ldr	r1, [r7, #32]
 8008c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c66:	e841 2300 	strex	r3, r2, [r1]
 8008c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1e5      	bne.n	8008c3e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	e000      	b.n	8008c78 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008c76:	2302      	movs	r3, #2
  }
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3730      	adds	r7, #48	; 0x30
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	080091e9 	.word	0x080091e9
 8008c84:	08009283 	.word	0x08009283
 8008c88:	0800929f 	.word	0x0800929f

08008c8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b0ba      	sub	sp, #232	; 0xe8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc2:	f003 030f 	and.w	r3, r3, #15
 8008cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008cca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10f      	bne.n	8008cf2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cd6:	f003 0320 	and.w	r3, r3, #32
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d009      	beq.n	8008cf2 <HAL_UART_IRQHandler+0x66>
 8008cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ce2:	f003 0320 	and.w	r3, r3, #32
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fc66 	bl	80095bc <UART_Receive_IT>
      return;
 8008cf0:	e256      	b.n	80091a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 80de 	beq.w	8008eb8 <HAL_UART_IRQHandler+0x22c>
 8008cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d106      	bne.n	8008d16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 80d1 	beq.w	8008eb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00b      	beq.n	8008d3a <HAL_UART_IRQHandler+0xae>
 8008d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d005      	beq.n	8008d3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d32:	f043 0201 	orr.w	r2, r3, #1
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d3e:	f003 0304 	and.w	r3, r3, #4
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00b      	beq.n	8008d5e <HAL_UART_IRQHandler+0xd2>
 8008d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d4a:	f003 0301 	and.w	r3, r3, #1
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d005      	beq.n	8008d5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d56:	f043 0202 	orr.w	r2, r3, #2
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00b      	beq.n	8008d82 <HAL_UART_IRQHandler+0xf6>
 8008d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d005      	beq.n	8008d82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7a:	f043 0204 	orr.w	r2, r3, #4
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d86:	f003 0308 	and.w	r3, r3, #8
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d011      	beq.n	8008db2 <HAL_UART_IRQHandler+0x126>
 8008d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d92:	f003 0320 	and.w	r3, r3, #32
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d105      	bne.n	8008da6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d005      	beq.n	8008db2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008daa:	f043 0208 	orr.w	r2, r3, #8
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 81ed 	beq.w	8009196 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dc0:	f003 0320 	and.w	r3, r3, #32
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d008      	beq.n	8008dda <HAL_UART_IRQHandler+0x14e>
 8008dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dcc:	f003 0320 	and.w	r3, r3, #32
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d002      	beq.n	8008dda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fbf1 	bl	80095bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	695b      	ldr	r3, [r3, #20]
 8008de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de4:	2b40      	cmp	r3, #64	; 0x40
 8008de6:	bf0c      	ite	eq
 8008de8:	2301      	moveq	r3, #1
 8008dea:	2300      	movne	r3, #0
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df6:	f003 0308 	and.w	r3, r3, #8
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d103      	bne.n	8008e06 <HAL_UART_IRQHandler+0x17a>
 8008dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d04f      	beq.n	8008ea6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 faf9 	bl	80093fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e16:	2b40      	cmp	r3, #64	; 0x40
 8008e18:	d141      	bne.n	8008e9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3314      	adds	r3, #20
 8008e20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e28:	e853 3f00 	ldrex	r3, [r3]
 8008e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	3314      	adds	r3, #20
 8008e42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008e46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008e52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008e56:	e841 2300 	strex	r3, r2, [r1]
 8008e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1d9      	bne.n	8008e1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d013      	beq.n	8008e96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e72:	4a7d      	ldr	r2, [pc, #500]	; (8009068 <HAL_UART_IRQHandler+0x3dc>)
 8008e74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fc fcb2 	bl	80057e4 <HAL_DMA_Abort_IT>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d016      	beq.n	8008eb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e90:	4610      	mov	r0, r2
 8008e92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e94:	e00e      	b.n	8008eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f990 	bl	80091bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e9c:	e00a      	b.n	8008eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f98c 	bl	80091bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ea4:	e006      	b.n	8008eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f988 	bl	80091bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008eb2:	e170      	b.n	8009196 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb4:	bf00      	nop
    return;
 8008eb6:	e16e      	b.n	8009196 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	f040 814a 	bne.w	8009156 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec6:	f003 0310 	and.w	r3, r3, #16
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f000 8143 	beq.w	8009156 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ed4:	f003 0310 	and.w	r3, r3, #16
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 813c 	beq.w	8009156 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60bb      	str	r3, [r7, #8]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	60bb      	str	r3, [r7, #8]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	60bb      	str	r3, [r7, #8]
 8008ef2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efe:	2b40      	cmp	r3, #64	; 0x40
 8008f00:	f040 80b4 	bne.w	800906c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 8140 	beq.w	800919a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f22:	429a      	cmp	r2, r3
 8008f24:	f080 8139 	bcs.w	800919a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f34:	69db      	ldr	r3, [r3, #28]
 8008f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f3a:	f000 8088 	beq.w	800904e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	330c      	adds	r3, #12
 8008f44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	330c      	adds	r3, #12
 8008f66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008f6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008f76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f7a:	e841 2300 	strex	r3, r2, [r1]
 8008f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1d9      	bne.n	8008f3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3314      	adds	r3, #20
 8008f90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f94:	e853 3f00 	ldrex	r3, [r3]
 8008f98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f9c:	f023 0301 	bic.w	r3, r3, #1
 8008fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	3314      	adds	r3, #20
 8008faa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008fae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008fb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008fba:	e841 2300 	strex	r3, r2, [r1]
 8008fbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1e1      	bne.n	8008f8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3314      	adds	r3, #20
 8008fcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fd0:	e853 3f00 	ldrex	r3, [r3]
 8008fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	3314      	adds	r3, #20
 8008fe6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008fea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008fec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ff0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ff2:	e841 2300 	strex	r3, r2, [r1]
 8008ff6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1e3      	bne.n	8008fc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2220      	movs	r2, #32
 8009002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	330c      	adds	r3, #12
 8009012:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009016:	e853 3f00 	ldrex	r3, [r3]
 800901a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800901c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800901e:	f023 0310 	bic.w	r3, r3, #16
 8009022:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	330c      	adds	r3, #12
 800902c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009030:	65ba      	str	r2, [r7, #88]	; 0x58
 8009032:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009034:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009036:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009038:	e841 2300 	strex	r3, r2, [r1]
 800903c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800903e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1e3      	bne.n	800900c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009048:	4618      	mov	r0, r3
 800904a:	f7fc fb5b 	bl	8005704 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009056:	b29b      	uxth	r3, r3
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	b29b      	uxth	r3, r3
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f8b6 	bl	80091d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009064:	e099      	b.n	800919a <HAL_UART_IRQHandler+0x50e>
 8009066:	bf00      	nop
 8009068:	080094c5 	.word	0x080094c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009074:	b29b      	uxth	r3, r3
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009080:	b29b      	uxth	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 808b 	beq.w	800919e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 8086 	beq.w	800919e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	330c      	adds	r3, #12
 8009098:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80090a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	330c      	adds	r3, #12
 80090b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80090b6:	647a      	str	r2, [r7, #68]	; 0x44
 80090b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e3      	bne.n	8009092 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	3314      	adds	r3, #20
 80090d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d4:	e853 3f00 	ldrex	r3, [r3]
 80090d8:	623b      	str	r3, [r7, #32]
   return(result);
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	f023 0301 	bic.w	r3, r3, #1
 80090e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3314      	adds	r3, #20
 80090ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80090ee:	633a      	str	r2, [r7, #48]	; 0x30
 80090f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1e3      	bne.n	80090ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2220      	movs	r2, #32
 8009106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	330c      	adds	r3, #12
 8009116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	e853 3f00 	ldrex	r3, [r3]
 800911e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f023 0310 	bic.w	r3, r3, #16
 8009126:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	330c      	adds	r3, #12
 8009130:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009134:	61fa      	str	r2, [r7, #28]
 8009136:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009138:	69b9      	ldr	r1, [r7, #24]
 800913a:	69fa      	ldr	r2, [r7, #28]
 800913c:	e841 2300 	strex	r3, r2, [r1]
 8009140:	617b      	str	r3, [r7, #20]
   return(result);
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e3      	bne.n	8009110 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f83e 	bl	80091d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009154:	e023      	b.n	800919e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800915a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800915e:	2b00      	cmp	r3, #0
 8009160:	d009      	beq.n	8009176 <HAL_UART_IRQHandler+0x4ea>
 8009162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f9bc 	bl	80094ec <UART_Transmit_IT>
    return;
 8009174:	e014      	b.n	80091a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800917a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00e      	beq.n	80091a0 <HAL_UART_IRQHandler+0x514>
 8009182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918a:	2b00      	cmp	r3, #0
 800918c:	d008      	beq.n	80091a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f9fc 	bl	800958c <UART_EndTransmit_IT>
    return;
 8009194:	e004      	b.n	80091a0 <HAL_UART_IRQHandler+0x514>
    return;
 8009196:	bf00      	nop
 8009198:	e002      	b.n	80091a0 <HAL_UART_IRQHandler+0x514>
      return;
 800919a:	bf00      	nop
 800919c:	e000      	b.n	80091a0 <HAL_UART_IRQHandler+0x514>
      return;
 800919e:	bf00      	nop
  }
}
 80091a0:	37e8      	adds	r7, #232	; 0xe8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop

080091a8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b090      	sub	sp, #64	; 0x40
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009200:	2b00      	cmp	r3, #0
 8009202:	d137      	bne.n	8009274 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009206:	2200      	movs	r2, #0
 8009208:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800920a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3314      	adds	r3, #20
 8009210:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	623b      	str	r3, [r7, #32]
   return(result);
 800921a:	6a3b      	ldr	r3, [r7, #32]
 800921c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009220:	63bb      	str	r3, [r7, #56]	; 0x38
 8009222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3314      	adds	r3, #20
 8009228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800922a:	633a      	str	r2, [r7, #48]	; 0x30
 800922c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009232:	e841 2300 	strex	r3, r2, [r1]
 8009236:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e5      	bne.n	800920a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800923e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	330c      	adds	r3, #12
 8009244:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	e853 3f00 	ldrex	r3, [r3]
 800924c:	60fb      	str	r3, [r7, #12]
   return(result);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009254:	637b      	str	r3, [r7, #52]	; 0x34
 8009256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	330c      	adds	r3, #12
 800925c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800925e:	61fa      	str	r2, [r7, #28]
 8009260:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009262:	69b9      	ldr	r1, [r7, #24]
 8009264:	69fa      	ldr	r2, [r7, #28]
 8009266:	e841 2300 	strex	r3, r2, [r1]
 800926a:	617b      	str	r3, [r7, #20]
   return(result);
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1e5      	bne.n	800923e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009272:	e002      	b.n	800927a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009274:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009276:	f7f9 ffaf 	bl	80031d8 <HAL_UART_TxCpltCallback>
}
 800927a:	bf00      	nop
 800927c:	3740      	adds	r7, #64	; 0x40
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b084      	sub	sp, #16
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f7ff ff89 	bl	80091a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009296:	bf00      	nop
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80092a6:	2300      	movs	r3, #0
 80092a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	695b      	ldr	r3, [r3, #20]
 80092b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ba:	2b80      	cmp	r3, #128	; 0x80
 80092bc:	bf0c      	ite	eq
 80092be:	2301      	moveq	r3, #1
 80092c0:	2300      	movne	r3, #0
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b21      	cmp	r3, #33	; 0x21
 80092d0:	d108      	bne.n	80092e4 <UART_DMAError+0x46>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d005      	beq.n	80092e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2200      	movs	r2, #0
 80092dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80092de:	68b8      	ldr	r0, [r7, #8]
 80092e0:	f000 f865 	bl	80093ae <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	695b      	ldr	r3, [r3, #20]
 80092ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ee:	2b40      	cmp	r3, #64	; 0x40
 80092f0:	bf0c      	ite	eq
 80092f2:	2301      	moveq	r3, #1
 80092f4:	2300      	movne	r3, #0
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b22      	cmp	r3, #34	; 0x22
 8009304:	d108      	bne.n	8009318 <UART_DMAError+0x7a>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d005      	beq.n	8009318 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	2200      	movs	r2, #0
 8009310:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009312:	68b8      	ldr	r0, [r7, #8]
 8009314:	f000 f873 	bl	80093fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931c:	f043 0210 	orr.w	r2, r3, #16
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009324:	68b8      	ldr	r0, [r7, #8]
 8009326:	f7ff ff49 	bl	80091bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800932a:	bf00      	nop
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009332:	b480      	push	{r7}
 8009334:	b085      	sub	sp, #20
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	60b9      	str	r1, [r7, #8]
 800933c:	4613      	mov	r3, r2
 800933e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	88fa      	ldrh	r2, [r7, #6]
 800934a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	88fa      	ldrh	r2, [r7, #6]
 8009350:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2222      	movs	r2, #34	; 0x22
 800935c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d007      	beq.n	8009380 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800937e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	695a      	ldr	r2, [r3, #20]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f042 0201 	orr.w	r2, r2, #1
 800938e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f042 0220 	orr.w	r2, r2, #32
 800939e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3714      	adds	r7, #20
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr

080093ae <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b089      	sub	sp, #36	; 0x24
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	330c      	adds	r3, #12
 80093bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	e853 3f00 	ldrex	r3, [r3]
 80093c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80093cc:	61fb      	str	r3, [r7, #28]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	330c      	adds	r3, #12
 80093d4:	69fa      	ldr	r2, [r7, #28]
 80093d6:	61ba      	str	r2, [r7, #24]
 80093d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093da:	6979      	ldr	r1, [r7, #20]
 80093dc:	69ba      	ldr	r2, [r7, #24]
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	613b      	str	r3, [r7, #16]
   return(result);
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e5      	bne.n	80093b6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2220      	movs	r2, #32
 80093ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80093f2:	bf00      	nop
 80093f4:	3724      	adds	r7, #36	; 0x24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093fe:	b480      	push	{r7}
 8009400:	b095      	sub	sp, #84	; 0x54
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	330c      	adds	r3, #12
 800940c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800941c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	330c      	adds	r3, #12
 8009424:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009426:	643a      	str	r2, [r7, #64]	; 0x40
 8009428:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800942c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e5      	bne.n	8009406 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3314      	adds	r3, #20
 8009440:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	e853 3f00 	ldrex	r3, [r3]
 8009448:	61fb      	str	r3, [r7, #28]
   return(result);
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	f023 0301 	bic.w	r3, r3, #1
 8009450:	64bb      	str	r3, [r7, #72]	; 0x48
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3314      	adds	r3, #20
 8009458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800945a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800945c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1e5      	bne.n	800943a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009472:	2b01      	cmp	r3, #1
 8009474:	d119      	bne.n	80094aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	330c      	adds	r3, #12
 800947c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	e853 3f00 	ldrex	r3, [r3]
 8009484:	60bb      	str	r3, [r7, #8]
   return(result);
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	f023 0310 	bic.w	r3, r3, #16
 800948c:	647b      	str	r3, [r7, #68]	; 0x44
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	330c      	adds	r3, #12
 8009494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009496:	61ba      	str	r2, [r7, #24]
 8009498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949a:	6979      	ldr	r1, [r7, #20]
 800949c:	69ba      	ldr	r2, [r7, #24]
 800949e:	e841 2300 	strex	r3, r2, [r1]
 80094a2:	613b      	str	r3, [r7, #16]
   return(result);
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1e5      	bne.n	8009476 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2220      	movs	r2, #32
 80094ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80094b8:	bf00      	nop
 80094ba:	3754      	adds	r7, #84	; 0x54
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f7ff fe6c 	bl	80091bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094e4:	bf00      	nop
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	2b21      	cmp	r3, #33	; 0x21
 80094fe:	d13e      	bne.n	800957e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009508:	d114      	bne.n	8009534 <UART_Transmit_IT+0x48>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d110      	bne.n	8009534 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009526:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	1c9a      	adds	r2, r3, #2
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	621a      	str	r2, [r3, #32]
 8009532:	e008      	b.n	8009546 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a1b      	ldr	r3, [r3, #32]
 8009538:	1c59      	adds	r1, r3, #1
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	6211      	str	r1, [r2, #32]
 800953e:	781a      	ldrb	r2, [r3, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800954a:	b29b      	uxth	r3, r3
 800954c:	3b01      	subs	r3, #1
 800954e:	b29b      	uxth	r3, r3
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	4619      	mov	r1, r3
 8009554:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10f      	bne.n	800957a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68da      	ldr	r2, [r3, #12]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009568:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68da      	ldr	r2, [r3, #12]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009578:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	e000      	b.n	8009580 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800957e:	2302      	movs	r3, #2
  }
}
 8009580:	4618      	mov	r0, r3
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68da      	ldr	r2, [r3, #12]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2220      	movs	r2, #32
 80095a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7f9 fe13 	bl	80031d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b08c      	sub	sp, #48	; 0x30
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b22      	cmp	r3, #34	; 0x22
 80095ce:	f040 80ab 	bne.w	8009728 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095da:	d117      	bne.n	800960c <UART_Receive_IT+0x50>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d113      	bne.n	800960c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80095e4:	2300      	movs	r3, #0
 80095e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ec:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009604:	1c9a      	adds	r2, r3, #2
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	629a      	str	r2, [r3, #40]	; 0x28
 800960a:	e026      	b.n	800965a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009610:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009612:	2300      	movs	r3, #0
 8009614:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961e:	d007      	beq.n	8009630 <UART_Receive_IT+0x74>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10a      	bne.n	800963e <UART_Receive_IT+0x82>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d106      	bne.n	800963e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	b2da      	uxtb	r2, r3
 8009638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963a:	701a      	strb	r2, [r3, #0]
 800963c:	e008      	b.n	8009650 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	b2db      	uxtb	r3, r3
 8009646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800964a:	b2da      	uxtb	r2, r3
 800964c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800965e:	b29b      	uxth	r3, r3
 8009660:	3b01      	subs	r3, #1
 8009662:	b29b      	uxth	r3, r3
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	4619      	mov	r1, r3
 8009668:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800966a:	2b00      	cmp	r3, #0
 800966c:	d15a      	bne.n	8009724 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68da      	ldr	r2, [r3, #12]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f022 0220 	bic.w	r2, r2, #32
 800967c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68da      	ldr	r2, [r3, #12]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800968c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	695a      	ldr	r2, [r3, #20]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 0201 	bic.w	r2, r2, #1
 800969c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2220      	movs	r2, #32
 80096a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d135      	bne.n	800971a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	330c      	adds	r3, #12
 80096ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	e853 3f00 	ldrex	r3, [r3]
 80096c2:	613b      	str	r3, [r7, #16]
   return(result);
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	f023 0310 	bic.w	r3, r3, #16
 80096ca:	627b      	str	r3, [r7, #36]	; 0x24
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	330c      	adds	r3, #12
 80096d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096d4:	623a      	str	r2, [r7, #32]
 80096d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d8:	69f9      	ldr	r1, [r7, #28]
 80096da:	6a3a      	ldr	r2, [r7, #32]
 80096dc:	e841 2300 	strex	r3, r2, [r1]
 80096e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1e5      	bne.n	80096b4 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f003 0310 	and.w	r3, r3, #16
 80096f2:	2b10      	cmp	r3, #16
 80096f4:	d10a      	bne.n	800970c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096f6:	2300      	movs	r3, #0
 80096f8:	60fb      	str	r3, [r7, #12]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	60fb      	str	r3, [r7, #12]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	60fb      	str	r3, [r7, #12]
 800970a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f7ff fd5c 	bl	80091d0 <HAL_UARTEx_RxEventCallback>
 8009718:	e002      	b.n	8009720 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7f9 fa88 	bl	8002c30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	e002      	b.n	800972a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	e000      	b.n	800972a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009728:	2302      	movs	r3, #2
  }
}
 800972a:	4618      	mov	r0, r3
 800972c:	3730      	adds	r7, #48	; 0x30
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
	...

08009734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009738:	b0c0      	sub	sp, #256	; 0x100
 800973a:	af00      	add	r7, sp, #0
 800973c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800974c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009750:	68d9      	ldr	r1, [r3, #12]
 8009752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	ea40 0301 	orr.w	r3, r0, r1
 800975c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800975e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009762:	689a      	ldr	r2, [r3, #8]
 8009764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	431a      	orrs	r2, r3
 800976c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	431a      	orrs	r2, r3
 8009774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009778:	69db      	ldr	r3, [r3, #28]
 800977a:	4313      	orrs	r3, r2
 800977c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800978c:	f021 010c 	bic.w	r1, r1, #12
 8009790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800979a:	430b      	orrs	r3, r1
 800979c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800979e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80097aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ae:	6999      	ldr	r1, [r3, #24]
 80097b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	ea40 0301 	orr.w	r3, r0, r1
 80097ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	4b8f      	ldr	r3, [pc, #572]	; (8009a00 <UART_SetConfig+0x2cc>)
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d005      	beq.n	80097d4 <UART_SetConfig+0xa0>
 80097c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	4b8d      	ldr	r3, [pc, #564]	; (8009a04 <UART_SetConfig+0x2d0>)
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d104      	bne.n	80097de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097d4:	f7fd fbc6 	bl	8006f64 <HAL_RCC_GetPCLK2Freq>
 80097d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80097dc:	e003      	b.n	80097e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80097de:	f7fd fbad 	bl	8006f3c <HAL_RCC_GetPCLK1Freq>
 80097e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ea:	69db      	ldr	r3, [r3, #28]
 80097ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097f0:	f040 810c 	bne.w	8009a0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097f8:	2200      	movs	r2, #0
 80097fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009802:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009806:	4622      	mov	r2, r4
 8009808:	462b      	mov	r3, r5
 800980a:	1891      	adds	r1, r2, r2
 800980c:	65b9      	str	r1, [r7, #88]	; 0x58
 800980e:	415b      	adcs	r3, r3
 8009810:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009812:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009816:	4621      	mov	r1, r4
 8009818:	eb12 0801 	adds.w	r8, r2, r1
 800981c:	4629      	mov	r1, r5
 800981e:	eb43 0901 	adc.w	r9, r3, r1
 8009822:	f04f 0200 	mov.w	r2, #0
 8009826:	f04f 0300 	mov.w	r3, #0
 800982a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800982e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009832:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009836:	4690      	mov	r8, r2
 8009838:	4699      	mov	r9, r3
 800983a:	4623      	mov	r3, r4
 800983c:	eb18 0303 	adds.w	r3, r8, r3
 8009840:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009844:	462b      	mov	r3, r5
 8009846:	eb49 0303 	adc.w	r3, r9, r3
 800984a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800984e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800985a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800985e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009862:	460b      	mov	r3, r1
 8009864:	18db      	adds	r3, r3, r3
 8009866:	653b      	str	r3, [r7, #80]	; 0x50
 8009868:	4613      	mov	r3, r2
 800986a:	eb42 0303 	adc.w	r3, r2, r3
 800986e:	657b      	str	r3, [r7, #84]	; 0x54
 8009870:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009874:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009878:	f7f7 f858 	bl	800092c <__aeabi_uldivmod>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4b61      	ldr	r3, [pc, #388]	; (8009a08 <UART_SetConfig+0x2d4>)
 8009882:	fba3 2302 	umull	r2, r3, r3, r2
 8009886:	095b      	lsrs	r3, r3, #5
 8009888:	011c      	lsls	r4, r3, #4
 800988a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800988e:	2200      	movs	r2, #0
 8009890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009894:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009898:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800989c:	4642      	mov	r2, r8
 800989e:	464b      	mov	r3, r9
 80098a0:	1891      	adds	r1, r2, r2
 80098a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80098a4:	415b      	adcs	r3, r3
 80098a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80098ac:	4641      	mov	r1, r8
 80098ae:	eb12 0a01 	adds.w	sl, r2, r1
 80098b2:	4649      	mov	r1, r9
 80098b4:	eb43 0b01 	adc.w	fp, r3, r1
 80098b8:	f04f 0200 	mov.w	r2, #0
 80098bc:	f04f 0300 	mov.w	r3, #0
 80098c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80098c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80098c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098cc:	4692      	mov	sl, r2
 80098ce:	469b      	mov	fp, r3
 80098d0:	4643      	mov	r3, r8
 80098d2:	eb1a 0303 	adds.w	r3, sl, r3
 80098d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098da:	464b      	mov	r3, r9
 80098dc:	eb4b 0303 	adc.w	r3, fp, r3
 80098e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80098e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80098f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80098f8:	460b      	mov	r3, r1
 80098fa:	18db      	adds	r3, r3, r3
 80098fc:	643b      	str	r3, [r7, #64]	; 0x40
 80098fe:	4613      	mov	r3, r2
 8009900:	eb42 0303 	adc.w	r3, r2, r3
 8009904:	647b      	str	r3, [r7, #68]	; 0x44
 8009906:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800990a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800990e:	f7f7 f80d 	bl	800092c <__aeabi_uldivmod>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4611      	mov	r1, r2
 8009918:	4b3b      	ldr	r3, [pc, #236]	; (8009a08 <UART_SetConfig+0x2d4>)
 800991a:	fba3 2301 	umull	r2, r3, r3, r1
 800991e:	095b      	lsrs	r3, r3, #5
 8009920:	2264      	movs	r2, #100	; 0x64
 8009922:	fb02 f303 	mul.w	r3, r2, r3
 8009926:	1acb      	subs	r3, r1, r3
 8009928:	00db      	lsls	r3, r3, #3
 800992a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800992e:	4b36      	ldr	r3, [pc, #216]	; (8009a08 <UART_SetConfig+0x2d4>)
 8009930:	fba3 2302 	umull	r2, r3, r3, r2
 8009934:	095b      	lsrs	r3, r3, #5
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800993c:	441c      	add	r4, r3
 800993e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009942:	2200      	movs	r2, #0
 8009944:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009948:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800994c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009950:	4642      	mov	r2, r8
 8009952:	464b      	mov	r3, r9
 8009954:	1891      	adds	r1, r2, r2
 8009956:	63b9      	str	r1, [r7, #56]	; 0x38
 8009958:	415b      	adcs	r3, r3
 800995a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800995c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009960:	4641      	mov	r1, r8
 8009962:	1851      	adds	r1, r2, r1
 8009964:	6339      	str	r1, [r7, #48]	; 0x30
 8009966:	4649      	mov	r1, r9
 8009968:	414b      	adcs	r3, r1
 800996a:	637b      	str	r3, [r7, #52]	; 0x34
 800996c:	f04f 0200 	mov.w	r2, #0
 8009970:	f04f 0300 	mov.w	r3, #0
 8009974:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009978:	4659      	mov	r1, fp
 800997a:	00cb      	lsls	r3, r1, #3
 800997c:	4651      	mov	r1, sl
 800997e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009982:	4651      	mov	r1, sl
 8009984:	00ca      	lsls	r2, r1, #3
 8009986:	4610      	mov	r0, r2
 8009988:	4619      	mov	r1, r3
 800998a:	4603      	mov	r3, r0
 800998c:	4642      	mov	r2, r8
 800998e:	189b      	adds	r3, r3, r2
 8009990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009994:	464b      	mov	r3, r9
 8009996:	460a      	mov	r2, r1
 8009998:	eb42 0303 	adc.w	r3, r2, r3
 800999c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80099ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80099b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80099b4:	460b      	mov	r3, r1
 80099b6:	18db      	adds	r3, r3, r3
 80099b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80099ba:	4613      	mov	r3, r2
 80099bc:	eb42 0303 	adc.w	r3, r2, r3
 80099c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80099ca:	f7f6 ffaf 	bl	800092c <__aeabi_uldivmod>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	4b0d      	ldr	r3, [pc, #52]	; (8009a08 <UART_SetConfig+0x2d4>)
 80099d4:	fba3 1302 	umull	r1, r3, r3, r2
 80099d8:	095b      	lsrs	r3, r3, #5
 80099da:	2164      	movs	r1, #100	; 0x64
 80099dc:	fb01 f303 	mul.w	r3, r1, r3
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	00db      	lsls	r3, r3, #3
 80099e4:	3332      	adds	r3, #50	; 0x32
 80099e6:	4a08      	ldr	r2, [pc, #32]	; (8009a08 <UART_SetConfig+0x2d4>)
 80099e8:	fba2 2303 	umull	r2, r3, r2, r3
 80099ec:	095b      	lsrs	r3, r3, #5
 80099ee:	f003 0207 	and.w	r2, r3, #7
 80099f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4422      	add	r2, r4
 80099fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80099fc:	e105      	b.n	8009c0a <UART_SetConfig+0x4d6>
 80099fe:	bf00      	nop
 8009a00:	40011000 	.word	0x40011000
 8009a04:	40011400 	.word	0x40011400
 8009a08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a10:	2200      	movs	r2, #0
 8009a12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009a1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009a1e:	4642      	mov	r2, r8
 8009a20:	464b      	mov	r3, r9
 8009a22:	1891      	adds	r1, r2, r2
 8009a24:	6239      	str	r1, [r7, #32]
 8009a26:	415b      	adcs	r3, r3
 8009a28:	627b      	str	r3, [r7, #36]	; 0x24
 8009a2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a2e:	4641      	mov	r1, r8
 8009a30:	1854      	adds	r4, r2, r1
 8009a32:	4649      	mov	r1, r9
 8009a34:	eb43 0501 	adc.w	r5, r3, r1
 8009a38:	f04f 0200 	mov.w	r2, #0
 8009a3c:	f04f 0300 	mov.w	r3, #0
 8009a40:	00eb      	lsls	r3, r5, #3
 8009a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a46:	00e2      	lsls	r2, r4, #3
 8009a48:	4614      	mov	r4, r2
 8009a4a:	461d      	mov	r5, r3
 8009a4c:	4643      	mov	r3, r8
 8009a4e:	18e3      	adds	r3, r4, r3
 8009a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a54:	464b      	mov	r3, r9
 8009a56:	eb45 0303 	adc.w	r3, r5, r3
 8009a5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009a6e:	f04f 0200 	mov.w	r2, #0
 8009a72:	f04f 0300 	mov.w	r3, #0
 8009a76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	008b      	lsls	r3, r1, #2
 8009a7e:	4621      	mov	r1, r4
 8009a80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a84:	4621      	mov	r1, r4
 8009a86:	008a      	lsls	r2, r1, #2
 8009a88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a8c:	f7f6 ff4e 	bl	800092c <__aeabi_uldivmod>
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	4b60      	ldr	r3, [pc, #384]	; (8009c18 <UART_SetConfig+0x4e4>)
 8009a96:	fba3 2302 	umull	r2, r3, r3, r2
 8009a9a:	095b      	lsrs	r3, r3, #5
 8009a9c:	011c      	lsls	r4, r3, #4
 8009a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009aa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009aac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009ab0:	4642      	mov	r2, r8
 8009ab2:	464b      	mov	r3, r9
 8009ab4:	1891      	adds	r1, r2, r2
 8009ab6:	61b9      	str	r1, [r7, #24]
 8009ab8:	415b      	adcs	r3, r3
 8009aba:	61fb      	str	r3, [r7, #28]
 8009abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ac0:	4641      	mov	r1, r8
 8009ac2:	1851      	adds	r1, r2, r1
 8009ac4:	6139      	str	r1, [r7, #16]
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	414b      	adcs	r3, r1
 8009aca:	617b      	str	r3, [r7, #20]
 8009acc:	f04f 0200 	mov.w	r2, #0
 8009ad0:	f04f 0300 	mov.w	r3, #0
 8009ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ad8:	4659      	mov	r1, fp
 8009ada:	00cb      	lsls	r3, r1, #3
 8009adc:	4651      	mov	r1, sl
 8009ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ae2:	4651      	mov	r1, sl
 8009ae4:	00ca      	lsls	r2, r1, #3
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	4619      	mov	r1, r3
 8009aea:	4603      	mov	r3, r0
 8009aec:	4642      	mov	r2, r8
 8009aee:	189b      	adds	r3, r3, r2
 8009af0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009af4:	464b      	mov	r3, r9
 8009af6:	460a      	mov	r2, r1
 8009af8:	eb42 0303 	adc.w	r3, r2, r3
 8009afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009b0c:	f04f 0200 	mov.w	r2, #0
 8009b10:	f04f 0300 	mov.w	r3, #0
 8009b14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009b18:	4649      	mov	r1, r9
 8009b1a:	008b      	lsls	r3, r1, #2
 8009b1c:	4641      	mov	r1, r8
 8009b1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b22:	4641      	mov	r1, r8
 8009b24:	008a      	lsls	r2, r1, #2
 8009b26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009b2a:	f7f6 feff 	bl	800092c <__aeabi_uldivmod>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4b39      	ldr	r3, [pc, #228]	; (8009c18 <UART_SetConfig+0x4e4>)
 8009b34:	fba3 1302 	umull	r1, r3, r3, r2
 8009b38:	095b      	lsrs	r3, r3, #5
 8009b3a:	2164      	movs	r1, #100	; 0x64
 8009b3c:	fb01 f303 	mul.w	r3, r1, r3
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	3332      	adds	r3, #50	; 0x32
 8009b46:	4a34      	ldr	r2, [pc, #208]	; (8009c18 <UART_SetConfig+0x4e4>)
 8009b48:	fba2 2303 	umull	r2, r3, r2, r3
 8009b4c:	095b      	lsrs	r3, r3, #5
 8009b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b52:	441c      	add	r4, r3
 8009b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b58:	2200      	movs	r2, #0
 8009b5a:	673b      	str	r3, [r7, #112]	; 0x70
 8009b5c:	677a      	str	r2, [r7, #116]	; 0x74
 8009b5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009b62:	4642      	mov	r2, r8
 8009b64:	464b      	mov	r3, r9
 8009b66:	1891      	adds	r1, r2, r2
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	415b      	adcs	r3, r3
 8009b6c:	60fb      	str	r3, [r7, #12]
 8009b6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b72:	4641      	mov	r1, r8
 8009b74:	1851      	adds	r1, r2, r1
 8009b76:	6039      	str	r1, [r7, #0]
 8009b78:	4649      	mov	r1, r9
 8009b7a:	414b      	adcs	r3, r1
 8009b7c:	607b      	str	r3, [r7, #4]
 8009b7e:	f04f 0200 	mov.w	r2, #0
 8009b82:	f04f 0300 	mov.w	r3, #0
 8009b86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009b8a:	4659      	mov	r1, fp
 8009b8c:	00cb      	lsls	r3, r1, #3
 8009b8e:	4651      	mov	r1, sl
 8009b90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b94:	4651      	mov	r1, sl
 8009b96:	00ca      	lsls	r2, r1, #3
 8009b98:	4610      	mov	r0, r2
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	4642      	mov	r2, r8
 8009ba0:	189b      	adds	r3, r3, r2
 8009ba2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ba4:	464b      	mov	r3, r9
 8009ba6:	460a      	mov	r2, r1
 8009ba8:	eb42 0303 	adc.w	r3, r2, r3
 8009bac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	663b      	str	r3, [r7, #96]	; 0x60
 8009bb8:	667a      	str	r2, [r7, #100]	; 0x64
 8009bba:	f04f 0200 	mov.w	r2, #0
 8009bbe:	f04f 0300 	mov.w	r3, #0
 8009bc2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009bc6:	4649      	mov	r1, r9
 8009bc8:	008b      	lsls	r3, r1, #2
 8009bca:	4641      	mov	r1, r8
 8009bcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bd0:	4641      	mov	r1, r8
 8009bd2:	008a      	lsls	r2, r1, #2
 8009bd4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009bd8:	f7f6 fea8 	bl	800092c <__aeabi_uldivmod>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4b0d      	ldr	r3, [pc, #52]	; (8009c18 <UART_SetConfig+0x4e4>)
 8009be2:	fba3 1302 	umull	r1, r3, r3, r2
 8009be6:	095b      	lsrs	r3, r3, #5
 8009be8:	2164      	movs	r1, #100	; 0x64
 8009bea:	fb01 f303 	mul.w	r3, r1, r3
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	011b      	lsls	r3, r3, #4
 8009bf2:	3332      	adds	r3, #50	; 0x32
 8009bf4:	4a08      	ldr	r2, [pc, #32]	; (8009c18 <UART_SetConfig+0x4e4>)
 8009bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bfa:	095b      	lsrs	r3, r3, #5
 8009bfc:	f003 020f 	and.w	r2, r3, #15
 8009c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4422      	add	r2, r4
 8009c08:	609a      	str	r2, [r3, #8]
}
 8009c0a:	bf00      	nop
 8009c0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009c10:	46bd      	mov	sp, r7
 8009c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c16:	bf00      	nop
 8009c18:	51eb851f 	.word	0x51eb851f

08009c1c <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b10      	cmp	r3, #16
 8009c2c:	d11c      	bne.n	8009c68 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	4b1f      	ldr	r3, [pc, #124]	; (8009cb0 <FSMC_NAND_Init+0x94>)
 8009c34:	4013      	ands	r3, r2
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	6851      	ldr	r1, [r2, #4]
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	6892      	ldr	r2, [r2, #8]
 8009c3e:	4311      	orrs	r1, r2
 8009c40:	683a      	ldr	r2, [r7, #0]
 8009c42:	68d2      	ldr	r2, [r2, #12]
 8009c44:	4311      	orrs	r1, r2
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	6912      	ldr	r2, [r2, #16]
 8009c4a:	4311      	orrs	r1, r2
 8009c4c:	683a      	ldr	r2, [r7, #0]
 8009c4e:	6952      	ldr	r2, [r2, #20]
 8009c50:	0252      	lsls	r2, r2, #9
 8009c52:	4311      	orrs	r1, r2
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	6992      	ldr	r2, [r2, #24]
 8009c58:	0352      	lsls	r2, r2, #13
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	f043 0208 	orr.w	r2, r3, #8
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	601a      	str	r2, [r3, #0]
 8009c66:	e01b      	b.n	8009ca0 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a1a      	ldr	r2, [r3, #32]
 8009c6c:	4b10      	ldr	r3, [pc, #64]	; (8009cb0 <FSMC_NAND_Init+0x94>)
 8009c6e:	4013      	ands	r3, r2
 8009c70:	683a      	ldr	r2, [r7, #0]
 8009c72:	6851      	ldr	r1, [r2, #4]
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	6892      	ldr	r2, [r2, #8]
 8009c78:	4311      	orrs	r1, r2
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	68d2      	ldr	r2, [r2, #12]
 8009c7e:	4311      	orrs	r1, r2
 8009c80:	683a      	ldr	r2, [r7, #0]
 8009c82:	6912      	ldr	r2, [r2, #16]
 8009c84:	4311      	orrs	r1, r2
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	6952      	ldr	r2, [r2, #20]
 8009c8a:	0252      	lsls	r2, r2, #9
 8009c8c:	4311      	orrs	r1, r2
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	6992      	ldr	r2, [r2, #24]
 8009c92:	0352      	lsls	r2, r2, #13
 8009c94:	430a      	orrs	r2, r1
 8009c96:	4313      	orrs	r3, r2
 8009c98:	f043 0208 	orr.w	r2, r3, #8
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	fff00181 	.word	0xfff00181

08009cb4 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b10      	cmp	r3, #16
 8009cc4:	d112      	bne.n	8009cec <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	021b      	lsls	r3, r3, #8
 8009cd4:	431a      	orrs	r2, r3
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	041b      	lsls	r3, r3, #16
 8009cdc:	431a      	orrs	r2, r3
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	061b      	lsls	r3, r3, #24
 8009ce4:	431a      	orrs	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	609a      	str	r2, [r3, #8]
 8009cea:	e011      	b.n	8009d10 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	021b      	lsls	r3, r3, #8
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	041b      	lsls	r3, r3, #16
 8009d02:	431a      	orrs	r2, r3
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	061b      	lsls	r3, r3, #24
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b085      	sub	sp, #20
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	60f8      	str	r0, [r7, #12]
 8009d26:	60b9      	str	r1, [r7, #8]
 8009d28:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b10      	cmp	r3, #16
 8009d2e:	d112      	bne.n	8009d56 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	021b      	lsls	r3, r3, #8
 8009d3e:	431a      	orrs	r2, r3
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	041b      	lsls	r3, r3, #16
 8009d46:	431a      	orrs	r2, r3
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	061b      	lsls	r3, r3, #24
 8009d4e:	431a      	orrs	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	60da      	str	r2, [r3, #12]
 8009d54:	e011      	b.n	8009d7a <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	021b      	lsls	r3, r3, #8
 8009d64:	431a      	orrs	r2, r3
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	041b      	lsls	r3, r3, #16
 8009d6c:	431a      	orrs	r2, r3
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	061b      	lsls	r3, r3, #24
 8009d74:	431a      	orrs	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NAND_DEVICE(Device));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Disable ECC feature */
  if (Bank == FSMC_NAND_BANK2)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	2b10      	cmp	r3, #16
 8009d96:	d106      	bne.n	8009da6 <FSMC_NAND_ECC_Disable+0x1e>
  {
    CLEAR_BIT(Device->PCR2, FSMC_PCR2_ECCEN);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	e005      	b.n	8009db2 <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    CLEAR_BIT(Device->PCR3, FSMC_PCR2_ECCEN);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a1b      	ldr	r3, [r3, #32]
 8009daa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	621a      	str	r2, [r3, #32]
  }

  return HAL_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009dc4:	4904      	ldr	r1, [pc, #16]	; (8009dd8 <MX_FATFS_Init+0x18>)
 8009dc6:	4805      	ldr	r0, [pc, #20]	; (8009ddc <MX_FATFS_Init+0x1c>)
 8009dc8:	f003 fb5a 	bl	800d480 <FATFS_LinkDriver>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	461a      	mov	r2, r3
 8009dd0:	4b03      	ldr	r3, [pc, #12]	; (8009de0 <MX_FATFS_Init+0x20>)
 8009dd2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009dd4:	bf00      	nop
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	20003c88 	.word	0x20003c88
 8009ddc:	200000b0 	.word	0x200000b0
 8009de0:	20003c84 	.word	0x20003c84

08009de4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009de4:	b480      	push	{r7}
 8009de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009de8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8009dfe:	4b0a      	ldr	r3, [pc, #40]	; (8009e28 <USER_initialize+0x34>)
 8009e00:	2201      	movs	r2, #1
 8009e02:	701a      	strb	r2, [r3, #0]
    Stat &= ~STA_NOINIT;
 8009e04:	4b08      	ldr	r3, [pc, #32]	; (8009e28 <USER_initialize+0x34>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	f023 0301 	bic.w	r3, r3, #1
 8009e0e:	b2da      	uxtb	r2, r3
 8009e10:	4b05      	ldr	r3, [pc, #20]	; (8009e28 <USER_initialize+0x34>)
 8009e12:	701a      	strb	r2, [r3, #0]

    return Stat;
 8009e14:	4b04      	ldr	r3, [pc, #16]	; (8009e28 <USER_initialize+0x34>)
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	370c      	adds	r7, #12
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	200000ad 	.word	0x200000ad

08009e2c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	4603      	mov	r3, r0
 8009e34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8009e36:	4b0a      	ldr	r3, [pc, #40]	; (8009e60 <USER_status+0x34>)
 8009e38:	2201      	movs	r2, #1
 8009e3a:	701a      	strb	r2, [r3, #0]
    Stat &= ~STA_NOINIT;
 8009e3c:	4b08      	ldr	r3, [pc, #32]	; (8009e60 <USER_status+0x34>)
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	f023 0301 	bic.w	r3, r3, #1
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <USER_status+0x34>)
 8009e4a:	701a      	strb	r2, [r3, #0]

    return Stat;
 8009e4c:	4b04      	ldr	r3, [pc, #16]	; (8009e60 <USER_status+0x34>)
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	200000ad 	.word	0x200000ad

08009e64 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08c      	sub	sp, #48	; 0x30
 8009e68:	af04      	add	r7, sp, #16
 8009e6a:	60b9      	str	r1, [r7, #8]
 8009e6c:	607a      	str	r2, [r7, #4]
 8009e6e:	603b      	str	r3, [r7, #0]
 8009e70:	4603      	mov	r3, r0
 8009e72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */

	/**/
	DRESULT ret = RES_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	77fb      	strb	r3, [r7, #31]
	uint32_t ss = nand_getPageSize();
 8009e78:	f7f7 fa76 	bl	8001368 <nand_getPageSize>
 8009e7c:	6178      	str	r0, [r7, #20]
	int i = -1;
 8009e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e82:	61bb      	str	r3, [r7, #24]
	while (++i < count) {
 8009e84:	e01c      	b.n	8009ec0 <USER_read+0x5c>
		if (dbg > logOff) Report(1, "[%s] Dev:%u page:%u(%u) count:%u\r\n", __func__, pdrv, sector, ss, count);
 8009e86:	4b14      	ldr	r3, [pc, #80]	; (8009ed8 <USER_read+0x74>)
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00c      	beq.n	8009ea8 <USER_read+0x44>
 8009e8e:	7bfa      	ldrb	r2, [r7, #15]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	9302      	str	r3, [sp, #8]
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	9301      	str	r3, [sp, #4]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	4a0f      	ldr	r2, [pc, #60]	; (8009edc <USER_read+0x78>)
 8009ea0:	490f      	ldr	r1, [pc, #60]	; (8009ee0 <USER_read+0x7c>)
 8009ea2:	2001      	movs	r0, #1
 8009ea4:	f7f8 fe60 	bl	8002b68 <Report>
		ret |= nand_ReadPage(sector++, (BYTE *)buff);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	607a      	str	r2, [r7, #4]
 8009eae:	68b9      	ldr	r1, [r7, #8]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7f7 ffc9 	bl	8001e48 <nand_ReadPage>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	461a      	mov	r2, r3
 8009eba:	7ffb      	ldrb	r3, [r7, #31]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	77fb      	strb	r3, [r7, #31]
	while (++i < count) {
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	61bb      	str	r3, [r7, #24]
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d8db      	bhi.n	8009e86 <USER_read+0x22>
	}
	/**/

    return ret;
 8009ece:	7ffb      	ldrb	r3, [r7, #31]
  /* USER CODE END READ */
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3720      	adds	r7, #32
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	20000068 	.word	0x20000068
 8009edc:	08014bf8 	.word	0x08014bf8
 8009ee0:	080129a8 	.word	0x080129a8

08009ee4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b08c      	sub	sp, #48	; 0x30
 8009ee8:	af04      	add	r7, sp, #16
 8009eea:	60b9      	str	r1, [r7, #8]
 8009eec:	607a      	str	r2, [r7, #4]
 8009eee:	603b      	str	r3, [r7, #0]
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

	/**/
	DRESULT ret = RES_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	77fb      	strb	r3, [r7, #31]
	uint32_t ss = nand_getPageSize();
 8009ef8:	f7f7 fa36 	bl	8001368 <nand_getPageSize>
 8009efc:	6178      	str	r0, [r7, #20]
	int i = -1;
 8009efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f02:	61bb      	str	r3, [r7, #24]
	while (++i < count) {
 8009f04:	e01c      	b.n	8009f40 <USER_write+0x5c>
		if (dbg > logOff) Report(1, "[%s] Dev:%u sector:%u(%u) count:%u\r\n", __func__, pdrv, sector, ss, count);
 8009f06:	4b14      	ldr	r3, [pc, #80]	; (8009f58 <USER_write+0x74>)
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00c      	beq.n	8009f28 <USER_write+0x44>
 8009f0e:	7bfa      	ldrb	r2, [r7, #15]
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	9302      	str	r3, [sp, #8]
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	9301      	str	r3, [sp, #4]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	4a0f      	ldr	r2, [pc, #60]	; (8009f5c <USER_write+0x78>)
 8009f20:	490f      	ldr	r1, [pc, #60]	; (8009f60 <USER_write+0x7c>)
 8009f22:	2001      	movs	r0, #1
 8009f24:	f7f8 fe20 	bl	8002b68 <Report>
		//if (!pageIsEmpty(sector)) nand_EraseBlock(nand_PageToBlock(sector));
		ret |= nand_WritePage(sector++, (BYTE *)buff);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	1c5a      	adds	r2, r3, #1
 8009f2c:	607a      	str	r2, [r7, #4]
 8009f2e:	68b9      	ldr	r1, [r7, #8]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7f7 ffa9 	bl	8001e88 <nand_WritePage>
 8009f36:	4603      	mov	r3, r0
 8009f38:	461a      	mov	r2, r3
 8009f3a:	7ffb      	ldrb	r3, [r7, #31]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	77fb      	strb	r3, [r7, #31]
	while (++i < count) {
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	3301      	adds	r3, #1
 8009f44:	61bb      	str	r3, [r7, #24]
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	683a      	ldr	r2, [r7, #0]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d8db      	bhi.n	8009f06 <USER_write+0x22>
	}
	/**/

    return ret;
 8009f4e:	7ffb      	ldrb	r3, [r7, #31]
  /* USER CODE END WRITE */
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3720      	adds	r7, #32
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	20000068 	.word	0x20000068
 8009f5c:	08014c04 	.word	0x08014c04
 8009f60:	080129cc 	.word	0x080129cc

08009f64 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	603a      	str	r2, [r7, #0]
 8009f6e:	71fb      	strb	r3, [r7, #7]
 8009f70:	460b      	mov	r3, r1
 8009f72:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	73fb      	strb	r3, [r7, #15]
        /**/
        switch (cmd) {
 8009f78:	79bb      	ldrb	r3, [r7, #6]
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d825      	bhi.n	8009fca <USER_ioctl+0x66>
 8009f7e:	a201      	add	r2, pc, #4	; (adr r2, 8009f84 <USER_ioctl+0x20>)
 8009f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f84:	08009f95 	.word	0x08009f95
 8009f88:	08009f9b 	.word	0x08009f9b
 8009f8c:	08009fab 	.word	0x08009fab
 8009f90:	08009fbb 	.word	0x08009fbb
        	case CTRL_SYNC:
        		res = RES_OK;
 8009f94:	2300      	movs	r3, #0
 8009f96:	73fb      	strb	r3, [r7, #15]
        	break;
 8009f98:	e019      	b.n	8009fce <USER_ioctl+0x6a>
        	case GET_SECTOR_COUNT:
        		*(DWORD *)buff = nand_getPageCount();//W25qxx_getSectorCount();
 8009f9a:	f7f7 f9f1 	bl	8001380 <nand_getPageCount>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	601a      	str	r2, [r3, #0]
        		res = RES_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	73fb      	strb	r3, [r7, #15]
        	break;
 8009fa8:	e011      	b.n	8009fce <USER_ioctl+0x6a>
        	case GET_SECTOR_SIZE:
        		*(DWORD *)buff = nand_getPageSize();//W25qxx_getSectorSize();
 8009faa:	f7f7 f9dd 	bl	8001368 <nand_getPageSize>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	601a      	str	r2, [r3, #0]
        		res = RES_OK;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	73fb      	strb	r3, [r7, #15]
        	break;
 8009fb8:	e009      	b.n	8009fce <USER_ioctl+0x6a>
        	case GET_BLOCK_SIZE:
        		*(DWORD *)buff = nand_getBlockSize();//W25qxx_getBlockSize();
 8009fba:	f7f7 f9f5 	bl	80013a8 <nand_getBlockSize>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	601a      	str	r2, [r3, #0]
        		res = RES_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73fb      	strb	r3, [r7, #15]
        	break;
 8009fc8:	e001      	b.n	8009fce <USER_ioctl+0x6a>
            	default :
            		res = RES_PARERR;
 8009fca:	2304      	movs	r3, #4
 8009fcc:	73fb      	strb	r3, [r7, #15]
        }
        /**/


    return res;
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	4603      	mov	r3, r0
 8009fe0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009fe2:	79fb      	ldrb	r3, [r7, #7]
 8009fe4:	4a09      	ldr	r2, [pc, #36]	; (800a00c <disk_status+0x34>)
 8009fe6:	3302      	adds	r3, #2
 8009fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	79fa      	ldrb	r2, [r7, #7]
 8009ff0:	4906      	ldr	r1, [pc, #24]	; (800a00c <disk_status+0x34>)
 8009ff2:	440a      	add	r2, r1
 8009ff4:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	4798      	blx	r3
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a000:	7bfb      	ldrb	r3, [r7, #15]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	20003cd0 	.word	0x20003cd0

0800a010 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	4603      	mov	r3, r0
 800a018:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a01a:	2300      	movs	r3, #0
 800a01c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a01e:	79fb      	ldrb	r3, [r7, #7]
 800a020:	4a0d      	ldr	r2, [pc, #52]	; (800a058 <disk_initialize+0x48>)
 800a022:	5cd3      	ldrb	r3, [r2, r3]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d112      	bne.n	800a04e <disk_initialize+0x3e>
  {
    disk.is_initialized[pdrv] = 1;
 800a028:	79fb      	ldrb	r3, [r7, #7]
 800a02a:	4a0b      	ldr	r2, [pc, #44]	; (800a058 <disk_initialize+0x48>)
 800a02c:	2101      	movs	r1, #1
 800a02e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a030:	79fb      	ldrb	r3, [r7, #7]
 800a032:	4a09      	ldr	r2, [pc, #36]	; (800a058 <disk_initialize+0x48>)
 800a034:	3302      	adds	r3, #2
 800a036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	79fa      	ldrb	r2, [r7, #7]
 800a03e:	4906      	ldr	r1, [pc, #24]	; (800a058 <disk_initialize+0x48>)
 800a040:	440a      	add	r2, r1
 800a042:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800a046:	4610      	mov	r0, r2
 800a048:	4798      	blx	r3
 800a04a:	4603      	mov	r3, r0
 800a04c:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a04e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	20003cd0 	.word	0x20003cd0

0800a05c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a05c:	b590      	push	{r4, r7, lr}
 800a05e:	b087      	sub	sp, #28
 800a060:	af00      	add	r7, sp, #0
 800a062:	60b9      	str	r1, [r7, #8]
 800a064:	607a      	str	r2, [r7, #4]
 800a066:	603b      	str	r3, [r7, #0]
 800a068:	4603      	mov	r3, r0
 800a06a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
 800a06e:	4a0a      	ldr	r2, [pc, #40]	; (800a098 <disk_read+0x3c>)
 800a070:	3302      	adds	r3, #2
 800a072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a076:	689c      	ldr	r4, [r3, #8]
 800a078:	7bfb      	ldrb	r3, [r7, #15]
 800a07a:	4a07      	ldr	r2, [pc, #28]	; (800a098 <disk_read+0x3c>)
 800a07c:	4413      	add	r3, r2
 800a07e:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	47a0      	blx	r4
 800a08a:	4603      	mov	r3, r0
 800a08c:	75fb      	strb	r3, [r7, #23]
  return res;
 800a08e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a090:	4618      	mov	r0, r3
 800a092:	371c      	adds	r7, #28
 800a094:	46bd      	mov	sp, r7
 800a096:	bd90      	pop	{r4, r7, pc}
 800a098:	20003cd0 	.word	0x20003cd0

0800a09c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a09c:	b590      	push	{r4, r7, lr}
 800a09e:	b087      	sub	sp, #28
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60b9      	str	r1, [r7, #8]
 800a0a4:	607a      	str	r2, [r7, #4]
 800a0a6:	603b      	str	r3, [r7, #0]
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	4a0a      	ldr	r2, [pc, #40]	; (800a0d8 <disk_write+0x3c>)
 800a0b0:	3302      	adds	r3, #2
 800a0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0b6:	68dc      	ldr	r4, [r3, #12]
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ba:	4a07      	ldr	r2, [pc, #28]	; (800a0d8 <disk_write+0x3c>)
 800a0bc:	4413      	add	r3, r2
 800a0be:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	68b9      	ldr	r1, [r7, #8]
 800a0c8:	47a0      	blx	r4
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	75fb      	strb	r3, [r7, #23]
  return res;
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	371c      	adds	r7, #28
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd90      	pop	{r4, r7, pc}
 800a0d8:	20003cd0 	.word	0x20003cd0

0800a0dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	603a      	str	r2, [r7, #0]
 800a0e6:	71fb      	strb	r3, [r7, #7]
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a0ec:	79fb      	ldrb	r3, [r7, #7]
 800a0ee:	4a0a      	ldr	r2, [pc, #40]	; (800a118 <disk_ioctl+0x3c>)
 800a0f0:	3302      	adds	r3, #2
 800a0f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	79fa      	ldrb	r2, [r7, #7]
 800a0fa:	4907      	ldr	r1, [pc, #28]	; (800a118 <disk_ioctl+0x3c>)
 800a0fc:	440a      	add	r2, r1
 800a0fe:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 800a102:	79b9      	ldrb	r1, [r7, #6]
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	4798      	blx	r3
 800a108:	4603      	mov	r3, r0
 800a10a:	73fb      	strb	r3, [r7, #15]
  return res;
 800a10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	20003cd0 	.word	0x20003cd0

0800a11c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3301      	adds	r3, #1
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a12c:	89fb      	ldrh	r3, [r7, #14]
 800a12e:	021b      	lsls	r3, r3, #8
 800a130:	b21a      	sxth	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	b21b      	sxth	r3, r3
 800a138:	4313      	orrs	r3, r2
 800a13a:	b21b      	sxth	r3, r3
 800a13c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a13e:	89fb      	ldrh	r3, [r7, #14]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	3303      	adds	r3, #3
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	021b      	lsls	r3, r3, #8
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	3202      	adds	r2, #2
 800a164:	7812      	ldrb	r2, [r2, #0]
 800a166:	4313      	orrs	r3, r2
 800a168:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	021b      	lsls	r3, r3, #8
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	3201      	adds	r2, #1
 800a172:	7812      	ldrb	r2, [r2, #0]
 800a174:	4313      	orrs	r3, r2
 800a176:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	021b      	lsls	r3, r3, #8
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	7812      	ldrb	r2, [r2, #0]
 800a180:	4313      	orrs	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]
	return rv;
 800a184:	68fb      	ldr	r3, [r7, #12]
}
 800a186:	4618      	mov	r0, r3
 800a188:	3714      	adds	r7, #20
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a192:	b480      	push	{r7}
 800a194:	b083      	sub	sp, #12
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	460b      	mov	r3, r1
 800a19c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	1c5a      	adds	r2, r3, #1
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	887a      	ldrh	r2, [r7, #2]
 800a1a6:	b2d2      	uxtb	r2, r2
 800a1a8:	701a      	strb	r2, [r3, #0]
 800a1aa:	887b      	ldrh	r3, [r7, #2]
 800a1ac:	0a1b      	lsrs	r3, r3, #8
 800a1ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	1c5a      	adds	r2, r3, #1
 800a1b4:	607a      	str	r2, [r7, #4]
 800a1b6:	887a      	ldrh	r2, [r7, #2]
 800a1b8:	b2d2      	uxtb	r2, r2
 800a1ba:	701a      	strb	r2, [r3, #0]
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	b2d2      	uxtb	r2, r2
 800a1dc:	701a      	strb	r2, [r3, #0]
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	0a1b      	lsrs	r3, r3, #8
 800a1e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	1c5a      	adds	r2, r3, #1
 800a1e8:	607a      	str	r2, [r7, #4]
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	b2d2      	uxtb	r2, r2
 800a1ee:	701a      	strb	r2, [r3, #0]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	0a1b      	lsrs	r3, r3, #8
 800a1f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	1c5a      	adds	r2, r3, #1
 800a1fa:	607a      	str	r2, [r7, #4]
 800a1fc:	683a      	ldr	r2, [r7, #0]
 800a1fe:	b2d2      	uxtb	r2, r2
 800a200:	701a      	strb	r2, [r3, #0]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	0a1b      	lsrs	r3, r3, #8
 800a206:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	1c5a      	adds	r2, r3, #1
 800a20c:	607a      	str	r2, [r7, #4]
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	b2d2      	uxtb	r2, r2
 800a212:	701a      	strb	r2, [r3, #0]
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a220:	b480      	push	{r7}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00d      	beq.n	800a256 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	1c53      	adds	r3, r2, #1
 800a23e:	613b      	str	r3, [r7, #16]
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	1c59      	adds	r1, r3, #1
 800a244:	6179      	str	r1, [r7, #20]
 800a246:	7812      	ldrb	r2, [r2, #0]
 800a248:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	607b      	str	r3, [r7, #4]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1f1      	bne.n	800a23a <mem_cpy+0x1a>
	}
}
 800a256:	bf00      	nop
 800a258:	371c      	adds	r7, #28
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a262:	b480      	push	{r7}
 800a264:	b087      	sub	sp, #28
 800a266:	af00      	add	r7, sp, #0
 800a268:	60f8      	str	r0, [r7, #12]
 800a26a:	60b9      	str	r1, [r7, #8]
 800a26c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	1c5a      	adds	r2, r3, #1
 800a276:	617a      	str	r2, [r7, #20]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	b2d2      	uxtb	r2, r2
 800a27c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	3b01      	subs	r3, #1
 800a282:	607b      	str	r3, [r7, #4]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1f3      	bne.n	800a272 <mem_set+0x10>
}
 800a28a:	bf00      	nop
 800a28c:	bf00      	nop
 800a28e:	371c      	adds	r7, #28
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a298:	b480      	push	{r7}
 800a29a:	b089      	sub	sp, #36	; 0x24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	61fb      	str	r3, [r7, #28]
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	1c5a      	adds	r2, r3, #1
 800a2b4:	61fa      	str	r2, [r7, #28]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	1c5a      	adds	r2, r3, #1
 800a2be:	61ba      	str	r2, [r7, #24]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	1acb      	subs	r3, r1, r3
 800a2c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	607b      	str	r3, [r7, #4]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d002      	beq.n	800a2d8 <mem_cmp+0x40>
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d0eb      	beq.n	800a2b0 <mem_cmp+0x18>

	return r;
 800a2d8:	697b      	ldr	r3, [r7, #20]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3724      	adds	r7, #36	; 0x24
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a2e6:	b480      	push	{r7}
 800a2e8:	b083      	sub	sp, #12
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a2f0:	e002      	b.n	800a2f8 <chk_chr+0x12>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	607b      	str	r3, [r7, #4]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d005      	beq.n	800a30c <chk_chr+0x26>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	461a      	mov	r2, r3
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	4293      	cmp	r3, r2
 800a30a:	d1f2      	bne.n	800a2f2 <chk_chr+0xc>
	return *str;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	781b      	ldrb	r3, [r3, #0]
}
 800a310:	4618      	mov	r0, r3
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d009      	beq.n	800a33e <lock_fs+0x22>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	4618      	mov	r0, r3
 800a330:	f003 f8da 	bl	800d4e8 <ff_req_grant>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <lock_fs+0x22>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e000      	b.n	800a340 <lock_fs+0x24>
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3708      	adds	r7, #8
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	460b      	mov	r3, r1
 800a352:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00d      	beq.n	800a376 <unlock_fs+0x2e>
 800a35a:	78fb      	ldrb	r3, [r7, #3]
 800a35c:	2b0c      	cmp	r3, #12
 800a35e:	d00a      	beq.n	800a376 <unlock_fs+0x2e>
 800a360:	78fb      	ldrb	r3, [r7, #3]
 800a362:	2b0b      	cmp	r3, #11
 800a364:	d007      	beq.n	800a376 <unlock_fs+0x2e>
 800a366:	78fb      	ldrb	r3, [r7, #3]
 800a368:	2b0f      	cmp	r3, #15
 800a36a:	d004      	beq.n	800a376 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	4618      	mov	r0, r3
 800a372:	f003 f8ce 	bl	800d512 <ff_rel_grant>
	}
}
 800a376:	bf00      	nop
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
	...

0800a380 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a38a:	2300      	movs	r3, #0
 800a38c:	60bb      	str	r3, [r7, #8]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	60fb      	str	r3, [r7, #12]
 800a392:	e029      	b.n	800a3e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a394:	4a27      	ldr	r2, [pc, #156]	; (800a434 <chk_lock+0xb4>)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	011b      	lsls	r3, r3, #4
 800a39a:	4413      	add	r3, r2
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d01d      	beq.n	800a3de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a3a2:	4a24      	ldr	r2, [pc, #144]	; (800a434 <chk_lock+0xb4>)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	011b      	lsls	r3, r3, #4
 800a3a8:	4413      	add	r3, r2
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d116      	bne.n	800a3e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a3b4:	4a1f      	ldr	r2, [pc, #124]	; (800a434 <chk_lock+0xb4>)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	011b      	lsls	r3, r3, #4
 800a3ba:	4413      	add	r3, r2
 800a3bc:	3304      	adds	r3, #4
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d10c      	bne.n	800a3e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a3c8:	4a1a      	ldr	r2, [pc, #104]	; (800a434 <chk_lock+0xb4>)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	011b      	lsls	r3, r3, #4
 800a3ce:	4413      	add	r3, r2
 800a3d0:	3308      	adds	r3, #8
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d102      	bne.n	800a3e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a3dc:	e007      	b.n	800a3ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	60fb      	str	r3, [r7, #12]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d9d2      	bls.n	800a394 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2b02      	cmp	r3, #2
 800a3f2:	d109      	bne.n	800a408 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d102      	bne.n	800a400 <chk_lock+0x80>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d101      	bne.n	800a404 <chk_lock+0x84>
 800a400:	2300      	movs	r3, #0
 800a402:	e010      	b.n	800a426 <chk_lock+0xa6>
 800a404:	2312      	movs	r3, #18
 800a406:	e00e      	b.n	800a426 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d108      	bne.n	800a420 <chk_lock+0xa0>
 800a40e:	4a09      	ldr	r2, [pc, #36]	; (800a434 <chk_lock+0xb4>)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	011b      	lsls	r3, r3, #4
 800a414:	4413      	add	r3, r2
 800a416:	330c      	adds	r3, #12
 800a418:	881b      	ldrh	r3, [r3, #0]
 800a41a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a41e:	d101      	bne.n	800a424 <chk_lock+0xa4>
 800a420:	2310      	movs	r3, #16
 800a422:	e000      	b.n	800a426 <chk_lock+0xa6>
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	20003cb0 	.word	0x20003cb0

0800a438 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a43e:	2300      	movs	r3, #0
 800a440:	607b      	str	r3, [r7, #4]
 800a442:	e002      	b.n	800a44a <enq_lock+0x12>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	3301      	adds	r3, #1
 800a448:	607b      	str	r3, [r7, #4]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d806      	bhi.n	800a45e <enq_lock+0x26>
 800a450:	4a09      	ldr	r2, [pc, #36]	; (800a478 <enq_lock+0x40>)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	011b      	lsls	r3, r3, #4
 800a456:	4413      	add	r3, r2
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1f2      	bne.n	800a444 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2b02      	cmp	r3, #2
 800a462:	bf14      	ite	ne
 800a464:	2301      	movne	r3, #1
 800a466:	2300      	moveq	r3, #0
 800a468:	b2db      	uxtb	r3, r3
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	370c      	adds	r7, #12
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	20003cb0 	.word	0x20003cb0

0800a47c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a486:	2300      	movs	r3, #0
 800a488:	60fb      	str	r3, [r7, #12]
 800a48a:	e01f      	b.n	800a4cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a48c:	4a41      	ldr	r2, [pc, #260]	; (800a594 <inc_lock+0x118>)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	011b      	lsls	r3, r3, #4
 800a492:	4413      	add	r3, r2
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d113      	bne.n	800a4c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a49e:	4a3d      	ldr	r2, [pc, #244]	; (800a594 <inc_lock+0x118>)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	011b      	lsls	r3, r3, #4
 800a4a4:	4413      	add	r3, r2
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d109      	bne.n	800a4c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a4b2:	4a38      	ldr	r2, [pc, #224]	; (800a594 <inc_lock+0x118>)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	011b      	lsls	r3, r3, #4
 800a4b8:	4413      	add	r3, r2
 800a4ba:	3308      	adds	r3, #8
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d006      	beq.n	800a4d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d9dc      	bls.n	800a48c <inc_lock+0x10>
 800a4d2:	e000      	b.n	800a4d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a4d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d132      	bne.n	800a542 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	60fb      	str	r3, [r7, #12]
 800a4e0:	e002      	b.n	800a4e8 <inc_lock+0x6c>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	60fb      	str	r3, [r7, #12]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d806      	bhi.n	800a4fc <inc_lock+0x80>
 800a4ee:	4a29      	ldr	r2, [pc, #164]	; (800a594 <inc_lock+0x118>)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	011b      	lsls	r3, r3, #4
 800a4f4:	4413      	add	r3, r2
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1f2      	bne.n	800a4e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d101      	bne.n	800a506 <inc_lock+0x8a>
 800a502:	2300      	movs	r3, #0
 800a504:	e040      	b.n	800a588 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	4922      	ldr	r1, [pc, #136]	; (800a594 <inc_lock+0x118>)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	011b      	lsls	r3, r3, #4
 800a510:	440b      	add	r3, r1
 800a512:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	491e      	ldr	r1, [pc, #120]	; (800a594 <inc_lock+0x118>)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	011b      	lsls	r3, r3, #4
 800a51e:	440b      	add	r3, r1
 800a520:	3304      	adds	r3, #4
 800a522:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	695a      	ldr	r2, [r3, #20]
 800a528:	491a      	ldr	r1, [pc, #104]	; (800a594 <inc_lock+0x118>)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	011b      	lsls	r3, r3, #4
 800a52e:	440b      	add	r3, r1
 800a530:	3308      	adds	r3, #8
 800a532:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a534:	4a17      	ldr	r2, [pc, #92]	; (800a594 <inc_lock+0x118>)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	011b      	lsls	r3, r3, #4
 800a53a:	4413      	add	r3, r2
 800a53c:	330c      	adds	r3, #12
 800a53e:	2200      	movs	r2, #0
 800a540:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d009      	beq.n	800a55c <inc_lock+0xe0>
 800a548:	4a12      	ldr	r2, [pc, #72]	; (800a594 <inc_lock+0x118>)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	011b      	lsls	r3, r3, #4
 800a54e:	4413      	add	r3, r2
 800a550:	330c      	adds	r3, #12
 800a552:	881b      	ldrh	r3, [r3, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d001      	beq.n	800a55c <inc_lock+0xe0>
 800a558:	2300      	movs	r3, #0
 800a55a:	e015      	b.n	800a588 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d108      	bne.n	800a574 <inc_lock+0xf8>
 800a562:	4a0c      	ldr	r2, [pc, #48]	; (800a594 <inc_lock+0x118>)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	011b      	lsls	r3, r3, #4
 800a568:	4413      	add	r3, r2
 800a56a:	330c      	adds	r3, #12
 800a56c:	881b      	ldrh	r3, [r3, #0]
 800a56e:	3301      	adds	r3, #1
 800a570:	b29a      	uxth	r2, r3
 800a572:	e001      	b.n	800a578 <inc_lock+0xfc>
 800a574:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a578:	4906      	ldr	r1, [pc, #24]	; (800a594 <inc_lock+0x118>)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	011b      	lsls	r3, r3, #4
 800a57e:	440b      	add	r3, r1
 800a580:	330c      	adds	r3, #12
 800a582:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	3301      	adds	r3, #1
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr
 800a594:	20003cb0 	.word	0x20003cb0

0800a598 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	607b      	str	r3, [r7, #4]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d825      	bhi.n	800a5f8 <dec_lock+0x60>
		n = Files[i].ctr;
 800a5ac:	4a17      	ldr	r2, [pc, #92]	; (800a60c <dec_lock+0x74>)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	011b      	lsls	r3, r3, #4
 800a5b2:	4413      	add	r3, r2
 800a5b4:	330c      	adds	r3, #12
 800a5b6:	881b      	ldrh	r3, [r3, #0]
 800a5b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a5ba:	89fb      	ldrh	r3, [r7, #14]
 800a5bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5c0:	d101      	bne.n	800a5c6 <dec_lock+0x2e>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a5c6:	89fb      	ldrh	r3, [r7, #14]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d002      	beq.n	800a5d2 <dec_lock+0x3a>
 800a5cc:	89fb      	ldrh	r3, [r7, #14]
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a5d2:	4a0e      	ldr	r2, [pc, #56]	; (800a60c <dec_lock+0x74>)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	011b      	lsls	r3, r3, #4
 800a5d8:	4413      	add	r3, r2
 800a5da:	330c      	adds	r3, #12
 800a5dc:	89fa      	ldrh	r2, [r7, #14]
 800a5de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a5e0:	89fb      	ldrh	r3, [r7, #14]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d105      	bne.n	800a5f2 <dec_lock+0x5a>
 800a5e6:	4a09      	ldr	r2, [pc, #36]	; (800a60c <dec_lock+0x74>)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	011b      	lsls	r3, r3, #4
 800a5ec:	4413      	add	r3, r2
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	737b      	strb	r3, [r7, #13]
 800a5f6:	e001      	b.n	800a5fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a5fc:	7b7b      	ldrb	r3, [r7, #13]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3714      	adds	r7, #20
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	20003cb0 	.word	0x20003cb0

0800a610 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a610:	b480      	push	{r7}
 800a612:	b085      	sub	sp, #20
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a618:	2300      	movs	r3, #0
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	e010      	b.n	800a640 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a61e:	4a0d      	ldr	r2, [pc, #52]	; (800a654 <clear_lock+0x44>)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	011b      	lsls	r3, r3, #4
 800a624:	4413      	add	r3, r2
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d105      	bne.n	800a63a <clear_lock+0x2a>
 800a62e:	4a09      	ldr	r2, [pc, #36]	; (800a654 <clear_lock+0x44>)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	011b      	lsls	r3, r3, #4
 800a634:	4413      	add	r3, r2
 800a636:	2200      	movs	r2, #0
 800a638:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3301      	adds	r3, #1
 800a63e:	60fb      	str	r3, [r7, #12]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d9eb      	bls.n	800a61e <clear_lock+0xe>
	}
}
 800a646:	bf00      	nop
 800a648:	bf00      	nop
 800a64a:	3714      	adds	r7, #20
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	20003cb0 	.word	0x20003cb0

0800a658 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b086      	sub	sp, #24
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	78db      	ldrb	r3, [r3, #3]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d034      	beq.n	800a6d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a670:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	7858      	ldrb	r0, [r3, #1]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a67c:	2301      	movs	r3, #1
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	f7ff fd0c 	bl	800a09c <disk_write>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d002      	beq.n	800a690 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	73fb      	strb	r3, [r7, #15]
 800a68e:	e022      	b.n	800a6d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69a:	697a      	ldr	r2, [r7, #20]
 800a69c:	1ad2      	subs	r2, r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	69db      	ldr	r3, [r3, #28]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d217      	bcs.n	800a6d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	789b      	ldrb	r3, [r3, #2]
 800a6aa:	613b      	str	r3, [r7, #16]
 800a6ac:	e010      	b.n	800a6d0 <sync_window+0x78>
					wsect += fs->fsize;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	69db      	ldr	r3, [r3, #28]
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	7858      	ldrb	r0, [r3, #1]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	697a      	ldr	r2, [r7, #20]
 800a6c6:	f7ff fce9 	bl	800a09c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	613b      	str	r3, [r7, #16]
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d8eb      	bhi.n	800a6ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3718      	adds	r7, #24
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f2:	683a      	ldr	r2, [r7, #0]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d01b      	beq.n	800a730 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7ff ffad 	bl	800a658 <sync_window>
 800a6fe:	4603      	mov	r3, r0
 800a700:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a702:	7bfb      	ldrb	r3, [r7, #15]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d113      	bne.n	800a730 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	7858      	ldrb	r0, [r3, #1]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a712:	2301      	movs	r3, #1
 800a714:	683a      	ldr	r2, [r7, #0]
 800a716:	f7ff fca1 	bl	800a05c <disk_read>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d004      	beq.n	800a72a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a724:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a726:	2301      	movs	r3, #1
 800a728:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a730:	7bfb      	ldrb	r3, [r7, #15]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
	...

0800a73c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff ff87 	bl	800a658 <sync_window>
 800a74a:	4603      	mov	r3, r0
 800a74c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d158      	bne.n	800a806 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	2b03      	cmp	r3, #3
 800a75a:	d148      	bne.n	800a7ee <sync_fs+0xb2>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	791b      	ldrb	r3, [r3, #4]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d144      	bne.n	800a7ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	3334      	adds	r3, #52	; 0x34
 800a768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a76c:	2100      	movs	r1, #0
 800a76e:	4618      	mov	r0, r3
 800a770:	f7ff fd77 	bl	800a262 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3334      	adds	r3, #52	; 0x34
 800a778:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a77c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a780:	4618      	mov	r0, r3
 800a782:	f7ff fd06 	bl	800a192 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	3334      	adds	r3, #52	; 0x34
 800a78a:	4921      	ldr	r1, [pc, #132]	; (800a810 <sync_fs+0xd4>)
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7ff fd1b 	bl	800a1c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	3334      	adds	r3, #52	; 0x34
 800a796:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a79a:	491e      	ldr	r1, [pc, #120]	; (800a814 <sync_fs+0xd8>)
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7ff fd13 	bl	800a1c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	3334      	adds	r3, #52	; 0x34
 800a7a6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	f7ff fd09 	bl	800a1c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	3334      	adds	r3, #52	; 0x34
 800a7ba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	f7ff fcff 	bl	800a1c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a1b      	ldr	r3, [r3, #32]
 800a7ce:	1c5a      	adds	r2, r3, #1
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	7858      	ldrb	r0, [r3, #1]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	f7ff fc5a 	bl	800a09c <disk_write>
			fs->fsi_flag = 0;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	785b      	ldrb	r3, [r3, #1]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7ff fc70 	bl	800a0dc <disk_ioctl>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <sync_fs+0xca>
 800a802:	2301      	movs	r3, #1
 800a804:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a806:	7bfb      	ldrb	r3, [r7, #15]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	41615252 	.word	0x41615252
 800a814:	61417272 	.word	0x61417272

0800a818 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	3b02      	subs	r3, #2
 800a826:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	3b02      	subs	r3, #2
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	429a      	cmp	r2, r3
 800a832:	d301      	bcc.n	800a838 <clust2sect+0x20>
 800a834:	2300      	movs	r3, #0
 800a836:	e008      	b.n	800a84a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	895b      	ldrh	r3, [r3, #10]
 800a83c:	461a      	mov	r2, r3
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	fb03 f202 	mul.w	r2, r3, r2
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a848:	4413      	add	r3, r2
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b086      	sub	sp, #24
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d904      	bls.n	800a876 <get_fat+0x20>
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	683a      	ldr	r2, [r7, #0]
 800a872:	429a      	cmp	r2, r3
 800a874:	d302      	bcc.n	800a87c <get_fat+0x26>
		val = 1;	/* Internal error */
 800a876:	2301      	movs	r3, #1
 800a878:	617b      	str	r3, [r7, #20]
 800a87a:	e091      	b.n	800a9a0 <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a87c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a880:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	2b03      	cmp	r3, #3
 800a888:	d063      	beq.n	800a952 <get_fat+0xfc>
 800a88a:	2b03      	cmp	r3, #3
 800a88c:	dc7e      	bgt.n	800a98c <get_fat+0x136>
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d002      	beq.n	800a898 <get_fat+0x42>
 800a892:	2b02      	cmp	r3, #2
 800a894:	d042      	beq.n	800a91c <get_fat+0xc6>
 800a896:	e079      	b.n	800a98c <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	085b      	lsrs	r3, r3, #1
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	0adb      	lsrs	r3, r3, #11
 800a8ae:	4413      	add	r3, r2
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	6938      	ldr	r0, [r7, #16]
 800a8b4:	f7ff ff14 	bl	800a6e0 <move_window>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d169      	bne.n	800a992 <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	1c5a      	adds	r2, r3, #1
 800a8c2:	60fa      	str	r2, [r7, #12]
 800a8c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	0adb      	lsrs	r3, r3, #11
 800a8da:	4413      	add	r3, r2
 800a8dc:	4619      	mov	r1, r3
 800a8de:	6938      	ldr	r0, [r7, #16]
 800a8e0:	f7ff fefe 	bl	800a6e0 <move_window>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d155      	bne.n	800a996 <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8f8:	021b      	lsls	r3, r3, #8
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	f003 0301 	and.w	r3, r3, #1
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d002      	beq.n	800a912 <get_fat+0xbc>
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	091b      	lsrs	r3, r3, #4
 800a910:	e002      	b.n	800a918 <get_fat+0xc2>
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a918:	617b      	str	r3, [r7, #20]
			break;
 800a91a:	e041      	b.n	800a9a0 <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	0a9b      	lsrs	r3, r3, #10
 800a924:	4413      	add	r3, r2
 800a926:	4619      	mov	r1, r3
 800a928:	6938      	ldr	r0, [r7, #16]
 800a92a:	f7ff fed9 	bl	800a6e0 <move_window>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d132      	bne.n	800a99a <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	0059      	lsls	r1, r3, #1
 800a93e:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800a942:	400b      	ands	r3, r1
 800a944:	4413      	add	r3, r2
 800a946:	4618      	mov	r0, r3
 800a948:	f7ff fbe8 	bl	800a11c <ld_word>
 800a94c:	4603      	mov	r3, r0
 800a94e:	617b      	str	r3, [r7, #20]
			break;
 800a950:	e026      	b.n	800a9a0 <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	0a5b      	lsrs	r3, r3, #9
 800a95a:	4413      	add	r3, r2
 800a95c:	4619      	mov	r1, r3
 800a95e:	6938      	ldr	r0, [r7, #16]
 800a960:	f7ff febe 	bl	800a6e0 <move_window>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d119      	bne.n	800a99e <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	0099      	lsls	r1, r3, #2
 800a974:	f240 73fc 	movw	r3, #2044	; 0x7fc
 800a978:	400b      	ands	r3, r1
 800a97a:	4413      	add	r3, r2
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7ff fbe5 	bl	800a14c <ld_dword>
 800a982:	4603      	mov	r3, r0
 800a984:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a988:	617b      	str	r3, [r7, #20]
			break;
 800a98a:	e009      	b.n	800a9a0 <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a98c:	2301      	movs	r3, #1
 800a98e:	617b      	str	r3, [r7, #20]
 800a990:	e006      	b.n	800a9a0 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a992:	bf00      	nop
 800a994:	e004      	b.n	800a9a0 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a996:	bf00      	nop
 800a998:	e002      	b.n	800a9a0 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a99a:	bf00      	nop
 800a99c:	e000      	b.n	800a9a0 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a99e:	bf00      	nop
		}
	}

	return val;
 800a9a0:	697b      	ldr	r3, [r7, #20]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3718      	adds	r7, #24
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a9aa:	b590      	push	{r4, r7, lr}
 800a9ac:	b089      	sub	sp, #36	; 0x24
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	60f8      	str	r0, [r7, #12]
 800a9b2:	60b9      	str	r1, [r7, #8]
 800a9b4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	f240 80d5 	bls.w	800ab6c <put_fat+0x1c2>
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	f080 80cf 	bcs.w	800ab6c <put_fat+0x1c2>
		switch (fs->fs_type) {
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	f000 8097 	beq.w	800ab06 <put_fat+0x15c>
 800a9d8:	2b03      	cmp	r3, #3
 800a9da:	f300 80d0 	bgt.w	800ab7e <put_fat+0x1d4>
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d002      	beq.n	800a9e8 <put_fat+0x3e>
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d06e      	beq.n	800aac4 <put_fat+0x11a>
 800a9e6:	e0ca      	b.n	800ab7e <put_fat+0x1d4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	61bb      	str	r3, [r7, #24]
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	085b      	lsrs	r3, r3, #1
 800a9f0:	69ba      	ldr	r2, [r7, #24]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	0adb      	lsrs	r3, r3, #11
 800a9fe:	4413      	add	r3, r2
 800aa00:	4619      	mov	r1, r3
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f7ff fe6c 	bl	800a6e0 <move_window>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa0c:	7ffb      	ldrb	r3, [r7, #31]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f040 80ae 	bne.w	800ab70 <put_fat+0x1c6>
			p = fs->win + bc++ % SS(fs);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	1c59      	adds	r1, r3, #1
 800aa1e:	61b9      	str	r1, [r7, #24]
 800aa20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa24:	4413      	add	r3, r2
 800aa26:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	f003 0301 	and.w	r3, r3, #1
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00d      	beq.n	800aa4e <put_fat+0xa4>
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	b25b      	sxtb	r3, r3
 800aa38:	f003 030f 	and.w	r3, r3, #15
 800aa3c:	b25a      	sxtb	r2, r3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	011b      	lsls	r3, r3, #4
 800aa44:	b25b      	sxtb	r3, r3
 800aa46:	4313      	orrs	r3, r2
 800aa48:	b25b      	sxtb	r3, r3
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	e001      	b.n	800aa52 <put_fat+0xa8>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2201      	movs	r2, #1
 800aa5a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	0adb      	lsrs	r3, r3, #11
 800aa64:	4413      	add	r3, r2
 800aa66:	4619      	mov	r1, r3
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f7ff fe39 	bl	800a6e0 <move_window>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa72:	7ffb      	ldrb	r3, [r7, #31]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d17d      	bne.n	800ab74 <put_fat+0x1ca>
			p = fs->win + bc % SS(fs);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa84:	4413      	add	r3, r2
 800aa86:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	f003 0301 	and.w	r3, r3, #1
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d003      	beq.n	800aa9a <put_fat+0xf0>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	091b      	lsrs	r3, r3, #4
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	e00e      	b.n	800aab8 <put_fat+0x10e>
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	b25b      	sxtb	r3, r3
 800aaa0:	f023 030f 	bic.w	r3, r3, #15
 800aaa4:	b25a      	sxtb	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	0a1b      	lsrs	r3, r3, #8
 800aaaa:	b25b      	sxtb	r3, r3
 800aaac:	f003 030f 	and.w	r3, r3, #15
 800aab0:	b25b      	sxtb	r3, r3
 800aab2:	4313      	orrs	r3, r2
 800aab4:	b25b      	sxtb	r3, r3
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	697a      	ldr	r2, [r7, #20]
 800aaba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2201      	movs	r2, #1
 800aac0:	70da      	strb	r2, [r3, #3]
			break;
 800aac2:	e05c      	b.n	800ab7e <put_fat+0x1d4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	0a9b      	lsrs	r3, r3, #10
 800aacc:	4413      	add	r3, r2
 800aace:	4619      	mov	r1, r3
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f7ff fe05 	bl	800a6e0 <move_window>
 800aad6:	4603      	mov	r3, r0
 800aad8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aada:	7ffb      	ldrb	r3, [r7, #31]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d14b      	bne.n	800ab78 <put_fat+0x1ce>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	0059      	lsls	r1, r3, #1
 800aaea:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800aaee:	400b      	ands	r3, r1
 800aaf0:	4413      	add	r3, r2
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	b292      	uxth	r2, r2
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7ff fb4a 	bl	800a192 <st_word>
			fs->wflag = 1;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2201      	movs	r2, #1
 800ab02:	70da      	strb	r2, [r3, #3]
			break;
 800ab04:	e03b      	b.n	800ab7e <put_fat+0x1d4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	0a5b      	lsrs	r3, r3, #9
 800ab0e:	4413      	add	r3, r2
 800ab10:	4619      	mov	r1, r3
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f7ff fde4 	bl	800a6e0 <move_window>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab1c:	7ffb      	ldrb	r3, [r7, #31]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d12c      	bne.n	800ab7c <put_fat+0x1d2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	0099      	lsls	r1, r3, #2
 800ab32:	f240 73fc 	movw	r3, #2044	; 0x7fc
 800ab36:	400b      	ands	r3, r1
 800ab38:	4413      	add	r3, r2
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7ff fb06 	bl	800a14c <ld_dword>
 800ab40:	4603      	mov	r3, r0
 800ab42:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ab46:	4323      	orrs	r3, r4
 800ab48:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	0099      	lsls	r1, r3, #2
 800ab54:	f240 73fc 	movw	r3, #2044	; 0x7fc
 800ab58:	400b      	ands	r3, r1
 800ab5a:	4413      	add	r3, r2
 800ab5c:	6879      	ldr	r1, [r7, #4]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff fb32 	bl	800a1c8 <st_dword>
			fs->wflag = 1;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2201      	movs	r2, #1
 800ab68:	70da      	strb	r2, [r3, #3]
			break;
 800ab6a:	e008      	b.n	800ab7e <put_fat+0x1d4>
		}
	}
 800ab6c:	bf00      	nop
 800ab6e:	e006      	b.n	800ab7e <put_fat+0x1d4>
			if (res != FR_OK) break;
 800ab70:	bf00      	nop
 800ab72:	e004      	b.n	800ab7e <put_fat+0x1d4>
			if (res != FR_OK) break;
 800ab74:	bf00      	nop
 800ab76:	e002      	b.n	800ab7e <put_fat+0x1d4>
			if (res != FR_OK) break;
 800ab78:	bf00      	nop
 800ab7a:	e000      	b.n	800ab7e <put_fat+0x1d4>
			if (res != FR_OK) break;
 800ab7c:	bf00      	nop
	return res;
 800ab7e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3724      	adds	r7, #36	; 0x24
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd90      	pop	{r4, r7, pc}

0800ab88 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b088      	sub	sp, #32
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d904      	bls.n	800abae <remove_chain+0x26>
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	68ba      	ldr	r2, [r7, #8]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d301      	bcc.n	800abb2 <remove_chain+0x2a>
 800abae:	2302      	movs	r3, #2
 800abb0:	e04b      	b.n	800ac4a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00c      	beq.n	800abd2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800abb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	69b8      	ldr	r0, [r7, #24]
 800abc0:	f7ff fef3 	bl	800a9aa <put_fat>
 800abc4:	4603      	mov	r3, r0
 800abc6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800abc8:	7ffb      	ldrb	r3, [r7, #31]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d001      	beq.n	800abd2 <remove_chain+0x4a>
 800abce:	7ffb      	ldrb	r3, [r7, #31]
 800abd0:	e03b      	b.n	800ac4a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800abd2:	68b9      	ldr	r1, [r7, #8]
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f7ff fe3e 	bl	800a856 <get_fat>
 800abda:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d031      	beq.n	800ac46 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d101      	bne.n	800abec <remove_chain+0x64>
 800abe8:	2302      	movs	r3, #2
 800abea:	e02e      	b.n	800ac4a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abf2:	d101      	bne.n	800abf8 <remove_chain+0x70>
 800abf4:	2301      	movs	r3, #1
 800abf6:	e028      	b.n	800ac4a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800abf8:	2200      	movs	r2, #0
 800abfa:	68b9      	ldr	r1, [r7, #8]
 800abfc:	69b8      	ldr	r0, [r7, #24]
 800abfe:	f7ff fed4 	bl	800a9aa <put_fat>
 800ac02:	4603      	mov	r3, r0
 800ac04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ac06:	7ffb      	ldrb	r3, [r7, #31]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d001      	beq.n	800ac10 <remove_chain+0x88>
 800ac0c:	7ffb      	ldrb	r3, [r7, #31]
 800ac0e:	e01c      	b.n	800ac4a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	695a      	ldr	r2, [r3, #20]
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	3b02      	subs	r3, #2
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d20b      	bcs.n	800ac36 <remove_chain+0xae>
			fs->free_clst++;
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	1c5a      	adds	r2, r3, #1
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	791b      	ldrb	r3, [r3, #4]
 800ac2c:	f043 0301 	orr.w	r3, r3, #1
 800ac30:	b2da      	uxtb	r2, r3
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d3c6      	bcc.n	800abd2 <remove_chain+0x4a>
 800ac44:	e000      	b.n	800ac48 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ac46:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3720      	adds	r7, #32
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b088      	sub	sp, #32
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10d      	bne.n	800ac84 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	691b      	ldr	r3, [r3, #16]
 800ac6c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d004      	beq.n	800ac7e <create_chain+0x2c>
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	69ba      	ldr	r2, [r7, #24]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d31b      	bcc.n	800acb6 <create_chain+0x64>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	61bb      	str	r3, [r7, #24]
 800ac82:	e018      	b.n	800acb6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ac84:	6839      	ldr	r1, [r7, #0]
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f7ff fde5 	bl	800a856 <get_fat>
 800ac8c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d801      	bhi.n	800ac98 <create_chain+0x46>
 800ac94:	2301      	movs	r3, #1
 800ac96:	e070      	b.n	800ad7a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac9e:	d101      	bne.n	800aca4 <create_chain+0x52>
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	e06a      	b.n	800ad7a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	699b      	ldr	r3, [r3, #24]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d201      	bcs.n	800acb2 <create_chain+0x60>
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	e063      	b.n	800ad7a <create_chain+0x128>
		scl = clst;
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	3301      	adds	r3, #1
 800acbe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	69fa      	ldr	r2, [r7, #28]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d307      	bcc.n	800acda <create_chain+0x88>
				ncl = 2;
 800acca:	2302      	movs	r3, #2
 800accc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800acce:	69fa      	ldr	r2, [r7, #28]
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d901      	bls.n	800acda <create_chain+0x88>
 800acd6:	2300      	movs	r3, #0
 800acd8:	e04f      	b.n	800ad7a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800acda:	69f9      	ldr	r1, [r7, #28]
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f7ff fdba 	bl	800a856 <get_fat>
 800ace2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00e      	beq.n	800ad08 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2b01      	cmp	r3, #1
 800acee:	d003      	beq.n	800acf8 <create_chain+0xa6>
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acf6:	d101      	bne.n	800acfc <create_chain+0xaa>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	e03e      	b.n	800ad7a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800acfc:	69fa      	ldr	r2, [r7, #28]
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d1da      	bne.n	800acba <create_chain+0x68>
 800ad04:	2300      	movs	r3, #0
 800ad06:	e038      	b.n	800ad7a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ad08:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ad0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad0e:	69f9      	ldr	r1, [r7, #28]
 800ad10:	6938      	ldr	r0, [r7, #16]
 800ad12:	f7ff fe4a 	bl	800a9aa <put_fat>
 800ad16:	4603      	mov	r3, r0
 800ad18:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ad1a:	7dfb      	ldrb	r3, [r7, #23]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d109      	bne.n	800ad34 <create_chain+0xe2>
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d006      	beq.n	800ad34 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ad26:	69fa      	ldr	r2, [r7, #28]
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6938      	ldr	r0, [r7, #16]
 800ad2c:	f7ff fe3d 	bl	800a9aa <put_fat>
 800ad30:	4603      	mov	r3, r0
 800ad32:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ad34:	7dfb      	ldrb	r3, [r7, #23]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d116      	bne.n	800ad68 <create_chain+0x116>
		fs->last_clst = ncl;
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	69fa      	ldr	r2, [r7, #28]
 800ad3e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	695a      	ldr	r2, [r3, #20]
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	3b02      	subs	r3, #2
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d804      	bhi.n	800ad58 <create_chain+0x106>
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	1e5a      	subs	r2, r3, #1
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	791b      	ldrb	r3, [r3, #4]
 800ad5c:	f043 0301 	orr.w	r3, r3, #1
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	711a      	strb	r2, [r3, #4]
 800ad66:	e007      	b.n	800ad78 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ad68:	7dfb      	ldrb	r3, [r7, #23]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d102      	bne.n	800ad74 <create_chain+0x122>
 800ad6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad72:	e000      	b.n	800ad76 <create_chain+0x124>
 800ad74:	2301      	movs	r3, #1
 800ad76:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ad78:	69fb      	ldr	r3, [r7, #28]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3720      	adds	r7, #32
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ad82:	b480      	push	{r7}
 800ad84:	b087      	sub	sp, #28
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
 800ad8a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad96:	3304      	adds	r3, #4
 800ad98:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	0adb      	lsrs	r3, r3, #11
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	8952      	ldrh	r2, [r2, #10]
 800ada2:	fbb3 f3f2 	udiv	r3, r3, r2
 800ada6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	1d1a      	adds	r2, r3, #4
 800adac:	613a      	str	r2, [r7, #16]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d101      	bne.n	800adbc <clmt_clust+0x3a>
 800adb8:	2300      	movs	r3, #0
 800adba:	e010      	b.n	800adde <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800adbc:	697a      	ldr	r2, [r7, #20]
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d307      	bcc.n	800add4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800adc4:	697a      	ldr	r2, [r7, #20]
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	617b      	str	r3, [r7, #20]
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	3304      	adds	r3, #4
 800add0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800add2:	e7e9      	b.n	800ada8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800add4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	4413      	add	r3, r2
}
 800adde:	4618      	mov	r0, r3
 800ade0:	371c      	adds	r7, #28
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr

0800adea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b086      	sub	sp, #24
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae00:	d204      	bcs.n	800ae0c <dir_sdi+0x22>
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	f003 031f 	and.w	r3, r3, #31
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d001      	beq.n	800ae10 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	e063      	b.n	800aed8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	683a      	ldr	r2, [r7, #0]
 800ae14:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d106      	bne.n	800ae30 <dir_sdi+0x46>
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	d902      	bls.n	800ae30 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d10c      	bne.n	800ae50 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	095b      	lsrs	r3, r3, #5
 800ae3a:	693a      	ldr	r2, [r7, #16]
 800ae3c:	8912      	ldrh	r2, [r2, #8]
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d301      	bcc.n	800ae46 <dir_sdi+0x5c>
 800ae42:	2302      	movs	r3, #2
 800ae44:	e048      	b.n	800aed8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	61da      	str	r2, [r3, #28]
 800ae4e:	e029      	b.n	800aea4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	895b      	ldrh	r3, [r3, #10]
 800ae54:	02db      	lsls	r3, r3, #11
 800ae56:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae58:	e019      	b.n	800ae8e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6979      	ldr	r1, [r7, #20]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7ff fcf9 	bl	800a856 <get_fat>
 800ae64:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae6c:	d101      	bne.n	800ae72 <dir_sdi+0x88>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e032      	b.n	800aed8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d904      	bls.n	800ae82 <dir_sdi+0x98>
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	699b      	ldr	r3, [r3, #24]
 800ae7c:	697a      	ldr	r2, [r7, #20]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d301      	bcc.n	800ae86 <dir_sdi+0x9c>
 800ae82:	2302      	movs	r3, #2
 800ae84:	e028      	b.n	800aed8 <dir_sdi+0xee>
			ofs -= csz;
 800ae86:	683a      	ldr	r2, [r7, #0]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae8e:	683a      	ldr	r2, [r7, #0]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d2e1      	bcs.n	800ae5a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ae96:	6979      	ldr	r1, [r7, #20]
 800ae98:	6938      	ldr	r0, [r7, #16]
 800ae9a:	f7ff fcbd 	bl	800a818 <clust2sect>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	69db      	ldr	r3, [r3, #28]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d101      	bne.n	800aeb6 <dir_sdi+0xcc>
 800aeb2:	2302      	movs	r3, #2
 800aeb4:	e010      	b.n	800aed8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	69da      	ldr	r2, [r3, #28]
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	0adb      	lsrs	r3, r3, #11
 800aebe:	441a      	add	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aed0:	441a      	add	r2, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3718      	adds	r7, #24
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	695b      	ldr	r3, [r3, #20]
 800aef4:	3320      	adds	r3, #32
 800aef6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	69db      	ldr	r3, [r3, #28]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d003      	beq.n	800af08 <dir_next+0x28>
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af06:	d301      	bcc.n	800af0c <dir_next+0x2c>
 800af08:	2304      	movs	r3, #4
 800af0a:	e0aa      	b.n	800b062 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af12:	2b00      	cmp	r3, #0
 800af14:	f040 8098 	bne.w	800b048 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	69db      	ldr	r3, [r3, #28]
 800af1c:	1c5a      	adds	r2, r3, #1
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10b      	bne.n	800af42 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	095b      	lsrs	r3, r3, #5
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	8912      	ldrh	r2, [r2, #8]
 800af32:	4293      	cmp	r3, r2
 800af34:	f0c0 8088 	bcc.w	800b048 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	61da      	str	r2, [r3, #28]
 800af3e:	2304      	movs	r3, #4
 800af40:	e08f      	b.n	800b062 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	0adb      	lsrs	r3, r3, #11
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	8952      	ldrh	r2, [r2, #10]
 800af4a:	3a01      	subs	r2, #1
 800af4c:	4013      	ands	r3, r2
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d17a      	bne.n	800b048 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	699b      	ldr	r3, [r3, #24]
 800af58:	4619      	mov	r1, r3
 800af5a:	4610      	mov	r0, r2
 800af5c:	f7ff fc7b 	bl	800a856 <get_fat>
 800af60:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d801      	bhi.n	800af6c <dir_next+0x8c>
 800af68:	2302      	movs	r3, #2
 800af6a:	e07a      	b.n	800b062 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af72:	d101      	bne.n	800af78 <dir_next+0x98>
 800af74:	2301      	movs	r3, #1
 800af76:	e074      	b.n	800b062 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	699b      	ldr	r3, [r3, #24]
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d358      	bcc.n	800b034 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d104      	bne.n	800af92 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	61da      	str	r2, [r3, #28]
 800af8e:	2304      	movs	r3, #4
 800af90:	e067      	b.n	800b062 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	4619      	mov	r1, r3
 800af9a:	4610      	mov	r0, r2
 800af9c:	f7ff fe59 	bl	800ac52 <create_chain>
 800afa0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d101      	bne.n	800afac <dir_next+0xcc>
 800afa8:	2307      	movs	r3, #7
 800afaa:	e05a      	b.n	800b062 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d101      	bne.n	800afb6 <dir_next+0xd6>
 800afb2:	2302      	movs	r3, #2
 800afb4:	e055      	b.n	800b062 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afbc:	d101      	bne.n	800afc2 <dir_next+0xe2>
 800afbe:	2301      	movs	r3, #1
 800afc0:	e04f      	b.n	800b062 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f7ff fb48 	bl	800a658 <sync_window>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d001      	beq.n	800afd2 <dir_next+0xf2>
 800afce:	2301      	movs	r3, #1
 800afd0:	e047      	b.n	800b062 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	3334      	adds	r3, #52	; 0x34
 800afd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afda:	2100      	movs	r1, #0
 800afdc:	4618      	mov	r0, r3
 800afde:	f7ff f940 	bl	800a262 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800afe2:	2300      	movs	r3, #0
 800afe4:	613b      	str	r3, [r7, #16]
 800afe6:	6979      	ldr	r1, [r7, #20]
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f7ff fc15 	bl	800a818 <clust2sect>
 800afee:	4602      	mov	r2, r0
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	631a      	str	r2, [r3, #48]	; 0x30
 800aff4:	e012      	b.n	800b01c <dir_next+0x13c>
						fs->wflag = 1;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2201      	movs	r2, #1
 800affa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f7ff fb2b 	bl	800a658 <sync_window>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d001      	beq.n	800b00c <dir_next+0x12c>
 800b008:	2301      	movs	r3, #1
 800b00a:	e02a      	b.n	800b062 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	3301      	adds	r3, #1
 800b010:	613b      	str	r3, [r7, #16]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b016:	1c5a      	adds	r2, r3, #1
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	631a      	str	r2, [r3, #48]	; 0x30
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	895b      	ldrh	r3, [r3, #10]
 800b020:	461a      	mov	r2, r3
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	4293      	cmp	r3, r2
 800b026:	d3e6      	bcc.n	800aff6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	1ad2      	subs	r2, r2, r3
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	697a      	ldr	r2, [r7, #20]
 800b038:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b03a:	6979      	ldr	r1, [r7, #20]
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7ff fbeb 	bl	800a818 <clust2sect>
 800b042:	4602      	mov	r2, r0
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b05a:	441a      	add	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3718      	adds	r7, #24
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b086      	sub	sp, #24
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b07a:	2100      	movs	r1, #0
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7ff feb4 	bl	800adea <dir_sdi>
 800b082:	4603      	mov	r3, r0
 800b084:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b086:	7dfb      	ldrb	r3, [r7, #23]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d12b      	bne.n	800b0e4 <dir_alloc+0x7a>
		n = 0;
 800b08c:	2300      	movs	r3, #0
 800b08e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	69db      	ldr	r3, [r3, #28]
 800b094:	4619      	mov	r1, r3
 800b096:	68f8      	ldr	r0, [r7, #12]
 800b098:	f7ff fb22 	bl	800a6e0 <move_window>
 800b09c:	4603      	mov	r3, r0
 800b09e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b0a0:	7dfb      	ldrb	r3, [r7, #23]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d11d      	bne.n	800b0e2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a1b      	ldr	r3, [r3, #32]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	2be5      	cmp	r3, #229	; 0xe5
 800b0ae:	d004      	beq.n	800b0ba <dir_alloc+0x50>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a1b      	ldr	r3, [r3, #32]
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d107      	bne.n	800b0ca <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	613b      	str	r3, [r7, #16]
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d102      	bne.n	800b0ce <dir_alloc+0x64>
 800b0c8:	e00c      	b.n	800b0e4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b0ce:	2101      	movs	r1, #1
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f7ff ff05 	bl	800aee0 <dir_next>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b0da:	7dfb      	ldrb	r3, [r7, #23]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d0d7      	beq.n	800b090 <dir_alloc+0x26>
 800b0e0:	e000      	b.n	800b0e4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b0e2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b0e4:	7dfb      	ldrb	r3, [r7, #23]
 800b0e6:	2b04      	cmp	r3, #4
 800b0e8:	d101      	bne.n	800b0ee <dir_alloc+0x84>
 800b0ea:	2307      	movs	r3, #7
 800b0ec:	75fb      	strb	r3, [r7, #23]
	return res;
 800b0ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3718      	adds	r7, #24
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	331a      	adds	r3, #26
 800b106:	4618      	mov	r0, r3
 800b108:	f7ff f808 	bl	800a11c <ld_word>
 800b10c:	4603      	mov	r3, r0
 800b10e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	2b03      	cmp	r3, #3
 800b116:	d109      	bne.n	800b12c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	3314      	adds	r3, #20
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7fe fffd 	bl	800a11c <ld_word>
 800b122:	4603      	mov	r3, r0
 800b124:	041b      	lsls	r3, r3, #16
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	4313      	orrs	r3, r2
 800b12a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b12c:	68fb      	ldr	r3, [r7, #12]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b084      	sub	sp, #16
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	60f8      	str	r0, [r7, #12]
 800b13e:	60b9      	str	r1, [r7, #8]
 800b140:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	331a      	adds	r3, #26
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	b292      	uxth	r2, r2
 800b14a:	4611      	mov	r1, r2
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7ff f820 	bl	800a192 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	2b03      	cmp	r3, #3
 800b158:	d109      	bne.n	800b16e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	f103 0214 	add.w	r2, r3, #20
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	0c1b      	lsrs	r3, r3, #16
 800b164:	b29b      	uxth	r3, r3
 800b166:	4619      	mov	r1, r3
 800b168:	4610      	mov	r0, r2
 800b16a:	f7ff f812 	bl	800a192 <st_word>
	}
}
 800b16e:	bf00      	nop
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b086      	sub	sp, #24
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
 800b17e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b180:	2304      	movs	r3, #4
 800b182:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800b18a:	e03c      	b.n	800b206 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	69db      	ldr	r3, [r3, #28]
 800b190:	4619      	mov	r1, r3
 800b192:	6938      	ldr	r0, [r7, #16]
 800b194:	f7ff faa4 	bl	800a6e0 <move_window>
 800b198:	4603      	mov	r3, r0
 800b19a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b19c:	7dfb      	ldrb	r3, [r7, #23]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d136      	bne.n	800b210 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a1b      	ldr	r3, [r3, #32]
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800b1aa:	7bfb      	ldrb	r3, [r7, #15]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d102      	bne.n	800b1b6 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b1b0:	2304      	movs	r3, #4
 800b1b2:	75fb      	strb	r3, [r7, #23]
 800b1b4:	e031      	b.n	800b21a <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a1b      	ldr	r3, [r3, #32]
 800b1ba:	330b      	adds	r3, #11
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1c2:	73bb      	strb	r3, [r7, #14]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	7bba      	ldrb	r2, [r7, #14]
 800b1c8:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
 800b1cc:	2be5      	cmp	r3, #229	; 0xe5
 800b1ce:	d011      	beq.n	800b1f4 <dir_read+0x7e>
 800b1d0:	7bfb      	ldrb	r3, [r7, #15]
 800b1d2:	2b2e      	cmp	r3, #46	; 0x2e
 800b1d4:	d00e      	beq.n	800b1f4 <dir_read+0x7e>
 800b1d6:	7bbb      	ldrb	r3, [r7, #14]
 800b1d8:	2b0f      	cmp	r3, #15
 800b1da:	d00b      	beq.n	800b1f4 <dir_read+0x7e>
 800b1dc:	7bbb      	ldrb	r3, [r7, #14]
 800b1de:	f023 0320 	bic.w	r3, r3, #32
 800b1e2:	2b08      	cmp	r3, #8
 800b1e4:	bf0c      	ite	eq
 800b1e6:	2301      	moveq	r3, #1
 800b1e8:	2300      	movne	r3, #0
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d00f      	beq.n	800b214 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7ff fe72 	bl	800aee0 <dir_next>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b200:	7dfb      	ldrb	r3, [r7, #23]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d108      	bne.n	800b218 <dir_read+0xa2>
	while (dp->sect) {
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	69db      	ldr	r3, [r3, #28]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1be      	bne.n	800b18c <dir_read+0x16>
 800b20e:	e004      	b.n	800b21a <dir_read+0xa4>
		if (res != FR_OK) break;
 800b210:	bf00      	nop
 800b212:	e002      	b.n	800b21a <dir_read+0xa4>
				break;
 800b214:	bf00      	nop
 800b216:	e000      	b.n	800b21a <dir_read+0xa4>
		if (res != FR_OK) break;
 800b218:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b21a:	7dfb      	ldrb	r3, [r7, #23]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d002      	beq.n	800b226 <dir_read+0xb0>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	61da      	str	r2, [r3, #28]
	return res;
 800b226:	7dfb      	ldrb	r3, [r7, #23]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3718      	adds	r7, #24
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b23e:	2100      	movs	r1, #0
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f7ff fdd2 	bl	800adea <dir_sdi>
 800b246:	4603      	mov	r3, r0
 800b248:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b24a:	7dfb      	ldrb	r3, [r7, #23]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d001      	beq.n	800b254 <dir_find+0x24>
 800b250:	7dfb      	ldrb	r3, [r7, #23]
 800b252:	e03e      	b.n	800b2d2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	69db      	ldr	r3, [r3, #28]
 800b258:	4619      	mov	r1, r3
 800b25a:	6938      	ldr	r0, [r7, #16]
 800b25c:	f7ff fa40 	bl	800a6e0 <move_window>
 800b260:	4603      	mov	r3, r0
 800b262:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b264:	7dfb      	ldrb	r3, [r7, #23]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d12f      	bne.n	800b2ca <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b272:	7bfb      	ldrb	r3, [r7, #15]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d102      	bne.n	800b27e <dir_find+0x4e>
 800b278:	2304      	movs	r3, #4
 800b27a:	75fb      	strb	r3, [r7, #23]
 800b27c:	e028      	b.n	800b2d0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a1b      	ldr	r3, [r3, #32]
 800b282:	330b      	adds	r3, #11
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b28a:	b2da      	uxtb	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6a1b      	ldr	r3, [r3, #32]
 800b294:	330b      	adds	r3, #11
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	f003 0308 	and.w	r3, r3, #8
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d10a      	bne.n	800b2b6 <dir_find+0x86>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a18      	ldr	r0, [r3, #32]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	3324      	adds	r3, #36	; 0x24
 800b2a8:	220b      	movs	r2, #11
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	f7fe fff4 	bl	800a298 <mem_cmp>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00b      	beq.n	800b2ce <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f7ff fe11 	bl	800aee0 <dir_next>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b2c2:	7dfb      	ldrb	r3, [r7, #23]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d0c5      	beq.n	800b254 <dir_find+0x24>
 800b2c8:	e002      	b.n	800b2d0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b2ca:	bf00      	nop
 800b2cc:	e000      	b.n	800b2d0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b2ce:	bf00      	nop

	return res;
 800b2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3718      	adds	r7, #24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b084      	sub	sp, #16
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b2e8:	2101      	movs	r1, #1
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f7ff febd 	bl	800b06a <dir_alloc>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d11c      	bne.n	800b334 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	69db      	ldr	r3, [r3, #28]
 800b2fe:	4619      	mov	r1, r3
 800b300:	68b8      	ldr	r0, [r7, #8]
 800b302:	f7ff f9ed 	bl	800a6e0 <move_window>
 800b306:	4603      	mov	r3, r0
 800b308:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b30a:	7bfb      	ldrb	r3, [r7, #15]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d111      	bne.n	800b334 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a1b      	ldr	r3, [r3, #32]
 800b314:	2220      	movs	r2, #32
 800b316:	2100      	movs	r1, #0
 800b318:	4618      	mov	r0, r3
 800b31a:	f7fe ffa2 	bl	800a262 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a18      	ldr	r0, [r3, #32]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	3324      	adds	r3, #36	; 0x24
 800b326:	220b      	movs	r2, #11
 800b328:	4619      	mov	r1, r3
 800b32a:	f7fe ff79 	bl	800a220 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	2201      	movs	r2, #1
 800b332:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b334:	7bfb      	ldrb	r3, [r7, #15]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b086      	sub	sp, #24
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	2200      	movs	r2, #0
 800b34c:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	69db      	ldr	r3, [r3, #28]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d04e      	beq.n	800b3f4 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800b356:	2300      	movs	r3, #0
 800b358:	613b      	str	r3, [r7, #16]
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800b35e:	e021      	b.n	800b3a4 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a1a      	ldr	r2, [r3, #32]
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	1c59      	adds	r1, r3, #1
 800b368:	6179      	str	r1, [r7, #20]
 800b36a:	4413      	add	r3, r2
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b370:	7bfb      	ldrb	r3, [r7, #15]
 800b372:	2b20      	cmp	r3, #32
 800b374:	d100      	bne.n	800b378 <get_fileinfo+0x3a>
 800b376:	e015      	b.n	800b3a4 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b378:	7bfb      	ldrb	r3, [r7, #15]
 800b37a:	2b05      	cmp	r3, #5
 800b37c:	d101      	bne.n	800b382 <get_fileinfo+0x44>
 800b37e:	23e5      	movs	r3, #229	; 0xe5
 800b380:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	2b09      	cmp	r3, #9
 800b386:	d106      	bne.n	800b396 <get_fileinfo+0x58>
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	1c5a      	adds	r2, r3, #1
 800b38c:	613a      	str	r2, [r7, #16]
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	4413      	add	r3, r2
 800b392:	222e      	movs	r2, #46	; 0x2e
 800b394:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	1c5a      	adds	r2, r3, #1
 800b39a:	613a      	str	r2, [r7, #16]
 800b39c:	683a      	ldr	r2, [r7, #0]
 800b39e:	4413      	add	r3, r2
 800b3a0:	7bfa      	ldrb	r2, [r7, #15]
 800b3a2:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	2b0a      	cmp	r3, #10
 800b3a8:	d9da      	bls.n	800b360 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	3309      	adds	r3, #9
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	7ada      	ldrb	r2, [r3, #11]
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6a1b      	ldr	r3, [r3, #32]
 800b3c4:	331c      	adds	r3, #28
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7fe fec0 	bl	800a14c <ld_dword>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a1b      	ldr	r3, [r3, #32]
 800b3d6:	3316      	adds	r3, #22
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7fe feb7 	bl	800a14c <ld_dword>
 800b3de:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	b29a      	uxth	r2, r3
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	80da      	strh	r2, [r3, #6]
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	0c1b      	lsrs	r3, r3, #16
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	809a      	strh	r2, [r3, #4]
 800b3f2:	e000      	b.n	800b3f6 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b3f4:	bf00      	nop
}
 800b3f6:	3718      	adds	r7, #24
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b088      	sub	sp, #32
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3324      	adds	r3, #36	; 0x24
 800b410:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b412:	220b      	movs	r2, #11
 800b414:	2120      	movs	r1, #32
 800b416:	68b8      	ldr	r0, [r7, #8]
 800b418:	f7fe ff23 	bl	800a262 <mem_set>
	si = i = 0; ni = 8;
 800b41c:	2300      	movs	r3, #0
 800b41e:	613b      	str	r3, [r7, #16]
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	61fb      	str	r3, [r7, #28]
 800b424:	2308      	movs	r3, #8
 800b426:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	1c5a      	adds	r2, r3, #1
 800b42c:	61fa      	str	r2, [r7, #28]
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	4413      	add	r3, r2
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b436:	7efb      	ldrb	r3, [r7, #27]
 800b438:	2b20      	cmp	r3, #32
 800b43a:	d94e      	bls.n	800b4da <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b43c:	7efb      	ldrb	r3, [r7, #27]
 800b43e:	2b2f      	cmp	r3, #47	; 0x2f
 800b440:	d006      	beq.n	800b450 <create_name+0x54>
 800b442:	7efb      	ldrb	r3, [r7, #27]
 800b444:	2b5c      	cmp	r3, #92	; 0x5c
 800b446:	d110      	bne.n	800b46a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b448:	e002      	b.n	800b450 <create_name+0x54>
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	3301      	adds	r3, #1
 800b44e:	61fb      	str	r3, [r7, #28]
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	4413      	add	r3, r2
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	2b2f      	cmp	r3, #47	; 0x2f
 800b45a:	d0f6      	beq.n	800b44a <create_name+0x4e>
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	4413      	add	r3, r2
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	2b5c      	cmp	r3, #92	; 0x5c
 800b466:	d0f0      	beq.n	800b44a <create_name+0x4e>
			break;
 800b468:	e038      	b.n	800b4dc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b46a:	7efb      	ldrb	r3, [r7, #27]
 800b46c:	2b2e      	cmp	r3, #46	; 0x2e
 800b46e:	d003      	beq.n	800b478 <create_name+0x7c>
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	429a      	cmp	r2, r3
 800b476:	d30c      	bcc.n	800b492 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	2b0b      	cmp	r3, #11
 800b47c:	d002      	beq.n	800b484 <create_name+0x88>
 800b47e:	7efb      	ldrb	r3, [r7, #27]
 800b480:	2b2e      	cmp	r3, #46	; 0x2e
 800b482:	d001      	beq.n	800b488 <create_name+0x8c>
 800b484:	2306      	movs	r3, #6
 800b486:	e044      	b.n	800b512 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b488:	2308      	movs	r3, #8
 800b48a:	613b      	str	r3, [r7, #16]
 800b48c:	230b      	movs	r3, #11
 800b48e:	617b      	str	r3, [r7, #20]
			continue;
 800b490:	e022      	b.n	800b4d8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b492:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b496:	2b00      	cmp	r3, #0
 800b498:	da04      	bge.n	800b4a4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b49a:	7efb      	ldrb	r3, [r7, #27]
 800b49c:	3b80      	subs	r3, #128	; 0x80
 800b49e:	4a1f      	ldr	r2, [pc, #124]	; (800b51c <create_name+0x120>)
 800b4a0:	5cd3      	ldrb	r3, [r2, r3]
 800b4a2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b4a4:	7efb      	ldrb	r3, [r7, #27]
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	481d      	ldr	r0, [pc, #116]	; (800b520 <create_name+0x124>)
 800b4aa:	f7fe ff1c 	bl	800a2e6 <chk_chr>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <create_name+0xbc>
 800b4b4:	2306      	movs	r3, #6
 800b4b6:	e02c      	b.n	800b512 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b4b8:	7efb      	ldrb	r3, [r7, #27]
 800b4ba:	2b60      	cmp	r3, #96	; 0x60
 800b4bc:	d905      	bls.n	800b4ca <create_name+0xce>
 800b4be:	7efb      	ldrb	r3, [r7, #27]
 800b4c0:	2b7a      	cmp	r3, #122	; 0x7a
 800b4c2:	d802      	bhi.n	800b4ca <create_name+0xce>
 800b4c4:	7efb      	ldrb	r3, [r7, #27]
 800b4c6:	3b20      	subs	r3, #32
 800b4c8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	1c5a      	adds	r2, r3, #1
 800b4ce:	613a      	str	r2, [r7, #16]
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	7efa      	ldrb	r2, [r7, #27]
 800b4d6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b4d8:	e7a6      	b.n	800b428 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b4da:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	441a      	add	r2, r3
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d101      	bne.n	800b4f0 <create_name+0xf4>
 800b4ec:	2306      	movs	r3, #6
 800b4ee:	e010      	b.n	800b512 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	2be5      	cmp	r3, #229	; 0xe5
 800b4f6:	d102      	bne.n	800b4fe <create_name+0x102>
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	2205      	movs	r2, #5
 800b4fc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b4fe:	7efb      	ldrb	r3, [r7, #27]
 800b500:	2b20      	cmp	r3, #32
 800b502:	d801      	bhi.n	800b508 <create_name+0x10c>
 800b504:	2204      	movs	r2, #4
 800b506:	e000      	b.n	800b50a <create_name+0x10e>
 800b508:	2200      	movs	r2, #0
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	330b      	adds	r3, #11
 800b50e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b510:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b512:	4618      	mov	r0, r3
 800b514:	3720      	adds	r7, #32
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	08014c10 	.word	0x08014c10
 800b520:	080129f4 	.word	0x080129f4

0800b524 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b538:	e002      	b.n	800b540 <follow_path+0x1c>
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	3301      	adds	r3, #1
 800b53e:	603b      	str	r3, [r7, #0]
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	2b2f      	cmp	r3, #47	; 0x2f
 800b546:	d0f8      	beq.n	800b53a <follow_path+0x16>
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	2b5c      	cmp	r3, #92	; 0x5c
 800b54e:	d0f4      	beq.n	800b53a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	2200      	movs	r2, #0
 800b554:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	2b1f      	cmp	r3, #31
 800b55c:	d80a      	bhi.n	800b574 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2280      	movs	r2, #128	; 0x80
 800b562:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b566:	2100      	movs	r1, #0
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f7ff fc3e 	bl	800adea <dir_sdi>
 800b56e:	4603      	mov	r3, r0
 800b570:	75fb      	strb	r3, [r7, #23]
 800b572:	e043      	b.n	800b5fc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b574:	463b      	mov	r3, r7
 800b576:	4619      	mov	r1, r3
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f7ff ff3f 	bl	800b3fc <create_name>
 800b57e:	4603      	mov	r3, r0
 800b580:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b582:	7dfb      	ldrb	r3, [r7, #23]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d134      	bne.n	800b5f2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f7ff fe51 	bl	800b230 <dir_find>
 800b58e:	4603      	mov	r3, r0
 800b590:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b598:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b59a:	7dfb      	ldrb	r3, [r7, #23]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00a      	beq.n	800b5b6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b5a0:	7dfb      	ldrb	r3, [r7, #23]
 800b5a2:	2b04      	cmp	r3, #4
 800b5a4:	d127      	bne.n	800b5f6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b5a6:	7afb      	ldrb	r3, [r7, #11]
 800b5a8:	f003 0304 	and.w	r3, r3, #4
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d122      	bne.n	800b5f6 <follow_path+0xd2>
 800b5b0:	2305      	movs	r3, #5
 800b5b2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b5b4:	e01f      	b.n	800b5f6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b5b6:	7afb      	ldrb	r3, [r7, #11]
 800b5b8:	f003 0304 	and.w	r3, r3, #4
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d11c      	bne.n	800b5fa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	799b      	ldrb	r3, [r3, #6]
 800b5c4:	f003 0310 	and.w	r3, r3, #16
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d102      	bne.n	800b5d2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b5cc:	2305      	movs	r3, #5
 800b5ce:	75fb      	strb	r3, [r7, #23]
 800b5d0:	e014      	b.n	800b5fc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	695b      	ldr	r3, [r3, #20]
 800b5dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5e0:	4413      	add	r3, r2
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f7ff fd87 	bl	800b0f8 <ld_clust>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b5f0:	e7c0      	b.n	800b574 <follow_path+0x50>
			if (res != FR_OK) break;
 800b5f2:	bf00      	nop
 800b5f4:	e002      	b.n	800b5fc <follow_path+0xd8>
				break;
 800b5f6:	bf00      	nop
 800b5f8:	e000      	b.n	800b5fc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b5fa:	bf00      	nop
			}
		}
	}

	return res;
 800b5fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3718      	adds	r7, #24
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b606:	b480      	push	{r7}
 800b608:	b087      	sub	sp, #28
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b60e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b612:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d031      	beq.n	800b680 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	617b      	str	r3, [r7, #20]
 800b622:	e002      	b.n	800b62a <get_ldnumber+0x24>
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	3301      	adds	r3, #1
 800b628:	617b      	str	r3, [r7, #20]
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	2b20      	cmp	r3, #32
 800b630:	d903      	bls.n	800b63a <get_ldnumber+0x34>
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	2b3a      	cmp	r3, #58	; 0x3a
 800b638:	d1f4      	bne.n	800b624 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	2b3a      	cmp	r3, #58	; 0x3a
 800b640:	d11c      	bne.n	800b67c <get_ldnumber+0x76>
			tp = *path;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	1c5a      	adds	r2, r3, #1
 800b64c:	60fa      	str	r2, [r7, #12]
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	3b30      	subs	r3, #48	; 0x30
 800b652:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	2b09      	cmp	r3, #9
 800b658:	d80e      	bhi.n	800b678 <get_ldnumber+0x72>
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d10a      	bne.n	800b678 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	2b07      	cmp	r3, #7
 800b666:	d807      	bhi.n	800b678 <get_ldnumber+0x72>
					vol = (int)i;
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	3301      	adds	r3, #1
 800b670:	617b      	str	r3, [r7, #20]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	697a      	ldr	r2, [r7, #20]
 800b676:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	e002      	b.n	800b682 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b67c:	2300      	movs	r3, #0
 800b67e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b680:	693b      	ldr	r3, [r7, #16]
}
 800b682:	4618      	mov	r0, r3
 800b684:	371c      	adds	r7, #28
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
	...

0800b690 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	70da      	strb	r2, [r3, #3]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6a6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f7ff f818 	bl	800a6e0 <move_window>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <check_fs+0x2a>
 800b6b6:	2304      	movs	r3, #4
 800b6b8:	e038      	b.n	800b72c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	3334      	adds	r3, #52	; 0x34
 800b6be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7fe fd2a 	bl	800a11c <ld_word>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d001      	beq.n	800b6d8 <check_fs+0x48>
 800b6d4:	2303      	movs	r3, #3
 800b6d6:	e029      	b.n	800b72c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6de:	2be9      	cmp	r3, #233	; 0xe9
 800b6e0:	d009      	beq.n	800b6f6 <check_fs+0x66>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6e8:	2beb      	cmp	r3, #235	; 0xeb
 800b6ea:	d11e      	bne.n	800b72a <check_fs+0x9a>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b6f2:	2b90      	cmp	r3, #144	; 0x90
 800b6f4:	d119      	bne.n	800b72a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	3334      	adds	r3, #52	; 0x34
 800b6fa:	3336      	adds	r3, #54	; 0x36
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fe fd25 	bl	800a14c <ld_dword>
 800b702:	4603      	mov	r3, r0
 800b704:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b708:	4a0a      	ldr	r2, [pc, #40]	; (800b734 <check_fs+0xa4>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d101      	bne.n	800b712 <check_fs+0x82>
 800b70e:	2300      	movs	r3, #0
 800b710:	e00c      	b.n	800b72c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	3334      	adds	r3, #52	; 0x34
 800b716:	3352      	adds	r3, #82	; 0x52
 800b718:	4618      	mov	r0, r3
 800b71a:	f7fe fd17 	bl	800a14c <ld_dword>
 800b71e:	4603      	mov	r3, r0
 800b720:	4a05      	ldr	r2, [pc, #20]	; (800b738 <check_fs+0xa8>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d101      	bne.n	800b72a <check_fs+0x9a>
 800b726:	2300      	movs	r3, #0
 800b728:	e000      	b.n	800b72c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b72a:	2302      	movs	r3, #2
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3708      	adds	r7, #8
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	00544146 	.word	0x00544146
 800b738:	33544146 	.word	0x33544146

0800b73c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b096      	sub	sp, #88	; 0x58
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	4613      	mov	r3, r2
 800b748:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	2200      	movs	r2, #0
 800b74e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f7ff ff58 	bl	800b606 <get_ldnumber>
 800b756:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	da01      	bge.n	800b762 <find_volume+0x26>
 800b75e:	230b      	movs	r3, #11
 800b760:	e235      	b.n	800bbce <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b762:	4aa5      	ldr	r2, [pc, #660]	; (800b9f8 <find_volume+0x2bc>)
 800b764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b76a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d101      	bne.n	800b776 <find_volume+0x3a>
 800b772:	230c      	movs	r3, #12
 800b774:	e22b      	b.n	800bbce <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800b776:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b778:	f7fe fdd0 	bl	800a31c <lock_fs>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d101      	bne.n	800b786 <find_volume+0x4a>
 800b782:	230f      	movs	r3, #15
 800b784:	e223      	b.n	800bbce <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b78a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b78c:	79fb      	ldrb	r3, [r7, #7]
 800b78e:	f023 0301 	bic.w	r3, r3, #1
 800b792:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d01a      	beq.n	800b7d2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79e:	785b      	ldrb	r3, [r3, #1]
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7fe fc19 	bl	8009fd8 <disk_status>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b7ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7b0:	f003 0301 	and.w	r3, r3, #1
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10c      	bne.n	800b7d2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b7b8:	79fb      	ldrb	r3, [r7, #7]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d007      	beq.n	800b7ce <find_volume+0x92>
 800b7be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7c2:	f003 0304 	and.w	r3, r3, #4
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d001      	beq.n	800b7ce <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b7ca:	230a      	movs	r3, #10
 800b7cc:	e1ff      	b.n	800bbce <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	e1fd      	b.n	800bbce <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7da:	b2da      	uxtb	r2, r3
 800b7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e2:	785b      	ldrb	r3, [r3, #1]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7fe fc13 	bl	800a010 <disk_initialize>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b7f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7f4:	f003 0301 	and.w	r3, r3, #1
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d001      	beq.n	800b800 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	e1e6      	b.n	800bbce <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b800:	79fb      	ldrb	r3, [r7, #7]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d007      	beq.n	800b816 <find_volume+0xda>
 800b806:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b80a:	f003 0304 	and.w	r3, r3, #4
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d001      	beq.n	800b816 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b812:	230a      	movs	r3, #10
 800b814:	e1db      	b.n	800bbce <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b816:	2300      	movs	r3, #0
 800b818:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b81a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b81c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b81e:	f7ff ff37 	bl	800b690 <check_fs>
 800b822:	4603      	mov	r3, r0
 800b824:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b828:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	d149      	bne.n	800b8c4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b830:	2300      	movs	r3, #0
 800b832:	643b      	str	r3, [r7, #64]	; 0x40
 800b834:	e01e      	b.n	800b874 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b838:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b83e:	011b      	lsls	r3, r3, #4
 800b840:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b844:	4413      	add	r3, r2
 800b846:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84a:	3304      	adds	r3, #4
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d006      	beq.n	800b860 <find_volume+0x124>
 800b852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b854:	3308      	adds	r3, #8
 800b856:	4618      	mov	r0, r3
 800b858:	f7fe fc78 	bl	800a14c <ld_dword>
 800b85c:	4602      	mov	r2, r0
 800b85e:	e000      	b.n	800b862 <find_volume+0x126>
 800b860:	2200      	movs	r2, #0
 800b862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	3358      	adds	r3, #88	; 0x58
 800b868:	443b      	add	r3, r7
 800b86a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b86e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b870:	3301      	adds	r3, #1
 800b872:	643b      	str	r3, [r7, #64]	; 0x40
 800b874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b876:	2b03      	cmp	r3, #3
 800b878:	d9dd      	bls.n	800b836 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b87a:	2300      	movs	r3, #0
 800b87c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b87e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b880:	2b00      	cmp	r3, #0
 800b882:	d002      	beq.n	800b88a <find_volume+0x14e>
 800b884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b886:	3b01      	subs	r3, #1
 800b888:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b88a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	3358      	adds	r3, #88	; 0x58
 800b890:	443b      	add	r3, r7
 800b892:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b896:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d005      	beq.n	800b8aa <find_volume+0x16e>
 800b89e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b8a2:	f7ff fef5 	bl	800b690 <check_fs>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	e000      	b.n	800b8ac <find_volume+0x170>
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b8b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d905      	bls.n	800b8c4 <find_volume+0x188>
 800b8b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	643b      	str	r3, [r7, #64]	; 0x40
 800b8be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8c0:	2b03      	cmp	r3, #3
 800b8c2:	d9e2      	bls.n	800b88a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b8c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8c8:	2b04      	cmp	r3, #4
 800b8ca:	d101      	bne.n	800b8d0 <find_volume+0x194>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	e17e      	b.n	800bbce <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b8d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d901      	bls.n	800b8dc <find_volume+0x1a0>
 800b8d8:	230d      	movs	r3, #13
 800b8da:	e178      	b.n	800bbce <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	3334      	adds	r3, #52	; 0x34
 800b8e0:	330b      	adds	r3, #11
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fe fc1a 	bl	800a11c <ld_word>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8ee:	d001      	beq.n	800b8f4 <find_volume+0x1b8>
 800b8f0:	230d      	movs	r3, #13
 800b8f2:	e16c      	b.n	800bbce <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f6:	3334      	adds	r3, #52	; 0x34
 800b8f8:	3316      	adds	r3, #22
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fe fc0e 	bl	800a11c <ld_word>
 800b900:	4603      	mov	r3, r0
 800b902:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b906:	2b00      	cmp	r3, #0
 800b908:	d106      	bne.n	800b918 <find_volume+0x1dc>
 800b90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90c:	3334      	adds	r3, #52	; 0x34
 800b90e:	3324      	adds	r3, #36	; 0x24
 800b910:	4618      	mov	r0, r3
 800b912:	f7fe fc1b 	bl	800a14c <ld_dword>
 800b916:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b91c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b920:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b926:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92a:	789b      	ldrb	r3, [r3, #2]
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d005      	beq.n	800b93c <find_volume+0x200>
 800b930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b932:	789b      	ldrb	r3, [r3, #2]
 800b934:	2b02      	cmp	r3, #2
 800b936:	d001      	beq.n	800b93c <find_volume+0x200>
 800b938:	230d      	movs	r3, #13
 800b93a:	e148      	b.n	800bbce <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93e:	789b      	ldrb	r3, [r3, #2]
 800b940:	461a      	mov	r2, r3
 800b942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b944:	fb02 f303 	mul.w	r3, r2, r3
 800b948:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b950:	b29a      	uxth	r2, r3
 800b952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b954:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b958:	895b      	ldrh	r3, [r3, #10]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d008      	beq.n	800b970 <find_volume+0x234>
 800b95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b960:	895b      	ldrh	r3, [r3, #10]
 800b962:	461a      	mov	r2, r3
 800b964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b966:	895b      	ldrh	r3, [r3, #10]
 800b968:	3b01      	subs	r3, #1
 800b96a:	4013      	ands	r3, r2
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d001      	beq.n	800b974 <find_volume+0x238>
 800b970:	230d      	movs	r3, #13
 800b972:	e12c      	b.n	800bbce <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b976:	3334      	adds	r3, #52	; 0x34
 800b978:	3311      	adds	r3, #17
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7fe fbce 	bl	800a11c <ld_word>
 800b980:	4603      	mov	r3, r0
 800b982:	461a      	mov	r2, r3
 800b984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b986:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98a:	891b      	ldrh	r3, [r3, #8]
 800b98c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b990:	b29b      	uxth	r3, r3
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <find_volume+0x25e>
 800b996:	230d      	movs	r3, #13
 800b998:	e119      	b.n	800bbce <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99c:	3334      	adds	r3, #52	; 0x34
 800b99e:	3313      	adds	r3, #19
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fe fbbb 	bl	800a11c <ld_word>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b9aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d106      	bne.n	800b9be <find_volume+0x282>
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b2:	3334      	adds	r3, #52	; 0x34
 800b9b4:	3320      	adds	r3, #32
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fe fbc8 	bl	800a14c <ld_dword>
 800b9bc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c0:	3334      	adds	r3, #52	; 0x34
 800b9c2:	330e      	adds	r3, #14
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fe fba9 	bl	800a11c <ld_word>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b9ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d101      	bne.n	800b9d8 <find_volume+0x29c>
 800b9d4:	230d      	movs	r3, #13
 800b9d6:	e0fa      	b.n	800bbce <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b9d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9dc:	4413      	add	r3, r2
 800b9de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9e0:	8912      	ldrh	r2, [r2, #8]
 800b9e2:	0992      	lsrs	r2, r2, #6
 800b9e4:	b292      	uxth	r2, r2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b9ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d204      	bcs.n	800b9fc <find_volume+0x2c0>
 800b9f2:	230d      	movs	r3, #13
 800b9f4:	e0eb      	b.n	800bbce <find_volume+0x492>
 800b9f6:	bf00      	nop
 800b9f8:	20003c8c 	.word	0x20003c8c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b9fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	1ad3      	subs	r3, r2, r3
 800ba02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba04:	8952      	ldrh	r2, [r2, #10]
 800ba06:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba0a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d101      	bne.n	800ba16 <find_volume+0x2da>
 800ba12:	230d      	movs	r3, #13
 800ba14:	e0db      	b.n	800bbce <find_volume+0x492>
		fmt = FS_FAT32;
 800ba16:	2303      	movs	r3, #3
 800ba18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d802      	bhi.n	800ba2c <find_volume+0x2f0>
 800ba26:	2302      	movs	r3, #2
 800ba28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d802      	bhi.n	800ba3c <find_volume+0x300>
 800ba36:	2301      	movs	r3, #1
 800ba38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	1c9a      	adds	r2, r3, #2
 800ba40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba42:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ba44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba48:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ba4a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba4e:	441a      	add	r2, r3
 800ba50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba52:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ba54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba58:	441a      	add	r2, r3
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ba5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba62:	2b03      	cmp	r3, #3
 800ba64:	d11e      	bne.n	800baa4 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ba66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba68:	3334      	adds	r3, #52	; 0x34
 800ba6a:	332a      	adds	r3, #42	; 0x2a
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7fe fb55 	bl	800a11c <ld_word>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d001      	beq.n	800ba7c <find_volume+0x340>
 800ba78:	230d      	movs	r3, #13
 800ba7a:	e0a8      	b.n	800bbce <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ba7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7e:	891b      	ldrh	r3, [r3, #8]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d001      	beq.n	800ba88 <find_volume+0x34c>
 800ba84:	230d      	movs	r3, #13
 800ba86:	e0a2      	b.n	800bbce <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ba88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8a:	3334      	adds	r3, #52	; 0x34
 800ba8c:	332c      	adds	r3, #44	; 0x2c
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fe fb5c 	bl	800a14c <ld_dword>
 800ba94:	4602      	mov	r2, r0
 800ba96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba98:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ba9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9c:	699b      	ldr	r3, [r3, #24]
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	647b      	str	r3, [r7, #68]	; 0x44
 800baa2:	e01f      	b.n	800bae4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800baa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa6:	891b      	ldrh	r3, [r3, #8]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d101      	bne.n	800bab0 <find_volume+0x374>
 800baac:	230d      	movs	r3, #13
 800baae:	e08e      	b.n	800bbce <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bab6:	441a      	add	r2, r3
 800bab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baba:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800babc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bac0:	2b02      	cmp	r3, #2
 800bac2:	d103      	bne.n	800bacc <find_volume+0x390>
 800bac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac6:	699b      	ldr	r3, [r3, #24]
 800bac8:	005b      	lsls	r3, r3, #1
 800baca:	e00a      	b.n	800bae2 <find_volume+0x3a6>
 800bacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bace:	699a      	ldr	r2, [r3, #24]
 800bad0:	4613      	mov	r3, r2
 800bad2:	005b      	lsls	r3, r3, #1
 800bad4:	4413      	add	r3, r2
 800bad6:	085a      	lsrs	r2, r3, #1
 800bad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bada:	699b      	ldr	r3, [r3, #24]
 800badc:	f003 0301 	and.w	r3, r3, #1
 800bae0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bae2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae6:	69da      	ldr	r2, [r3, #28]
 800bae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baea:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800baee:	0adb      	lsrs	r3, r3, #11
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d201      	bcs.n	800baf8 <find_volume+0x3bc>
 800baf4:	230d      	movs	r3, #13
 800baf6:	e06a      	b.n	800bbce <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800baf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bafe:	615a      	str	r2, [r3, #20]
 800bb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb02:	695a      	ldr	r2, [r3, #20]
 800bb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb06:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800bb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0a:	2280      	movs	r2, #128	; 0x80
 800bb0c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bb0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb12:	2b03      	cmp	r3, #3
 800bb14:	d149      	bne.n	800bbaa <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb18:	3334      	adds	r3, #52	; 0x34
 800bb1a:	3330      	adds	r3, #48	; 0x30
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7fe fafd 	bl	800a11c <ld_word>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d140      	bne.n	800bbaa <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bb28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb30:	f7fe fdd6 	bl	800a6e0 <move_window>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d137      	bne.n	800bbaa <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb42:	3334      	adds	r3, #52	; 0x34
 800bb44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7fe fae7 	bl	800a11c <ld_word>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	461a      	mov	r2, r3
 800bb52:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d127      	bne.n	800bbaa <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5c:	3334      	adds	r3, #52	; 0x34
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7fe faf4 	bl	800a14c <ld_dword>
 800bb64:	4603      	mov	r3, r0
 800bb66:	4a1c      	ldr	r2, [pc, #112]	; (800bbd8 <find_volume+0x49c>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d11e      	bne.n	800bbaa <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6e:	3334      	adds	r3, #52	; 0x34
 800bb70:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7fe fae9 	bl	800a14c <ld_dword>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	4a17      	ldr	r2, [pc, #92]	; (800bbdc <find_volume+0x4a0>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d113      	bne.n	800bbaa <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb84:	3334      	adds	r3, #52	; 0x34
 800bb86:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7fe fade 	bl	800a14c <ld_dword>
 800bb90:	4602      	mov	r2, r0
 800bb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb94:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb98:	3334      	adds	r3, #52	; 0x34
 800bb9a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fe fad4 	bl	800a14c <ld_dword>
 800bba4:	4602      	mov	r2, r0
 800bba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbac:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bbb0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bbb2:	4b0b      	ldr	r3, [pc, #44]	; (800bbe0 <find_volume+0x4a4>)
 800bbb4:	881b      	ldrh	r3, [r3, #0]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	b29a      	uxth	r2, r3
 800bbba:	4b09      	ldr	r3, [pc, #36]	; (800bbe0 <find_volume+0x4a4>)
 800bbbc:	801a      	strh	r2, [r3, #0]
 800bbbe:	4b08      	ldr	r3, [pc, #32]	; (800bbe0 <find_volume+0x4a4>)
 800bbc0:	881a      	ldrh	r2, [r3, #0]
 800bbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bbc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbc8:	f7fe fd22 	bl	800a610 <clear_lock>
#endif
	return FR_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3758      	adds	r7, #88	; 0x58
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	41615252 	.word	0x41615252
 800bbdc:	61417272 	.word	0x61417272
 800bbe0:	20003cac 	.word	0x20003cac

0800bbe4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bbee:	2309      	movs	r3, #9
 800bbf0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d02e      	beq.n	800bc56 <validate+0x72>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d02a      	beq.n	800bc56 <validate+0x72>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d025      	beq.n	800bc56 <validate+0x72>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	889a      	ldrh	r2, [r3, #4]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	88db      	ldrh	r3, [r3, #6]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d11e      	bne.n	800bc56 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7fe fb7d 	bl	800a31c <lock_fs>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d014      	beq.n	800bc52 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	785b      	ldrb	r3, [r3, #1]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fe f9d2 	bl	8009fd8 <disk_status>
 800bc34:	4603      	mov	r3, r0
 800bc36:	f003 0301 	and.w	r3, r3, #1
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d102      	bne.n	800bc44 <validate+0x60>
				res = FR_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	73fb      	strb	r3, [r7, #15]
 800bc42:	e008      	b.n	800bc56 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2100      	movs	r1, #0
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fe fb7c 	bl	800a348 <unlock_fs>
 800bc50:	e001      	b.n	800bc56 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800bc52:	230f      	movs	r3, #15
 800bc54:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bc56:	7bfb      	ldrb	r3, [r7, #15]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d102      	bne.n	800bc62 <validate+0x7e>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	e000      	b.n	800bc64 <validate+0x80>
 800bc62:	2300      	movs	r3, #0
 800bc64:	683a      	ldr	r2, [r7, #0]
 800bc66:	6013      	str	r3, [r2, #0]
	return res;
 800bc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
	...

0800bc74 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b088      	sub	sp, #32
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	4613      	mov	r3, r2
 800bc80:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bc86:	f107 0310 	add.w	r3, r7, #16
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7ff fcbb 	bl	800b606 <get_ldnumber>
 800bc90:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	da01      	bge.n	800bc9c <f_mount+0x28>
 800bc98:	230b      	movs	r3, #11
 800bc9a:	e048      	b.n	800bd2e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bc9c:	4a26      	ldr	r2, [pc, #152]	; (800bd38 <f_mount+0xc4>)
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bca4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00f      	beq.n	800bccc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bcac:	69b8      	ldr	r0, [r7, #24]
 800bcae:	f7fe fcaf 	bl	800a610 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f001 fc0a 	bl	800d4d0 <ff_del_syncobj>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d101      	bne.n	800bcc6 <f_mount+0x52>
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	e033      	b.n	800bd2e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00f      	beq.n	800bcf2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	330c      	adds	r3, #12
 800bce0:	4619      	mov	r1, r3
 800bce2:	4610      	mov	r0, r2
 800bce4:	f001 fbdb 	bl	800d49e <ff_cre_syncobj>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d101      	bne.n	800bcf2 <f_mount+0x7e>
 800bcee:	2302      	movs	r3, #2
 800bcf0:	e01d      	b.n	800bd2e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	4910      	ldr	r1, [pc, #64]	; (800bd38 <f_mount+0xc4>)
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d002      	beq.n	800bd08 <f_mount+0x94>
 800bd02:	79fb      	ldrb	r3, [r7, #7]
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d001      	beq.n	800bd0c <f_mount+0x98>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	e010      	b.n	800bd2e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bd0c:	f107 010c 	add.w	r1, r7, #12
 800bd10:	f107 0308 	add.w	r3, r7, #8
 800bd14:	2200      	movs	r2, #0
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7ff fd10 	bl	800b73c <find_volume>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	7dfa      	ldrb	r2, [r7, #23]
 800bd24:	4611      	mov	r1, r2
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7fe fb0e 	bl	800a348 <unlock_fs>
 800bd2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3720      	adds	r7, #32
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	20003c8c 	.word	0x20003c8c

0800bd3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b098      	sub	sp, #96	; 0x60
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	4613      	mov	r3, r2
 800bd48:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d101      	bne.n	800bd54 <f_open+0x18>
 800bd50:	2309      	movs	r3, #9
 800bd52:	e1b4      	b.n	800c0be <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bd54:	79fb      	ldrb	r3, [r7, #7]
 800bd56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd5a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bd5c:	79fa      	ldrb	r2, [r7, #7]
 800bd5e:	f107 0110 	add.w	r1, r7, #16
 800bd62:	f107 0308 	add.w	r3, r7, #8
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7ff fce8 	bl	800b73c <find_volume>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800bd72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f040 8191 	bne.w	800c09e <f_open+0x362>
		dj.obj.fs = fs;
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	f107 0314 	add.w	r3, r7, #20
 800bd86:	4611      	mov	r1, r2
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7ff fbcb 	bl	800b524 <follow_path>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bd94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d11a      	bne.n	800bdd2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bd9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bda0:	b25b      	sxtb	r3, r3
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	da03      	bge.n	800bdae <f_open+0x72>
				res = FR_INVALID_NAME;
 800bda6:	2306      	movs	r3, #6
 800bda8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bdac:	e011      	b.n	800bdd2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bdae:	79fb      	ldrb	r3, [r7, #7]
 800bdb0:	f023 0301 	bic.w	r3, r3, #1
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	bf14      	ite	ne
 800bdb8:	2301      	movne	r3, #1
 800bdba:	2300      	moveq	r3, #0
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	f107 0314 	add.w	r3, r7, #20
 800bdc4:	4611      	mov	r1, r2
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7fe fada 	bl	800a380 <chk_lock>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bdd2:	79fb      	ldrb	r3, [r7, #7]
 800bdd4:	f003 031c 	and.w	r3, r3, #28
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d07f      	beq.n	800bedc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bddc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d017      	beq.n	800be14 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bde4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bde8:	2b04      	cmp	r3, #4
 800bdea:	d10e      	bne.n	800be0a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bdec:	f7fe fb24 	bl	800a438 <enq_lock>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d006      	beq.n	800be04 <f_open+0xc8>
 800bdf6:	f107 0314 	add.w	r3, r7, #20
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7ff fa6d 	bl	800b2da <dir_register>
 800be00:	4603      	mov	r3, r0
 800be02:	e000      	b.n	800be06 <f_open+0xca>
 800be04:	2312      	movs	r3, #18
 800be06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800be0a:	79fb      	ldrb	r3, [r7, #7]
 800be0c:	f043 0308 	orr.w	r3, r3, #8
 800be10:	71fb      	strb	r3, [r7, #7]
 800be12:	e010      	b.n	800be36 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800be14:	7ebb      	ldrb	r3, [r7, #26]
 800be16:	f003 0311 	and.w	r3, r3, #17
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d003      	beq.n	800be26 <f_open+0xea>
					res = FR_DENIED;
 800be1e:	2307      	movs	r3, #7
 800be20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800be24:	e007      	b.n	800be36 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800be26:	79fb      	ldrb	r3, [r7, #7]
 800be28:	f003 0304 	and.w	r3, r3, #4
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d002      	beq.n	800be36 <f_open+0xfa>
 800be30:	2308      	movs	r3, #8
 800be32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800be36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d168      	bne.n	800bf10 <f_open+0x1d4>
 800be3e:	79fb      	ldrb	r3, [r7, #7]
 800be40:	f003 0308 	and.w	r3, r3, #8
 800be44:	2b00      	cmp	r3, #0
 800be46:	d063      	beq.n	800bf10 <f_open+0x1d4>
				dw = GET_FATTIME();
 800be48:	f7fd ffcc 	bl	8009de4 <get_fattime>
 800be4c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800be4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be50:	330e      	adds	r3, #14
 800be52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be54:	4618      	mov	r0, r3
 800be56:	f7fe f9b7 	bl	800a1c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800be5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be5c:	3316      	adds	r3, #22
 800be5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be60:	4618      	mov	r0, r3
 800be62:	f7fe f9b1 	bl	800a1c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800be66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be68:	330b      	adds	r3, #11
 800be6a:	2220      	movs	r2, #32
 800be6c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be72:	4611      	mov	r1, r2
 800be74:	4618      	mov	r0, r3
 800be76:	f7ff f93f 	bl	800b0f8 <ld_clust>
 800be7a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800be80:	2200      	movs	r2, #0
 800be82:	4618      	mov	r0, r3
 800be84:	f7ff f957 	bl	800b136 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800be88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8a:	331c      	adds	r3, #28
 800be8c:	2100      	movs	r1, #0
 800be8e:	4618      	mov	r0, r3
 800be90:	f7fe f99a 	bl	800a1c8 <st_dword>
					fs->wflag = 1;
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	2201      	movs	r2, #1
 800be98:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800be9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d037      	beq.n	800bf10 <f_open+0x1d4>
						dw = fs->winsect;
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bea6:	f107 0314 	add.w	r3, r7, #20
 800beaa:	2200      	movs	r2, #0
 800beac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fe fe6a 	bl	800ab88 <remove_chain>
 800beb4:	4603      	mov	r3, r0
 800beb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800beba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d126      	bne.n	800bf10 <f_open+0x1d4>
							res = move_window(fs, dw);
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7fe fc0a 	bl	800a6e0 <move_window>
 800becc:	4603      	mov	r3, r0
 800bece:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bed6:	3a01      	subs	r2, #1
 800bed8:	611a      	str	r2, [r3, #16]
 800beda:	e019      	b.n	800bf10 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bedc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d115      	bne.n	800bf10 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bee4:	7ebb      	ldrb	r3, [r7, #26]
 800bee6:	f003 0310 	and.w	r3, r3, #16
 800beea:	2b00      	cmp	r3, #0
 800beec:	d003      	beq.n	800bef6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800beee:	2304      	movs	r3, #4
 800bef0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bef4:	e00c      	b.n	800bf10 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bef6:	79fb      	ldrb	r3, [r7, #7]
 800bef8:	f003 0302 	and.w	r3, r3, #2
 800befc:	2b00      	cmp	r3, #0
 800befe:	d007      	beq.n	800bf10 <f_open+0x1d4>
 800bf00:	7ebb      	ldrb	r3, [r7, #26]
 800bf02:	f003 0301 	and.w	r3, r3, #1
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d002      	beq.n	800bf10 <f_open+0x1d4>
						res = FR_DENIED;
 800bf0a:	2307      	movs	r3, #7
 800bf0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bf10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d128      	bne.n	800bf6a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bf18:	79fb      	ldrb	r3, [r7, #7]
 800bf1a:	f003 0308 	and.w	r3, r3, #8
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d003      	beq.n	800bf2a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bf22:	79fb      	ldrb	r3, [r7, #7]
 800bf24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf28:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bf32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bf38:	79fb      	ldrb	r3, [r7, #7]
 800bf3a:	f023 0301 	bic.w	r3, r3, #1
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	bf14      	ite	ne
 800bf42:	2301      	movne	r3, #1
 800bf44:	2300      	moveq	r3, #0
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	461a      	mov	r2, r3
 800bf4a:	f107 0314 	add.w	r3, r7, #20
 800bf4e:	4611      	mov	r1, r2
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fe fa93 	bl	800a47c <inc_lock>
 800bf56:	4602      	mov	r2, r0
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	691b      	ldr	r3, [r3, #16]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d102      	bne.n	800bf6a <f_open+0x22e>
 800bf64:	2302      	movs	r3, #2
 800bf66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bf6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f040 8095 	bne.w	800c09e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf78:	4611      	mov	r1, r2
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7ff f8bc 	bl	800b0f8 <ld_clust>
 800bf80:	4602      	mov	r2, r0
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bf86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf88:	331c      	adds	r3, #28
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fe f8de 	bl	800a14c <ld_dword>
 800bf90:	4602      	mov	r2, r0
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bf9c:	693a      	ldr	r2, [r7, #16]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	88da      	ldrh	r2, [r3, #6]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	79fa      	ldrb	r2, [r7, #7]
 800bfae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	3330      	adds	r3, #48	; 0x30
 800bfc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bfca:	2100      	movs	r1, #0
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7fe f948 	bl	800a262 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bfd2:	79fb      	ldrb	r3, [r7, #7]
 800bfd4:	f003 0320 	and.w	r3, r3, #32
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d060      	beq.n	800c09e <f_open+0x362>
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d05c      	beq.n	800c09e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	68da      	ldr	r2, [r3, #12]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	895b      	ldrh	r3, [r3, #10]
 800bff0:	02db      	lsls	r3, r3, #11
 800bff2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	657b      	str	r3, [r7, #84]	; 0x54
 800c000:	e016      	b.n	800c030 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c006:	4618      	mov	r0, r3
 800c008:	f7fe fc25 	bl	800a856 <get_fat>
 800c00c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c00e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c010:	2b01      	cmp	r3, #1
 800c012:	d802      	bhi.n	800c01a <f_open+0x2de>
 800c014:	2302      	movs	r3, #2
 800c016:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c01a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c01c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c020:	d102      	bne.n	800c028 <f_open+0x2ec>
 800c022:	2301      	movs	r3, #1
 800c024:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c028:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c02a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c02c:	1ad3      	subs	r3, r2, r3
 800c02e:	657b      	str	r3, [r7, #84]	; 0x54
 800c030:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c034:	2b00      	cmp	r3, #0
 800c036:	d103      	bne.n	800c040 <f_open+0x304>
 800c038:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c03a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d8e0      	bhi.n	800c002 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c044:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c046:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d127      	bne.n	800c09e <f_open+0x362>
 800c04e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c050:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c054:	2b00      	cmp	r3, #0
 800c056:	d022      	beq.n	800c09e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7fe fbdb 	bl	800a818 <clust2sect>
 800c062:	6478      	str	r0, [r7, #68]	; 0x44
 800c064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c066:	2b00      	cmp	r3, #0
 800c068:	d103      	bne.n	800c072 <f_open+0x336>
						res = FR_INT_ERR;
 800c06a:	2302      	movs	r3, #2
 800c06c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c070:	e015      	b.n	800c09e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c074:	0ada      	lsrs	r2, r3, #11
 800c076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c078:	441a      	add	r2, r3
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	7858      	ldrb	r0, [r3, #1]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6a1a      	ldr	r2, [r3, #32]
 800c08c:	2301      	movs	r3, #1
 800c08e:	f7fd ffe5 	bl	800a05c <disk_read>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <f_open+0x362>
 800c098:	2301      	movs	r3, #1
 800c09a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c09e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d002      	beq.n	800c0ac <f_open+0x370>
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fe f947 	bl	800a348 <unlock_fs>
 800c0ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3760      	adds	r7, #96	; 0x60
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b08e      	sub	sp, #56	; 0x38
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	60f8      	str	r0, [r7, #12]
 800c0ce:	60b9      	str	r1, [r7, #8]
 800c0d0:	607a      	str	r2, [r7, #4]
 800c0d2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f107 0214 	add.w	r2, r7, #20
 800c0e4:	4611      	mov	r1, r2
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7ff fd7c 	bl	800bbe4 <validate>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c0f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d107      	bne.n	800c10a <f_read+0x44>
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	7d5b      	ldrb	r3, [r3, #21]
 800c0fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c102:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c106:	2b00      	cmp	r3, #0
 800c108:	d009      	beq.n	800c11e <f_read+0x58>
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c110:	4611      	mov	r1, r2
 800c112:	4618      	mov	r0, r3
 800c114:	f7fe f918 	bl	800a348 <unlock_fs>
 800c118:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c11c:	e13d      	b.n	800c39a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	7d1b      	ldrb	r3, [r3, #20]
 800c122:	f003 0301 	and.w	r3, r3, #1
 800c126:	2b00      	cmp	r3, #0
 800c128:	d106      	bne.n	800c138 <f_read+0x72>
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	2107      	movs	r1, #7
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fe f90a 	bl	800a348 <unlock_fs>
 800c134:	2307      	movs	r3, #7
 800c136:	e130      	b.n	800c39a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	68da      	ldr	r2, [r3, #12]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	699b      	ldr	r3, [r3, #24]
 800c140:	1ad3      	subs	r3, r2, r3
 800c142:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	6a3b      	ldr	r3, [r7, #32]
 800c148:	429a      	cmp	r2, r3
 800c14a:	f240 811c 	bls.w	800c386 <f_read+0x2c0>
 800c14e:	6a3b      	ldr	r3, [r7, #32]
 800c150:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c152:	e118      	b.n	800c386 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	699b      	ldr	r3, [r3, #24]
 800c158:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f040 80e4 	bne.w	800c32a <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	699b      	ldr	r3, [r3, #24]
 800c166:	0adb      	lsrs	r3, r3, #11
 800c168:	697a      	ldr	r2, [r7, #20]
 800c16a:	8952      	ldrh	r2, [r2, #10]
 800c16c:	3a01      	subs	r2, #1
 800c16e:	4013      	ands	r3, r2
 800c170:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c172:	69fb      	ldr	r3, [r7, #28]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d139      	bne.n	800c1ec <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	699b      	ldr	r3, [r3, #24]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d103      	bne.n	800c188 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	633b      	str	r3, [r7, #48]	; 0x30
 800c186:	e013      	b.n	800c1b0 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d007      	beq.n	800c1a0 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	699b      	ldr	r3, [r3, #24]
 800c194:	4619      	mov	r1, r3
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f7fe fdf3 	bl	800ad82 <clmt_clust>
 800c19c:	6338      	str	r0, [r7, #48]	; 0x30
 800c19e:	e007      	b.n	800c1b0 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	69db      	ldr	r3, [r3, #28]
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	4610      	mov	r0, r2
 800c1aa:	f7fe fb54 	bl	800a856 <get_fat>
 800c1ae:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d809      	bhi.n	800c1ca <f_read+0x104>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2202      	movs	r2, #2
 800c1ba:	755a      	strb	r2, [r3, #21]
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	2102      	movs	r1, #2
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7fe f8c1 	bl	800a348 <unlock_fs>
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	e0e7      	b.n	800c39a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1d0:	d109      	bne.n	800c1e6 <f_read+0x120>
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	755a      	strb	r2, [r3, #21]
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	2101      	movs	r1, #1
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fe f8b3 	bl	800a348 <unlock_fs>
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e0d9      	b.n	800c39a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1ea:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c1ec:	697a      	ldr	r2, [r7, #20]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	69db      	ldr	r3, [r3, #28]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	f7fe fb0f 	bl	800a818 <clust2sect>
 800c1fa:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d109      	bne.n	800c216 <f_read+0x150>
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2202      	movs	r2, #2
 800c206:	755a      	strb	r2, [r3, #21]
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	2102      	movs	r1, #2
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7fe f89b 	bl	800a348 <unlock_fs>
 800c212:	2302      	movs	r3, #2
 800c214:	e0c1      	b.n	800c39a <f_read+0x2d4>
			sect += csect;
 800c216:	69ba      	ldr	r2, [r7, #24]
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	4413      	add	r3, r2
 800c21c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	0adb      	lsrs	r3, r3, #11
 800c222:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c226:	2b00      	cmp	r3, #0
 800c228:	d03e      	beq.n	800c2a8 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c22a:	69fa      	ldr	r2, [r7, #28]
 800c22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22e:	4413      	add	r3, r2
 800c230:	697a      	ldr	r2, [r7, #20]
 800c232:	8952      	ldrh	r2, [r2, #10]
 800c234:	4293      	cmp	r3, r2
 800c236:	d905      	bls.n	800c244 <f_read+0x17e>
					cc = fs->csize - csect;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	895b      	ldrh	r3, [r3, #10]
 800c23c:	461a      	mov	r2, r3
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	1ad3      	subs	r3, r2, r3
 800c242:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	7858      	ldrb	r0, [r3, #1]
 800c248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24a:	69ba      	ldr	r2, [r7, #24]
 800c24c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c24e:	f7fd ff05 	bl	800a05c <disk_read>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d009      	beq.n	800c26c <f_read+0x1a6>
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2201      	movs	r2, #1
 800c25c:	755a      	strb	r2, [r3, #21]
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	2101      	movs	r1, #1
 800c262:	4618      	mov	r0, r3
 800c264:	f7fe f870 	bl	800a348 <unlock_fs>
 800c268:	2301      	movs	r3, #1
 800c26a:	e096      	b.n	800c39a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	7d1b      	ldrb	r3, [r3, #20]
 800c270:	b25b      	sxtb	r3, r3
 800c272:	2b00      	cmp	r3, #0
 800c274:	da14      	bge.n	800c2a0 <f_read+0x1da>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6a1a      	ldr	r2, [r3, #32]
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c280:	429a      	cmp	r2, r3
 800c282:	d90d      	bls.n	800c2a0 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6a1a      	ldr	r2, [r3, #32]
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	02db      	lsls	r3, r3, #11
 800c28e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c290:	18d0      	adds	r0, r2, r3
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	3330      	adds	r3, #48	; 0x30
 800c296:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c29a:	4619      	mov	r1, r3
 800c29c:	f7fd ffc0 	bl	800a220 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a2:	02db      	lsls	r3, r3, #11
 800c2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c2a6:	e05a      	b.n	800c35e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6a1b      	ldr	r3, [r3, #32]
 800c2ac:	69ba      	ldr	r2, [r7, #24]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d038      	beq.n	800c324 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	7d1b      	ldrb	r3, [r3, #20]
 800c2b6:	b25b      	sxtb	r3, r3
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	da1d      	bge.n	800c2f8 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	7858      	ldrb	r0, [r3, #1]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6a1a      	ldr	r2, [r3, #32]
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	f7fd fee6 	bl	800a09c <disk_write>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d009      	beq.n	800c2ea <f_read+0x224>
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	755a      	strb	r2, [r3, #21]
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	2101      	movs	r1, #1
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fe f831 	bl	800a348 <unlock_fs>
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e057      	b.n	800c39a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	7d1b      	ldrb	r3, [r3, #20]
 800c2ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2f2:	b2da      	uxtb	r2, r3
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	7858      	ldrb	r0, [r3, #1]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c302:	2301      	movs	r3, #1
 800c304:	69ba      	ldr	r2, [r7, #24]
 800c306:	f7fd fea9 	bl	800a05c <disk_read>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d009      	beq.n	800c324 <f_read+0x25e>
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2201      	movs	r2, #1
 800c314:	755a      	strb	r2, [r3, #21]
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	2101      	movs	r1, #1
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fe f814 	bl	800a348 <unlock_fs>
 800c320:	2301      	movs	r3, #1
 800c322:	e03a      	b.n	800c39a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	69ba      	ldr	r2, [r7, #24]
 800c328:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	699b      	ldr	r3, [r3, #24]
 800c32e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c332:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800c336:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d901      	bls.n	800c344 <f_read+0x27e>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	699b      	ldr	r3, [r3, #24]
 800c34e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c352:	4413      	add	r3, r2
 800c354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c356:	4619      	mov	r1, r3
 800c358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c35a:	f7fd ff61 	bl	800a220 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c35e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c362:	4413      	add	r3, r2
 800c364:	627b      	str	r3, [r7, #36]	; 0x24
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	699a      	ldr	r2, [r3, #24]
 800c36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36c:	441a      	add	r2, r3
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	619a      	str	r2, [r3, #24]
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c378:	441a      	add	r2, r3
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	601a      	str	r2, [r3, #0]
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c382:	1ad3      	subs	r3, r2, r3
 800c384:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f47f aee3 	bne.w	800c154 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	2100      	movs	r1, #0
 800c392:	4618      	mov	r0, r3
 800c394:	f7fd ffd8 	bl	800a348 <unlock_fs>
 800c398:	2300      	movs	r3, #0
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3738      	adds	r7, #56	; 0x38
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c3a2:	b580      	push	{r7, lr}
 800c3a4:	b08c      	sub	sp, #48	; 0x30
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	60f8      	str	r0, [r7, #12]
 800c3aa:	60b9      	str	r1, [r7, #8]
 800c3ac:	607a      	str	r2, [r7, #4]
 800c3ae:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f107 0210 	add.w	r2, r7, #16
 800c3c0:	4611      	mov	r1, r2
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7ff fc0e 	bl	800bbe4 <validate>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c3ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d107      	bne.n	800c3e6 <f_write+0x44>
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	7d5b      	ldrb	r3, [r3, #21]
 800c3da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c3de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d009      	beq.n	800c3fa <f_write+0x58>
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7fd ffaa 	bl	800a348 <unlock_fs>
 800c3f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3f8:	e173      	b.n	800c6e2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	7d1b      	ldrb	r3, [r3, #20]
 800c3fe:	f003 0302 	and.w	r3, r3, #2
 800c402:	2b00      	cmp	r3, #0
 800c404:	d106      	bne.n	800c414 <f_write+0x72>
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	2107      	movs	r1, #7
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7fd ff9c 	bl	800a348 <unlock_fs>
 800c410:	2307      	movs	r3, #7
 800c412:	e166      	b.n	800c6e2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	699a      	ldr	r2, [r3, #24]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	441a      	add	r2, r3
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	699b      	ldr	r3, [r3, #24]
 800c420:	429a      	cmp	r2, r3
 800c422:	f080 814b 	bcs.w	800c6bc <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	699b      	ldr	r3, [r3, #24]
 800c42a:	43db      	mvns	r3, r3
 800c42c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c42e:	e145      	b.n	800c6bc <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	699b      	ldr	r3, [r3, #24]
 800c434:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f040 8101 	bne.w	800c640 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	699b      	ldr	r3, [r3, #24]
 800c442:	0adb      	lsrs	r3, r3, #11
 800c444:	693a      	ldr	r2, [r7, #16]
 800c446:	8952      	ldrh	r2, [r2, #10]
 800c448:	3a01      	subs	r2, #1
 800c44a:	4013      	ands	r3, r2
 800c44c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d14d      	bne.n	800c4f0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	699b      	ldr	r3, [r3, #24]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10c      	bne.n	800c476 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	689b      	ldr	r3, [r3, #8]
 800c460:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c464:	2b00      	cmp	r3, #0
 800c466:	d11a      	bne.n	800c49e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2100      	movs	r1, #0
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fe fbf0 	bl	800ac52 <create_chain>
 800c472:	62b8      	str	r0, [r7, #40]	; 0x28
 800c474:	e013      	b.n	800c49e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d007      	beq.n	800c48e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	699b      	ldr	r3, [r3, #24]
 800c482:	4619      	mov	r1, r3
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f7fe fc7c 	bl	800ad82 <clmt_clust>
 800c48a:	62b8      	str	r0, [r7, #40]	; 0x28
 800c48c:	e007      	b.n	800c49e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c48e:	68fa      	ldr	r2, [r7, #12]
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	69db      	ldr	r3, [r3, #28]
 800c494:	4619      	mov	r1, r3
 800c496:	4610      	mov	r0, r2
 800c498:	f7fe fbdb 	bl	800ac52 <create_chain>
 800c49c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f000 8110 	beq.w	800c6c6 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d109      	bne.n	800c4c0 <f_write+0x11e>
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2202      	movs	r2, #2
 800c4b0:	755a      	strb	r2, [r3, #21]
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	2102      	movs	r1, #2
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7fd ff46 	bl	800a348 <unlock_fs>
 800c4bc:	2302      	movs	r3, #2
 800c4be:	e110      	b.n	800c6e2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4c6:	d109      	bne.n	800c4dc <f_write+0x13a>
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	755a      	strb	r2, [r3, #21]
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	2101      	movs	r1, #1
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7fd ff38 	bl	800a348 <unlock_fs>
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e102      	b.n	800c6e2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4e0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d102      	bne.n	800c4f0 <f_write+0x14e>
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4ee:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	7d1b      	ldrb	r3, [r3, #20]
 800c4f4:	b25b      	sxtb	r3, r3
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	da1d      	bge.n	800c536 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	7858      	ldrb	r0, [r3, #1]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	6a1a      	ldr	r2, [r3, #32]
 800c508:	2301      	movs	r3, #1
 800c50a:	f7fd fdc7 	bl	800a09c <disk_write>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d009      	beq.n	800c528 <f_write+0x186>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2201      	movs	r2, #1
 800c518:	755a      	strb	r2, [r3, #21]
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	2101      	movs	r1, #1
 800c51e:	4618      	mov	r0, r3
 800c520:	f7fd ff12 	bl	800a348 <unlock_fs>
 800c524:	2301      	movs	r3, #1
 800c526:	e0dc      	b.n	800c6e2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	7d1b      	ldrb	r3, [r3, #20]
 800c52c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c530:	b2da      	uxtb	r2, r3
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c536:	693a      	ldr	r2, [r7, #16]
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	69db      	ldr	r3, [r3, #28]
 800c53c:	4619      	mov	r1, r3
 800c53e:	4610      	mov	r0, r2
 800c540:	f7fe f96a 	bl	800a818 <clust2sect>
 800c544:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d109      	bne.n	800c560 <f_write+0x1be>
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2202      	movs	r2, #2
 800c550:	755a      	strb	r2, [r3, #21]
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	2102      	movs	r1, #2
 800c556:	4618      	mov	r0, r3
 800c558:	f7fd fef6 	bl	800a348 <unlock_fs>
 800c55c:	2302      	movs	r3, #2
 800c55e:	e0c0      	b.n	800c6e2 <f_write+0x340>
			sect += csect;
 800c560:	697a      	ldr	r2, [r7, #20]
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	4413      	add	r3, r2
 800c566:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	0adb      	lsrs	r3, r3, #11
 800c56c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c56e:	6a3b      	ldr	r3, [r7, #32]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d041      	beq.n	800c5f8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c574:	69ba      	ldr	r2, [r7, #24]
 800c576:	6a3b      	ldr	r3, [r7, #32]
 800c578:	4413      	add	r3, r2
 800c57a:	693a      	ldr	r2, [r7, #16]
 800c57c:	8952      	ldrh	r2, [r2, #10]
 800c57e:	4293      	cmp	r3, r2
 800c580:	d905      	bls.n	800c58e <f_write+0x1ec>
					cc = fs->csize - csect;
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	895b      	ldrh	r3, [r3, #10]
 800c586:	461a      	mov	r2, r3
 800c588:	69bb      	ldr	r3, [r7, #24]
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	7858      	ldrb	r0, [r3, #1]
 800c592:	6a3b      	ldr	r3, [r7, #32]
 800c594:	697a      	ldr	r2, [r7, #20]
 800c596:	69f9      	ldr	r1, [r7, #28]
 800c598:	f7fd fd80 	bl	800a09c <disk_write>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d009      	beq.n	800c5b6 <f_write+0x214>
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	755a      	strb	r2, [r3, #21]
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	2101      	movs	r1, #1
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fd fecb 	bl	800a348 <unlock_fs>
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e095      	b.n	800c6e2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	6a1a      	ldr	r2, [r3, #32]
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	1ad3      	subs	r3, r2, r3
 800c5be:	6a3a      	ldr	r2, [r7, #32]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d915      	bls.n	800c5f0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6a1a      	ldr	r2, [r3, #32]
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	1ad3      	subs	r3, r2, r3
 800c5d2:	02db      	lsls	r3, r3, #11
 800c5d4:	69fa      	ldr	r2, [r7, #28]
 800c5d6:	4413      	add	r3, r2
 800c5d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5dc:	4619      	mov	r1, r3
 800c5de:	f7fd fe1f 	bl	800a220 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	7d1b      	ldrb	r3, [r3, #20]
 800c5e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5ea:	b2da      	uxtb	r2, r3
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c5f0:	6a3b      	ldr	r3, [r7, #32]
 800c5f2:	02db      	lsls	r3, r3, #11
 800c5f4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c5f6:	e044      	b.n	800c682 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6a1b      	ldr	r3, [r3, #32]
 800c5fc:	697a      	ldr	r2, [r7, #20]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d01b      	beq.n	800c63a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	699a      	ldr	r2, [r3, #24]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d215      	bcs.n	800c63a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	7858      	ldrb	r0, [r3, #1]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c618:	2301      	movs	r3, #1
 800c61a:	697a      	ldr	r2, [r7, #20]
 800c61c:	f7fd fd1e 	bl	800a05c <disk_read>
 800c620:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c622:	2b00      	cmp	r3, #0
 800c624:	d009      	beq.n	800c63a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2201      	movs	r2, #1
 800c62a:	755a      	strb	r2, [r3, #21]
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	2101      	movs	r1, #1
 800c630:	4618      	mov	r0, r3
 800c632:	f7fd fe89 	bl	800a348 <unlock_fs>
 800c636:	2301      	movs	r3, #1
 800c638:	e053      	b.n	800c6e2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	697a      	ldr	r2, [r7, #20]
 800c63e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	699b      	ldr	r3, [r3, #24]
 800c644:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c648:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800c64c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c64e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	429a      	cmp	r2, r3
 800c654:	d901      	bls.n	800c65a <f_write+0x2b8>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	699b      	ldr	r3, [r3, #24]
 800c664:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c668:	4413      	add	r3, r2
 800c66a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c66c:	69f9      	ldr	r1, [r7, #28]
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fd fdd6 	bl	800a220 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	7d1b      	ldrb	r3, [r3, #20]
 800c678:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c67c:	b2da      	uxtb	r2, r3
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c682:	69fa      	ldr	r2, [r7, #28]
 800c684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c686:	4413      	add	r3, r2
 800c688:	61fb      	str	r3, [r7, #28]
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	699a      	ldr	r2, [r3, #24]
 800c68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c690:	441a      	add	r2, r3
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	619a      	str	r2, [r3, #24]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	68da      	ldr	r2, [r3, #12]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	699b      	ldr	r3, [r3, #24]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	bf38      	it	cc
 800c6a2:	461a      	movcc	r2, r3
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	60da      	str	r2, [r3, #12]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ae:	441a      	add	r2, r3
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	601a      	str	r2, [r3, #0]
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b8:	1ad3      	subs	r3, r2, r3
 800c6ba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f47f aeb6 	bne.w	800c430 <f_write+0x8e>
 800c6c4:	e000      	b.n	800c6c8 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c6c6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	7d1b      	ldrb	r3, [r3, #20]
 800c6cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	2100      	movs	r1, #0
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7fd fe34 	bl	800a348 <unlock_fs>
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3730      	adds	r7, #48	; 0x30
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b086      	sub	sp, #24
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f107 0208 	add.w	r2, r7, #8
 800c6f8:	4611      	mov	r1, r2
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7ff fa72 	bl	800bbe4 <validate>
 800c700:	4603      	mov	r3, r0
 800c702:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c704:	7dfb      	ldrb	r3, [r7, #23]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d16d      	bne.n	800c7e6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	7d1b      	ldrb	r3, [r3, #20]
 800c70e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c712:	2b00      	cmp	r3, #0
 800c714:	d067      	beq.n	800c7e6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	7d1b      	ldrb	r3, [r3, #20]
 800c71a:	b25b      	sxtb	r3, r3
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	da1a      	bge.n	800c756 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	7858      	ldrb	r0, [r3, #1]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6a1a      	ldr	r2, [r3, #32]
 800c72e:	2301      	movs	r3, #1
 800c730:	f7fd fcb4 	bl	800a09c <disk_write>
 800c734:	4603      	mov	r3, r0
 800c736:	2b00      	cmp	r3, #0
 800c738:	d006      	beq.n	800c748 <f_sync+0x5e>
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	2101      	movs	r1, #1
 800c73e:	4618      	mov	r0, r3
 800c740:	f7fd fe02 	bl	800a348 <unlock_fs>
 800c744:	2301      	movs	r3, #1
 800c746:	e055      	b.n	800c7f4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	7d1b      	ldrb	r3, [r3, #20]
 800c74c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c750:	b2da      	uxtb	r2, r3
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c756:	f7fd fb45 	bl	8009de4 <get_fattime>
 800c75a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c762:	4619      	mov	r1, r3
 800c764:	4610      	mov	r0, r2
 800c766:	f7fd ffbb 	bl	800a6e0 <move_window>
 800c76a:	4603      	mov	r3, r0
 800c76c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c76e:	7dfb      	ldrb	r3, [r7, #23]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d138      	bne.n	800c7e6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c778:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	330b      	adds	r3, #11
 800c77e:	781a      	ldrb	r2, [r3, #0]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	330b      	adds	r3, #11
 800c784:	f042 0220 	orr.w	r2, r2, #32
 800c788:	b2d2      	uxtb	r2, r2
 800c78a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6818      	ldr	r0, [r3, #0]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	461a      	mov	r2, r3
 800c796:	68f9      	ldr	r1, [r7, #12]
 800c798:	f7fe fccd 	bl	800b136 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f103 021c 	add.w	r2, r3, #28
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	f7fd fd0d 	bl	800a1c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	3316      	adds	r3, #22
 800c7b2:	6939      	ldr	r1, [r7, #16]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7fd fd07 	bl	800a1c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	3312      	adds	r3, #18
 800c7be:	2100      	movs	r1, #0
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7fd fce6 	bl	800a192 <st_word>
					fs->wflag = 1;
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7fd ffb4 	bl	800a73c <sync_fs>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	7d1b      	ldrb	r3, [r3, #20]
 800c7dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7e0:	b2da      	uxtb	r2, r3
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	7dfa      	ldrb	r2, [r7, #23]
 800c7ea:	4611      	mov	r1, r2
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fd fdab 	bl	800a348 <unlock_fs>
 800c7f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3718      	adds	r7, #24
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f7ff ff70 	bl	800c6ea <f_sync>
 800c80a:	4603      	mov	r3, r0
 800c80c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c80e:	7bfb      	ldrb	r3, [r7, #15]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d11d      	bne.n	800c850 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f107 0208 	add.w	r2, r7, #8
 800c81a:	4611      	mov	r1, r2
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7ff f9e1 	bl	800bbe4 <validate>
 800c822:	4603      	mov	r3, r0
 800c824:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c826:	7bfb      	ldrb	r3, [r7, #15]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d111      	bne.n	800c850 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	691b      	ldr	r3, [r3, #16]
 800c830:	4618      	mov	r0, r3
 800c832:	f7fd feb1 	bl	800a598 <dec_lock>
 800c836:	4603      	mov	r3, r0
 800c838:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c83a:	7bfb      	ldrb	r3, [r7, #15]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d102      	bne.n	800c846 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	2100      	movs	r1, #0
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7fd fd7c 	bl	800a348 <unlock_fs>
#endif
		}
	}
	return res;
 800c850:	7bfb      	ldrb	r3, [r7, #15]
}
 800c852:	4618      	mov	r0, r3
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b086      	sub	sp, #24
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
 800c862:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d101      	bne.n	800c86e <f_opendir+0x14>
 800c86a:	2309      	movs	r3, #9
 800c86c:	e06a      	b.n	800c944 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c872:	f107 010c 	add.w	r1, r7, #12
 800c876:	463b      	mov	r3, r7
 800c878:	2200      	movs	r2, #0
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fe ff5e 	bl	800b73c <find_volume>
 800c880:	4603      	mov	r3, r0
 800c882:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c884:	7dfb      	ldrb	r3, [r7, #23]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d14f      	bne.n	800c92a <f_opendir+0xd0>
		obj->fs = fs;
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	4619      	mov	r1, r3
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f7fe fe45 	bl	800b524 <follow_path>
 800c89a:	4603      	mov	r3, r0
 800c89c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c89e:	7dfb      	ldrb	r3, [r7, #23]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d13d      	bne.n	800c920 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c8aa:	b25b      	sxtb	r3, r3
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	db12      	blt.n	800c8d6 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	799b      	ldrb	r3, [r3, #6]
 800c8b4:	f003 0310 	and.w	r3, r3, #16
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d00a      	beq.n	800c8d2 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6a1b      	ldr	r3, [r3, #32]
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	f7fe fc17 	bl	800b0f8 <ld_clust>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	609a      	str	r2, [r3, #8]
 800c8d0:	e001      	b.n	800c8d6 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c8d2:	2305      	movs	r3, #5
 800c8d4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c8d6:	7dfb      	ldrb	r3, [r7, #23]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d121      	bne.n	800c920 <f_opendir+0xc6>
				obj->id = fs->id;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	88da      	ldrh	r2, [r3, #6]
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f7fe fa7f 	bl	800adea <dir_sdi>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c8f0:	7dfb      	ldrb	r3, [r7, #23]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d114      	bne.n	800c920 <f_opendir+0xc6>
					if (obj->sclust) {
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00d      	beq.n	800c91a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c8fe:	2100      	movs	r1, #0
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f7fd fdbb 	bl	800a47c <inc_lock>
 800c906:	4602      	mov	r2, r0
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	691b      	ldr	r3, [r3, #16]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d105      	bne.n	800c920 <f_opendir+0xc6>
 800c914:	2312      	movs	r3, #18
 800c916:	75fb      	strb	r3, [r7, #23]
 800c918:	e002      	b.n	800c920 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	2200      	movs	r2, #0
 800c91e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c920:	7dfb      	ldrb	r3, [r7, #23]
 800c922:	2b04      	cmp	r3, #4
 800c924:	d101      	bne.n	800c92a <f_opendir+0xd0>
 800c926:	2305      	movs	r3, #5
 800c928:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c92a:	7dfb      	ldrb	r3, [r7, #23]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d002      	beq.n	800c936 <f_opendir+0xdc>
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	2200      	movs	r2, #0
 800c934:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	7dfa      	ldrb	r2, [r7, #23]
 800c93a:	4611      	mov	r1, r2
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7fd fd03 	bl	800a348 <unlock_fs>
 800c942:	7dfb      	ldrb	r3, [r7, #23]
}
 800c944:	4618      	mov	r0, r3
 800c946:	3718      	adds	r7, #24
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f107 0208 	add.w	r2, r7, #8
 800c95c:	4611      	mov	r1, r2
 800c95e:	4618      	mov	r0, r3
 800c960:	f7ff f940 	bl	800bbe4 <validate>
 800c964:	4603      	mov	r3, r0
 800c966:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c968:	7bfb      	ldrb	r3, [r7, #15]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d126      	bne.n	800c9bc <f_readdir+0x70>
		if (!fno) {
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d106      	bne.n	800c982 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c974:	2100      	movs	r1, #0
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7fe fa37 	bl	800adea <dir_sdi>
 800c97c:	4603      	mov	r3, r0
 800c97e:	73fb      	strb	r3, [r7, #15]
 800c980:	e01c      	b.n	800c9bc <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800c982:	2100      	movs	r1, #0
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f7fe fbf6 	bl	800b176 <dir_read>
 800c98a:	4603      	mov	r3, r0
 800c98c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800c98e:	7bfb      	ldrb	r3, [r7, #15]
 800c990:	2b04      	cmp	r3, #4
 800c992:	d101      	bne.n	800c998 <f_readdir+0x4c>
 800c994:	2300      	movs	r3, #0
 800c996:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800c998:	7bfb      	ldrb	r3, [r7, #15]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d10e      	bne.n	800c9bc <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c99e:	6839      	ldr	r1, [r7, #0]
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f7fe fccc 	bl	800b33e <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c9a6:	2100      	movs	r1, #0
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7fe fa99 	bl	800aee0 <dir_next>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800c9b2:	7bfb      	ldrb	r3, [r7, #15]
 800c9b4:	2b04      	cmp	r3, #4
 800c9b6:	d101      	bne.n	800c9bc <f_readdir+0x70>
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	7bfa      	ldrb	r2, [r7, #15]
 800c9c0:	4611      	mov	r1, r2
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fd fcc0 	bl	800a348 <unlock_fs>
 800c9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3710      	adds	r7, #16
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
	...

0800c9d4 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800c9d4:	b590      	push	{r4, r7, lr}
 800c9d6:	b09d      	sub	sp, #116	; 0x74
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	607a      	str	r2, [r7, #4]
 800c9de:	603b      	str	r3, [r7, #0]
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800c9e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9ec:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800c9ee:	f107 030c 	add.w	r3, r7, #12
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7fe fe07 	bl	800b606 <get_ldnumber>
 800c9f8:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c9fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	da02      	bge.n	800ca06 <f_mkfs+0x32>
 800ca00:	230b      	movs	r3, #11
 800ca02:	f000 bc0d 	b.w	800d220 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800ca06:	4a94      	ldr	r2, [pc, #592]	; (800cc58 <f_mkfs+0x284>)
 800ca08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d005      	beq.n	800ca1e <f_mkfs+0x4a>
 800ca12:	4a91      	ldr	r2, [pc, #580]	; (800cc58 <f_mkfs+0x284>)
 800ca14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800ca1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca20:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800ca24:	2300      	movs	r3, #0
 800ca26:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800ca2a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fd faee 	bl	800a010 <disk_initialize>
 800ca34:	4603      	mov	r3, r0
 800ca36:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800ca3a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800ca3e:	f003 0301 	and.w	r3, r3, #1
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d001      	beq.n	800ca4a <f_mkfs+0x76>
 800ca46:	2303      	movs	r3, #3
 800ca48:	e3ea      	b.n	800d220 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800ca4a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800ca4e:	f003 0304 	and.w	r3, r3, #4
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d001      	beq.n	800ca5a <f_mkfs+0x86>
 800ca56:	230a      	movs	r3, #10
 800ca58:	e3e2      	b.n	800d220 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800ca5a:	f107 0214 	add.w	r2, r7, #20
 800ca5e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ca62:	2103      	movs	r1, #3
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7fd fb39 	bl	800a0dc <disk_ioctl>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d10c      	bne.n	800ca8a <f_mkfs+0xb6>
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d009      	beq.n	800ca8a <f_mkfs+0xb6>
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca7c:	d805      	bhi.n	800ca8a <f_mkfs+0xb6>
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	1e5a      	subs	r2, r3, #1
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	4013      	ands	r3, r2
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d001      	beq.n	800ca8e <f_mkfs+0xba>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800ca8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca92:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d003      	beq.n	800caa2 <f_mkfs+0xce>
 800ca9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d309      	bcc.n	800cab6 <f_mkfs+0xe2>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800caa8:	d805      	bhi.n	800cab6 <f_mkfs+0xe2>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	1e5a      	subs	r2, r3, #1
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4013      	ands	r3, r2
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d001      	beq.n	800caba <f_mkfs+0xe6>
 800cab6:	2313      	movs	r3, #19
 800cab8:	e3b2      	b.n	800d220 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800caba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	fbb2 f3f3 	udiv	r3, r2, r3
 800cac2:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800cac8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800caca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cace:	fbb2 f3f3 	udiv	r3, r2, r3
 800cad2:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800cad4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad8:	fb02 f303 	mul.w	r3, r2, r3
 800cadc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800cade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d101      	bne.n	800cae8 <f_mkfs+0x114>
 800cae4:	230e      	movs	r3, #14
 800cae6:	e39b      	b.n	800d220 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800cae8:	f107 0210 	add.w	r2, r7, #16
 800caec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800caf0:	2101      	movs	r1, #1
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fd faf2 	bl	800a0dc <disk_ioctl>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <f_mkfs+0x12e>
 800cafe:	2301      	movs	r3, #1
 800cb00:	e38e      	b.n	800d220 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800cb02:	7afb      	ldrb	r3, [r7, #11]
 800cb04:	f003 0308 	and.w	r3, r3, #8
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d001      	beq.n	800cb10 <f_mkfs+0x13c>
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	e000      	b.n	800cb12 <f_mkfs+0x13e>
 800cb10:	233f      	movs	r3, #63	; 0x3f
 800cb12:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d901      	bls.n	800cb20 <f_mkfs+0x14c>
 800cb1c:	230e      	movs	r3, #14
 800cb1e:	e37f      	b.n	800d220 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800cb20:	693a      	ldr	r2, [r7, #16]
 800cb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb24:	1ad3      	subs	r3, r2, r3
 800cb26:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	2b7f      	cmp	r3, #127	; 0x7f
 800cb2c:	d801      	bhi.n	800cb32 <f_mkfs+0x15e>
 800cb2e:	230e      	movs	r3, #14
 800cb30:	e376      	b.n	800d220 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2b80      	cmp	r3, #128	; 0x80
 800cb36:	d901      	bls.n	800cb3c <f_mkfs+0x168>
 800cb38:	2313      	movs	r3, #19
 800cb3a:	e371      	b.n	800d220 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800cb3c:	7afb      	ldrb	r3, [r7, #11]
 800cb3e:	f003 0302 	and.w	r3, r3, #2
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00d      	beq.n	800cb62 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800cb46:	7afb      	ldrb	r3, [r7, #11]
 800cb48:	f003 0307 	and.w	r3, r3, #7
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	d004      	beq.n	800cb5a <f_mkfs+0x186>
 800cb50:	7afb      	ldrb	r3, [r7, #11]
 800cb52:	f003 0301 	and.w	r3, r3, #1
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d103      	bne.n	800cb62 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cb60:	e009      	b.n	800cb76 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800cb62:	7afb      	ldrb	r3, [r7, #11]
 800cb64:	f003 0301 	and.w	r3, r3, #1
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d101      	bne.n	800cb70 <f_mkfs+0x19c>
 800cb6c:	2313      	movs	r3, #19
 800cb6e:	e357      	b.n	800d220 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800cb70:	2302      	movs	r3, #2
 800cb72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800cb7a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb7e:	2b03      	cmp	r3, #3
 800cb80:	d13c      	bne.n	800cbfc <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800cb82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d11b      	bne.n	800cbc0 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	0c5b      	lsrs	r3, r3, #17
 800cb8c:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800cb8e:	2300      	movs	r3, #0
 800cb90:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb92:	2301      	movs	r3, #1
 800cb94:	653b      	str	r3, [r7, #80]	; 0x50
 800cb96:	e005      	b.n	800cba4 <f_mkfs+0x1d0>
 800cb98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cba0:	005b      	lsls	r3, r3, #1
 800cba2:	653b      	str	r3, [r7, #80]	; 0x50
 800cba4:	4a2d      	ldr	r2, [pc, #180]	; (800cc5c <f_mkfs+0x288>)
 800cba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d007      	beq.n	800cbc0 <f_mkfs+0x1ec>
 800cbb0:	4a2a      	ldr	r2, [pc, #168]	; (800cc5c <f_mkfs+0x288>)
 800cbb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbb8:	461a      	mov	r2, r3
 800cbba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d2eb      	bcs.n	800cb98 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800cbc0:	693a      	ldr	r2, [r7, #16]
 800cbc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbc8:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800cbca:	6a3b      	ldr	r3, [r7, #32]
 800cbcc:	3302      	adds	r3, #2
 800cbce:	009a      	lsls	r2, r3, #2
 800cbd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cbd2:	4413      	add	r3, r2
 800cbd4:	1e5a      	subs	r2, r3, #1
 800cbd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cbd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbdc:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800cbde:	2320      	movs	r3, #32
 800cbe0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800cbe6:	6a3b      	ldr	r3, [r7, #32]
 800cbe8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d903      	bls.n	800cbf8 <f_mkfs+0x224>
 800cbf0:	6a3b      	ldr	r3, [r7, #32]
 800cbf2:	4a1b      	ldr	r2, [pc, #108]	; (800cc60 <f_mkfs+0x28c>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d952      	bls.n	800cc9e <f_mkfs+0x2ca>
 800cbf8:	230e      	movs	r3, #14
 800cbfa:	e311      	b.n	800d220 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800cbfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d11b      	bne.n	800cc3a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	0b1b      	lsrs	r3, r3, #12
 800cc06:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800cc08:	2300      	movs	r3, #0
 800cc0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	653b      	str	r3, [r7, #80]	; 0x50
 800cc10:	e005      	b.n	800cc1e <f_mkfs+0x24a>
 800cc12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc14:	3301      	adds	r3, #1
 800cc16:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc1a:	005b      	lsls	r3, r3, #1
 800cc1c:	653b      	str	r3, [r7, #80]	; 0x50
 800cc1e:	4a11      	ldr	r2, [pc, #68]	; (800cc64 <f_mkfs+0x290>)
 800cc20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d007      	beq.n	800cc3a <f_mkfs+0x266>
 800cc2a:	4a0e      	ldr	r2, [pc, #56]	; (800cc64 <f_mkfs+0x290>)
 800cc2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc32:	461a      	mov	r2, r3
 800cc34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d2eb      	bcs.n	800cc12 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800cc3a:	693a      	ldr	r2, [r7, #16]
 800cc3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc42:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800cc44:	6a3b      	ldr	r3, [r7, #32]
 800cc46:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d90c      	bls.n	800cc68 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800cc4e:	6a3b      	ldr	r3, [r7, #32]
 800cc50:	3302      	adds	r3, #2
 800cc52:	005b      	lsls	r3, r3, #1
 800cc54:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc56:	e012      	b.n	800cc7e <f_mkfs+0x2aa>
 800cc58:	20003c8c 	.word	0x20003c8c
 800cc5c:	08014c90 	.word	0x08014c90
 800cc60:	0ffffff5 	.word	0x0ffffff5
 800cc64:	08014ca0 	.word	0x08014ca0
				} else {
					fmt = FS_FAT12;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800cc6e:	6a3a      	ldr	r2, [r7, #32]
 800cc70:	4613      	mov	r3, r2
 800cc72:	005b      	lsls	r3, r3, #1
 800cc74:	4413      	add	r3, r2
 800cc76:	3301      	adds	r3, #1
 800cc78:	085b      	lsrs	r3, r3, #1
 800cc7a:	3303      	adds	r3, #3
 800cc7c:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800cc7e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cc80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc82:	4413      	add	r3, r2
 800cc84:	1e5a      	subs	r2, r3, #1
 800cc86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc88:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc8c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800cc8e:	2301      	movs	r3, #1
 800cc90:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800cc92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc94:	015a      	lsls	r2, r3, #5
 800cc96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc98:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc9c:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800cc9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cca2:	4413      	add	r3, r2
 800cca4:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800cca6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cca8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ccaa:	fb03 f202 	mul.w	r2, r3, r2
 800ccae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccb0:	4413      	add	r3, r2
 800ccb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ccb4:	4413      	add	r3, r2
 800ccb6:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800ccb8:	697a      	ldr	r2, [r7, #20]
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	1e5a      	subs	r2, r3, #1
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	425b      	negs	r3, r3
 800ccc4:	401a      	ands	r2, r3
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800cccc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ccd0:	2b03      	cmp	r3, #3
 800ccd2:	d108      	bne.n	800cce6 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800ccd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ccd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccd8:	4413      	add	r3, r2
 800ccda:	657b      	str	r3, [r7, #84]	; 0x54
 800ccdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ccde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cce0:	4413      	add	r3, r2
 800cce2:	65bb      	str	r3, [r7, #88]	; 0x58
 800cce4:	e006      	b.n	800ccf4 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800cce6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccea:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ccf0:	4413      	add	r3, r2
 800ccf2:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800ccf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccf6:	011a      	lsls	r2, r3, #4
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	441a      	add	r2, r3
 800ccfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfe:	1ad2      	subs	r2, r2, r3
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d901      	bls.n	800cd0a <f_mkfs+0x336>
 800cd06:	230e      	movs	r3, #14
 800cd08:	e28a      	b.n	800d220 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800cd0a:	693a      	ldr	r2, [r7, #16]
 800cd0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd0e:	1ad2      	subs	r2, r2, r3
 800cd10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd14:	fb01 f303 	mul.w	r3, r1, r3
 800cd18:	1ad2      	subs	r2, r2, r3
 800cd1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd1c:	1ad2      	subs	r2, r2, r3
 800cd1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd20:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd24:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800cd26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cd2a:	2b03      	cmp	r3, #3
 800cd2c:	d10f      	bne.n	800cd4e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800cd2e:	6a3b      	ldr	r3, [r7, #32]
 800cd30:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d80a      	bhi.n	800cd4e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d105      	bne.n	800cd4a <f_mkfs+0x376>
 800cd3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd40:	085b      	lsrs	r3, r3, #1
 800cd42:	607b      	str	r3, [r7, #4]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d144      	bne.n	800cdd4 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800cd4a:	230e      	movs	r3, #14
 800cd4c:	e268      	b.n	800d220 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800cd4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d133      	bne.n	800cdbe <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800cd56:	6a3b      	ldr	r3, [r7, #32]
 800cd58:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d91e      	bls.n	800cd9e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d107      	bne.n	800cd76 <f_mkfs+0x3a2>
 800cd66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd68:	005b      	lsls	r3, r3, #1
 800cd6a:	2b40      	cmp	r3, #64	; 0x40
 800cd6c:	d803      	bhi.n	800cd76 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800cd6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd70:	005b      	lsls	r3, r3, #1
 800cd72:	607b      	str	r3, [r7, #4]
 800cd74:	e033      	b.n	800cdde <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800cd76:	7afb      	ldrb	r3, [r7, #11]
 800cd78:	f003 0302 	and.w	r3, r3, #2
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d003      	beq.n	800cd88 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800cd80:	2303      	movs	r3, #3
 800cd82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cd86:	e02a      	b.n	800cdde <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d105      	bne.n	800cd9a <f_mkfs+0x3c6>
 800cd8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd90:	005b      	lsls	r3, r3, #1
 800cd92:	607b      	str	r3, [r7, #4]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2b80      	cmp	r3, #128	; 0x80
 800cd98:	d91e      	bls.n	800cdd8 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800cd9a:	230e      	movs	r3, #14
 800cd9c:	e240      	b.n	800d220 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800cd9e:	6a3b      	ldr	r3, [r7, #32]
 800cda0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d80a      	bhi.n	800cdbe <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d105      	bne.n	800cdba <f_mkfs+0x3e6>
 800cdae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdb0:	005b      	lsls	r3, r3, #1
 800cdb2:	607b      	str	r3, [r7, #4]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2b80      	cmp	r3, #128	; 0x80
 800cdb8:	d910      	bls.n	800cddc <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800cdba:	230e      	movs	r3, #14
 800cdbc:	e230      	b.n	800d220 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800cdbe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d10c      	bne.n	800cde0 <f_mkfs+0x40c>
 800cdc6:	6a3b      	ldr	r3, [r7, #32]
 800cdc8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d907      	bls.n	800cde0 <f_mkfs+0x40c>
 800cdd0:	230e      	movs	r3, #14
 800cdd2:	e225      	b.n	800d220 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800cdd4:	bf00      	nop
 800cdd6:	e6ce      	b.n	800cb76 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800cdd8:	bf00      	nop
 800cdda:	e6cc      	b.n	800cb76 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800cddc:	bf00      	nop
			pau = au;
 800cdde:	e6ca      	b.n	800cb76 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800cde0:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800cde2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cde4:	461a      	mov	r2, r3
 800cde6:	2100      	movs	r1, #0
 800cde8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdea:	f7fd fa3a 	bl	800a262 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800cdee:	220b      	movs	r2, #11
 800cdf0:	49b2      	ldr	r1, [pc, #712]	; (800d0bc <f_mkfs+0x6e8>)
 800cdf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdf4:	f7fd fa14 	bl	800a220 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800cdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfa:	330b      	adds	r3, #11
 800cdfc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cdfe:	4611      	mov	r1, r2
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7fd f9c6 	bl	800a192 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800ce06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce08:	330d      	adds	r3, #13
 800ce0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce0c:	b2d2      	uxtb	r2, r2
 800ce0e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800ce10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce12:	330e      	adds	r3, #14
 800ce14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce16:	b292      	uxth	r2, r2
 800ce18:	4611      	mov	r1, r2
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7fd f9b9 	bl	800a192 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800ce20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce22:	3310      	adds	r3, #16
 800ce24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce26:	b2d2      	uxtb	r2, r2
 800ce28:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800ce2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2c:	f103 0211 	add.w	r2, r3, #17
 800ce30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ce34:	2b03      	cmp	r3, #3
 800ce36:	d002      	beq.n	800ce3e <f_mkfs+0x46a>
 800ce38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	e000      	b.n	800ce40 <f_mkfs+0x46c>
 800ce3e:	2300      	movs	r3, #0
 800ce40:	4619      	mov	r1, r3
 800ce42:	4610      	mov	r0, r2
 800ce44:	f7fd f9a5 	bl	800a192 <st_word>
		if (sz_vol < 0x10000) {
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce4e:	d208      	bcs.n	800ce62 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800ce50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce52:	3313      	adds	r3, #19
 800ce54:	693a      	ldr	r2, [r7, #16]
 800ce56:	b292      	uxth	r2, r2
 800ce58:	4611      	mov	r1, r2
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7fd f999 	bl	800a192 <st_word>
 800ce60:	e006      	b.n	800ce70 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800ce62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce64:	3320      	adds	r3, #32
 800ce66:	693a      	ldr	r2, [r7, #16]
 800ce68:	4611      	mov	r1, r2
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fd f9ac 	bl	800a1c8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800ce70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce72:	3315      	adds	r3, #21
 800ce74:	22f8      	movs	r2, #248	; 0xf8
 800ce76:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800ce78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce7a:	3318      	adds	r3, #24
 800ce7c:	213f      	movs	r1, #63	; 0x3f
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7fd f987 	bl	800a192 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800ce84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce86:	331a      	adds	r3, #26
 800ce88:	21ff      	movs	r1, #255	; 0xff
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7fd f981 	bl	800a192 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800ce90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce92:	331c      	adds	r3, #28
 800ce94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fd f996 	bl	800a1c8 <st_dword>
		if (fmt == FS_FAT32) {
 800ce9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cea0:	2b03      	cmp	r3, #3
 800cea2:	d131      	bne.n	800cf08 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800cea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea6:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800ceaa:	f7fc ff9b 	bl	8009de4 <get_fattime>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f7fd f988 	bl	800a1c8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceba:	3324      	adds	r3, #36	; 0x24
 800cebc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fd f982 	bl	800a1c8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800cec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec6:	332c      	adds	r3, #44	; 0x2c
 800cec8:	2102      	movs	r1, #2
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7fd f97c 	bl	800a1c8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800ced0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced2:	3330      	adds	r3, #48	; 0x30
 800ced4:	2101      	movs	r1, #1
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fd f95b 	bl	800a192 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800cedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cede:	3332      	adds	r3, #50	; 0x32
 800cee0:	2106      	movs	r1, #6
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fd f955 	bl	800a192 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800cee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceea:	3340      	adds	r3, #64	; 0x40
 800ceec:	2280      	movs	r2, #128	; 0x80
 800ceee:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800cef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef2:	3342      	adds	r3, #66	; 0x42
 800cef4:	2229      	movs	r2, #41	; 0x29
 800cef6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800cef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefa:	3347      	adds	r3, #71	; 0x47
 800cefc:	2213      	movs	r2, #19
 800cefe:	4970      	ldr	r1, [pc, #448]	; (800d0c0 <f_mkfs+0x6ec>)
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7fd f98d 	bl	800a220 <mem_cpy>
 800cf06:	e020      	b.n	800cf4a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800cf08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf0a:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800cf0e:	f7fc ff69 	bl	8009de4 <get_fattime>
 800cf12:	4603      	mov	r3, r0
 800cf14:	4619      	mov	r1, r3
 800cf16:	4620      	mov	r0, r4
 800cf18:	f7fd f956 	bl	800a1c8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800cf1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1e:	3316      	adds	r3, #22
 800cf20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf22:	b292      	uxth	r2, r2
 800cf24:	4611      	mov	r1, r2
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fd f933 	bl	800a192 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800cf2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2e:	3324      	adds	r3, #36	; 0x24
 800cf30:	2280      	movs	r2, #128	; 0x80
 800cf32:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800cf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf36:	3326      	adds	r3, #38	; 0x26
 800cf38:	2229      	movs	r2, #41	; 0x29
 800cf3a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800cf3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3e:	332b      	adds	r3, #43	; 0x2b
 800cf40:	2213      	movs	r2, #19
 800cf42:	4960      	ldr	r1, [pc, #384]	; (800d0c4 <f_mkfs+0x6f0>)
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7fd f96b 	bl	800a220 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800cf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf4c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cf50:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fd f91c 	bl	800a192 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800cf5a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800cf5e:	2301      	movs	r3, #1
 800cf60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cf64:	f7fd f89a 	bl	800a09c <disk_write>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d001      	beq.n	800cf72 <f_mkfs+0x59e>
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e156      	b.n	800d220 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800cf72:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cf76:	2b03      	cmp	r3, #3
 800cf78:	d140      	bne.n	800cffc <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800cf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7c:	1d9a      	adds	r2, r3, #6
 800cf7e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800cf82:	2301      	movs	r3, #1
 800cf84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cf86:	f7fd f889 	bl	800a09c <disk_write>
			mem_set(buf, 0, ss);
 800cf8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	2100      	movs	r1, #0
 800cf90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf92:	f7fd f966 	bl	800a262 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800cf96:	494c      	ldr	r1, [pc, #304]	; (800d0c8 <f_mkfs+0x6f4>)
 800cf98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf9a:	f7fd f915 	bl	800a1c8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800cf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cfa4:	4949      	ldr	r1, [pc, #292]	; (800d0cc <f_mkfs+0x6f8>)
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fd f90e 	bl	800a1c8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800cfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfae:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cfb2:	6a3b      	ldr	r3, [r7, #32]
 800cfb4:	3b01      	subs	r3, #1
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	4610      	mov	r0, r2
 800cfba:	f7fd f905 	bl	800a1c8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800cfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cfc4:	2102      	movs	r1, #2
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fd f8fe 	bl	800a1c8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800cfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cfd2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fd f8db 	bl	800a192 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800cfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfde:	1dda      	adds	r2, r3, #7
 800cfe0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cfe8:	f7fd f858 	bl	800a09c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800cfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfee:	1c5a      	adds	r2, r3, #1
 800cff0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800cff4:	2301      	movs	r3, #1
 800cff6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cff8:	f7fd f850 	bl	800a09c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800cffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cffe:	2100      	movs	r1, #0
 800d000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d002:	f7fd f92e 	bl	800a262 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800d006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d008:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800d00a:	2300      	movs	r3, #0
 800d00c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d00e:	e04b      	b.n	800d0a8 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800d010:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d014:	2b03      	cmp	r3, #3
 800d016:	d113      	bne.n	800d040 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800d018:	f06f 0107 	mvn.w	r1, #7
 800d01c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d01e:	f7fd f8d3 	bl	800a1c8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800d022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d024:	3304      	adds	r3, #4
 800d026:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fd f8cc 	bl	800a1c8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800d030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d032:	3308      	adds	r3, #8
 800d034:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fd f8c5 	bl	800a1c8 <st_dword>
 800d03e:	e00b      	b.n	800d058 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800d040:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d044:	2b01      	cmp	r3, #1
 800d046:	d101      	bne.n	800d04c <f_mkfs+0x678>
 800d048:	4b21      	ldr	r3, [pc, #132]	; (800d0d0 <f_mkfs+0x6fc>)
 800d04a:	e001      	b.n	800d050 <f_mkfs+0x67c>
 800d04c:	f06f 0307 	mvn.w	r3, #7
 800d050:	4619      	mov	r1, r3
 800d052:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d054:	f7fd f8b8 	bl	800a1c8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800d058:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d05a:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800d05c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d060:	4293      	cmp	r3, r2
 800d062:	bf28      	it	cs
 800d064:	4613      	movcs	r3, r2
 800d066:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800d068:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d06c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d06e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d070:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d072:	f7fd f813 	bl	800a09c <disk_write>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d001      	beq.n	800d080 <f_mkfs+0x6ac>
 800d07c:	2301      	movs	r3, #1
 800d07e:	e0cf      	b.n	800d220 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800d080:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d082:	461a      	mov	r2, r3
 800d084:	2100      	movs	r1, #0
 800d086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d088:	f7fd f8eb 	bl	800a262 <mem_set>
				sect += n; nsect -= n;
 800d08c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d08e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d090:	4413      	add	r3, r2
 800d092:	667b      	str	r3, [r7, #100]	; 0x64
 800d094:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d098:	1ad3      	subs	r3, r2, r3
 800d09a:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800d09c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d1dc      	bne.n	800d05c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800d0a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d3af      	bcc.n	800d010 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800d0b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d0b4:	2b03      	cmp	r3, #3
 800d0b6:	d10d      	bne.n	800d0d4 <f_mkfs+0x700>
 800d0b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0ba:	e00c      	b.n	800d0d6 <f_mkfs+0x702>
 800d0bc:	08012a04 	.word	0x08012a04
 800d0c0:	08012a10 	.word	0x08012a10
 800d0c4:	08012a24 	.word	0x08012a24
 800d0c8:	41615252 	.word	0x41615252
 800d0cc:	61417272 	.word	0x61417272
 800d0d0:	00fffff8 	.word	0x00fffff8
 800d0d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0d6:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800d0d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	bf28      	it	cs
 800d0e0:	4613      	movcs	r3, r2
 800d0e2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800d0e4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d0e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d0ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d0ee:	f7fc ffd5 	bl	800a09c <disk_write>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d001      	beq.n	800d0fc <f_mkfs+0x728>
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	e091      	b.n	800d220 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800d0fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d0fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d100:	4413      	add	r3, r2
 800d102:	667b      	str	r3, [r7, #100]	; 0x64
 800d104:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d108:	1ad3      	subs	r3, r2, r3
 800d10a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800d10c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d1e2      	bne.n	800d0d8 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800d112:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d116:	2b03      	cmp	r3, #3
 800d118:	d103      	bne.n	800d122 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800d11a:	230c      	movs	r3, #12
 800d11c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800d120:	e010      	b.n	800d144 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d128:	d303      	bcc.n	800d132 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800d12a:	2306      	movs	r3, #6
 800d12c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800d130:	e008      	b.n	800d144 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800d132:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d136:	2b02      	cmp	r3, #2
 800d138:	d101      	bne.n	800d13e <f_mkfs+0x76a>
 800d13a:	2304      	movs	r3, #4
 800d13c:	e000      	b.n	800d140 <f_mkfs+0x76c>
 800d13e:	2301      	movs	r3, #1
 800d140:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800d144:	7afb      	ldrb	r3, [r7, #11]
 800d146:	f003 0308 	and.w	r3, r3, #8
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d15b      	bne.n	800d206 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800d14e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d150:	461a      	mov	r2, r3
 800d152:	2100      	movs	r1, #0
 800d154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d156:	f7fd f884 	bl	800a262 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800d15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d160:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d164:	4618      	mov	r0, r3
 800d166:	f7fd f814 	bl	800a192 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800d16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d170:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800d172:	69bb      	ldr	r3, [r7, #24]
 800d174:	2200      	movs	r2, #0
 800d176:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	3301      	adds	r3, #1
 800d17c:	2201      	movs	r2, #1
 800d17e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800d180:	69bb      	ldr	r3, [r7, #24]
 800d182:	3302      	adds	r3, #2
 800d184:	2201      	movs	r2, #1
 800d186:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	3303      	adds	r3, #3
 800d18c:	2200      	movs	r2, #0
 800d18e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	3304      	adds	r3, #4
 800d194:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800d198:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800d19a:	693a      	ldr	r2, [r7, #16]
 800d19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19e:	441a      	add	r2, r3
 800d1a0:	4b21      	ldr	r3, [pc, #132]	; (800d228 <f_mkfs+0x854>)
 800d1a2:	fba3 1302 	umull	r1, r3, r3, r2
 800d1a6:	1ad2      	subs	r2, r2, r3
 800d1a8:	0852      	lsrs	r2, r2, #1
 800d1aa:	4413      	add	r3, r2
 800d1ac:	0b5b      	lsrs	r3, r3, #13
 800d1ae:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	3305      	adds	r3, #5
 800d1b4:	22fe      	movs	r2, #254	; 0xfe
 800d1b6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800d1b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1ba:	089b      	lsrs	r3, r3, #2
 800d1bc:	b2da      	uxtb	r2, r3
 800d1be:	69bb      	ldr	r3, [r7, #24]
 800d1c0:	3306      	adds	r3, #6
 800d1c2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800d1c6:	b2d2      	uxtb	r2, r2
 800d1c8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	3307      	adds	r3, #7
 800d1ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d1d0:	b2d2      	uxtb	r2, r2
 800d1d2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	3308      	adds	r3, #8
 800d1d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fc fff4 	bl	800a1c8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800d1e0:	69bb      	ldr	r3, [r7, #24]
 800d1e2:	330c      	adds	r3, #12
 800d1e4:	693a      	ldr	r2, [r7, #16]
 800d1e6:	4611      	mov	r1, r2
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7fc ffed 	bl	800a1c8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800d1ee:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d1f8:	f7fc ff50 	bl	800a09c <disk_write>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d001      	beq.n	800d206 <f_mkfs+0x832>
 800d202:	2301      	movs	r3, #1
 800d204:	e00c      	b.n	800d220 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800d206:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d20a:	2200      	movs	r2, #0
 800d20c:	2100      	movs	r1, #0
 800d20e:	4618      	mov	r0, r3
 800d210:	f7fc ff64 	bl	800a0dc <disk_ioctl>
 800d214:	4603      	mov	r3, r0
 800d216:	2b00      	cmp	r3, #0
 800d218:	d001      	beq.n	800d21e <f_mkfs+0x84a>
 800d21a:	2301      	movs	r3, #1
 800d21c:	e000      	b.n	800d220 <f_mkfs+0x84c>

	return FR_OK;
 800d21e:	2300      	movs	r3, #0
}
 800d220:	4618      	mov	r0, r3
 800d222:	3774      	adds	r7, #116	; 0x74
 800d224:	46bd      	mov	sp, r7
 800d226:	bd90      	pop	{r4, r7, pc}
 800d228:	0515565b 	.word	0x0515565b

0800d22c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b088      	sub	sp, #32
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
	int n = 0;
 800d238:	2300      	movs	r3, #0
 800d23a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d240:	e01b      	b.n	800d27a <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800d242:	f107 0310 	add.w	r3, r7, #16
 800d246:	f107 0114 	add.w	r1, r7, #20
 800d24a:	2201      	movs	r2, #1
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f7fe ff3a 	bl	800c0c6 <f_read>
		if (rc != 1) break;
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	2b01      	cmp	r3, #1
 800d256:	d116      	bne.n	800d286 <f_gets+0x5a>
		c = s[0];
 800d258:	7d3b      	ldrb	r3, [r7, #20]
 800d25a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800d25c:	7dfb      	ldrb	r3, [r7, #23]
 800d25e:	2b0d      	cmp	r3, #13
 800d260:	d100      	bne.n	800d264 <f_gets+0x38>
 800d262:	e00a      	b.n	800d27a <f_gets+0x4e>
		*p++ = c;
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	1c5a      	adds	r2, r3, #1
 800d268:	61ba      	str	r2, [r7, #24]
 800d26a:	7dfa      	ldrb	r2, [r7, #23]
 800d26c:	701a      	strb	r2, [r3, #0]
		n++;
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	3301      	adds	r3, #1
 800d272:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800d274:	7dfb      	ldrb	r3, [r7, #23]
 800d276:	2b0a      	cmp	r3, #10
 800d278:	d007      	beq.n	800d28a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	3b01      	subs	r3, #1
 800d27e:	69fa      	ldr	r2, [r7, #28]
 800d280:	429a      	cmp	r2, r3
 800d282:	dbde      	blt.n	800d242 <f_gets+0x16>
 800d284:	e002      	b.n	800d28c <f_gets+0x60>
		if (rc != 1) break;
 800d286:	bf00      	nop
 800d288:	e000      	b.n	800d28c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800d28a:	bf00      	nop
	}
	*p = 0;
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	2200      	movs	r2, #0
 800d290:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800d292:	69fb      	ldr	r3, [r7, #28]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d001      	beq.n	800d29c <f_gets+0x70>
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	e000      	b.n	800d29e <f_gets+0x72>
 800d29c:	2300      	movs	r3, #0
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3720      	adds	r7, #32
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}

0800d2a6 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800d2a6:	b580      	push	{r7, lr}
 800d2a8:	b084      	sub	sp, #16
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	6078      	str	r0, [r7, #4]
 800d2ae:	460b      	mov	r3, r1
 800d2b0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800d2b2:	78fb      	ldrb	r3, [r7, #3]
 800d2b4:	2b0a      	cmp	r3, #10
 800d2b6:	d103      	bne.n	800d2c0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800d2b8:	210d      	movs	r1, #13
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f7ff fff3 	bl	800d2a6 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	db25      	blt.n	800d318 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	1c5a      	adds	r2, r3, #1
 800d2d0:	60fa      	str	r2, [r7, #12]
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	78fa      	ldrb	r2, [r7, #3]
 800d2d8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2b3c      	cmp	r3, #60	; 0x3c
 800d2de:	dd12      	ble.n	800d306 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6818      	ldr	r0, [r3, #0]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f103 010c 	add.w	r1, r3, #12
 800d2ea:	68fa      	ldr	r2, [r7, #12]
 800d2ec:	f107 0308 	add.w	r3, r7, #8
 800d2f0:	f7ff f857 	bl	800c3a2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d2f4:	68ba      	ldr	r2, [r7, #8]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d101      	bne.n	800d300 <putc_bfd+0x5a>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	e001      	b.n	800d304 <putc_bfd+0x5e>
 800d300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d304:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	1c5a      	adds	r2, r3, #1
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	609a      	str	r2, [r3, #8]
 800d316:	e000      	b.n	800d31a <putc_bfd+0x74>
	if (i < 0) return;
 800d318:	bf00      	nop
}
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	db16      	blt.n	800d35e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6818      	ldr	r0, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f103 010c 	add.w	r1, r3, #12
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	461a      	mov	r2, r3
 800d340:	f107 030c 	add.w	r3, r7, #12
 800d344:	f7ff f82d 	bl	800c3a2 <f_write>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d107      	bne.n	800d35e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	68fa      	ldr	r2, [r7, #12]
 800d354:	4293      	cmp	r3, r2
 800d356:	d102      	bne.n	800d35e <putc_flush+0x3e>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	e001      	b.n	800d362 <putc_flush+0x42>
	return EOF;
 800d35e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d362:	4618      	mov	r0, r3
 800d364:	3710      	adds	r7, #16
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}

0800d36a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800d36a:	b480      	push	{r7}
 800d36c:	b083      	sub	sp, #12
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
 800d372:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	683a      	ldr	r2, [r7, #0]
 800d378:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2200      	movs	r2, #0
 800d37e:	605a      	str	r2, [r3, #4]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	685a      	ldr	r2, [r3, #4]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	609a      	str	r2, [r3, #8]
}
 800d388:	bf00      	nop
 800d38a:	370c      	adds	r7, #12
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b096      	sub	sp, #88	; 0x58
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800d39e:	f107 030c 	add.w	r3, r7, #12
 800d3a2:	6839      	ldr	r1, [r7, #0]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7ff ffe0 	bl	800d36a <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800d3aa:	e009      	b.n	800d3c0 <f_puts+0x2c>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	1c5a      	adds	r2, r3, #1
 800d3b0:	607a      	str	r2, [r7, #4]
 800d3b2:	781a      	ldrb	r2, [r3, #0]
 800d3b4:	f107 030c 	add.w	r3, r7, #12
 800d3b8:	4611      	mov	r1, r2
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7ff ff73 	bl	800d2a6 <putc_bfd>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d1f1      	bne.n	800d3ac <f_puts+0x18>
	return putc_flush(&pb);
 800d3c8:	f107 030c 	add.w	r3, r7, #12
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7ff ffa7 	bl	800d320 <putc_flush>
 800d3d2:	4603      	mov	r3, r0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3758      	adds	r7, #88	; 0x58
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b087      	sub	sp, #28
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	4613      	mov	r3, r2
 800d3e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d3f2:	4b22      	ldr	r3, [pc, #136]	; (800d47c <FATFS_LinkDriverEx+0xa0>)
 800d3f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	2b07      	cmp	r3, #7
 800d3fc:	d837      	bhi.n	800d46e <FATFS_LinkDriverEx+0x92>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d3fe:	4b1f      	ldr	r3, [pc, #124]	; (800d47c <FATFS_LinkDriverEx+0xa0>)
 800d400:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d404:	b2db      	uxtb	r3, r3
 800d406:	461a      	mov	r2, r3
 800d408:	4b1c      	ldr	r3, [pc, #112]	; (800d47c <FATFS_LinkDriverEx+0xa0>)
 800d40a:	2100      	movs	r1, #0
 800d40c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d40e:	4b1b      	ldr	r3, [pc, #108]	; (800d47c <FATFS_LinkDriverEx+0xa0>)
 800d410:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d414:	b2db      	uxtb	r3, r3
 800d416:	4919      	ldr	r1, [pc, #100]	; (800d47c <FATFS_LinkDriverEx+0xa0>)
 800d418:	3302      	adds	r3, #2
 800d41a:	68fa      	ldr	r2, [r7, #12]
 800d41c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    disk.lun[disk.nbr] = lun;
 800d420:	4b16      	ldr	r3, [pc, #88]	; (800d47c <FATFS_LinkDriverEx+0xa0>)
 800d422:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d426:	b2db      	uxtb	r3, r3
 800d428:	461a      	mov	r2, r3
 800d42a:	4b14      	ldr	r3, [pc, #80]	; (800d47c <FATFS_LinkDriverEx+0xa0>)
 800d42c:	4413      	add	r3, r2
 800d42e:	79fa      	ldrb	r2, [r7, #7]
 800d430:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    DiskNum = disk.nbr++;
 800d434:	4b11      	ldr	r3, [pc, #68]	; (800d47c <FATFS_LinkDriverEx+0xa0>)
 800d436:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	1c5a      	adds	r2, r3, #1
 800d43e:	b2d1      	uxtb	r1, r2
 800d440:	4a0e      	ldr	r2, [pc, #56]	; (800d47c <FATFS_LinkDriverEx+0xa0>)
 800d442:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 800d446:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d448:	7dbb      	ldrb	r3, [r7, #22]
 800d44a:	3330      	adds	r3, #48	; 0x30
 800d44c:	b2da      	uxtb	r2, r3
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	3301      	adds	r3, #1
 800d456:	223a      	movs	r2, #58	; 0x3a
 800d458:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	3302      	adds	r3, #2
 800d45e:	222f      	movs	r2, #47	; 0x2f
 800d460:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	3303      	adds	r3, #3
 800d466:	2200      	movs	r2, #0
 800d468:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d46a:	2300      	movs	r3, #0
 800d46c:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d46e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d470:	4618      	mov	r0, r3
 800d472:	371c      	adds	r7, #28
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr
 800d47c:	20003cd0 	.word	0x20003cd0

0800d480 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d48a:	2200      	movs	r2, #0
 800d48c:	6839      	ldr	r1, [r7, #0]
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f7ff ffa4 	bl	800d3dc <FATFS_LinkDriverEx>
 800d494:	4603      	mov	r3, r0
}
 800d496:	4618      	mov	r0, r3
 800d498:	3708      	adds	r7, #8
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b084      	sub	sp, #16
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	6039      	str	r1, [r7, #0]
 800d4a8:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
    *sobj = osMutexCreate(osMutex(MTX));
#else
    *sobj = osMutexNew(NULL);
 800d4aa:	2000      	movs	r0, #0
 800d4ac:	f000 f979 	bl	800d7a2 <osMutexNew>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	bf14      	ite	ne
 800d4be:	2301      	movne	r3, #1
 800d4c0:	2300      	moveq	r3, #0
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	60fb      	str	r3, [r7, #12]

    return ret;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3710      	adds	r7, #16
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 fa70 	bl	800d9be <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 800d4de:	2301      	movs	r3, #1
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	60fb      	str	r3, [r7, #12]
#endif

#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
 800d4f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 f9d8 	bl	800d8ae <osMutexAcquire>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d101      	bne.n	800d508 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800d504:	2301      	movs	r3, #1
 800d506:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d508:	68fb      	ldr	r3, [r7, #12]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b082      	sub	sp, #8
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 fa12 	bl	800d944 <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 800d520:	bf00      	nop
 800d522:	3708      	adds	r7, #8
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <__NVIC_SetPriority>:
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	4603      	mov	r3, r0
 800d530:	6039      	str	r1, [r7, #0]
 800d532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	db0a      	blt.n	800d552 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	b2da      	uxtb	r2, r3
 800d540:	490c      	ldr	r1, [pc, #48]	; (800d574 <__NVIC_SetPriority+0x4c>)
 800d542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d546:	0112      	lsls	r2, r2, #4
 800d548:	b2d2      	uxtb	r2, r2
 800d54a:	440b      	add	r3, r1
 800d54c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d550:	e00a      	b.n	800d568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	b2da      	uxtb	r2, r3
 800d556:	4908      	ldr	r1, [pc, #32]	; (800d578 <__NVIC_SetPriority+0x50>)
 800d558:	79fb      	ldrb	r3, [r7, #7]
 800d55a:	f003 030f 	and.w	r3, r3, #15
 800d55e:	3b04      	subs	r3, #4
 800d560:	0112      	lsls	r2, r2, #4
 800d562:	b2d2      	uxtb	r2, r2
 800d564:	440b      	add	r3, r1
 800d566:	761a      	strb	r2, [r3, #24]
}
 800d568:	bf00      	nop
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr
 800d574:	e000e100 	.word	0xe000e100
 800d578:	e000ed00 	.word	0xe000ed00

0800d57c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d57c:	b580      	push	{r7, lr}
 800d57e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d580:	4b05      	ldr	r3, [pc, #20]	; (800d598 <SysTick_Handler+0x1c>)
 800d582:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d584:	f002 fb74 	bl	800fc70 <xTaskGetSchedulerState>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d001      	beq.n	800d592 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d58e:	f003 fa5b 	bl	8010a48 <xPortSysTickHandler>
  }
}
 800d592:	bf00      	nop
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	e000e010 	.word	0xe000e010

0800d59c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d59c:	b580      	push	{r7, lr}
 800d59e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	f06f 0004 	mvn.w	r0, #4
 800d5a6:	f7ff ffbf 	bl	800d528 <__NVIC_SetPriority>
#endif
}
 800d5aa:	bf00      	nop
 800d5ac:	bd80      	pop	{r7, pc}
	...

0800d5b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5b6:	f3ef 8305 	mrs	r3, IPSR
 800d5ba:	603b      	str	r3, [r7, #0]
  return(result);
 800d5bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d003      	beq.n	800d5ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d5c2:	f06f 0305 	mvn.w	r3, #5
 800d5c6:	607b      	str	r3, [r7, #4]
 800d5c8:	e00f      	b.n	800d5ea <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d5ca:	4b0a      	ldr	r3, [pc, #40]	; (800d5f4 <osKernelInitialize+0x44>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d108      	bne.n	800d5e4 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 800d5d2:	4809      	ldr	r0, [pc, #36]	; (800d5f8 <osKernelInitialize+0x48>)
 800d5d4:	f003 fc34 	bl	8010e40 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 800d5d8:	4b06      	ldr	r3, [pc, #24]	; (800d5f4 <osKernelInitialize+0x44>)
 800d5da:	2201      	movs	r2, #1
 800d5dc:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	607b      	str	r3, [r7, #4]
 800d5e2:	e002      	b.n	800d5ea <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 800d5e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5e8:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d5ea:	687b      	ldr	r3, [r7, #4]
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	20003d04 	.word	0x20003d04
 800d5f8:	200000c4 	.word	0x200000c4

0800d5fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d602:	f3ef 8305 	mrs	r3, IPSR
 800d606:	603b      	str	r3, [r7, #0]
  return(result);
 800d608:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d003      	beq.n	800d616 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d60e:	f06f 0305 	mvn.w	r3, #5
 800d612:	607b      	str	r3, [r7, #4]
 800d614:	e010      	b.n	800d638 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d616:	4b0b      	ldr	r3, [pc, #44]	; (800d644 <osKernelStart+0x48>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d109      	bne.n	800d632 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d61e:	f7ff ffbd 	bl	800d59c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d622:	4b08      	ldr	r3, [pc, #32]	; (800d644 <osKernelStart+0x48>)
 800d624:	2202      	movs	r2, #2
 800d626:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d628:	f001 feb6 	bl	800f398 <vTaskStartScheduler>
      stat = osOK;
 800d62c:	2300      	movs	r3, #0
 800d62e:	607b      	str	r3, [r7, #4]
 800d630:	e002      	b.n	800d638 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d636:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d638:	687b      	ldr	r3, [r7, #4]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3708      	adds	r7, #8
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	20003d04 	.word	0x20003d04

0800d648 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d648:	b580      	push	{r7, lr}
 800d64a:	b08e      	sub	sp, #56	; 0x38
 800d64c:	af04      	add	r7, sp, #16
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d654:	2300      	movs	r3, #0
 800d656:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d658:	f3ef 8305 	mrs	r3, IPSR
 800d65c:	617b      	str	r3, [r7, #20]
  return(result);
 800d65e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d660:	2b00      	cmp	r3, #0
 800d662:	d17e      	bne.n	800d762 <osThreadNew+0x11a>
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d07b      	beq.n	800d762 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d66a:	2380      	movs	r3, #128	; 0x80
 800d66c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d66e:	2318      	movs	r3, #24
 800d670:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d672:	2300      	movs	r3, #0
 800d674:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d67a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d045      	beq.n	800d70e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d002      	beq.n	800d690 <osThreadNew+0x48>
        name = attr->name;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	699b      	ldr	r3, [r3, #24]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d002      	beq.n	800d69e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	699b      	ldr	r3, [r3, #24]
 800d69c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d008      	beq.n	800d6b6 <osThreadNew+0x6e>
 800d6a4:	69fb      	ldr	r3, [r7, #28]
 800d6a6:	2b38      	cmp	r3, #56	; 0x38
 800d6a8:	d805      	bhi.n	800d6b6 <osThreadNew+0x6e>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	f003 0301 	and.w	r3, r3, #1
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d001      	beq.n	800d6ba <osThreadNew+0x72>
        return (NULL);
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	e054      	b.n	800d764 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	695b      	ldr	r3, [r3, #20]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d003      	beq.n	800d6ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	695b      	ldr	r3, [r3, #20]
 800d6c6:	089b      	lsrs	r3, r3, #2
 800d6c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00e      	beq.n	800d6f0 <osThreadNew+0xa8>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	2bbb      	cmp	r3, #187	; 0xbb
 800d6d8:	d90a      	bls.n	800d6f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d006      	beq.n	800d6f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	695b      	ldr	r3, [r3, #20]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d002      	beq.n	800d6f0 <osThreadNew+0xa8>
        mem = 1;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	61bb      	str	r3, [r7, #24]
 800d6ee:	e010      	b.n	800d712 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	689b      	ldr	r3, [r3, #8]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d10c      	bne.n	800d712 <osThreadNew+0xca>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d108      	bne.n	800d712 <osThreadNew+0xca>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	691b      	ldr	r3, [r3, #16]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d104      	bne.n	800d712 <osThreadNew+0xca>
          mem = 0;
 800d708:	2300      	movs	r3, #0
 800d70a:	61bb      	str	r3, [r7, #24]
 800d70c:	e001      	b.n	800d712 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d70e:	2300      	movs	r3, #0
 800d710:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d712:	69bb      	ldr	r3, [r7, #24]
 800d714:	2b01      	cmp	r3, #1
 800d716:	d110      	bne.n	800d73a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d720:	9202      	str	r2, [sp, #8]
 800d722:	9301      	str	r3, [sp, #4]
 800d724:	69fb      	ldr	r3, [r7, #28]
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	6a3a      	ldr	r2, [r7, #32]
 800d72c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f001 fc46 	bl	800efc0 <xTaskCreateStatic>
 800d734:	4603      	mov	r3, r0
 800d736:	613b      	str	r3, [r7, #16]
 800d738:	e013      	b.n	800d762 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d110      	bne.n	800d762 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d740:	6a3b      	ldr	r3, [r7, #32]
 800d742:	b29a      	uxth	r2, r3
 800d744:	f107 0310 	add.w	r3, r7, #16
 800d748:	9301      	str	r3, [sp, #4]
 800d74a:	69fb      	ldr	r3, [r7, #28]
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d752:	68f8      	ldr	r0, [r7, #12]
 800d754:	f001 fc91 	bl	800f07a <xTaskCreate>
 800d758:	4603      	mov	r3, r0
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d001      	beq.n	800d762 <osThreadNew+0x11a>
            hTask = NULL;
 800d75e:	2300      	movs	r3, #0
 800d760:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d762:	693b      	ldr	r3, [r7, #16]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3728      	adds	r7, #40	; 0x28
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d774:	f3ef 8305 	mrs	r3, IPSR
 800d778:	60bb      	str	r3, [r7, #8]
  return(result);
 800d77a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d003      	beq.n	800d788 <osDelay+0x1c>
    stat = osErrorISR;
 800d780:	f06f 0305 	mvn.w	r3, #5
 800d784:	60fb      	str	r3, [r7, #12]
 800d786:	e007      	b.n	800d798 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d788:	2300      	movs	r3, #0
 800d78a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d002      	beq.n	800d798 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f001 fdcc 	bl	800f330 <vTaskDelay>
    }
  }

  return (stat);
 800d798:	68fb      	ldr	r3, [r7, #12]
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3710      	adds	r7, #16
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}

0800d7a2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b088      	sub	sp, #32
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7ae:	f3ef 8305 	mrs	r3, IPSR
 800d7b2:	60bb      	str	r3, [r7, #8]
  return(result);
 800d7b4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d174      	bne.n	800d8a4 <osMutexNew+0x102>
    if (attr != NULL) {
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d003      	beq.n	800d7c8 <osMutexNew+0x26>
      type = attr->attr_bits;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	61bb      	str	r3, [r7, #24]
 800d7c6:	e001      	b.n	800d7cc <osMutexNew+0x2a>
    } else {
      type = 0U;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d7cc:	69bb      	ldr	r3, [r7, #24]
 800d7ce:	f003 0301 	and.w	r3, r3, #1
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d002      	beq.n	800d7dc <osMutexNew+0x3a>
      rmtx = 1U;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	617b      	str	r3, [r7, #20]
 800d7da:	e001      	b.n	800d7e0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	f003 0308 	and.w	r3, r3, #8
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d15c      	bne.n	800d8a4 <osMutexNew+0x102>
      mem = -1;
 800d7ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7ee:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d015      	beq.n	800d822 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d006      	beq.n	800d80c <osMutexNew+0x6a>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	2b4f      	cmp	r3, #79	; 0x4f
 800d804:	d902      	bls.n	800d80c <osMutexNew+0x6a>
          mem = 1;
 800d806:	2301      	movs	r3, #1
 800d808:	613b      	str	r3, [r7, #16]
 800d80a:	e00c      	b.n	800d826 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	689b      	ldr	r3, [r3, #8]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d108      	bne.n	800d826 <osMutexNew+0x84>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	68db      	ldr	r3, [r3, #12]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d104      	bne.n	800d826 <osMutexNew+0x84>
            mem = 0;
 800d81c:	2300      	movs	r3, #0
 800d81e:	613b      	str	r3, [r7, #16]
 800d820:	e001      	b.n	800d826 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800d822:	2300      	movs	r3, #0
 800d824:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	2b01      	cmp	r3, #1
 800d82a:	d112      	bne.n	800d852 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d007      	beq.n	800d842 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	4619      	mov	r1, r3
 800d838:	2004      	movs	r0, #4
 800d83a:	f000 fcf8 	bl	800e22e <xQueueCreateMutexStatic>
 800d83e:	61f8      	str	r0, [r7, #28]
 800d840:	e016      	b.n	800d870 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	4619      	mov	r1, r3
 800d848:	2001      	movs	r0, #1
 800d84a:	f000 fcf0 	bl	800e22e <xQueueCreateMutexStatic>
 800d84e:	61f8      	str	r0, [r7, #28]
 800d850:	e00e      	b.n	800d870 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d10b      	bne.n	800d870 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d004      	beq.n	800d868 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d85e:	2004      	movs	r0, #4
 800d860:	f000 fccd 	bl	800e1fe <xQueueCreateMutex>
 800d864:	61f8      	str	r0, [r7, #28]
 800d866:	e003      	b.n	800d870 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800d868:	2001      	movs	r0, #1
 800d86a:	f000 fcc8 	bl	800e1fe <xQueueCreateMutex>
 800d86e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00c      	beq.n	800d890 <osMutexNew+0xee>
        if (attr != NULL) {
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d003      	beq.n	800d884 <osMutexNew+0xe2>
          name = attr->name;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	60fb      	str	r3, [r7, #12]
 800d882:	e001      	b.n	800d888 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800d884:	2300      	movs	r3, #0
 800d886:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800d888:	68f9      	ldr	r1, [r7, #12]
 800d88a:	69f8      	ldr	r0, [r7, #28]
 800d88c:	f001 fb10 	bl	800eeb0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d006      	beq.n	800d8a4 <osMutexNew+0x102>
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d003      	beq.n	800d8a4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	f043 0301 	orr.w	r3, r3, #1
 800d8a2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d8a4:	69fb      	ldr	r3, [r7, #28]
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3720      	adds	r7, #32
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}

0800d8ae <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b086      	sub	sp, #24
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
 800d8b6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f023 0301 	bic.w	r3, r3, #1
 800d8be:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f003 0301 	and.w	r3, r3, #1
 800d8c6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8cc:	f3ef 8305 	mrs	r3, IPSR
 800d8d0:	60bb      	str	r3, [r7, #8]
  return(result);
 800d8d2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d003      	beq.n	800d8e0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800d8d8:	f06f 0305 	mvn.w	r3, #5
 800d8dc:	617b      	str	r3, [r7, #20]
 800d8de:	e02c      	b.n	800d93a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d103      	bne.n	800d8ee <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800d8e6:	f06f 0303 	mvn.w	r3, #3
 800d8ea:	617b      	str	r3, [r7, #20]
 800d8ec:	e025      	b.n	800d93a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d011      	beq.n	800d918 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d8f4:	6839      	ldr	r1, [r7, #0]
 800d8f6:	6938      	ldr	r0, [r7, #16]
 800d8f8:	f000 fce8 	bl	800e2cc <xQueueTakeMutexRecursive>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b01      	cmp	r3, #1
 800d900:	d01b      	beq.n	800d93a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d003      	beq.n	800d910 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800d908:	f06f 0301 	mvn.w	r3, #1
 800d90c:	617b      	str	r3, [r7, #20]
 800d90e:	e014      	b.n	800d93a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d910:	f06f 0302 	mvn.w	r3, #2
 800d914:	617b      	str	r3, [r7, #20]
 800d916:	e010      	b.n	800d93a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d918:	6839      	ldr	r1, [r7, #0]
 800d91a:	6938      	ldr	r0, [r7, #16]
 800d91c:	f000 fff0 	bl	800e900 <xQueueSemaphoreTake>
 800d920:	4603      	mov	r3, r0
 800d922:	2b01      	cmp	r3, #1
 800d924:	d009      	beq.n	800d93a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d003      	beq.n	800d934 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800d92c:	f06f 0301 	mvn.w	r3, #1
 800d930:	617b      	str	r3, [r7, #20]
 800d932:	e002      	b.n	800d93a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d934:	f06f 0302 	mvn.w	r3, #2
 800d938:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800d93a:	697b      	ldr	r3, [r7, #20]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3718      	adds	r7, #24
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f023 0301 	bic.w	r3, r3, #1
 800d952:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f003 0301 	and.w	r3, r3, #1
 800d95a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d95c:	2300      	movs	r3, #0
 800d95e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d960:	f3ef 8305 	mrs	r3, IPSR
 800d964:	60bb      	str	r3, [r7, #8]
  return(result);
 800d966:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d003      	beq.n	800d974 <osMutexRelease+0x30>
    stat = osErrorISR;
 800d96c:	f06f 0305 	mvn.w	r3, #5
 800d970:	617b      	str	r3, [r7, #20]
 800d972:	e01f      	b.n	800d9b4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d103      	bne.n	800d982 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800d97a:	f06f 0303 	mvn.w	r3, #3
 800d97e:	617b      	str	r3, [r7, #20]
 800d980:	e018      	b.n	800d9b4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d009      	beq.n	800d99c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d988:	6938      	ldr	r0, [r7, #16]
 800d98a:	f000 fc6b 	bl	800e264 <xQueueGiveMutexRecursive>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b01      	cmp	r3, #1
 800d992:	d00f      	beq.n	800d9b4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d994:	f06f 0302 	mvn.w	r3, #2
 800d998:	617b      	str	r3, [r7, #20]
 800d99a:	e00b      	b.n	800d9b4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d99c:	2300      	movs	r3, #0
 800d99e:	2200      	movs	r2, #0
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	6938      	ldr	r0, [r7, #16]
 800d9a4:	f000 fd32 	bl	800e40c <xQueueGenericSend>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d002      	beq.n	800d9b4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d9ae:	f06f 0302 	mvn.w	r3, #2
 800d9b2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d9b4:	697b      	ldr	r3, [r7, #20]
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3718      	adds	r7, #24
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}

0800d9be <osMutexDelete>:
  }

  return (owner);
}

osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 800d9be:	b580      	push	{r7, lr}
 800d9c0:	b086      	sub	sp, #24
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  SemaphoreHandle_t hMutex;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f023 0301 	bic.w	r3, r3, #1
 800d9cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9ce:	f3ef 8305 	mrs	r3, IPSR
 800d9d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800d9d4:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d003      	beq.n	800d9e2 <osMutexDelete+0x24>
    stat = osErrorISR;
 800d9da:	f06f 0305 	mvn.w	r3, #5
 800d9de:	617b      	str	r3, [r7, #20]
 800d9e0:	e00e      	b.n	800da00 <osMutexDelete+0x42>
  }
  else if (hMutex == NULL) {
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d103      	bne.n	800d9f0 <osMutexDelete+0x32>
    stat = osErrorParameter;
 800d9e8:	f06f 0303 	mvn.w	r3, #3
 800d9ec:	617b      	str	r3, [r7, #20]
 800d9ee:	e007      	b.n	800da00 <osMutexDelete+0x42>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hMutex);
 800d9f0:	6938      	ldr	r0, [r7, #16]
 800d9f2:	f001 fa87 	bl	800ef04 <vQueueUnregisterQueue>
    #endif
    stat = osOK;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hMutex);
 800d9fa:	6938      	ldr	r0, [r7, #16]
 800d9fc:	f001 f90c 	bl	800ec18 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800da00:	697b      	ldr	r3, [r7, #20]
}
 800da02:	4618      	mov	r0, r3
 800da04:	3718      	adds	r7, #24
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}

0800da0a <osSemaphoreNew>:
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800da0a:	b580      	push	{r7, lr}
 800da0c:	b08a      	sub	sp, #40	; 0x28
 800da0e:	af02      	add	r7, sp, #8
 800da10:	60f8      	str	r0, [r7, #12]
 800da12:	60b9      	str	r1, [r7, #8]
 800da14:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800da16:	2300      	movs	r3, #0
 800da18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da1a:	f3ef 8305 	mrs	r3, IPSR
 800da1e:	613b      	str	r3, [r7, #16]
  return(result);
 800da20:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800da22:	2b00      	cmp	r3, #0
 800da24:	d175      	bne.n	800db12 <osSemaphoreNew+0x108>
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d072      	beq.n	800db12 <osSemaphoreNew+0x108>
 800da2c:	68ba      	ldr	r2, [r7, #8]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	429a      	cmp	r2, r3
 800da32:	d86e      	bhi.n	800db12 <osSemaphoreNew+0x108>
    mem = -1;
 800da34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da38:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d015      	beq.n	800da6c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d006      	beq.n	800da56 <osSemaphoreNew+0x4c>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	2b4f      	cmp	r3, #79	; 0x4f
 800da4e:	d902      	bls.n	800da56 <osSemaphoreNew+0x4c>
        mem = 1;
 800da50:	2301      	movs	r3, #1
 800da52:	61bb      	str	r3, [r7, #24]
 800da54:	e00c      	b.n	800da70 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d108      	bne.n	800da70 <osSemaphoreNew+0x66>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d104      	bne.n	800da70 <osSemaphoreNew+0x66>
          mem = 0;
 800da66:	2300      	movs	r3, #0
 800da68:	61bb      	str	r3, [r7, #24]
 800da6a:	e001      	b.n	800da70 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800da6c:	2300      	movs	r3, #0
 800da6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da76:	d04c      	beq.n	800db12 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	d128      	bne.n	800dad0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	2b01      	cmp	r3, #1
 800da82:	d10a      	bne.n	800da9a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	2203      	movs	r2, #3
 800da8a:	9200      	str	r2, [sp, #0]
 800da8c:	2200      	movs	r2, #0
 800da8e:	2100      	movs	r1, #0
 800da90:	2001      	movs	r0, #1
 800da92:	f000 fac5 	bl	800e020 <xQueueGenericCreateStatic>
 800da96:	61f8      	str	r0, [r7, #28]
 800da98:	e005      	b.n	800daa6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800da9a:	2203      	movs	r2, #3
 800da9c:	2100      	movs	r1, #0
 800da9e:	2001      	movs	r0, #1
 800daa0:	f000 fb36 	bl	800e110 <xQueueGenericCreate>
 800daa4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800daa6:	69fb      	ldr	r3, [r7, #28]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d022      	beq.n	800daf2 <osSemaphoreNew+0xe8>
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d01f      	beq.n	800daf2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dab2:	2300      	movs	r3, #0
 800dab4:	2200      	movs	r2, #0
 800dab6:	2100      	movs	r1, #0
 800dab8:	69f8      	ldr	r0, [r7, #28]
 800daba:	f000 fca7 	bl	800e40c <xQueueGenericSend>
 800dabe:	4603      	mov	r3, r0
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d016      	beq.n	800daf2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800dac4:	69f8      	ldr	r0, [r7, #28]
 800dac6:	f001 f8a7 	bl	800ec18 <vQueueDelete>
            hSemaphore = NULL;
 800daca:	2300      	movs	r3, #0
 800dacc:	61fb      	str	r3, [r7, #28]
 800dace:	e010      	b.n	800daf2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800dad0:	69bb      	ldr	r3, [r7, #24]
 800dad2:	2b01      	cmp	r3, #1
 800dad4:	d108      	bne.n	800dae8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	461a      	mov	r2, r3
 800dadc:	68b9      	ldr	r1, [r7, #8]
 800dade:	68f8      	ldr	r0, [r7, #12]
 800dae0:	f000 fc2a 	bl	800e338 <xQueueCreateCountingSemaphoreStatic>
 800dae4:	61f8      	str	r0, [r7, #28]
 800dae6:	e004      	b.n	800daf2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800dae8:	68b9      	ldr	r1, [r7, #8]
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	f000 fc5b 	bl	800e3a6 <xQueueCreateCountingSemaphore>
 800daf0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d00c      	beq.n	800db12 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d003      	beq.n	800db06 <osSemaphoreNew+0xfc>
          name = attr->name;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	617b      	str	r3, [r7, #20]
 800db04:	e001      	b.n	800db0a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800db06:	2300      	movs	r3, #0
 800db08:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800db0a:	6979      	ldr	r1, [r7, #20]
 800db0c:	69f8      	ldr	r0, [r7, #28]
 800db0e:	f001 f9cf 	bl	800eeb0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800db12:	69fb      	ldr	r3, [r7, #28]
}
 800db14:	4618      	mov	r0, r3
 800db16:	3720      	adds	r7, #32
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b08a      	sub	sp, #40	; 0x28
 800db20:	af02      	add	r7, sp, #8
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800db28:	2300      	movs	r3, #0
 800db2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db2c:	f3ef 8305 	mrs	r3, IPSR
 800db30:	613b      	str	r3, [r7, #16]
  return(result);
 800db32:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800db34:	2b00      	cmp	r3, #0
 800db36:	d15f      	bne.n	800dbf8 <osMessageQueueNew+0xdc>
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d05c      	beq.n	800dbf8 <osMessageQueueNew+0xdc>
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d059      	beq.n	800dbf8 <osMessageQueueNew+0xdc>
    mem = -1;
 800db44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db48:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d029      	beq.n	800dba4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d012      	beq.n	800db7e <osMessageQueueNew+0x62>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	68db      	ldr	r3, [r3, #12]
 800db5c:	2b4f      	cmp	r3, #79	; 0x4f
 800db5e:	d90e      	bls.n	800db7e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800db64:	2b00      	cmp	r3, #0
 800db66:	d00a      	beq.n	800db7e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	695a      	ldr	r2, [r3, #20]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	68b9      	ldr	r1, [r7, #8]
 800db70:	fb01 f303 	mul.w	r3, r1, r3
 800db74:	429a      	cmp	r2, r3
 800db76:	d302      	bcc.n	800db7e <osMessageQueueNew+0x62>
        mem = 1;
 800db78:	2301      	movs	r3, #1
 800db7a:	61bb      	str	r3, [r7, #24]
 800db7c:	e014      	b.n	800dba8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	689b      	ldr	r3, [r3, #8]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d110      	bne.n	800dba8 <osMessageQueueNew+0x8c>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d10c      	bne.n	800dba8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800db92:	2b00      	cmp	r3, #0
 800db94:	d108      	bne.n	800dba8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	695b      	ldr	r3, [r3, #20]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d104      	bne.n	800dba8 <osMessageQueueNew+0x8c>
          mem = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	61bb      	str	r3, [r7, #24]
 800dba2:	e001      	b.n	800dba8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800dba4:	2300      	movs	r3, #0
 800dba6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d10b      	bne.n	800dbc6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	691a      	ldr	r2, [r3, #16]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	9100      	str	r1, [sp, #0]
 800dbba:	68b9      	ldr	r1, [r7, #8]
 800dbbc:	68f8      	ldr	r0, [r7, #12]
 800dbbe:	f000 fa2f 	bl	800e020 <xQueueGenericCreateStatic>
 800dbc2:	61f8      	str	r0, [r7, #28]
 800dbc4:	e008      	b.n	800dbd8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800dbc6:	69bb      	ldr	r3, [r7, #24]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d105      	bne.n	800dbd8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800dbcc:	2200      	movs	r2, #0
 800dbce:	68b9      	ldr	r1, [r7, #8]
 800dbd0:	68f8      	ldr	r0, [r7, #12]
 800dbd2:	f000 fa9d 	bl	800e110 <xQueueGenericCreate>
 800dbd6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00c      	beq.n	800dbf8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d003      	beq.n	800dbec <osMessageQueueNew+0xd0>
        name = attr->name;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	617b      	str	r3, [r7, #20]
 800dbea:	e001      	b.n	800dbf0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800dbec:	2300      	movs	r3, #0
 800dbee:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800dbf0:	6979      	ldr	r1, [r7, #20]
 800dbf2:	69f8      	ldr	r0, [r7, #28]
 800dbf4:	f001 f95c 	bl	800eeb0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dbf8:	69fb      	ldr	r3, [r7, #28]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3720      	adds	r7, #32
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
	...

0800dc04 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b088      	sub	sp, #32
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	603b      	str	r3, [r7, #0]
 800dc10:	4613      	mov	r3, r2
 800dc12:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc1c:	f3ef 8305 	mrs	r3, IPSR
 800dc20:	617b      	str	r3, [r7, #20]
  return(result);
 800dc22:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d028      	beq.n	800dc7a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d005      	beq.n	800dc3a <osMessageQueuePut+0x36>
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d002      	beq.n	800dc3a <osMessageQueuePut+0x36>
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d003      	beq.n	800dc42 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800dc3a:	f06f 0303 	mvn.w	r3, #3
 800dc3e:	61fb      	str	r3, [r7, #28]
 800dc40:	e038      	b.n	800dcb4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800dc42:	2300      	movs	r3, #0
 800dc44:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dc46:	f107 0210 	add.w	r2, r7, #16
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	68b9      	ldr	r1, [r7, #8]
 800dc4e:	69b8      	ldr	r0, [r7, #24]
 800dc50:	f000 fcda 	bl	800e608 <xQueueGenericSendFromISR>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d003      	beq.n	800dc62 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800dc5a:	f06f 0302 	mvn.w	r3, #2
 800dc5e:	61fb      	str	r3, [r7, #28]
 800dc60:	e028      	b.n	800dcb4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d025      	beq.n	800dcb4 <osMessageQueuePut+0xb0>
 800dc68:	4b15      	ldr	r3, [pc, #84]	; (800dcc0 <osMessageQueuePut+0xbc>)
 800dc6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc6e:	601a      	str	r2, [r3, #0]
 800dc70:	f3bf 8f4f 	dsb	sy
 800dc74:	f3bf 8f6f 	isb	sy
 800dc78:	e01c      	b.n	800dcb4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d002      	beq.n	800dc86 <osMessageQueuePut+0x82>
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d103      	bne.n	800dc8e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800dc86:	f06f 0303 	mvn.w	r3, #3
 800dc8a:	61fb      	str	r3, [r7, #28]
 800dc8c:	e012      	b.n	800dcb4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dc8e:	2300      	movs	r3, #0
 800dc90:	683a      	ldr	r2, [r7, #0]
 800dc92:	68b9      	ldr	r1, [r7, #8]
 800dc94:	69b8      	ldr	r0, [r7, #24]
 800dc96:	f000 fbb9 	bl	800e40c <xQueueGenericSend>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d009      	beq.n	800dcb4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d003      	beq.n	800dcae <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800dca6:	f06f 0301 	mvn.w	r3, #1
 800dcaa:	61fb      	str	r3, [r7, #28]
 800dcac:	e002      	b.n	800dcb4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800dcae:	f06f 0302 	mvn.w	r3, #2
 800dcb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dcb4:	69fb      	ldr	r3, [r7, #28]
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3720      	adds	r7, #32
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	e000ed04 	.word	0xe000ed04

0800dcc4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b088      	sub	sp, #32
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
 800dcd0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcda:	f3ef 8305 	mrs	r3, IPSR
 800dcde:	617b      	str	r3, [r7, #20]
  return(result);
 800dce0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d028      	beq.n	800dd38 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d005      	beq.n	800dcf8 <osMessageQueueGet+0x34>
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d002      	beq.n	800dcf8 <osMessageQueueGet+0x34>
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d003      	beq.n	800dd00 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800dcf8:	f06f 0303 	mvn.w	r3, #3
 800dcfc:	61fb      	str	r3, [r7, #28]
 800dcfe:	e037      	b.n	800dd70 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800dd00:	2300      	movs	r3, #0
 800dd02:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dd04:	f107 0310 	add.w	r3, r7, #16
 800dd08:	461a      	mov	r2, r3
 800dd0a:	68b9      	ldr	r1, [r7, #8]
 800dd0c:	69b8      	ldr	r0, [r7, #24]
 800dd0e:	f000 ff03 	bl	800eb18 <xQueueReceiveFromISR>
 800dd12:	4603      	mov	r3, r0
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d003      	beq.n	800dd20 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800dd18:	f06f 0302 	mvn.w	r3, #2
 800dd1c:	61fb      	str	r3, [r7, #28]
 800dd1e:	e027      	b.n	800dd70 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d024      	beq.n	800dd70 <osMessageQueueGet+0xac>
 800dd26:	4b15      	ldr	r3, [pc, #84]	; (800dd7c <osMessageQueueGet+0xb8>)
 800dd28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd2c:	601a      	str	r2, [r3, #0]
 800dd2e:	f3bf 8f4f 	dsb	sy
 800dd32:	f3bf 8f6f 	isb	sy
 800dd36:	e01b      	b.n	800dd70 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d002      	beq.n	800dd44 <osMessageQueueGet+0x80>
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d103      	bne.n	800dd4c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800dd44:	f06f 0303 	mvn.w	r3, #3
 800dd48:	61fb      	str	r3, [r7, #28]
 800dd4a:	e011      	b.n	800dd70 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dd4c:	683a      	ldr	r2, [r7, #0]
 800dd4e:	68b9      	ldr	r1, [r7, #8]
 800dd50:	69b8      	ldr	r0, [r7, #24]
 800dd52:	f000 fcf5 	bl	800e740 <xQueueReceive>
 800dd56:	4603      	mov	r3, r0
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d009      	beq.n	800dd70 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d003      	beq.n	800dd6a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800dd62:	f06f 0301 	mvn.w	r3, #1
 800dd66:	61fb      	str	r3, [r7, #28]
 800dd68:	e002      	b.n	800dd70 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800dd6a:	f06f 0302 	mvn.w	r3, #2
 800dd6e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dd70:	69fb      	ldr	r3, [r7, #28]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3720      	adds	r7, #32
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	e000ed04 	.word	0xe000ed04

0800dd80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dd80:	b480      	push	{r7}
 800dd82:	b085      	sub	sp, #20
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	4a07      	ldr	r2, [pc, #28]	; (800ddac <vApplicationGetIdleTaskMemory+0x2c>)
 800dd90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	4a06      	ldr	r2, [pc, #24]	; (800ddb0 <vApplicationGetIdleTaskMemory+0x30>)
 800dd96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2280      	movs	r2, #128	; 0x80
 800dd9c:	601a      	str	r2, [r3, #0]
}
 800dd9e:	bf00      	nop
 800dda0:	3714      	adds	r7, #20
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr
 800ddaa:	bf00      	nop
 800ddac:	20008d08 	.word	0x20008d08
 800ddb0:	20008dc4 	.word	0x20008dc4

0800ddb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ddb4:	b480      	push	{r7}
 800ddb6:	b085      	sub	sp, #20
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	60f8      	str	r0, [r7, #12]
 800ddbc:	60b9      	str	r1, [r7, #8]
 800ddbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	4a07      	ldr	r2, [pc, #28]	; (800dde0 <vApplicationGetTimerTaskMemory+0x2c>)
 800ddc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	4a06      	ldr	r2, [pc, #24]	; (800dde4 <vApplicationGetTimerTaskMemory+0x30>)
 800ddca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ddd2:	601a      	str	r2, [r3, #0]
}
 800ddd4:	bf00      	nop
 800ddd6:	3714      	adds	r7, #20
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr
 800dde0:	20008fc4 	.word	0x20008fc4
 800dde4:	20009080 	.word	0x20009080

0800dde8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dde8:	b480      	push	{r7}
 800ddea:	b083      	sub	sp, #12
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f103 0208 	add.w	r2, r3, #8
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f103 0208 	add.w	r2, r3, #8
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f103 0208 	add.w	r2, r3, #8
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2200      	movs	r2, #0
 800de1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800de1c:	bf00      	nop
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr

0800de28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2200      	movs	r2, #0
 800de34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800de36:	bf00      	nop
 800de38:	370c      	adds	r7, #12
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr

0800de42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de42:	b480      	push	{r7}
 800de44:	b085      	sub	sp, #20
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
 800de4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	689a      	ldr	r2, [r3, #8]
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	683a      	ldr	r2, [r7, #0]
 800de66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	683a      	ldr	r2, [r7, #0]
 800de6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	687a      	ldr	r2, [r7, #4]
 800de72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	1c5a      	adds	r2, r3, #1
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	601a      	str	r2, [r3, #0]
}
 800de7e:	bf00      	nop
 800de80:	3714      	adds	r7, #20
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr

0800de8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de8a:	b480      	push	{r7}
 800de8c:	b085      	sub	sp, #20
 800de8e:	af00      	add	r7, sp, #0
 800de90:	6078      	str	r0, [r7, #4]
 800de92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dea0:	d103      	bne.n	800deaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	691b      	ldr	r3, [r3, #16]
 800dea6:	60fb      	str	r3, [r7, #12]
 800dea8:	e00c      	b.n	800dec4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	3308      	adds	r3, #8
 800deae:	60fb      	str	r3, [r7, #12]
 800deb0:	e002      	b.n	800deb8 <vListInsert+0x2e>
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	60fb      	str	r3, [r7, #12]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	68ba      	ldr	r2, [r7, #8]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d2f6      	bcs.n	800deb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	685a      	ldr	r2, [r3, #4]
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	683a      	ldr	r2, [r7, #0]
 800ded2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	68fa      	ldr	r2, [r7, #12]
 800ded8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	683a      	ldr	r2, [r7, #0]
 800dede:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	1c5a      	adds	r2, r3, #1
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	601a      	str	r2, [r3, #0]
}
 800def0:	bf00      	nop
 800def2:	3714      	adds	r7, #20
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	691b      	ldr	r3, [r3, #16]
 800df08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	687a      	ldr	r2, [r7, #4]
 800df10:	6892      	ldr	r2, [r2, #8]
 800df12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	689b      	ldr	r3, [r3, #8]
 800df18:	687a      	ldr	r2, [r7, #4]
 800df1a:	6852      	ldr	r2, [r2, #4]
 800df1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	429a      	cmp	r2, r3
 800df26:	d103      	bne.n	800df30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	689a      	ldr	r2, [r3, #8]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2200      	movs	r2, #0
 800df34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	1e5a      	subs	r2, r3, #1
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
}
 800df44:	4618      	mov	r0, r3
 800df46:	3714      	adds	r7, #20
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr

0800df50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d10a      	bne.n	800df7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800df64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df68:	f383 8811 	msr	BASEPRI, r3
 800df6c:	f3bf 8f6f 	isb	sy
 800df70:	f3bf 8f4f 	dsb	sy
 800df74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800df76:	bf00      	nop
 800df78:	e7fe      	b.n	800df78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800df7a:	f002 fcd3 	bl	8010924 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df86:	68f9      	ldr	r1, [r7, #12]
 800df88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800df8a:	fb01 f303 	mul.w	r3, r1, r3
 800df8e:	441a      	add	r2, r3
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2200      	movs	r2, #0
 800df98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfaa:	3b01      	subs	r3, #1
 800dfac:	68f9      	ldr	r1, [r7, #12]
 800dfae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dfb0:	fb01 f303 	mul.w	r3, r1, r3
 800dfb4:	441a      	add	r2, r3
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	22ff      	movs	r2, #255	; 0xff
 800dfbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	22ff      	movs	r2, #255	; 0xff
 800dfc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d114      	bne.n	800dffa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	691b      	ldr	r3, [r3, #16]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d01a      	beq.n	800e00e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	3310      	adds	r3, #16
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f001 fc75 	bl	800f8cc <xTaskRemoveFromEventList>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d012      	beq.n	800e00e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dfe8:	4b0c      	ldr	r3, [pc, #48]	; (800e01c <xQueueGenericReset+0xcc>)
 800dfea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfee:	601a      	str	r2, [r3, #0]
 800dff0:	f3bf 8f4f 	dsb	sy
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	e009      	b.n	800e00e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	3310      	adds	r3, #16
 800dffe:	4618      	mov	r0, r3
 800e000:	f7ff fef2 	bl	800dde8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	3324      	adds	r3, #36	; 0x24
 800e008:	4618      	mov	r0, r3
 800e00a:	f7ff feed 	bl	800dde8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e00e:	f002 fcb9 	bl	8010984 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e012:	2301      	movs	r3, #1
}
 800e014:	4618      	mov	r0, r3
 800e016:	3710      	adds	r7, #16
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	e000ed04 	.word	0xe000ed04

0800e020 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e020:	b580      	push	{r7, lr}
 800e022:	b08e      	sub	sp, #56	; 0x38
 800e024:	af02      	add	r7, sp, #8
 800e026:	60f8      	str	r0, [r7, #12]
 800e028:	60b9      	str	r1, [r7, #8]
 800e02a:	607a      	str	r2, [r7, #4]
 800e02c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d10a      	bne.n	800e04a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e038:	f383 8811 	msr	BASEPRI, r3
 800e03c:	f3bf 8f6f 	isb	sy
 800e040:	f3bf 8f4f 	dsb	sy
 800e044:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e046:	bf00      	nop
 800e048:	e7fe      	b.n	800e048 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d10a      	bne.n	800e066 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e054:	f383 8811 	msr	BASEPRI, r3
 800e058:	f3bf 8f6f 	isb	sy
 800e05c:	f3bf 8f4f 	dsb	sy
 800e060:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e062:	bf00      	nop
 800e064:	e7fe      	b.n	800e064 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d002      	beq.n	800e072 <xQueueGenericCreateStatic+0x52>
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d001      	beq.n	800e076 <xQueueGenericCreateStatic+0x56>
 800e072:	2301      	movs	r3, #1
 800e074:	e000      	b.n	800e078 <xQueueGenericCreateStatic+0x58>
 800e076:	2300      	movs	r3, #0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10a      	bne.n	800e092 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e080:	f383 8811 	msr	BASEPRI, r3
 800e084:	f3bf 8f6f 	isb	sy
 800e088:	f3bf 8f4f 	dsb	sy
 800e08c:	623b      	str	r3, [r7, #32]
}
 800e08e:	bf00      	nop
 800e090:	e7fe      	b.n	800e090 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d102      	bne.n	800e09e <xQueueGenericCreateStatic+0x7e>
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d101      	bne.n	800e0a2 <xQueueGenericCreateStatic+0x82>
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e000      	b.n	800e0a4 <xQueueGenericCreateStatic+0x84>
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d10a      	bne.n	800e0be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ac:	f383 8811 	msr	BASEPRI, r3
 800e0b0:	f3bf 8f6f 	isb	sy
 800e0b4:	f3bf 8f4f 	dsb	sy
 800e0b8:	61fb      	str	r3, [r7, #28]
}
 800e0ba:	bf00      	nop
 800e0bc:	e7fe      	b.n	800e0bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e0be:	2350      	movs	r3, #80	; 0x50
 800e0c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	2b50      	cmp	r3, #80	; 0x50
 800e0c6:	d00a      	beq.n	800e0de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0cc:	f383 8811 	msr	BASEPRI, r3
 800e0d0:	f3bf 8f6f 	isb	sy
 800e0d4:	f3bf 8f4f 	dsb	sy
 800e0d8:	61bb      	str	r3, [r7, #24]
}
 800e0da:	bf00      	nop
 800e0dc:	e7fe      	b.n	800e0dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e0de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00d      	beq.n	800e106 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e0f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	687a      	ldr	r2, [r7, #4]
 800e0fe:	68b9      	ldr	r1, [r7, #8]
 800e100:	68f8      	ldr	r0, [r7, #12]
 800e102:	f000 f83f 	bl	800e184 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e108:	4618      	mov	r0, r3
 800e10a:	3730      	adds	r7, #48	; 0x30
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e110:	b580      	push	{r7, lr}
 800e112:	b08a      	sub	sp, #40	; 0x28
 800e114:	af02      	add	r7, sp, #8
 800e116:	60f8      	str	r0, [r7, #12]
 800e118:	60b9      	str	r1, [r7, #8]
 800e11a:	4613      	mov	r3, r2
 800e11c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10a      	bne.n	800e13a <xQueueGenericCreate+0x2a>
	__asm volatile
 800e124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	613b      	str	r3, [r7, #16]
}
 800e136:	bf00      	nop
 800e138:	e7fe      	b.n	800e138 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	68ba      	ldr	r2, [r7, #8]
 800e13e:	fb02 f303 	mul.w	r3, r2, r3
 800e142:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	3350      	adds	r3, #80	; 0x50
 800e148:	4618      	mov	r0, r3
 800e14a:	f002 fd0d 	bl	8010b68 <pvPortMalloc>
 800e14e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e150:	69bb      	ldr	r3, [r7, #24]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d011      	beq.n	800e17a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e156:	69bb      	ldr	r3, [r7, #24]
 800e158:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	3350      	adds	r3, #80	; 0x50
 800e15e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e160:	69bb      	ldr	r3, [r7, #24]
 800e162:	2200      	movs	r2, #0
 800e164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e168:	79fa      	ldrb	r2, [r7, #7]
 800e16a:	69bb      	ldr	r3, [r7, #24]
 800e16c:	9300      	str	r3, [sp, #0]
 800e16e:	4613      	mov	r3, r2
 800e170:	697a      	ldr	r2, [r7, #20]
 800e172:	68b9      	ldr	r1, [r7, #8]
 800e174:	68f8      	ldr	r0, [r7, #12]
 800e176:	f000 f805 	bl	800e184 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e17a:	69bb      	ldr	r3, [r7, #24]
	}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3720      	adds	r7, #32
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af00      	add	r7, sp, #0
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	607a      	str	r2, [r7, #4]
 800e190:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d103      	bne.n	800e1a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e198:	69bb      	ldr	r3, [r7, #24]
 800e19a:	69ba      	ldr	r2, [r7, #24]
 800e19c:	601a      	str	r2, [r3, #0]
 800e19e:	e002      	b.n	800e1a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e1a6:	69bb      	ldr	r3, [r7, #24]
 800e1a8:	68fa      	ldr	r2, [r7, #12]
 800e1aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e1ac:	69bb      	ldr	r3, [r7, #24]
 800e1ae:	68ba      	ldr	r2, [r7, #8]
 800e1b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e1b2:	2101      	movs	r1, #1
 800e1b4:	69b8      	ldr	r0, [r7, #24]
 800e1b6:	f7ff fecb 	bl	800df50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e1ba:	69bb      	ldr	r3, [r7, #24]
 800e1bc:	78fa      	ldrb	r2, [r7, #3]
 800e1be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e1c2:	bf00      	nop
 800e1c4:	3710      	adds	r7, #16
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}

0800e1ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e1ca:	b580      	push	{r7, lr}
 800e1cc:	b082      	sub	sp, #8
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d00e      	beq.n	800e1f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	2100      	movs	r1, #0
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f000 f90b 	bl	800e40c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e1f6:	bf00      	nop
 800e1f8:	3708      	adds	r7, #8
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}

0800e1fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e1fe:	b580      	push	{r7, lr}
 800e200:	b086      	sub	sp, #24
 800e202:	af00      	add	r7, sp, #0
 800e204:	4603      	mov	r3, r0
 800e206:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e208:	2301      	movs	r3, #1
 800e20a:	617b      	str	r3, [r7, #20]
 800e20c:	2300      	movs	r3, #0
 800e20e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e210:	79fb      	ldrb	r3, [r7, #7]
 800e212:	461a      	mov	r2, r3
 800e214:	6939      	ldr	r1, [r7, #16]
 800e216:	6978      	ldr	r0, [r7, #20]
 800e218:	f7ff ff7a 	bl	800e110 <xQueueGenericCreate>
 800e21c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e21e:	68f8      	ldr	r0, [r7, #12]
 800e220:	f7ff ffd3 	bl	800e1ca <prvInitialiseMutex>

		return xNewQueue;
 800e224:	68fb      	ldr	r3, [r7, #12]
	}
 800e226:	4618      	mov	r0, r3
 800e228:	3718      	adds	r7, #24
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}

0800e22e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e22e:	b580      	push	{r7, lr}
 800e230:	b088      	sub	sp, #32
 800e232:	af02      	add	r7, sp, #8
 800e234:	4603      	mov	r3, r0
 800e236:	6039      	str	r1, [r7, #0]
 800e238:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e23a:	2301      	movs	r3, #1
 800e23c:	617b      	str	r3, [r7, #20]
 800e23e:	2300      	movs	r3, #0
 800e240:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e242:	79fb      	ldrb	r3, [r7, #7]
 800e244:	9300      	str	r3, [sp, #0]
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	2200      	movs	r2, #0
 800e24a:	6939      	ldr	r1, [r7, #16]
 800e24c:	6978      	ldr	r0, [r7, #20]
 800e24e:	f7ff fee7 	bl	800e020 <xQueueGenericCreateStatic>
 800e252:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e254:	68f8      	ldr	r0, [r7, #12]
 800e256:	f7ff ffb8 	bl	800e1ca <prvInitialiseMutex>

		return xNewQueue;
 800e25a:	68fb      	ldr	r3, [r7, #12]
	}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3718      	adds	r7, #24
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e264:	b590      	push	{r4, r7, lr}
 800e266:	b087      	sub	sp, #28
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d10a      	bne.n	800e28c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800e276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27a:	f383 8811 	msr	BASEPRI, r3
 800e27e:	f3bf 8f6f 	isb	sy
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	60fb      	str	r3, [r7, #12]
}
 800e288:	bf00      	nop
 800e28a:	e7fe      	b.n	800e28a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	689c      	ldr	r4, [r3, #8]
 800e290:	f001 fcde 	bl	800fc50 <xTaskGetCurrentTaskHandle>
 800e294:	4603      	mov	r3, r0
 800e296:	429c      	cmp	r4, r3
 800e298:	d111      	bne.n	800e2be <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	68db      	ldr	r3, [r3, #12]
 800e29e:	1e5a      	subs	r2, r3, #1
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d105      	bne.n	800e2b8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	2100      	movs	r1, #0
 800e2b2:	6938      	ldr	r0, [r7, #16]
 800e2b4:	f000 f8aa 	bl	800e40c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	617b      	str	r3, [r7, #20]
 800e2bc:	e001      	b.n	800e2c2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e2c2:	697b      	ldr	r3, [r7, #20]
	}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	371c      	adds	r7, #28
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd90      	pop	{r4, r7, pc}

0800e2cc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e2cc:	b590      	push	{r4, r7, lr}
 800e2ce:	b087      	sub	sp, #28
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d10a      	bne.n	800e2f6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800e2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e4:	f383 8811 	msr	BASEPRI, r3
 800e2e8:	f3bf 8f6f 	isb	sy
 800e2ec:	f3bf 8f4f 	dsb	sy
 800e2f0:	60fb      	str	r3, [r7, #12]
}
 800e2f2:	bf00      	nop
 800e2f4:	e7fe      	b.n	800e2f4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	689c      	ldr	r4, [r3, #8]
 800e2fa:	f001 fca9 	bl	800fc50 <xTaskGetCurrentTaskHandle>
 800e2fe:	4603      	mov	r3, r0
 800e300:	429c      	cmp	r4, r3
 800e302:	d107      	bne.n	800e314 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	1c5a      	adds	r2, r3, #1
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e30e:	2301      	movs	r3, #1
 800e310:	617b      	str	r3, [r7, #20]
 800e312:	e00c      	b.n	800e32e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e314:	6839      	ldr	r1, [r7, #0]
 800e316:	6938      	ldr	r0, [r7, #16]
 800e318:	f000 faf2 	bl	800e900 <xQueueSemaphoreTake>
 800e31c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d004      	beq.n	800e32e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	1c5a      	adds	r2, r3, #1
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e32e:	697b      	ldr	r3, [r7, #20]
	}
 800e330:	4618      	mov	r0, r3
 800e332:	371c      	adds	r7, #28
 800e334:	46bd      	mov	sp, r7
 800e336:	bd90      	pop	{r4, r7, pc}

0800e338 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b08a      	sub	sp, #40	; 0x28
 800e33c:	af02      	add	r7, sp, #8
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d10a      	bne.n	800e360 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800e34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e34e:	f383 8811 	msr	BASEPRI, r3
 800e352:	f3bf 8f6f 	isb	sy
 800e356:	f3bf 8f4f 	dsb	sy
 800e35a:	61bb      	str	r3, [r7, #24]
}
 800e35c:	bf00      	nop
 800e35e:	e7fe      	b.n	800e35e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e360:	68ba      	ldr	r2, [r7, #8]
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	429a      	cmp	r2, r3
 800e366:	d90a      	bls.n	800e37e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800e368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36c:	f383 8811 	msr	BASEPRI, r3
 800e370:	f3bf 8f6f 	isb	sy
 800e374:	f3bf 8f4f 	dsb	sy
 800e378:	617b      	str	r3, [r7, #20]
}
 800e37a:	bf00      	nop
 800e37c:	e7fe      	b.n	800e37c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e37e:	2302      	movs	r3, #2
 800e380:	9300      	str	r3, [sp, #0]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2200      	movs	r2, #0
 800e386:	2100      	movs	r1, #0
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f7ff fe49 	bl	800e020 <xQueueGenericCreateStatic>
 800e38e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d002      	beq.n	800e39c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	68ba      	ldr	r2, [r7, #8]
 800e39a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e39c:	69fb      	ldr	r3, [r7, #28]
	}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3720      	adds	r7, #32
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}

0800e3a6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b086      	sub	sp, #24
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
 800e3ae:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d10a      	bne.n	800e3cc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800e3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ba:	f383 8811 	msr	BASEPRI, r3
 800e3be:	f3bf 8f6f 	isb	sy
 800e3c2:	f3bf 8f4f 	dsb	sy
 800e3c6:	613b      	str	r3, [r7, #16]
}
 800e3c8:	bf00      	nop
 800e3ca:	e7fe      	b.n	800e3ca <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e3cc:	683a      	ldr	r2, [r7, #0]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d90a      	bls.n	800e3ea <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800e3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d8:	f383 8811 	msr	BASEPRI, r3
 800e3dc:	f3bf 8f6f 	isb	sy
 800e3e0:	f3bf 8f4f 	dsb	sy
 800e3e4:	60fb      	str	r3, [r7, #12]
}
 800e3e6:	bf00      	nop
 800e3e8:	e7fe      	b.n	800e3e8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e3ea:	2202      	movs	r2, #2
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f7ff fe8e 	bl	800e110 <xQueueGenericCreate>
 800e3f4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d002      	beq.n	800e402 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	683a      	ldr	r2, [r7, #0]
 800e400:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e402:	697b      	ldr	r3, [r7, #20]
	}
 800e404:	4618      	mov	r0, r3
 800e406:	3718      	adds	r7, #24
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b08e      	sub	sp, #56	; 0x38
 800e410:	af00      	add	r7, sp, #0
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	60b9      	str	r1, [r7, #8]
 800e416:	607a      	str	r2, [r7, #4]
 800e418:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e41a:	2300      	movs	r3, #0
 800e41c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e424:	2b00      	cmp	r3, #0
 800e426:	d10a      	bne.n	800e43e <xQueueGenericSend+0x32>
	__asm volatile
 800e428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e42c:	f383 8811 	msr	BASEPRI, r3
 800e430:	f3bf 8f6f 	isb	sy
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e43a:	bf00      	nop
 800e43c:	e7fe      	b.n	800e43c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d103      	bne.n	800e44c <xQueueGenericSend+0x40>
 800e444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d101      	bne.n	800e450 <xQueueGenericSend+0x44>
 800e44c:	2301      	movs	r3, #1
 800e44e:	e000      	b.n	800e452 <xQueueGenericSend+0x46>
 800e450:	2300      	movs	r3, #0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d10a      	bne.n	800e46c <xQueueGenericSend+0x60>
	__asm volatile
 800e456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45a:	f383 8811 	msr	BASEPRI, r3
 800e45e:	f3bf 8f6f 	isb	sy
 800e462:	f3bf 8f4f 	dsb	sy
 800e466:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e468:	bf00      	nop
 800e46a:	e7fe      	b.n	800e46a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	2b02      	cmp	r3, #2
 800e470:	d103      	bne.n	800e47a <xQueueGenericSend+0x6e>
 800e472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e476:	2b01      	cmp	r3, #1
 800e478:	d101      	bne.n	800e47e <xQueueGenericSend+0x72>
 800e47a:	2301      	movs	r3, #1
 800e47c:	e000      	b.n	800e480 <xQueueGenericSend+0x74>
 800e47e:	2300      	movs	r3, #0
 800e480:	2b00      	cmp	r3, #0
 800e482:	d10a      	bne.n	800e49a <xQueueGenericSend+0x8e>
	__asm volatile
 800e484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e488:	f383 8811 	msr	BASEPRI, r3
 800e48c:	f3bf 8f6f 	isb	sy
 800e490:	f3bf 8f4f 	dsb	sy
 800e494:	623b      	str	r3, [r7, #32]
}
 800e496:	bf00      	nop
 800e498:	e7fe      	b.n	800e498 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e49a:	f001 fbe9 	bl	800fc70 <xTaskGetSchedulerState>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d102      	bne.n	800e4aa <xQueueGenericSend+0x9e>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d101      	bne.n	800e4ae <xQueueGenericSend+0xa2>
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	e000      	b.n	800e4b0 <xQueueGenericSend+0xa4>
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d10a      	bne.n	800e4ca <xQueueGenericSend+0xbe>
	__asm volatile
 800e4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	61fb      	str	r3, [r7, #28]
}
 800e4c6:	bf00      	nop
 800e4c8:	e7fe      	b.n	800e4c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e4ca:	f002 fa2b 	bl	8010924 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d302      	bcc.n	800e4e0 <xQueueGenericSend+0xd4>
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	2b02      	cmp	r3, #2
 800e4de:	d129      	bne.n	800e534 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4e0:	683a      	ldr	r2, [r7, #0]
 800e4e2:	68b9      	ldr	r1, [r7, #8]
 800e4e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4e6:	f000 fbd2 	bl	800ec8e <prvCopyDataToQueue>
 800e4ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d010      	beq.n	800e516 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f6:	3324      	adds	r3, #36	; 0x24
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f001 f9e7 	bl	800f8cc <xTaskRemoveFromEventList>
 800e4fe:	4603      	mov	r3, r0
 800e500:	2b00      	cmp	r3, #0
 800e502:	d013      	beq.n	800e52c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e504:	4b3f      	ldr	r3, [pc, #252]	; (800e604 <xQueueGenericSend+0x1f8>)
 800e506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e50a:	601a      	str	r2, [r3, #0]
 800e50c:	f3bf 8f4f 	dsb	sy
 800e510:	f3bf 8f6f 	isb	sy
 800e514:	e00a      	b.n	800e52c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d007      	beq.n	800e52c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e51c:	4b39      	ldr	r3, [pc, #228]	; (800e604 <xQueueGenericSend+0x1f8>)
 800e51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e522:	601a      	str	r2, [r3, #0]
 800e524:	f3bf 8f4f 	dsb	sy
 800e528:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e52c:	f002 fa2a 	bl	8010984 <vPortExitCritical>
				return pdPASS;
 800e530:	2301      	movs	r3, #1
 800e532:	e063      	b.n	800e5fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d103      	bne.n	800e542 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e53a:	f002 fa23 	bl	8010984 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e53e:	2300      	movs	r3, #0
 800e540:	e05c      	b.n	800e5fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e544:	2b00      	cmp	r3, #0
 800e546:	d106      	bne.n	800e556 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e548:	f107 0314 	add.w	r3, r7, #20
 800e54c:	4618      	mov	r0, r3
 800e54e:	f001 fa21 	bl	800f994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e552:	2301      	movs	r3, #1
 800e554:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e556:	f002 fa15 	bl	8010984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e55a:	f000 ff8d 	bl	800f478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e55e:	f002 f9e1 	bl	8010924 <vPortEnterCritical>
 800e562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e568:	b25b      	sxtb	r3, r3
 800e56a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e56e:	d103      	bne.n	800e578 <xQueueGenericSend+0x16c>
 800e570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e572:	2200      	movs	r2, #0
 800e574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e57e:	b25b      	sxtb	r3, r3
 800e580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e584:	d103      	bne.n	800e58e <xQueueGenericSend+0x182>
 800e586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e588:	2200      	movs	r2, #0
 800e58a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e58e:	f002 f9f9 	bl	8010984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e592:	1d3a      	adds	r2, r7, #4
 800e594:	f107 0314 	add.w	r3, r7, #20
 800e598:	4611      	mov	r1, r2
 800e59a:	4618      	mov	r0, r3
 800e59c:	f001 fa10 	bl	800f9c0 <xTaskCheckForTimeOut>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d124      	bne.n	800e5f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e5a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5a8:	f000 fc69 	bl	800ee7e <prvIsQueueFull>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d018      	beq.n	800e5e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b4:	3310      	adds	r3, #16
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	4611      	mov	r1, r2
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f001 f936 	bl	800f82c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e5c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5c2:	f000 fbf4 	bl	800edae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e5c6:	f000 ff65 	bl	800f494 <xTaskResumeAll>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	f47f af7c 	bne.w	800e4ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e5d2:	4b0c      	ldr	r3, [pc, #48]	; (800e604 <xQueueGenericSend+0x1f8>)
 800e5d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5d8:	601a      	str	r2, [r3, #0]
 800e5da:	f3bf 8f4f 	dsb	sy
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	e772      	b.n	800e4ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e5e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5e6:	f000 fbe2 	bl	800edae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5ea:	f000 ff53 	bl	800f494 <xTaskResumeAll>
 800e5ee:	e76c      	b.n	800e4ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e5f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5f2:	f000 fbdc 	bl	800edae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5f6:	f000 ff4d 	bl	800f494 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e5fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3738      	adds	r7, #56	; 0x38
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}
 800e604:	e000ed04 	.word	0xe000ed04

0800e608 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b090      	sub	sp, #64	; 0x40
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	60b9      	str	r1, [r7, #8]
 800e612:	607a      	str	r2, [r7, #4]
 800e614:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d10a      	bne.n	800e636 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e624:	f383 8811 	msr	BASEPRI, r3
 800e628:	f3bf 8f6f 	isb	sy
 800e62c:	f3bf 8f4f 	dsb	sy
 800e630:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e632:	bf00      	nop
 800e634:	e7fe      	b.n	800e634 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d103      	bne.n	800e644 <xQueueGenericSendFromISR+0x3c>
 800e63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e640:	2b00      	cmp	r3, #0
 800e642:	d101      	bne.n	800e648 <xQueueGenericSendFromISR+0x40>
 800e644:	2301      	movs	r3, #1
 800e646:	e000      	b.n	800e64a <xQueueGenericSendFromISR+0x42>
 800e648:	2300      	movs	r3, #0
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d10a      	bne.n	800e664 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e652:	f383 8811 	msr	BASEPRI, r3
 800e656:	f3bf 8f6f 	isb	sy
 800e65a:	f3bf 8f4f 	dsb	sy
 800e65e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e660:	bf00      	nop
 800e662:	e7fe      	b.n	800e662 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	2b02      	cmp	r3, #2
 800e668:	d103      	bne.n	800e672 <xQueueGenericSendFromISR+0x6a>
 800e66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e66e:	2b01      	cmp	r3, #1
 800e670:	d101      	bne.n	800e676 <xQueueGenericSendFromISR+0x6e>
 800e672:	2301      	movs	r3, #1
 800e674:	e000      	b.n	800e678 <xQueueGenericSendFromISR+0x70>
 800e676:	2300      	movs	r3, #0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d10a      	bne.n	800e692 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e680:	f383 8811 	msr	BASEPRI, r3
 800e684:	f3bf 8f6f 	isb	sy
 800e688:	f3bf 8f4f 	dsb	sy
 800e68c:	623b      	str	r3, [r7, #32]
}
 800e68e:	bf00      	nop
 800e690:	e7fe      	b.n	800e690 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e692:	f002 fa29 	bl	8010ae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e696:	f3ef 8211 	mrs	r2, BASEPRI
 800e69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e69e:	f383 8811 	msr	BASEPRI, r3
 800e6a2:	f3bf 8f6f 	isb	sy
 800e6a6:	f3bf 8f4f 	dsb	sy
 800e6aa:	61fa      	str	r2, [r7, #28]
 800e6ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e6ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d302      	bcc.n	800e6c4 <xQueueGenericSendFromISR+0xbc>
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	2b02      	cmp	r3, #2
 800e6c2:	d12f      	bne.n	800e724 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e6d4:	683a      	ldr	r2, [r7, #0]
 800e6d6:	68b9      	ldr	r1, [r7, #8]
 800e6d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e6da:	f000 fad8 	bl	800ec8e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e6de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e6e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6e6:	d112      	bne.n	800e70e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d016      	beq.n	800e71e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f2:	3324      	adds	r3, #36	; 0x24
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f001 f8e9 	bl	800f8cc <xTaskRemoveFromEventList>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d00e      	beq.n	800e71e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d00b      	beq.n	800e71e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2201      	movs	r2, #1
 800e70a:	601a      	str	r2, [r3, #0]
 800e70c:	e007      	b.n	800e71e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e70e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e712:	3301      	adds	r3, #1
 800e714:	b2db      	uxtb	r3, r3
 800e716:	b25a      	sxtb	r2, r3
 800e718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e71e:	2301      	movs	r3, #1
 800e720:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e722:	e001      	b.n	800e728 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e724:	2300      	movs	r3, #0
 800e726:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e72a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e732:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e736:	4618      	mov	r0, r3
 800e738:	3740      	adds	r7, #64	; 0x40
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
	...

0800e740 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b08c      	sub	sp, #48	; 0x30
 800e744:	af00      	add	r7, sp, #0
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	60b9      	str	r1, [r7, #8]
 800e74a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e74c:	2300      	movs	r3, #0
 800e74e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e756:	2b00      	cmp	r3, #0
 800e758:	d10a      	bne.n	800e770 <xQueueReceive+0x30>
	__asm volatile
 800e75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e75e:	f383 8811 	msr	BASEPRI, r3
 800e762:	f3bf 8f6f 	isb	sy
 800e766:	f3bf 8f4f 	dsb	sy
 800e76a:	623b      	str	r3, [r7, #32]
}
 800e76c:	bf00      	nop
 800e76e:	e7fe      	b.n	800e76e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d103      	bne.n	800e77e <xQueueReceive+0x3e>
 800e776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d101      	bne.n	800e782 <xQueueReceive+0x42>
 800e77e:	2301      	movs	r3, #1
 800e780:	e000      	b.n	800e784 <xQueueReceive+0x44>
 800e782:	2300      	movs	r3, #0
 800e784:	2b00      	cmp	r3, #0
 800e786:	d10a      	bne.n	800e79e <xQueueReceive+0x5e>
	__asm volatile
 800e788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78c:	f383 8811 	msr	BASEPRI, r3
 800e790:	f3bf 8f6f 	isb	sy
 800e794:	f3bf 8f4f 	dsb	sy
 800e798:	61fb      	str	r3, [r7, #28]
}
 800e79a:	bf00      	nop
 800e79c:	e7fe      	b.n	800e79c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e79e:	f001 fa67 	bl	800fc70 <xTaskGetSchedulerState>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d102      	bne.n	800e7ae <xQueueReceive+0x6e>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d101      	bne.n	800e7b2 <xQueueReceive+0x72>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e000      	b.n	800e7b4 <xQueueReceive+0x74>
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d10a      	bne.n	800e7ce <xQueueReceive+0x8e>
	__asm volatile
 800e7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7bc:	f383 8811 	msr	BASEPRI, r3
 800e7c0:	f3bf 8f6f 	isb	sy
 800e7c4:	f3bf 8f4f 	dsb	sy
 800e7c8:	61bb      	str	r3, [r7, #24]
}
 800e7ca:	bf00      	nop
 800e7cc:	e7fe      	b.n	800e7cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e7ce:	f002 f8a9 	bl	8010924 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d01f      	beq.n	800e81e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e7de:	68b9      	ldr	r1, [r7, #8]
 800e7e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7e2:	f000 fabe 	bl	800ed62 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e8:	1e5a      	subs	r2, r3, #1
 800e7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f0:	691b      	ldr	r3, [r3, #16]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d00f      	beq.n	800e816 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f8:	3310      	adds	r3, #16
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f001 f866 	bl	800f8cc <xTaskRemoveFromEventList>
 800e800:	4603      	mov	r3, r0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d007      	beq.n	800e816 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e806:	4b3d      	ldr	r3, [pc, #244]	; (800e8fc <xQueueReceive+0x1bc>)
 800e808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e80c:	601a      	str	r2, [r3, #0]
 800e80e:	f3bf 8f4f 	dsb	sy
 800e812:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e816:	f002 f8b5 	bl	8010984 <vPortExitCritical>
				return pdPASS;
 800e81a:	2301      	movs	r3, #1
 800e81c:	e069      	b.n	800e8f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d103      	bne.n	800e82c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e824:	f002 f8ae 	bl	8010984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e828:	2300      	movs	r3, #0
 800e82a:	e062      	b.n	800e8f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d106      	bne.n	800e840 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e832:	f107 0310 	add.w	r3, r7, #16
 800e836:	4618      	mov	r0, r3
 800e838:	f001 f8ac 	bl	800f994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e83c:	2301      	movs	r3, #1
 800e83e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e840:	f002 f8a0 	bl	8010984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e844:	f000 fe18 	bl	800f478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e848:	f002 f86c 	bl	8010924 <vPortEnterCritical>
 800e84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e852:	b25b      	sxtb	r3, r3
 800e854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e858:	d103      	bne.n	800e862 <xQueueReceive+0x122>
 800e85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85c:	2200      	movs	r2, #0
 800e85e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e868:	b25b      	sxtb	r3, r3
 800e86a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e86e:	d103      	bne.n	800e878 <xQueueReceive+0x138>
 800e870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e872:	2200      	movs	r2, #0
 800e874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e878:	f002 f884 	bl	8010984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e87c:	1d3a      	adds	r2, r7, #4
 800e87e:	f107 0310 	add.w	r3, r7, #16
 800e882:	4611      	mov	r1, r2
 800e884:	4618      	mov	r0, r3
 800e886:	f001 f89b 	bl	800f9c0 <xTaskCheckForTimeOut>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d123      	bne.n	800e8d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e892:	f000 fade 	bl	800ee52 <prvIsQueueEmpty>
 800e896:	4603      	mov	r3, r0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d017      	beq.n	800e8cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89e:	3324      	adds	r3, #36	; 0x24
 800e8a0:	687a      	ldr	r2, [r7, #4]
 800e8a2:	4611      	mov	r1, r2
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f000 ffc1 	bl	800f82c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e8aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8ac:	f000 fa7f 	bl	800edae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e8b0:	f000 fdf0 	bl	800f494 <xTaskResumeAll>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d189      	bne.n	800e7ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e8ba:	4b10      	ldr	r3, [pc, #64]	; (800e8fc <xQueueReceive+0x1bc>)
 800e8bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8c0:	601a      	str	r2, [r3, #0]
 800e8c2:	f3bf 8f4f 	dsb	sy
 800e8c6:	f3bf 8f6f 	isb	sy
 800e8ca:	e780      	b.n	800e7ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e8cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8ce:	f000 fa6e 	bl	800edae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e8d2:	f000 fddf 	bl	800f494 <xTaskResumeAll>
 800e8d6:	e77a      	b.n	800e7ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e8d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8da:	f000 fa68 	bl	800edae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e8de:	f000 fdd9 	bl	800f494 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e8e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8e4:	f000 fab5 	bl	800ee52 <prvIsQueueEmpty>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	f43f af6f 	beq.w	800e7ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e8f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3730      	adds	r7, #48	; 0x30
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	e000ed04 	.word	0xe000ed04

0800e900 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b08e      	sub	sp, #56	; 0x38
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e90a:	2300      	movs	r3, #0
 800e90c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e912:	2300      	movs	r3, #0
 800e914:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d10a      	bne.n	800e932 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e920:	f383 8811 	msr	BASEPRI, r3
 800e924:	f3bf 8f6f 	isb	sy
 800e928:	f3bf 8f4f 	dsb	sy
 800e92c:	623b      	str	r3, [r7, #32]
}
 800e92e:	bf00      	nop
 800e930:	e7fe      	b.n	800e930 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00a      	beq.n	800e950 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e93e:	f383 8811 	msr	BASEPRI, r3
 800e942:	f3bf 8f6f 	isb	sy
 800e946:	f3bf 8f4f 	dsb	sy
 800e94a:	61fb      	str	r3, [r7, #28]
}
 800e94c:	bf00      	nop
 800e94e:	e7fe      	b.n	800e94e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e950:	f001 f98e 	bl	800fc70 <xTaskGetSchedulerState>
 800e954:	4603      	mov	r3, r0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d102      	bne.n	800e960 <xQueueSemaphoreTake+0x60>
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d101      	bne.n	800e964 <xQueueSemaphoreTake+0x64>
 800e960:	2301      	movs	r3, #1
 800e962:	e000      	b.n	800e966 <xQueueSemaphoreTake+0x66>
 800e964:	2300      	movs	r3, #0
 800e966:	2b00      	cmp	r3, #0
 800e968:	d10a      	bne.n	800e980 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96e:	f383 8811 	msr	BASEPRI, r3
 800e972:	f3bf 8f6f 	isb	sy
 800e976:	f3bf 8f4f 	dsb	sy
 800e97a:	61bb      	str	r3, [r7, #24]
}
 800e97c:	bf00      	nop
 800e97e:	e7fe      	b.n	800e97e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e980:	f001 ffd0 	bl	8010924 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e988:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d024      	beq.n	800e9da <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e992:	1e5a      	subs	r2, r3, #1
 800e994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e996:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d104      	bne.n	800e9aa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e9a0:	f001 fadc 	bl	800ff5c <pvTaskIncrementMutexHeldCount>
 800e9a4:	4602      	mov	r2, r0
 800e9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ac:	691b      	ldr	r3, [r3, #16]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d00f      	beq.n	800e9d2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b4:	3310      	adds	r3, #16
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f000 ff88 	bl	800f8cc <xTaskRemoveFromEventList>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d007      	beq.n	800e9d2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e9c2:	4b54      	ldr	r3, [pc, #336]	; (800eb14 <xQueueSemaphoreTake+0x214>)
 800e9c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9c8:	601a      	str	r2, [r3, #0]
 800e9ca:	f3bf 8f4f 	dsb	sy
 800e9ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e9d2:	f001 ffd7 	bl	8010984 <vPortExitCritical>
				return pdPASS;
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	e097      	b.n	800eb0a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d111      	bne.n	800ea04 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d00a      	beq.n	800e9fc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ea:	f383 8811 	msr	BASEPRI, r3
 800e9ee:	f3bf 8f6f 	isb	sy
 800e9f2:	f3bf 8f4f 	dsb	sy
 800e9f6:	617b      	str	r3, [r7, #20]
}
 800e9f8:	bf00      	nop
 800e9fa:	e7fe      	b.n	800e9fa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e9fc:	f001 ffc2 	bl	8010984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ea00:	2300      	movs	r3, #0
 800ea02:	e082      	b.n	800eb0a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d106      	bne.n	800ea18 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea0a:	f107 030c 	add.w	r3, r7, #12
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f000 ffc0 	bl	800f994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea14:	2301      	movs	r3, #1
 800ea16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea18:	f001 ffb4 	bl	8010984 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea1c:	f000 fd2c 	bl	800f478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea20:	f001 ff80 	bl	8010924 <vPortEnterCritical>
 800ea24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea2a:	b25b      	sxtb	r3, r3
 800ea2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea30:	d103      	bne.n	800ea3a <xQueueSemaphoreTake+0x13a>
 800ea32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea34:	2200      	movs	r2, #0
 800ea36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea40:	b25b      	sxtb	r3, r3
 800ea42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea46:	d103      	bne.n	800ea50 <xQueueSemaphoreTake+0x150>
 800ea48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea50:	f001 ff98 	bl	8010984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea54:	463a      	mov	r2, r7
 800ea56:	f107 030c 	add.w	r3, r7, #12
 800ea5a:	4611      	mov	r1, r2
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f000 ffaf 	bl	800f9c0 <xTaskCheckForTimeOut>
 800ea62:	4603      	mov	r3, r0
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d132      	bne.n	800eace <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea6a:	f000 f9f2 	bl	800ee52 <prvIsQueueEmpty>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d026      	beq.n	800eac2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d109      	bne.n	800ea90 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ea7c:	f001 ff52 	bl	8010924 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ea80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea82:	689b      	ldr	r3, [r3, #8]
 800ea84:	4618      	mov	r0, r3
 800ea86:	f001 f911 	bl	800fcac <xTaskPriorityInherit>
 800ea8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ea8c:	f001 ff7a 	bl	8010984 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea92:	3324      	adds	r3, #36	; 0x24
 800ea94:	683a      	ldr	r2, [r7, #0]
 800ea96:	4611      	mov	r1, r2
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f000 fec7 	bl	800f82c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eaa0:	f000 f985 	bl	800edae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eaa4:	f000 fcf6 	bl	800f494 <xTaskResumeAll>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	f47f af68 	bne.w	800e980 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800eab0:	4b18      	ldr	r3, [pc, #96]	; (800eb14 <xQueueSemaphoreTake+0x214>)
 800eab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eab6:	601a      	str	r2, [r3, #0]
 800eab8:	f3bf 8f4f 	dsb	sy
 800eabc:	f3bf 8f6f 	isb	sy
 800eac0:	e75e      	b.n	800e980 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800eac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eac4:	f000 f973 	bl	800edae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eac8:	f000 fce4 	bl	800f494 <xTaskResumeAll>
 800eacc:	e758      	b.n	800e980 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800eace:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ead0:	f000 f96d 	bl	800edae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ead4:	f000 fcde 	bl	800f494 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ead8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eada:	f000 f9ba 	bl	800ee52 <prvIsQueueEmpty>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f43f af4d 	beq.w	800e980 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800eae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d00d      	beq.n	800eb08 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800eaec:	f001 ff1a 	bl	8010924 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800eaf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eaf2:	f000 f8b4 	bl	800ec5e <prvGetDisinheritPriorityAfterTimeout>
 800eaf6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800eaf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eafa:	689b      	ldr	r3, [r3, #8]
 800eafc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eafe:	4618      	mov	r0, r3
 800eb00:	f001 f9aa 	bl	800fe58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800eb04:	f001 ff3e 	bl	8010984 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eb08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3738      	adds	r7, #56	; 0x38
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	e000ed04 	.word	0xe000ed04

0800eb18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b08e      	sub	sp, #56	; 0x38
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d10a      	bne.n	800eb44 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800eb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb32:	f383 8811 	msr	BASEPRI, r3
 800eb36:	f3bf 8f6f 	isb	sy
 800eb3a:	f3bf 8f4f 	dsb	sy
 800eb3e:	623b      	str	r3, [r7, #32]
}
 800eb40:	bf00      	nop
 800eb42:	e7fe      	b.n	800eb42 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d103      	bne.n	800eb52 <xQueueReceiveFromISR+0x3a>
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d101      	bne.n	800eb56 <xQueueReceiveFromISR+0x3e>
 800eb52:	2301      	movs	r3, #1
 800eb54:	e000      	b.n	800eb58 <xQueueReceiveFromISR+0x40>
 800eb56:	2300      	movs	r3, #0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d10a      	bne.n	800eb72 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800eb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb60:	f383 8811 	msr	BASEPRI, r3
 800eb64:	f3bf 8f6f 	isb	sy
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	61fb      	str	r3, [r7, #28]
}
 800eb6e:	bf00      	nop
 800eb70:	e7fe      	b.n	800eb70 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb72:	f001 ffb9 	bl	8010ae8 <vPortValidateInterruptPriority>
	__asm volatile
 800eb76:	f3ef 8211 	mrs	r2, BASEPRI
 800eb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7e:	f383 8811 	msr	BASEPRI, r3
 800eb82:	f3bf 8f6f 	isb	sy
 800eb86:	f3bf 8f4f 	dsb	sy
 800eb8a:	61ba      	str	r2, [r7, #24]
 800eb8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800eb8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d02f      	beq.n	800ebfe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800eb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eba8:	68b9      	ldr	r1, [r7, #8]
 800ebaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebac:	f000 f8d9 	bl	800ed62 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ebb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb2:	1e5a      	subs	r2, r3, #1
 800ebb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ebb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebc0:	d112      	bne.n	800ebe8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc4:	691b      	ldr	r3, [r3, #16]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d016      	beq.n	800ebf8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ebca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebcc:	3310      	adds	r3, #16
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f000 fe7c 	bl	800f8cc <xTaskRemoveFromEventList>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d00e      	beq.n	800ebf8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d00b      	beq.n	800ebf8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	601a      	str	r2, [r3, #0]
 800ebe6:	e007      	b.n	800ebf8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ebe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebec:	3301      	adds	r3, #1
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	b25a      	sxtb	r2, r3
 800ebf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	637b      	str	r3, [r7, #52]	; 0x34
 800ebfc:	e001      	b.n	800ec02 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	637b      	str	r3, [r7, #52]	; 0x34
 800ec02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec04:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	f383 8811 	msr	BASEPRI, r3
}
 800ec0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ec0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3738      	adds	r7, #56	; 0x38
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d10a      	bne.n	800ec40 <vQueueDelete+0x28>
	__asm volatile
 800ec2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec2e:	f383 8811 	msr	BASEPRI, r3
 800ec32:	f3bf 8f6f 	isb	sy
 800ec36:	f3bf 8f4f 	dsb	sy
 800ec3a:	60bb      	str	r3, [r7, #8]
}
 800ec3c:	bf00      	nop
 800ec3e:	e7fe      	b.n	800ec3e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ec40:	68f8      	ldr	r0, [r7, #12]
 800ec42:	f000 f95f 	bl	800ef04 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d102      	bne.n	800ec56 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ec50:	68f8      	ldr	r0, [r7, #12]
 800ec52:	f002 f82d 	bl	8010cb0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ec56:	bf00      	nop
 800ec58:	3710      	adds	r7, #16
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}

0800ec5e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ec5e:	b480      	push	{r7}
 800ec60:	b085      	sub	sp, #20
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d006      	beq.n	800ec7c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ec78:	60fb      	str	r3, [r7, #12]
 800ec7a:	e001      	b.n	800ec80 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ec80:	68fb      	ldr	r3, [r7, #12]
	}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3714      	adds	r7, #20
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr

0800ec8e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ec8e:	b580      	push	{r7, lr}
 800ec90:	b086      	sub	sp, #24
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	60f8      	str	r0, [r7, #12]
 800ec96:	60b9      	str	r1, [r7, #8]
 800ec98:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eca2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d10d      	bne.n	800ecc8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d14d      	bne.n	800ed50 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	689b      	ldr	r3, [r3, #8]
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f001 f85f 	bl	800fd7c <xTaskPriorityDisinherit>
 800ecbe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	609a      	str	r2, [r3, #8]
 800ecc6:	e043      	b.n	800ed50 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d119      	bne.n	800ed02 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	6858      	ldr	r0, [r3, #4]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	68b9      	ldr	r1, [r7, #8]
 800ecda:	f002 fa57 	bl	801118c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	685a      	ldr	r2, [r3, #4]
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ece6:	441a      	add	r2, r3
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	685a      	ldr	r2, [r3, #4]
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	689b      	ldr	r3, [r3, #8]
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d32b      	bcc.n	800ed50 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	605a      	str	r2, [r3, #4]
 800ed00:	e026      	b.n	800ed50 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	68d8      	ldr	r0, [r3, #12]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	68b9      	ldr	r1, [r7, #8]
 800ed0e:	f002 fa3d 	bl	801118c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	68da      	ldr	r2, [r3, #12]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed1a:	425b      	negs	r3, r3
 800ed1c:	441a      	add	r2, r3
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	68da      	ldr	r2, [r3, #12]
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d207      	bcs.n	800ed3e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	689a      	ldr	r2, [r3, #8]
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed36:	425b      	negs	r3, r3
 800ed38:	441a      	add	r2, r3
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2b02      	cmp	r3, #2
 800ed42:	d105      	bne.n	800ed50 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d002      	beq.n	800ed50 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	3b01      	subs	r3, #1
 800ed4e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	1c5a      	adds	r2, r3, #1
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ed58:	697b      	ldr	r3, [r7, #20]
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3718      	adds	r7, #24
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ed62:	b580      	push	{r7, lr}
 800ed64:	b082      	sub	sp, #8
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]
 800ed6a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d018      	beq.n	800eda6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	68da      	ldr	r2, [r3, #12]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed7c:	441a      	add	r2, r3
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	68da      	ldr	r2, [r3, #12]
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d303      	bcc.n	800ed96 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	68d9      	ldr	r1, [r3, #12]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed9e:	461a      	mov	r2, r3
 800eda0:	6838      	ldr	r0, [r7, #0]
 800eda2:	f002 f9f3 	bl	801118c <memcpy>
	}
}
 800eda6:	bf00      	nop
 800eda8:	3708      	adds	r7, #8
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}

0800edae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800edae:	b580      	push	{r7, lr}
 800edb0:	b084      	sub	sp, #16
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800edb6:	f001 fdb5 	bl	8010924 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800edc0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800edc2:	e011      	b.n	800ede8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d012      	beq.n	800edf2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	3324      	adds	r3, #36	; 0x24
 800edd0:	4618      	mov	r0, r3
 800edd2:	f000 fd7b 	bl	800f8cc <xTaskRemoveFromEventList>
 800edd6:	4603      	mov	r3, r0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d001      	beq.n	800ede0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eddc:	f000 fe52 	bl	800fa84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ede0:	7bfb      	ldrb	r3, [r7, #15]
 800ede2:	3b01      	subs	r3, #1
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ede8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edec:	2b00      	cmp	r3, #0
 800edee:	dce9      	bgt.n	800edc4 <prvUnlockQueue+0x16>
 800edf0:	e000      	b.n	800edf4 <prvUnlockQueue+0x46>
					break;
 800edf2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	22ff      	movs	r2, #255	; 0xff
 800edf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800edfc:	f001 fdc2 	bl	8010984 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ee00:	f001 fd90 	bl	8010924 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee0a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee0c:	e011      	b.n	800ee32 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	691b      	ldr	r3, [r3, #16]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d012      	beq.n	800ee3c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	3310      	adds	r3, #16
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f000 fd56 	bl	800f8cc <xTaskRemoveFromEventList>
 800ee20:	4603      	mov	r3, r0
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d001      	beq.n	800ee2a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ee26:	f000 fe2d 	bl	800fa84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ee2a:	7bbb      	ldrb	r3, [r7, #14]
 800ee2c:	3b01      	subs	r3, #1
 800ee2e:	b2db      	uxtb	r3, r3
 800ee30:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	dce9      	bgt.n	800ee0e <prvUnlockQueue+0x60>
 800ee3a:	e000      	b.n	800ee3e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ee3c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	22ff      	movs	r2, #255	; 0xff
 800ee42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ee46:	f001 fd9d 	bl	8010984 <vPortExitCritical>
}
 800ee4a:	bf00      	nop
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}

0800ee52 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ee52:	b580      	push	{r7, lr}
 800ee54:	b084      	sub	sp, #16
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ee5a:	f001 fd63 	bl	8010924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d102      	bne.n	800ee6c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ee66:	2301      	movs	r3, #1
 800ee68:	60fb      	str	r3, [r7, #12]
 800ee6a:	e001      	b.n	800ee70 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ee70:	f001 fd88 	bl	8010984 <vPortExitCritical>

	return xReturn;
 800ee74:	68fb      	ldr	r3, [r7, #12]
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3710      	adds	r7, #16
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}

0800ee7e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ee7e:	b580      	push	{r7, lr}
 800ee80:	b084      	sub	sp, #16
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ee86:	f001 fd4d 	bl	8010924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d102      	bne.n	800ee9c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ee96:	2301      	movs	r3, #1
 800ee98:	60fb      	str	r3, [r7, #12]
 800ee9a:	e001      	b.n	800eea0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eea0:	f001 fd70 	bl	8010984 <vPortExitCritical>

	return xReturn;
 800eea4:	68fb      	ldr	r3, [r7, #12]
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
	...

0800eeb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b085      	sub	sp, #20
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eeba:	2300      	movs	r3, #0
 800eebc:	60fb      	str	r3, [r7, #12]
 800eebe:	e014      	b.n	800eeea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eec0:	4a0f      	ldr	r2, [pc, #60]	; (800ef00 <vQueueAddToRegistry+0x50>)
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d10b      	bne.n	800eee4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eecc:	490c      	ldr	r1, [pc, #48]	; (800ef00 <vQueueAddToRegistry+0x50>)
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	683a      	ldr	r2, [r7, #0]
 800eed2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eed6:	4a0a      	ldr	r2, [pc, #40]	; (800ef00 <vQueueAddToRegistry+0x50>)
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	00db      	lsls	r3, r3, #3
 800eedc:	4413      	add	r3, r2
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800eee2:	e006      	b.n	800eef2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	3301      	adds	r3, #1
 800eee8:	60fb      	str	r3, [r7, #12]
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2b07      	cmp	r3, #7
 800eeee:	d9e7      	bls.n	800eec0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eef0:	bf00      	nop
 800eef2:	bf00      	nop
 800eef4:	3714      	adds	r7, #20
 800eef6:	46bd      	mov	sp, r7
 800eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefc:	4770      	bx	lr
 800eefe:	bf00      	nop
 800ef00:	20009480 	.word	0x20009480

0800ef04 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ef04:	b480      	push	{r7}
 800ef06:	b085      	sub	sp, #20
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	60fb      	str	r3, [r7, #12]
 800ef10:	e016      	b.n	800ef40 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ef12:	4a10      	ldr	r2, [pc, #64]	; (800ef54 <vQueueUnregisterQueue+0x50>)
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	00db      	lsls	r3, r3, #3
 800ef18:	4413      	add	r3, r2
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	687a      	ldr	r2, [r7, #4]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d10b      	bne.n	800ef3a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ef22:	4a0c      	ldr	r2, [pc, #48]	; (800ef54 <vQueueUnregisterQueue+0x50>)
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2100      	movs	r1, #0
 800ef28:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ef2c:	4a09      	ldr	r2, [pc, #36]	; (800ef54 <vQueueUnregisterQueue+0x50>)
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	00db      	lsls	r3, r3, #3
 800ef32:	4413      	add	r3, r2
 800ef34:	2200      	movs	r2, #0
 800ef36:	605a      	str	r2, [r3, #4]
				break;
 800ef38:	e006      	b.n	800ef48 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	60fb      	str	r3, [r7, #12]
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2b07      	cmp	r3, #7
 800ef44:	d9e5      	bls.n	800ef12 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ef46:	bf00      	nop
 800ef48:	bf00      	nop
 800ef4a:	3714      	adds	r7, #20
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef52:	4770      	bx	lr
 800ef54:	20009480 	.word	0x20009480

0800ef58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b086      	sub	sp, #24
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ef68:	f001 fcdc 	bl	8010924 <vPortEnterCritical>
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef72:	b25b      	sxtb	r3, r3
 800ef74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef78:	d103      	bne.n	800ef82 <vQueueWaitForMessageRestricted+0x2a>
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef88:	b25b      	sxtb	r3, r3
 800ef8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef8e:	d103      	bne.n	800ef98 <vQueueWaitForMessageRestricted+0x40>
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	2200      	movs	r2, #0
 800ef94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef98:	f001 fcf4 	bl	8010984 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d106      	bne.n	800efb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	3324      	adds	r3, #36	; 0x24
 800efa8:	687a      	ldr	r2, [r7, #4]
 800efaa:	68b9      	ldr	r1, [r7, #8]
 800efac:	4618      	mov	r0, r3
 800efae:	f000 fc61 	bl	800f874 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800efb2:	6978      	ldr	r0, [r7, #20]
 800efb4:	f7ff fefb 	bl	800edae <prvUnlockQueue>
	}
 800efb8:	bf00      	nop
 800efba:	3718      	adds	r7, #24
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b08e      	sub	sp, #56	; 0x38
 800efc4:	af04      	add	r7, sp, #16
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	60b9      	str	r1, [r7, #8]
 800efca:	607a      	str	r2, [r7, #4]
 800efcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800efce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d10a      	bne.n	800efea <xTaskCreateStatic+0x2a>
	__asm volatile
 800efd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd8:	f383 8811 	msr	BASEPRI, r3
 800efdc:	f3bf 8f6f 	isb	sy
 800efe0:	f3bf 8f4f 	dsb	sy
 800efe4:	623b      	str	r3, [r7, #32]
}
 800efe6:	bf00      	nop
 800efe8:	e7fe      	b.n	800efe8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800efea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efec:	2b00      	cmp	r3, #0
 800efee:	d10a      	bne.n	800f006 <xTaskCreateStatic+0x46>
	__asm volatile
 800eff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff4:	f383 8811 	msr	BASEPRI, r3
 800eff8:	f3bf 8f6f 	isb	sy
 800effc:	f3bf 8f4f 	dsb	sy
 800f000:	61fb      	str	r3, [r7, #28]
}
 800f002:	bf00      	nop
 800f004:	e7fe      	b.n	800f004 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f006:	23bc      	movs	r3, #188	; 0xbc
 800f008:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	2bbc      	cmp	r3, #188	; 0xbc
 800f00e:	d00a      	beq.n	800f026 <xTaskCreateStatic+0x66>
	__asm volatile
 800f010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f014:	f383 8811 	msr	BASEPRI, r3
 800f018:	f3bf 8f6f 	isb	sy
 800f01c:	f3bf 8f4f 	dsb	sy
 800f020:	61bb      	str	r3, [r7, #24]
}
 800f022:	bf00      	nop
 800f024:	e7fe      	b.n	800f024 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f026:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d01e      	beq.n	800f06c <xTaskCreateStatic+0xac>
 800f02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f030:	2b00      	cmp	r3, #0
 800f032:	d01b      	beq.n	800f06c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f036:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f03c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f040:	2202      	movs	r2, #2
 800f042:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f046:	2300      	movs	r3, #0
 800f048:	9303      	str	r3, [sp, #12]
 800f04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04c:	9302      	str	r3, [sp, #8]
 800f04e:	f107 0314 	add.w	r3, r7, #20
 800f052:	9301      	str	r3, [sp, #4]
 800f054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f056:	9300      	str	r3, [sp, #0]
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	687a      	ldr	r2, [r7, #4]
 800f05c:	68b9      	ldr	r1, [r7, #8]
 800f05e:	68f8      	ldr	r0, [r7, #12]
 800f060:	f000 f850 	bl	800f104 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f066:	f000 f8f3 	bl	800f250 <prvAddNewTaskToReadyList>
 800f06a:	e001      	b.n	800f070 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f06c:	2300      	movs	r3, #0
 800f06e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f070:	697b      	ldr	r3, [r7, #20]
	}
 800f072:	4618      	mov	r0, r3
 800f074:	3728      	adds	r7, #40	; 0x28
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}

0800f07a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f07a:	b580      	push	{r7, lr}
 800f07c:	b08c      	sub	sp, #48	; 0x30
 800f07e:	af04      	add	r7, sp, #16
 800f080:	60f8      	str	r0, [r7, #12]
 800f082:	60b9      	str	r1, [r7, #8]
 800f084:	603b      	str	r3, [r7, #0]
 800f086:	4613      	mov	r3, r2
 800f088:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f08a:	88fb      	ldrh	r3, [r7, #6]
 800f08c:	009b      	lsls	r3, r3, #2
 800f08e:	4618      	mov	r0, r3
 800f090:	f001 fd6a 	bl	8010b68 <pvPortMalloc>
 800f094:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d00e      	beq.n	800f0ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f09c:	20bc      	movs	r0, #188	; 0xbc
 800f09e:	f001 fd63 	bl	8010b68 <pvPortMalloc>
 800f0a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f0a4:	69fb      	ldr	r3, [r7, #28]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d003      	beq.n	800f0b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	697a      	ldr	r2, [r7, #20]
 800f0ae:	631a      	str	r2, [r3, #48]	; 0x30
 800f0b0:	e005      	b.n	800f0be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f0b2:	6978      	ldr	r0, [r7, #20]
 800f0b4:	f001 fdfc 	bl	8010cb0 <vPortFree>
 800f0b8:	e001      	b.n	800f0be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f0be:	69fb      	ldr	r3, [r7, #28]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d017      	beq.n	800f0f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f0c4:	69fb      	ldr	r3, [r7, #28]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f0cc:	88fa      	ldrh	r2, [r7, #6]
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	9303      	str	r3, [sp, #12]
 800f0d2:	69fb      	ldr	r3, [r7, #28]
 800f0d4:	9302      	str	r3, [sp, #8]
 800f0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d8:	9301      	str	r3, [sp, #4]
 800f0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0dc:	9300      	str	r3, [sp, #0]
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	68b9      	ldr	r1, [r7, #8]
 800f0e2:	68f8      	ldr	r0, [r7, #12]
 800f0e4:	f000 f80e 	bl	800f104 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f0e8:	69f8      	ldr	r0, [r7, #28]
 800f0ea:	f000 f8b1 	bl	800f250 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	61bb      	str	r3, [r7, #24]
 800f0f2:	e002      	b.n	800f0fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f0f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f0fa:	69bb      	ldr	r3, [r7, #24]
	}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3720      	adds	r7, #32
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}

0800f104 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b088      	sub	sp, #32
 800f108:	af00      	add	r7, sp, #0
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	60b9      	str	r1, [r7, #8]
 800f10e:	607a      	str	r2, [r7, #4]
 800f110:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f114:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	009b      	lsls	r3, r3, #2
 800f11a:	461a      	mov	r2, r3
 800f11c:	21a5      	movs	r1, #165	; 0xa5
 800f11e:	f002 f843 	bl	80111a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f12c:	3b01      	subs	r3, #1
 800f12e:	009b      	lsls	r3, r3, #2
 800f130:	4413      	add	r3, r2
 800f132:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f134:	69bb      	ldr	r3, [r7, #24]
 800f136:	f023 0307 	bic.w	r3, r3, #7
 800f13a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f13c:	69bb      	ldr	r3, [r7, #24]
 800f13e:	f003 0307 	and.w	r3, r3, #7
 800f142:	2b00      	cmp	r3, #0
 800f144:	d00a      	beq.n	800f15c <prvInitialiseNewTask+0x58>
	__asm volatile
 800f146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f14a:	f383 8811 	msr	BASEPRI, r3
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	f3bf 8f4f 	dsb	sy
 800f156:	617b      	str	r3, [r7, #20]
}
 800f158:	bf00      	nop
 800f15a:	e7fe      	b.n	800f15a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d01f      	beq.n	800f1a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f162:	2300      	movs	r3, #0
 800f164:	61fb      	str	r3, [r7, #28]
 800f166:	e012      	b.n	800f18e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f168:	68ba      	ldr	r2, [r7, #8]
 800f16a:	69fb      	ldr	r3, [r7, #28]
 800f16c:	4413      	add	r3, r2
 800f16e:	7819      	ldrb	r1, [r3, #0]
 800f170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	4413      	add	r3, r2
 800f176:	3334      	adds	r3, #52	; 0x34
 800f178:	460a      	mov	r2, r1
 800f17a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f17c:	68ba      	ldr	r2, [r7, #8]
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	4413      	add	r3, r2
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d006      	beq.n	800f196 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	3301      	adds	r3, #1
 800f18c:	61fb      	str	r3, [r7, #28]
 800f18e:	69fb      	ldr	r3, [r7, #28]
 800f190:	2b0f      	cmp	r3, #15
 800f192:	d9e9      	bls.n	800f168 <prvInitialiseNewTask+0x64>
 800f194:	e000      	b.n	800f198 <prvInitialiseNewTask+0x94>
			{
				break;
 800f196:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19a:	2200      	movs	r2, #0
 800f19c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f1a0:	e003      	b.n	800f1aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ac:	2b37      	cmp	r3, #55	; 0x37
 800f1ae:	d901      	bls.n	800f1b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f1b0:	2337      	movs	r3, #55	; 0x37
 800f1b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f1b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f1be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7fe fe2c 	bl	800de28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d2:	3318      	adds	r3, #24
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7fe fe27 	bl	800de28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f202:	3354      	adds	r3, #84	; 0x54
 800f204:	2260      	movs	r2, #96	; 0x60
 800f206:	2100      	movs	r1, #0
 800f208:	4618      	mov	r0, r3
 800f20a:	f001 ffcd 	bl	80111a8 <memset>
 800f20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f210:	4a0c      	ldr	r2, [pc, #48]	; (800f244 <prvInitialiseNewTask+0x140>)
 800f212:	659a      	str	r2, [r3, #88]	; 0x58
 800f214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f216:	4a0c      	ldr	r2, [pc, #48]	; (800f248 <prvInitialiseNewTask+0x144>)
 800f218:	65da      	str	r2, [r3, #92]	; 0x5c
 800f21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21c:	4a0b      	ldr	r2, [pc, #44]	; (800f24c <prvInitialiseNewTask+0x148>)
 800f21e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f220:	683a      	ldr	r2, [r7, #0]
 800f222:	68f9      	ldr	r1, [r7, #12]
 800f224:	69b8      	ldr	r0, [r7, #24]
 800f226:	f001 fa4f 	bl	80106c8 <pxPortInitialiseStack>
 800f22a:	4602      	mov	r2, r0
 800f22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f232:	2b00      	cmp	r3, #0
 800f234:	d002      	beq.n	800f23c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f23a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f23c:	bf00      	nop
 800f23e:	3720      	adds	r7, #32
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	08014cd0 	.word	0x08014cd0
 800f248:	08014cf0 	.word	0x08014cf0
 800f24c:	08014cb0 	.word	0x08014cb0

0800f250 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f258:	f001 fb64 	bl	8010924 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f25c:	4b2d      	ldr	r3, [pc, #180]	; (800f314 <prvAddNewTaskToReadyList+0xc4>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	3301      	adds	r3, #1
 800f262:	4a2c      	ldr	r2, [pc, #176]	; (800f314 <prvAddNewTaskToReadyList+0xc4>)
 800f264:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f266:	4b2c      	ldr	r3, [pc, #176]	; (800f318 <prvAddNewTaskToReadyList+0xc8>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d109      	bne.n	800f282 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f26e:	4a2a      	ldr	r2, [pc, #168]	; (800f318 <prvAddNewTaskToReadyList+0xc8>)
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f274:	4b27      	ldr	r3, [pc, #156]	; (800f314 <prvAddNewTaskToReadyList+0xc4>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	2b01      	cmp	r3, #1
 800f27a:	d110      	bne.n	800f29e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f27c:	f000 fc26 	bl	800facc <prvInitialiseTaskLists>
 800f280:	e00d      	b.n	800f29e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f282:	4b26      	ldr	r3, [pc, #152]	; (800f31c <prvAddNewTaskToReadyList+0xcc>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d109      	bne.n	800f29e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f28a:	4b23      	ldr	r3, [pc, #140]	; (800f318 <prvAddNewTaskToReadyList+0xc8>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f294:	429a      	cmp	r2, r3
 800f296:	d802      	bhi.n	800f29e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f298:	4a1f      	ldr	r2, [pc, #124]	; (800f318 <prvAddNewTaskToReadyList+0xc8>)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f29e:	4b20      	ldr	r3, [pc, #128]	; (800f320 <prvAddNewTaskToReadyList+0xd0>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	4a1e      	ldr	r2, [pc, #120]	; (800f320 <prvAddNewTaskToReadyList+0xd0>)
 800f2a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f2a8:	4b1d      	ldr	r3, [pc, #116]	; (800f320 <prvAddNewTaskToReadyList+0xd0>)
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2b4:	4b1b      	ldr	r3, [pc, #108]	; (800f324 <prvAddNewTaskToReadyList+0xd4>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d903      	bls.n	800f2c4 <prvAddNewTaskToReadyList+0x74>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2c0:	4a18      	ldr	r2, [pc, #96]	; (800f324 <prvAddNewTaskToReadyList+0xd4>)
 800f2c2:	6013      	str	r3, [r2, #0]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	4413      	add	r3, r2
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	4a15      	ldr	r2, [pc, #84]	; (800f328 <prvAddNewTaskToReadyList+0xd8>)
 800f2d2:	441a      	add	r2, r3
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	3304      	adds	r3, #4
 800f2d8:	4619      	mov	r1, r3
 800f2da:	4610      	mov	r0, r2
 800f2dc:	f7fe fdb1 	bl	800de42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f2e0:	f001 fb50 	bl	8010984 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f2e4:	4b0d      	ldr	r3, [pc, #52]	; (800f31c <prvAddNewTaskToReadyList+0xcc>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d00e      	beq.n	800f30a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f2ec:	4b0a      	ldr	r3, [pc, #40]	; (800f318 <prvAddNewTaskToReadyList+0xc8>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d207      	bcs.n	800f30a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f2fa:	4b0c      	ldr	r3, [pc, #48]	; (800f32c <prvAddNewTaskToReadyList+0xdc>)
 800f2fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f300:	601a      	str	r2, [r3, #0]
 800f302:	f3bf 8f4f 	dsb	sy
 800f306:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f30a:	bf00      	nop
 800f30c:	3708      	adds	r7, #8
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	20009994 	.word	0x20009994
 800f318:	200094c0 	.word	0x200094c0
 800f31c:	200099a0 	.word	0x200099a0
 800f320:	200099b0 	.word	0x200099b0
 800f324:	2000999c 	.word	0x2000999c
 800f328:	200094c4 	.word	0x200094c4
 800f32c:	e000ed04 	.word	0xe000ed04

0800f330 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f338:	2300      	movs	r3, #0
 800f33a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d017      	beq.n	800f372 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f342:	4b13      	ldr	r3, [pc, #76]	; (800f390 <vTaskDelay+0x60>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d00a      	beq.n	800f360 <vTaskDelay+0x30>
	__asm volatile
 800f34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f34e:	f383 8811 	msr	BASEPRI, r3
 800f352:	f3bf 8f6f 	isb	sy
 800f356:	f3bf 8f4f 	dsb	sy
 800f35a:	60bb      	str	r3, [r7, #8]
}
 800f35c:	bf00      	nop
 800f35e:	e7fe      	b.n	800f35e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f360:	f000 f88a 	bl	800f478 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f364:	2100      	movs	r1, #0
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f000 fe0c 	bl	800ff84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f36c:	f000 f892 	bl	800f494 <xTaskResumeAll>
 800f370:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d107      	bne.n	800f388 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f378:	4b06      	ldr	r3, [pc, #24]	; (800f394 <vTaskDelay+0x64>)
 800f37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f37e:	601a      	str	r2, [r3, #0]
 800f380:	f3bf 8f4f 	dsb	sy
 800f384:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f388:	bf00      	nop
 800f38a:	3710      	adds	r7, #16
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	200099bc 	.word	0x200099bc
 800f394:	e000ed04 	.word	0xe000ed04

0800f398 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b08a      	sub	sp, #40	; 0x28
 800f39c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f3a6:	463a      	mov	r2, r7
 800f3a8:	1d39      	adds	r1, r7, #4
 800f3aa:	f107 0308 	add.w	r3, r7, #8
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7fe fce6 	bl	800dd80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f3b4:	6839      	ldr	r1, [r7, #0]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	68ba      	ldr	r2, [r7, #8]
 800f3ba:	9202      	str	r2, [sp, #8]
 800f3bc:	9301      	str	r3, [sp, #4]
 800f3be:	2300      	movs	r3, #0
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	460a      	mov	r2, r1
 800f3c6:	4924      	ldr	r1, [pc, #144]	; (800f458 <vTaskStartScheduler+0xc0>)
 800f3c8:	4824      	ldr	r0, [pc, #144]	; (800f45c <vTaskStartScheduler+0xc4>)
 800f3ca:	f7ff fdf9 	bl	800efc0 <xTaskCreateStatic>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	4a23      	ldr	r2, [pc, #140]	; (800f460 <vTaskStartScheduler+0xc8>)
 800f3d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f3d4:	4b22      	ldr	r3, [pc, #136]	; (800f460 <vTaskStartScheduler+0xc8>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d002      	beq.n	800f3e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f3dc:	2301      	movs	r3, #1
 800f3de:	617b      	str	r3, [r7, #20]
 800f3e0:	e001      	b.n	800f3e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d102      	bne.n	800f3f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f3ec:	f000 fe1e 	bl	801002c <xTimerCreateTimerTask>
 800f3f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d11b      	bne.n	800f430 <vTaskStartScheduler+0x98>
	__asm volatile
 800f3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3fc:	f383 8811 	msr	BASEPRI, r3
 800f400:	f3bf 8f6f 	isb	sy
 800f404:	f3bf 8f4f 	dsb	sy
 800f408:	613b      	str	r3, [r7, #16]
}
 800f40a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f40c:	4b15      	ldr	r3, [pc, #84]	; (800f464 <vTaskStartScheduler+0xcc>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	3354      	adds	r3, #84	; 0x54
 800f412:	4a15      	ldr	r2, [pc, #84]	; (800f468 <vTaskStartScheduler+0xd0>)
 800f414:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f416:	4b15      	ldr	r3, [pc, #84]	; (800f46c <vTaskStartScheduler+0xd4>)
 800f418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f41c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f41e:	4b14      	ldr	r3, [pc, #80]	; (800f470 <vTaskStartScheduler+0xd8>)
 800f420:	2201      	movs	r2, #1
 800f422:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f424:	4b13      	ldr	r3, [pc, #76]	; (800f474 <vTaskStartScheduler+0xdc>)
 800f426:	2200      	movs	r2, #0
 800f428:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f42a:	f001 f9d9 	bl	80107e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f42e:	e00e      	b.n	800f44e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f436:	d10a      	bne.n	800f44e <vTaskStartScheduler+0xb6>
	__asm volatile
 800f438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f43c:	f383 8811 	msr	BASEPRI, r3
 800f440:	f3bf 8f6f 	isb	sy
 800f444:	f3bf 8f4f 	dsb	sy
 800f448:	60fb      	str	r3, [r7, #12]
}
 800f44a:	bf00      	nop
 800f44c:	e7fe      	b.n	800f44c <vTaskStartScheduler+0xb4>
}
 800f44e:	bf00      	nop
 800f450:	3718      	adds	r7, #24
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	08012a38 	.word	0x08012a38
 800f45c:	0800fa9d 	.word	0x0800fa9d
 800f460:	200099b8 	.word	0x200099b8
 800f464:	200094c0 	.word	0x200094c0
 800f468:	200000d8 	.word	0x200000d8
 800f46c:	200099b4 	.word	0x200099b4
 800f470:	200099a0 	.word	0x200099a0
 800f474:	20009998 	.word	0x20009998

0800f478 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f478:	b480      	push	{r7}
 800f47a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f47c:	4b04      	ldr	r3, [pc, #16]	; (800f490 <vTaskSuspendAll+0x18>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	3301      	adds	r3, #1
 800f482:	4a03      	ldr	r2, [pc, #12]	; (800f490 <vTaskSuspendAll+0x18>)
 800f484:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f486:	bf00      	nop
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr
 800f490:	200099bc 	.word	0x200099bc

0800f494 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b084      	sub	sp, #16
 800f498:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f49a:	2300      	movs	r3, #0
 800f49c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f4a2:	4b42      	ldr	r3, [pc, #264]	; (800f5ac <xTaskResumeAll+0x118>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d10a      	bne.n	800f4c0 <xTaskResumeAll+0x2c>
	__asm volatile
 800f4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ae:	f383 8811 	msr	BASEPRI, r3
 800f4b2:	f3bf 8f6f 	isb	sy
 800f4b6:	f3bf 8f4f 	dsb	sy
 800f4ba:	603b      	str	r3, [r7, #0]
}
 800f4bc:	bf00      	nop
 800f4be:	e7fe      	b.n	800f4be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f4c0:	f001 fa30 	bl	8010924 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f4c4:	4b39      	ldr	r3, [pc, #228]	; (800f5ac <xTaskResumeAll+0x118>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	3b01      	subs	r3, #1
 800f4ca:	4a38      	ldr	r2, [pc, #224]	; (800f5ac <xTaskResumeAll+0x118>)
 800f4cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4ce:	4b37      	ldr	r3, [pc, #220]	; (800f5ac <xTaskResumeAll+0x118>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d162      	bne.n	800f59c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f4d6:	4b36      	ldr	r3, [pc, #216]	; (800f5b0 <xTaskResumeAll+0x11c>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d05e      	beq.n	800f59c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f4de:	e02f      	b.n	800f540 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4e0:	4b34      	ldr	r3, [pc, #208]	; (800f5b4 <xTaskResumeAll+0x120>)
 800f4e2:	68db      	ldr	r3, [r3, #12]
 800f4e4:	68db      	ldr	r3, [r3, #12]
 800f4e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	3318      	adds	r3, #24
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7fe fd05 	bl	800defc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	3304      	adds	r3, #4
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fe fd00 	bl	800defc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f500:	4b2d      	ldr	r3, [pc, #180]	; (800f5b8 <xTaskResumeAll+0x124>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	429a      	cmp	r2, r3
 800f506:	d903      	bls.n	800f510 <xTaskResumeAll+0x7c>
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f50c:	4a2a      	ldr	r2, [pc, #168]	; (800f5b8 <xTaskResumeAll+0x124>)
 800f50e:	6013      	str	r3, [r2, #0]
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f514:	4613      	mov	r3, r2
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	4413      	add	r3, r2
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	4a27      	ldr	r2, [pc, #156]	; (800f5bc <xTaskResumeAll+0x128>)
 800f51e:	441a      	add	r2, r3
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	3304      	adds	r3, #4
 800f524:	4619      	mov	r1, r3
 800f526:	4610      	mov	r0, r2
 800f528:	f7fe fc8b 	bl	800de42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f530:	4b23      	ldr	r3, [pc, #140]	; (800f5c0 <xTaskResumeAll+0x12c>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f536:	429a      	cmp	r2, r3
 800f538:	d302      	bcc.n	800f540 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f53a:	4b22      	ldr	r3, [pc, #136]	; (800f5c4 <xTaskResumeAll+0x130>)
 800f53c:	2201      	movs	r2, #1
 800f53e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f540:	4b1c      	ldr	r3, [pc, #112]	; (800f5b4 <xTaskResumeAll+0x120>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d1cb      	bne.n	800f4e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d001      	beq.n	800f552 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f54e:	f000 fb5f 	bl	800fc10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f552:	4b1d      	ldr	r3, [pc, #116]	; (800f5c8 <xTaskResumeAll+0x134>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d010      	beq.n	800f580 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f55e:	f000 f847 	bl	800f5f0 <xTaskIncrementTick>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	d002      	beq.n	800f56e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f568:	4b16      	ldr	r3, [pc, #88]	; (800f5c4 <xTaskResumeAll+0x130>)
 800f56a:	2201      	movs	r2, #1
 800f56c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	3b01      	subs	r3, #1
 800f572:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d1f1      	bne.n	800f55e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f57a:	4b13      	ldr	r3, [pc, #76]	; (800f5c8 <xTaskResumeAll+0x134>)
 800f57c:	2200      	movs	r2, #0
 800f57e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f580:	4b10      	ldr	r3, [pc, #64]	; (800f5c4 <xTaskResumeAll+0x130>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d009      	beq.n	800f59c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f588:	2301      	movs	r3, #1
 800f58a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f58c:	4b0f      	ldr	r3, [pc, #60]	; (800f5cc <xTaskResumeAll+0x138>)
 800f58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f592:	601a      	str	r2, [r3, #0]
 800f594:	f3bf 8f4f 	dsb	sy
 800f598:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f59c:	f001 f9f2 	bl	8010984 <vPortExitCritical>

	return xAlreadyYielded;
 800f5a0:	68bb      	ldr	r3, [r7, #8]
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	200099bc 	.word	0x200099bc
 800f5b0:	20009994 	.word	0x20009994
 800f5b4:	20009954 	.word	0x20009954
 800f5b8:	2000999c 	.word	0x2000999c
 800f5bc:	200094c4 	.word	0x200094c4
 800f5c0:	200094c0 	.word	0x200094c0
 800f5c4:	200099a8 	.word	0x200099a8
 800f5c8:	200099a4 	.word	0x200099a4
 800f5cc:	e000ed04 	.word	0xe000ed04

0800f5d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b083      	sub	sp, #12
 800f5d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f5d6:	4b05      	ldr	r3, [pc, #20]	; (800f5ec <xTaskGetTickCount+0x1c>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f5dc:	687b      	ldr	r3, [r7, #4]
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	370c      	adds	r7, #12
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e8:	4770      	bx	lr
 800f5ea:	bf00      	nop
 800f5ec:	20009998 	.word	0x20009998

0800f5f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b086      	sub	sp, #24
 800f5f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f5fa:	4b4f      	ldr	r3, [pc, #316]	; (800f738 <xTaskIncrementTick+0x148>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	f040 808f 	bne.w	800f722 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f604:	4b4d      	ldr	r3, [pc, #308]	; (800f73c <xTaskIncrementTick+0x14c>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	3301      	adds	r3, #1
 800f60a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f60c:	4a4b      	ldr	r2, [pc, #300]	; (800f73c <xTaskIncrementTick+0x14c>)
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d120      	bne.n	800f65a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f618:	4b49      	ldr	r3, [pc, #292]	; (800f740 <xTaskIncrementTick+0x150>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d00a      	beq.n	800f638 <xTaskIncrementTick+0x48>
	__asm volatile
 800f622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f626:	f383 8811 	msr	BASEPRI, r3
 800f62a:	f3bf 8f6f 	isb	sy
 800f62e:	f3bf 8f4f 	dsb	sy
 800f632:	603b      	str	r3, [r7, #0]
}
 800f634:	bf00      	nop
 800f636:	e7fe      	b.n	800f636 <xTaskIncrementTick+0x46>
 800f638:	4b41      	ldr	r3, [pc, #260]	; (800f740 <xTaskIncrementTick+0x150>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	60fb      	str	r3, [r7, #12]
 800f63e:	4b41      	ldr	r3, [pc, #260]	; (800f744 <xTaskIncrementTick+0x154>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	4a3f      	ldr	r2, [pc, #252]	; (800f740 <xTaskIncrementTick+0x150>)
 800f644:	6013      	str	r3, [r2, #0]
 800f646:	4a3f      	ldr	r2, [pc, #252]	; (800f744 <xTaskIncrementTick+0x154>)
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	6013      	str	r3, [r2, #0]
 800f64c:	4b3e      	ldr	r3, [pc, #248]	; (800f748 <xTaskIncrementTick+0x158>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	3301      	adds	r3, #1
 800f652:	4a3d      	ldr	r2, [pc, #244]	; (800f748 <xTaskIncrementTick+0x158>)
 800f654:	6013      	str	r3, [r2, #0]
 800f656:	f000 fadb 	bl	800fc10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f65a:	4b3c      	ldr	r3, [pc, #240]	; (800f74c <xTaskIncrementTick+0x15c>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	693a      	ldr	r2, [r7, #16]
 800f660:	429a      	cmp	r2, r3
 800f662:	d349      	bcc.n	800f6f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f664:	4b36      	ldr	r3, [pc, #216]	; (800f740 <xTaskIncrementTick+0x150>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d104      	bne.n	800f678 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f66e:	4b37      	ldr	r3, [pc, #220]	; (800f74c <xTaskIncrementTick+0x15c>)
 800f670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f674:	601a      	str	r2, [r3, #0]
					break;
 800f676:	e03f      	b.n	800f6f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f678:	4b31      	ldr	r3, [pc, #196]	; (800f740 <xTaskIncrementTick+0x150>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f688:	693a      	ldr	r2, [r7, #16]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d203      	bcs.n	800f698 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f690:	4a2e      	ldr	r2, [pc, #184]	; (800f74c <xTaskIncrementTick+0x15c>)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f696:	e02f      	b.n	800f6f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	3304      	adds	r3, #4
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7fe fc2d 	bl	800defc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d004      	beq.n	800f6b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	3318      	adds	r3, #24
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7fe fc24 	bl	800defc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6b8:	4b25      	ldr	r3, [pc, #148]	; (800f750 <xTaskIncrementTick+0x160>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d903      	bls.n	800f6c8 <xTaskIncrementTick+0xd8>
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6c4:	4a22      	ldr	r2, [pc, #136]	; (800f750 <xTaskIncrementTick+0x160>)
 800f6c6:	6013      	str	r3, [r2, #0]
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6cc:	4613      	mov	r3, r2
 800f6ce:	009b      	lsls	r3, r3, #2
 800f6d0:	4413      	add	r3, r2
 800f6d2:	009b      	lsls	r3, r3, #2
 800f6d4:	4a1f      	ldr	r2, [pc, #124]	; (800f754 <xTaskIncrementTick+0x164>)
 800f6d6:	441a      	add	r2, r3
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	3304      	adds	r3, #4
 800f6dc:	4619      	mov	r1, r3
 800f6de:	4610      	mov	r0, r2
 800f6e0:	f7fe fbaf 	bl	800de42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6e8:	4b1b      	ldr	r3, [pc, #108]	; (800f758 <xTaskIncrementTick+0x168>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d3b8      	bcc.n	800f664 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6f6:	e7b5      	b.n	800f664 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f6f8:	4b17      	ldr	r3, [pc, #92]	; (800f758 <xTaskIncrementTick+0x168>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6fe:	4915      	ldr	r1, [pc, #84]	; (800f754 <xTaskIncrementTick+0x164>)
 800f700:	4613      	mov	r3, r2
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	4413      	add	r3, r2
 800f706:	009b      	lsls	r3, r3, #2
 800f708:	440b      	add	r3, r1
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	d901      	bls.n	800f714 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f710:	2301      	movs	r3, #1
 800f712:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f714:	4b11      	ldr	r3, [pc, #68]	; (800f75c <xTaskIncrementTick+0x16c>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d007      	beq.n	800f72c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f71c:	2301      	movs	r3, #1
 800f71e:	617b      	str	r3, [r7, #20]
 800f720:	e004      	b.n	800f72c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f722:	4b0f      	ldr	r3, [pc, #60]	; (800f760 <xTaskIncrementTick+0x170>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	3301      	adds	r3, #1
 800f728:	4a0d      	ldr	r2, [pc, #52]	; (800f760 <xTaskIncrementTick+0x170>)
 800f72a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f72c:	697b      	ldr	r3, [r7, #20]
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3718      	adds	r7, #24
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	200099bc 	.word	0x200099bc
 800f73c:	20009998 	.word	0x20009998
 800f740:	2000994c 	.word	0x2000994c
 800f744:	20009950 	.word	0x20009950
 800f748:	200099ac 	.word	0x200099ac
 800f74c:	200099b4 	.word	0x200099b4
 800f750:	2000999c 	.word	0x2000999c
 800f754:	200094c4 	.word	0x200094c4
 800f758:	200094c0 	.word	0x200094c0
 800f75c:	200099a8 	.word	0x200099a8
 800f760:	200099a4 	.word	0x200099a4

0800f764 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f764:	b480      	push	{r7}
 800f766:	b085      	sub	sp, #20
 800f768:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f76a:	4b2a      	ldr	r3, [pc, #168]	; (800f814 <vTaskSwitchContext+0xb0>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d003      	beq.n	800f77a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f772:	4b29      	ldr	r3, [pc, #164]	; (800f818 <vTaskSwitchContext+0xb4>)
 800f774:	2201      	movs	r2, #1
 800f776:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f778:	e046      	b.n	800f808 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f77a:	4b27      	ldr	r3, [pc, #156]	; (800f818 <vTaskSwitchContext+0xb4>)
 800f77c:	2200      	movs	r2, #0
 800f77e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f780:	4b26      	ldr	r3, [pc, #152]	; (800f81c <vTaskSwitchContext+0xb8>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	60fb      	str	r3, [r7, #12]
 800f786:	e010      	b.n	800f7aa <vTaskSwitchContext+0x46>
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d10a      	bne.n	800f7a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800f78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f792:	f383 8811 	msr	BASEPRI, r3
 800f796:	f3bf 8f6f 	isb	sy
 800f79a:	f3bf 8f4f 	dsb	sy
 800f79e:	607b      	str	r3, [r7, #4]
}
 800f7a0:	bf00      	nop
 800f7a2:	e7fe      	b.n	800f7a2 <vTaskSwitchContext+0x3e>
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	3b01      	subs	r3, #1
 800f7a8:	60fb      	str	r3, [r7, #12]
 800f7aa:	491d      	ldr	r1, [pc, #116]	; (800f820 <vTaskSwitchContext+0xbc>)
 800f7ac:	68fa      	ldr	r2, [r7, #12]
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	009b      	lsls	r3, r3, #2
 800f7b2:	4413      	add	r3, r2
 800f7b4:	009b      	lsls	r3, r3, #2
 800f7b6:	440b      	add	r3, r1
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d0e4      	beq.n	800f788 <vTaskSwitchContext+0x24>
 800f7be:	68fa      	ldr	r2, [r7, #12]
 800f7c0:	4613      	mov	r3, r2
 800f7c2:	009b      	lsls	r3, r3, #2
 800f7c4:	4413      	add	r3, r2
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	4a15      	ldr	r2, [pc, #84]	; (800f820 <vTaskSwitchContext+0xbc>)
 800f7ca:	4413      	add	r3, r2
 800f7cc:	60bb      	str	r3, [r7, #8]
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	685a      	ldr	r2, [r3, #4]
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	605a      	str	r2, [r3, #4]
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	685a      	ldr	r2, [r3, #4]
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	3308      	adds	r3, #8
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d104      	bne.n	800f7ee <vTaskSwitchContext+0x8a>
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	685a      	ldr	r2, [r3, #4]
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	605a      	str	r2, [r3, #4]
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	68db      	ldr	r3, [r3, #12]
 800f7f4:	4a0b      	ldr	r2, [pc, #44]	; (800f824 <vTaskSwitchContext+0xc0>)
 800f7f6:	6013      	str	r3, [r2, #0]
 800f7f8:	4a08      	ldr	r2, [pc, #32]	; (800f81c <vTaskSwitchContext+0xb8>)
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f7fe:	4b09      	ldr	r3, [pc, #36]	; (800f824 <vTaskSwitchContext+0xc0>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	3354      	adds	r3, #84	; 0x54
 800f804:	4a08      	ldr	r2, [pc, #32]	; (800f828 <vTaskSwitchContext+0xc4>)
 800f806:	6013      	str	r3, [r2, #0]
}
 800f808:	bf00      	nop
 800f80a:	3714      	adds	r7, #20
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr
 800f814:	200099bc 	.word	0x200099bc
 800f818:	200099a8 	.word	0x200099a8
 800f81c:	2000999c 	.word	0x2000999c
 800f820:	200094c4 	.word	0x200094c4
 800f824:	200094c0 	.word	0x200094c0
 800f828:	200000d8 	.word	0x200000d8

0800f82c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b084      	sub	sp, #16
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d10a      	bne.n	800f852 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f840:	f383 8811 	msr	BASEPRI, r3
 800f844:	f3bf 8f6f 	isb	sy
 800f848:	f3bf 8f4f 	dsb	sy
 800f84c:	60fb      	str	r3, [r7, #12]
}
 800f84e:	bf00      	nop
 800f850:	e7fe      	b.n	800f850 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f852:	4b07      	ldr	r3, [pc, #28]	; (800f870 <vTaskPlaceOnEventList+0x44>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	3318      	adds	r3, #24
 800f858:	4619      	mov	r1, r3
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f7fe fb15 	bl	800de8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f860:	2101      	movs	r1, #1
 800f862:	6838      	ldr	r0, [r7, #0]
 800f864:	f000 fb8e 	bl	800ff84 <prvAddCurrentTaskToDelayedList>
}
 800f868:	bf00      	nop
 800f86a:	3710      	adds	r7, #16
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}
 800f870:	200094c0 	.word	0x200094c0

0800f874 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f874:	b580      	push	{r7, lr}
 800f876:	b086      	sub	sp, #24
 800f878:	af00      	add	r7, sp, #0
 800f87a:	60f8      	str	r0, [r7, #12]
 800f87c:	60b9      	str	r1, [r7, #8]
 800f87e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d10a      	bne.n	800f89c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f88a:	f383 8811 	msr	BASEPRI, r3
 800f88e:	f3bf 8f6f 	isb	sy
 800f892:	f3bf 8f4f 	dsb	sy
 800f896:	617b      	str	r3, [r7, #20]
}
 800f898:	bf00      	nop
 800f89a:	e7fe      	b.n	800f89a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f89c:	4b0a      	ldr	r3, [pc, #40]	; (800f8c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	3318      	adds	r3, #24
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	68f8      	ldr	r0, [r7, #12]
 800f8a6:	f7fe facc 	bl	800de42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d002      	beq.n	800f8b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f8b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f8b6:	6879      	ldr	r1, [r7, #4]
 800f8b8:	68b8      	ldr	r0, [r7, #8]
 800f8ba:	f000 fb63 	bl	800ff84 <prvAddCurrentTaskToDelayedList>
	}
 800f8be:	bf00      	nop
 800f8c0:	3718      	adds	r7, #24
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}
 800f8c6:	bf00      	nop
 800f8c8:	200094c0 	.word	0x200094c0

0800f8cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b086      	sub	sp, #24
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	68db      	ldr	r3, [r3, #12]
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d10a      	bne.n	800f8f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e6:	f383 8811 	msr	BASEPRI, r3
 800f8ea:	f3bf 8f6f 	isb	sy
 800f8ee:	f3bf 8f4f 	dsb	sy
 800f8f2:	60fb      	str	r3, [r7, #12]
}
 800f8f4:	bf00      	nop
 800f8f6:	e7fe      	b.n	800f8f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	3318      	adds	r3, #24
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7fe fafd 	bl	800defc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f902:	4b1e      	ldr	r3, [pc, #120]	; (800f97c <xTaskRemoveFromEventList+0xb0>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d11d      	bne.n	800f946 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	3304      	adds	r3, #4
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fe faf4 	bl	800defc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f918:	4b19      	ldr	r3, [pc, #100]	; (800f980 <xTaskRemoveFromEventList+0xb4>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d903      	bls.n	800f928 <xTaskRemoveFromEventList+0x5c>
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f924:	4a16      	ldr	r2, [pc, #88]	; (800f980 <xTaskRemoveFromEventList+0xb4>)
 800f926:	6013      	str	r3, [r2, #0]
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f92c:	4613      	mov	r3, r2
 800f92e:	009b      	lsls	r3, r3, #2
 800f930:	4413      	add	r3, r2
 800f932:	009b      	lsls	r3, r3, #2
 800f934:	4a13      	ldr	r2, [pc, #76]	; (800f984 <xTaskRemoveFromEventList+0xb8>)
 800f936:	441a      	add	r2, r3
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	3304      	adds	r3, #4
 800f93c:	4619      	mov	r1, r3
 800f93e:	4610      	mov	r0, r2
 800f940:	f7fe fa7f 	bl	800de42 <vListInsertEnd>
 800f944:	e005      	b.n	800f952 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	3318      	adds	r3, #24
 800f94a:	4619      	mov	r1, r3
 800f94c:	480e      	ldr	r0, [pc, #56]	; (800f988 <xTaskRemoveFromEventList+0xbc>)
 800f94e:	f7fe fa78 	bl	800de42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f956:	4b0d      	ldr	r3, [pc, #52]	; (800f98c <xTaskRemoveFromEventList+0xc0>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d905      	bls.n	800f96c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f960:	2301      	movs	r3, #1
 800f962:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f964:	4b0a      	ldr	r3, [pc, #40]	; (800f990 <xTaskRemoveFromEventList+0xc4>)
 800f966:	2201      	movs	r2, #1
 800f968:	601a      	str	r2, [r3, #0]
 800f96a:	e001      	b.n	800f970 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f96c:	2300      	movs	r3, #0
 800f96e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f970:	697b      	ldr	r3, [r7, #20]
}
 800f972:	4618      	mov	r0, r3
 800f974:	3718      	adds	r7, #24
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
 800f97a:	bf00      	nop
 800f97c:	200099bc 	.word	0x200099bc
 800f980:	2000999c 	.word	0x2000999c
 800f984:	200094c4 	.word	0x200094c4
 800f988:	20009954 	.word	0x20009954
 800f98c:	200094c0 	.word	0x200094c0
 800f990:	200099a8 	.word	0x200099a8

0800f994 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f994:	b480      	push	{r7}
 800f996:	b083      	sub	sp, #12
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f99c:	4b06      	ldr	r3, [pc, #24]	; (800f9b8 <vTaskInternalSetTimeOutState+0x24>)
 800f99e:	681a      	ldr	r2, [r3, #0]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f9a4:	4b05      	ldr	r3, [pc, #20]	; (800f9bc <vTaskInternalSetTimeOutState+0x28>)
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	605a      	str	r2, [r3, #4]
}
 800f9ac:	bf00      	nop
 800f9ae:	370c      	adds	r7, #12
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b6:	4770      	bx	lr
 800f9b8:	200099ac 	.word	0x200099ac
 800f9bc:	20009998 	.word	0x20009998

0800f9c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b088      	sub	sp, #32
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
 800f9c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d10a      	bne.n	800f9e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d4:	f383 8811 	msr	BASEPRI, r3
 800f9d8:	f3bf 8f6f 	isb	sy
 800f9dc:	f3bf 8f4f 	dsb	sy
 800f9e0:	613b      	str	r3, [r7, #16]
}
 800f9e2:	bf00      	nop
 800f9e4:	e7fe      	b.n	800f9e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d10a      	bne.n	800fa02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f0:	f383 8811 	msr	BASEPRI, r3
 800f9f4:	f3bf 8f6f 	isb	sy
 800f9f8:	f3bf 8f4f 	dsb	sy
 800f9fc:	60fb      	str	r3, [r7, #12]
}
 800f9fe:	bf00      	nop
 800fa00:	e7fe      	b.n	800fa00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fa02:	f000 ff8f 	bl	8010924 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fa06:	4b1d      	ldr	r3, [pc, #116]	; (800fa7c <xTaskCheckForTimeOut+0xbc>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	69ba      	ldr	r2, [r7, #24]
 800fa12:	1ad3      	subs	r3, r2, r3
 800fa14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa1e:	d102      	bne.n	800fa26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fa20:	2300      	movs	r3, #0
 800fa22:	61fb      	str	r3, [r7, #28]
 800fa24:	e023      	b.n	800fa6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681a      	ldr	r2, [r3, #0]
 800fa2a:	4b15      	ldr	r3, [pc, #84]	; (800fa80 <xTaskCheckForTimeOut+0xc0>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d007      	beq.n	800fa42 <xTaskCheckForTimeOut+0x82>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	69ba      	ldr	r2, [r7, #24]
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d302      	bcc.n	800fa42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	61fb      	str	r3, [r7, #28]
 800fa40:	e015      	b.n	800fa6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	697a      	ldr	r2, [r7, #20]
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d20b      	bcs.n	800fa64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	681a      	ldr	r2, [r3, #0]
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	1ad2      	subs	r2, r2, r3
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f7ff ff9b 	bl	800f994 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	61fb      	str	r3, [r7, #28]
 800fa62:	e004      	b.n	800fa6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	2200      	movs	r2, #0
 800fa68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fa6e:	f000 ff89 	bl	8010984 <vPortExitCritical>

	return xReturn;
 800fa72:	69fb      	ldr	r3, [r7, #28]
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	3720      	adds	r7, #32
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}
 800fa7c:	20009998 	.word	0x20009998
 800fa80:	200099ac 	.word	0x200099ac

0800fa84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fa84:	b480      	push	{r7}
 800fa86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fa88:	4b03      	ldr	r3, [pc, #12]	; (800fa98 <vTaskMissedYield+0x14>)
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	601a      	str	r2, [r3, #0]
}
 800fa8e:	bf00      	nop
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr
 800fa98:	200099a8 	.word	0x200099a8

0800fa9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800faa4:	f000 f852 	bl	800fb4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800faa8:	4b06      	ldr	r3, [pc, #24]	; (800fac4 <prvIdleTask+0x28>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	2b01      	cmp	r3, #1
 800faae:	d9f9      	bls.n	800faa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fab0:	4b05      	ldr	r3, [pc, #20]	; (800fac8 <prvIdleTask+0x2c>)
 800fab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fab6:	601a      	str	r2, [r3, #0]
 800fab8:	f3bf 8f4f 	dsb	sy
 800fabc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fac0:	e7f0      	b.n	800faa4 <prvIdleTask+0x8>
 800fac2:	bf00      	nop
 800fac4:	200094c4 	.word	0x200094c4
 800fac8:	e000ed04 	.word	0xe000ed04

0800facc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fad2:	2300      	movs	r3, #0
 800fad4:	607b      	str	r3, [r7, #4]
 800fad6:	e00c      	b.n	800faf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fad8:	687a      	ldr	r2, [r7, #4]
 800fada:	4613      	mov	r3, r2
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	4413      	add	r3, r2
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	4a12      	ldr	r2, [pc, #72]	; (800fb2c <prvInitialiseTaskLists+0x60>)
 800fae4:	4413      	add	r3, r2
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7fe f97e 	bl	800dde8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	3301      	adds	r3, #1
 800faf0:	607b      	str	r3, [r7, #4]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2b37      	cmp	r3, #55	; 0x37
 800faf6:	d9ef      	bls.n	800fad8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800faf8:	480d      	ldr	r0, [pc, #52]	; (800fb30 <prvInitialiseTaskLists+0x64>)
 800fafa:	f7fe f975 	bl	800dde8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fafe:	480d      	ldr	r0, [pc, #52]	; (800fb34 <prvInitialiseTaskLists+0x68>)
 800fb00:	f7fe f972 	bl	800dde8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fb04:	480c      	ldr	r0, [pc, #48]	; (800fb38 <prvInitialiseTaskLists+0x6c>)
 800fb06:	f7fe f96f 	bl	800dde8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fb0a:	480c      	ldr	r0, [pc, #48]	; (800fb3c <prvInitialiseTaskLists+0x70>)
 800fb0c:	f7fe f96c 	bl	800dde8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fb10:	480b      	ldr	r0, [pc, #44]	; (800fb40 <prvInitialiseTaskLists+0x74>)
 800fb12:	f7fe f969 	bl	800dde8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fb16:	4b0b      	ldr	r3, [pc, #44]	; (800fb44 <prvInitialiseTaskLists+0x78>)
 800fb18:	4a05      	ldr	r2, [pc, #20]	; (800fb30 <prvInitialiseTaskLists+0x64>)
 800fb1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fb1c:	4b0a      	ldr	r3, [pc, #40]	; (800fb48 <prvInitialiseTaskLists+0x7c>)
 800fb1e:	4a05      	ldr	r2, [pc, #20]	; (800fb34 <prvInitialiseTaskLists+0x68>)
 800fb20:	601a      	str	r2, [r3, #0]
}
 800fb22:	bf00      	nop
 800fb24:	3708      	adds	r7, #8
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
 800fb2a:	bf00      	nop
 800fb2c:	200094c4 	.word	0x200094c4
 800fb30:	20009924 	.word	0x20009924
 800fb34:	20009938 	.word	0x20009938
 800fb38:	20009954 	.word	0x20009954
 800fb3c:	20009968 	.word	0x20009968
 800fb40:	20009980 	.word	0x20009980
 800fb44:	2000994c 	.word	0x2000994c
 800fb48:	20009950 	.word	0x20009950

0800fb4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb52:	e019      	b.n	800fb88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fb54:	f000 fee6 	bl	8010924 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb58:	4b10      	ldr	r3, [pc, #64]	; (800fb9c <prvCheckTasksWaitingTermination+0x50>)
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	68db      	ldr	r3, [r3, #12]
 800fb5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	3304      	adds	r3, #4
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7fe f9c9 	bl	800defc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fb6a:	4b0d      	ldr	r3, [pc, #52]	; (800fba0 <prvCheckTasksWaitingTermination+0x54>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	3b01      	subs	r3, #1
 800fb70:	4a0b      	ldr	r2, [pc, #44]	; (800fba0 <prvCheckTasksWaitingTermination+0x54>)
 800fb72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fb74:	4b0b      	ldr	r3, [pc, #44]	; (800fba4 <prvCheckTasksWaitingTermination+0x58>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	3b01      	subs	r3, #1
 800fb7a:	4a0a      	ldr	r2, [pc, #40]	; (800fba4 <prvCheckTasksWaitingTermination+0x58>)
 800fb7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fb7e:	f000 ff01 	bl	8010984 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f000 f810 	bl	800fba8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb88:	4b06      	ldr	r3, [pc, #24]	; (800fba4 <prvCheckTasksWaitingTermination+0x58>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d1e1      	bne.n	800fb54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fb90:	bf00      	nop
 800fb92:	bf00      	nop
 800fb94:	3708      	adds	r7, #8
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	20009968 	.word	0x20009968
 800fba0:	20009994 	.word	0x20009994
 800fba4:	2000997c 	.word	0x2000997c

0800fba8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	3354      	adds	r3, #84	; 0x54
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f001 fba1 	bl	80112fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d108      	bne.n	800fbd6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f001 f871 	bl	8010cb0 <vPortFree>
				vPortFree( pxTCB );
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f001 f86e 	bl	8010cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fbd4:	e018      	b.n	800fc08 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d103      	bne.n	800fbe8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f001 f865 	bl	8010cb0 <vPortFree>
	}
 800fbe6:	e00f      	b.n	800fc08 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fbee:	2b02      	cmp	r3, #2
 800fbf0:	d00a      	beq.n	800fc08 <prvDeleteTCB+0x60>
	__asm volatile
 800fbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf6:	f383 8811 	msr	BASEPRI, r3
 800fbfa:	f3bf 8f6f 	isb	sy
 800fbfe:	f3bf 8f4f 	dsb	sy
 800fc02:	60fb      	str	r3, [r7, #12]
}
 800fc04:	bf00      	nop
 800fc06:	e7fe      	b.n	800fc06 <prvDeleteTCB+0x5e>
	}
 800fc08:	bf00      	nop
 800fc0a:	3710      	adds	r7, #16
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fc10:	b480      	push	{r7}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc16:	4b0c      	ldr	r3, [pc, #48]	; (800fc48 <prvResetNextTaskUnblockTime+0x38>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d104      	bne.n	800fc2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fc20:	4b0a      	ldr	r3, [pc, #40]	; (800fc4c <prvResetNextTaskUnblockTime+0x3c>)
 800fc22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fc28:	e008      	b.n	800fc3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc2a:	4b07      	ldr	r3, [pc, #28]	; (800fc48 <prvResetNextTaskUnblockTime+0x38>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	68db      	ldr	r3, [r3, #12]
 800fc30:	68db      	ldr	r3, [r3, #12]
 800fc32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	4a04      	ldr	r2, [pc, #16]	; (800fc4c <prvResetNextTaskUnblockTime+0x3c>)
 800fc3a:	6013      	str	r3, [r2, #0]
}
 800fc3c:	bf00      	nop
 800fc3e:	370c      	adds	r7, #12
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr
 800fc48:	2000994c 	.word	0x2000994c
 800fc4c:	200099b4 	.word	0x200099b4

0800fc50 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fc50:	b480      	push	{r7}
 800fc52:	b083      	sub	sp, #12
 800fc54:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fc56:	4b05      	ldr	r3, [pc, #20]	; (800fc6c <xTaskGetCurrentTaskHandle+0x1c>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fc5c:	687b      	ldr	r3, [r7, #4]
	}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	370c      	adds	r7, #12
 800fc62:	46bd      	mov	sp, r7
 800fc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc68:	4770      	bx	lr
 800fc6a:	bf00      	nop
 800fc6c:	200094c0 	.word	0x200094c0

0800fc70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fc70:	b480      	push	{r7}
 800fc72:	b083      	sub	sp, #12
 800fc74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fc76:	4b0b      	ldr	r3, [pc, #44]	; (800fca4 <xTaskGetSchedulerState+0x34>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d102      	bne.n	800fc84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fc7e:	2301      	movs	r3, #1
 800fc80:	607b      	str	r3, [r7, #4]
 800fc82:	e008      	b.n	800fc96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc84:	4b08      	ldr	r3, [pc, #32]	; (800fca8 <xTaskGetSchedulerState+0x38>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d102      	bne.n	800fc92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fc8c:	2302      	movs	r3, #2
 800fc8e:	607b      	str	r3, [r7, #4]
 800fc90:	e001      	b.n	800fc96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fc92:	2300      	movs	r3, #0
 800fc94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fc96:	687b      	ldr	r3, [r7, #4]
	}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	370c      	adds	r7, #12
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca2:	4770      	bx	lr
 800fca4:	200099a0 	.word	0x200099a0
 800fca8:	200099bc 	.word	0x200099bc

0800fcac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b084      	sub	sp, #16
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d051      	beq.n	800fd66 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcc6:	4b2a      	ldr	r3, [pc, #168]	; (800fd70 <xTaskPriorityInherit+0xc4>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d241      	bcs.n	800fd54 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	699b      	ldr	r3, [r3, #24]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	db06      	blt.n	800fce6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcd8:	4b25      	ldr	r3, [pc, #148]	; (800fd70 <xTaskPriorityInherit+0xc4>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	6959      	ldr	r1, [r3, #20]
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcee:	4613      	mov	r3, r2
 800fcf0:	009b      	lsls	r3, r3, #2
 800fcf2:	4413      	add	r3, r2
 800fcf4:	009b      	lsls	r3, r3, #2
 800fcf6:	4a1f      	ldr	r2, [pc, #124]	; (800fd74 <xTaskPriorityInherit+0xc8>)
 800fcf8:	4413      	add	r3, r2
 800fcfa:	4299      	cmp	r1, r3
 800fcfc:	d122      	bne.n	800fd44 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	3304      	adds	r3, #4
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fe f8fa 	bl	800defc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fd08:	4b19      	ldr	r3, [pc, #100]	; (800fd70 <xTaskPriorityInherit+0xc4>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd16:	4b18      	ldr	r3, [pc, #96]	; (800fd78 <xTaskPriorityInherit+0xcc>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d903      	bls.n	800fd26 <xTaskPriorityInherit+0x7a>
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd22:	4a15      	ldr	r2, [pc, #84]	; (800fd78 <xTaskPriorityInherit+0xcc>)
 800fd24:	6013      	str	r3, [r2, #0]
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd2a:	4613      	mov	r3, r2
 800fd2c:	009b      	lsls	r3, r3, #2
 800fd2e:	4413      	add	r3, r2
 800fd30:	009b      	lsls	r3, r3, #2
 800fd32:	4a10      	ldr	r2, [pc, #64]	; (800fd74 <xTaskPriorityInherit+0xc8>)
 800fd34:	441a      	add	r2, r3
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	3304      	adds	r3, #4
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	4610      	mov	r0, r2
 800fd3e:	f7fe f880 	bl	800de42 <vListInsertEnd>
 800fd42:	e004      	b.n	800fd4e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fd44:	4b0a      	ldr	r3, [pc, #40]	; (800fd70 <xTaskPriorityInherit+0xc4>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fd4e:	2301      	movs	r3, #1
 800fd50:	60fb      	str	r3, [r7, #12]
 800fd52:	e008      	b.n	800fd66 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fd58:	4b05      	ldr	r3, [pc, #20]	; (800fd70 <xTaskPriorityInherit+0xc4>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d201      	bcs.n	800fd66 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fd62:	2301      	movs	r3, #1
 800fd64:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fd66:	68fb      	ldr	r3, [r7, #12]
	}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3710      	adds	r7, #16
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	200094c0 	.word	0x200094c0
 800fd74:	200094c4 	.word	0x200094c4
 800fd78:	2000999c 	.word	0x2000999c

0800fd7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b086      	sub	sp, #24
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d056      	beq.n	800fe40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fd92:	4b2e      	ldr	r3, [pc, #184]	; (800fe4c <xTaskPriorityDisinherit+0xd0>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	693a      	ldr	r2, [r7, #16]
 800fd98:	429a      	cmp	r2, r3
 800fd9a:	d00a      	beq.n	800fdb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda0:	f383 8811 	msr	BASEPRI, r3
 800fda4:	f3bf 8f6f 	isb	sy
 800fda8:	f3bf 8f4f 	dsb	sy
 800fdac:	60fb      	str	r3, [r7, #12]
}
 800fdae:	bf00      	nop
 800fdb0:	e7fe      	b.n	800fdb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d10a      	bne.n	800fdd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdbe:	f383 8811 	msr	BASEPRI, r3
 800fdc2:	f3bf 8f6f 	isb	sy
 800fdc6:	f3bf 8f4f 	dsb	sy
 800fdca:	60bb      	str	r3, [r7, #8]
}
 800fdcc:	bf00      	nop
 800fdce:	e7fe      	b.n	800fdce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdd4:	1e5a      	subs	r2, r3, #1
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fdda:	693b      	ldr	r3, [r7, #16]
 800fddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d02c      	beq.n	800fe40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d128      	bne.n	800fe40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	3304      	adds	r3, #4
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7fe f882 	bl	800defc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe10:	4b0f      	ldr	r3, [pc, #60]	; (800fe50 <xTaskPriorityDisinherit+0xd4>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d903      	bls.n	800fe20 <xTaskPriorityDisinherit+0xa4>
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe1c:	4a0c      	ldr	r2, [pc, #48]	; (800fe50 <xTaskPriorityDisinherit+0xd4>)
 800fe1e:	6013      	str	r3, [r2, #0]
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe24:	4613      	mov	r3, r2
 800fe26:	009b      	lsls	r3, r3, #2
 800fe28:	4413      	add	r3, r2
 800fe2a:	009b      	lsls	r3, r3, #2
 800fe2c:	4a09      	ldr	r2, [pc, #36]	; (800fe54 <xTaskPriorityDisinherit+0xd8>)
 800fe2e:	441a      	add	r2, r3
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	3304      	adds	r3, #4
 800fe34:	4619      	mov	r1, r3
 800fe36:	4610      	mov	r0, r2
 800fe38:	f7fe f803 	bl	800de42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fe40:	697b      	ldr	r3, [r7, #20]
	}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3718      	adds	r7, #24
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}
 800fe4a:	bf00      	nop
 800fe4c:	200094c0 	.word	0x200094c0
 800fe50:	2000999c 	.word	0x2000999c
 800fe54:	200094c4 	.word	0x200094c4

0800fe58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b088      	sub	sp, #32
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fe66:	2301      	movs	r3, #1
 800fe68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d06a      	beq.n	800ff46 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fe70:	69bb      	ldr	r3, [r7, #24]
 800fe72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d10a      	bne.n	800fe8e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800fe78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe7c:	f383 8811 	msr	BASEPRI, r3
 800fe80:	f3bf 8f6f 	isb	sy
 800fe84:	f3bf 8f4f 	dsb	sy
 800fe88:	60fb      	str	r3, [r7, #12]
}
 800fe8a:	bf00      	nop
 800fe8c:	e7fe      	b.n	800fe8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fe8e:	69bb      	ldr	r3, [r7, #24]
 800fe90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe92:	683a      	ldr	r2, [r7, #0]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d902      	bls.n	800fe9e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	61fb      	str	r3, [r7, #28]
 800fe9c:	e002      	b.n	800fea4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fe9e:	69bb      	ldr	r3, [r7, #24]
 800fea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fea2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fea4:	69bb      	ldr	r3, [r7, #24]
 800fea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fea8:	69fa      	ldr	r2, [r7, #28]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d04b      	beq.n	800ff46 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800feae:	69bb      	ldr	r3, [r7, #24]
 800feb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800feb2:	697a      	ldr	r2, [r7, #20]
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d146      	bne.n	800ff46 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800feb8:	4b25      	ldr	r3, [pc, #148]	; (800ff50 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	69ba      	ldr	r2, [r7, #24]
 800febe:	429a      	cmp	r2, r3
 800fec0:	d10a      	bne.n	800fed8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800fec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec6:	f383 8811 	msr	BASEPRI, r3
 800feca:	f3bf 8f6f 	isb	sy
 800fece:	f3bf 8f4f 	dsb	sy
 800fed2:	60bb      	str	r3, [r7, #8]
}
 800fed4:	bf00      	nop
 800fed6:	e7fe      	b.n	800fed6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fed8:	69bb      	ldr	r3, [r7, #24]
 800feda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fedc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fede:	69bb      	ldr	r3, [r7, #24]
 800fee0:	69fa      	ldr	r2, [r7, #28]
 800fee2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fee4:	69bb      	ldr	r3, [r7, #24]
 800fee6:	699b      	ldr	r3, [r3, #24]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	db04      	blt.n	800fef6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800feec:	69fb      	ldr	r3, [r7, #28]
 800feee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fef2:	69bb      	ldr	r3, [r7, #24]
 800fef4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fef6:	69bb      	ldr	r3, [r7, #24]
 800fef8:	6959      	ldr	r1, [r3, #20]
 800fefa:	693a      	ldr	r2, [r7, #16]
 800fefc:	4613      	mov	r3, r2
 800fefe:	009b      	lsls	r3, r3, #2
 800ff00:	4413      	add	r3, r2
 800ff02:	009b      	lsls	r3, r3, #2
 800ff04:	4a13      	ldr	r2, [pc, #76]	; (800ff54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ff06:	4413      	add	r3, r2
 800ff08:	4299      	cmp	r1, r3
 800ff0a:	d11c      	bne.n	800ff46 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff0c:	69bb      	ldr	r3, [r7, #24]
 800ff0e:	3304      	adds	r3, #4
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7fd fff3 	bl	800defc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ff16:	69bb      	ldr	r3, [r7, #24]
 800ff18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff1a:	4b0f      	ldr	r3, [pc, #60]	; (800ff58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d903      	bls.n	800ff2a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ff22:	69bb      	ldr	r3, [r7, #24]
 800ff24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff26:	4a0c      	ldr	r2, [pc, #48]	; (800ff58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ff28:	6013      	str	r3, [r2, #0]
 800ff2a:	69bb      	ldr	r3, [r7, #24]
 800ff2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff2e:	4613      	mov	r3, r2
 800ff30:	009b      	lsls	r3, r3, #2
 800ff32:	4413      	add	r3, r2
 800ff34:	009b      	lsls	r3, r3, #2
 800ff36:	4a07      	ldr	r2, [pc, #28]	; (800ff54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ff38:	441a      	add	r2, r3
 800ff3a:	69bb      	ldr	r3, [r7, #24]
 800ff3c:	3304      	adds	r3, #4
 800ff3e:	4619      	mov	r1, r3
 800ff40:	4610      	mov	r0, r2
 800ff42:	f7fd ff7e 	bl	800de42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff46:	bf00      	nop
 800ff48:	3720      	adds	r7, #32
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	200094c0 	.word	0x200094c0
 800ff54:	200094c4 	.word	0x200094c4
 800ff58:	2000999c 	.word	0x2000999c

0800ff5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ff5c:	b480      	push	{r7}
 800ff5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ff60:	4b07      	ldr	r3, [pc, #28]	; (800ff80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d004      	beq.n	800ff72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ff68:	4b05      	ldr	r3, [pc, #20]	; (800ff80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff6e:	3201      	adds	r2, #1
 800ff70:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ff72:	4b03      	ldr	r3, [pc, #12]	; (800ff80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ff74:	681b      	ldr	r3, [r3, #0]
	}
 800ff76:	4618      	mov	r0, r3
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr
 800ff80:	200094c0 	.word	0x200094c0

0800ff84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b084      	sub	sp, #16
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ff8e:	4b21      	ldr	r3, [pc, #132]	; (8010014 <prvAddCurrentTaskToDelayedList+0x90>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff94:	4b20      	ldr	r3, [pc, #128]	; (8010018 <prvAddCurrentTaskToDelayedList+0x94>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	3304      	adds	r3, #4
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7fd ffae 	bl	800defc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ffa6:	d10a      	bne.n	800ffbe <prvAddCurrentTaskToDelayedList+0x3a>
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d007      	beq.n	800ffbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffae:	4b1a      	ldr	r3, [pc, #104]	; (8010018 <prvAddCurrentTaskToDelayedList+0x94>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	3304      	adds	r3, #4
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	4819      	ldr	r0, [pc, #100]	; (801001c <prvAddCurrentTaskToDelayedList+0x98>)
 800ffb8:	f7fd ff43 	bl	800de42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ffbc:	e026      	b.n	801000c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ffbe:	68fa      	ldr	r2, [r7, #12]
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	4413      	add	r3, r2
 800ffc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ffc6:	4b14      	ldr	r3, [pc, #80]	; (8010018 <prvAddCurrentTaskToDelayedList+0x94>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	68ba      	ldr	r2, [r7, #8]
 800ffcc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ffce:	68ba      	ldr	r2, [r7, #8]
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d209      	bcs.n	800ffea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffd6:	4b12      	ldr	r3, [pc, #72]	; (8010020 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	4b0f      	ldr	r3, [pc, #60]	; (8010018 <prvAddCurrentTaskToDelayedList+0x94>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	3304      	adds	r3, #4
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	4610      	mov	r0, r2
 800ffe4:	f7fd ff51 	bl	800de8a <vListInsert>
}
 800ffe8:	e010      	b.n	801000c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffea:	4b0e      	ldr	r3, [pc, #56]	; (8010024 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ffec:	681a      	ldr	r2, [r3, #0]
 800ffee:	4b0a      	ldr	r3, [pc, #40]	; (8010018 <prvAddCurrentTaskToDelayedList+0x94>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	3304      	adds	r3, #4
 800fff4:	4619      	mov	r1, r3
 800fff6:	4610      	mov	r0, r2
 800fff8:	f7fd ff47 	bl	800de8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fffc:	4b0a      	ldr	r3, [pc, #40]	; (8010028 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	68ba      	ldr	r2, [r7, #8]
 8010002:	429a      	cmp	r2, r3
 8010004:	d202      	bcs.n	801000c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010006:	4a08      	ldr	r2, [pc, #32]	; (8010028 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	6013      	str	r3, [r2, #0]
}
 801000c:	bf00      	nop
 801000e:	3710      	adds	r7, #16
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}
 8010014:	20009998 	.word	0x20009998
 8010018:	200094c0 	.word	0x200094c0
 801001c:	20009980 	.word	0x20009980
 8010020:	20009950 	.word	0x20009950
 8010024:	2000994c 	.word	0x2000994c
 8010028:	200099b4 	.word	0x200099b4

0801002c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b08a      	sub	sp, #40	; 0x28
 8010030:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010032:	2300      	movs	r3, #0
 8010034:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010036:	f000 fb07 	bl	8010648 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801003a:	4b1c      	ldr	r3, [pc, #112]	; (80100ac <xTimerCreateTimerTask+0x80>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d021      	beq.n	8010086 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010042:	2300      	movs	r3, #0
 8010044:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010046:	2300      	movs	r3, #0
 8010048:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801004a:	1d3a      	adds	r2, r7, #4
 801004c:	f107 0108 	add.w	r1, r7, #8
 8010050:	f107 030c 	add.w	r3, r7, #12
 8010054:	4618      	mov	r0, r3
 8010056:	f7fd fead 	bl	800ddb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801005a:	6879      	ldr	r1, [r7, #4]
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	68fa      	ldr	r2, [r7, #12]
 8010060:	9202      	str	r2, [sp, #8]
 8010062:	9301      	str	r3, [sp, #4]
 8010064:	2302      	movs	r3, #2
 8010066:	9300      	str	r3, [sp, #0]
 8010068:	2300      	movs	r3, #0
 801006a:	460a      	mov	r2, r1
 801006c:	4910      	ldr	r1, [pc, #64]	; (80100b0 <xTimerCreateTimerTask+0x84>)
 801006e:	4811      	ldr	r0, [pc, #68]	; (80100b4 <xTimerCreateTimerTask+0x88>)
 8010070:	f7fe ffa6 	bl	800efc0 <xTaskCreateStatic>
 8010074:	4603      	mov	r3, r0
 8010076:	4a10      	ldr	r2, [pc, #64]	; (80100b8 <xTimerCreateTimerTask+0x8c>)
 8010078:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801007a:	4b0f      	ldr	r3, [pc, #60]	; (80100b8 <xTimerCreateTimerTask+0x8c>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d001      	beq.n	8010086 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010082:	2301      	movs	r3, #1
 8010084:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d10a      	bne.n	80100a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801008c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010090:	f383 8811 	msr	BASEPRI, r3
 8010094:	f3bf 8f6f 	isb	sy
 8010098:	f3bf 8f4f 	dsb	sy
 801009c:	613b      	str	r3, [r7, #16]
}
 801009e:	bf00      	nop
 80100a0:	e7fe      	b.n	80100a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80100a2:	697b      	ldr	r3, [r7, #20]
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3718      	adds	r7, #24
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	200099f0 	.word	0x200099f0
 80100b0:	08012a40 	.word	0x08012a40
 80100b4:	080101f1 	.word	0x080101f1
 80100b8:	200099f4 	.word	0x200099f4

080100bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b08a      	sub	sp, #40	; 0x28
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	607a      	str	r2, [r7, #4]
 80100c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80100ca:	2300      	movs	r3, #0
 80100cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d10a      	bne.n	80100ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80100d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d8:	f383 8811 	msr	BASEPRI, r3
 80100dc:	f3bf 8f6f 	isb	sy
 80100e0:	f3bf 8f4f 	dsb	sy
 80100e4:	623b      	str	r3, [r7, #32]
}
 80100e6:	bf00      	nop
 80100e8:	e7fe      	b.n	80100e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80100ea:	4b1a      	ldr	r3, [pc, #104]	; (8010154 <xTimerGenericCommand+0x98>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d02a      	beq.n	8010148 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	2b05      	cmp	r3, #5
 8010102:	dc18      	bgt.n	8010136 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010104:	f7ff fdb4 	bl	800fc70 <xTaskGetSchedulerState>
 8010108:	4603      	mov	r3, r0
 801010a:	2b02      	cmp	r3, #2
 801010c:	d109      	bne.n	8010122 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801010e:	4b11      	ldr	r3, [pc, #68]	; (8010154 <xTimerGenericCommand+0x98>)
 8010110:	6818      	ldr	r0, [r3, #0]
 8010112:	f107 0110 	add.w	r1, r7, #16
 8010116:	2300      	movs	r3, #0
 8010118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801011a:	f7fe f977 	bl	800e40c <xQueueGenericSend>
 801011e:	6278      	str	r0, [r7, #36]	; 0x24
 8010120:	e012      	b.n	8010148 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010122:	4b0c      	ldr	r3, [pc, #48]	; (8010154 <xTimerGenericCommand+0x98>)
 8010124:	6818      	ldr	r0, [r3, #0]
 8010126:	f107 0110 	add.w	r1, r7, #16
 801012a:	2300      	movs	r3, #0
 801012c:	2200      	movs	r2, #0
 801012e:	f7fe f96d 	bl	800e40c <xQueueGenericSend>
 8010132:	6278      	str	r0, [r7, #36]	; 0x24
 8010134:	e008      	b.n	8010148 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010136:	4b07      	ldr	r3, [pc, #28]	; (8010154 <xTimerGenericCommand+0x98>)
 8010138:	6818      	ldr	r0, [r3, #0]
 801013a:	f107 0110 	add.w	r1, r7, #16
 801013e:	2300      	movs	r3, #0
 8010140:	683a      	ldr	r2, [r7, #0]
 8010142:	f7fe fa61 	bl	800e608 <xQueueGenericSendFromISR>
 8010146:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801014a:	4618      	mov	r0, r3
 801014c:	3728      	adds	r7, #40	; 0x28
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}
 8010152:	bf00      	nop
 8010154:	200099f0 	.word	0x200099f0

08010158 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b088      	sub	sp, #32
 801015c:	af02      	add	r7, sp, #8
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010162:	4b22      	ldr	r3, [pc, #136]	; (80101ec <prvProcessExpiredTimer+0x94>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	3304      	adds	r3, #4
 8010170:	4618      	mov	r0, r3
 8010172:	f7fd fec3 	bl	800defc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801017c:	f003 0304 	and.w	r3, r3, #4
 8010180:	2b00      	cmp	r3, #0
 8010182:	d022      	beq.n	80101ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	699a      	ldr	r2, [r3, #24]
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	18d1      	adds	r1, r2, r3
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	683a      	ldr	r2, [r7, #0]
 8010190:	6978      	ldr	r0, [r7, #20]
 8010192:	f000 f8d1 	bl	8010338 <prvInsertTimerInActiveList>
 8010196:	4603      	mov	r3, r0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d01f      	beq.n	80101dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801019c:	2300      	movs	r3, #0
 801019e:	9300      	str	r3, [sp, #0]
 80101a0:	2300      	movs	r3, #0
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	2100      	movs	r1, #0
 80101a6:	6978      	ldr	r0, [r7, #20]
 80101a8:	f7ff ff88 	bl	80100bc <xTimerGenericCommand>
 80101ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d113      	bne.n	80101dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80101b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101b8:	f383 8811 	msr	BASEPRI, r3
 80101bc:	f3bf 8f6f 	isb	sy
 80101c0:	f3bf 8f4f 	dsb	sy
 80101c4:	60fb      	str	r3, [r7, #12]
}
 80101c6:	bf00      	nop
 80101c8:	e7fe      	b.n	80101c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80101d0:	f023 0301 	bic.w	r3, r3, #1
 80101d4:	b2da      	uxtb	r2, r3
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	6a1b      	ldr	r3, [r3, #32]
 80101e0:	6978      	ldr	r0, [r7, #20]
 80101e2:	4798      	blx	r3
}
 80101e4:	bf00      	nop
 80101e6:	3718      	adds	r7, #24
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}
 80101ec:	200099e8 	.word	0x200099e8

080101f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b084      	sub	sp, #16
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80101f8:	f107 0308 	add.w	r3, r7, #8
 80101fc:	4618      	mov	r0, r3
 80101fe:	f000 f857 	bl	80102b0 <prvGetNextExpireTime>
 8010202:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	4619      	mov	r1, r3
 8010208:	68f8      	ldr	r0, [r7, #12]
 801020a:	f000 f803 	bl	8010214 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801020e:	f000 f8d5 	bl	80103bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010212:	e7f1      	b.n	80101f8 <prvTimerTask+0x8>

08010214 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801021e:	f7ff f92b 	bl	800f478 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010222:	f107 0308 	add.w	r3, r7, #8
 8010226:	4618      	mov	r0, r3
 8010228:	f000 f866 	bl	80102f8 <prvSampleTimeNow>
 801022c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d130      	bne.n	8010296 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d10a      	bne.n	8010250 <prvProcessTimerOrBlockTask+0x3c>
 801023a:	687a      	ldr	r2, [r7, #4]
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	429a      	cmp	r2, r3
 8010240:	d806      	bhi.n	8010250 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010242:	f7ff f927 	bl	800f494 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010246:	68f9      	ldr	r1, [r7, #12]
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f7ff ff85 	bl	8010158 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801024e:	e024      	b.n	801029a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d008      	beq.n	8010268 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010256:	4b13      	ldr	r3, [pc, #76]	; (80102a4 <prvProcessTimerOrBlockTask+0x90>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d101      	bne.n	8010264 <prvProcessTimerOrBlockTask+0x50>
 8010260:	2301      	movs	r3, #1
 8010262:	e000      	b.n	8010266 <prvProcessTimerOrBlockTask+0x52>
 8010264:	2300      	movs	r3, #0
 8010266:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010268:	4b0f      	ldr	r3, [pc, #60]	; (80102a8 <prvProcessTimerOrBlockTask+0x94>)
 801026a:	6818      	ldr	r0, [r3, #0]
 801026c:	687a      	ldr	r2, [r7, #4]
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	1ad3      	subs	r3, r2, r3
 8010272:	683a      	ldr	r2, [r7, #0]
 8010274:	4619      	mov	r1, r3
 8010276:	f7fe fe6f 	bl	800ef58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801027a:	f7ff f90b 	bl	800f494 <xTaskResumeAll>
 801027e:	4603      	mov	r3, r0
 8010280:	2b00      	cmp	r3, #0
 8010282:	d10a      	bne.n	801029a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010284:	4b09      	ldr	r3, [pc, #36]	; (80102ac <prvProcessTimerOrBlockTask+0x98>)
 8010286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801028a:	601a      	str	r2, [r3, #0]
 801028c:	f3bf 8f4f 	dsb	sy
 8010290:	f3bf 8f6f 	isb	sy
}
 8010294:	e001      	b.n	801029a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010296:	f7ff f8fd 	bl	800f494 <xTaskResumeAll>
}
 801029a:	bf00      	nop
 801029c:	3710      	adds	r7, #16
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	200099ec 	.word	0x200099ec
 80102a8:	200099f0 	.word	0x200099f0
 80102ac:	e000ed04 	.word	0xe000ed04

080102b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80102b0:	b480      	push	{r7}
 80102b2:	b085      	sub	sp, #20
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80102b8:	4b0e      	ldr	r3, [pc, #56]	; (80102f4 <prvGetNextExpireTime+0x44>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d101      	bne.n	80102c6 <prvGetNextExpireTime+0x16>
 80102c2:	2201      	movs	r2, #1
 80102c4:	e000      	b.n	80102c8 <prvGetNextExpireTime+0x18>
 80102c6:	2200      	movs	r2, #0
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d105      	bne.n	80102e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80102d4:	4b07      	ldr	r3, [pc, #28]	; (80102f4 <prvGetNextExpireTime+0x44>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	60fb      	str	r3, [r7, #12]
 80102de:	e001      	b.n	80102e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80102e0:	2300      	movs	r3, #0
 80102e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80102e4:	68fb      	ldr	r3, [r7, #12]
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3714      	adds	r7, #20
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr
 80102f2:	bf00      	nop
 80102f4:	200099e8 	.word	0x200099e8

080102f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b084      	sub	sp, #16
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010300:	f7ff f966 	bl	800f5d0 <xTaskGetTickCount>
 8010304:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010306:	4b0b      	ldr	r3, [pc, #44]	; (8010334 <prvSampleTimeNow+0x3c>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	68fa      	ldr	r2, [r7, #12]
 801030c:	429a      	cmp	r2, r3
 801030e:	d205      	bcs.n	801031c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010310:	f000 f936 	bl	8010580 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2201      	movs	r2, #1
 8010318:	601a      	str	r2, [r3, #0]
 801031a:	e002      	b.n	8010322 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2200      	movs	r2, #0
 8010320:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010322:	4a04      	ldr	r2, [pc, #16]	; (8010334 <prvSampleTimeNow+0x3c>)
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010328:	68fb      	ldr	r3, [r7, #12]
}
 801032a:	4618      	mov	r0, r3
 801032c:	3710      	adds	r7, #16
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	200099f8 	.word	0x200099f8

08010338 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b086      	sub	sp, #24
 801033c:	af00      	add	r7, sp, #0
 801033e:	60f8      	str	r0, [r7, #12]
 8010340:	60b9      	str	r1, [r7, #8]
 8010342:	607a      	str	r2, [r7, #4]
 8010344:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010346:	2300      	movs	r3, #0
 8010348:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	68ba      	ldr	r2, [r7, #8]
 801034e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	68fa      	ldr	r2, [r7, #12]
 8010354:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010356:	68ba      	ldr	r2, [r7, #8]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	429a      	cmp	r2, r3
 801035c:	d812      	bhi.n	8010384 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	1ad2      	subs	r2, r2, r3
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	699b      	ldr	r3, [r3, #24]
 8010368:	429a      	cmp	r2, r3
 801036a:	d302      	bcc.n	8010372 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801036c:	2301      	movs	r3, #1
 801036e:	617b      	str	r3, [r7, #20]
 8010370:	e01b      	b.n	80103aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010372:	4b10      	ldr	r3, [pc, #64]	; (80103b4 <prvInsertTimerInActiveList+0x7c>)
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	3304      	adds	r3, #4
 801037a:	4619      	mov	r1, r3
 801037c:	4610      	mov	r0, r2
 801037e:	f7fd fd84 	bl	800de8a <vListInsert>
 8010382:	e012      	b.n	80103aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	429a      	cmp	r2, r3
 801038a:	d206      	bcs.n	801039a <prvInsertTimerInActiveList+0x62>
 801038c:	68ba      	ldr	r2, [r7, #8]
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	429a      	cmp	r2, r3
 8010392:	d302      	bcc.n	801039a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010394:	2301      	movs	r3, #1
 8010396:	617b      	str	r3, [r7, #20]
 8010398:	e007      	b.n	80103aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801039a:	4b07      	ldr	r3, [pc, #28]	; (80103b8 <prvInsertTimerInActiveList+0x80>)
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	3304      	adds	r3, #4
 80103a2:	4619      	mov	r1, r3
 80103a4:	4610      	mov	r0, r2
 80103a6:	f7fd fd70 	bl	800de8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80103aa:	697b      	ldr	r3, [r7, #20]
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3718      	adds	r7, #24
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}
 80103b4:	200099ec 	.word	0x200099ec
 80103b8:	200099e8 	.word	0x200099e8

080103bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b08e      	sub	sp, #56	; 0x38
 80103c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80103c2:	e0ca      	b.n	801055a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	da18      	bge.n	80103fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80103ca:	1d3b      	adds	r3, r7, #4
 80103cc:	3304      	adds	r3, #4
 80103ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80103d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d10a      	bne.n	80103ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80103d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103da:	f383 8811 	msr	BASEPRI, r3
 80103de:	f3bf 8f6f 	isb	sy
 80103e2:	f3bf 8f4f 	dsb	sy
 80103e6:	61fb      	str	r3, [r7, #28]
}
 80103e8:	bf00      	nop
 80103ea:	e7fe      	b.n	80103ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80103ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103f2:	6850      	ldr	r0, [r2, #4]
 80103f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103f6:	6892      	ldr	r2, [r2, #8]
 80103f8:	4611      	mov	r1, r2
 80103fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	f2c0 80aa 	blt.w	8010558 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801040a:	695b      	ldr	r3, [r3, #20]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d004      	beq.n	801041a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010412:	3304      	adds	r3, #4
 8010414:	4618      	mov	r0, r3
 8010416:	f7fd fd71 	bl	800defc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801041a:	463b      	mov	r3, r7
 801041c:	4618      	mov	r0, r3
 801041e:	f7ff ff6b 	bl	80102f8 <prvSampleTimeNow>
 8010422:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2b09      	cmp	r3, #9
 8010428:	f200 8097 	bhi.w	801055a <prvProcessReceivedCommands+0x19e>
 801042c:	a201      	add	r2, pc, #4	; (adr r2, 8010434 <prvProcessReceivedCommands+0x78>)
 801042e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010432:	bf00      	nop
 8010434:	0801045d 	.word	0x0801045d
 8010438:	0801045d 	.word	0x0801045d
 801043c:	0801045d 	.word	0x0801045d
 8010440:	080104d1 	.word	0x080104d1
 8010444:	080104e5 	.word	0x080104e5
 8010448:	0801052f 	.word	0x0801052f
 801044c:	0801045d 	.word	0x0801045d
 8010450:	0801045d 	.word	0x0801045d
 8010454:	080104d1 	.word	0x080104d1
 8010458:	080104e5 	.word	0x080104e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801045c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801045e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010462:	f043 0301 	orr.w	r3, r3, #1
 8010466:	b2da      	uxtb	r2, r3
 8010468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801046a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801046e:	68ba      	ldr	r2, [r7, #8]
 8010470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010472:	699b      	ldr	r3, [r3, #24]
 8010474:	18d1      	adds	r1, r2, r3
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801047a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801047c:	f7ff ff5c 	bl	8010338 <prvInsertTimerInActiveList>
 8010480:	4603      	mov	r3, r0
 8010482:	2b00      	cmp	r3, #0
 8010484:	d069      	beq.n	801055a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010488:	6a1b      	ldr	r3, [r3, #32]
 801048a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801048c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801048e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010494:	f003 0304 	and.w	r3, r3, #4
 8010498:	2b00      	cmp	r3, #0
 801049a:	d05e      	beq.n	801055a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801049c:	68ba      	ldr	r2, [r7, #8]
 801049e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a0:	699b      	ldr	r3, [r3, #24]
 80104a2:	441a      	add	r2, r3
 80104a4:	2300      	movs	r3, #0
 80104a6:	9300      	str	r3, [sp, #0]
 80104a8:	2300      	movs	r3, #0
 80104aa:	2100      	movs	r1, #0
 80104ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104ae:	f7ff fe05 	bl	80100bc <xTimerGenericCommand>
 80104b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80104b4:	6a3b      	ldr	r3, [r7, #32]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d14f      	bne.n	801055a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80104ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104be:	f383 8811 	msr	BASEPRI, r3
 80104c2:	f3bf 8f6f 	isb	sy
 80104c6:	f3bf 8f4f 	dsb	sy
 80104ca:	61bb      	str	r3, [r7, #24]
}
 80104cc:	bf00      	nop
 80104ce:	e7fe      	b.n	80104ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80104d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104d6:	f023 0301 	bic.w	r3, r3, #1
 80104da:	b2da      	uxtb	r2, r3
 80104dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80104e2:	e03a      	b.n	801055a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80104e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104ea:	f043 0301 	orr.w	r3, r3, #1
 80104ee:	b2da      	uxtb	r2, r3
 80104f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80104f6:	68ba      	ldr	r2, [r7, #8]
 80104f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80104fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104fe:	699b      	ldr	r3, [r3, #24]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d10a      	bne.n	801051a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010508:	f383 8811 	msr	BASEPRI, r3
 801050c:	f3bf 8f6f 	isb	sy
 8010510:	f3bf 8f4f 	dsb	sy
 8010514:	617b      	str	r3, [r7, #20]
}
 8010516:	bf00      	nop
 8010518:	e7fe      	b.n	8010518 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801051a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051c:	699a      	ldr	r2, [r3, #24]
 801051e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010520:	18d1      	adds	r1, r2, r3
 8010522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010528:	f7ff ff06 	bl	8010338 <prvInsertTimerInActiveList>
					break;
 801052c:	e015      	b.n	801055a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801052e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010530:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010534:	f003 0302 	and.w	r3, r3, #2
 8010538:	2b00      	cmp	r3, #0
 801053a:	d103      	bne.n	8010544 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801053c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801053e:	f000 fbb7 	bl	8010cb0 <vPortFree>
 8010542:	e00a      	b.n	801055a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801054a:	f023 0301 	bic.w	r3, r3, #1
 801054e:	b2da      	uxtb	r2, r3
 8010550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010556:	e000      	b.n	801055a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010558:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801055a:	4b08      	ldr	r3, [pc, #32]	; (801057c <prvProcessReceivedCommands+0x1c0>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	1d39      	adds	r1, r7, #4
 8010560:	2200      	movs	r2, #0
 8010562:	4618      	mov	r0, r3
 8010564:	f7fe f8ec 	bl	800e740 <xQueueReceive>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	f47f af2a 	bne.w	80103c4 <prvProcessReceivedCommands+0x8>
	}
}
 8010570:	bf00      	nop
 8010572:	bf00      	nop
 8010574:	3730      	adds	r7, #48	; 0x30
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	200099f0 	.word	0x200099f0

08010580 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b088      	sub	sp, #32
 8010584:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010586:	e048      	b.n	801061a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010588:	4b2d      	ldr	r3, [pc, #180]	; (8010640 <prvSwitchTimerLists+0xc0>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	68db      	ldr	r3, [r3, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010592:	4b2b      	ldr	r3, [pc, #172]	; (8010640 <prvSwitchTimerLists+0xc0>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	68db      	ldr	r3, [r3, #12]
 8010598:	68db      	ldr	r3, [r3, #12]
 801059a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	3304      	adds	r3, #4
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7fd fcab 	bl	800defc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	6a1b      	ldr	r3, [r3, #32]
 80105aa:	68f8      	ldr	r0, [r7, #12]
 80105ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105b4:	f003 0304 	and.w	r3, r3, #4
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d02e      	beq.n	801061a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	699b      	ldr	r3, [r3, #24]
 80105c0:	693a      	ldr	r2, [r7, #16]
 80105c2:	4413      	add	r3, r2
 80105c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80105c6:	68ba      	ldr	r2, [r7, #8]
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d90e      	bls.n	80105ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	68ba      	ldr	r2, [r7, #8]
 80105d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	68fa      	ldr	r2, [r7, #12]
 80105d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80105da:	4b19      	ldr	r3, [pc, #100]	; (8010640 <prvSwitchTimerLists+0xc0>)
 80105dc:	681a      	ldr	r2, [r3, #0]
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	3304      	adds	r3, #4
 80105e2:	4619      	mov	r1, r3
 80105e4:	4610      	mov	r0, r2
 80105e6:	f7fd fc50 	bl	800de8a <vListInsert>
 80105ea:	e016      	b.n	801061a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80105ec:	2300      	movs	r3, #0
 80105ee:	9300      	str	r3, [sp, #0]
 80105f0:	2300      	movs	r3, #0
 80105f2:	693a      	ldr	r2, [r7, #16]
 80105f4:	2100      	movs	r1, #0
 80105f6:	68f8      	ldr	r0, [r7, #12]
 80105f8:	f7ff fd60 	bl	80100bc <xTimerGenericCommand>
 80105fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d10a      	bne.n	801061a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010608:	f383 8811 	msr	BASEPRI, r3
 801060c:	f3bf 8f6f 	isb	sy
 8010610:	f3bf 8f4f 	dsb	sy
 8010614:	603b      	str	r3, [r7, #0]
}
 8010616:	bf00      	nop
 8010618:	e7fe      	b.n	8010618 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801061a:	4b09      	ldr	r3, [pc, #36]	; (8010640 <prvSwitchTimerLists+0xc0>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d1b1      	bne.n	8010588 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010624:	4b06      	ldr	r3, [pc, #24]	; (8010640 <prvSwitchTimerLists+0xc0>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801062a:	4b06      	ldr	r3, [pc, #24]	; (8010644 <prvSwitchTimerLists+0xc4>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	4a04      	ldr	r2, [pc, #16]	; (8010640 <prvSwitchTimerLists+0xc0>)
 8010630:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010632:	4a04      	ldr	r2, [pc, #16]	; (8010644 <prvSwitchTimerLists+0xc4>)
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	6013      	str	r3, [r2, #0]
}
 8010638:	bf00      	nop
 801063a:	3718      	adds	r7, #24
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}
 8010640:	200099e8 	.word	0x200099e8
 8010644:	200099ec 	.word	0x200099ec

08010648 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b082      	sub	sp, #8
 801064c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801064e:	f000 f969 	bl	8010924 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010652:	4b15      	ldr	r3, [pc, #84]	; (80106a8 <prvCheckForValidListAndQueue+0x60>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d120      	bne.n	801069c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801065a:	4814      	ldr	r0, [pc, #80]	; (80106ac <prvCheckForValidListAndQueue+0x64>)
 801065c:	f7fd fbc4 	bl	800dde8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010660:	4813      	ldr	r0, [pc, #76]	; (80106b0 <prvCheckForValidListAndQueue+0x68>)
 8010662:	f7fd fbc1 	bl	800dde8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010666:	4b13      	ldr	r3, [pc, #76]	; (80106b4 <prvCheckForValidListAndQueue+0x6c>)
 8010668:	4a10      	ldr	r2, [pc, #64]	; (80106ac <prvCheckForValidListAndQueue+0x64>)
 801066a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801066c:	4b12      	ldr	r3, [pc, #72]	; (80106b8 <prvCheckForValidListAndQueue+0x70>)
 801066e:	4a10      	ldr	r2, [pc, #64]	; (80106b0 <prvCheckForValidListAndQueue+0x68>)
 8010670:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010672:	2300      	movs	r3, #0
 8010674:	9300      	str	r3, [sp, #0]
 8010676:	4b11      	ldr	r3, [pc, #68]	; (80106bc <prvCheckForValidListAndQueue+0x74>)
 8010678:	4a11      	ldr	r2, [pc, #68]	; (80106c0 <prvCheckForValidListAndQueue+0x78>)
 801067a:	2110      	movs	r1, #16
 801067c:	200a      	movs	r0, #10
 801067e:	f7fd fccf 	bl	800e020 <xQueueGenericCreateStatic>
 8010682:	4603      	mov	r3, r0
 8010684:	4a08      	ldr	r2, [pc, #32]	; (80106a8 <prvCheckForValidListAndQueue+0x60>)
 8010686:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010688:	4b07      	ldr	r3, [pc, #28]	; (80106a8 <prvCheckForValidListAndQueue+0x60>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d005      	beq.n	801069c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010690:	4b05      	ldr	r3, [pc, #20]	; (80106a8 <prvCheckForValidListAndQueue+0x60>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	490b      	ldr	r1, [pc, #44]	; (80106c4 <prvCheckForValidListAndQueue+0x7c>)
 8010696:	4618      	mov	r0, r3
 8010698:	f7fe fc0a 	bl	800eeb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801069c:	f000 f972 	bl	8010984 <vPortExitCritical>
}
 80106a0:	bf00      	nop
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	200099f0 	.word	0x200099f0
 80106ac:	200099c0 	.word	0x200099c0
 80106b0:	200099d4 	.word	0x200099d4
 80106b4:	200099e8 	.word	0x200099e8
 80106b8:	200099ec 	.word	0x200099ec
 80106bc:	20009a9c 	.word	0x20009a9c
 80106c0:	200099fc 	.word	0x200099fc
 80106c4:	08012a48 	.word	0x08012a48

080106c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80106c8:	b480      	push	{r7}
 80106ca:	b085      	sub	sp, #20
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	60f8      	str	r0, [r7, #12]
 80106d0:	60b9      	str	r1, [r7, #8]
 80106d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	3b04      	subs	r3, #4
 80106d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80106e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	3b04      	subs	r3, #4
 80106e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	f023 0201 	bic.w	r2, r3, #1
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	3b04      	subs	r3, #4
 80106f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80106f8:	4a0c      	ldr	r2, [pc, #48]	; (801072c <pxPortInitialiseStack+0x64>)
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	3b14      	subs	r3, #20
 8010702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010704:	687a      	ldr	r2, [r7, #4]
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	3b04      	subs	r3, #4
 801070e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	f06f 0202 	mvn.w	r2, #2
 8010716:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	3b20      	subs	r3, #32
 801071c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801071e:	68fb      	ldr	r3, [r7, #12]
}
 8010720:	4618      	mov	r0, r3
 8010722:	3714      	adds	r7, #20
 8010724:	46bd      	mov	sp, r7
 8010726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072a:	4770      	bx	lr
 801072c:	08010731 	.word	0x08010731

08010730 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010730:	b480      	push	{r7}
 8010732:	b085      	sub	sp, #20
 8010734:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010736:	2300      	movs	r3, #0
 8010738:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801073a:	4b12      	ldr	r3, [pc, #72]	; (8010784 <prvTaskExitError+0x54>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010742:	d00a      	beq.n	801075a <prvTaskExitError+0x2a>
	__asm volatile
 8010744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010748:	f383 8811 	msr	BASEPRI, r3
 801074c:	f3bf 8f6f 	isb	sy
 8010750:	f3bf 8f4f 	dsb	sy
 8010754:	60fb      	str	r3, [r7, #12]
}
 8010756:	bf00      	nop
 8010758:	e7fe      	b.n	8010758 <prvTaskExitError+0x28>
	__asm volatile
 801075a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801075e:	f383 8811 	msr	BASEPRI, r3
 8010762:	f3bf 8f6f 	isb	sy
 8010766:	f3bf 8f4f 	dsb	sy
 801076a:	60bb      	str	r3, [r7, #8]
}
 801076c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801076e:	bf00      	nop
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d0fc      	beq.n	8010770 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010776:	bf00      	nop
 8010778:	bf00      	nop
 801077a:	3714      	adds	r7, #20
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr
 8010784:	200000d4 	.word	0x200000d4
	...

08010790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010790:	4b07      	ldr	r3, [pc, #28]	; (80107b0 <pxCurrentTCBConst2>)
 8010792:	6819      	ldr	r1, [r3, #0]
 8010794:	6808      	ldr	r0, [r1, #0]
 8010796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801079a:	f380 8809 	msr	PSP, r0
 801079e:	f3bf 8f6f 	isb	sy
 80107a2:	f04f 0000 	mov.w	r0, #0
 80107a6:	f380 8811 	msr	BASEPRI, r0
 80107aa:	4770      	bx	lr
 80107ac:	f3af 8000 	nop.w

080107b0 <pxCurrentTCBConst2>:
 80107b0:	200094c0 	.word	0x200094c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80107b4:	bf00      	nop
 80107b6:	bf00      	nop

080107b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80107b8:	4808      	ldr	r0, [pc, #32]	; (80107dc <prvPortStartFirstTask+0x24>)
 80107ba:	6800      	ldr	r0, [r0, #0]
 80107bc:	6800      	ldr	r0, [r0, #0]
 80107be:	f380 8808 	msr	MSP, r0
 80107c2:	f04f 0000 	mov.w	r0, #0
 80107c6:	f380 8814 	msr	CONTROL, r0
 80107ca:	b662      	cpsie	i
 80107cc:	b661      	cpsie	f
 80107ce:	f3bf 8f4f 	dsb	sy
 80107d2:	f3bf 8f6f 	isb	sy
 80107d6:	df00      	svc	0
 80107d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80107da:	bf00      	nop
 80107dc:	e000ed08 	.word	0xe000ed08

080107e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b086      	sub	sp, #24
 80107e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80107e6:	4b46      	ldr	r3, [pc, #280]	; (8010900 <xPortStartScheduler+0x120>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	4a46      	ldr	r2, [pc, #280]	; (8010904 <xPortStartScheduler+0x124>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d10a      	bne.n	8010806 <xPortStartScheduler+0x26>
	__asm volatile
 80107f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f4:	f383 8811 	msr	BASEPRI, r3
 80107f8:	f3bf 8f6f 	isb	sy
 80107fc:	f3bf 8f4f 	dsb	sy
 8010800:	613b      	str	r3, [r7, #16]
}
 8010802:	bf00      	nop
 8010804:	e7fe      	b.n	8010804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010806:	4b3e      	ldr	r3, [pc, #248]	; (8010900 <xPortStartScheduler+0x120>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	4a3f      	ldr	r2, [pc, #252]	; (8010908 <xPortStartScheduler+0x128>)
 801080c:	4293      	cmp	r3, r2
 801080e:	d10a      	bne.n	8010826 <xPortStartScheduler+0x46>
	__asm volatile
 8010810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010814:	f383 8811 	msr	BASEPRI, r3
 8010818:	f3bf 8f6f 	isb	sy
 801081c:	f3bf 8f4f 	dsb	sy
 8010820:	60fb      	str	r3, [r7, #12]
}
 8010822:	bf00      	nop
 8010824:	e7fe      	b.n	8010824 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010826:	4b39      	ldr	r3, [pc, #228]	; (801090c <xPortStartScheduler+0x12c>)
 8010828:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	b2db      	uxtb	r3, r3
 8010830:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010832:	697b      	ldr	r3, [r7, #20]
 8010834:	22ff      	movs	r2, #255	; 0xff
 8010836:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	b2db      	uxtb	r3, r3
 801083e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010840:	78fb      	ldrb	r3, [r7, #3]
 8010842:	b2db      	uxtb	r3, r3
 8010844:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010848:	b2da      	uxtb	r2, r3
 801084a:	4b31      	ldr	r3, [pc, #196]	; (8010910 <xPortStartScheduler+0x130>)
 801084c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801084e:	4b31      	ldr	r3, [pc, #196]	; (8010914 <xPortStartScheduler+0x134>)
 8010850:	2207      	movs	r2, #7
 8010852:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010854:	e009      	b.n	801086a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010856:	4b2f      	ldr	r3, [pc, #188]	; (8010914 <xPortStartScheduler+0x134>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	3b01      	subs	r3, #1
 801085c:	4a2d      	ldr	r2, [pc, #180]	; (8010914 <xPortStartScheduler+0x134>)
 801085e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010860:	78fb      	ldrb	r3, [r7, #3]
 8010862:	b2db      	uxtb	r3, r3
 8010864:	005b      	lsls	r3, r3, #1
 8010866:	b2db      	uxtb	r3, r3
 8010868:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801086a:	78fb      	ldrb	r3, [r7, #3]
 801086c:	b2db      	uxtb	r3, r3
 801086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010872:	2b80      	cmp	r3, #128	; 0x80
 8010874:	d0ef      	beq.n	8010856 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010876:	4b27      	ldr	r3, [pc, #156]	; (8010914 <xPortStartScheduler+0x134>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	f1c3 0307 	rsb	r3, r3, #7
 801087e:	2b04      	cmp	r3, #4
 8010880:	d00a      	beq.n	8010898 <xPortStartScheduler+0xb8>
	__asm volatile
 8010882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010886:	f383 8811 	msr	BASEPRI, r3
 801088a:	f3bf 8f6f 	isb	sy
 801088e:	f3bf 8f4f 	dsb	sy
 8010892:	60bb      	str	r3, [r7, #8]
}
 8010894:	bf00      	nop
 8010896:	e7fe      	b.n	8010896 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010898:	4b1e      	ldr	r3, [pc, #120]	; (8010914 <xPortStartScheduler+0x134>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	021b      	lsls	r3, r3, #8
 801089e:	4a1d      	ldr	r2, [pc, #116]	; (8010914 <xPortStartScheduler+0x134>)
 80108a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80108a2:	4b1c      	ldr	r3, [pc, #112]	; (8010914 <xPortStartScheduler+0x134>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80108aa:	4a1a      	ldr	r2, [pc, #104]	; (8010914 <xPortStartScheduler+0x134>)
 80108ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	b2da      	uxtb	r2, r3
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80108b6:	4b18      	ldr	r3, [pc, #96]	; (8010918 <xPortStartScheduler+0x138>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	4a17      	ldr	r2, [pc, #92]	; (8010918 <xPortStartScheduler+0x138>)
 80108bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80108c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80108c2:	4b15      	ldr	r3, [pc, #84]	; (8010918 <xPortStartScheduler+0x138>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4a14      	ldr	r2, [pc, #80]	; (8010918 <xPortStartScheduler+0x138>)
 80108c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80108cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80108ce:	f000 f8dd 	bl	8010a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80108d2:	4b12      	ldr	r3, [pc, #72]	; (801091c <xPortStartScheduler+0x13c>)
 80108d4:	2200      	movs	r2, #0
 80108d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80108d8:	f000 f8fc 	bl	8010ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80108dc:	4b10      	ldr	r3, [pc, #64]	; (8010920 <xPortStartScheduler+0x140>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	4a0f      	ldr	r2, [pc, #60]	; (8010920 <xPortStartScheduler+0x140>)
 80108e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80108e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80108e8:	f7ff ff66 	bl	80107b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80108ec:	f7fe ff3a 	bl	800f764 <vTaskSwitchContext>
	prvTaskExitError();
 80108f0:	f7ff ff1e 	bl	8010730 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80108f4:	2300      	movs	r3, #0
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	3718      	adds	r7, #24
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}
 80108fe:	bf00      	nop
 8010900:	e000ed00 	.word	0xe000ed00
 8010904:	410fc271 	.word	0x410fc271
 8010908:	410fc270 	.word	0x410fc270
 801090c:	e000e400 	.word	0xe000e400
 8010910:	20009aec 	.word	0x20009aec
 8010914:	20009af0 	.word	0x20009af0
 8010918:	e000ed20 	.word	0xe000ed20
 801091c:	200000d4 	.word	0x200000d4
 8010920:	e000ef34 	.word	0xe000ef34

08010924 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010924:	b480      	push	{r7}
 8010926:	b083      	sub	sp, #12
 8010928:	af00      	add	r7, sp, #0
	__asm volatile
 801092a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801092e:	f383 8811 	msr	BASEPRI, r3
 8010932:	f3bf 8f6f 	isb	sy
 8010936:	f3bf 8f4f 	dsb	sy
 801093a:	607b      	str	r3, [r7, #4]
}
 801093c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801093e:	4b0f      	ldr	r3, [pc, #60]	; (801097c <vPortEnterCritical+0x58>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	3301      	adds	r3, #1
 8010944:	4a0d      	ldr	r2, [pc, #52]	; (801097c <vPortEnterCritical+0x58>)
 8010946:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010948:	4b0c      	ldr	r3, [pc, #48]	; (801097c <vPortEnterCritical+0x58>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	2b01      	cmp	r3, #1
 801094e:	d10f      	bne.n	8010970 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010950:	4b0b      	ldr	r3, [pc, #44]	; (8010980 <vPortEnterCritical+0x5c>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	b2db      	uxtb	r3, r3
 8010956:	2b00      	cmp	r3, #0
 8010958:	d00a      	beq.n	8010970 <vPortEnterCritical+0x4c>
	__asm volatile
 801095a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801095e:	f383 8811 	msr	BASEPRI, r3
 8010962:	f3bf 8f6f 	isb	sy
 8010966:	f3bf 8f4f 	dsb	sy
 801096a:	603b      	str	r3, [r7, #0]
}
 801096c:	bf00      	nop
 801096e:	e7fe      	b.n	801096e <vPortEnterCritical+0x4a>
	}
}
 8010970:	bf00      	nop
 8010972:	370c      	adds	r7, #12
 8010974:	46bd      	mov	sp, r7
 8010976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097a:	4770      	bx	lr
 801097c:	200000d4 	.word	0x200000d4
 8010980:	e000ed04 	.word	0xe000ed04

08010984 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010984:	b480      	push	{r7}
 8010986:	b083      	sub	sp, #12
 8010988:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801098a:	4b12      	ldr	r3, [pc, #72]	; (80109d4 <vPortExitCritical+0x50>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d10a      	bne.n	80109a8 <vPortExitCritical+0x24>
	__asm volatile
 8010992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010996:	f383 8811 	msr	BASEPRI, r3
 801099a:	f3bf 8f6f 	isb	sy
 801099e:	f3bf 8f4f 	dsb	sy
 80109a2:	607b      	str	r3, [r7, #4]
}
 80109a4:	bf00      	nop
 80109a6:	e7fe      	b.n	80109a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80109a8:	4b0a      	ldr	r3, [pc, #40]	; (80109d4 <vPortExitCritical+0x50>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	3b01      	subs	r3, #1
 80109ae:	4a09      	ldr	r2, [pc, #36]	; (80109d4 <vPortExitCritical+0x50>)
 80109b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80109b2:	4b08      	ldr	r3, [pc, #32]	; (80109d4 <vPortExitCritical+0x50>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d105      	bne.n	80109c6 <vPortExitCritical+0x42>
 80109ba:	2300      	movs	r3, #0
 80109bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	f383 8811 	msr	BASEPRI, r3
}
 80109c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80109c6:	bf00      	nop
 80109c8:	370c      	adds	r7, #12
 80109ca:	46bd      	mov	sp, r7
 80109cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d0:	4770      	bx	lr
 80109d2:	bf00      	nop
 80109d4:	200000d4 	.word	0x200000d4
	...

080109e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80109e0:	f3ef 8009 	mrs	r0, PSP
 80109e4:	f3bf 8f6f 	isb	sy
 80109e8:	4b15      	ldr	r3, [pc, #84]	; (8010a40 <pxCurrentTCBConst>)
 80109ea:	681a      	ldr	r2, [r3, #0]
 80109ec:	f01e 0f10 	tst.w	lr, #16
 80109f0:	bf08      	it	eq
 80109f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80109f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109fa:	6010      	str	r0, [r2, #0]
 80109fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010a00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010a04:	f380 8811 	msr	BASEPRI, r0
 8010a08:	f3bf 8f4f 	dsb	sy
 8010a0c:	f3bf 8f6f 	isb	sy
 8010a10:	f7fe fea8 	bl	800f764 <vTaskSwitchContext>
 8010a14:	f04f 0000 	mov.w	r0, #0
 8010a18:	f380 8811 	msr	BASEPRI, r0
 8010a1c:	bc09      	pop	{r0, r3}
 8010a1e:	6819      	ldr	r1, [r3, #0]
 8010a20:	6808      	ldr	r0, [r1, #0]
 8010a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a26:	f01e 0f10 	tst.w	lr, #16
 8010a2a:	bf08      	it	eq
 8010a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010a30:	f380 8809 	msr	PSP, r0
 8010a34:	f3bf 8f6f 	isb	sy
 8010a38:	4770      	bx	lr
 8010a3a:	bf00      	nop
 8010a3c:	f3af 8000 	nop.w

08010a40 <pxCurrentTCBConst>:
 8010a40:	200094c0 	.word	0x200094c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010a44:	bf00      	nop
 8010a46:	bf00      	nop

08010a48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b082      	sub	sp, #8
 8010a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8010a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a52:	f383 8811 	msr	BASEPRI, r3
 8010a56:	f3bf 8f6f 	isb	sy
 8010a5a:	f3bf 8f4f 	dsb	sy
 8010a5e:	607b      	str	r3, [r7, #4]
}
 8010a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010a62:	f7fe fdc5 	bl	800f5f0 <xTaskIncrementTick>
 8010a66:	4603      	mov	r3, r0
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d003      	beq.n	8010a74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010a6c:	4b06      	ldr	r3, [pc, #24]	; (8010a88 <xPortSysTickHandler+0x40>)
 8010a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a72:	601a      	str	r2, [r3, #0]
 8010a74:	2300      	movs	r3, #0
 8010a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	f383 8811 	msr	BASEPRI, r3
}
 8010a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010a80:	bf00      	nop
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	e000ed04 	.word	0xe000ed04

08010a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010a90:	4b0b      	ldr	r3, [pc, #44]	; (8010ac0 <vPortSetupTimerInterrupt+0x34>)
 8010a92:	2200      	movs	r2, #0
 8010a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010a96:	4b0b      	ldr	r3, [pc, #44]	; (8010ac4 <vPortSetupTimerInterrupt+0x38>)
 8010a98:	2200      	movs	r2, #0
 8010a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010a9c:	4b0a      	ldr	r3, [pc, #40]	; (8010ac8 <vPortSetupTimerInterrupt+0x3c>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	4a0a      	ldr	r2, [pc, #40]	; (8010acc <vPortSetupTimerInterrupt+0x40>)
 8010aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8010aa6:	099b      	lsrs	r3, r3, #6
 8010aa8:	4a09      	ldr	r2, [pc, #36]	; (8010ad0 <vPortSetupTimerInterrupt+0x44>)
 8010aaa:	3b01      	subs	r3, #1
 8010aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010aae:	4b04      	ldr	r3, [pc, #16]	; (8010ac0 <vPortSetupTimerInterrupt+0x34>)
 8010ab0:	2207      	movs	r2, #7
 8010ab2:	601a      	str	r2, [r3, #0]
}
 8010ab4:	bf00      	nop
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abc:	4770      	bx	lr
 8010abe:	bf00      	nop
 8010ac0:	e000e010 	.word	0xe000e010
 8010ac4:	e000e018 	.word	0xe000e018
 8010ac8:	200000a4 	.word	0x200000a4
 8010acc:	10624dd3 	.word	0x10624dd3
 8010ad0:	e000e014 	.word	0xe000e014

08010ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010ae4 <vPortEnableVFP+0x10>
 8010ad8:	6801      	ldr	r1, [r0, #0]
 8010ada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010ade:	6001      	str	r1, [r0, #0]
 8010ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010ae2:	bf00      	nop
 8010ae4:	e000ed88 	.word	0xe000ed88

08010ae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010ae8:	b480      	push	{r7}
 8010aea:	b085      	sub	sp, #20
 8010aec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010aee:	f3ef 8305 	mrs	r3, IPSR
 8010af2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2b0f      	cmp	r3, #15
 8010af8:	d914      	bls.n	8010b24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010afa:	4a17      	ldr	r2, [pc, #92]	; (8010b58 <vPortValidateInterruptPriority+0x70>)
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	4413      	add	r3, r2
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010b04:	4b15      	ldr	r3, [pc, #84]	; (8010b5c <vPortValidateInterruptPriority+0x74>)
 8010b06:	781b      	ldrb	r3, [r3, #0]
 8010b08:	7afa      	ldrb	r2, [r7, #11]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d20a      	bcs.n	8010b24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b12:	f383 8811 	msr	BASEPRI, r3
 8010b16:	f3bf 8f6f 	isb	sy
 8010b1a:	f3bf 8f4f 	dsb	sy
 8010b1e:	607b      	str	r3, [r7, #4]
}
 8010b20:	bf00      	nop
 8010b22:	e7fe      	b.n	8010b22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010b24:	4b0e      	ldr	r3, [pc, #56]	; (8010b60 <vPortValidateInterruptPriority+0x78>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010b2c:	4b0d      	ldr	r3, [pc, #52]	; (8010b64 <vPortValidateInterruptPriority+0x7c>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	429a      	cmp	r2, r3
 8010b32:	d90a      	bls.n	8010b4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b38:	f383 8811 	msr	BASEPRI, r3
 8010b3c:	f3bf 8f6f 	isb	sy
 8010b40:	f3bf 8f4f 	dsb	sy
 8010b44:	603b      	str	r3, [r7, #0]
}
 8010b46:	bf00      	nop
 8010b48:	e7fe      	b.n	8010b48 <vPortValidateInterruptPriority+0x60>
	}
 8010b4a:	bf00      	nop
 8010b4c:	3714      	adds	r7, #20
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b54:	4770      	bx	lr
 8010b56:	bf00      	nop
 8010b58:	e000e3f0 	.word	0xe000e3f0
 8010b5c:	20009aec 	.word	0x20009aec
 8010b60:	e000ed0c 	.word	0xe000ed0c
 8010b64:	20009af0 	.word	0x20009af0

08010b68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b088      	sub	sp, #32
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010b70:	2300      	movs	r3, #0
 8010b72:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 8010b74:	4b48      	ldr	r3, [pc, #288]	; (8010c98 <pvPortMalloc+0x130>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d10a      	bne.n	8010b92 <pvPortMalloc+0x2a>
	__asm volatile
 8010b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b80:	f383 8811 	msr	BASEPRI, r3
 8010b84:	f3bf 8f6f 	isb	sy
 8010b88:	f3bf 8f4f 	dsb	sy
 8010b8c:	60fb      	str	r3, [r7, #12]
}
 8010b8e:	bf00      	nop
 8010b90:	e7fe      	b.n	8010b90 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 8010b92:	f7fe fc71 	bl	800f478 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010b96:	4b41      	ldr	r3, [pc, #260]	; (8010c9c <pvPortMalloc+0x134>)
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	4013      	ands	r3, r2
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d172      	bne.n	8010c88 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d00d      	beq.n	8010bc4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8010ba8:	2208      	movs	r2, #8
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	4413      	add	r3, r2
 8010bae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f003 0307 	and.w	r3, r3, #7
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d004      	beq.n	8010bc4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f023 0307 	bic.w	r3, r3, #7
 8010bc0:	3308      	adds	r3, #8
 8010bc2:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d05e      	beq.n	8010c88 <pvPortMalloc+0x120>
 8010bca:	4b35      	ldr	r3, [pc, #212]	; (8010ca0 <pvPortMalloc+0x138>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	687a      	ldr	r2, [r7, #4]
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	d859      	bhi.n	8010c88 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010bd4:	4b33      	ldr	r3, [pc, #204]	; (8010ca4 <pvPortMalloc+0x13c>)
 8010bd6:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 8010bd8:	4b32      	ldr	r3, [pc, #200]	; (8010ca4 <pvPortMalloc+0x13c>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010bde:	e004      	b.n	8010bea <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8010be0:	69fb      	ldr	r3, [r7, #28]
 8010be2:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010be4:	69fb      	ldr	r3, [r7, #28]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010bea:	69fb      	ldr	r3, [r7, #28]
 8010bec:	685b      	ldr	r3, [r3, #4]
 8010bee:	687a      	ldr	r2, [r7, #4]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d903      	bls.n	8010bfc <pvPortMalloc+0x94>
 8010bf4:	69fb      	ldr	r3, [r7, #28]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d1f1      	bne.n	8010be0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010bfc:	4b26      	ldr	r3, [pc, #152]	; (8010c98 <pvPortMalloc+0x130>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	69fa      	ldr	r2, [r7, #28]
 8010c02:	429a      	cmp	r2, r3
 8010c04:	d040      	beq.n	8010c88 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010c06:	69bb      	ldr	r3, [r7, #24]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	2208      	movs	r2, #8
 8010c0c:	4413      	add	r3, r2
 8010c0e:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010c10:	69fb      	ldr	r3, [r7, #28]
 8010c12:	681a      	ldr	r2, [r3, #0]
 8010c14:	69bb      	ldr	r3, [r7, #24]
 8010c16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010c18:	69fb      	ldr	r3, [r7, #28]
 8010c1a:	685a      	ldr	r2, [r3, #4]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	1ad2      	subs	r2, r2, r3
 8010c20:	2308      	movs	r3, #8
 8010c22:	005b      	lsls	r3, r3, #1
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d90f      	bls.n	8010c48 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010c28:	69fa      	ldr	r2, [r7, #28]
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	4413      	add	r3, r2
 8010c2e:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	685a      	ldr	r2, [r3, #4]
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	1ad2      	subs	r2, r2, r3
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010c3c:	69fb      	ldr	r3, [r7, #28]
 8010c3e:	687a      	ldr	r2, [r7, #4]
 8010c40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8010c42:	6938      	ldr	r0, [r7, #16]
 8010c44:	f000 f8a2 	bl	8010d8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010c48:	4b15      	ldr	r3, [pc, #84]	; (8010ca0 <pvPortMalloc+0x138>)
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	69fb      	ldr	r3, [r7, #28]
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	1ad3      	subs	r3, r2, r3
 8010c52:	4a13      	ldr	r2, [pc, #76]	; (8010ca0 <pvPortMalloc+0x138>)
 8010c54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010c56:	4b12      	ldr	r3, [pc, #72]	; (8010ca0 <pvPortMalloc+0x138>)
 8010c58:	681a      	ldr	r2, [r3, #0]
 8010c5a:	4b13      	ldr	r3, [pc, #76]	; (8010ca8 <pvPortMalloc+0x140>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d203      	bcs.n	8010c6a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010c62:	4b0f      	ldr	r3, [pc, #60]	; (8010ca0 <pvPortMalloc+0x138>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	4a10      	ldr	r2, [pc, #64]	; (8010ca8 <pvPortMalloc+0x140>)
 8010c68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010c6a:	69fb      	ldr	r3, [r7, #28]
 8010c6c:	685a      	ldr	r2, [r3, #4]
 8010c6e:	4b0b      	ldr	r3, [pc, #44]	; (8010c9c <pvPortMalloc+0x134>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	431a      	orrs	r2, r3
 8010c74:	69fb      	ldr	r3, [r7, #28]
 8010c76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010c7e:	4b0b      	ldr	r3, [pc, #44]	; (8010cac <pvPortMalloc+0x144>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	3301      	adds	r3, #1
 8010c84:	4a09      	ldr	r2, [pc, #36]	; (8010cac <pvPortMalloc+0x144>)
 8010c86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010c88:	f7fe fc04 	bl	800f494 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 8010c8c:	697b      	ldr	r3, [r7, #20]
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3720      	adds	r7, #32
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	20009afc 	.word	0x20009afc
 8010c9c:	20009b10 	.word	0x20009b10
 8010ca0:	20009b00 	.word	0x20009b00
 8010ca4:	20009af4 	.word	0x20009af4
 8010ca8:	20009b04 	.word	0x20009b04
 8010cac:	20009b08 	.word	0x20009b08

08010cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b086      	sub	sp, #24
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d04d      	beq.n	8010d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010cc2:	2308      	movs	r3, #8
 8010cc4:	425b      	negs	r3, r3
 8010cc6:	697a      	ldr	r2, [r7, #20]
 8010cc8:	4413      	add	r3, r2
 8010cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	685a      	ldr	r2, [r3, #4]
 8010cd4:	4b24      	ldr	r3, [pc, #144]	; (8010d68 <vPortFree+0xb8>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	4013      	ands	r3, r2
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d10a      	bne.n	8010cf4 <vPortFree+0x44>
	__asm volatile
 8010cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce2:	f383 8811 	msr	BASEPRI, r3
 8010ce6:	f3bf 8f6f 	isb	sy
 8010cea:	f3bf 8f4f 	dsb	sy
 8010cee:	60fb      	str	r3, [r7, #12]
}
 8010cf0:	bf00      	nop
 8010cf2:	e7fe      	b.n	8010cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010cf4:	693b      	ldr	r3, [r7, #16]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d00a      	beq.n	8010d12 <vPortFree+0x62>
	__asm volatile
 8010cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d00:	f383 8811 	msr	BASEPRI, r3
 8010d04:	f3bf 8f6f 	isb	sy
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	60bb      	str	r3, [r7, #8]
}
 8010d0e:	bf00      	nop
 8010d10:	e7fe      	b.n	8010d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	685a      	ldr	r2, [r3, #4]
 8010d16:	4b14      	ldr	r3, [pc, #80]	; (8010d68 <vPortFree+0xb8>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	4013      	ands	r3, r2
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d01e      	beq.n	8010d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d11a      	bne.n	8010d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	685a      	ldr	r2, [r3, #4]
 8010d2c:	4b0e      	ldr	r3, [pc, #56]	; (8010d68 <vPortFree+0xb8>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	43db      	mvns	r3, r3
 8010d32:	401a      	ands	r2, r3
 8010d34:	693b      	ldr	r3, [r7, #16]
 8010d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010d38:	f7fe fb9e 	bl	800f478 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	685a      	ldr	r2, [r3, #4]
 8010d40:	4b0a      	ldr	r3, [pc, #40]	; (8010d6c <vPortFree+0xbc>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	4413      	add	r3, r2
 8010d46:	4a09      	ldr	r2, [pc, #36]	; (8010d6c <vPortFree+0xbc>)
 8010d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010d4a:	6938      	ldr	r0, [r7, #16]
 8010d4c:	f000 f81e 	bl	8010d8c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010d50:	4b07      	ldr	r3, [pc, #28]	; (8010d70 <vPortFree+0xc0>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	3301      	adds	r3, #1
 8010d56:	4a06      	ldr	r2, [pc, #24]	; (8010d70 <vPortFree+0xc0>)
 8010d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010d5a:	f7fe fb9b 	bl	800f494 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010d5e:	bf00      	nop
 8010d60:	3718      	adds	r7, #24
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	20009b10 	.word	0x20009b10
 8010d6c:	20009b00 	.word	0x20009b00
 8010d70:	20009b0c 	.word	0x20009b0c

08010d74 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8010d74:	b480      	push	{r7}
 8010d76:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8010d78:	4b03      	ldr	r3, [pc, #12]	; (8010d88 <xPortGetFreeHeapSize+0x14>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d84:	4770      	bx	lr
 8010d86:	bf00      	nop
 8010d88:	20009b00 	.word	0x20009b00

08010d8c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b085      	sub	sp, #20
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010d94:	4b28      	ldr	r3, [pc, #160]	; (8010e38 <prvInsertBlockIntoFreeList+0xac>)
 8010d96:	60fb      	str	r3, [r7, #12]
 8010d98:	e002      	b.n	8010da0 <prvInsertBlockIntoFreeList+0x14>
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	60fb      	str	r3, [r7, #12]
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	687a      	ldr	r2, [r7, #4]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d8f7      	bhi.n	8010d9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	68ba      	ldr	r2, [r7, #8]
 8010db4:	4413      	add	r3, r2
 8010db6:	687a      	ldr	r2, [r7, #4]
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d108      	bne.n	8010dce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	685a      	ldr	r2, [r3, #4]
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	441a      	add	r2, r3
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	685b      	ldr	r3, [r3, #4]
 8010dd6:	68ba      	ldr	r2, [r7, #8]
 8010dd8:	441a      	add	r2, r3
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d118      	bne.n	8010e14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	681a      	ldr	r2, [r3, #0]
 8010de6:	4b15      	ldr	r3, [pc, #84]	; (8010e3c <prvInsertBlockIntoFreeList+0xb0>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d00d      	beq.n	8010e0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	685a      	ldr	r2, [r3, #4]
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	685b      	ldr	r3, [r3, #4]
 8010df8:	441a      	add	r2, r3
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	681a      	ldr	r2, [r3, #0]
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	601a      	str	r2, [r3, #0]
 8010e08:	e008      	b.n	8010e1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010e0a:	4b0c      	ldr	r3, [pc, #48]	; (8010e3c <prvInsertBlockIntoFreeList+0xb0>)
 8010e0c:	681a      	ldr	r2, [r3, #0]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	601a      	str	r2, [r3, #0]
 8010e12:	e003      	b.n	8010e1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	681a      	ldr	r2, [r3, #0]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010e1c:	68fa      	ldr	r2, [r7, #12]
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d002      	beq.n	8010e2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	687a      	ldr	r2, [r7, #4]
 8010e28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e2a:	bf00      	nop
 8010e2c:	3714      	adds	r7, #20
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e34:	4770      	bx	lr
 8010e36:	bf00      	nop
 8010e38:	20009af4 	.word	0x20009af4
 8010e3c:	20009afc 	.word	0x20009afc

08010e40 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 8010e40:	b480      	push	{r7}
 8010e42:	b08f      	sub	sp, #60	; 0x3c
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 8010e48:	2300      	movs	r3, #0
 8010e4a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 8010e50:	2300      	movs	r3, #0
 8010e52:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 8010e54:	4b5a      	ldr	r3, [pc, #360]	; (8010fc0 <vPortDefineHeapRegions+0x180>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d00a      	beq.n	8010e72 <vPortDefineHeapRegions+0x32>
	__asm volatile
 8010e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e60:	f383 8811 	msr	BASEPRI, r3
 8010e64:	f3bf 8f6f 	isb	sy
 8010e68:	f3bf 8f4f 	dsb	sy
 8010e6c:	617b      	str	r3, [r7, #20]
}
 8010e6e:	bf00      	nop
 8010e70:	e7fe      	b.n	8010e70 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8010e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e74:	00db      	lsls	r3, r3, #3
 8010e76:	687a      	ldr	r2, [r7, #4]
 8010e78:	4413      	add	r3, r2
 8010e7a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 8010e7c:	e07d      	b.n	8010f7a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8010e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 8010e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e8c:	f003 0307 	and.w	r3, r3, #7
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d00e      	beq.n	8010eb2 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 8010e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e96:	3307      	adds	r3, #7
 8010e98:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8010e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e9c:	f023 0307 	bic.w	r3, r3, #7
 8010ea0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 8010ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eaa:	1ad3      	subs	r3, r2, r3
 8010eac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010eae:	4413      	add	r3, r2
 8010eb0:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 8010eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb4:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 8010eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d106      	bne.n	8010eca <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	4a41      	ldr	r2, [pc, #260]	; (8010fc4 <vPortDefineHeapRegions+0x184>)
 8010ec0:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 8010ec2:	4b40      	ldr	r3, [pc, #256]	; (8010fc4 <vPortDefineHeapRegions+0x184>)
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	605a      	str	r2, [r3, #4]
 8010ec8:	e01f      	b.n	8010f0a <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 8010eca:	4b3d      	ldr	r3, [pc, #244]	; (8010fc0 <vPortDefineHeapRegions+0x180>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d10a      	bne.n	8010ee8 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 8010ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed6:	f383 8811 	msr	BASEPRI, r3
 8010eda:	f3bf 8f6f 	isb	sy
 8010ede:	f3bf 8f4f 	dsb	sy
 8010ee2:	613b      	str	r3, [r7, #16]
}
 8010ee4:	bf00      	nop
 8010ee6:	e7fe      	b.n	8010ee6 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 8010ee8:	4b35      	ldr	r3, [pc, #212]	; (8010fc0 <vPortDefineHeapRegions+0x180>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	461a      	mov	r2, r3
 8010eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	d80a      	bhi.n	8010f0a <vPortDefineHeapRegions+0xca>
	__asm volatile
 8010ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef8:	f383 8811 	msr	BASEPRI, r3
 8010efc:	f3bf 8f6f 	isb	sy
 8010f00:	f3bf 8f4f 	dsb	sy
 8010f04:	60fb      	str	r3, [r7, #12]
}
 8010f06:	bf00      	nop
 8010f08:	e7fe      	b.n	8010f08 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 8010f0a:	4b2d      	ldr	r3, [pc, #180]	; (8010fc0 <vPortDefineHeapRegions+0x180>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 8010f10:	69fa      	ldr	r2, [r7, #28]
 8010f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f14:	4413      	add	r3, r2
 8010f16:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 8010f18:	2208      	movs	r2, #8
 8010f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f1c:	1a9b      	subs	r3, r3, r2
 8010f1e:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8010f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f22:	f023 0307 	bic.w	r3, r3, #7
 8010f26:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 8010f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2a:	4a25      	ldr	r2, [pc, #148]	; (8010fc0 <vPortDefineHeapRegions+0x180>)
 8010f2c:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 8010f2e:	4b24      	ldr	r3, [pc, #144]	; (8010fc0 <vPortDefineHeapRegions+0x180>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	2200      	movs	r2, #0
 8010f34:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 8010f36:	4b22      	ldr	r3, [pc, #136]	; (8010fc0 <vPortDefineHeapRegions+0x180>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8010f3e:	69fb      	ldr	r3, [r7, #28]
 8010f40:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 8010f42:	6a3b      	ldr	r3, [r7, #32]
 8010f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f46:	1ad2      	subs	r2, r2, r3
 8010f48:	6a3b      	ldr	r3, [r7, #32]
 8010f4a:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 8010f4c:	4b1c      	ldr	r3, [pc, #112]	; (8010fc0 <vPortDefineHeapRegions+0x180>)
 8010f4e:	681a      	ldr	r2, [r3, #0]
 8010f50:	6a3b      	ldr	r3, [r7, #32]
 8010f52:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 8010f54:	69bb      	ldr	r3, [r7, #24]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d002      	beq.n	8010f60 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 8010f5a:	69bb      	ldr	r3, [r7, #24]
 8010f5c:	6a3a      	ldr	r2, [r7, #32]
 8010f5e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8010f60:	6a3b      	ldr	r3, [r7, #32]
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f66:	4413      	add	r3, r2
 8010f68:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 8010f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6c:	3301      	adds	r3, #1
 8010f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8010f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f72:	00db      	lsls	r3, r3, #3
 8010f74:	687a      	ldr	r2, [r7, #4]
 8010f76:	4413      	add	r3, r2
 8010f78:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 8010f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7c:	685b      	ldr	r3, [r3, #4]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	f47f af7d 	bne.w	8010e7e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8010f84:	4a10      	ldr	r2, [pc, #64]	; (8010fc8 <vPortDefineHeapRegions+0x188>)
 8010f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f88:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 8010f8a:	4a10      	ldr	r2, [pc, #64]	; (8010fcc <vPortDefineHeapRegions+0x18c>)
 8010f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f8e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 8010f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d10a      	bne.n	8010fac <vPortDefineHeapRegions+0x16c>
	__asm volatile
 8010f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f9a:	f383 8811 	msr	BASEPRI, r3
 8010f9e:	f3bf 8f6f 	isb	sy
 8010fa2:	f3bf 8f4f 	dsb	sy
 8010fa6:	60bb      	str	r3, [r7, #8]
}
 8010fa8:	bf00      	nop
 8010faa:	e7fe      	b.n	8010faa <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010fac:	4b08      	ldr	r3, [pc, #32]	; (8010fd0 <vPortDefineHeapRegions+0x190>)
 8010fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010fb2:	601a      	str	r2, [r3, #0]
}
 8010fb4:	bf00      	nop
 8010fb6:	373c      	adds	r7, #60	; 0x3c
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbe:	4770      	bx	lr
 8010fc0:	20009afc 	.word	0x20009afc
 8010fc4:	20009af4 	.word	0x20009af4
 8010fc8:	20009b04 	.word	0x20009b04
 8010fcc:	20009b00 	.word	0x20009b00
 8010fd0:	20009b10 	.word	0x20009b10

08010fd4 <atol>:
 8010fd4:	220a      	movs	r2, #10
 8010fd6:	2100      	movs	r1, #0
 8010fd8:	f000 baec 	b.w	80115b4 <strtol>

08010fdc <__errno>:
 8010fdc:	4b01      	ldr	r3, [pc, #4]	; (8010fe4 <__errno+0x8>)
 8010fde:	6818      	ldr	r0, [r3, #0]
 8010fe0:	4770      	bx	lr
 8010fe2:	bf00      	nop
 8010fe4:	200000d8 	.word	0x200000d8

08010fe8 <gmtime_r>:
 8010fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fec:	e9d0 6700 	ldrd	r6, r7, [r0]
 8010ff0:	460c      	mov	r4, r1
 8010ff2:	4a4f      	ldr	r2, [pc, #316]	; (8011130 <gmtime_r+0x148>)
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	4630      	mov	r0, r6
 8010ff8:	4639      	mov	r1, r7
 8010ffa:	f7ef fc47 	bl	800088c <__aeabi_ldivmod>
 8010ffe:	4639      	mov	r1, r7
 8011000:	4605      	mov	r5, r0
 8011002:	4a4b      	ldr	r2, [pc, #300]	; (8011130 <gmtime_r+0x148>)
 8011004:	4630      	mov	r0, r6
 8011006:	2300      	movs	r3, #0
 8011008:	f7ef fc40 	bl	800088c <__aeabi_ldivmod>
 801100c:	2a00      	cmp	r2, #0
 801100e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8011012:	bfb7      	itett	lt
 8011014:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8011018:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 801101c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8011020:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8011024:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8011028:	fbb2 f1f0 	udiv	r1, r2, r0
 801102c:	fb00 2211 	mls	r2, r0, r1, r2
 8011030:	203c      	movs	r0, #60	; 0x3c
 8011032:	60a1      	str	r1, [r4, #8]
 8011034:	fbb2 f1f0 	udiv	r1, r2, r0
 8011038:	fb00 2211 	mls	r2, r0, r1, r2
 801103c:	6061      	str	r1, [r4, #4]
 801103e:	6022      	str	r2, [r4, #0]
 8011040:	2107      	movs	r1, #7
 8011042:	1cda      	adds	r2, r3, #3
 8011044:	fb92 f1f1 	sdiv	r1, r2, r1
 8011048:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801104c:	1a52      	subs	r2, r2, r1
 801104e:	bf48      	it	mi
 8011050:	3207      	addmi	r2, #7
 8011052:	4d38      	ldr	r5, [pc, #224]	; (8011134 <gmtime_r+0x14c>)
 8011054:	4838      	ldr	r0, [pc, #224]	; (8011138 <gmtime_r+0x150>)
 8011056:	61a2      	str	r2, [r4, #24]
 8011058:	2b00      	cmp	r3, #0
 801105a:	bfb7      	itett	lt
 801105c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8011060:	fb93 f5f5 	sdivge	r5, r3, r5
 8011064:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8011068:	fb92 f5f5 	sdivlt	r5, r2, r5
 801106c:	fb00 3005 	mla	r0, r0, r5, r3
 8011070:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8011074:	fbb0 f2f2 	udiv	r2, r0, r2
 8011078:	4402      	add	r2, r0
 801107a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 801107e:	fbb0 f1f3 	udiv	r1, r0, r3
 8011082:	1a52      	subs	r2, r2, r1
 8011084:	f240 1c6d 	movw	ip, #365	; 0x16d
 8011088:	492c      	ldr	r1, [pc, #176]	; (801113c <gmtime_r+0x154>)
 801108a:	fbb0 f1f1 	udiv	r1, r0, r1
 801108e:	2764      	movs	r7, #100	; 0x64
 8011090:	1a52      	subs	r2, r2, r1
 8011092:	fbb2 f1fc 	udiv	r1, r2, ip
 8011096:	fbb2 f3f3 	udiv	r3, r2, r3
 801109a:	fbb1 f6f7 	udiv	r6, r1, r7
 801109e:	1af3      	subs	r3, r6, r3
 80110a0:	4403      	add	r3, r0
 80110a2:	fb0c 3311 	mls	r3, ip, r1, r3
 80110a6:	2299      	movs	r2, #153	; 0x99
 80110a8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 80110ac:	f10e 0e02 	add.w	lr, lr, #2
 80110b0:	f103 0c01 	add.w	ip, r3, #1
 80110b4:	fbbe f0f2 	udiv	r0, lr, r2
 80110b8:	4342      	muls	r2, r0
 80110ba:	3202      	adds	r2, #2
 80110bc:	f04f 0805 	mov.w	r8, #5
 80110c0:	fbb2 f2f8 	udiv	r2, r2, r8
 80110c4:	ebac 0c02 	sub.w	ip, ip, r2
 80110c8:	f240 52f9 	movw	r2, #1529	; 0x5f9
 80110cc:	4596      	cmp	lr, r2
 80110ce:	bf94      	ite	ls
 80110d0:	2202      	movls	r2, #2
 80110d2:	f06f 0209 	mvnhi.w	r2, #9
 80110d6:	4410      	add	r0, r2
 80110d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80110dc:	fb02 1505 	mla	r5, r2, r5, r1
 80110e0:	2801      	cmp	r0, #1
 80110e2:	bf98      	it	ls
 80110e4:	3501      	addls	r5, #1
 80110e6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80110ea:	d30d      	bcc.n	8011108 <gmtime_r+0x120>
 80110ec:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80110f0:	61e3      	str	r3, [r4, #28]
 80110f2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80110f6:	2300      	movs	r3, #0
 80110f8:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80110fc:	f8c4 c00c 	str.w	ip, [r4, #12]
 8011100:	6223      	str	r3, [r4, #32]
 8011102:	4620      	mov	r0, r4
 8011104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011108:	078a      	lsls	r2, r1, #30
 801110a:	d102      	bne.n	8011112 <gmtime_r+0x12a>
 801110c:	fb07 1616 	mls	r6, r7, r6, r1
 8011110:	b95e      	cbnz	r6, 801112a <gmtime_r+0x142>
 8011112:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011116:	fbb1 f6f2 	udiv	r6, r1, r2
 801111a:	fb02 1216 	mls	r2, r2, r6, r1
 801111e:	fab2 f282 	clz	r2, r2
 8011122:	0952      	lsrs	r2, r2, #5
 8011124:	333b      	adds	r3, #59	; 0x3b
 8011126:	4413      	add	r3, r2
 8011128:	e7e2      	b.n	80110f0 <gmtime_r+0x108>
 801112a:	2201      	movs	r2, #1
 801112c:	e7fa      	b.n	8011124 <gmtime_r+0x13c>
 801112e:	bf00      	nop
 8011130:	00015180 	.word	0x00015180
 8011134:	00023ab1 	.word	0x00023ab1
 8011138:	fffdc54f 	.word	0xfffdc54f
 801113c:	00023ab0 	.word	0x00023ab0

08011140 <__libc_init_array>:
 8011140:	b570      	push	{r4, r5, r6, lr}
 8011142:	4d0d      	ldr	r5, [pc, #52]	; (8011178 <__libc_init_array+0x38>)
 8011144:	4c0d      	ldr	r4, [pc, #52]	; (801117c <__libc_init_array+0x3c>)
 8011146:	1b64      	subs	r4, r4, r5
 8011148:	10a4      	asrs	r4, r4, #2
 801114a:	2600      	movs	r6, #0
 801114c:	42a6      	cmp	r6, r4
 801114e:	d109      	bne.n	8011164 <__libc_init_array+0x24>
 8011150:	4d0b      	ldr	r5, [pc, #44]	; (8011180 <__libc_init_array+0x40>)
 8011152:	4c0c      	ldr	r4, [pc, #48]	; (8011184 <__libc_init_array+0x44>)
 8011154:	f000 fe0c 	bl	8011d70 <_init>
 8011158:	1b64      	subs	r4, r4, r5
 801115a:	10a4      	asrs	r4, r4, #2
 801115c:	2600      	movs	r6, #0
 801115e:	42a6      	cmp	r6, r4
 8011160:	d105      	bne.n	801116e <__libc_init_array+0x2e>
 8011162:	bd70      	pop	{r4, r5, r6, pc}
 8011164:	f855 3b04 	ldr.w	r3, [r5], #4
 8011168:	4798      	blx	r3
 801116a:	3601      	adds	r6, #1
 801116c:	e7ee      	b.n	801114c <__libc_init_array+0xc>
 801116e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011172:	4798      	blx	r3
 8011174:	3601      	adds	r6, #1
 8011176:	e7f2      	b.n	801115e <__libc_init_array+0x1e>
 8011178:	08014e4c 	.word	0x08014e4c
 801117c:	08014e4c 	.word	0x08014e4c
 8011180:	08014e4c 	.word	0x08014e4c
 8011184:	08014e50 	.word	0x08014e50

08011188 <__retarget_lock_acquire_recursive>:
 8011188:	4770      	bx	lr

0801118a <__retarget_lock_release_recursive>:
 801118a:	4770      	bx	lr

0801118c <memcpy>:
 801118c:	440a      	add	r2, r1
 801118e:	4291      	cmp	r1, r2
 8011190:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011194:	d100      	bne.n	8011198 <memcpy+0xc>
 8011196:	4770      	bx	lr
 8011198:	b510      	push	{r4, lr}
 801119a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801119e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80111a2:	4291      	cmp	r1, r2
 80111a4:	d1f9      	bne.n	801119a <memcpy+0xe>
 80111a6:	bd10      	pop	{r4, pc}

080111a8 <memset>:
 80111a8:	4402      	add	r2, r0
 80111aa:	4603      	mov	r3, r0
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d100      	bne.n	80111b2 <memset+0xa>
 80111b0:	4770      	bx	lr
 80111b2:	f803 1b01 	strb.w	r1, [r3], #1
 80111b6:	e7f9      	b.n	80111ac <memset+0x4>

080111b8 <sbrk_aligned>:
 80111b8:	b570      	push	{r4, r5, r6, lr}
 80111ba:	4e0e      	ldr	r6, [pc, #56]	; (80111f4 <sbrk_aligned+0x3c>)
 80111bc:	460c      	mov	r4, r1
 80111be:	6831      	ldr	r1, [r6, #0]
 80111c0:	4605      	mov	r5, r0
 80111c2:	b911      	cbnz	r1, 80111ca <sbrk_aligned+0x12>
 80111c4:	f000 f8f6 	bl	80113b4 <_sbrk_r>
 80111c8:	6030      	str	r0, [r6, #0]
 80111ca:	4621      	mov	r1, r4
 80111cc:	4628      	mov	r0, r5
 80111ce:	f000 f8f1 	bl	80113b4 <_sbrk_r>
 80111d2:	1c43      	adds	r3, r0, #1
 80111d4:	d00a      	beq.n	80111ec <sbrk_aligned+0x34>
 80111d6:	1cc4      	adds	r4, r0, #3
 80111d8:	f024 0403 	bic.w	r4, r4, #3
 80111dc:	42a0      	cmp	r0, r4
 80111de:	d007      	beq.n	80111f0 <sbrk_aligned+0x38>
 80111e0:	1a21      	subs	r1, r4, r0
 80111e2:	4628      	mov	r0, r5
 80111e4:	f000 f8e6 	bl	80113b4 <_sbrk_r>
 80111e8:	3001      	adds	r0, #1
 80111ea:	d101      	bne.n	80111f0 <sbrk_aligned+0x38>
 80111ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80111f0:	4620      	mov	r0, r4
 80111f2:	bd70      	pop	{r4, r5, r6, pc}
 80111f4:	20009b1c 	.word	0x20009b1c

080111f8 <_malloc_r>:
 80111f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111fc:	1ccd      	adds	r5, r1, #3
 80111fe:	f025 0503 	bic.w	r5, r5, #3
 8011202:	3508      	adds	r5, #8
 8011204:	2d0c      	cmp	r5, #12
 8011206:	bf38      	it	cc
 8011208:	250c      	movcc	r5, #12
 801120a:	2d00      	cmp	r5, #0
 801120c:	4607      	mov	r7, r0
 801120e:	db01      	blt.n	8011214 <_malloc_r+0x1c>
 8011210:	42a9      	cmp	r1, r5
 8011212:	d905      	bls.n	8011220 <_malloc_r+0x28>
 8011214:	230c      	movs	r3, #12
 8011216:	603b      	str	r3, [r7, #0]
 8011218:	2600      	movs	r6, #0
 801121a:	4630      	mov	r0, r6
 801121c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011220:	4e2e      	ldr	r6, [pc, #184]	; (80112dc <_malloc_r+0xe4>)
 8011222:	f000 fa0b 	bl	801163c <__malloc_lock>
 8011226:	6833      	ldr	r3, [r6, #0]
 8011228:	461c      	mov	r4, r3
 801122a:	bb34      	cbnz	r4, 801127a <_malloc_r+0x82>
 801122c:	4629      	mov	r1, r5
 801122e:	4638      	mov	r0, r7
 8011230:	f7ff ffc2 	bl	80111b8 <sbrk_aligned>
 8011234:	1c43      	adds	r3, r0, #1
 8011236:	4604      	mov	r4, r0
 8011238:	d14d      	bne.n	80112d6 <_malloc_r+0xde>
 801123a:	6834      	ldr	r4, [r6, #0]
 801123c:	4626      	mov	r6, r4
 801123e:	2e00      	cmp	r6, #0
 8011240:	d140      	bne.n	80112c4 <_malloc_r+0xcc>
 8011242:	6823      	ldr	r3, [r4, #0]
 8011244:	4631      	mov	r1, r6
 8011246:	4638      	mov	r0, r7
 8011248:	eb04 0803 	add.w	r8, r4, r3
 801124c:	f000 f8b2 	bl	80113b4 <_sbrk_r>
 8011250:	4580      	cmp	r8, r0
 8011252:	d13a      	bne.n	80112ca <_malloc_r+0xd2>
 8011254:	6821      	ldr	r1, [r4, #0]
 8011256:	3503      	adds	r5, #3
 8011258:	1a6d      	subs	r5, r5, r1
 801125a:	f025 0503 	bic.w	r5, r5, #3
 801125e:	3508      	adds	r5, #8
 8011260:	2d0c      	cmp	r5, #12
 8011262:	bf38      	it	cc
 8011264:	250c      	movcc	r5, #12
 8011266:	4629      	mov	r1, r5
 8011268:	4638      	mov	r0, r7
 801126a:	f7ff ffa5 	bl	80111b8 <sbrk_aligned>
 801126e:	3001      	adds	r0, #1
 8011270:	d02b      	beq.n	80112ca <_malloc_r+0xd2>
 8011272:	6823      	ldr	r3, [r4, #0]
 8011274:	442b      	add	r3, r5
 8011276:	6023      	str	r3, [r4, #0]
 8011278:	e00e      	b.n	8011298 <_malloc_r+0xa0>
 801127a:	6822      	ldr	r2, [r4, #0]
 801127c:	1b52      	subs	r2, r2, r5
 801127e:	d41e      	bmi.n	80112be <_malloc_r+0xc6>
 8011280:	2a0b      	cmp	r2, #11
 8011282:	d916      	bls.n	80112b2 <_malloc_r+0xba>
 8011284:	1961      	adds	r1, r4, r5
 8011286:	42a3      	cmp	r3, r4
 8011288:	6025      	str	r5, [r4, #0]
 801128a:	bf18      	it	ne
 801128c:	6059      	strne	r1, [r3, #4]
 801128e:	6863      	ldr	r3, [r4, #4]
 8011290:	bf08      	it	eq
 8011292:	6031      	streq	r1, [r6, #0]
 8011294:	5162      	str	r2, [r4, r5]
 8011296:	604b      	str	r3, [r1, #4]
 8011298:	4638      	mov	r0, r7
 801129a:	f104 060b 	add.w	r6, r4, #11
 801129e:	f000 f9d3 	bl	8011648 <__malloc_unlock>
 80112a2:	f026 0607 	bic.w	r6, r6, #7
 80112a6:	1d23      	adds	r3, r4, #4
 80112a8:	1af2      	subs	r2, r6, r3
 80112aa:	d0b6      	beq.n	801121a <_malloc_r+0x22>
 80112ac:	1b9b      	subs	r3, r3, r6
 80112ae:	50a3      	str	r3, [r4, r2]
 80112b0:	e7b3      	b.n	801121a <_malloc_r+0x22>
 80112b2:	6862      	ldr	r2, [r4, #4]
 80112b4:	42a3      	cmp	r3, r4
 80112b6:	bf0c      	ite	eq
 80112b8:	6032      	streq	r2, [r6, #0]
 80112ba:	605a      	strne	r2, [r3, #4]
 80112bc:	e7ec      	b.n	8011298 <_malloc_r+0xa0>
 80112be:	4623      	mov	r3, r4
 80112c0:	6864      	ldr	r4, [r4, #4]
 80112c2:	e7b2      	b.n	801122a <_malloc_r+0x32>
 80112c4:	4634      	mov	r4, r6
 80112c6:	6876      	ldr	r6, [r6, #4]
 80112c8:	e7b9      	b.n	801123e <_malloc_r+0x46>
 80112ca:	230c      	movs	r3, #12
 80112cc:	603b      	str	r3, [r7, #0]
 80112ce:	4638      	mov	r0, r7
 80112d0:	f000 f9ba 	bl	8011648 <__malloc_unlock>
 80112d4:	e7a1      	b.n	801121a <_malloc_r+0x22>
 80112d6:	6025      	str	r5, [r4, #0]
 80112d8:	e7de      	b.n	8011298 <_malloc_r+0xa0>
 80112da:	bf00      	nop
 80112dc:	20009b18 	.word	0x20009b18

080112e0 <cleanup_glue>:
 80112e0:	b538      	push	{r3, r4, r5, lr}
 80112e2:	460c      	mov	r4, r1
 80112e4:	6809      	ldr	r1, [r1, #0]
 80112e6:	4605      	mov	r5, r0
 80112e8:	b109      	cbz	r1, 80112ee <cleanup_glue+0xe>
 80112ea:	f7ff fff9 	bl	80112e0 <cleanup_glue>
 80112ee:	4621      	mov	r1, r4
 80112f0:	4628      	mov	r0, r5
 80112f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112f6:	f000 b9ad 	b.w	8011654 <_free_r>
	...

080112fc <_reclaim_reent>:
 80112fc:	4b2c      	ldr	r3, [pc, #176]	; (80113b0 <_reclaim_reent+0xb4>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	4283      	cmp	r3, r0
 8011302:	b570      	push	{r4, r5, r6, lr}
 8011304:	4604      	mov	r4, r0
 8011306:	d051      	beq.n	80113ac <_reclaim_reent+0xb0>
 8011308:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801130a:	b143      	cbz	r3, 801131e <_reclaim_reent+0x22>
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d14a      	bne.n	80113a8 <_reclaim_reent+0xac>
 8011312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011314:	6819      	ldr	r1, [r3, #0]
 8011316:	b111      	cbz	r1, 801131e <_reclaim_reent+0x22>
 8011318:	4620      	mov	r0, r4
 801131a:	f000 f99b 	bl	8011654 <_free_r>
 801131e:	6961      	ldr	r1, [r4, #20]
 8011320:	b111      	cbz	r1, 8011328 <_reclaim_reent+0x2c>
 8011322:	4620      	mov	r0, r4
 8011324:	f000 f996 	bl	8011654 <_free_r>
 8011328:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801132a:	b111      	cbz	r1, 8011332 <_reclaim_reent+0x36>
 801132c:	4620      	mov	r0, r4
 801132e:	f000 f991 	bl	8011654 <_free_r>
 8011332:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011334:	b111      	cbz	r1, 801133c <_reclaim_reent+0x40>
 8011336:	4620      	mov	r0, r4
 8011338:	f000 f98c 	bl	8011654 <_free_r>
 801133c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801133e:	b111      	cbz	r1, 8011346 <_reclaim_reent+0x4a>
 8011340:	4620      	mov	r0, r4
 8011342:	f000 f987 	bl	8011654 <_free_r>
 8011346:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011348:	b111      	cbz	r1, 8011350 <_reclaim_reent+0x54>
 801134a:	4620      	mov	r0, r4
 801134c:	f000 f982 	bl	8011654 <_free_r>
 8011350:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011352:	b111      	cbz	r1, 801135a <_reclaim_reent+0x5e>
 8011354:	4620      	mov	r0, r4
 8011356:	f000 f97d 	bl	8011654 <_free_r>
 801135a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801135c:	b111      	cbz	r1, 8011364 <_reclaim_reent+0x68>
 801135e:	4620      	mov	r0, r4
 8011360:	f000 f978 	bl	8011654 <_free_r>
 8011364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011366:	b111      	cbz	r1, 801136e <_reclaim_reent+0x72>
 8011368:	4620      	mov	r0, r4
 801136a:	f000 f973 	bl	8011654 <_free_r>
 801136e:	69a3      	ldr	r3, [r4, #24]
 8011370:	b1e3      	cbz	r3, 80113ac <_reclaim_reent+0xb0>
 8011372:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011374:	4620      	mov	r0, r4
 8011376:	4798      	blx	r3
 8011378:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801137a:	b1b9      	cbz	r1, 80113ac <_reclaim_reent+0xb0>
 801137c:	4620      	mov	r0, r4
 801137e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011382:	f7ff bfad 	b.w	80112e0 <cleanup_glue>
 8011386:	5949      	ldr	r1, [r1, r5]
 8011388:	b941      	cbnz	r1, 801139c <_reclaim_reent+0xa0>
 801138a:	3504      	adds	r5, #4
 801138c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801138e:	2d80      	cmp	r5, #128	; 0x80
 8011390:	68d9      	ldr	r1, [r3, #12]
 8011392:	d1f8      	bne.n	8011386 <_reclaim_reent+0x8a>
 8011394:	4620      	mov	r0, r4
 8011396:	f000 f95d 	bl	8011654 <_free_r>
 801139a:	e7ba      	b.n	8011312 <_reclaim_reent+0x16>
 801139c:	680e      	ldr	r6, [r1, #0]
 801139e:	4620      	mov	r0, r4
 80113a0:	f000 f958 	bl	8011654 <_free_r>
 80113a4:	4631      	mov	r1, r6
 80113a6:	e7ef      	b.n	8011388 <_reclaim_reent+0x8c>
 80113a8:	2500      	movs	r5, #0
 80113aa:	e7ef      	b.n	801138c <_reclaim_reent+0x90>
 80113ac:	bd70      	pop	{r4, r5, r6, pc}
 80113ae:	bf00      	nop
 80113b0:	200000d8 	.word	0x200000d8

080113b4 <_sbrk_r>:
 80113b4:	b538      	push	{r3, r4, r5, lr}
 80113b6:	4d06      	ldr	r5, [pc, #24]	; (80113d0 <_sbrk_r+0x1c>)
 80113b8:	2300      	movs	r3, #0
 80113ba:	4604      	mov	r4, r0
 80113bc:	4608      	mov	r0, r1
 80113be:	602b      	str	r3, [r5, #0]
 80113c0:	f7f3 fedc 	bl	800517c <_sbrk>
 80113c4:	1c43      	adds	r3, r0, #1
 80113c6:	d102      	bne.n	80113ce <_sbrk_r+0x1a>
 80113c8:	682b      	ldr	r3, [r5, #0]
 80113ca:	b103      	cbz	r3, 80113ce <_sbrk_r+0x1a>
 80113cc:	6023      	str	r3, [r4, #0]
 80113ce:	bd38      	pop	{r3, r4, r5, pc}
 80113d0:	20009b20 	.word	0x20009b20

080113d4 <siprintf>:
 80113d4:	b40e      	push	{r1, r2, r3}
 80113d6:	b500      	push	{lr}
 80113d8:	b09c      	sub	sp, #112	; 0x70
 80113da:	ab1d      	add	r3, sp, #116	; 0x74
 80113dc:	9002      	str	r0, [sp, #8]
 80113de:	9006      	str	r0, [sp, #24]
 80113e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80113e4:	4809      	ldr	r0, [pc, #36]	; (801140c <siprintf+0x38>)
 80113e6:	9107      	str	r1, [sp, #28]
 80113e8:	9104      	str	r1, [sp, #16]
 80113ea:	4909      	ldr	r1, [pc, #36]	; (8011410 <siprintf+0x3c>)
 80113ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80113f0:	9105      	str	r1, [sp, #20]
 80113f2:	6800      	ldr	r0, [r0, #0]
 80113f4:	9301      	str	r3, [sp, #4]
 80113f6:	a902      	add	r1, sp, #8
 80113f8:	f000 f9d4 	bl	80117a4 <_svfiprintf_r>
 80113fc:	9b02      	ldr	r3, [sp, #8]
 80113fe:	2200      	movs	r2, #0
 8011400:	701a      	strb	r2, [r3, #0]
 8011402:	b01c      	add	sp, #112	; 0x70
 8011404:	f85d eb04 	ldr.w	lr, [sp], #4
 8011408:	b003      	add	sp, #12
 801140a:	4770      	bx	lr
 801140c:	200000d8 	.word	0x200000d8
 8011410:	ffff0208 	.word	0xffff0208

08011414 <strcat>:
 8011414:	b510      	push	{r4, lr}
 8011416:	4602      	mov	r2, r0
 8011418:	7814      	ldrb	r4, [r2, #0]
 801141a:	4613      	mov	r3, r2
 801141c:	3201      	adds	r2, #1
 801141e:	2c00      	cmp	r4, #0
 8011420:	d1fa      	bne.n	8011418 <strcat+0x4>
 8011422:	3b01      	subs	r3, #1
 8011424:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011428:	f803 2f01 	strb.w	r2, [r3, #1]!
 801142c:	2a00      	cmp	r2, #0
 801142e:	d1f9      	bne.n	8011424 <strcat+0x10>
 8011430:	bd10      	pop	{r4, pc}

08011432 <strchr>:
 8011432:	b2c9      	uxtb	r1, r1
 8011434:	4603      	mov	r3, r0
 8011436:	f810 2b01 	ldrb.w	r2, [r0], #1
 801143a:	b11a      	cbz	r2, 8011444 <strchr+0x12>
 801143c:	428a      	cmp	r2, r1
 801143e:	d1f9      	bne.n	8011434 <strchr+0x2>
 8011440:	4618      	mov	r0, r3
 8011442:	4770      	bx	lr
 8011444:	2900      	cmp	r1, #0
 8011446:	bf18      	it	ne
 8011448:	2300      	movne	r3, #0
 801144a:	e7f9      	b.n	8011440 <strchr+0xe>

0801144c <strcpy>:
 801144c:	4603      	mov	r3, r0
 801144e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011452:	f803 2b01 	strb.w	r2, [r3], #1
 8011456:	2a00      	cmp	r2, #0
 8011458:	d1f9      	bne.n	801144e <strcpy+0x2>
 801145a:	4770      	bx	lr

0801145c <strncpy>:
 801145c:	b510      	push	{r4, lr}
 801145e:	3901      	subs	r1, #1
 8011460:	4603      	mov	r3, r0
 8011462:	b132      	cbz	r2, 8011472 <strncpy+0x16>
 8011464:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011468:	f803 4b01 	strb.w	r4, [r3], #1
 801146c:	3a01      	subs	r2, #1
 801146e:	2c00      	cmp	r4, #0
 8011470:	d1f7      	bne.n	8011462 <strncpy+0x6>
 8011472:	441a      	add	r2, r3
 8011474:	2100      	movs	r1, #0
 8011476:	4293      	cmp	r3, r2
 8011478:	d100      	bne.n	801147c <strncpy+0x20>
 801147a:	bd10      	pop	{r4, pc}
 801147c:	f803 1b01 	strb.w	r1, [r3], #1
 8011480:	e7f9      	b.n	8011476 <strncpy+0x1a>

08011482 <strstr>:
 8011482:	780a      	ldrb	r2, [r1, #0]
 8011484:	b570      	push	{r4, r5, r6, lr}
 8011486:	b96a      	cbnz	r2, 80114a4 <strstr+0x22>
 8011488:	bd70      	pop	{r4, r5, r6, pc}
 801148a:	429a      	cmp	r2, r3
 801148c:	d109      	bne.n	80114a2 <strstr+0x20>
 801148e:	460c      	mov	r4, r1
 8011490:	4605      	mov	r5, r0
 8011492:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011496:	2b00      	cmp	r3, #0
 8011498:	d0f6      	beq.n	8011488 <strstr+0x6>
 801149a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801149e:	429e      	cmp	r6, r3
 80114a0:	d0f7      	beq.n	8011492 <strstr+0x10>
 80114a2:	3001      	adds	r0, #1
 80114a4:	7803      	ldrb	r3, [r0, #0]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d1ef      	bne.n	801148a <strstr+0x8>
 80114aa:	4618      	mov	r0, r3
 80114ac:	e7ec      	b.n	8011488 <strstr+0x6>
	...

080114b0 <_strtol_l.constprop.0>:
 80114b0:	2b01      	cmp	r3, #1
 80114b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114b6:	d001      	beq.n	80114bc <_strtol_l.constprop.0+0xc>
 80114b8:	2b24      	cmp	r3, #36	; 0x24
 80114ba:	d906      	bls.n	80114ca <_strtol_l.constprop.0+0x1a>
 80114bc:	f7ff fd8e 	bl	8010fdc <__errno>
 80114c0:	2316      	movs	r3, #22
 80114c2:	6003      	str	r3, [r0, #0]
 80114c4:	2000      	movs	r0, #0
 80114c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80115b0 <_strtol_l.constprop.0+0x100>
 80114ce:	460d      	mov	r5, r1
 80114d0:	462e      	mov	r6, r5
 80114d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80114d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80114da:	f017 0708 	ands.w	r7, r7, #8
 80114de:	d1f7      	bne.n	80114d0 <_strtol_l.constprop.0+0x20>
 80114e0:	2c2d      	cmp	r4, #45	; 0x2d
 80114e2:	d132      	bne.n	801154a <_strtol_l.constprop.0+0x9a>
 80114e4:	782c      	ldrb	r4, [r5, #0]
 80114e6:	2701      	movs	r7, #1
 80114e8:	1cb5      	adds	r5, r6, #2
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d05b      	beq.n	80115a6 <_strtol_l.constprop.0+0xf6>
 80114ee:	2b10      	cmp	r3, #16
 80114f0:	d109      	bne.n	8011506 <_strtol_l.constprop.0+0x56>
 80114f2:	2c30      	cmp	r4, #48	; 0x30
 80114f4:	d107      	bne.n	8011506 <_strtol_l.constprop.0+0x56>
 80114f6:	782c      	ldrb	r4, [r5, #0]
 80114f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80114fc:	2c58      	cmp	r4, #88	; 0x58
 80114fe:	d14d      	bne.n	801159c <_strtol_l.constprop.0+0xec>
 8011500:	786c      	ldrb	r4, [r5, #1]
 8011502:	2310      	movs	r3, #16
 8011504:	3502      	adds	r5, #2
 8011506:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801150a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801150e:	f04f 0c00 	mov.w	ip, #0
 8011512:	fbb8 f9f3 	udiv	r9, r8, r3
 8011516:	4666      	mov	r6, ip
 8011518:	fb03 8a19 	mls	sl, r3, r9, r8
 801151c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011520:	f1be 0f09 	cmp.w	lr, #9
 8011524:	d816      	bhi.n	8011554 <_strtol_l.constprop.0+0xa4>
 8011526:	4674      	mov	r4, lr
 8011528:	42a3      	cmp	r3, r4
 801152a:	dd24      	ble.n	8011576 <_strtol_l.constprop.0+0xc6>
 801152c:	f1bc 0f00 	cmp.w	ip, #0
 8011530:	db1e      	blt.n	8011570 <_strtol_l.constprop.0+0xc0>
 8011532:	45b1      	cmp	r9, r6
 8011534:	d31c      	bcc.n	8011570 <_strtol_l.constprop.0+0xc0>
 8011536:	d101      	bne.n	801153c <_strtol_l.constprop.0+0x8c>
 8011538:	45a2      	cmp	sl, r4
 801153a:	db19      	blt.n	8011570 <_strtol_l.constprop.0+0xc0>
 801153c:	fb06 4603 	mla	r6, r6, r3, r4
 8011540:	f04f 0c01 	mov.w	ip, #1
 8011544:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011548:	e7e8      	b.n	801151c <_strtol_l.constprop.0+0x6c>
 801154a:	2c2b      	cmp	r4, #43	; 0x2b
 801154c:	bf04      	itt	eq
 801154e:	782c      	ldrbeq	r4, [r5, #0]
 8011550:	1cb5      	addeq	r5, r6, #2
 8011552:	e7ca      	b.n	80114ea <_strtol_l.constprop.0+0x3a>
 8011554:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011558:	f1be 0f19 	cmp.w	lr, #25
 801155c:	d801      	bhi.n	8011562 <_strtol_l.constprop.0+0xb2>
 801155e:	3c37      	subs	r4, #55	; 0x37
 8011560:	e7e2      	b.n	8011528 <_strtol_l.constprop.0+0x78>
 8011562:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011566:	f1be 0f19 	cmp.w	lr, #25
 801156a:	d804      	bhi.n	8011576 <_strtol_l.constprop.0+0xc6>
 801156c:	3c57      	subs	r4, #87	; 0x57
 801156e:	e7db      	b.n	8011528 <_strtol_l.constprop.0+0x78>
 8011570:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8011574:	e7e6      	b.n	8011544 <_strtol_l.constprop.0+0x94>
 8011576:	f1bc 0f00 	cmp.w	ip, #0
 801157a:	da05      	bge.n	8011588 <_strtol_l.constprop.0+0xd8>
 801157c:	2322      	movs	r3, #34	; 0x22
 801157e:	6003      	str	r3, [r0, #0]
 8011580:	4646      	mov	r6, r8
 8011582:	b942      	cbnz	r2, 8011596 <_strtol_l.constprop.0+0xe6>
 8011584:	4630      	mov	r0, r6
 8011586:	e79e      	b.n	80114c6 <_strtol_l.constprop.0+0x16>
 8011588:	b107      	cbz	r7, 801158c <_strtol_l.constprop.0+0xdc>
 801158a:	4276      	negs	r6, r6
 801158c:	2a00      	cmp	r2, #0
 801158e:	d0f9      	beq.n	8011584 <_strtol_l.constprop.0+0xd4>
 8011590:	f1bc 0f00 	cmp.w	ip, #0
 8011594:	d000      	beq.n	8011598 <_strtol_l.constprop.0+0xe8>
 8011596:	1e69      	subs	r1, r5, #1
 8011598:	6011      	str	r1, [r2, #0]
 801159a:	e7f3      	b.n	8011584 <_strtol_l.constprop.0+0xd4>
 801159c:	2430      	movs	r4, #48	; 0x30
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d1b1      	bne.n	8011506 <_strtol_l.constprop.0+0x56>
 80115a2:	2308      	movs	r3, #8
 80115a4:	e7af      	b.n	8011506 <_strtol_l.constprop.0+0x56>
 80115a6:	2c30      	cmp	r4, #48	; 0x30
 80115a8:	d0a5      	beq.n	80114f6 <_strtol_l.constprop.0+0x46>
 80115aa:	230a      	movs	r3, #10
 80115ac:	e7ab      	b.n	8011506 <_strtol_l.constprop.0+0x56>
 80115ae:	bf00      	nop
 80115b0:	08014d11 	.word	0x08014d11

080115b4 <strtol>:
 80115b4:	4613      	mov	r3, r2
 80115b6:	460a      	mov	r2, r1
 80115b8:	4601      	mov	r1, r0
 80115ba:	4802      	ldr	r0, [pc, #8]	; (80115c4 <strtol+0x10>)
 80115bc:	6800      	ldr	r0, [r0, #0]
 80115be:	f7ff bf77 	b.w	80114b0 <_strtol_l.constprop.0>
 80115c2:	bf00      	nop
 80115c4:	200000d8 	.word	0x200000d8

080115c8 <_vsniprintf_r>:
 80115c8:	b530      	push	{r4, r5, lr}
 80115ca:	4614      	mov	r4, r2
 80115cc:	2c00      	cmp	r4, #0
 80115ce:	b09b      	sub	sp, #108	; 0x6c
 80115d0:	4605      	mov	r5, r0
 80115d2:	461a      	mov	r2, r3
 80115d4:	da05      	bge.n	80115e2 <_vsniprintf_r+0x1a>
 80115d6:	238b      	movs	r3, #139	; 0x8b
 80115d8:	6003      	str	r3, [r0, #0]
 80115da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80115de:	b01b      	add	sp, #108	; 0x6c
 80115e0:	bd30      	pop	{r4, r5, pc}
 80115e2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80115e6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80115ea:	bf14      	ite	ne
 80115ec:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80115f0:	4623      	moveq	r3, r4
 80115f2:	9302      	str	r3, [sp, #8]
 80115f4:	9305      	str	r3, [sp, #20]
 80115f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115fa:	9100      	str	r1, [sp, #0]
 80115fc:	9104      	str	r1, [sp, #16]
 80115fe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011602:	4669      	mov	r1, sp
 8011604:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011606:	f000 f8cd 	bl	80117a4 <_svfiprintf_r>
 801160a:	1c43      	adds	r3, r0, #1
 801160c:	bfbc      	itt	lt
 801160e:	238b      	movlt	r3, #139	; 0x8b
 8011610:	602b      	strlt	r3, [r5, #0]
 8011612:	2c00      	cmp	r4, #0
 8011614:	d0e3      	beq.n	80115de <_vsniprintf_r+0x16>
 8011616:	9b00      	ldr	r3, [sp, #0]
 8011618:	2200      	movs	r2, #0
 801161a:	701a      	strb	r2, [r3, #0]
 801161c:	e7df      	b.n	80115de <_vsniprintf_r+0x16>
	...

08011620 <vsniprintf>:
 8011620:	b507      	push	{r0, r1, r2, lr}
 8011622:	9300      	str	r3, [sp, #0]
 8011624:	4613      	mov	r3, r2
 8011626:	460a      	mov	r2, r1
 8011628:	4601      	mov	r1, r0
 801162a:	4803      	ldr	r0, [pc, #12]	; (8011638 <vsniprintf+0x18>)
 801162c:	6800      	ldr	r0, [r0, #0]
 801162e:	f7ff ffcb 	bl	80115c8 <_vsniprintf_r>
 8011632:	b003      	add	sp, #12
 8011634:	f85d fb04 	ldr.w	pc, [sp], #4
 8011638:	200000d8 	.word	0x200000d8

0801163c <__malloc_lock>:
 801163c:	4801      	ldr	r0, [pc, #4]	; (8011644 <__malloc_lock+0x8>)
 801163e:	f7ff bda3 	b.w	8011188 <__retarget_lock_acquire_recursive>
 8011642:	bf00      	nop
 8011644:	20009b14 	.word	0x20009b14

08011648 <__malloc_unlock>:
 8011648:	4801      	ldr	r0, [pc, #4]	; (8011650 <__malloc_unlock+0x8>)
 801164a:	f7ff bd9e 	b.w	801118a <__retarget_lock_release_recursive>
 801164e:	bf00      	nop
 8011650:	20009b14 	.word	0x20009b14

08011654 <_free_r>:
 8011654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011656:	2900      	cmp	r1, #0
 8011658:	d044      	beq.n	80116e4 <_free_r+0x90>
 801165a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801165e:	9001      	str	r0, [sp, #4]
 8011660:	2b00      	cmp	r3, #0
 8011662:	f1a1 0404 	sub.w	r4, r1, #4
 8011666:	bfb8      	it	lt
 8011668:	18e4      	addlt	r4, r4, r3
 801166a:	f7ff ffe7 	bl	801163c <__malloc_lock>
 801166e:	4a1e      	ldr	r2, [pc, #120]	; (80116e8 <_free_r+0x94>)
 8011670:	9801      	ldr	r0, [sp, #4]
 8011672:	6813      	ldr	r3, [r2, #0]
 8011674:	b933      	cbnz	r3, 8011684 <_free_r+0x30>
 8011676:	6063      	str	r3, [r4, #4]
 8011678:	6014      	str	r4, [r2, #0]
 801167a:	b003      	add	sp, #12
 801167c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011680:	f7ff bfe2 	b.w	8011648 <__malloc_unlock>
 8011684:	42a3      	cmp	r3, r4
 8011686:	d908      	bls.n	801169a <_free_r+0x46>
 8011688:	6825      	ldr	r5, [r4, #0]
 801168a:	1961      	adds	r1, r4, r5
 801168c:	428b      	cmp	r3, r1
 801168e:	bf01      	itttt	eq
 8011690:	6819      	ldreq	r1, [r3, #0]
 8011692:	685b      	ldreq	r3, [r3, #4]
 8011694:	1949      	addeq	r1, r1, r5
 8011696:	6021      	streq	r1, [r4, #0]
 8011698:	e7ed      	b.n	8011676 <_free_r+0x22>
 801169a:	461a      	mov	r2, r3
 801169c:	685b      	ldr	r3, [r3, #4]
 801169e:	b10b      	cbz	r3, 80116a4 <_free_r+0x50>
 80116a0:	42a3      	cmp	r3, r4
 80116a2:	d9fa      	bls.n	801169a <_free_r+0x46>
 80116a4:	6811      	ldr	r1, [r2, #0]
 80116a6:	1855      	adds	r5, r2, r1
 80116a8:	42a5      	cmp	r5, r4
 80116aa:	d10b      	bne.n	80116c4 <_free_r+0x70>
 80116ac:	6824      	ldr	r4, [r4, #0]
 80116ae:	4421      	add	r1, r4
 80116b0:	1854      	adds	r4, r2, r1
 80116b2:	42a3      	cmp	r3, r4
 80116b4:	6011      	str	r1, [r2, #0]
 80116b6:	d1e0      	bne.n	801167a <_free_r+0x26>
 80116b8:	681c      	ldr	r4, [r3, #0]
 80116ba:	685b      	ldr	r3, [r3, #4]
 80116bc:	6053      	str	r3, [r2, #4]
 80116be:	4421      	add	r1, r4
 80116c0:	6011      	str	r1, [r2, #0]
 80116c2:	e7da      	b.n	801167a <_free_r+0x26>
 80116c4:	d902      	bls.n	80116cc <_free_r+0x78>
 80116c6:	230c      	movs	r3, #12
 80116c8:	6003      	str	r3, [r0, #0]
 80116ca:	e7d6      	b.n	801167a <_free_r+0x26>
 80116cc:	6825      	ldr	r5, [r4, #0]
 80116ce:	1961      	adds	r1, r4, r5
 80116d0:	428b      	cmp	r3, r1
 80116d2:	bf04      	itt	eq
 80116d4:	6819      	ldreq	r1, [r3, #0]
 80116d6:	685b      	ldreq	r3, [r3, #4]
 80116d8:	6063      	str	r3, [r4, #4]
 80116da:	bf04      	itt	eq
 80116dc:	1949      	addeq	r1, r1, r5
 80116de:	6021      	streq	r1, [r4, #0]
 80116e0:	6054      	str	r4, [r2, #4]
 80116e2:	e7ca      	b.n	801167a <_free_r+0x26>
 80116e4:	b003      	add	sp, #12
 80116e6:	bd30      	pop	{r4, r5, pc}
 80116e8:	20009b18 	.word	0x20009b18

080116ec <__ssputs_r>:
 80116ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116f0:	688e      	ldr	r6, [r1, #8]
 80116f2:	429e      	cmp	r6, r3
 80116f4:	4682      	mov	sl, r0
 80116f6:	460c      	mov	r4, r1
 80116f8:	4690      	mov	r8, r2
 80116fa:	461f      	mov	r7, r3
 80116fc:	d838      	bhi.n	8011770 <__ssputs_r+0x84>
 80116fe:	898a      	ldrh	r2, [r1, #12]
 8011700:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011704:	d032      	beq.n	801176c <__ssputs_r+0x80>
 8011706:	6825      	ldr	r5, [r4, #0]
 8011708:	6909      	ldr	r1, [r1, #16]
 801170a:	eba5 0901 	sub.w	r9, r5, r1
 801170e:	6965      	ldr	r5, [r4, #20]
 8011710:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011714:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011718:	3301      	adds	r3, #1
 801171a:	444b      	add	r3, r9
 801171c:	106d      	asrs	r5, r5, #1
 801171e:	429d      	cmp	r5, r3
 8011720:	bf38      	it	cc
 8011722:	461d      	movcc	r5, r3
 8011724:	0553      	lsls	r3, r2, #21
 8011726:	d531      	bpl.n	801178c <__ssputs_r+0xa0>
 8011728:	4629      	mov	r1, r5
 801172a:	f7ff fd65 	bl	80111f8 <_malloc_r>
 801172e:	4606      	mov	r6, r0
 8011730:	b950      	cbnz	r0, 8011748 <__ssputs_r+0x5c>
 8011732:	230c      	movs	r3, #12
 8011734:	f8ca 3000 	str.w	r3, [sl]
 8011738:	89a3      	ldrh	r3, [r4, #12]
 801173a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801173e:	81a3      	strh	r3, [r4, #12]
 8011740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011748:	6921      	ldr	r1, [r4, #16]
 801174a:	464a      	mov	r2, r9
 801174c:	f7ff fd1e 	bl	801118c <memcpy>
 8011750:	89a3      	ldrh	r3, [r4, #12]
 8011752:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801175a:	81a3      	strh	r3, [r4, #12]
 801175c:	6126      	str	r6, [r4, #16]
 801175e:	6165      	str	r5, [r4, #20]
 8011760:	444e      	add	r6, r9
 8011762:	eba5 0509 	sub.w	r5, r5, r9
 8011766:	6026      	str	r6, [r4, #0]
 8011768:	60a5      	str	r5, [r4, #8]
 801176a:	463e      	mov	r6, r7
 801176c:	42be      	cmp	r6, r7
 801176e:	d900      	bls.n	8011772 <__ssputs_r+0x86>
 8011770:	463e      	mov	r6, r7
 8011772:	6820      	ldr	r0, [r4, #0]
 8011774:	4632      	mov	r2, r6
 8011776:	4641      	mov	r1, r8
 8011778:	f000 faa8 	bl	8011ccc <memmove>
 801177c:	68a3      	ldr	r3, [r4, #8]
 801177e:	1b9b      	subs	r3, r3, r6
 8011780:	60a3      	str	r3, [r4, #8]
 8011782:	6823      	ldr	r3, [r4, #0]
 8011784:	4433      	add	r3, r6
 8011786:	6023      	str	r3, [r4, #0]
 8011788:	2000      	movs	r0, #0
 801178a:	e7db      	b.n	8011744 <__ssputs_r+0x58>
 801178c:	462a      	mov	r2, r5
 801178e:	f000 fab7 	bl	8011d00 <_realloc_r>
 8011792:	4606      	mov	r6, r0
 8011794:	2800      	cmp	r0, #0
 8011796:	d1e1      	bne.n	801175c <__ssputs_r+0x70>
 8011798:	6921      	ldr	r1, [r4, #16]
 801179a:	4650      	mov	r0, sl
 801179c:	f7ff ff5a 	bl	8011654 <_free_r>
 80117a0:	e7c7      	b.n	8011732 <__ssputs_r+0x46>
	...

080117a4 <_svfiprintf_r>:
 80117a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117a8:	4698      	mov	r8, r3
 80117aa:	898b      	ldrh	r3, [r1, #12]
 80117ac:	061b      	lsls	r3, r3, #24
 80117ae:	b09d      	sub	sp, #116	; 0x74
 80117b0:	4607      	mov	r7, r0
 80117b2:	460d      	mov	r5, r1
 80117b4:	4614      	mov	r4, r2
 80117b6:	d50e      	bpl.n	80117d6 <_svfiprintf_r+0x32>
 80117b8:	690b      	ldr	r3, [r1, #16]
 80117ba:	b963      	cbnz	r3, 80117d6 <_svfiprintf_r+0x32>
 80117bc:	2140      	movs	r1, #64	; 0x40
 80117be:	f7ff fd1b 	bl	80111f8 <_malloc_r>
 80117c2:	6028      	str	r0, [r5, #0]
 80117c4:	6128      	str	r0, [r5, #16]
 80117c6:	b920      	cbnz	r0, 80117d2 <_svfiprintf_r+0x2e>
 80117c8:	230c      	movs	r3, #12
 80117ca:	603b      	str	r3, [r7, #0]
 80117cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80117d0:	e0d1      	b.n	8011976 <_svfiprintf_r+0x1d2>
 80117d2:	2340      	movs	r3, #64	; 0x40
 80117d4:	616b      	str	r3, [r5, #20]
 80117d6:	2300      	movs	r3, #0
 80117d8:	9309      	str	r3, [sp, #36]	; 0x24
 80117da:	2320      	movs	r3, #32
 80117dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80117e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80117e4:	2330      	movs	r3, #48	; 0x30
 80117e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011990 <_svfiprintf_r+0x1ec>
 80117ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80117ee:	f04f 0901 	mov.w	r9, #1
 80117f2:	4623      	mov	r3, r4
 80117f4:	469a      	mov	sl, r3
 80117f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117fa:	b10a      	cbz	r2, 8011800 <_svfiprintf_r+0x5c>
 80117fc:	2a25      	cmp	r2, #37	; 0x25
 80117fe:	d1f9      	bne.n	80117f4 <_svfiprintf_r+0x50>
 8011800:	ebba 0b04 	subs.w	fp, sl, r4
 8011804:	d00b      	beq.n	801181e <_svfiprintf_r+0x7a>
 8011806:	465b      	mov	r3, fp
 8011808:	4622      	mov	r2, r4
 801180a:	4629      	mov	r1, r5
 801180c:	4638      	mov	r0, r7
 801180e:	f7ff ff6d 	bl	80116ec <__ssputs_r>
 8011812:	3001      	adds	r0, #1
 8011814:	f000 80aa 	beq.w	801196c <_svfiprintf_r+0x1c8>
 8011818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801181a:	445a      	add	r2, fp
 801181c:	9209      	str	r2, [sp, #36]	; 0x24
 801181e:	f89a 3000 	ldrb.w	r3, [sl]
 8011822:	2b00      	cmp	r3, #0
 8011824:	f000 80a2 	beq.w	801196c <_svfiprintf_r+0x1c8>
 8011828:	2300      	movs	r3, #0
 801182a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801182e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011832:	f10a 0a01 	add.w	sl, sl, #1
 8011836:	9304      	str	r3, [sp, #16]
 8011838:	9307      	str	r3, [sp, #28]
 801183a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801183e:	931a      	str	r3, [sp, #104]	; 0x68
 8011840:	4654      	mov	r4, sl
 8011842:	2205      	movs	r2, #5
 8011844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011848:	4851      	ldr	r0, [pc, #324]	; (8011990 <_svfiprintf_r+0x1ec>)
 801184a:	f7ee fcc9 	bl	80001e0 <memchr>
 801184e:	9a04      	ldr	r2, [sp, #16]
 8011850:	b9d8      	cbnz	r0, 801188a <_svfiprintf_r+0xe6>
 8011852:	06d0      	lsls	r0, r2, #27
 8011854:	bf44      	itt	mi
 8011856:	2320      	movmi	r3, #32
 8011858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801185c:	0711      	lsls	r1, r2, #28
 801185e:	bf44      	itt	mi
 8011860:	232b      	movmi	r3, #43	; 0x2b
 8011862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011866:	f89a 3000 	ldrb.w	r3, [sl]
 801186a:	2b2a      	cmp	r3, #42	; 0x2a
 801186c:	d015      	beq.n	801189a <_svfiprintf_r+0xf6>
 801186e:	9a07      	ldr	r2, [sp, #28]
 8011870:	4654      	mov	r4, sl
 8011872:	2000      	movs	r0, #0
 8011874:	f04f 0c0a 	mov.w	ip, #10
 8011878:	4621      	mov	r1, r4
 801187a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801187e:	3b30      	subs	r3, #48	; 0x30
 8011880:	2b09      	cmp	r3, #9
 8011882:	d94e      	bls.n	8011922 <_svfiprintf_r+0x17e>
 8011884:	b1b0      	cbz	r0, 80118b4 <_svfiprintf_r+0x110>
 8011886:	9207      	str	r2, [sp, #28]
 8011888:	e014      	b.n	80118b4 <_svfiprintf_r+0x110>
 801188a:	eba0 0308 	sub.w	r3, r0, r8
 801188e:	fa09 f303 	lsl.w	r3, r9, r3
 8011892:	4313      	orrs	r3, r2
 8011894:	9304      	str	r3, [sp, #16]
 8011896:	46a2      	mov	sl, r4
 8011898:	e7d2      	b.n	8011840 <_svfiprintf_r+0x9c>
 801189a:	9b03      	ldr	r3, [sp, #12]
 801189c:	1d19      	adds	r1, r3, #4
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	9103      	str	r1, [sp, #12]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	bfbb      	ittet	lt
 80118a6:	425b      	neglt	r3, r3
 80118a8:	f042 0202 	orrlt.w	r2, r2, #2
 80118ac:	9307      	strge	r3, [sp, #28]
 80118ae:	9307      	strlt	r3, [sp, #28]
 80118b0:	bfb8      	it	lt
 80118b2:	9204      	strlt	r2, [sp, #16]
 80118b4:	7823      	ldrb	r3, [r4, #0]
 80118b6:	2b2e      	cmp	r3, #46	; 0x2e
 80118b8:	d10c      	bne.n	80118d4 <_svfiprintf_r+0x130>
 80118ba:	7863      	ldrb	r3, [r4, #1]
 80118bc:	2b2a      	cmp	r3, #42	; 0x2a
 80118be:	d135      	bne.n	801192c <_svfiprintf_r+0x188>
 80118c0:	9b03      	ldr	r3, [sp, #12]
 80118c2:	1d1a      	adds	r2, r3, #4
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	9203      	str	r2, [sp, #12]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	bfb8      	it	lt
 80118cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80118d0:	3402      	adds	r4, #2
 80118d2:	9305      	str	r3, [sp, #20]
 80118d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80119a0 <_svfiprintf_r+0x1fc>
 80118d8:	7821      	ldrb	r1, [r4, #0]
 80118da:	2203      	movs	r2, #3
 80118dc:	4650      	mov	r0, sl
 80118de:	f7ee fc7f 	bl	80001e0 <memchr>
 80118e2:	b140      	cbz	r0, 80118f6 <_svfiprintf_r+0x152>
 80118e4:	2340      	movs	r3, #64	; 0x40
 80118e6:	eba0 000a 	sub.w	r0, r0, sl
 80118ea:	fa03 f000 	lsl.w	r0, r3, r0
 80118ee:	9b04      	ldr	r3, [sp, #16]
 80118f0:	4303      	orrs	r3, r0
 80118f2:	3401      	adds	r4, #1
 80118f4:	9304      	str	r3, [sp, #16]
 80118f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118fa:	4826      	ldr	r0, [pc, #152]	; (8011994 <_svfiprintf_r+0x1f0>)
 80118fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011900:	2206      	movs	r2, #6
 8011902:	f7ee fc6d 	bl	80001e0 <memchr>
 8011906:	2800      	cmp	r0, #0
 8011908:	d038      	beq.n	801197c <_svfiprintf_r+0x1d8>
 801190a:	4b23      	ldr	r3, [pc, #140]	; (8011998 <_svfiprintf_r+0x1f4>)
 801190c:	bb1b      	cbnz	r3, 8011956 <_svfiprintf_r+0x1b2>
 801190e:	9b03      	ldr	r3, [sp, #12]
 8011910:	3307      	adds	r3, #7
 8011912:	f023 0307 	bic.w	r3, r3, #7
 8011916:	3308      	adds	r3, #8
 8011918:	9303      	str	r3, [sp, #12]
 801191a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801191c:	4433      	add	r3, r6
 801191e:	9309      	str	r3, [sp, #36]	; 0x24
 8011920:	e767      	b.n	80117f2 <_svfiprintf_r+0x4e>
 8011922:	fb0c 3202 	mla	r2, ip, r2, r3
 8011926:	460c      	mov	r4, r1
 8011928:	2001      	movs	r0, #1
 801192a:	e7a5      	b.n	8011878 <_svfiprintf_r+0xd4>
 801192c:	2300      	movs	r3, #0
 801192e:	3401      	adds	r4, #1
 8011930:	9305      	str	r3, [sp, #20]
 8011932:	4619      	mov	r1, r3
 8011934:	f04f 0c0a 	mov.w	ip, #10
 8011938:	4620      	mov	r0, r4
 801193a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801193e:	3a30      	subs	r2, #48	; 0x30
 8011940:	2a09      	cmp	r2, #9
 8011942:	d903      	bls.n	801194c <_svfiprintf_r+0x1a8>
 8011944:	2b00      	cmp	r3, #0
 8011946:	d0c5      	beq.n	80118d4 <_svfiprintf_r+0x130>
 8011948:	9105      	str	r1, [sp, #20]
 801194a:	e7c3      	b.n	80118d4 <_svfiprintf_r+0x130>
 801194c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011950:	4604      	mov	r4, r0
 8011952:	2301      	movs	r3, #1
 8011954:	e7f0      	b.n	8011938 <_svfiprintf_r+0x194>
 8011956:	ab03      	add	r3, sp, #12
 8011958:	9300      	str	r3, [sp, #0]
 801195a:	462a      	mov	r2, r5
 801195c:	4b0f      	ldr	r3, [pc, #60]	; (801199c <_svfiprintf_r+0x1f8>)
 801195e:	a904      	add	r1, sp, #16
 8011960:	4638      	mov	r0, r7
 8011962:	f3af 8000 	nop.w
 8011966:	1c42      	adds	r2, r0, #1
 8011968:	4606      	mov	r6, r0
 801196a:	d1d6      	bne.n	801191a <_svfiprintf_r+0x176>
 801196c:	89ab      	ldrh	r3, [r5, #12]
 801196e:	065b      	lsls	r3, r3, #25
 8011970:	f53f af2c 	bmi.w	80117cc <_svfiprintf_r+0x28>
 8011974:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011976:	b01d      	add	sp, #116	; 0x74
 8011978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801197c:	ab03      	add	r3, sp, #12
 801197e:	9300      	str	r3, [sp, #0]
 8011980:	462a      	mov	r2, r5
 8011982:	4b06      	ldr	r3, [pc, #24]	; (801199c <_svfiprintf_r+0x1f8>)
 8011984:	a904      	add	r1, sp, #16
 8011986:	4638      	mov	r0, r7
 8011988:	f000 f87a 	bl	8011a80 <_printf_i>
 801198c:	e7eb      	b.n	8011966 <_svfiprintf_r+0x1c2>
 801198e:	bf00      	nop
 8011990:	08014e11 	.word	0x08014e11
 8011994:	08014e1b 	.word	0x08014e1b
 8011998:	00000000 	.word	0x00000000
 801199c:	080116ed 	.word	0x080116ed
 80119a0:	08014e17 	.word	0x08014e17

080119a4 <_printf_common>:
 80119a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119a8:	4616      	mov	r6, r2
 80119aa:	4699      	mov	r9, r3
 80119ac:	688a      	ldr	r2, [r1, #8]
 80119ae:	690b      	ldr	r3, [r1, #16]
 80119b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80119b4:	4293      	cmp	r3, r2
 80119b6:	bfb8      	it	lt
 80119b8:	4613      	movlt	r3, r2
 80119ba:	6033      	str	r3, [r6, #0]
 80119bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80119c0:	4607      	mov	r7, r0
 80119c2:	460c      	mov	r4, r1
 80119c4:	b10a      	cbz	r2, 80119ca <_printf_common+0x26>
 80119c6:	3301      	adds	r3, #1
 80119c8:	6033      	str	r3, [r6, #0]
 80119ca:	6823      	ldr	r3, [r4, #0]
 80119cc:	0699      	lsls	r1, r3, #26
 80119ce:	bf42      	ittt	mi
 80119d0:	6833      	ldrmi	r3, [r6, #0]
 80119d2:	3302      	addmi	r3, #2
 80119d4:	6033      	strmi	r3, [r6, #0]
 80119d6:	6825      	ldr	r5, [r4, #0]
 80119d8:	f015 0506 	ands.w	r5, r5, #6
 80119dc:	d106      	bne.n	80119ec <_printf_common+0x48>
 80119de:	f104 0a19 	add.w	sl, r4, #25
 80119e2:	68e3      	ldr	r3, [r4, #12]
 80119e4:	6832      	ldr	r2, [r6, #0]
 80119e6:	1a9b      	subs	r3, r3, r2
 80119e8:	42ab      	cmp	r3, r5
 80119ea:	dc26      	bgt.n	8011a3a <_printf_common+0x96>
 80119ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80119f0:	1e13      	subs	r3, r2, #0
 80119f2:	6822      	ldr	r2, [r4, #0]
 80119f4:	bf18      	it	ne
 80119f6:	2301      	movne	r3, #1
 80119f8:	0692      	lsls	r2, r2, #26
 80119fa:	d42b      	bmi.n	8011a54 <_printf_common+0xb0>
 80119fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011a00:	4649      	mov	r1, r9
 8011a02:	4638      	mov	r0, r7
 8011a04:	47c0      	blx	r8
 8011a06:	3001      	adds	r0, #1
 8011a08:	d01e      	beq.n	8011a48 <_printf_common+0xa4>
 8011a0a:	6823      	ldr	r3, [r4, #0]
 8011a0c:	68e5      	ldr	r5, [r4, #12]
 8011a0e:	6832      	ldr	r2, [r6, #0]
 8011a10:	f003 0306 	and.w	r3, r3, #6
 8011a14:	2b04      	cmp	r3, #4
 8011a16:	bf08      	it	eq
 8011a18:	1aad      	subeq	r5, r5, r2
 8011a1a:	68a3      	ldr	r3, [r4, #8]
 8011a1c:	6922      	ldr	r2, [r4, #16]
 8011a1e:	bf0c      	ite	eq
 8011a20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011a24:	2500      	movne	r5, #0
 8011a26:	4293      	cmp	r3, r2
 8011a28:	bfc4      	itt	gt
 8011a2a:	1a9b      	subgt	r3, r3, r2
 8011a2c:	18ed      	addgt	r5, r5, r3
 8011a2e:	2600      	movs	r6, #0
 8011a30:	341a      	adds	r4, #26
 8011a32:	42b5      	cmp	r5, r6
 8011a34:	d11a      	bne.n	8011a6c <_printf_common+0xc8>
 8011a36:	2000      	movs	r0, #0
 8011a38:	e008      	b.n	8011a4c <_printf_common+0xa8>
 8011a3a:	2301      	movs	r3, #1
 8011a3c:	4652      	mov	r2, sl
 8011a3e:	4649      	mov	r1, r9
 8011a40:	4638      	mov	r0, r7
 8011a42:	47c0      	blx	r8
 8011a44:	3001      	adds	r0, #1
 8011a46:	d103      	bne.n	8011a50 <_printf_common+0xac>
 8011a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a50:	3501      	adds	r5, #1
 8011a52:	e7c6      	b.n	80119e2 <_printf_common+0x3e>
 8011a54:	18e1      	adds	r1, r4, r3
 8011a56:	1c5a      	adds	r2, r3, #1
 8011a58:	2030      	movs	r0, #48	; 0x30
 8011a5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011a5e:	4422      	add	r2, r4
 8011a60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011a64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011a68:	3302      	adds	r3, #2
 8011a6a:	e7c7      	b.n	80119fc <_printf_common+0x58>
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	4622      	mov	r2, r4
 8011a70:	4649      	mov	r1, r9
 8011a72:	4638      	mov	r0, r7
 8011a74:	47c0      	blx	r8
 8011a76:	3001      	adds	r0, #1
 8011a78:	d0e6      	beq.n	8011a48 <_printf_common+0xa4>
 8011a7a:	3601      	adds	r6, #1
 8011a7c:	e7d9      	b.n	8011a32 <_printf_common+0x8e>
	...

08011a80 <_printf_i>:
 8011a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a84:	7e0f      	ldrb	r7, [r1, #24]
 8011a86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011a88:	2f78      	cmp	r7, #120	; 0x78
 8011a8a:	4691      	mov	r9, r2
 8011a8c:	4680      	mov	r8, r0
 8011a8e:	460c      	mov	r4, r1
 8011a90:	469a      	mov	sl, r3
 8011a92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011a96:	d807      	bhi.n	8011aa8 <_printf_i+0x28>
 8011a98:	2f62      	cmp	r7, #98	; 0x62
 8011a9a:	d80a      	bhi.n	8011ab2 <_printf_i+0x32>
 8011a9c:	2f00      	cmp	r7, #0
 8011a9e:	f000 80d8 	beq.w	8011c52 <_printf_i+0x1d2>
 8011aa2:	2f58      	cmp	r7, #88	; 0x58
 8011aa4:	f000 80a3 	beq.w	8011bee <_printf_i+0x16e>
 8011aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011aac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011ab0:	e03a      	b.n	8011b28 <_printf_i+0xa8>
 8011ab2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011ab6:	2b15      	cmp	r3, #21
 8011ab8:	d8f6      	bhi.n	8011aa8 <_printf_i+0x28>
 8011aba:	a101      	add	r1, pc, #4	; (adr r1, 8011ac0 <_printf_i+0x40>)
 8011abc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ac0:	08011b19 	.word	0x08011b19
 8011ac4:	08011b2d 	.word	0x08011b2d
 8011ac8:	08011aa9 	.word	0x08011aa9
 8011acc:	08011aa9 	.word	0x08011aa9
 8011ad0:	08011aa9 	.word	0x08011aa9
 8011ad4:	08011aa9 	.word	0x08011aa9
 8011ad8:	08011b2d 	.word	0x08011b2d
 8011adc:	08011aa9 	.word	0x08011aa9
 8011ae0:	08011aa9 	.word	0x08011aa9
 8011ae4:	08011aa9 	.word	0x08011aa9
 8011ae8:	08011aa9 	.word	0x08011aa9
 8011aec:	08011c39 	.word	0x08011c39
 8011af0:	08011b5d 	.word	0x08011b5d
 8011af4:	08011c1b 	.word	0x08011c1b
 8011af8:	08011aa9 	.word	0x08011aa9
 8011afc:	08011aa9 	.word	0x08011aa9
 8011b00:	08011c5b 	.word	0x08011c5b
 8011b04:	08011aa9 	.word	0x08011aa9
 8011b08:	08011b5d 	.word	0x08011b5d
 8011b0c:	08011aa9 	.word	0x08011aa9
 8011b10:	08011aa9 	.word	0x08011aa9
 8011b14:	08011c23 	.word	0x08011c23
 8011b18:	682b      	ldr	r3, [r5, #0]
 8011b1a:	1d1a      	adds	r2, r3, #4
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	602a      	str	r2, [r5, #0]
 8011b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011b28:	2301      	movs	r3, #1
 8011b2a:	e0a3      	b.n	8011c74 <_printf_i+0x1f4>
 8011b2c:	6820      	ldr	r0, [r4, #0]
 8011b2e:	6829      	ldr	r1, [r5, #0]
 8011b30:	0606      	lsls	r6, r0, #24
 8011b32:	f101 0304 	add.w	r3, r1, #4
 8011b36:	d50a      	bpl.n	8011b4e <_printf_i+0xce>
 8011b38:	680e      	ldr	r6, [r1, #0]
 8011b3a:	602b      	str	r3, [r5, #0]
 8011b3c:	2e00      	cmp	r6, #0
 8011b3e:	da03      	bge.n	8011b48 <_printf_i+0xc8>
 8011b40:	232d      	movs	r3, #45	; 0x2d
 8011b42:	4276      	negs	r6, r6
 8011b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b48:	485e      	ldr	r0, [pc, #376]	; (8011cc4 <_printf_i+0x244>)
 8011b4a:	230a      	movs	r3, #10
 8011b4c:	e019      	b.n	8011b82 <_printf_i+0x102>
 8011b4e:	680e      	ldr	r6, [r1, #0]
 8011b50:	602b      	str	r3, [r5, #0]
 8011b52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011b56:	bf18      	it	ne
 8011b58:	b236      	sxthne	r6, r6
 8011b5a:	e7ef      	b.n	8011b3c <_printf_i+0xbc>
 8011b5c:	682b      	ldr	r3, [r5, #0]
 8011b5e:	6820      	ldr	r0, [r4, #0]
 8011b60:	1d19      	adds	r1, r3, #4
 8011b62:	6029      	str	r1, [r5, #0]
 8011b64:	0601      	lsls	r1, r0, #24
 8011b66:	d501      	bpl.n	8011b6c <_printf_i+0xec>
 8011b68:	681e      	ldr	r6, [r3, #0]
 8011b6a:	e002      	b.n	8011b72 <_printf_i+0xf2>
 8011b6c:	0646      	lsls	r6, r0, #25
 8011b6e:	d5fb      	bpl.n	8011b68 <_printf_i+0xe8>
 8011b70:	881e      	ldrh	r6, [r3, #0]
 8011b72:	4854      	ldr	r0, [pc, #336]	; (8011cc4 <_printf_i+0x244>)
 8011b74:	2f6f      	cmp	r7, #111	; 0x6f
 8011b76:	bf0c      	ite	eq
 8011b78:	2308      	moveq	r3, #8
 8011b7a:	230a      	movne	r3, #10
 8011b7c:	2100      	movs	r1, #0
 8011b7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011b82:	6865      	ldr	r5, [r4, #4]
 8011b84:	60a5      	str	r5, [r4, #8]
 8011b86:	2d00      	cmp	r5, #0
 8011b88:	bfa2      	ittt	ge
 8011b8a:	6821      	ldrge	r1, [r4, #0]
 8011b8c:	f021 0104 	bicge.w	r1, r1, #4
 8011b90:	6021      	strge	r1, [r4, #0]
 8011b92:	b90e      	cbnz	r6, 8011b98 <_printf_i+0x118>
 8011b94:	2d00      	cmp	r5, #0
 8011b96:	d04d      	beq.n	8011c34 <_printf_i+0x1b4>
 8011b98:	4615      	mov	r5, r2
 8011b9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011b9e:	fb03 6711 	mls	r7, r3, r1, r6
 8011ba2:	5dc7      	ldrb	r7, [r0, r7]
 8011ba4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011ba8:	4637      	mov	r7, r6
 8011baa:	42bb      	cmp	r3, r7
 8011bac:	460e      	mov	r6, r1
 8011bae:	d9f4      	bls.n	8011b9a <_printf_i+0x11a>
 8011bb0:	2b08      	cmp	r3, #8
 8011bb2:	d10b      	bne.n	8011bcc <_printf_i+0x14c>
 8011bb4:	6823      	ldr	r3, [r4, #0]
 8011bb6:	07de      	lsls	r6, r3, #31
 8011bb8:	d508      	bpl.n	8011bcc <_printf_i+0x14c>
 8011bba:	6923      	ldr	r3, [r4, #16]
 8011bbc:	6861      	ldr	r1, [r4, #4]
 8011bbe:	4299      	cmp	r1, r3
 8011bc0:	bfde      	ittt	le
 8011bc2:	2330      	movle	r3, #48	; 0x30
 8011bc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011bc8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011bcc:	1b52      	subs	r2, r2, r5
 8011bce:	6122      	str	r2, [r4, #16]
 8011bd0:	f8cd a000 	str.w	sl, [sp]
 8011bd4:	464b      	mov	r3, r9
 8011bd6:	aa03      	add	r2, sp, #12
 8011bd8:	4621      	mov	r1, r4
 8011bda:	4640      	mov	r0, r8
 8011bdc:	f7ff fee2 	bl	80119a4 <_printf_common>
 8011be0:	3001      	adds	r0, #1
 8011be2:	d14c      	bne.n	8011c7e <_printf_i+0x1fe>
 8011be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011be8:	b004      	add	sp, #16
 8011bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bee:	4835      	ldr	r0, [pc, #212]	; (8011cc4 <_printf_i+0x244>)
 8011bf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011bf4:	6829      	ldr	r1, [r5, #0]
 8011bf6:	6823      	ldr	r3, [r4, #0]
 8011bf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8011bfc:	6029      	str	r1, [r5, #0]
 8011bfe:	061d      	lsls	r5, r3, #24
 8011c00:	d514      	bpl.n	8011c2c <_printf_i+0x1ac>
 8011c02:	07df      	lsls	r7, r3, #31
 8011c04:	bf44      	itt	mi
 8011c06:	f043 0320 	orrmi.w	r3, r3, #32
 8011c0a:	6023      	strmi	r3, [r4, #0]
 8011c0c:	b91e      	cbnz	r6, 8011c16 <_printf_i+0x196>
 8011c0e:	6823      	ldr	r3, [r4, #0]
 8011c10:	f023 0320 	bic.w	r3, r3, #32
 8011c14:	6023      	str	r3, [r4, #0]
 8011c16:	2310      	movs	r3, #16
 8011c18:	e7b0      	b.n	8011b7c <_printf_i+0xfc>
 8011c1a:	6823      	ldr	r3, [r4, #0]
 8011c1c:	f043 0320 	orr.w	r3, r3, #32
 8011c20:	6023      	str	r3, [r4, #0]
 8011c22:	2378      	movs	r3, #120	; 0x78
 8011c24:	4828      	ldr	r0, [pc, #160]	; (8011cc8 <_printf_i+0x248>)
 8011c26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011c2a:	e7e3      	b.n	8011bf4 <_printf_i+0x174>
 8011c2c:	0659      	lsls	r1, r3, #25
 8011c2e:	bf48      	it	mi
 8011c30:	b2b6      	uxthmi	r6, r6
 8011c32:	e7e6      	b.n	8011c02 <_printf_i+0x182>
 8011c34:	4615      	mov	r5, r2
 8011c36:	e7bb      	b.n	8011bb0 <_printf_i+0x130>
 8011c38:	682b      	ldr	r3, [r5, #0]
 8011c3a:	6826      	ldr	r6, [r4, #0]
 8011c3c:	6961      	ldr	r1, [r4, #20]
 8011c3e:	1d18      	adds	r0, r3, #4
 8011c40:	6028      	str	r0, [r5, #0]
 8011c42:	0635      	lsls	r5, r6, #24
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	d501      	bpl.n	8011c4c <_printf_i+0x1cc>
 8011c48:	6019      	str	r1, [r3, #0]
 8011c4a:	e002      	b.n	8011c52 <_printf_i+0x1d2>
 8011c4c:	0670      	lsls	r0, r6, #25
 8011c4e:	d5fb      	bpl.n	8011c48 <_printf_i+0x1c8>
 8011c50:	8019      	strh	r1, [r3, #0]
 8011c52:	2300      	movs	r3, #0
 8011c54:	6123      	str	r3, [r4, #16]
 8011c56:	4615      	mov	r5, r2
 8011c58:	e7ba      	b.n	8011bd0 <_printf_i+0x150>
 8011c5a:	682b      	ldr	r3, [r5, #0]
 8011c5c:	1d1a      	adds	r2, r3, #4
 8011c5e:	602a      	str	r2, [r5, #0]
 8011c60:	681d      	ldr	r5, [r3, #0]
 8011c62:	6862      	ldr	r2, [r4, #4]
 8011c64:	2100      	movs	r1, #0
 8011c66:	4628      	mov	r0, r5
 8011c68:	f7ee faba 	bl	80001e0 <memchr>
 8011c6c:	b108      	cbz	r0, 8011c72 <_printf_i+0x1f2>
 8011c6e:	1b40      	subs	r0, r0, r5
 8011c70:	6060      	str	r0, [r4, #4]
 8011c72:	6863      	ldr	r3, [r4, #4]
 8011c74:	6123      	str	r3, [r4, #16]
 8011c76:	2300      	movs	r3, #0
 8011c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c7c:	e7a8      	b.n	8011bd0 <_printf_i+0x150>
 8011c7e:	6923      	ldr	r3, [r4, #16]
 8011c80:	462a      	mov	r2, r5
 8011c82:	4649      	mov	r1, r9
 8011c84:	4640      	mov	r0, r8
 8011c86:	47d0      	blx	sl
 8011c88:	3001      	adds	r0, #1
 8011c8a:	d0ab      	beq.n	8011be4 <_printf_i+0x164>
 8011c8c:	6823      	ldr	r3, [r4, #0]
 8011c8e:	079b      	lsls	r3, r3, #30
 8011c90:	d413      	bmi.n	8011cba <_printf_i+0x23a>
 8011c92:	68e0      	ldr	r0, [r4, #12]
 8011c94:	9b03      	ldr	r3, [sp, #12]
 8011c96:	4298      	cmp	r0, r3
 8011c98:	bfb8      	it	lt
 8011c9a:	4618      	movlt	r0, r3
 8011c9c:	e7a4      	b.n	8011be8 <_printf_i+0x168>
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	4632      	mov	r2, r6
 8011ca2:	4649      	mov	r1, r9
 8011ca4:	4640      	mov	r0, r8
 8011ca6:	47d0      	blx	sl
 8011ca8:	3001      	adds	r0, #1
 8011caa:	d09b      	beq.n	8011be4 <_printf_i+0x164>
 8011cac:	3501      	adds	r5, #1
 8011cae:	68e3      	ldr	r3, [r4, #12]
 8011cb0:	9903      	ldr	r1, [sp, #12]
 8011cb2:	1a5b      	subs	r3, r3, r1
 8011cb4:	42ab      	cmp	r3, r5
 8011cb6:	dcf2      	bgt.n	8011c9e <_printf_i+0x21e>
 8011cb8:	e7eb      	b.n	8011c92 <_printf_i+0x212>
 8011cba:	2500      	movs	r5, #0
 8011cbc:	f104 0619 	add.w	r6, r4, #25
 8011cc0:	e7f5      	b.n	8011cae <_printf_i+0x22e>
 8011cc2:	bf00      	nop
 8011cc4:	08014e22 	.word	0x08014e22
 8011cc8:	08014e33 	.word	0x08014e33

08011ccc <memmove>:
 8011ccc:	4288      	cmp	r0, r1
 8011cce:	b510      	push	{r4, lr}
 8011cd0:	eb01 0402 	add.w	r4, r1, r2
 8011cd4:	d902      	bls.n	8011cdc <memmove+0x10>
 8011cd6:	4284      	cmp	r4, r0
 8011cd8:	4623      	mov	r3, r4
 8011cda:	d807      	bhi.n	8011cec <memmove+0x20>
 8011cdc:	1e43      	subs	r3, r0, #1
 8011cde:	42a1      	cmp	r1, r4
 8011ce0:	d008      	beq.n	8011cf4 <memmove+0x28>
 8011ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011cea:	e7f8      	b.n	8011cde <memmove+0x12>
 8011cec:	4402      	add	r2, r0
 8011cee:	4601      	mov	r1, r0
 8011cf0:	428a      	cmp	r2, r1
 8011cf2:	d100      	bne.n	8011cf6 <memmove+0x2a>
 8011cf4:	bd10      	pop	{r4, pc}
 8011cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011cfe:	e7f7      	b.n	8011cf0 <memmove+0x24>

08011d00 <_realloc_r>:
 8011d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d04:	4680      	mov	r8, r0
 8011d06:	4614      	mov	r4, r2
 8011d08:	460e      	mov	r6, r1
 8011d0a:	b921      	cbnz	r1, 8011d16 <_realloc_r+0x16>
 8011d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d10:	4611      	mov	r1, r2
 8011d12:	f7ff ba71 	b.w	80111f8 <_malloc_r>
 8011d16:	b92a      	cbnz	r2, 8011d24 <_realloc_r+0x24>
 8011d18:	f7ff fc9c 	bl	8011654 <_free_r>
 8011d1c:	4625      	mov	r5, r4
 8011d1e:	4628      	mov	r0, r5
 8011d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d24:	f000 f81b 	bl	8011d5e <_malloc_usable_size_r>
 8011d28:	4284      	cmp	r4, r0
 8011d2a:	4607      	mov	r7, r0
 8011d2c:	d802      	bhi.n	8011d34 <_realloc_r+0x34>
 8011d2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011d32:	d812      	bhi.n	8011d5a <_realloc_r+0x5a>
 8011d34:	4621      	mov	r1, r4
 8011d36:	4640      	mov	r0, r8
 8011d38:	f7ff fa5e 	bl	80111f8 <_malloc_r>
 8011d3c:	4605      	mov	r5, r0
 8011d3e:	2800      	cmp	r0, #0
 8011d40:	d0ed      	beq.n	8011d1e <_realloc_r+0x1e>
 8011d42:	42bc      	cmp	r4, r7
 8011d44:	4622      	mov	r2, r4
 8011d46:	4631      	mov	r1, r6
 8011d48:	bf28      	it	cs
 8011d4a:	463a      	movcs	r2, r7
 8011d4c:	f7ff fa1e 	bl	801118c <memcpy>
 8011d50:	4631      	mov	r1, r6
 8011d52:	4640      	mov	r0, r8
 8011d54:	f7ff fc7e 	bl	8011654 <_free_r>
 8011d58:	e7e1      	b.n	8011d1e <_realloc_r+0x1e>
 8011d5a:	4635      	mov	r5, r6
 8011d5c:	e7df      	b.n	8011d1e <_realloc_r+0x1e>

08011d5e <_malloc_usable_size_r>:
 8011d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d62:	1f18      	subs	r0, r3, #4
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	bfbc      	itt	lt
 8011d68:	580b      	ldrlt	r3, [r1, r0]
 8011d6a:	18c0      	addlt	r0, r0, r3
 8011d6c:	4770      	bx	lr
	...

08011d70 <_init>:
 8011d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d72:	bf00      	nop
 8011d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d76:	bc08      	pop	{r3}
 8011d78:	469e      	mov	lr, r3
 8011d7a:	4770      	bx	lr

08011d7c <_fini>:
 8011d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d7e:	bf00      	nop
 8011d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d82:	bc08      	pop	{r3}
 8011d84:	469e      	mov	lr, r3
 8011d86:	4770      	bx	lr
